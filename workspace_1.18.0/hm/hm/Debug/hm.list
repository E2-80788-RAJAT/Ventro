
hm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013e58  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  08013fe8  08013fe8  00014fe8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014330  08014330  000161b4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08014330  08014330  00015330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014338  08014338  000161b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014338  08014338  00015338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801433c  0801433c  0001533c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001b4  20000000  08014340  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000161b4  2**0
                  CONTENTS
 10 .bss          00005638  200001b8  200001b8  000161b8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200057f0  200057f0  000161b8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000161b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021a6d  00000000  00000000  000161e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000432b  00000000  00000000  00037c51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bb8  00000000  00000000  0003bf80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015a5  00000000  00000000  0003db38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002649e  00000000  00000000  0003f0dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020e94  00000000  00000000  0006557b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ebcca  00000000  00000000  0008640f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001720d9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007d88  00000000  00000000  0017211c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  00179ea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001b8 	.word	0x200001b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013fd0 	.word	0x08013fd0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001bc 	.word	0x200001bc
 80001cc:	08013fd0 	.word	0x08013fd0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b988 	b.w	8000fa0 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	468e      	mov	lr, r1
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	4688      	mov	r8, r1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d14a      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4617      	mov	r7, r2
 8000cbc:	d962      	bls.n	8000d84 <__udivmoddi4+0xdc>
 8000cbe:	fab2 f682 	clz	r6, r2
 8000cc2:	b14e      	cbz	r6, 8000cd8 <__udivmoddi4+0x30>
 8000cc4:	f1c6 0320 	rsb	r3, r6, #32
 8000cc8:	fa01 f806 	lsl.w	r8, r1, r6
 8000ccc:	fa20 f303 	lsr.w	r3, r0, r3
 8000cd0:	40b7      	lsls	r7, r6
 8000cd2:	ea43 0808 	orr.w	r8, r3, r8
 8000cd6:	40b4      	lsls	r4, r6
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	fa1f fc87 	uxth.w	ip, r7
 8000ce0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ce4:	0c23      	lsrs	r3, r4, #16
 8000ce6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cee:	fb01 f20c 	mul.w	r2, r1, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0x62>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cfc:	f080 80ea 	bcs.w	8000ed4 <__udivmoddi4+0x22c>
 8000d00:	429a      	cmp	r2, r3
 8000d02:	f240 80e7 	bls.w	8000ed4 <__udivmoddi4+0x22c>
 8000d06:	3902      	subs	r1, #2
 8000d08:	443b      	add	r3, r7
 8000d0a:	1a9a      	subs	r2, r3, r2
 8000d0c:	b2a3      	uxth	r3, r4
 8000d0e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d12:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d1e:	459c      	cmp	ip, r3
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0x8e>
 8000d22:	18fb      	adds	r3, r7, r3
 8000d24:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d28:	f080 80d6 	bcs.w	8000ed8 <__udivmoddi4+0x230>
 8000d2c:	459c      	cmp	ip, r3
 8000d2e:	f240 80d3 	bls.w	8000ed8 <__udivmoddi4+0x230>
 8000d32:	443b      	add	r3, r7
 8000d34:	3802      	subs	r0, #2
 8000d36:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d3a:	eba3 030c 	sub.w	r3, r3, ip
 8000d3e:	2100      	movs	r1, #0
 8000d40:	b11d      	cbz	r5, 8000d4a <__udivmoddi4+0xa2>
 8000d42:	40f3      	lsrs	r3, r6
 8000d44:	2200      	movs	r2, #0
 8000d46:	e9c5 3200 	strd	r3, r2, [r5]
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d905      	bls.n	8000d5e <__udivmoddi4+0xb6>
 8000d52:	b10d      	cbz	r5, 8000d58 <__udivmoddi4+0xb0>
 8000d54:	e9c5 0100 	strd	r0, r1, [r5]
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4608      	mov	r0, r1
 8000d5c:	e7f5      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d5e:	fab3 f183 	clz	r1, r3
 8000d62:	2900      	cmp	r1, #0
 8000d64:	d146      	bne.n	8000df4 <__udivmoddi4+0x14c>
 8000d66:	4573      	cmp	r3, lr
 8000d68:	d302      	bcc.n	8000d70 <__udivmoddi4+0xc8>
 8000d6a:	4282      	cmp	r2, r0
 8000d6c:	f200 8105 	bhi.w	8000f7a <__udivmoddi4+0x2d2>
 8000d70:	1a84      	subs	r4, r0, r2
 8000d72:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d76:	2001      	movs	r0, #1
 8000d78:	4690      	mov	r8, r2
 8000d7a:	2d00      	cmp	r5, #0
 8000d7c:	d0e5      	beq.n	8000d4a <__udivmoddi4+0xa2>
 8000d7e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d82:	e7e2      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	f000 8090 	beq.w	8000eaa <__udivmoddi4+0x202>
 8000d8a:	fab2 f682 	clz	r6, r2
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	f040 80a4 	bne.w	8000edc <__udivmoddi4+0x234>
 8000d94:	1a8a      	subs	r2, r1, r2
 8000d96:	0c03      	lsrs	r3, r0, #16
 8000d98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d9c:	b280      	uxth	r0, r0
 8000d9e:	b2bc      	uxth	r4, r7
 8000da0:	2101      	movs	r1, #1
 8000da2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000da6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000daa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dae:	fb04 f20c 	mul.w	r2, r4, ip
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x11e>
 8000db6:	18fb      	adds	r3, r7, r3
 8000db8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x11c>
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	f200 80e0 	bhi.w	8000f84 <__udivmoddi4+0x2dc>
 8000dc4:	46c4      	mov	ip, r8
 8000dc6:	1a9b      	subs	r3, r3, r2
 8000dc8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dcc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000dd0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000dd4:	fb02 f404 	mul.w	r4, r2, r4
 8000dd8:	429c      	cmp	r4, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x144>
 8000ddc:	18fb      	adds	r3, r7, r3
 8000dde:	f102 30ff 	add.w	r0, r2, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x142>
 8000de4:	429c      	cmp	r4, r3
 8000de6:	f200 80ca 	bhi.w	8000f7e <__udivmoddi4+0x2d6>
 8000dea:	4602      	mov	r2, r0
 8000dec:	1b1b      	subs	r3, r3, r4
 8000dee:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000df2:	e7a5      	b.n	8000d40 <__udivmoddi4+0x98>
 8000df4:	f1c1 0620 	rsb	r6, r1, #32
 8000df8:	408b      	lsls	r3, r1
 8000dfa:	fa22 f706 	lsr.w	r7, r2, r6
 8000dfe:	431f      	orrs	r7, r3
 8000e00:	fa0e f401 	lsl.w	r4, lr, r1
 8000e04:	fa20 f306 	lsr.w	r3, r0, r6
 8000e08:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e0c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e10:	4323      	orrs	r3, r4
 8000e12:	fa00 f801 	lsl.w	r8, r0, r1
 8000e16:	fa1f fc87 	uxth.w	ip, r7
 8000e1a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e1e:	0c1c      	lsrs	r4, r3, #16
 8000e20:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e24:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e28:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e2c:	45a6      	cmp	lr, r4
 8000e2e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e32:	d909      	bls.n	8000e48 <__udivmoddi4+0x1a0>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e3a:	f080 809c 	bcs.w	8000f76 <__udivmoddi4+0x2ce>
 8000e3e:	45a6      	cmp	lr, r4
 8000e40:	f240 8099 	bls.w	8000f76 <__udivmoddi4+0x2ce>
 8000e44:	3802      	subs	r0, #2
 8000e46:	443c      	add	r4, r7
 8000e48:	eba4 040e 	sub.w	r4, r4, lr
 8000e4c:	fa1f fe83 	uxth.w	lr, r3
 8000e50:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e54:	fb09 4413 	mls	r4, r9, r3, r4
 8000e58:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e5c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e60:	45a4      	cmp	ip, r4
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x1ce>
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e6a:	f080 8082 	bcs.w	8000f72 <__udivmoddi4+0x2ca>
 8000e6e:	45a4      	cmp	ip, r4
 8000e70:	d97f      	bls.n	8000f72 <__udivmoddi4+0x2ca>
 8000e72:	3b02      	subs	r3, #2
 8000e74:	443c      	add	r4, r7
 8000e76:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e7a:	eba4 040c 	sub.w	r4, r4, ip
 8000e7e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e82:	4564      	cmp	r4, ip
 8000e84:	4673      	mov	r3, lr
 8000e86:	46e1      	mov	r9, ip
 8000e88:	d362      	bcc.n	8000f50 <__udivmoddi4+0x2a8>
 8000e8a:	d05f      	beq.n	8000f4c <__udivmoddi4+0x2a4>
 8000e8c:	b15d      	cbz	r5, 8000ea6 <__udivmoddi4+0x1fe>
 8000e8e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e92:	eb64 0409 	sbc.w	r4, r4, r9
 8000e96:	fa04 f606 	lsl.w	r6, r4, r6
 8000e9a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e9e:	431e      	orrs	r6, r3
 8000ea0:	40cc      	lsrs	r4, r1
 8000ea2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	e74f      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000eaa:	fbb1 fcf2 	udiv	ip, r1, r2
 8000eae:	0c01      	lsrs	r1, r0, #16
 8000eb0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000eb4:	b280      	uxth	r0, r0
 8000eb6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eba:	463b      	mov	r3, r7
 8000ebc:	4638      	mov	r0, r7
 8000ebe:	463c      	mov	r4, r7
 8000ec0:	46b8      	mov	r8, r7
 8000ec2:	46be      	mov	lr, r7
 8000ec4:	2620      	movs	r6, #32
 8000ec6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eca:	eba2 0208 	sub.w	r2, r2, r8
 8000ece:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ed2:	e766      	b.n	8000da2 <__udivmoddi4+0xfa>
 8000ed4:	4601      	mov	r1, r0
 8000ed6:	e718      	b.n	8000d0a <__udivmoddi4+0x62>
 8000ed8:	4610      	mov	r0, r2
 8000eda:	e72c      	b.n	8000d36 <__udivmoddi4+0x8e>
 8000edc:	f1c6 0220 	rsb	r2, r6, #32
 8000ee0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ee4:	40b7      	lsls	r7, r6
 8000ee6:	40b1      	lsls	r1, r6
 8000ee8:	fa20 f202 	lsr.w	r2, r0, r2
 8000eec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ef6:	b2bc      	uxth	r4, r7
 8000ef8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb08 f904 	mul.w	r9, r8, r4
 8000f06:	40b0      	lsls	r0, r6
 8000f08:	4589      	cmp	r9, r1
 8000f0a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f0e:	b280      	uxth	r0, r0
 8000f10:	d93e      	bls.n	8000f90 <__udivmoddi4+0x2e8>
 8000f12:	1879      	adds	r1, r7, r1
 8000f14:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f18:	d201      	bcs.n	8000f1e <__udivmoddi4+0x276>
 8000f1a:	4589      	cmp	r9, r1
 8000f1c:	d81f      	bhi.n	8000f5e <__udivmoddi4+0x2b6>
 8000f1e:	eba1 0109 	sub.w	r1, r1, r9
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fb09 f804 	mul.w	r8, r9, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	b292      	uxth	r2, r2
 8000f30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f34:	4542      	cmp	r2, r8
 8000f36:	d229      	bcs.n	8000f8c <__udivmoddi4+0x2e4>
 8000f38:	18ba      	adds	r2, r7, r2
 8000f3a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f3e:	d2c4      	bcs.n	8000eca <__udivmoddi4+0x222>
 8000f40:	4542      	cmp	r2, r8
 8000f42:	d2c2      	bcs.n	8000eca <__udivmoddi4+0x222>
 8000f44:	f1a9 0102 	sub.w	r1, r9, #2
 8000f48:	443a      	add	r2, r7
 8000f4a:	e7be      	b.n	8000eca <__udivmoddi4+0x222>
 8000f4c:	45f0      	cmp	r8, lr
 8000f4e:	d29d      	bcs.n	8000e8c <__udivmoddi4+0x1e4>
 8000f50:	ebbe 0302 	subs.w	r3, lr, r2
 8000f54:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f58:	3801      	subs	r0, #1
 8000f5a:	46e1      	mov	r9, ip
 8000f5c:	e796      	b.n	8000e8c <__udivmoddi4+0x1e4>
 8000f5e:	eba7 0909 	sub.w	r9, r7, r9
 8000f62:	4449      	add	r1, r9
 8000f64:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f68:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6c:	fb09 f804 	mul.w	r8, r9, r4
 8000f70:	e7db      	b.n	8000f2a <__udivmoddi4+0x282>
 8000f72:	4673      	mov	r3, lr
 8000f74:	e77f      	b.n	8000e76 <__udivmoddi4+0x1ce>
 8000f76:	4650      	mov	r0, sl
 8000f78:	e766      	b.n	8000e48 <__udivmoddi4+0x1a0>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e6fd      	b.n	8000d7a <__udivmoddi4+0xd2>
 8000f7e:	443b      	add	r3, r7
 8000f80:	3a02      	subs	r2, #2
 8000f82:	e733      	b.n	8000dec <__udivmoddi4+0x144>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	443b      	add	r3, r7
 8000f8a:	e71c      	b.n	8000dc6 <__udivmoddi4+0x11e>
 8000f8c:	4649      	mov	r1, r9
 8000f8e:	e79c      	b.n	8000eca <__udivmoddi4+0x222>
 8000f90:	eba1 0109 	sub.w	r1, r1, r9
 8000f94:	46c4      	mov	ip, r8
 8000f96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f9a:	fb09 f804 	mul.w	r8, r9, r4
 8000f9e:	e7c4      	b.n	8000f2a <__udivmoddi4+0x282>

08000fa0 <__aeabi_idiv0>:
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	4a07      	ldr	r2, [pc, #28]	@ (8000fd0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000fb4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	4a06      	ldr	r2, [pc, #24]	@ (8000fd4 <vApplicationGetIdleTaskMemory+0x30>)
 8000fba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2280      	movs	r2, #128	@ 0x80
 8000fc0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000fc2:	bf00      	nop
 8000fc4:	3714      	adds	r7, #20
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	200001d4 	.word	0x200001d4
 8000fd4:	20000274 	.word	0x20000274

08000fd8 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4a07      	ldr	r2, [pc, #28]	@ (8001004 <vApplicationGetTimerTaskMemory+0x2c>)
 8000fe8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	4a06      	ldr	r2, [pc, #24]	@ (8001008 <vApplicationGetTimerTaskMemory+0x30>)
 8000fee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ff6:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ff8:	bf00      	nop
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	20000474 	.word	0x20000474
 8001008:	20000514 	.word	0x20000514

0800100c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001010:	f3bf 8f4f 	dsb	sy
}
 8001014:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001016:	4b06      	ldr	r3, [pc, #24]	@ (8001030 <__NVIC_SystemReset+0x24>)
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800101e:	4904      	ldr	r1, [pc, #16]	@ (8001030 <__NVIC_SystemReset+0x24>)
 8001020:	4b04      	ldr	r3, [pc, #16]	@ (8001034 <__NVIC_SystemReset+0x28>)
 8001022:	4313      	orrs	r3, r2
 8001024:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001026:	f3bf 8f4f 	dsb	sy
}
 800102a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <__NVIC_SystemReset+0x20>
 8001030:	e000ed00 	.word	0xe000ed00
 8001034:	05fa0004 	.word	0x05fa0004

08001038 <HardFault_Handler>:
//int a = 5;
//int b = 0;
//int c;
uint8_t RxData[50];
uint16_t RxData1[5];
void HardFault_Handler(void){
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
 800103c:	f7ff ffe6 	bl	800100c <__NVIC_SystemReset>

08001040 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001040:	b5b0      	push	{r4, r5, r7, lr}
 8001042:	b0be      	sub	sp, #248	@ 0xf8
 8001044:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001046:	f009 fb27 	bl	800a698 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800104a:	f000 f92f 	bl	80012ac <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	HAL_Delay(1000);
 800104e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001052:	f009 fb63 	bl	800a71c <HAL_Delay>
	//	 NVIC_SystemReset();
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001056:	f000 fd05 	bl	8001a64 <MX_GPIO_Init>
	MX_DMA_Init();
 800105a:	f000 fccd 	bl	80019f8 <MX_DMA_Init>
	MX_TIM1_Init();
 800105e:	f000 fb7f 	bl	8001760 <MX_TIM1_Init>
	MX_USART2_UART_Init();
 8001062:	f000 fc9f 	bl	80019a4 <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 8001066:	f000 fc73 	bl	8001950 <MX_USART1_UART_Init>
	MX_ADC1_Init();
 800106a:	f000 f98b 	bl	8001384 <MX_ADC1_Init>
	MX_SPI3_Init();
 800106e:	f000 fb41 	bl	80016f4 <MX_SPI3_Init>
	MX_RTC_Init();
 8001072:	f000 fa7d 	bl	8001570 <MX_RTC_Init>
	MX_TIM4_Init();
 8001076:	f000 fbf5 	bl	8001864 <MX_TIM4_Init>
	MX_SPI1_Init();
 800107a:	f000 fb05 	bl	8001688 <MX_SPI1_Init>
	MX_ADC3_Init();
 800107e:	f000 fa25 	bl	80014cc <MX_ADC3_Init>
	MX_ADC2_Init();
 8001082:	f000 f9d1 	bl	8001428 <MX_ADC2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001086:	2100      	movs	r1, #0
 8001088:	486d      	ldr	r0, [pc, #436]	@ (8001240 <main+0x200>)
 800108a:	f00c fe8b 	bl	800dda4 <HAL_TIM_PWM_Start>
	SPI_Init();
 800108e:	f002 fedf 	bl	8003e50 <SPI_Init>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001092:	2100      	movs	r1, #0
 8001094:	486b      	ldr	r0, [pc, #428]	@ (8001244 <main+0x204>)
 8001096:	f00c fe85 	bl	800dda4 <HAL_TIM_PWM_Start>
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* definition and creation of EEPROM */
	osSemaphoreDef(EEPROM);
 800109a:	2300      	movs	r3, #0
 800109c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80010a0:	2300      	movs	r3, #0
 80010a2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
	EEPROMHandle = osSemaphoreCreate(osSemaphore(EEPROM), 1);
 80010a6:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 80010aa:	2101      	movs	r1, #1
 80010ac:	4618      	mov	r0, r3
 80010ae:	f00f fa4d 	bl	801054c <osSemaphoreCreate>
 80010b2:	4603      	mov	r3, r0
 80010b4:	4a64      	ldr	r2, [pc, #400]	@ (8001248 <main+0x208>)
 80010b6:	6013      	str	r3, [r2, #0]
	/* add semaphores, ... */
	/* USER CODE END RTOS_SEMAPHORES */

	/* Create the timer(s) */
	/* definition and creation of Button_clear */
	osTimerDef(Button_clear, Clear_Button);
 80010b8:	4b64      	ldr	r3, [pc, #400]	@ (800124c <main+0x20c>)
 80010ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80010be:	2300      	movs	r3, #0
 80010c0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
	Button_clearHandle = osTimerCreate(osTimer(Button_clear), osTimerPeriodic, NULL);
 80010c4:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 80010c8:	2200      	movs	r2, #0
 80010ca:	2101      	movs	r1, #1
 80010cc:	4618      	mov	r0, r3
 80010ce:	f00f f989 	bl	80103e4 <osTimerCreate>
 80010d2:	4603      	mov	r3, r0
 80010d4:	4a5e      	ldr	r2, [pc, #376]	@ (8001250 <main+0x210>)
 80010d6:	6013      	str	r3, [r2, #0]

	/* definition and creation of Touch_value_reset */
	osTimerDef(Touch_value_reset, value_reset);
 80010d8:	4b5e      	ldr	r3, [pc, #376]	@ (8001254 <main+0x214>)
 80010da:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80010de:	2300      	movs	r3, #0
 80010e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
	Touch_value_resetHandle = osTimerCreate(osTimer(Touch_value_reset), osTimerPeriodic, NULL);
 80010e4:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80010e8:	2200      	movs	r2, #0
 80010ea:	2101      	movs	r1, #1
 80010ec:	4618      	mov	r0, r3
 80010ee:	f00f f979 	bl	80103e4 <osTimerCreate>
 80010f2:	4603      	mov	r3, r0
 80010f4:	4a58      	ldr	r2, [pc, #352]	@ (8001258 <main+0x218>)
 80010f6:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of dwin */
	osThreadDef(dwin, dwin_data, osPriorityRealtime, 0, 1024);
 80010f8:	4b58      	ldr	r3, [pc, #352]	@ (800125c <main+0x21c>)
 80010fa:	f107 04c4 	add.w	r4, r7, #196	@ 0xc4
 80010fe:	461d      	mov	r5, r3
 8001100:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001102:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001104:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001108:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	dwinHandle = osThreadCreate(osThread(dwin), NULL);
 800110c:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f00f f905 	bl	8010322 <osThreadCreate>
 8001118:	4603      	mov	r3, r0
 800111a:	4a51      	ldr	r2, [pc, #324]	@ (8001260 <main+0x220>)
 800111c:	6013      	str	r3, [r2, #0]

	/* definition and creation of sensor */
	osThreadDef(sensor, sensor_one, osPriorityNormal, 0, 128);
 800111e:	4b51      	ldr	r3, [pc, #324]	@ (8001264 <main+0x224>)
 8001120:	f107 04a8 	add.w	r4, r7, #168	@ 0xa8
 8001124:	461d      	mov	r5, r3
 8001126:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001128:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800112a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800112e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	sensorHandle = osThreadCreate(osThread(sensor), NULL);
 8001132:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001136:	2100      	movs	r1, #0
 8001138:	4618      	mov	r0, r3
 800113a:	f00f f8f2 	bl	8010322 <osThreadCreate>
 800113e:	4603      	mov	r3, r0
 8001140:	4a49      	ldr	r2, [pc, #292]	@ (8001268 <main+0x228>)
 8001142:	6013      	str	r3, [r2, #0]

	/* definition and creation of mode_control */
	osThreadDef(mode_control, mode_ctr, osPriorityRealtime, 0, 256);
 8001144:	4b49      	ldr	r3, [pc, #292]	@ (800126c <main+0x22c>)
 8001146:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 800114a:	461d      	mov	r5, r3
 800114c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800114e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001150:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001154:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	mode_controlHandle = osThreadCreate(osThread(mode_control), NULL);
 8001158:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800115c:	2100      	movs	r1, #0
 800115e:	4618      	mov	r0, r3
 8001160:	f00f f8df 	bl	8010322 <osThreadCreate>
 8001164:	4603      	mov	r3, r0
 8001166:	4a42      	ldr	r2, [pc, #264]	@ (8001270 <main+0x230>)
 8001168:	6013      	str	r3, [r2, #0]

	/* definition and creation of Notification */
	osThreadDef(Notification, Icon, osPriorityNormal, 0, 128);
 800116a:	4b42      	ldr	r3, [pc, #264]	@ (8001274 <main+0x234>)
 800116c:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8001170:	461d      	mov	r5, r3
 8001172:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001174:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001176:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800117a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	NotificationHandle = osThreadCreate(osThread(Notification), NULL);
 800117e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001182:	2100      	movs	r1, #0
 8001184:	4618      	mov	r0, r3
 8001186:	f00f f8cc 	bl	8010322 <osThreadCreate>
 800118a:	4603      	mov	r3, r0
 800118c:	4a3a      	ldr	r2, [pc, #232]	@ (8001278 <main+0x238>)
 800118e:	6013      	str	r3, [r2, #0]

	/* definition and creation of BT_ADC */
	osThreadDef(BT_ADC, Battery, osPriorityNormal, 0, 128);
 8001190:	4b3a      	ldr	r3, [pc, #232]	@ (800127c <main+0x23c>)
 8001192:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8001196:	461d      	mov	r5, r3
 8001198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800119a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800119c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	BT_ADCHandle = osThreadCreate(osThread(BT_ADC), NULL);
 80011a4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f00f f8b9 	bl	8010322 <osThreadCreate>
 80011b0:	4603      	mov	r3, r0
 80011b2:	4a33      	ldr	r2, [pc, #204]	@ (8001280 <main+0x240>)
 80011b4:	6013      	str	r3, [r2, #0]

	/* definition and creation of Loop_Graph */
	osThreadDef(Loop_Graph, Loop, osPriorityBelowNormal, 0, 128);
 80011b6:	4b33      	ldr	r3, [pc, #204]	@ (8001284 <main+0x244>)
 80011b8:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80011bc:	461d      	mov	r5, r3
 80011be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Loop_GraphHandle = osThreadCreate(osThread(Loop_Graph), NULL);
 80011ca:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011ce:	2100      	movs	r1, #0
 80011d0:	4618      	mov	r0, r3
 80011d2:	f00f f8a6 	bl	8010322 <osThreadCreate>
 80011d6:	4603      	mov	r3, r0
 80011d8:	4a2b      	ldr	r2, [pc, #172]	@ (8001288 <main+0x248>)
 80011da:	6013      	str	r3, [r2, #0]

	/* definition and creation of FVGraph */
	osThreadDef(FVGraph, FVG, osPriorityBelowNormal, 0, 128);
 80011dc:	4b2b      	ldr	r3, [pc, #172]	@ (800128c <main+0x24c>)
 80011de:	f107 041c 	add.w	r4, r7, #28
 80011e2:	461d      	mov	r5, r3
 80011e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	FVGraphHandle = osThreadCreate(osThread(FVGraph), NULL);
 80011f0:	f107 031c 	add.w	r3, r7, #28
 80011f4:	2100      	movs	r1, #0
 80011f6:	4618      	mov	r0, r3
 80011f8:	f00f f893 	bl	8010322 <osThreadCreate>
 80011fc:	4603      	mov	r3, r0
 80011fe:	4a24      	ldr	r2, [pc, #144]	@ (8001290 <main+0x250>)
 8001200:	6013      	str	r3, [r2, #0]

	/* definition and creation of Backup */
	osThreadDef(Backup, backup, osPriorityBelowNormal, 0, 256);
 8001202:	4b24      	ldr	r3, [pc, #144]	@ (8001294 <main+0x254>)
 8001204:	463c      	mov	r4, r7
 8001206:	461d      	mov	r5, r3
 8001208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800120a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800120c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001210:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	BackupHandle = osThreadCreate(osThread(Backup), NULL);
 8001214:	463b      	mov	r3, r7
 8001216:	2100      	movs	r1, #0
 8001218:	4618      	mov	r0, r3
 800121a:	f00f f882 	bl	8010322 <osThreadCreate>
 800121e:	4603      	mov	r3, r0
 8001220:	4a1d      	ldr	r2, [pc, #116]	@ (8001298 <main+0x258>)
 8001222:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	HAL_UART_Receive_DMA(&huart2, sensor_data, sizeof(sensor_data));
 8001224:	2218      	movs	r2, #24
 8001226:	491d      	ldr	r1, [pc, #116]	@ (800129c <main+0x25c>)
 8001228:	481d      	ldr	r0, [pc, #116]	@ (80012a0 <main+0x260>)
 800122a:	f00d fe23 	bl	800ee74 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart1, DISPLAY_INPUT, sizeof(DISPLAY_INPUT));
 800122e:	2209      	movs	r2, #9
 8001230:	491c      	ldr	r1, [pc, #112]	@ (80012a4 <main+0x264>)
 8001232:	481d      	ldr	r0, [pc, #116]	@ (80012a8 <main+0x268>)
 8001234:	f00d fe1e 	bl	800ee74 <HAL_UART_Receive_DMA>

	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8001238:	f00f f86c 	bl	8010314 <osKernelStart>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */


	while (1)
 800123c:	bf00      	nop
 800123e:	e7fd      	b.n	800123c <main+0x1fc>
 8001240:	20000f30 	.word	0x20000f30
 8001244:	20000f78 	.word	0x20000f78
 8001248:	20001138 	.word	0x20001138
 800124c:	0800958d 	.word	0x0800958d
 8001250:	20001130 	.word	0x20001130
 8001254:	080095bd 	.word	0x080095bd
 8001258:	20001134 	.word	0x20001134
 800125c:	08013ff0 	.word	0x08013ff0
 8001260:	20001110 	.word	0x20001110
 8001264:	08014014 	.word	0x08014014
 8001268:	20001114 	.word	0x20001114
 800126c:	08014040 	.word	0x08014040
 8001270:	20001118 	.word	0x20001118
 8001274:	0801406c 	.word	0x0801406c
 8001278:	2000111c 	.word	0x2000111c
 800127c:	08014090 	.word	0x08014090
 8001280:	20001120 	.word	0x20001120
 8001284:	080140b8 	.word	0x080140b8
 8001288:	20001124 	.word	0x20001124
 800128c:	080140dc 	.word	0x080140dc
 8001290:	20001128 	.word	0x20001128
 8001294:	08014100 	.word	0x08014100
 8001298:	2000112c 	.word	0x2000112c
 800129c:	20001178 	.word	0x20001178
 80012a0:	20001008 	.word	0x20001008
 80012a4:	20001584 	.word	0x20001584
 80012a8:	20000fc0 	.word	0x20000fc0

080012ac <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b094      	sub	sp, #80	@ 0x50
 80012b0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012b2:	f107 0320 	add.w	r3, r7, #32
 80012b6:	2230      	movs	r2, #48	@ 0x30
 80012b8:	2100      	movs	r1, #0
 80012ba:	4618      	mov	r0, r3
 80012bc:	f012 f958 	bl	8013570 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80012d0:	2300      	movs	r3, #0
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	4b29      	ldr	r3, [pc, #164]	@ (800137c <SystemClock_Config+0xd0>)
 80012d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d8:	4a28      	ldr	r2, [pc, #160]	@ (800137c <SystemClock_Config+0xd0>)
 80012da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012de:	6413      	str	r3, [r2, #64]	@ 0x40
 80012e0:	4b26      	ldr	r3, [pc, #152]	@ (800137c <SystemClock_Config+0xd0>)
 80012e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012ec:	2300      	movs	r3, #0
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	4b23      	ldr	r3, [pc, #140]	@ (8001380 <SystemClock_Config+0xd4>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a22      	ldr	r2, [pc, #136]	@ (8001380 <SystemClock_Config+0xd4>)
 80012f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012fa:	6013      	str	r3, [r2, #0]
 80012fc:	4b20      	ldr	r3, [pc, #128]	@ (8001380 <SystemClock_Config+0xd4>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001308:	2309      	movs	r3, #9
 800130a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800130c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001310:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001312:	2301      	movs	r3, #1
 8001314:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001316:	2302      	movs	r3, #2
 8001318:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800131a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800131e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001320:	2304      	movs	r3, #4
 8001322:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8001324:	23a8      	movs	r3, #168	@ 0xa8
 8001326:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001328:	2302      	movs	r3, #2
 800132a:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800132c:	2304      	movs	r3, #4
 800132e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001330:	f107 0320 	add.w	r3, r7, #32
 8001334:	4618      	mov	r0, r3
 8001336:	f00a fcc7 	bl	800bcc8 <HAL_RCC_OscConfig>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <SystemClock_Config+0x98>
	{
		Error_Handler();
 8001340:	f008 fa26 	bl	8009790 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001344:	230f      	movs	r3, #15
 8001346:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001348:	2302      	movs	r3, #2
 800134a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001350:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001354:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001356:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800135a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800135c:	f107 030c 	add.w	r3, r7, #12
 8001360:	2105      	movs	r1, #5
 8001362:	4618      	mov	r0, r3
 8001364:	f00a ff28 	bl	800c1b8 <HAL_RCC_ClockConfig>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <SystemClock_Config+0xc6>
	{
		Error_Handler();
 800136e:	f008 fa0f 	bl	8009790 <Error_Handler>
	}
}
 8001372:	bf00      	nop
 8001374:	3750      	adds	r7, #80	@ 0x50
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40023800 	.word	0x40023800
 8001380:	40007000 	.word	0x40007000

08001384 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 800138a:	463b      	mov	r3, r7
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8001396:	4b21      	ldr	r3, [pc, #132]	@ (800141c <MX_ADC1_Init+0x98>)
 8001398:	4a21      	ldr	r2, [pc, #132]	@ (8001420 <MX_ADC1_Init+0x9c>)
 800139a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800139c:	4b1f      	ldr	r3, [pc, #124]	@ (800141c <MX_ADC1_Init+0x98>)
 800139e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013a2:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013a4:	4b1d      	ldr	r3, [pc, #116]	@ (800141c <MX_ADC1_Init+0x98>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 80013aa:	4b1c      	ldr	r3, [pc, #112]	@ (800141c <MX_ADC1_Init+0x98>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80013b0:	4b1a      	ldr	r3, [pc, #104]	@ (800141c <MX_ADC1_Init+0x98>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013b6:	4b19      	ldr	r3, [pc, #100]	@ (800141c <MX_ADC1_Init+0x98>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013be:	4b17      	ldr	r3, [pc, #92]	@ (800141c <MX_ADC1_Init+0x98>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013c4:	4b15      	ldr	r3, [pc, #84]	@ (800141c <MX_ADC1_Init+0x98>)
 80013c6:	4a17      	ldr	r2, [pc, #92]	@ (8001424 <MX_ADC1_Init+0xa0>)
 80013c8:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013ca:	4b14      	ldr	r3, [pc, #80]	@ (800141c <MX_ADC1_Init+0x98>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 80013d0:	4b12      	ldr	r3, [pc, #72]	@ (800141c <MX_ADC1_Init+0x98>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80013d6:	4b11      	ldr	r3, [pc, #68]	@ (800141c <MX_ADC1_Init+0x98>)
 80013d8:	2200      	movs	r2, #0
 80013da:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013de:	4b0f      	ldr	r3, [pc, #60]	@ (800141c <MX_ADC1_Init+0x98>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013e4:	480d      	ldr	r0, [pc, #52]	@ (800141c <MX_ADC1_Init+0x98>)
 80013e6:	f009 f9bd 	bl	800a764 <HAL_ADC_Init>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_ADC1_Init+0x70>
	{
		Error_Handler();
 80013f0:	f008 f9ce 	bl	8009790 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 80013f4:	2309      	movs	r3, #9
 80013f6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80013f8:	2301      	movs	r3, #1
 80013fa:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013fc:	2300      	movs	r3, #0
 80013fe:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001400:	463b      	mov	r3, r7
 8001402:	4619      	mov	r1, r3
 8001404:	4805      	ldr	r0, [pc, #20]	@ (800141c <MX_ADC1_Init+0x98>)
 8001406:	f009 fb8f 	bl	800ab28 <HAL_ADC_ConfigChannel>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_ADC1_Init+0x90>
	{
		Error_Handler();
 8001410:	f008 f9be 	bl	8009790 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001414:	bf00      	nop
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000d88 	.word	0x20000d88
 8001420:	40012000 	.word	0x40012000
 8001424:	0f000001 	.word	0x0f000001

08001428 <MX_ADC2_Init>:
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 800142e:	463b      	mov	r3, r7
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC2_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc2.Instance = ADC2;
 800143a:	4b21      	ldr	r3, [pc, #132]	@ (80014c0 <MX_ADC2_Init+0x98>)
 800143c:	4a21      	ldr	r2, [pc, #132]	@ (80014c4 <MX_ADC2_Init+0x9c>)
 800143e:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001440:	4b1f      	ldr	r3, [pc, #124]	@ (80014c0 <MX_ADC2_Init+0x98>)
 8001442:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001446:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001448:	4b1d      	ldr	r3, [pc, #116]	@ (80014c0 <MX_ADC2_Init+0x98>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = DISABLE;
 800144e:	4b1c      	ldr	r3, [pc, #112]	@ (80014c0 <MX_ADC2_Init+0x98>)
 8001450:	2200      	movs	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
	hadc2.Init.ContinuousConvMode = DISABLE;
 8001454:	4b1a      	ldr	r3, [pc, #104]	@ (80014c0 <MX_ADC2_Init+0x98>)
 8001456:	2200      	movs	r2, #0
 8001458:	761a      	strb	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 800145a:	4b19      	ldr	r3, [pc, #100]	@ (80014c0 <MX_ADC2_Init+0x98>)
 800145c:	2200      	movs	r2, #0
 800145e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001462:	4b17      	ldr	r3, [pc, #92]	@ (80014c0 <MX_ADC2_Init+0x98>)
 8001464:	2200      	movs	r2, #0
 8001466:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001468:	4b15      	ldr	r3, [pc, #84]	@ (80014c0 <MX_ADC2_Init+0x98>)
 800146a:	4a17      	ldr	r2, [pc, #92]	@ (80014c8 <MX_ADC2_Init+0xa0>)
 800146c:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800146e:	4b14      	ldr	r3, [pc, #80]	@ (80014c0 <MX_ADC2_Init+0x98>)
 8001470:	2200      	movs	r2, #0
 8001472:	60da      	str	r2, [r3, #12]
	hadc2.Init.NbrOfConversion = 1;
 8001474:	4b12      	ldr	r3, [pc, #72]	@ (80014c0 <MX_ADC2_Init+0x98>)
 8001476:	2201      	movs	r2, #1
 8001478:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = DISABLE;
 800147a:	4b11      	ldr	r3, [pc, #68]	@ (80014c0 <MX_ADC2_Init+0x98>)
 800147c:	2200      	movs	r2, #0
 800147e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001482:	4b0f      	ldr	r3, [pc, #60]	@ (80014c0 <MX_ADC2_Init+0x98>)
 8001484:	2201      	movs	r2, #1
 8001486:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001488:	480d      	ldr	r0, [pc, #52]	@ (80014c0 <MX_ADC2_Init+0x98>)
 800148a:	f009 f96b 	bl	800a764 <HAL_ADC_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_ADC2_Init+0x70>
	{
		Error_Handler();
 8001494:	f008 f97c 	bl	8009790 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8001498:	2300      	movs	r3, #0
 800149a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800149c:	2301      	movs	r3, #1
 800149e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014a4:	463b      	mov	r3, r7
 80014a6:	4619      	mov	r1, r3
 80014a8:	4805      	ldr	r0, [pc, #20]	@ (80014c0 <MX_ADC2_Init+0x98>)
 80014aa:	f009 fb3d 	bl	800ab28 <HAL_ADC_ConfigChannel>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_ADC2_Init+0x90>
	{
		Error_Handler();
 80014b4:	f008 f96c 	bl	8009790 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 80014b8:	bf00      	nop
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000dd0 	.word	0x20000dd0
 80014c4:	40012100 	.word	0x40012100
 80014c8:	0f000001 	.word	0x0f000001

080014cc <MX_ADC3_Init>:
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 80014d2:	463b      	mov	r3, r7
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC3_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 80014de:	4b21      	ldr	r3, [pc, #132]	@ (8001564 <MX_ADC3_Init+0x98>)
 80014e0:	4a21      	ldr	r2, [pc, #132]	@ (8001568 <MX_ADC3_Init+0x9c>)
 80014e2:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001564 <MX_ADC3_Init+0x98>)
 80014e6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80014ea:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80014ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001564 <MX_ADC3_Init+0x98>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = DISABLE;
 80014f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001564 <MX_ADC3_Init+0x98>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = ENABLE;
 80014f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001564 <MX_ADC3_Init+0x98>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	761a      	strb	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 80014fe:	4b19      	ldr	r3, [pc, #100]	@ (8001564 <MX_ADC3_Init+0x98>)
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001506:	4b17      	ldr	r3, [pc, #92]	@ (8001564 <MX_ADC3_Init+0x98>)
 8001508:	2200      	movs	r2, #0
 800150a:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800150c:	4b15      	ldr	r3, [pc, #84]	@ (8001564 <MX_ADC3_Init+0x98>)
 800150e:	4a17      	ldr	r2, [pc, #92]	@ (800156c <MX_ADC3_Init+0xa0>)
 8001510:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001512:	4b14      	ldr	r3, [pc, #80]	@ (8001564 <MX_ADC3_Init+0x98>)
 8001514:	2200      	movs	r2, #0
 8001516:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 8001518:	4b12      	ldr	r3, [pc, #72]	@ (8001564 <MX_ADC3_Init+0x98>)
 800151a:	2201      	movs	r2, #1
 800151c:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 800151e:	4b11      	ldr	r3, [pc, #68]	@ (8001564 <MX_ADC3_Init+0x98>)
 8001520:	2200      	movs	r2, #0
 8001522:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001526:	4b0f      	ldr	r3, [pc, #60]	@ (8001564 <MX_ADC3_Init+0x98>)
 8001528:	2201      	movs	r2, #1
 800152a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800152c:	480d      	ldr	r0, [pc, #52]	@ (8001564 <MX_ADC3_Init+0x98>)
 800152e:	f009 f919 	bl	800a764 <HAL_ADC_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_ADC3_Init+0x70>
	{
		Error_Handler();
 8001538:	f008 f92a 	bl	8009790 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 800153c:	2301      	movs	r3, #1
 800153e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001540:	2301      	movs	r3, #1
 8001542:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001544:	2300      	movs	r3, #0
 8001546:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001548:	463b      	mov	r3, r7
 800154a:	4619      	mov	r1, r3
 800154c:	4805      	ldr	r0, [pc, #20]	@ (8001564 <MX_ADC3_Init+0x98>)
 800154e:	f009 faeb 	bl	800ab28 <HAL_ADC_ConfigChannel>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_ADC3_Init+0x90>
	{
		Error_Handler();
 8001558:	f008 f91a 	bl	8009790 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 800155c:	bf00      	nop
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000e18 	.word	0x20000e18
 8001568:	40012200 	.word	0x40012200
 800156c:	0f000001 	.word	0x0f000001

08001570 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b090      	sub	sp, #64	@ 0x40
 8001574:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = {0};
 8001576:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]
 8001584:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8001586:	2300      	movs	r3, #0
 8001588:	62bb      	str	r3, [r7, #40]	@ 0x28
	RTC_AlarmTypeDef sAlarm = {0};
 800158a:	463b      	mov	r3, r7
 800158c:	2228      	movs	r2, #40	@ 0x28
 800158e:	2100      	movs	r1, #0
 8001590:	4618      	mov	r0, r3
 8001592:	f011 ffed 	bl	8013570 <memset>

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8001596:	4b3a      	ldr	r3, [pc, #232]	@ (8001680 <MX_RTC_Init+0x110>)
 8001598:	4a3a      	ldr	r2, [pc, #232]	@ (8001684 <MX_RTC_Init+0x114>)
 800159a:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800159c:	4b38      	ldr	r3, [pc, #224]	@ (8001680 <MX_RTC_Init+0x110>)
 800159e:	2200      	movs	r2, #0
 80015a0:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 80015a2:	4b37      	ldr	r3, [pc, #220]	@ (8001680 <MX_RTC_Init+0x110>)
 80015a4:	227f      	movs	r2, #127	@ 0x7f
 80015a6:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 80015a8:	4b35      	ldr	r3, [pc, #212]	@ (8001680 <MX_RTC_Init+0x110>)
 80015aa:	22ff      	movs	r2, #255	@ 0xff
 80015ac:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80015ae:	4b34      	ldr	r3, [pc, #208]	@ (8001680 <MX_RTC_Init+0x110>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80015b4:	4b32      	ldr	r3, [pc, #200]	@ (8001680 <MX_RTC_Init+0x110>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80015ba:	4b31      	ldr	r3, [pc, #196]	@ (8001680 <MX_RTC_Init+0x110>)
 80015bc:	2200      	movs	r2, #0
 80015be:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015c0:	482f      	ldr	r0, [pc, #188]	@ (8001680 <MX_RTC_Init+0x110>)
 80015c2:	f00b f92d 	bl	800c820 <HAL_RTC_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_RTC_Init+0x60>
	{
		Error_Handler();
 80015cc:	f008 f8e0 	bl	8009790 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	sTime.Minutes = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	sTime.Seconds = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80015e2:	2300      	movs	r3, #0
 80015e4:	63bb      	str	r3, [r7, #56]	@ 0x38
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80015e6:	2300      	movs	r3, #0
 80015e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80015ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015ee:	2200      	movs	r2, #0
 80015f0:	4619      	mov	r1, r3
 80015f2:	4823      	ldr	r0, [pc, #140]	@ (8001680 <MX_RTC_Init+0x110>)
 80015f4:	f00b f997 	bl	800c926 <HAL_RTC_SetTime>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_RTC_Init+0x92>
	{
		Error_Handler();
 80015fe:	f008 f8c7 	bl	8009790 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8001602:	2302      	movs	r3, #2
 8001604:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	sDate.Month = RTC_MONTH_APRIL;
 8001608:	2304      	movs	r3, #4
 800160a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	sDate.Date = 1;
 800160e:	2301      	movs	r3, #1
 8001610:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	sDate.Year = 25;
 8001614:	2319      	movs	r3, #25
 8001616:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800161a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800161e:	2200      	movs	r2, #0
 8001620:	4619      	mov	r1, r3
 8001622:	4817      	ldr	r0, [pc, #92]	@ (8001680 <MX_RTC_Init+0x110>)
 8001624:	f00b fa19 	bl	800ca5a <HAL_RTC_SetDate>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_RTC_Init+0xc2>
	{
		Error_Handler();
 800162e:	f008 f8af 	bl	8009790 <Error_Handler>
	}

	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 0;
 8001632:	2300      	movs	r3, #0
 8001634:	703b      	strb	r3, [r7, #0]
	sAlarm.AlarmTime.Minutes = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	707b      	strb	r3, [r7, #1]
	sAlarm.AlarmTime.Seconds = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	70bb      	strb	r3, [r7, #2]
	sAlarm.AlarmTime.SubSeconds = 0;
 800163e:	2300      	movs	r3, #0
 8001640:	607b      	str	r3, [r7, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800164a:	2300      	movs	r3, #0
 800164c:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800164e:	2300      	movs	r3, #0
 8001650:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDay = 1;
 8001656:	2301      	movs	r3, #1
 8001658:	f887 3020 	strb.w	r3, [r7, #32]
	sAlarm.Alarm = RTC_ALARM_A;
 800165c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001660:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001662:	463b      	mov	r3, r7
 8001664:	2200      	movs	r2, #0
 8001666:	4619      	mov	r1, r3
 8001668:	4805      	ldr	r0, [pc, #20]	@ (8001680 <MX_RTC_Init+0x110>)
 800166a:	f00b fa7b 	bl	800cb64 <HAL_RTC_SetAlarm_IT>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_RTC_Init+0x108>
	{
		Error_Handler();
 8001674:	f008 f88c 	bl	8009790 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8001678:	bf00      	nop
 800167a:	3740      	adds	r7, #64	@ 0x40
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000e60 	.word	0x20000e60
 8001684:	40002800 	.word	0x40002800

08001688 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800168c:	4b17      	ldr	r3, [pc, #92]	@ (80016ec <MX_SPI1_Init+0x64>)
 800168e:	4a18      	ldr	r2, [pc, #96]	@ (80016f0 <MX_SPI1_Init+0x68>)
 8001690:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001692:	4b16      	ldr	r3, [pc, #88]	@ (80016ec <MX_SPI1_Init+0x64>)
 8001694:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001698:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800169a:	4b14      	ldr	r3, [pc, #80]	@ (80016ec <MX_SPI1_Init+0x64>)
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016a0:	4b12      	ldr	r3, [pc, #72]	@ (80016ec <MX_SPI1_Init+0x64>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016a6:	4b11      	ldr	r3, [pc, #68]	@ (80016ec <MX_SPI1_Init+0x64>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016ac:	4b0f      	ldr	r3, [pc, #60]	@ (80016ec <MX_SPI1_Init+0x64>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80016b2:	4b0e      	ldr	r3, [pc, #56]	@ (80016ec <MX_SPI1_Init+0x64>)
 80016b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016b8:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016ba:	4b0c      	ldr	r3, [pc, #48]	@ (80016ec <MX_SPI1_Init+0x64>)
 80016bc:	2200      	movs	r2, #0
 80016be:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016c0:	4b0a      	ldr	r3, [pc, #40]	@ (80016ec <MX_SPI1_Init+0x64>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016c6:	4b09      	ldr	r3, [pc, #36]	@ (80016ec <MX_SPI1_Init+0x64>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016cc:	4b07      	ldr	r3, [pc, #28]	@ (80016ec <MX_SPI1_Init+0x64>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 80016d2:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <MX_SPI1_Init+0x64>)
 80016d4:	220a      	movs	r2, #10
 80016d6:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016d8:	4804      	ldr	r0, [pc, #16]	@ (80016ec <MX_SPI1_Init+0x64>)
 80016da:	f00b fc81 	bl	800cfe0 <HAL_SPI_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 80016e4:	f008 f854 	bl	8009790 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000e80 	.word	0x20000e80
 80016f0:	40013000 	.word	0x40013000

080016f4 <MX_SPI3_Init>:
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 80016f8:	4b17      	ldr	r3, [pc, #92]	@ (8001758 <MX_SPI3_Init+0x64>)
 80016fa:	4a18      	ldr	r2, [pc, #96]	@ (800175c <MX_SPI3_Init+0x68>)
 80016fc:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 80016fe:	4b16      	ldr	r3, [pc, #88]	@ (8001758 <MX_SPI3_Init+0x64>)
 8001700:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001704:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001706:	4b14      	ldr	r3, [pc, #80]	@ (8001758 <MX_SPI3_Init+0x64>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800170c:	4b12      	ldr	r3, [pc, #72]	@ (8001758 <MX_SPI3_Init+0x64>)
 800170e:	2200      	movs	r2, #0
 8001710:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001712:	4b11      	ldr	r3, [pc, #68]	@ (8001758 <MX_SPI3_Init+0x64>)
 8001714:	2202      	movs	r2, #2
 8001716:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001718:	4b0f      	ldr	r3, [pc, #60]	@ (8001758 <MX_SPI3_Init+0x64>)
 800171a:	2200      	movs	r2, #0
 800171c:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 800171e:	4b0e      	ldr	r3, [pc, #56]	@ (8001758 <MX_SPI3_Init+0x64>)
 8001720:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001724:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001726:	4b0c      	ldr	r3, [pc, #48]	@ (8001758 <MX_SPI3_Init+0x64>)
 8001728:	2218      	movs	r2, #24
 800172a:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800172c:	4b0a      	ldr	r3, [pc, #40]	@ (8001758 <MX_SPI3_Init+0x64>)
 800172e:	2200      	movs	r2, #0
 8001730:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001732:	4b09      	ldr	r3, [pc, #36]	@ (8001758 <MX_SPI3_Init+0x64>)
 8001734:	2200      	movs	r2, #0
 8001736:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001738:	4b07      	ldr	r3, [pc, #28]	@ (8001758 <MX_SPI3_Init+0x64>)
 800173a:	2200      	movs	r2, #0
 800173c:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi3.Init.CRCPolynomial = 10;
 800173e:	4b06      	ldr	r3, [pc, #24]	@ (8001758 <MX_SPI3_Init+0x64>)
 8001740:	220a      	movs	r2, #10
 8001742:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001744:	4804      	ldr	r0, [pc, #16]	@ (8001758 <MX_SPI3_Init+0x64>)
 8001746:	f00b fc4b 	bl	800cfe0 <HAL_SPI_Init>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_SPI3_Init+0x60>
	{
		Error_Handler();
 8001750:	f008 f81e 	bl	8009790 <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 8001754:	bf00      	nop
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000ed8 	.word	0x20000ed8
 800175c:	40003c00 	.word	0x40003c00

08001760 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b092      	sub	sp, #72	@ 0x48
 8001764:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001766:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001770:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]
 8001780:	615a      	str	r2, [r3, #20]
 8001782:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001784:	1d3b      	adds	r3, r7, #4
 8001786:	2220      	movs	r2, #32
 8001788:	2100      	movs	r1, #0
 800178a:	4618      	mov	r0, r3
 800178c:	f011 fef0 	bl	8013570 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001790:	4b32      	ldr	r3, [pc, #200]	@ (800185c <MX_TIM1_Init+0xfc>)
 8001792:	4a33      	ldr	r2, [pc, #204]	@ (8001860 <MX_TIM1_Init+0x100>)
 8001794:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 1;
 8001796:	4b31      	ldr	r3, [pc, #196]	@ (800185c <MX_TIM1_Init+0xfc>)
 8001798:	2201      	movs	r2, #1
 800179a:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800179c:	4b2f      	ldr	r3, [pc, #188]	@ (800185c <MX_TIM1_Init+0xfc>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 210-1;
 80017a2:	4b2e      	ldr	r3, [pc, #184]	@ (800185c <MX_TIM1_Init+0xfc>)
 80017a4:	22d1      	movs	r2, #209	@ 0xd1
 80017a6:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a8:	4b2c      	ldr	r3, [pc, #176]	@ (800185c <MX_TIM1_Init+0xfc>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80017ae:	4b2b      	ldr	r3, [pc, #172]	@ (800185c <MX_TIM1_Init+0xfc>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b4:	4b29      	ldr	r3, [pc, #164]	@ (800185c <MX_TIM1_Init+0xfc>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017ba:	4828      	ldr	r0, [pc, #160]	@ (800185c <MX_TIM1_Init+0xfc>)
 80017bc:	f00c faa2 	bl	800dd04 <HAL_TIM_PWM_Init>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_TIM1_Init+0x6a>
	{
		Error_Handler();
 80017c6:	f007 ffe3 	bl	8009790 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ca:	2300      	movs	r3, #0
 80017cc:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ce:	2300      	movs	r3, #0
 80017d0:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017d2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80017d6:	4619      	mov	r1, r3
 80017d8:	4820      	ldr	r0, [pc, #128]	@ (800185c <MX_TIM1_Init+0xfc>)
 80017da:	f00d f969 	bl	800eab0 <HAL_TIMEx_MasterConfigSynchronization>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_TIM1_Init+0x88>
	{
		Error_Handler();
 80017e4:	f007 ffd4 	bl	8009790 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017e8:	2360      	movs	r3, #96	@ 0x60
 80017ea:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017f0:	2300      	movs	r3, #0
 80017f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017f4:	2300      	movs	r3, #0
 80017f6:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017f8:	2300      	movs	r3, #0
 80017fa:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017fc:	2300      	movs	r3, #0
 80017fe:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001800:	2300      	movs	r3, #0
 8001802:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001804:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001808:	2200      	movs	r2, #0
 800180a:	4619      	mov	r1, r3
 800180c:	4813      	ldr	r0, [pc, #76]	@ (800185c <MX_TIM1_Init+0xfc>)
 800180e:	f00c fc81 	bl	800e114 <HAL_TIM_PWM_ConfigChannel>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_TIM1_Init+0xbc>
	{
		Error_Handler();
 8001818:	f007 ffba 	bl	8009790 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800181c:	2300      	movs	r3, #0
 800181e:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001820:	2300      	movs	r3, #0
 8001822:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001824:	2300      	movs	r3, #0
 8001826:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001828:	2300      	movs	r3, #0
 800182a:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001830:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001834:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001836:	2300      	movs	r3, #0
 8001838:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800183a:	1d3b      	adds	r3, r7, #4
 800183c:	4619      	mov	r1, r3
 800183e:	4807      	ldr	r0, [pc, #28]	@ (800185c <MX_TIM1_Init+0xfc>)
 8001840:	f00d f9b2 	bl	800eba8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_TIM1_Init+0xee>
	{
		Error_Handler();
 800184a:	f007 ffa1 	bl	8009790 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 800184e:	4803      	ldr	r0, [pc, #12]	@ (800185c <MX_TIM1_Init+0xfc>)
 8001850:	f008 fc8a 	bl	800a168 <HAL_TIM_MspPostInit>

}
 8001854:	bf00      	nop
 8001856:	3748      	adds	r7, #72	@ 0x48
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20000f30 	.word	0x20000f30
 8001860:	40010000 	.word	0x40010000

08001864 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08e      	sub	sp, #56	@ 0x38
 8001868:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800186a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]
 8001876:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001878:	f107 0320 	add.w	r3, r7, #32
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001882:	1d3b      	adds	r3, r7, #4
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
 8001890:	615a      	str	r2, [r3, #20]
 8001892:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001894:	4b2c      	ldr	r3, [pc, #176]	@ (8001948 <MX_TIM4_Init+0xe4>)
 8001896:	4a2d      	ldr	r2, [pc, #180]	@ (800194c <MX_TIM4_Init+0xe8>)
 8001898:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 1;
 800189a:	4b2b      	ldr	r3, [pc, #172]	@ (8001948 <MX_TIM4_Init+0xe4>)
 800189c:	2201      	movs	r2, #1
 800189e:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a0:	4b29      	ldr	r3, [pc, #164]	@ (8001948 <MX_TIM4_Init+0xe4>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 220;
 80018a6:	4b28      	ldr	r3, [pc, #160]	@ (8001948 <MX_TIM4_Init+0xe4>)
 80018a8:	22dc      	movs	r2, #220	@ 0xdc
 80018aa:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ac:	4b26      	ldr	r3, [pc, #152]	@ (8001948 <MX_TIM4_Init+0xe4>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018b2:	4b25      	ldr	r3, [pc, #148]	@ (8001948 <MX_TIM4_Init+0xe4>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80018b8:	4823      	ldr	r0, [pc, #140]	@ (8001948 <MX_TIM4_Init+0xe4>)
 80018ba:	f00c f963 	bl	800db84 <HAL_TIM_Base_Init>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_TIM4_Init+0x64>
	{
		Error_Handler();
 80018c4:	f007 ff64 	bl	8009790 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018cc:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80018ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018d2:	4619      	mov	r1, r3
 80018d4:	481c      	ldr	r0, [pc, #112]	@ (8001948 <MX_TIM4_Init+0xe4>)
 80018d6:	f00c fcdf 	bl	800e298 <HAL_TIM_ConfigClockSource>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_TIM4_Init+0x80>
	{
		Error_Handler();
 80018e0:	f007 ff56 	bl	8009790 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80018e4:	4818      	ldr	r0, [pc, #96]	@ (8001948 <MX_TIM4_Init+0xe4>)
 80018e6:	f00c fa0d 	bl	800dd04 <HAL_TIM_PWM_Init>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_TIM4_Init+0x90>
	{
		Error_Handler();
 80018f0:	f007 ff4e 	bl	8009790 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018f4:	2300      	movs	r3, #0
 80018f6:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f8:	2300      	movs	r3, #0
 80018fa:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018fc:	f107 0320 	add.w	r3, r7, #32
 8001900:	4619      	mov	r1, r3
 8001902:	4811      	ldr	r0, [pc, #68]	@ (8001948 <MX_TIM4_Init+0xe4>)
 8001904:	f00d f8d4 	bl	800eab0 <HAL_TIMEx_MasterConfigSynchronization>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_TIM4_Init+0xae>
	{
		Error_Handler();
 800190e:	f007 ff3f 	bl	8009790 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001912:	2360      	movs	r3, #96	@ 0x60
 8001914:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001922:	1d3b      	adds	r3, r7, #4
 8001924:	2200      	movs	r2, #0
 8001926:	4619      	mov	r1, r3
 8001928:	4807      	ldr	r0, [pc, #28]	@ (8001948 <MX_TIM4_Init+0xe4>)
 800192a:	f00c fbf3 	bl	800e114 <HAL_TIM_PWM_ConfigChannel>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_TIM4_Init+0xd4>
	{
		Error_Handler();
 8001934:	f007 ff2c 	bl	8009790 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8001938:	4803      	ldr	r0, [pc, #12]	@ (8001948 <MX_TIM4_Init+0xe4>)
 800193a:	f008 fc15 	bl	800a168 <HAL_TIM_MspPostInit>

}
 800193e:	bf00      	nop
 8001940:	3738      	adds	r7, #56	@ 0x38
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000f78 	.word	0x20000f78
 800194c:	40000800 	.word	0x40000800

08001950 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001954:	4b11      	ldr	r3, [pc, #68]	@ (800199c <MX_USART1_UART_Init+0x4c>)
 8001956:	4a12      	ldr	r2, [pc, #72]	@ (80019a0 <MX_USART1_UART_Init+0x50>)
 8001958:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 460800;
 800195a:	4b10      	ldr	r3, [pc, #64]	@ (800199c <MX_USART1_UART_Init+0x4c>)
 800195c:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 8001960:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001962:	4b0e      	ldr	r3, [pc, #56]	@ (800199c <MX_USART1_UART_Init+0x4c>)
 8001964:	2200      	movs	r2, #0
 8001966:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001968:	4b0c      	ldr	r3, [pc, #48]	@ (800199c <MX_USART1_UART_Init+0x4c>)
 800196a:	2200      	movs	r2, #0
 800196c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800196e:	4b0b      	ldr	r3, [pc, #44]	@ (800199c <MX_USART1_UART_Init+0x4c>)
 8001970:	2200      	movs	r2, #0
 8001972:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001974:	4b09      	ldr	r3, [pc, #36]	@ (800199c <MX_USART1_UART_Init+0x4c>)
 8001976:	220c      	movs	r2, #12
 8001978:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800197a:	4b08      	ldr	r3, [pc, #32]	@ (800199c <MX_USART1_UART_Init+0x4c>)
 800197c:	2200      	movs	r2, #0
 800197e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001980:	4b06      	ldr	r3, [pc, #24]	@ (800199c <MX_USART1_UART_Init+0x4c>)
 8001982:	2200      	movs	r2, #0
 8001984:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001986:	4805      	ldr	r0, [pc, #20]	@ (800199c <MX_USART1_UART_Init+0x4c>)
 8001988:	f00d f974 	bl	800ec74 <HAL_UART_Init>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8001992:	f007 fefd 	bl	8009790 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000fc0 	.word	0x20000fc0
 80019a0:	40011000 	.word	0x40011000

080019a4 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80019a8:	4b11      	ldr	r3, [pc, #68]	@ (80019f0 <MX_USART2_UART_Init+0x4c>)
 80019aa:	4a12      	ldr	r2, [pc, #72]	@ (80019f4 <MX_USART2_UART_Init+0x50>)
 80019ac:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80019ae:	4b10      	ldr	r3, [pc, #64]	@ (80019f0 <MX_USART2_UART_Init+0x4c>)
 80019b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019b4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019b6:	4b0e      	ldr	r3, [pc, #56]	@ (80019f0 <MX_USART2_UART_Init+0x4c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80019bc:	4b0c      	ldr	r3, [pc, #48]	@ (80019f0 <MX_USART2_UART_Init+0x4c>)
 80019be:	2200      	movs	r2, #0
 80019c0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80019c2:	4b0b      	ldr	r3, [pc, #44]	@ (80019f0 <MX_USART2_UART_Init+0x4c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80019c8:	4b09      	ldr	r3, [pc, #36]	@ (80019f0 <MX_USART2_UART_Init+0x4c>)
 80019ca:	220c      	movs	r2, #12
 80019cc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ce:	4b08      	ldr	r3, [pc, #32]	@ (80019f0 <MX_USART2_UART_Init+0x4c>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019d4:	4b06      	ldr	r3, [pc, #24]	@ (80019f0 <MX_USART2_UART_Init+0x4c>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80019da:	4805      	ldr	r0, [pc, #20]	@ (80019f0 <MX_USART2_UART_Init+0x4c>)
 80019dc:	f00d f94a 	bl	800ec74 <HAL_UART_Init>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 80019e6:	f007 fed3 	bl	8009790 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20001008 	.word	0x20001008
 80019f4:	40004400 	.word	0x40004400

080019f8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	607b      	str	r3, [r7, #4]
 8001a02:	4b17      	ldr	r3, [pc, #92]	@ (8001a60 <MX_DMA_Init+0x68>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a06:	4a16      	ldr	r2, [pc, #88]	@ (8001a60 <MX_DMA_Init+0x68>)
 8001a08:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a0e:	4b14      	ldr	r3, [pc, #80]	@ (8001a60 <MX_DMA_Init+0x68>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a16:	607b      	str	r3, [r7, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	603b      	str	r3, [r7, #0]
 8001a1e:	4b10      	ldr	r3, [pc, #64]	@ (8001a60 <MX_DMA_Init+0x68>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a22:	4a0f      	ldr	r2, [pc, #60]	@ (8001a60 <MX_DMA_Init+0x68>)
 8001a24:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a60 <MX_DMA_Init+0x68>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a32:	603b      	str	r3, [r7, #0]
 8001a34:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001a36:	2200      	movs	r2, #0
 8001a38:	2105      	movs	r1, #5
 8001a3a:	2010      	movs	r0, #16
 8001a3c:	f009 fb4a 	bl	800b0d4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001a40:	2010      	movs	r0, #16
 8001a42:	f009 fb63 	bl	800b10c <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001a46:	2200      	movs	r2, #0
 8001a48:	2105      	movs	r1, #5
 8001a4a:	203a      	movs	r0, #58	@ 0x3a
 8001a4c:	f009 fb42 	bl	800b0d4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001a50:	203a      	movs	r0, #58	@ 0x3a
 8001a52:	f009 fb5b 	bl	800b10c <HAL_NVIC_EnableIRQ>

}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40023800 	.word	0x40023800

08001a64 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08c      	sub	sp, #48	@ 0x30
 8001a68:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6a:	f107 031c 	add.w	r3, r7, #28
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	605a      	str	r2, [r3, #4]
 8001a74:	609a      	str	r2, [r3, #8]
 8001a76:	60da      	str	r2, [r3, #12]
 8001a78:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61bb      	str	r3, [r7, #24]
 8001a7e:	4b70      	ldr	r3, [pc, #448]	@ (8001c40 <MX_GPIO_Init+0x1dc>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a82:	4a6f      	ldr	r2, [pc, #444]	@ (8001c40 <MX_GPIO_Init+0x1dc>)
 8001a84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a8a:	4b6d      	ldr	r3, [pc, #436]	@ (8001c40 <MX_GPIO_Init+0x1dc>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a92:	61bb      	str	r3, [r7, #24]
 8001a94:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
 8001a9a:	4b69      	ldr	r3, [pc, #420]	@ (8001c40 <MX_GPIO_Init+0x1dc>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9e:	4a68      	ldr	r2, [pc, #416]	@ (8001c40 <MX_GPIO_Init+0x1dc>)
 8001aa0:	f043 0304 	orr.w	r3, r3, #4
 8001aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aa6:	4b66      	ldr	r3, [pc, #408]	@ (8001c40 <MX_GPIO_Init+0x1dc>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aaa:	f003 0304 	and.w	r3, r3, #4
 8001aae:	617b      	str	r3, [r7, #20]
 8001ab0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	4b62      	ldr	r3, [pc, #392]	@ (8001c40 <MX_GPIO_Init+0x1dc>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aba:	4a61      	ldr	r2, [pc, #388]	@ (8001c40 <MX_GPIO_Init+0x1dc>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ac2:	4b5f      	ldr	r3, [pc, #380]	@ (8001c40 <MX_GPIO_Init+0x1dc>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	613b      	str	r3, [r7, #16]
 8001acc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	4b5b      	ldr	r3, [pc, #364]	@ (8001c40 <MX_GPIO_Init+0x1dc>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad6:	4a5a      	ldr	r2, [pc, #360]	@ (8001c40 <MX_GPIO_Init+0x1dc>)
 8001ad8:	f043 0302 	orr.w	r3, r3, #2
 8001adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ade:	4b58      	ldr	r3, [pc, #352]	@ (8001c40 <MX_GPIO_Init+0x1dc>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	60bb      	str	r3, [r7, #8]
 8001aee:	4b54      	ldr	r3, [pc, #336]	@ (8001c40 <MX_GPIO_Init+0x1dc>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af2:	4a53      	ldr	r2, [pc, #332]	@ (8001c40 <MX_GPIO_Init+0x1dc>)
 8001af4:	f043 0310 	orr.w	r3, r3, #16
 8001af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001afa:	4b51      	ldr	r3, [pc, #324]	@ (8001c40 <MX_GPIO_Init+0x1dc>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afe:	f003 0310 	and.w	r3, r3, #16
 8001b02:	60bb      	str	r3, [r7, #8]
 8001b04:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	607b      	str	r3, [r7, #4]
 8001b0a:	4b4d      	ldr	r3, [pc, #308]	@ (8001c40 <MX_GPIO_Init+0x1dc>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0e:	4a4c      	ldr	r2, [pc, #304]	@ (8001c40 <MX_GPIO_Init+0x1dc>)
 8001b10:	f043 0308 	orr.w	r3, r3, #8
 8001b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b16:	4b4a      	ldr	r3, [pc, #296]	@ (8001c40 <MX_GPIO_Init+0x1dc>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1a:	f003 0308 	and.w	r3, r3, #8
 8001b1e:	607b      	str	r3, [r7, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_6, GPIO_PIN_RESET);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2144      	movs	r1, #68	@ 0x44
 8001b26:	4847      	ldr	r0, [pc, #284]	@ (8001c44 <MX_GPIO_Init+0x1e0>)
 8001b28:	f00a f8b4 	bl	800bc94 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2110      	movs	r1, #16
 8001b30:	4845      	ldr	r0, [pc, #276]	@ (8001c48 <MX_GPIO_Init+0x1e4>)
 8001b32:	f00a f8af 	bl	800bc94 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001b36:	2200      	movs	r2, #0
 8001b38:	2101      	movs	r1, #1
 8001b3a:	4844      	ldr	r0, [pc, #272]	@ (8001c4c <MX_GPIO_Init+0x1e8>)
 8001b3c:	f00a f8aa 	bl	800bc94 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15
 8001b40:	2200      	movs	r2, #0
 8001b42:	f64c 4102 	movw	r1, #52226	@ 0xcc02
 8001b46:	4842      	ldr	r0, [pc, #264]	@ (8001c50 <MX_GPIO_Init+0x1ec>)
 8001b48:	f00a f8a4 	bl	800bc94 <HAL_GPIO_WritePin>
			|GPIO_PIN_1, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_7, GPIO_PIN_RESET);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f44f 5102 	mov.w	r1, #8320	@ 0x2080
 8001b52:	4840      	ldr	r0, [pc, #256]	@ (8001c54 <MX_GPIO_Init+0x1f0>)
 8001b54:	f00a f89e 	bl	800bc94 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PC2 PC6 */
	GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8001b58:	2344      	movs	r3, #68	@ 0x44
 8001b5a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b64:	2300      	movs	r3, #0
 8001b66:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b68:	f107 031c 	add.w	r3, r7, #28
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4835      	ldr	r0, [pc, #212]	@ (8001c44 <MX_GPIO_Init+0x1e0>)
 8001b70:	f009 fedc 	bl	800b92c <HAL_GPIO_Init>

	/*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b74:	2310      	movs	r3, #16
 8001b76:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b80:	2300      	movs	r3, #0
 8001b82:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b84:	f107 031c 	add.w	r3, r7, #28
 8001b88:	4619      	mov	r1, r3
 8001b8a:	482f      	ldr	r0, [pc, #188]	@ (8001c48 <MX_GPIO_Init+0x1e4>)
 8001b8c:	f009 fece 	bl	800b92c <HAL_GPIO_Init>

	/*Configure GPIO pin : PB0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b90:	2301      	movs	r3, #1
 8001b92:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b94:	2301      	movs	r3, #1
 8001b96:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba0:	f107 031c 	add.w	r3, r7, #28
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4829      	ldr	r0, [pc, #164]	@ (8001c4c <MX_GPIO_Init+0x1e8>)
 8001ba8:	f009 fec0 	bl	800b92c <HAL_GPIO_Init>

	/*Configure GPIO pins : PE10 PE11 PE14 PE15
                           PE1 */
	GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15
 8001bac:	f64c 4302 	movw	r3, #52226	@ 0xcc02
 8001bb0:	61fb      	str	r3, [r7, #28]
			|GPIO_PIN_1;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bbe:	f107 031c 	add.w	r3, r7, #28
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4822      	ldr	r0, [pc, #136]	@ (8001c50 <MX_GPIO_Init+0x1ec>)
 8001bc6:	f009 feb1 	bl	800b92c <HAL_GPIO_Init>

	/*Configure GPIO pin : PE13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001bca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bce:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bd8:	f107 031c 	add.w	r3, r7, #28
 8001bdc:	4619      	mov	r1, r3
 8001bde:	481c      	ldr	r0, [pc, #112]	@ (8001c50 <MX_GPIO_Init+0x1ec>)
 8001be0:	f009 fea4 	bl	800b92c <HAL_GPIO_Init>

	/*Configure GPIO pin : PD11 */
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001be4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001be8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bea:	2300      	movs	r3, #0
 8001bec:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bf2:	f107 031c 	add.w	r3, r7, #28
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4816      	ldr	r0, [pc, #88]	@ (8001c54 <MX_GPIO_Init+0x1f0>)
 8001bfa:	f009 fe97 	bl	800b92c <HAL_GPIO_Init>

	/*Configure GPIO pins : PD13 PD7 */
	GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_7;
 8001bfe:	f44f 5302 	mov.w	r3, #8320	@ 0x2080
 8001c02:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c04:	2301      	movs	r3, #1
 8001c06:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c10:	f107 031c 	add.w	r3, r7, #28
 8001c14:	4619      	mov	r1, r3
 8001c16:	480f      	ldr	r0, [pc, #60]	@ (8001c54 <MX_GPIO_Init+0x1f0>)
 8001c18:	f009 fe88 	bl	800b92c <HAL_GPIO_Init>

	/*Configure GPIO pin : PC9 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c20:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c22:	2300      	movs	r3, #0
 8001c24:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c2a:	f107 031c 	add.w	r3, r7, #28
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4804      	ldr	r0, [pc, #16]	@ (8001c44 <MX_GPIO_Init+0x1e0>)
 8001c32:	f009 fe7b 	bl	800b92c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8001c36:	bf00      	nop
 8001c38:	3730      	adds	r7, #48	@ 0x30
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40020800 	.word	0x40020800
 8001c48:	40020000 	.word	0x40020000
 8001c4c:	40020400 	.word	0x40020400
 8001c50:	40021000 	.word	0x40021000
 8001c54:	40020c00 	.word	0x40020c00

08001c58 <ICON_TOGGLE>:

/* USER CODE BEGIN 4 */
uint8_t* ICON_TOGGLE(uint8_t ADD_H, uint8_t ADD_L, uint8_t pos, uint8_t status) {
 8001c58:	b590      	push	{r4, r7, lr}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4604      	mov	r4, r0
 8001c60:	4608      	mov	r0, r1
 8001c62:	4611      	mov	r1, r2
 8001c64:	461a      	mov	r2, r3
 8001c66:	4623      	mov	r3, r4
 8001c68:	71fb      	strb	r3, [r7, #7]
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	71bb      	strb	r3, [r7, #6]
 8001c6e:	460b      	mov	r3, r1
 8001c70:	717b      	strb	r3, [r7, #5]
 8001c72:	4613      	mov	r3, r2
 8001c74:	713b      	strb	r3, [r7, #4]

	uint8_t *temp_arr = (uint8_t*) malloc(8 * sizeof(uint8_t));
 8001c76:	2008      	movs	r0, #8
 8001c78:	f011 fb16 	bl	80132a8 <malloc>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	60fb      	str	r3, [r7, #12]

	if (status == 0x00) {
 8001c80:	793b      	ldrb	r3, [r7, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d125      	bne.n	8001cd2 <ICON_TOGGLE+0x7a>

		button_color_status = 0x01;
 8001c86:	4b2b      	ldr	r3, [pc, #172]	@ (8001d34 <ICON_TOGGLE+0xdc>)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	701a      	strb	r2, [r3, #0]
		temp_arr[0] = 0x5a;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	225a      	movs	r2, #90	@ 0x5a
 8001c90:	701a      	strb	r2, [r3, #0]
		temp_arr[1] = 0xa5;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	3301      	adds	r3, #1
 8001c96:	22a5      	movs	r2, #165	@ 0xa5
 8001c98:	701a      	strb	r2, [r3, #0]
		temp_arr[2] = 0x05;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	3302      	adds	r3, #2
 8001c9e:	2205      	movs	r2, #5
 8001ca0:	701a      	strb	r2, [r3, #0]
		temp_arr[3] = 0x82;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	3303      	adds	r3, #3
 8001ca6:	2282      	movs	r2, #130	@ 0x82
 8001ca8:	701a      	strb	r2, [r3, #0]
		temp_arr[4] = ADD_H;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	3304      	adds	r3, #4
 8001cae:	79fa      	ldrb	r2, [r7, #7]
 8001cb0:	701a      	strb	r2, [r3, #0]
		temp_arr[5] = ADD_L;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	3305      	adds	r3, #5
 8001cb6:	79ba      	ldrb	r2, [r7, #6]
 8001cb8:	701a      	strb	r2, [r3, #0]
		temp_arr[6] = 0x00;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	3306      	adds	r3, #6
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	701a      	strb	r2, [r3, #0]
		temp_arr[7] = GREEN_ICON[pos];
 8001cc2:	797a      	ldrb	r2, [r7, #5]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	3307      	adds	r3, #7
 8001cc8:	491b      	ldr	r1, [pc, #108]	@ (8001d38 <ICON_TOGGLE+0xe0>)
 8001cca:	5c8a      	ldrb	r2, [r1, r2]
 8001ccc:	701a      	strb	r2, [r3, #0]

		return temp_arr;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	e02c      	b.n	8001d2c <ICON_TOGGLE+0xd4>

	}

	if (status == 0x01) {
 8001cd2:	793b      	ldrb	r3, [r7, #4]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d125      	bne.n	8001d24 <ICON_TOGGLE+0xcc>

		button_color_status = 0x00;
 8001cd8:	4b16      	ldr	r3, [pc, #88]	@ (8001d34 <ICON_TOGGLE+0xdc>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	701a      	strb	r2, [r3, #0]
		temp_arr[0] = 0x5a;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	225a      	movs	r2, #90	@ 0x5a
 8001ce2:	701a      	strb	r2, [r3, #0]
		temp_arr[1] = 0xa5;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	22a5      	movs	r2, #165	@ 0xa5
 8001cea:	701a      	strb	r2, [r3, #0]
		temp_arr[2] = 0x05;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	3302      	adds	r3, #2
 8001cf0:	2205      	movs	r2, #5
 8001cf2:	701a      	strb	r2, [r3, #0]
		temp_arr[3] = 0x82;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	3303      	adds	r3, #3
 8001cf8:	2282      	movs	r2, #130	@ 0x82
 8001cfa:	701a      	strb	r2, [r3, #0]
		temp_arr[4] = ADD_H;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	3304      	adds	r3, #4
 8001d00:	79fa      	ldrb	r2, [r7, #7]
 8001d02:	701a      	strb	r2, [r3, #0]
		temp_arr[5] = ADD_L;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	3305      	adds	r3, #5
 8001d08:	79ba      	ldrb	r2, [r7, #6]
 8001d0a:	701a      	strb	r2, [r3, #0]
		temp_arr[6] = 0x00;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	3306      	adds	r3, #6
 8001d10:	2200      	movs	r2, #0
 8001d12:	701a      	strb	r2, [r3, #0]
		temp_arr[7] = BLUE_ICON[pos];
 8001d14:	797a      	ldrb	r2, [r7, #5]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	3307      	adds	r3, #7
 8001d1a:	4908      	ldr	r1, [pc, #32]	@ (8001d3c <ICON_TOGGLE+0xe4>)
 8001d1c:	5c8a      	ldrb	r2, [r1, r2]
 8001d1e:	701a      	strb	r2, [r3, #0]

		return temp_arr;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	e003      	b.n	8001d2c <ICON_TOGGLE+0xd4>


	}
	free(temp_arr);
 8001d24:	68f8      	ldr	r0, [r7, #12]
 8001d26:	f011 fac7 	bl	80132b8 <free>
	return NULL;
 8001d2a:	2300      	movs	r3, #0

}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd90      	pop	{r4, r7, pc}
 8001d34:	20001602 	.word	0x20001602
 8001d38:	20000120 	.word	0x20000120
 8001d3c:	20000138 	.word	0x20000138

08001d40 <display_icon_clr>:

void display_icon_clr(uint8_t ADD_H, uint8_t icon_add, uint8_t pos) {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	71bb      	strb	r3, [r7, #6]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	717b      	strb	r3, [r7, #5]

	uint8_t temp_arr[8] = { 0 };
 8001d52:	f107 0308 	add.w	r3, r7, #8
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	605a      	str	r2, [r3, #4]
	temp_arr[0] = 0x5a;
 8001d5c:	235a      	movs	r3, #90	@ 0x5a
 8001d5e:	723b      	strb	r3, [r7, #8]
	temp_arr[1] = 0xa5;
 8001d60:	23a5      	movs	r3, #165	@ 0xa5
 8001d62:	727b      	strb	r3, [r7, #9]
	temp_arr[2] = 0x05;
 8001d64:	2305      	movs	r3, #5
 8001d66:	72bb      	strb	r3, [r7, #10]
	temp_arr[3] = 0x82;
 8001d68:	2382      	movs	r3, #130	@ 0x82
 8001d6a:	72fb      	strb	r3, [r7, #11]
	temp_arr[4] = ADD_H;
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
 8001d6e:	733b      	strb	r3, [r7, #12]
	temp_arr[5] = icon_add;
 8001d70:	79bb      	ldrb	r3, [r7, #6]
 8001d72:	737b      	strb	r3, [r7, #13]
	temp_arr[6] = 0x00;
 8001d74:	2300      	movs	r3, #0
 8001d76:	73bb      	strb	r3, [r7, #14]
	temp_arr[7] = BLUE_ICON[pos];
 8001d78:	797b      	ldrb	r3, [r7, #5]
 8001d7a:	4a07      	ldr	r2, [pc, #28]	@ (8001d98 <display_icon_clr+0x58>)
 8001d7c:	5cd3      	ldrb	r3, [r2, r3]
 8001d7e:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, temp_arr, sizeof(temp_arr), 1);
 8001d80:	f107 0108 	add.w	r1, r7, #8
 8001d84:	2301      	movs	r3, #1
 8001d86:	2208      	movs	r2, #8
 8001d88:	4804      	ldr	r0, [pc, #16]	@ (8001d9c <display_icon_clr+0x5c>)
 8001d8a:	f00c ffc3 	bl	800ed14 <HAL_UART_Transmit>

}
 8001d8e:	bf00      	nop
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000138 	.word	0x20000138
 8001d9c:	20000fc0 	.word	0x20000fc0

08001da0 <display_data>:

uint8_t* display_data(uint8_t ADDH, uint8_t ADDL, uint8_t BUTTON_STATUS) {
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	71fb      	strb	r3, [r7, #7]
 8001daa:	460b      	mov	r3, r1
 8001dac:	71bb      	strb	r3, [r7, #6]
 8001dae:	4613      	mov	r3, r2
 8001db0:	717b      	strb	r3, [r7, #5]

	uint8_t *temp_data = (uint8_t*) malloc(8 * sizeof(uint8_t));
 8001db2:	2008      	movs	r0, #8
 8001db4:	f011 fa78 	bl	80132a8 <malloc>
 8001db8:	4603      	mov	r3, r0
 8001dba:	60fb      	str	r3, [r7, #12]

	//	uint8_t

	if ((ADDH == 0x10) && (ADDL > 0x00)) {
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	2b10      	cmp	r3, #16
 8001dc0:	f040 81fe 	bne.w	80021c0 <display_data+0x420>
 8001dc4:	79bb      	ldrb	r3, [r7, #6]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 81fa 	beq.w	80021c0 <display_data+0x420>

		switch (ADDL) {
 8001dcc:	79bb      	ldrb	r3, [r7, #6]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	2b21      	cmp	r3, #33	@ 0x21
 8001dd2:	f200 81f5 	bhi.w	80021c0 <display_data+0x420>
 8001dd6:	a201      	add	r2, pc, #4	@ (adr r2, 8001ddc <display_data+0x3c>)
 8001dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ddc:	08001e65 	.word	0x08001e65
 8001de0:	08001e97 	.word	0x08001e97
 8001de4:	08001ec3 	.word	0x08001ec3
 8001de8:	08001eef 	.word	0x08001eef
 8001dec:	08001f1b 	.word	0x08001f1b
 8001df0:	08001f47 	.word	0x08001f47
 8001df4:	08001f73 	.word	0x08001f73
 8001df8:	08001f9f 	.word	0x08001f9f
 8001dfc:	080021c1 	.word	0x080021c1
 8001e00:	080021c1 	.word	0x080021c1
 8001e04:	080021c1 	.word	0x080021c1
 8001e08:	080021c1 	.word	0x080021c1
 8001e0c:	080021c1 	.word	0x080021c1
 8001e10:	080021c1 	.word	0x080021c1
 8001e14:	080021c1 	.word	0x080021c1
 8001e18:	080021c1 	.word	0x080021c1
 8001e1c:	080021c1 	.word	0x080021c1
 8001e20:	08001fcb 	.word	0x08001fcb
 8001e24:	08001ff7 	.word	0x08001ff7
 8001e28:	08002023 	.word	0x08002023
 8001e2c:	0800204f 	.word	0x0800204f
 8001e30:	0800207b 	.word	0x0800207b
 8001e34:	080020a7 	.word	0x080020a7
 8001e38:	080020d3 	.word	0x080020d3
 8001e3c:	080020ff 	.word	0x080020ff
 8001e40:	080021c1 	.word	0x080021c1
 8001e44:	080021c1 	.word	0x080021c1
 8001e48:	080021c1 	.word	0x080021c1
 8001e4c:	080021c1 	.word	0x080021c1
 8001e50:	080021c1 	.word	0x080021c1
 8001e54:	080021c1 	.word	0x080021c1
 8001e58:	0800212b 	.word	0x0800212b
 8001e5c:	08002157 	.word	0x08002157
 8001e60:	08002195 	.word	0x08002195

		case 0x01:
			cls_con(temp_add);
 8001e64:	4bc7      	ldr	r3, [pc, #796]	@ (8002184 <display_data+0x3e4>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f000 f9b5 	bl	80021d8 <cls_con>
			inc_drc_icon(BUTTON_STATUS);
 8001e6e:	797b      	ldrb	r3, [r7, #5]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f000 f9f5 	bl	8002260 <inc_drc_icon>
			osDelay(50);
 8001e76:	2032      	movs	r0, #50	@ 0x32
 8001e78:	f00e fa9f 	bl	80103ba <osDelay>
			HAL_UART_Transmit(&huart1,
					ICON_TOGGLE(0x10, 0x01, 0, BUTTON_STATUS), 8,
 8001e7c:	797b      	ldrb	r3, [r7, #5]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2101      	movs	r1, #1
 8001e82:	2010      	movs	r0, #16
 8001e84:	f7ff fee8 	bl	8001c58 <ICON_TOGGLE>
 8001e88:	4601      	mov	r1, r0
			HAL_UART_Transmit(&huart1,
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	2208      	movs	r2, #8
 8001e8e:	48be      	ldr	r0, [pc, #760]	@ (8002188 <display_data+0x3e8>)
 8001e90:	f00c ff40 	bl	800ed14 <HAL_UART_Transmit>
					1);
			break;
 8001e94:	e194      	b.n	80021c0 <display_data+0x420>

		case 0x02:
			cls_con(temp_add);
 8001e96:	4bbb      	ldr	r3, [pc, #748]	@ (8002184 <display_data+0x3e4>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f000 f99c 	bl	80021d8 <cls_con>
			inc_drc_icon(BUTTON_STATUS);
 8001ea0:	797b      	ldrb	r3, [r7, #5]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f000 f9dc 	bl	8002260 <inc_drc_icon>
			HAL_UART_Transmit(&huart1,
					ICON_TOGGLE(0x10, 0x02, 1, BUTTON_STATUS), 8,
 8001ea8:	797b      	ldrb	r3, [r7, #5]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	2102      	movs	r1, #2
 8001eae:	2010      	movs	r0, #16
 8001eb0:	f7ff fed2 	bl	8001c58 <ICON_TOGGLE>
 8001eb4:	4601      	mov	r1, r0
			HAL_UART_Transmit(&huart1,
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	2208      	movs	r2, #8
 8001eba:	48b3      	ldr	r0, [pc, #716]	@ (8002188 <display_data+0x3e8>)
 8001ebc:	f00c ff2a 	bl	800ed14 <HAL_UART_Transmit>
					1);
			break;
 8001ec0:	e17e      	b.n	80021c0 <display_data+0x420>

		case 0x03:
			cls_con(temp_add);
 8001ec2:	4bb0      	ldr	r3, [pc, #704]	@ (8002184 <display_data+0x3e4>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f000 f986 	bl	80021d8 <cls_con>
			//			osDelay(50);
			inc_drc_icon(BUTTON_STATUS);
 8001ecc:	797b      	ldrb	r3, [r7, #5]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f000 f9c6 	bl	8002260 <inc_drc_icon>
			//			osDelay(50);
			HAL_UART_Transmit(&huart1,
					ICON_TOGGLE(0x10, 0x03, 2, BUTTON_STATUS), 8,
 8001ed4:	797b      	ldrb	r3, [r7, #5]
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	2103      	movs	r1, #3
 8001eda:	2010      	movs	r0, #16
 8001edc:	f7ff febc 	bl	8001c58 <ICON_TOGGLE>
 8001ee0:	4601      	mov	r1, r0
			HAL_UART_Transmit(&huart1,
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	2208      	movs	r2, #8
 8001ee6:	48a8      	ldr	r0, [pc, #672]	@ (8002188 <display_data+0x3e8>)
 8001ee8:	f00c ff14 	bl	800ed14 <HAL_UART_Transmit>
					1);
			break;
 8001eec:	e168      	b.n	80021c0 <display_data+0x420>

		case 0x04:
			cls_con(temp_add);
 8001eee:	4ba5      	ldr	r3, [pc, #660]	@ (8002184 <display_data+0x3e4>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f000 f970 	bl	80021d8 <cls_con>
			inc_drc_icon(BUTTON_STATUS);
 8001ef8:	797b      	ldrb	r3, [r7, #5]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 f9b0 	bl	8002260 <inc_drc_icon>
			HAL_UART_Transmit(&huart1,
					ICON_TOGGLE(0x10, 0x04, 3, BUTTON_STATUS), 8,
 8001f00:	797b      	ldrb	r3, [r7, #5]
 8001f02:	2203      	movs	r2, #3
 8001f04:	2104      	movs	r1, #4
 8001f06:	2010      	movs	r0, #16
 8001f08:	f7ff fea6 	bl	8001c58 <ICON_TOGGLE>
 8001f0c:	4601      	mov	r1, r0
			HAL_UART_Transmit(&huart1,
 8001f0e:	2301      	movs	r3, #1
 8001f10:	2208      	movs	r2, #8
 8001f12:	489d      	ldr	r0, [pc, #628]	@ (8002188 <display_data+0x3e8>)
 8001f14:	f00c fefe 	bl	800ed14 <HAL_UART_Transmit>
					1);
			break;
 8001f18:	e152      	b.n	80021c0 <display_data+0x420>

		case 0x05:
			cls_con(temp_add);
 8001f1a:	4b9a      	ldr	r3, [pc, #616]	@ (8002184 <display_data+0x3e4>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f000 f95a 	bl	80021d8 <cls_con>
			inc_drc_icon(BUTTON_STATUS);
 8001f24:	797b      	ldrb	r3, [r7, #5]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f000 f99a 	bl	8002260 <inc_drc_icon>
			HAL_UART_Transmit(&huart1,
					ICON_TOGGLE(0x10, 0x05, 4, BUTTON_STATUS), 8,
 8001f2c:	797b      	ldrb	r3, [r7, #5]
 8001f2e:	2204      	movs	r2, #4
 8001f30:	2105      	movs	r1, #5
 8001f32:	2010      	movs	r0, #16
 8001f34:	f7ff fe90 	bl	8001c58 <ICON_TOGGLE>
 8001f38:	4601      	mov	r1, r0
			HAL_UART_Transmit(&huart1,
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	2208      	movs	r2, #8
 8001f3e:	4892      	ldr	r0, [pc, #584]	@ (8002188 <display_data+0x3e8>)
 8001f40:	f00c fee8 	bl	800ed14 <HAL_UART_Transmit>
					1);
			break;
 8001f44:	e13c      	b.n	80021c0 <display_data+0x420>

		case 0x06:
			cls_con(temp_add);
 8001f46:	4b8f      	ldr	r3, [pc, #572]	@ (8002184 <display_data+0x3e4>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 f944 	bl	80021d8 <cls_con>
			inc_drc_icon(BUTTON_STATUS);
 8001f50:	797b      	ldrb	r3, [r7, #5]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f000 f984 	bl	8002260 <inc_drc_icon>
			HAL_UART_Transmit(&huart1,
					ICON_TOGGLE(0x10, 0x06, 5, BUTTON_STATUS), 8,
 8001f58:	797b      	ldrb	r3, [r7, #5]
 8001f5a:	2205      	movs	r2, #5
 8001f5c:	2106      	movs	r1, #6
 8001f5e:	2010      	movs	r0, #16
 8001f60:	f7ff fe7a 	bl	8001c58 <ICON_TOGGLE>
 8001f64:	4601      	mov	r1, r0
			HAL_UART_Transmit(&huart1,
 8001f66:	2301      	movs	r3, #1
 8001f68:	2208      	movs	r2, #8
 8001f6a:	4887      	ldr	r0, [pc, #540]	@ (8002188 <display_data+0x3e8>)
 8001f6c:	f00c fed2 	bl	800ed14 <HAL_UART_Transmit>
					1);
			break;
 8001f70:	e126      	b.n	80021c0 <display_data+0x420>

		case 0x07:
			cls_con(temp_add);
 8001f72:	4b84      	ldr	r3, [pc, #528]	@ (8002184 <display_data+0x3e4>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f000 f92e 	bl	80021d8 <cls_con>
			inc_drc_icon(BUTTON_STATUS);
 8001f7c:	797b      	ldrb	r3, [r7, #5]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 f96e 	bl	8002260 <inc_drc_icon>
			HAL_UART_Transmit(&huart1,
					ICON_TOGGLE(0x10, 0x07, 6, BUTTON_STATUS), 8,
 8001f84:	797b      	ldrb	r3, [r7, #5]
 8001f86:	2206      	movs	r2, #6
 8001f88:	2107      	movs	r1, #7
 8001f8a:	2010      	movs	r0, #16
 8001f8c:	f7ff fe64 	bl	8001c58 <ICON_TOGGLE>
 8001f90:	4601      	mov	r1, r0
			HAL_UART_Transmit(&huart1,
 8001f92:	2301      	movs	r3, #1
 8001f94:	2208      	movs	r2, #8
 8001f96:	487c      	ldr	r0, [pc, #496]	@ (8002188 <display_data+0x3e8>)
 8001f98:	f00c febc 	bl	800ed14 <HAL_UART_Transmit>
					1);
			break;
 8001f9c:	e110      	b.n	80021c0 <display_data+0x420>

		case 0x08:
			cls_con(temp_add);
 8001f9e:	4b79      	ldr	r3, [pc, #484]	@ (8002184 <display_data+0x3e4>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f000 f918 	bl	80021d8 <cls_con>
			inc_drc_icon(BUTTON_STATUS);
 8001fa8:	797b      	ldrb	r3, [r7, #5]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f000 f958 	bl	8002260 <inc_drc_icon>
			HAL_UART_Transmit(&huart1,
					ICON_TOGGLE(0x10, 0x08, 7, BUTTON_STATUS), 8,
 8001fb0:	797b      	ldrb	r3, [r7, #5]
 8001fb2:	2207      	movs	r2, #7
 8001fb4:	2108      	movs	r1, #8
 8001fb6:	2010      	movs	r0, #16
 8001fb8:	f7ff fe4e 	bl	8001c58 <ICON_TOGGLE>
 8001fbc:	4601      	mov	r1, r0
			HAL_UART_Transmit(&huart1,
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	2208      	movs	r2, #8
 8001fc2:	4871      	ldr	r0, [pc, #452]	@ (8002188 <display_data+0x3e8>)
 8001fc4:	f00c fea6 	bl	800ed14 <HAL_UART_Transmit>
					1);
			break;
 8001fc8:	e0fa      	b.n	80021c0 <display_data+0x420>
			//			temp_data = ICON_TOGGLE(0x10, 0x11, 11, BUTTON_STATUS);
			//			return temp_data;
			//			break;

		case 0x12:
			cls_con(clear_add);
 8001fca:	4b70      	ldr	r3, [pc, #448]	@ (800218c <display_data+0x3ec>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f000 f902 	bl	80021d8 <cls_con>
			inc_drc_icon(BUTTON_STATUS);
 8001fd4:	797b      	ldrb	r3, [r7, #5]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f000 f942 	bl	8002260 <inc_drc_icon>
			HAL_UART_Transmit(&huart1,
					ICON_TOGGLE(0x10, 0x12, 11, BUTTON_STATUS), 8,
 8001fdc:	797b      	ldrb	r3, [r7, #5]
 8001fde:	220b      	movs	r2, #11
 8001fe0:	2112      	movs	r1, #18
 8001fe2:	2010      	movs	r0, #16
 8001fe4:	f7ff fe38 	bl	8001c58 <ICON_TOGGLE>
 8001fe8:	4601      	mov	r1, r0
			HAL_UART_Transmit(&huart1,
 8001fea:	2301      	movs	r3, #1
 8001fec:	2208      	movs	r2, #8
 8001fee:	4866      	ldr	r0, [pc, #408]	@ (8002188 <display_data+0x3e8>)
 8001ff0:	f00c fe90 	bl	800ed14 <HAL_UART_Transmit>
					1);
			break;
 8001ff4:	e0e4      	b.n	80021c0 <display_data+0x420>
		case 0x13:
			cls_con(clear_add);
 8001ff6:	4b65      	ldr	r3, [pc, #404]	@ (800218c <display_data+0x3ec>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f000 f8ec 	bl	80021d8 <cls_con>
			inc_drc_icon(BUTTON_STATUS);
 8002000:	797b      	ldrb	r3, [r7, #5]
 8002002:	4618      	mov	r0, r3
 8002004:	f000 f92c 	bl	8002260 <inc_drc_icon>
			HAL_UART_Transmit(&huart1,
					ICON_TOGGLE(0x10, 0x13, 12, BUTTON_STATUS), 8,
 8002008:	797b      	ldrb	r3, [r7, #5]
 800200a:	220c      	movs	r2, #12
 800200c:	2113      	movs	r1, #19
 800200e:	2010      	movs	r0, #16
 8002010:	f7ff fe22 	bl	8001c58 <ICON_TOGGLE>
 8002014:	4601      	mov	r1, r0
			HAL_UART_Transmit(&huart1,
 8002016:	2301      	movs	r3, #1
 8002018:	2208      	movs	r2, #8
 800201a:	485b      	ldr	r0, [pc, #364]	@ (8002188 <display_data+0x3e8>)
 800201c:	f00c fe7a 	bl	800ed14 <HAL_UART_Transmit>
					1);
			break;
 8002020:	e0ce      	b.n	80021c0 <display_data+0x420>
			//					ICON_TOGGLE(0x10, 0x35, 13, BUTTON_STATUS), 8,
			//					HAL_MAX_DELAY);
			//			break;

		case 0x14:
			cls_con(clear_add);
 8002022:	4b5a      	ldr	r3, [pc, #360]	@ (800218c <display_data+0x3ec>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f000 f8d6 	bl	80021d8 <cls_con>
			inc_drc_icon(BUTTON_STATUS);
 800202c:	797b      	ldrb	r3, [r7, #5]
 800202e:	4618      	mov	r0, r3
 8002030:	f000 f916 	bl	8002260 <inc_drc_icon>
			HAL_UART_Transmit(&huart1,
					ICON_TOGGLE(0x10, 0x14, 13, BUTTON_STATUS), 8,
 8002034:	797b      	ldrb	r3, [r7, #5]
 8002036:	220d      	movs	r2, #13
 8002038:	2114      	movs	r1, #20
 800203a:	2010      	movs	r0, #16
 800203c:	f7ff fe0c 	bl	8001c58 <ICON_TOGGLE>
 8002040:	4601      	mov	r1, r0
			HAL_UART_Transmit(&huart1,
 8002042:	2301      	movs	r3, #1
 8002044:	2208      	movs	r2, #8
 8002046:	4850      	ldr	r0, [pc, #320]	@ (8002188 <display_data+0x3e8>)
 8002048:	f00c fe64 	bl	800ed14 <HAL_UART_Transmit>
					1);
			break;
 800204c:	e0b8      	b.n	80021c0 <display_data+0x420>

		case 0x15:
			cls_con(clear_add);
 800204e:	4b4f      	ldr	r3, [pc, #316]	@ (800218c <display_data+0x3ec>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f000 f8c0 	bl	80021d8 <cls_con>

			inc_drc_icon(BUTTON_STATUS);
 8002058:	797b      	ldrb	r3, [r7, #5]
 800205a:	4618      	mov	r0, r3
 800205c:	f000 f900 	bl	8002260 <inc_drc_icon>

			HAL_UART_Transmit(&huart1,
					ICON_TOGGLE(0x10, 0x15, 14, BUTTON_STATUS), 8,
 8002060:	797b      	ldrb	r3, [r7, #5]
 8002062:	220e      	movs	r2, #14
 8002064:	2115      	movs	r1, #21
 8002066:	2010      	movs	r0, #16
 8002068:	f7ff fdf6 	bl	8001c58 <ICON_TOGGLE>
 800206c:	4601      	mov	r1, r0
			HAL_UART_Transmit(&huart1,
 800206e:	2301      	movs	r3, #1
 8002070:	2208      	movs	r2, #8
 8002072:	4845      	ldr	r0, [pc, #276]	@ (8002188 <display_data+0x3e8>)
 8002074:	f00c fe4e 	bl	800ed14 <HAL_UART_Transmit>
					1);
			break;
 8002078:	e0a2      	b.n	80021c0 <display_data+0x420>

		case 0x16:

			cls_con(clear_add);
 800207a:	4b44      	ldr	r3, [pc, #272]	@ (800218c <display_data+0x3ec>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f000 f8aa 	bl	80021d8 <cls_con>

			inc_drc_icon(BUTTON_STATUS);
 8002084:	797b      	ldrb	r3, [r7, #5]
 8002086:	4618      	mov	r0, r3
 8002088:	f000 f8ea 	bl	8002260 <inc_drc_icon>

			HAL_UART_Transmit(&huart1,
					ICON_TOGGLE(0x10, 0x16, 15, BUTTON_STATUS), 8,
 800208c:	797b      	ldrb	r3, [r7, #5]
 800208e:	220f      	movs	r2, #15
 8002090:	2116      	movs	r1, #22
 8002092:	2010      	movs	r0, #16
 8002094:	f7ff fde0 	bl	8001c58 <ICON_TOGGLE>
 8002098:	4601      	mov	r1, r0
			HAL_UART_Transmit(&huart1,
 800209a:	2301      	movs	r3, #1
 800209c:	2208      	movs	r2, #8
 800209e:	483a      	ldr	r0, [pc, #232]	@ (8002188 <display_data+0x3e8>)
 80020a0:	f00c fe38 	bl	800ed14 <HAL_UART_Transmit>
					1);
			break;
 80020a4:	e08c      	b.n	80021c0 <display_data+0x420>

		case 0x17:

			cls_con(clear_add);
 80020a6:	4b39      	ldr	r3, [pc, #228]	@ (800218c <display_data+0x3ec>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f000 f894 	bl	80021d8 <cls_con>

			inc_drc_icon(BUTTON_STATUS);
 80020b0:	797b      	ldrb	r3, [r7, #5]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f000 f8d4 	bl	8002260 <inc_drc_icon>

			HAL_UART_Transmit(&huart1,
					ICON_TOGGLE(0x10, 0x17, 16, BUTTON_STATUS), 8,
 80020b8:	797b      	ldrb	r3, [r7, #5]
 80020ba:	2210      	movs	r2, #16
 80020bc:	2117      	movs	r1, #23
 80020be:	2010      	movs	r0, #16
 80020c0:	f7ff fdca 	bl	8001c58 <ICON_TOGGLE>
 80020c4:	4601      	mov	r1, r0
			HAL_UART_Transmit(&huart1,
 80020c6:	2301      	movs	r3, #1
 80020c8:	2208      	movs	r2, #8
 80020ca:	482f      	ldr	r0, [pc, #188]	@ (8002188 <display_data+0x3e8>)
 80020cc:	f00c fe22 	bl	800ed14 <HAL_UART_Transmit>
					1);
			break;
 80020d0:	e076      	b.n	80021c0 <display_data+0x420>

		case 0x18:

			cls_con(clear_add);
 80020d2:	4b2e      	ldr	r3, [pc, #184]	@ (800218c <display_data+0x3ec>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f000 f87e 	bl	80021d8 <cls_con>

			inc_drc_icon(BUTTON_STATUS);
 80020dc:	797b      	ldrb	r3, [r7, #5]
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 f8be 	bl	8002260 <inc_drc_icon>

			HAL_UART_Transmit(&huart1,
					ICON_TOGGLE(0x10, 0x18, 17, BUTTON_STATUS), 8,
 80020e4:	797b      	ldrb	r3, [r7, #5]
 80020e6:	2211      	movs	r2, #17
 80020e8:	2118      	movs	r1, #24
 80020ea:	2010      	movs	r0, #16
 80020ec:	f7ff fdb4 	bl	8001c58 <ICON_TOGGLE>
 80020f0:	4601      	mov	r1, r0
			HAL_UART_Transmit(&huart1,
 80020f2:	2301      	movs	r3, #1
 80020f4:	2208      	movs	r2, #8
 80020f6:	4824      	ldr	r0, [pc, #144]	@ (8002188 <display_data+0x3e8>)
 80020f8:	f00c fe0c 	bl	800ed14 <HAL_UART_Transmit>
					1);
			break;
 80020fc:	e060      	b.n	80021c0 <display_data+0x420>

		case 0x19:
			cls_con(clear_add);
 80020fe:	4b23      	ldr	r3, [pc, #140]	@ (800218c <display_data+0x3ec>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f000 f868 	bl	80021d8 <cls_con>
			inc_drc_icon(BUTTON_STATUS);
 8002108:	797b      	ldrb	r3, [r7, #5]
 800210a:	4618      	mov	r0, r3
 800210c:	f000 f8a8 	bl	8002260 <inc_drc_icon>
			HAL_UART_Transmit(&huart1,
					ICON_TOGGLE(0x10, 0x19, 18, BUTTON_STATUS), 8,
 8002110:	797b      	ldrb	r3, [r7, #5]
 8002112:	2212      	movs	r2, #18
 8002114:	2119      	movs	r1, #25
 8002116:	2010      	movs	r0, #16
 8002118:	f7ff fd9e 	bl	8001c58 <ICON_TOGGLE>
 800211c:	4601      	mov	r1, r0
			HAL_UART_Transmit(&huart1,
 800211e:	2301      	movs	r3, #1
 8002120:	2208      	movs	r2, #8
 8002122:	4819      	ldr	r0, [pc, #100]	@ (8002188 <display_data+0x3e8>)
 8002124:	f00c fdf6 	bl	800ed14 <HAL_UART_Transmit>
					1);
			break;
 8002128:	e04a      	b.n	80021c0 <display_data+0x420>
		case 0x20:
			cls_con(clears_add);
 800212a:	4b19      	ldr	r3, [pc, #100]	@ (8002190 <display_data+0x3f0>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f000 f852 	bl	80021d8 <cls_con>
			inc_drc_icon(BUTTON_STATUS);
 8002134:	797b      	ldrb	r3, [r7, #5]
 8002136:	4618      	mov	r0, r3
 8002138:	f000 f892 	bl	8002260 <inc_drc_icon>
			HAL_UART_Transmit(&huart1,
					ICON_TOGGLE(0x10, 0x20, 19, BUTTON_STATUS), 8,
 800213c:	797b      	ldrb	r3, [r7, #5]
 800213e:	2213      	movs	r2, #19
 8002140:	2120      	movs	r1, #32
 8002142:	2010      	movs	r0, #16
 8002144:	f7ff fd88 	bl	8001c58 <ICON_TOGGLE>
 8002148:	4601      	mov	r1, r0
			HAL_UART_Transmit(&huart1,
 800214a:	2301      	movs	r3, #1
 800214c:	2208      	movs	r2, #8
 800214e:	480e      	ldr	r0, [pc, #56]	@ (8002188 <display_data+0x3e8>)
 8002150:	f00c fde0 	bl	800ed14 <HAL_UART_Transmit>
					1);
			break;
 8002154:	e034      	b.n	80021c0 <display_data+0x420>
		case 0x21:
			cls_con(clears_add);
 8002156:	4b0e      	ldr	r3, [pc, #56]	@ (8002190 <display_data+0x3f0>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f000 f83c 	bl	80021d8 <cls_con>
			inc_drc_icon(BUTTON_STATUS);
 8002160:	797b      	ldrb	r3, [r7, #5]
 8002162:	4618      	mov	r0, r3
 8002164:	f000 f87c 	bl	8002260 <inc_drc_icon>
			HAL_UART_Transmit(&huart1,
					ICON_TOGGLE(0x10, 0x21, 20, BUTTON_STATUS), 8,
 8002168:	797b      	ldrb	r3, [r7, #5]
 800216a:	2214      	movs	r2, #20
 800216c:	2121      	movs	r1, #33	@ 0x21
 800216e:	2010      	movs	r0, #16
 8002170:	f7ff fd72 	bl	8001c58 <ICON_TOGGLE>
 8002174:	4601      	mov	r1, r0
			HAL_UART_Transmit(&huart1,
 8002176:	2301      	movs	r3, #1
 8002178:	2208      	movs	r2, #8
 800217a:	4803      	ldr	r0, [pc, #12]	@ (8002188 <display_data+0x3e8>)
 800217c:	f00c fdca 	bl	800ed14 <HAL_UART_Transmit>
					1);
			break;
 8002180:	e01e      	b.n	80021c0 <display_data+0x420>
 8002182:	bf00      	nop
 8002184:	2000159d 	.word	0x2000159d
 8002188:	20000fc0 	.word	0x20000fc0
 800218c:	2000159e 	.word	0x2000159e
 8002190:	2000159f 	.word	0x2000159f
		case 0x22:
			cls_con(clears_add);
 8002194:	4b0e      	ldr	r3, [pc, #56]	@ (80021d0 <display_data+0x430>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f000 f81d 	bl	80021d8 <cls_con>
			inc_drc_icon(BUTTON_STATUS);
 800219e:	797b      	ldrb	r3, [r7, #5]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f000 f85d 	bl	8002260 <inc_drc_icon>
			HAL_UART_Transmit(&huart1,
					ICON_TOGGLE(0x10, 0x22, 21, BUTTON_STATUS), 8,
 80021a6:	797b      	ldrb	r3, [r7, #5]
 80021a8:	2215      	movs	r2, #21
 80021aa:	2122      	movs	r1, #34	@ 0x22
 80021ac:	2010      	movs	r0, #16
 80021ae:	f7ff fd53 	bl	8001c58 <ICON_TOGGLE>
 80021b2:	4601      	mov	r1, r0
			HAL_UART_Transmit(&huart1,
 80021b4:	2301      	movs	r3, #1
 80021b6:	2208      	movs	r2, #8
 80021b8:	4806      	ldr	r0, [pc, #24]	@ (80021d4 <display_data+0x434>)
 80021ba:	f00c fdab 	bl	800ed14 <HAL_UART_Transmit>
					1);
			break;
 80021be:	bf00      	nop
			//			break;

		}

	}
	free(temp_data);
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f011 f879 	bl	80132b8 <free>

}
 80021c6:	bf00      	nop
 80021c8:	4618      	mov	r0, r3
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	2000159f 	.word	0x2000159f
 80021d4:	20000fc0 	.word	0x20000fc0

080021d8 <cls_con>:

void cls_con(int data) {
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
	//	int pos = 0;
	pos =  data;
 80021e0:	4a1e      	ldr	r2, [pc, #120]	@ (800225c <cls_con+0x84>)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6013      	str	r3, [r2, #0]
	if ((pos == 9) || (pos == 10)){
 80021e6:	4b1d      	ldr	r3, [pc, #116]	@ (800225c <cls_con+0x84>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2b09      	cmp	r3, #9
 80021ec:	d003      	beq.n	80021f6 <cls_con+0x1e>
 80021ee:	4b1b      	ldr	r3, [pc, #108]	@ (800225c <cls_con+0x84>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2b0a      	cmp	r3, #10
 80021f4:	d104      	bne.n	8002200 <cls_con+0x28>
		pos = pos;
 80021f6:	4b19      	ldr	r3, [pc, #100]	@ (800225c <cls_con+0x84>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a18      	ldr	r2, [pc, #96]	@ (800225c <cls_con+0x84>)
 80021fc:	6013      	str	r3, [r2, #0]
 80021fe:	e020      	b.n	8002242 <cls_con+0x6a>
	}
	else if (pos <= 8){
 8002200:	4b16      	ldr	r3, [pc, #88]	@ (800225c <cls_con+0x84>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2b08      	cmp	r3, #8
 8002206:	dc05      	bgt.n	8002214 <cls_con+0x3c>
		pos -= 1;
 8002208:	4b14      	ldr	r3, [pc, #80]	@ (800225c <cls_con+0x84>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	3b01      	subs	r3, #1
 800220e:	4a13      	ldr	r2, [pc, #76]	@ (800225c <cls_con+0x84>)
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	e016      	b.n	8002242 <cls_con+0x6a>
	}

	else if ((pos >= 12)  || (pos <= 19)){
 8002214:	4b11      	ldr	r3, [pc, #68]	@ (800225c <cls_con+0x84>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2b0b      	cmp	r3, #11
 800221a:	dc03      	bgt.n	8002224 <cls_con+0x4c>
 800221c:	4b0f      	ldr	r3, [pc, #60]	@ (800225c <cls_con+0x84>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2b13      	cmp	r3, #19
 8002222:	dc05      	bgt.n	8002230 <cls_con+0x58>
		//	if (12 <= pos <= 19){
		pos -= 7;
 8002224:	4b0d      	ldr	r3, [pc, #52]	@ (800225c <cls_con+0x84>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	3b07      	subs	r3, #7
 800222a:	4a0c      	ldr	r2, [pc, #48]	@ (800225c <cls_con+0x84>)
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	e008      	b.n	8002242 <cls_con+0x6a>
	}
	else if (pos >= 20){
 8002230:	4b0a      	ldr	r3, [pc, #40]	@ (800225c <cls_con+0x84>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b13      	cmp	r3, #19
 8002236:	dd04      	ble.n	8002242 <cls_con+0x6a>
		pos -= 6;
 8002238:	4b08      	ldr	r3, [pc, #32]	@ (800225c <cls_con+0x84>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	3b06      	subs	r3, #6
 800223e:	4a07      	ldr	r2, [pc, #28]	@ (800225c <cls_con+0x84>)
 8002240:	6013      	str	r3, [r2, #0]
	}

	display_icon_clr(0x10, data, pos);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	b2db      	uxtb	r3, r3
 8002246:	4a05      	ldr	r2, [pc, #20]	@ (800225c <cls_con+0x84>)
 8002248:	6812      	ldr	r2, [r2, #0]
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	4619      	mov	r1, r3
 800224e:	2010      	movs	r0, #16
 8002250:	f7ff fd76 	bl	8001d40 <display_icon_clr>
}
 8002254:	bf00      	nop
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	20001770 	.word	0x20001770

08002260 <inc_drc_icon>:

void inc_drc_icon(uint8_t BUTTON_STATUS) {
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	71fb      	strb	r3, [r7, #7]
	osDelay(50);
 800226a:	2032      	movs	r0, #50	@ 0x32
 800226c:	f00e f8a5 	bl	80103ba <osDelay>
	HAL_UART_Transmit(&huart1, ICON_TOGGLE(0x10, 0x10, 9, BUTTON_STATUS), 8,
 8002270:	79fb      	ldrb	r3, [r7, #7]
 8002272:	2209      	movs	r2, #9
 8002274:	2110      	movs	r1, #16
 8002276:	2010      	movs	r0, #16
 8002278:	f7ff fcee 	bl	8001c58 <ICON_TOGGLE>
 800227c:	4601      	mov	r1, r0
 800227e:	2301      	movs	r3, #1
 8002280:	2208      	movs	r2, #8
 8002282:	480f      	ldr	r0, [pc, #60]	@ (80022c0 <inc_drc_icon+0x60>)
 8002284:	f00c fd46 	bl	800ed14 <HAL_UART_Transmit>
			1);
	HAL_UART_Transmit(&huart1, ICON_TOGGLE(0x10, 0x09, 8, BUTTON_STATUS), 8,
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	2208      	movs	r2, #8
 800228c:	2109      	movs	r1, #9
 800228e:	2010      	movs	r0, #16
 8002290:	f7ff fce2 	bl	8001c58 <ICON_TOGGLE>
 8002294:	4601      	mov	r1, r0
 8002296:	2301      	movs	r3, #1
 8002298:	2208      	movs	r2, #8
 800229a:	4809      	ldr	r0, [pc, #36]	@ (80022c0 <inc_drc_icon+0x60>)
 800229c:	f00c fd3a 	bl	800ed14 <HAL_UART_Transmit>
			1);
	HAL_UART_Transmit(&huart1, ICON_TOGGLE(0x10, 0x11, 10, BUTTON_STATUS), 8,
 80022a0:	79fb      	ldrb	r3, [r7, #7]
 80022a2:	220a      	movs	r2, #10
 80022a4:	2111      	movs	r1, #17
 80022a6:	2010      	movs	r0, #16
 80022a8:	f7ff fcd6 	bl	8001c58 <ICON_TOGGLE>
 80022ac:	4601      	mov	r1, r0
 80022ae:	2301      	movs	r3, #1
 80022b0:	2208      	movs	r2, #8
 80022b2:	4803      	ldr	r0, [pc, #12]	@ (80022c0 <inc_drc_icon+0x60>)
 80022b4:	f00c fd2e 	bl	800ed14 <HAL_UART_Transmit>
			1);
	//	HAL_UART_Transmit(&huart1, ICON_TOGGLE(0x10, 0x35, 13, BUTTON_STATUS), 8,
	//			HAL_MAX_DELAY);
}
 80022b8:	bf00      	nop
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20000fc0 	.word	0x20000fc0

080022c4 <intiger_val_send>:

void intiger_val_send(uint8_t icon_address, uint8_t value) {
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	460a      	mov	r2, r1
 80022ce:	71fb      	strb	r3, [r7, #7]
 80022d0:	4613      	mov	r3, r2
 80022d2:	71bb      	strb	r3, [r7, #6]
	uint8_t send_intiger_val[8] = { 0x5A, 0xA5, 0x05, 0x82, 0x10, 0x00, 0x00,
 80022d4:	4a0b      	ldr	r2, [pc, #44]	@ (8002304 <intiger_val_send+0x40>)
 80022d6:	f107 0308 	add.w	r3, r7, #8
 80022da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022de:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	send_intiger_val[5] = 0x3F + icon_address;
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	333f      	adds	r3, #63	@ 0x3f
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	737b      	strb	r3, [r7, #13]
	send_intiger_val[7] = value;
 80022ea:	79bb      	ldrb	r3, [r7, #6]
 80022ec:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, send_intiger_val, sizeof(send_intiger_val),
 80022ee:	f107 0108 	add.w	r1, r7, #8
 80022f2:	2301      	movs	r3, #1
 80022f4:	2208      	movs	r2, #8
 80022f6:	4804      	ldr	r0, [pc, #16]	@ (8002308 <intiger_val_send+0x44>)
 80022f8:	f00c fd0c 	bl	800ed14 <HAL_UART_Transmit>
			1);
}
 80022fc:	bf00      	nop
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	0801411c 	.word	0x0801411c
 8002308:	20000fc0 	.word	0x20000fc0

0800230c <intiger_val_vt_send>:

//vt_value
void intiger_val_vt_send(uint8_t icon_address, uint16_t value) {
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	460a      	mov	r2, r1
 8002316:	71fb      	strb	r3, [r7, #7]
 8002318:	4613      	mov	r3, r2
 800231a:	80bb      	strh	r3, [r7, #4]
	uint8_t send_intiger_val[8] = { 0x5A, 0xA5, 0x05, 0x82, 0x10, 0x00, 0x00,
 800231c:	4a11      	ldr	r2, [pc, #68]	@ (8002364 <intiger_val_vt_send+0x58>)
 800231e:	f107 030c 	add.w	r3, r7, #12
 8002322:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002326:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	uint8_t msb = 0x00;
 800232a:	2300      	movs	r3, #0
 800232c:	75fb      	strb	r3, [r7, #23]
	uint8_t lsb = 0x00;
 800232e:	2300      	movs	r3, #0
 8002330:	75bb      	strb	r3, [r7, #22]
	lsb = value;
 8002332:	88bb      	ldrh	r3, [r7, #4]
 8002334:	75bb      	strb	r3, [r7, #22]
	msb = value >> 8;
 8002336:	88bb      	ldrh	r3, [r7, #4]
 8002338:	0a1b      	lsrs	r3, r3, #8
 800233a:	b29b      	uxth	r3, r3
 800233c:	75fb      	strb	r3, [r7, #23]
	send_intiger_val[5] = 0x3F + icon_address;
 800233e:	79fb      	ldrb	r3, [r7, #7]
 8002340:	333f      	adds	r3, #63	@ 0x3f
 8002342:	b2db      	uxtb	r3, r3
 8002344:	747b      	strb	r3, [r7, #17]
	send_intiger_val[6] = msb;
 8002346:	7dfb      	ldrb	r3, [r7, #23]
 8002348:	74bb      	strb	r3, [r7, #18]
	send_intiger_val[7] = lsb;
 800234a:	7dbb      	ldrb	r3, [r7, #22]
 800234c:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart1, send_intiger_val, sizeof(send_intiger_val),
 800234e:	f107 010c 	add.w	r1, r7, #12
 8002352:	2301      	movs	r3, #1
 8002354:	2208      	movs	r2, #8
 8002356:	4804      	ldr	r0, [pc, #16]	@ (8002368 <intiger_val_vt_send+0x5c>)
 8002358:	f00c fcdc 	bl	800ed14 <HAL_UART_Transmit>
			1);
}
 800235c:	bf00      	nop
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	0801411c 	.word	0x0801411c
 8002368:	20000fc0 	.word	0x20000fc0

0800236c <PIP_VAL>:
void PIP_VAL(uint8_t icon_address, uint8_t value) {
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	460a      	mov	r2, r1
 8002376:	71fb      	strb	r3, [r7, #7]
 8002378:	4613      	mov	r3, r2
 800237a:	71bb      	strb	r3, [r7, #6]
	uint8_t send_intiger_val[8] = { 0x5A, 0xA5, 0x05, 0x82, 0x10, 0x00, 0x00,
 800237c:	4a0c      	ldr	r2, [pc, #48]	@ (80023b0 <PIP_VAL+0x44>)
 800237e:	f107 0308 	add.w	r3, r7, #8
 8002382:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002386:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	send_intiger_val[5] = 0x3F + icon_address;
 800238a:	79fb      	ldrb	r3, [r7, #7]
 800238c:	333f      	adds	r3, #63	@ 0x3f
 800238e:	b2db      	uxtb	r3, r3
 8002390:	737b      	strb	r3, [r7, #13]
	send_intiger_val[6] = 0xFF;
 8002392:	23ff      	movs	r3, #255	@ 0xff
 8002394:	73bb      	strb	r3, [r7, #14]
	send_intiger_val[7] = value;
 8002396:	79bb      	ldrb	r3, [r7, #6]
 8002398:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, send_intiger_val, sizeof(send_intiger_val),
 800239a:	f107 0108 	add.w	r1, r7, #8
 800239e:	2301      	movs	r3, #1
 80023a0:	2208      	movs	r2, #8
 80023a2:	4804      	ldr	r0, [pc, #16]	@ (80023b4 <PIP_VAL+0x48>)
 80023a4:	f00c fcb6 	bl	800ed14 <HAL_UART_Transmit>
			1);
}
 80023a8:	bf00      	nop
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	0801411c 	.word	0x0801411c
 80023b4:	20000fc0 	.word	0x20000fc0

080023b8 <cls_cmd>:
//        seconds = currentTime.Seconds;
//        // Print or use the current time as needed
//    }
//}

void cls_cmd(uint8_t pos) {
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	71fb      	strb	r3, [r7, #7]
	if (DISPLAY_INPUT[5] == 0xBC) {
 80023c2:	4b8d      	ldr	r3, [pc, #564]	@ (80025f8 <cls_cmd+0x240>)
 80023c4:	795b      	ldrb	r3, [r3, #5]
 80023c6:	2bbc      	cmp	r3, #188	@ 0xbc
 80023c8:	d11b      	bne.n	8002402 <cls_cmd+0x4a>
		if (mode_select_number == 0x01) {
 80023ca:	4b8c      	ldr	r3, [pc, #560]	@ (80025fc <cls_cmd+0x244>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d117      	bne.n	8002402 <cls_cmd+0x4a>
			osDelay(50);
 80023d2:	2032      	movs	r0, #50	@ 0x32
 80023d4:	f00d fff1 	bl	80103ba <osDelay>
			PCV_FLAG = 0;
 80023d8:	4b89      	ldr	r3, [pc, #548]	@ (8002600 <cls_cmd+0x248>)
 80023da:	2200      	movs	r2, #0
 80023dc:	701a      	strb	r2, [r3, #0]
			VCV_FLAG = 0;
 80023de:	4b89      	ldr	r3, [pc, #548]	@ (8002604 <cls_cmd+0x24c>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	701a      	strb	r2, [r3, #0]
			PSV_FLAG = 0;
 80023e4:	4b88      	ldr	r3, [pc, #544]	@ (8002608 <cls_cmd+0x250>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	701a      	strb	r2, [r3, #0]
			STAND_BY = 1;
 80023ea:	4b88      	ldr	r3, [pc, #544]	@ (800260c <cls_cmd+0x254>)
 80023ec:	2201      	movs	r2, #1
 80023ee:	701a      	strb	r2, [r3, #0]

			SIMV_FLAG = 0;
 80023f0:	4b87      	ldr	r3, [pc, #540]	@ (8002610 <cls_cmd+0x258>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	701a      	strb	r2, [r3, #0]
			BAG_FLAG = 0;
 80023f6:	4b87      	ldr	r3, [pc, #540]	@ (8002614 <cls_cmd+0x25c>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	701a      	strb	r2, [r3, #0]
			stand_ppr_set_flag = 1;
 80023fc:	4b86      	ldr	r3, [pc, #536]	@ (8002618 <cls_cmd+0x260>)
 80023fe:	2201      	movs	r2, #1
 8002400:	701a      	strb	r2, [r3, #0]
		}
	}  if (DISPLAY_INPUT[8] == 0x6A){
 8002402:	4b7d      	ldr	r3, [pc, #500]	@ (80025f8 <cls_cmd+0x240>)
 8002404:	7a1b      	ldrb	r3, [r3, #8]
 8002406:	2b6a      	cmp	r3, #106	@ 0x6a
 8002408:	f040 813d 	bne.w	8002686 <cls_cmd+0x2ce>
		//		uint8_t clear_graph2[8] = { 0x5A, 0xA5, 0x05, 0x82, 0x03, 0x0B, 0x00, 0x00 };
		//		HAL_UART_Transmit(&huart1, clear_graph, sizeof(clear_graph),
		//				HAL_MAX_DELAY);
		//		HAL_UART_Transmit(&huart1, clear_graph2, sizeof(clear_graph2),
		//				HAL_MAX_DELAY);
		if (mode_select_number == 0x02) {
 800240c:	4b7b      	ldr	r3, [pc, #492]	@ (80025fc <cls_cmd+0x244>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b02      	cmp	r3, #2
 8002412:	d12d      	bne.n	8002470 <cls_cmd+0xb8>
			osDelay(50);
 8002414:	2032      	movs	r0, #50	@ 0x32
 8002416:	f00d ffd0 	bl	80103ba <osDelay>
			PID_VALUE_SET_FLAG = 1;
 800241a:	4b80      	ldr	r3, [pc, #512]	@ (800261c <cls_cmd+0x264>)
 800241c:	2201      	movs	r2, #1
 800241e:	701a      	strb	r2, [r3, #0]
			//			Value_reset_flag = 1;

			PCV_FLAG = 0;
 8002420:	4b77      	ldr	r3, [pc, #476]	@ (8002600 <cls_cmd+0x248>)
 8002422:	2200      	movs	r2, #0
 8002424:	701a      	strb	r2, [r3, #0]
			VCV_FLAG = 1;
 8002426:	4b77      	ldr	r3, [pc, #476]	@ (8002604 <cls_cmd+0x24c>)
 8002428:	2201      	movs	r2, #1
 800242a:	701a      	strb	r2, [r3, #0]
			PSV_FLAG = 0;
 800242c:	4b76      	ldr	r3, [pc, #472]	@ (8002608 <cls_cmd+0x250>)
 800242e:	2200      	movs	r2, #0
 8002430:	701a      	strb	r2, [r3, #0]
			SIMV_FLAG = 0;
 8002432:	4b77      	ldr	r3, [pc, #476]	@ (8002610 <cls_cmd+0x258>)
 8002434:	2200      	movs	r2, #0
 8002436:	701a      	strb	r2, [r3, #0]
			STAND_BY = 0;
 8002438:	4b74      	ldr	r3, [pc, #464]	@ (800260c <cls_cmd+0x254>)
 800243a:	2200      	movs	r2, #0
 800243c:	701a      	strb	r2, [r3, #0]
			BAG_FLAG = 0;
 800243e:	4b75      	ldr	r3, [pc, #468]	@ (8002614 <cls_cmd+0x25c>)
 8002440:	2200      	movs	r2, #0
 8002442:	701a      	strb	r2, [r3, #0]
			vcv_ppr_set_flag = 0;
 8002444:	4b76      	ldr	r3, [pc, #472]	@ (8002620 <cls_cmd+0x268>)
 8002446:	2200      	movs	r2, #0
 8002448:	701a      	strb	r2, [r3, #0]
			PID_FLOW_SET_VALUE(user_flowe, 1.0, 1.0, 0, 10);
 800244a:	4b76      	ldr	r3, [pc, #472]	@ (8002624 <cls_cmd+0x26c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f7fe f860 	bl	8000514 <__aeabi_i2d>
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	200a      	movs	r0, #10
 800245a:	ed9f 3b5f 	vldr	d3, [pc, #380]	@ 80025d8 <cls_cmd+0x220>
 800245e:	ed9f 2b60 	vldr	d2, [pc, #384]	@ 80025e0 <cls_cmd+0x228>
 8002462:	ed9f 1b5f 	vldr	d1, [pc, #380]	@ 80025e0 <cls_cmd+0x228>
 8002466:	ec43 2b10 	vmov	d0, r2, r3
 800246a:	f001 fb75 	bl	8003b58 <PID_FLOW_SET_VALUE>
 800246e:	e10a      	b.n	8002686 <cls_cmd+0x2ce>
			//			else if(vt_value > 100){
			//				PID_FLOW_SET_VALUE(user1_flow, 0.5, 0.1, 0, 5);
			//			}

		}
		else if (mode_select_number == 0x03) {
 8002470:	4b62      	ldr	r3, [pc, #392]	@ (80025fc <cls_cmd+0x244>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	2b03      	cmp	r3, #3
 8002476:	d152      	bne.n	800251e <cls_cmd+0x166>
			osDelay(50);
 8002478:	2032      	movs	r0, #50	@ 0x32
 800247a:	f00d ff9e 	bl	80103ba <osDelay>
			PID_VALUE_SET_FLAG = 1;
 800247e:	4b67      	ldr	r3, [pc, #412]	@ (800261c <cls_cmd+0x264>)
 8002480:	2201      	movs	r2, #1
 8002482:	701a      	strb	r2, [r3, #0]
			//			Value_reset_flag = 1;

			PCV_FLAG = 1;
 8002484:	4b5e      	ldr	r3, [pc, #376]	@ (8002600 <cls_cmd+0x248>)
 8002486:	2201      	movs	r2, #1
 8002488:	701a      	strb	r2, [r3, #0]
			VCV_FLAG = 0;
 800248a:	4b5e      	ldr	r3, [pc, #376]	@ (8002604 <cls_cmd+0x24c>)
 800248c:	2200      	movs	r2, #0
 800248e:	701a      	strb	r2, [r3, #0]
			STAND_BY = 0;
 8002490:	4b5e      	ldr	r3, [pc, #376]	@ (800260c <cls_cmd+0x254>)
 8002492:	2200      	movs	r2, #0
 8002494:	701a      	strb	r2, [r3, #0]
			SIMV_FLAG = 0;
 8002496:	4b5e      	ldr	r3, [pc, #376]	@ (8002610 <cls_cmd+0x258>)
 8002498:	2200      	movs	r2, #0
 800249a:	701a      	strb	r2, [r3, #0]
			PSV_FLAG = 0;
 800249c:	4b5a      	ldr	r3, [pc, #360]	@ (8002608 <cls_cmd+0x250>)
 800249e:	2200      	movs	r2, #0
 80024a0:	701a      	strb	r2, [r3, #0]
			BAG_FLAG = 0;
 80024a2:	4b5c      	ldr	r3, [pc, #368]	@ (8002614 <cls_cmd+0x25c>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	701a      	strb	r2, [r3, #0]
			pcv_ppr_set_flag = 1;
 80024a8:	4b5f      	ldr	r3, [pc, #380]	@ (8002628 <cls_cmd+0x270>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	701a      	strb	r2, [r3, #0]

			if ((RR_temp_value >= 5) && (RR_temp_value < 12)) {
 80024ae:	4b5f      	ldr	r3, [pc, #380]	@ (800262c <cls_cmd+0x274>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b04      	cmp	r3, #4
 80024b4:	d916      	bls.n	80024e4 <cls_cmd+0x12c>
 80024b6:	4b5d      	ldr	r3, [pc, #372]	@ (800262c <cls_cmd+0x274>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b0b      	cmp	r3, #11
 80024bc:	d812      	bhi.n	80024e4 <cls_cmd+0x12c>
				PID_FLOW_SET_VALUE(PLR_temp_value, 0.1, 0.1, 0, 5);
 80024be:	4b5c      	ldr	r3, [pc, #368]	@ (8002630 <cls_cmd+0x278>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7fe f826 	bl	8000514 <__aeabi_i2d>
 80024c8:	4602      	mov	r2, r0
 80024ca:	460b      	mov	r3, r1
 80024cc:	2005      	movs	r0, #5
 80024ce:	ed9f 3b42 	vldr	d3, [pc, #264]	@ 80025d8 <cls_cmd+0x220>
 80024d2:	ed9f 2b45 	vldr	d2, [pc, #276]	@ 80025e8 <cls_cmd+0x230>
 80024d6:	ed9f 1b44 	vldr	d1, [pc, #272]	@ 80025e8 <cls_cmd+0x230>
 80024da:	ec43 2b10 	vmov	d0, r2, r3
 80024de:	f001 fb3b 	bl	8003b58 <PID_FLOW_SET_VALUE>
 80024e2:	e0d0      	b.n	8002686 <cls_cmd+0x2ce>
			} else if ((RR_temp_value >= 12) && (RR_temp_value <= 30)) {
 80024e4:	4b51      	ldr	r3, [pc, #324]	@ (800262c <cls_cmd+0x274>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b0b      	cmp	r3, #11
 80024ea:	f240 80cc 	bls.w	8002686 <cls_cmd+0x2ce>
 80024ee:	4b4f      	ldr	r3, [pc, #316]	@ (800262c <cls_cmd+0x274>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b1e      	cmp	r3, #30
 80024f4:	f200 80c7 	bhi.w	8002686 <cls_cmd+0x2ce>
				PID_FLOW_SET_VALUE(PLR_temp_value, 0.5, 0.5, 0, 5);
 80024f8:	4b4d      	ldr	r3, [pc, #308]	@ (8002630 <cls_cmd+0x278>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7fe f809 	bl	8000514 <__aeabi_i2d>
 8002502:	4602      	mov	r2, r0
 8002504:	460b      	mov	r3, r1
 8002506:	2005      	movs	r0, #5
 8002508:	ed9f 3b33 	vldr	d3, [pc, #204]	@ 80025d8 <cls_cmd+0x220>
 800250c:	ed9f 2b38 	vldr	d2, [pc, #224]	@ 80025f0 <cls_cmd+0x238>
 8002510:	ed9f 1b37 	vldr	d1, [pc, #220]	@ 80025f0 <cls_cmd+0x238>
 8002514:	ec43 2b10 	vmov	d0, r2, r3
 8002518:	f001 fb1e 	bl	8003b58 <PID_FLOW_SET_VALUE>
 800251c:	e0b3      	b.n	8002686 <cls_cmd+0x2ce>
			}

		} else if (mode_select_number == 0x04) {
 800251e:	4b37      	ldr	r3, [pc, #220]	@ (80025fc <cls_cmd+0x244>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	2b04      	cmp	r3, #4
 8002524:	d11e      	bne.n	8002564 <cls_cmd+0x1ac>
			osDelay(50);
 8002526:	2032      	movs	r0, #50	@ 0x32
 8002528:	f00d ff47 	bl	80103ba <osDelay>
			PID_VALUE_SET_FLAG = 1;
 800252c:	4b3b      	ldr	r3, [pc, #236]	@ (800261c <cls_cmd+0x264>)
 800252e:	2201      	movs	r2, #1
 8002530:	701a      	strb	r2, [r3, #0]
			//			Value_reset_flag = 1;

			PCV_FLAG = 0;
 8002532:	4b33      	ldr	r3, [pc, #204]	@ (8002600 <cls_cmd+0x248>)
 8002534:	2200      	movs	r2, #0
 8002536:	701a      	strb	r2, [r3, #0]
			PSV_FLAG = 0;
 8002538:	4b33      	ldr	r3, [pc, #204]	@ (8002608 <cls_cmd+0x250>)
 800253a:	2200      	movs	r2, #0
 800253c:	701a      	strb	r2, [r3, #0]
			STAND_BY = 0;
 800253e:	4b33      	ldr	r3, [pc, #204]	@ (800260c <cls_cmd+0x254>)
 8002540:	2200      	movs	r2, #0
 8002542:	701a      	strb	r2, [r3, #0]

			SIMV_FLAG = 1;
 8002544:	4b32      	ldr	r3, [pc, #200]	@ (8002610 <cls_cmd+0x258>)
 8002546:	2201      	movs	r2, #1
 8002548:	701a      	strb	r2, [r3, #0]
			VCV_FLAG = 0;
 800254a:	4b2e      	ldr	r3, [pc, #184]	@ (8002604 <cls_cmd+0x24c>)
 800254c:	2200      	movs	r2, #0
 800254e:	701a      	strb	r2, [r3, #0]
			BAG_FLAG = 0;
 8002550:	4b30      	ldr	r3, [pc, #192]	@ (8002614 <cls_cmd+0x25c>)
 8002552:	2200      	movs	r2, #0
 8002554:	701a      	strb	r2, [r3, #0]
			PS_flag = 1;
 8002556:	4b37      	ldr	r3, [pc, #220]	@ (8002634 <cls_cmd+0x27c>)
 8002558:	2201      	movs	r2, #1
 800255a:	701a      	strb	r2, [r3, #0]
			//			Mandatory_FLAG = 1;

			simv_ppr_set_flag = 1;
 800255c:	4b36      	ldr	r3, [pc, #216]	@ (8002638 <cls_cmd+0x280>)
 800255e:	2201      	movs	r2, #1
 8002560:	701a      	strb	r2, [r3, #0]
 8002562:	e090      	b.n	8002686 <cls_cmd+0x2ce>

		} else if (mode_select_number == 0x05) {
 8002564:	4b25      	ldr	r3, [pc, #148]	@ (80025fc <cls_cmd+0x244>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2b05      	cmp	r3, #5
 800256a:	d16d      	bne.n	8002648 <cls_cmd+0x290>
			osDelay(50);
 800256c:	2032      	movs	r0, #50	@ 0x32
 800256e:	f00d ff24 	bl	80103ba <osDelay>
			PID_VALUE_SET_FLAG = 1;
 8002572:	4b2a      	ldr	r3, [pc, #168]	@ (800261c <cls_cmd+0x264>)
 8002574:	2201      	movs	r2, #1
 8002576:	701a      	strb	r2, [r3, #0]
			//			Value_reset_flag = 1;

			VCV_FLAG = 0;
 8002578:	4b22      	ldr	r3, [pc, #136]	@ (8002604 <cls_cmd+0x24c>)
 800257a:	2200      	movs	r2, #0
 800257c:	701a      	strb	r2, [r3, #0]
			PSV_FLAG = 1;
 800257e:	4b22      	ldr	r3, [pc, #136]	@ (8002608 <cls_cmd+0x250>)
 8002580:	2201      	movs	r2, #1
 8002582:	701a      	strb	r2, [r3, #0]
			STAND_BY = 0;
 8002584:	4b21      	ldr	r3, [pc, #132]	@ (800260c <cls_cmd+0x254>)
 8002586:	2200      	movs	r2, #0
 8002588:	701a      	strb	r2, [r3, #0]
			SIMV_FLAG = 0;
 800258a:	4b21      	ldr	r3, [pc, #132]	@ (8002610 <cls_cmd+0x258>)
 800258c:	2200      	movs	r2, #0
 800258e:	701a      	strb	r2, [r3, #0]
			PCV_FLAG = 0;
 8002590:	4b1b      	ldr	r3, [pc, #108]	@ (8002600 <cls_cmd+0x248>)
 8002592:	2200      	movs	r2, #0
 8002594:	701a      	strb	r2, [r3, #0]
			BAG_FLAG = 0;
 8002596:	4b1f      	ldr	r3, [pc, #124]	@ (8002614 <cls_cmd+0x25c>)
 8002598:	2200      	movs	r2, #0
 800259a:	701a      	strb	r2, [r3, #0]
			psv_ppr_set_flag = 1;
 800259c:	4b27      	ldr	r3, [pc, #156]	@ (800263c <cls_cmd+0x284>)
 800259e:	2201      	movs	r2, #1
 80025a0:	701a      	strb	r2, [r3, #0]
			rr_flag = 0;
 80025a2:	4b27      	ldr	r3, [pc, #156]	@ (8002640 <cls_cmd+0x288>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	701a      	strb	r2, [r3, #0]
			PS_flag = 1;
 80025a8:	4b22      	ldr	r3, [pc, #136]	@ (8002634 <cls_cmd+0x27c>)
 80025aa:	2201      	movs	r2, #1
 80025ac:	701a      	strb	r2, [r3, #0]
			//			if ((RR_temp_value >= 5) && (RR_temp_value < 12)) {
			PID_FLOW_SET_VALUE(PS_temp_value, 0.1, 0.1, 0, 5);
 80025ae:	4b25      	ldr	r3, [pc, #148]	@ (8002644 <cls_cmd+0x28c>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fd ff9e 	bl	80004f4 <__aeabi_ui2d>
 80025b8:	4602      	mov	r2, r0
 80025ba:	460b      	mov	r3, r1
 80025bc:	2005      	movs	r0, #5
 80025be:	ed9f 3b06 	vldr	d3, [pc, #24]	@ 80025d8 <cls_cmd+0x220>
 80025c2:	ed9f 2b09 	vldr	d2, [pc, #36]	@ 80025e8 <cls_cmd+0x230>
 80025c6:	ed9f 1b08 	vldr	d1, [pc, #32]	@ 80025e8 <cls_cmd+0x230>
 80025ca:	ec43 2b10 	vmov	d0, r2, r3
 80025ce:	f001 fac3 	bl	8003b58 <PID_FLOW_SET_VALUE>
 80025d2:	e058      	b.n	8002686 <cls_cmd+0x2ce>
 80025d4:	f3af 8000 	nop.w
	...
 80025e4:	3ff00000 	.word	0x3ff00000
 80025e8:	9999999a 	.word	0x9999999a
 80025ec:	3fb99999 	.word	0x3fb99999
 80025f0:	00000000 	.word	0x00000000
 80025f4:	3fe00000 	.word	0x3fe00000
 80025f8:	20001584 	.word	0x20001584
 80025fc:	200015bb 	.word	0x200015bb
 8002600:	200015b9 	.word	0x200015b9
 8002604:	200015b8 	.word	0x200015b8
 8002608:	200015b7 	.word	0x200015b7
 800260c:	200015b6 	.word	0x200015b6
 8002610:	200015b5 	.word	0x200015b5
 8002614:	200015ba 	.word	0x200015ba
 8002618:	200015c2 	.word	0x200015c2
 800261c:	200011fd 	.word	0x200011fd
 8002620:	200015c3 	.word	0x200015c3
 8002624:	2000120c 	.word	0x2000120c
 8002628:	200015c4 	.word	0x200015c4
 800262c:	2000003c 	.word	0x2000003c
 8002630:	20000038 	.word	0x20000038
 8002634:	200015d1 	.word	0x200015d1
 8002638:	200015c5 	.word	0x200015c5
 800263c:	200015c6 	.word	0x200015c6
 8002640:	200015cc 	.word	0x200015cc
 8002644:	200015b4 	.word	0x200015b4
			//			} else if ((RR_temp_value >= 12) && (RR_temp_value <= 30)) {
			//				PID_FLOW_SET_VALUE(PS_temp_value, 0.5, 0.5, 0, 5);

		} else if (mode_select_number == 0x06) {
 8002648:	4b49      	ldr	r3, [pc, #292]	@ (8002770 <cls_cmd+0x3b8>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	2b06      	cmp	r3, #6
 800264e:	d11a      	bne.n	8002686 <cls_cmd+0x2ce>
			osDelay(50);
 8002650:	2032      	movs	r0, #50	@ 0x32
 8002652:	f00d feb2 	bl	80103ba <osDelay>
			PID_VALUE_SET_FLAG = 1;
 8002656:	4b47      	ldr	r3, [pc, #284]	@ (8002774 <cls_cmd+0x3bc>)
 8002658:	2201      	movs	r2, #1
 800265a:	701a      	strb	r2, [r3, #0]
			//			Value_reset_flag = 1;
			VCV_FLAG = 0;
 800265c:	4b46      	ldr	r3, [pc, #280]	@ (8002778 <cls_cmd+0x3c0>)
 800265e:	2200      	movs	r2, #0
 8002660:	701a      	strb	r2, [r3, #0]
			PSV_FLAG = 0;
 8002662:	4b46      	ldr	r3, [pc, #280]	@ (800277c <cls_cmd+0x3c4>)
 8002664:	2200      	movs	r2, #0
 8002666:	701a      	strb	r2, [r3, #0]
			STAND_BY = 0;
 8002668:	4b45      	ldr	r3, [pc, #276]	@ (8002780 <cls_cmd+0x3c8>)
 800266a:	2200      	movs	r2, #0
 800266c:	701a      	strb	r2, [r3, #0]
			SIMV_FLAG = 0;
 800266e:	4b45      	ldr	r3, [pc, #276]	@ (8002784 <cls_cmd+0x3cc>)
 8002670:	2200      	movs	r2, #0
 8002672:	701a      	strb	r2, [r3, #0]
			PCV_FLAG = 0;
 8002674:	4b44      	ldr	r3, [pc, #272]	@ (8002788 <cls_cmd+0x3d0>)
 8002676:	2200      	movs	r2, #0
 8002678:	701a      	strb	r2, [r3, #0]
			BAG_FLAG = 1;
 800267a:	4b44      	ldr	r3, [pc, #272]	@ (800278c <cls_cmd+0x3d4>)
 800267c:	2201      	movs	r2, #1
 800267e:	701a      	strb	r2, [r3, #0]
			bag_ppr_set_flag = 1;
 8002680:	4b43      	ldr	r3, [pc, #268]	@ (8002790 <cls_cmd+0x3d8>)
 8002682:	2201      	movs	r2, #1
 8002684:	701a      	strb	r2, [r3, #0]

		}
	}
	if (DISPLAY_INPUT[8] == 0x69){
 8002686:	4b43      	ldr	r3, [pc, #268]	@ (8002794 <cls_cmd+0x3dc>)
 8002688:	7a1b      	ldrb	r3, [r3, #8]
 800268a:	2b69      	cmp	r3, #105	@ 0x69
 800268c:	d120      	bne.n	80026d0 <cls_cmd+0x318>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 800268e:	2200      	movs	r2, #0
 8002690:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002694:	4840      	ldr	r0, [pc, #256]	@ (8002798 <cls_cmd+0x3e0>)
 8002696:	f009 fafd 	bl	800bc94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 800269a:	2200      	movs	r2, #0
 800269c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80026a0:	483d      	ldr	r0, [pc, #244]	@ (8002798 <cls_cmd+0x3e0>)
 80026a2:	f009 faf7 	bl	800bc94 <HAL_GPIO_WritePin>
		PCV_FLAG = 0;
 80026a6:	4b38      	ldr	r3, [pc, #224]	@ (8002788 <cls_cmd+0x3d0>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	701a      	strb	r2, [r3, #0]
		VCV_FLAG = 0;
 80026ac:	4b32      	ldr	r3, [pc, #200]	@ (8002778 <cls_cmd+0x3c0>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	701a      	strb	r2, [r3, #0]
		PSV_FLAG = 0;
 80026b2:	4b32      	ldr	r3, [pc, #200]	@ (800277c <cls_cmd+0x3c4>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	701a      	strb	r2, [r3, #0]
		STAND_BY = 1;
 80026b8:	4b31      	ldr	r3, [pc, #196]	@ (8002780 <cls_cmd+0x3c8>)
 80026ba:	2201      	movs	r2, #1
 80026bc:	701a      	strb	r2, [r3, #0]
		SIMV_FLAG = 0;
 80026be:	4b31      	ldr	r3, [pc, #196]	@ (8002784 <cls_cmd+0x3cc>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	701a      	strb	r2, [r3, #0]
		BAG_FLAG = 0;
 80026c4:	4b31      	ldr	r3, [pc, #196]	@ (800278c <cls_cmd+0x3d4>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	701a      	strb	r2, [r3, #0]
		stand_ppr_set_flag = 1;
 80026ca:	4b34      	ldr	r3, [pc, #208]	@ (800279c <cls_cmd+0x3e4>)
 80026cc:	2201      	movs	r2, #1
 80026ce:	701a      	strb	r2, [r3, #0]
	}
	if (DISPLAY_INPUT[5] == 0XA4) {
 80026d0:	4b30      	ldr	r3, [pc, #192]	@ (8002794 <cls_cmd+0x3dc>)
 80026d2:	795b      	ldrb	r3, [r3, #5]
 80026d4:	2ba4      	cmp	r3, #164	@ 0xa4
 80026d6:	f040 816f 	bne.w	80029b8 <cls_cmd+0x600>
		osDelay(50);
 80026da:	2032      	movs	r0, #50	@ 0x32
 80026dc:	f00d fe6d 	bl	80103ba <osDelay>
		if(PCV_FLAG == 1){
 80026e0:	4b29      	ldr	r3, [pc, #164]	@ (8002788 <cls_cmd+0x3d0>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d05f      	beq.n	80027a8 <cls_cmd+0x3f0>
			if ((RR_temp_value >= 5) && (RR_temp_value < 12)) {
 80026e8:	4b2d      	ldr	r3, [pc, #180]	@ (80027a0 <cls_cmd+0x3e8>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2b04      	cmp	r3, #4
 80026ee:	d916      	bls.n	800271e <cls_cmd+0x366>
 80026f0:	4b2b      	ldr	r3, [pc, #172]	@ (80027a0 <cls_cmd+0x3e8>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b0b      	cmp	r3, #11
 80026f6:	d812      	bhi.n	800271e <cls_cmd+0x366>
				PID_FLOW_SET_VALUE(PLR_temp_value, 0.1, 0.1, 0, 5);
 80026f8:	4b2a      	ldr	r3, [pc, #168]	@ (80027a4 <cls_cmd+0x3ec>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7fd ff09 	bl	8000514 <__aeabi_i2d>
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	2005      	movs	r0, #5
 8002708:	ed9f 3b13 	vldr	d3, [pc, #76]	@ 8002758 <cls_cmd+0x3a0>
 800270c:	ed9f 2b14 	vldr	d2, [pc, #80]	@ 8002760 <cls_cmd+0x3a8>
 8002710:	ed9f 1b13 	vldr	d1, [pc, #76]	@ 8002760 <cls_cmd+0x3a8>
 8002714:	ec43 2b10 	vmov	d0, r2, r3
 8002718:	f001 fa1e 	bl	8003b58 <PID_FLOW_SET_VALUE>
 800271c:	e05a      	b.n	80027d4 <cls_cmd+0x41c>
			} else if ((RR_temp_value >= 12) && (RR_temp_value <= 30)) {
 800271e:	4b20      	ldr	r3, [pc, #128]	@ (80027a0 <cls_cmd+0x3e8>)
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	2b0b      	cmp	r3, #11
 8002724:	d956      	bls.n	80027d4 <cls_cmd+0x41c>
 8002726:	4b1e      	ldr	r3, [pc, #120]	@ (80027a0 <cls_cmd+0x3e8>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b1e      	cmp	r3, #30
 800272c:	d852      	bhi.n	80027d4 <cls_cmd+0x41c>
				PID_FLOW_SET_VALUE(PLR_temp_value, 0.5, 0.5, 0, 5);
 800272e:	4b1d      	ldr	r3, [pc, #116]	@ (80027a4 <cls_cmd+0x3ec>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f7fd feee 	bl	8000514 <__aeabi_i2d>
 8002738:	4602      	mov	r2, r0
 800273a:	460b      	mov	r3, r1
 800273c:	2005      	movs	r0, #5
 800273e:	ed9f 3b06 	vldr	d3, [pc, #24]	@ 8002758 <cls_cmd+0x3a0>
 8002742:	ed9f 2b09 	vldr	d2, [pc, #36]	@ 8002768 <cls_cmd+0x3b0>
 8002746:	ed9f 1b08 	vldr	d1, [pc, #32]	@ 8002768 <cls_cmd+0x3b0>
 800274a:	ec43 2b10 	vmov	d0, r2, r3
 800274e:	f001 fa03 	bl	8003b58 <PID_FLOW_SET_VALUE>
 8002752:	e03f      	b.n	80027d4 <cls_cmd+0x41c>
 8002754:	f3af 8000 	nop.w
	...
 8002760:	9999999a 	.word	0x9999999a
 8002764:	3fb99999 	.word	0x3fb99999
 8002768:	00000000 	.word	0x00000000
 800276c:	3fe00000 	.word	0x3fe00000
 8002770:	200015bb 	.word	0x200015bb
 8002774:	200011fd 	.word	0x200011fd
 8002778:	200015b8 	.word	0x200015b8
 800277c:	200015b7 	.word	0x200015b7
 8002780:	200015b6 	.word	0x200015b6
 8002784:	200015b5 	.word	0x200015b5
 8002788:	200015b9 	.word	0x200015b9
 800278c:	200015ba 	.word	0x200015ba
 8002790:	200015c7 	.word	0x200015c7
 8002794:	20001584 	.word	0x20001584
 8002798:	40021000 	.word	0x40021000
 800279c:	200015c2 	.word	0x200015c2
 80027a0:	2000003c 	.word	0x2000003c
 80027a4:	20000038 	.word	0x20000038
			}
		}
		else if (PSV_FLAG == 1){
 80027a8:	4bab      	ldr	r3, [pc, #684]	@ (8002a58 <cls_cmd+0x6a0>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d011      	beq.n	80027d4 <cls_cmd+0x41c>
			PID_FLOW_SET_VALUE(PS_temp_value, 0.1, 0.1, 0, 5);
 80027b0:	4baa      	ldr	r3, [pc, #680]	@ (8002a5c <cls_cmd+0x6a4>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7fd fe9d 	bl	80004f4 <__aeabi_ui2d>
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
 80027be:	2005      	movs	r0, #5
 80027c0:	ed9f 3b9f 	vldr	d3, [pc, #636]	@ 8002a40 <cls_cmd+0x688>
 80027c4:	ed9f 2ba0 	vldr	d2, [pc, #640]	@ 8002a48 <cls_cmd+0x690>
 80027c8:	ed9f 1b9f 	vldr	d1, [pc, #636]	@ 8002a48 <cls_cmd+0x690>
 80027cc:	ec43 2b10 	vmov	d0, r2, r3
 80027d0:	f001 f9c2 	bl	8003b58 <PID_FLOW_SET_VALUE>
		}

		vt_temp_value = vt_value;
 80027d4:	4ba2      	ldr	r3, [pc, #648]	@ (8002a60 <cls_cmd+0x6a8>)
 80027d6:	881a      	ldrh	r2, [r3, #0]
 80027d8:	4ba2      	ldr	r3, [pc, #648]	@ (8002a64 <cls_cmd+0x6ac>)
 80027da:	801a      	strh	r2, [r3, #0]
		RR_temp_value = RR_value;
 80027dc:	4ba2      	ldr	r3, [pc, #648]	@ (8002a68 <cls_cmd+0x6b0>)
 80027de:	781a      	ldrb	r2, [r3, #0]
 80027e0:	4ba2      	ldr	r3, [pc, #648]	@ (8002a6c <cls_cmd+0x6b4>)
 80027e2:	701a      	strb	r2, [r3, #0]
		PLR_temp_value = PLR_value;
 80027e4:	4ba2      	ldr	r3, [pc, #648]	@ (8002a70 <cls_cmd+0x6b8>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	461a      	mov	r2, r3
 80027ea:	4ba2      	ldr	r3, [pc, #648]	@ (8002a74 <cls_cmd+0x6bc>)
 80027ec:	601a      	str	r2, [r3, #0]
		temp_insP_value = insP_value;
 80027ee:	4ba2      	ldr	r3, [pc, #648]	@ (8002a78 <cls_cmd+0x6c0>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4aa2      	ldr	r2, [pc, #648]	@ (8002a7c <cls_cmd+0x6c4>)
 80027f4:	6013      	str	r3, [r2, #0]
		temp_exp_value = exp_value;
 80027f6:	4ba2      	ldr	r3, [pc, #648]	@ (8002a80 <cls_cmd+0x6c8>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4aa2      	ldr	r2, [pc, #648]	@ (8002a84 <cls_cmd+0x6cc>)
 80027fc:	6013      	str	r3, [r2, #0]
		PU_temp_value = PU_value;
 80027fe:	4ba2      	ldr	r3, [pc, #648]	@ (8002a88 <cls_cmd+0x6d0>)
 8002800:	781a      	ldrb	r2, [r3, #0]
 8002802:	4ba2      	ldr	r3, [pc, #648]	@ (8002a8c <cls_cmd+0x6d4>)
 8002804:	701a      	strb	r2, [r3, #0]
		PEEP_temp_value = PEEP_value - 1;
 8002806:	4ba2      	ldr	r3, [pc, #648]	@ (8002a90 <cls_cmd+0x6d8>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	3b01      	subs	r3, #1
 800280c:	b2da      	uxtb	r2, r3
 800280e:	4ba1      	ldr	r3, [pc, #644]	@ (8002a94 <cls_cmd+0x6dc>)
 8002810:	701a      	strb	r2, [r3, #0]
		PS_temp_value = PS_value;
 8002812:	4ba1      	ldr	r3, [pc, #644]	@ (8002a98 <cls_cmd+0x6e0>)
 8002814:	781a      	ldrb	r2, [r3, #0]
 8002816:	4b91      	ldr	r3, [pc, #580]	@ (8002a5c <cls_cmd+0x6a4>)
 8002818:	701a      	strb	r2, [r3, #0]
		P_peak_alarm_max_value = P_peak_alarm_max_value;
 800281a:	4ba0      	ldr	r3, [pc, #640]	@ (8002a9c <cls_cmd+0x6e4>)
 800281c:	781a      	ldrb	r2, [r3, #0]
 800281e:	4b9f      	ldr	r3, [pc, #636]	@ (8002a9c <cls_cmd+0x6e4>)
 8002820:	701a      	strb	r2, [r3, #0]
		P_peak_alarm_min_value = P_peak_alarm_min_value;
 8002822:	4b9f      	ldr	r3, [pc, #636]	@ (8002aa0 <cls_cmd+0x6e8>)
 8002824:	781a      	ldrb	r2, [r3, #0]
 8002826:	4b9e      	ldr	r3, [pc, #632]	@ (8002aa0 <cls_cmd+0x6e8>)
 8002828:	701a      	strb	r2, [r3, #0]
		MV_alarm_max_value = MV_alarm_max_value;
 800282a:	4b9e      	ldr	r3, [pc, #632]	@ (8002aa4 <cls_cmd+0x6ec>)
 800282c:	781a      	ldrb	r2, [r3, #0]
 800282e:	4b9d      	ldr	r3, [pc, #628]	@ (8002aa4 <cls_cmd+0x6ec>)
 8002830:	701a      	strb	r2, [r3, #0]
		MV_alarm_min_value = MV_alarm_min_value;
 8002832:	4b9d      	ldr	r3, [pc, #628]	@ (8002aa8 <cls_cmd+0x6f0>)
 8002834:	781a      	ldrb	r2, [r3, #0]
 8002836:	4b9c      	ldr	r3, [pc, #624]	@ (8002aa8 <cls_cmd+0x6f0>)
 8002838:	701a      	strb	r2, [r3, #0]
		RR_alarm_max_value = RR_alarm_max_value;
 800283a:	4b9c      	ldr	r3, [pc, #624]	@ (8002aac <cls_cmd+0x6f4>)
 800283c:	781a      	ldrb	r2, [r3, #0]
 800283e:	4b9b      	ldr	r3, [pc, #620]	@ (8002aac <cls_cmd+0x6f4>)
 8002840:	701a      	strb	r2, [r3, #0]
		RR_alarm_min_value = RR_alarm_min_value;
 8002842:	4b9b      	ldr	r3, [pc, #620]	@ (8002ab0 <cls_cmd+0x6f8>)
 8002844:	781a      	ldrb	r2, [r3, #0]
 8002846:	4b9a      	ldr	r3, [pc, #616]	@ (8002ab0 <cls_cmd+0x6f8>)
 8002848:	701a      	strb	r2, [r3, #0]
		peep_alarm_max_value = peep_alarm_max_value;
 800284a:	4b9a      	ldr	r3, [pc, #616]	@ (8002ab4 <cls_cmd+0x6fc>)
 800284c:	781a      	ldrb	r2, [r3, #0]
 800284e:	4b99      	ldr	r3, [pc, #612]	@ (8002ab4 <cls_cmd+0x6fc>)
 8002850:	701a      	strb	r2, [r3, #0]
		peep_alarm_min_value = peep_alarm_min_value;
 8002852:	4b99      	ldr	r3, [pc, #612]	@ (8002ab8 <cls_cmd+0x700>)
 8002854:	781a      	ldrb	r2, [r3, #0]
 8002856:	4b98      	ldr	r3, [pc, #608]	@ (8002ab8 <cls_cmd+0x700>)
 8002858:	701a      	strb	r2, [r3, #0]
		O2_alarm_max_value = O2_alarm_max_value;
 800285a:	4b98      	ldr	r3, [pc, #608]	@ (8002abc <cls_cmd+0x704>)
 800285c:	781a      	ldrb	r2, [r3, #0]
 800285e:	4b97      	ldr	r3, [pc, #604]	@ (8002abc <cls_cmd+0x704>)
 8002860:	701a      	strb	r2, [r3, #0]
		O2_alarm_min_value = O2_alarm_min_value;
 8002862:	4b97      	ldr	r3, [pc, #604]	@ (8002ac0 <cls_cmd+0x708>)
 8002864:	781a      	ldrb	r2, [r3, #0]
 8002866:	4b96      	ldr	r3, [pc, #600]	@ (8002ac0 <cls_cmd+0x708>)
 8002868:	701a      	strb	r2, [r3, #0]



		PID_VALUE_SET_FLAG = 1;
 800286a:	4b96      	ldr	r3, [pc, #600]	@ (8002ac4 <cls_cmd+0x70c>)
 800286c:	2201      	movs	r2, #1
 800286e:	701a      	strb	r2, [r3, #0]
		Value_reset_flag = 1;
 8002870:	4b95      	ldr	r3, [pc, #596]	@ (8002ac8 <cls_cmd+0x710>)
 8002872:	2201      	movs	r2, #1
 8002874:	701a      	strb	r2, [r3, #0]
		vt_flag = 0;
 8002876:	4b95      	ldr	r3, [pc, #596]	@ (8002acc <cls_cmd+0x714>)
 8002878:	2200      	movs	r2, #0
 800287a:	701a      	strb	r2, [r3, #0]
		plt_flag = 0;
 800287c:	4b94      	ldr	r3, [pc, #592]	@ (8002ad0 <cls_cmd+0x718>)
 800287e:	2200      	movs	r2, #0
 8002880:	701a      	strb	r2, [r3, #0]
		rr_flag = 0;
 8002882:	4b94      	ldr	r3, [pc, #592]	@ (8002ad4 <cls_cmd+0x71c>)
 8002884:	2200      	movs	r2, #0
 8002886:	701a      	strb	r2, [r3, #0]
		i_flag = 0;
 8002888:	4b93      	ldr	r3, [pc, #588]	@ (8002ad8 <cls_cmd+0x720>)
 800288a:	2200      	movs	r2, #0
 800288c:	701a      	strb	r2, [r3, #0]
		e_flag = 0;
 800288e:	4b93      	ldr	r3, [pc, #588]	@ (8002adc <cls_cmd+0x724>)
 8002890:	2200      	movs	r2, #0
 8002892:	701a      	strb	r2, [r3, #0]
		pu_flag = 0;
 8002894:	4b92      	ldr	r3, [pc, #584]	@ (8002ae0 <cls_cmd+0x728>)
 8002896:	2200      	movs	r2, #0
 8002898:	701a      	strb	r2, [r3, #0]
		trg_flag = 0;
 800289a:	4b92      	ldr	r3, [pc, #584]	@ (8002ae4 <cls_cmd+0x72c>)
 800289c:	2200      	movs	r2, #0
 800289e:	701a      	strb	r2, [r3, #0]
		pip_flag = 0;
 80028a0:	4b91      	ldr	r3, [pc, #580]	@ (8002ae8 <cls_cmd+0x730>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	701a      	strb	r2, [r3, #0]
		peep_flag = 0;
 80028a6:	4b91      	ldr	r3, [pc, #580]	@ (8002aec <cls_cmd+0x734>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	701a      	strb	r2, [r3, #0]
		PS_flag = 0;
 80028ac:	4b90      	ldr	r3, [pc, #576]	@ (8002af0 <cls_cmd+0x738>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	701a      	strb	r2, [r3, #0]
		Mute_flag = 0;
 80028b2:	4b90      	ldr	r3, [pc, #576]	@ (8002af4 <cls_cmd+0x73c>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	701a      	strb	r2, [r3, #0]
		P_peak_alarm_min_flag = 0;
 80028b8:	4b8f      	ldr	r3, [pc, #572]	@ (8002af8 <cls_cmd+0x740>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	701a      	strb	r2, [r3, #0]
		MV_alarm_min_flag     = 0;
 80028be:	4b8f      	ldr	r3, [pc, #572]	@ (8002afc <cls_cmd+0x744>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	701a      	strb	r2, [r3, #0]
		RR_alarm_min_flag     = 0;
 80028c4:	4b8e      	ldr	r3, [pc, #568]	@ (8002b00 <cls_cmd+0x748>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	701a      	strb	r2, [r3, #0]
		peep_alarm_min_flag   = 0;
 80028ca:	4b8e      	ldr	r3, [pc, #568]	@ (8002b04 <cls_cmd+0x74c>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	701a      	strb	r2, [r3, #0]
		O2_alarm_min_flag     = 0;
 80028d0:	4b8d      	ldr	r3, [pc, #564]	@ (8002b08 <cls_cmd+0x750>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	701a      	strb	r2, [r3, #0]
		P_peak_alarm_max_flag = 0;
 80028d6:	4b8d      	ldr	r3, [pc, #564]	@ (8002b0c <cls_cmd+0x754>)
 80028d8:	2200      	movs	r2, #0
 80028da:	701a      	strb	r2, [r3, #0]
		MV_alarm_max_flag     = 0;
 80028dc:	4b8c      	ldr	r3, [pc, #560]	@ (8002b10 <cls_cmd+0x758>)
 80028de:	2200      	movs	r2, #0
 80028e0:	701a      	strb	r2, [r3, #0]
		RR_alarm_max_flag     = 0;
 80028e2:	4b8c      	ldr	r3, [pc, #560]	@ (8002b14 <cls_cmd+0x75c>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	701a      	strb	r2, [r3, #0]
		peep_alarm_max_flag   = 0;
 80028e8:	4b8b      	ldr	r3, [pc, #556]	@ (8002b18 <cls_cmd+0x760>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	701a      	strb	r2, [r3, #0]
		O2_alarm_max_flag     = 0;
 80028ee:	4b8b      	ldr	r3, [pc, #556]	@ (8002b1c <cls_cmd+0x764>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	701a      	strb	r2, [r3, #0]

		HAL_UART_Transmit(&huart1,
 80028f4:	4b8a      	ldr	r3, [pc, #552]	@ (8002b20 <cls_cmd+0x768>)
 80028f6:	7819      	ldrb	r1, [r3, #0]
				ICON_TOGGLE(0x10, temp_add, ((int) temp_add - 1), 0x01), 8,
 80028f8:	4b89      	ldr	r3, [pc, #548]	@ (8002b20 <cls_cmd+0x768>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	3b01      	subs	r3, #1
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	2301      	movs	r3, #1
 8002902:	2010      	movs	r0, #16
 8002904:	f7ff f9a8 	bl	8001c58 <ICON_TOGGLE>
 8002908:	4601      	mov	r1, r0
		HAL_UART_Transmit(&huart1,
 800290a:	2301      	movs	r3, #1
 800290c:	2208      	movs	r2, #8
 800290e:	4885      	ldr	r0, [pc, #532]	@ (8002b24 <cls_cmd+0x76c>)
 8002910:	f00c fa00 	bl	800ed14 <HAL_UART_Transmit>
				1);
		HAL_UART_Transmit(&huart1,
 8002914:	4b84      	ldr	r3, [pc, #528]	@ (8002b28 <cls_cmd+0x770>)
 8002916:	7819      	ldrb	r1, [r3, #0]
				ICON_TOGGLE(0x10, clear_add, ((int) clear_add - 7), 0x01), 8,
 8002918:	4b83      	ldr	r3, [pc, #524]	@ (8002b28 <cls_cmd+0x770>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	3b07      	subs	r3, #7
 800291e:	b2da      	uxtb	r2, r3
 8002920:	2301      	movs	r3, #1
 8002922:	2010      	movs	r0, #16
 8002924:	f7ff f998 	bl	8001c58 <ICON_TOGGLE>
 8002928:	4601      	mov	r1, r0
		HAL_UART_Transmit(&huart1,
 800292a:	2301      	movs	r3, #1
 800292c:	2208      	movs	r2, #8
 800292e:	487d      	ldr	r0, [pc, #500]	@ (8002b24 <cls_cmd+0x76c>)
 8002930:	f00c f9f0 	bl	800ed14 <HAL_UART_Transmit>
				1);
		HAL_UART_Transmit(&huart1,
 8002934:	4b7d      	ldr	r3, [pc, #500]	@ (8002b2c <cls_cmd+0x774>)
 8002936:	7819      	ldrb	r1, [r3, #0]
				ICON_TOGGLE(0x10, clears_add, ((int) clears_add - 13), 0x01), 8,
 8002938:	4b7c      	ldr	r3, [pc, #496]	@ (8002b2c <cls_cmd+0x774>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	3b0d      	subs	r3, #13
 800293e:	b2da      	uxtb	r2, r3
 8002940:	2301      	movs	r3, #1
 8002942:	2010      	movs	r0, #16
 8002944:	f7ff f988 	bl	8001c58 <ICON_TOGGLE>
 8002948:	4601      	mov	r1, r0
		HAL_UART_Transmit(&huart1,
 800294a:	2301      	movs	r3, #1
 800294c:	2208      	movs	r2, #8
 800294e:	4875      	ldr	r0, [pc, #468]	@ (8002b24 <cls_cmd+0x76c>)
 8002950:	f00c f9e0 	bl	800ed14 <HAL_UART_Transmit>
				1);
		HAL_UART_Transmit(&huart1,
 8002954:	4b76      	ldr	r3, [pc, #472]	@ (8002b30 <cls_cmd+0x778>)
 8002956:	7819      	ldrb	r1, [r3, #0]
				ICON_TOGGLE(0x10, clearss_add, ((int) clearss_add - 28), 0x01), 8,
 8002958:	4b75      	ldr	r3, [pc, #468]	@ (8002b30 <cls_cmd+0x778>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	3b1c      	subs	r3, #28
 800295e:	b2da      	uxtb	r2, r3
 8002960:	2301      	movs	r3, #1
 8002962:	2010      	movs	r0, #16
 8002964:	f7ff f978 	bl	8001c58 <ICON_TOGGLE>
 8002968:	4601      	mov	r1, r0
		HAL_UART_Transmit(&huart1,
 800296a:	2301      	movs	r3, #1
 800296c:	2208      	movs	r2, #8
 800296e:	486d      	ldr	r0, [pc, #436]	@ (8002b24 <cls_cmd+0x76c>)
 8002970:	f00c f9d0 	bl	800ed14 <HAL_UART_Transmit>
				1);
		HAL_UART_Transmit(&huart1,
 8002974:	4b6f      	ldr	r3, [pc, #444]	@ (8002b34 <cls_cmd+0x77c>)
 8002976:	7819      	ldrb	r1, [r3, #0]
				ICON_TOGGLE(0x10, PS_add, ((int) PS_add - 161), 0x01), 8,
 8002978:	4b6e      	ldr	r3, [pc, #440]	@ (8002b34 <cls_cmd+0x77c>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	335f      	adds	r3, #95	@ 0x5f
 800297e:	b2da      	uxtb	r2, r3
 8002980:	2301      	movs	r3, #1
 8002982:	2010      	movs	r0, #16
 8002984:	f7ff f968 	bl	8001c58 <ICON_TOGGLE>
 8002988:	4601      	mov	r1, r0
		HAL_UART_Transmit(&huart1,
 800298a:	2301      	movs	r3, #1
 800298c:	2208      	movs	r2, #8
 800298e:	4865      	ldr	r0, [pc, #404]	@ (8002b24 <cls_cmd+0x76c>)
 8002990:	f00c f9c0 	bl	800ed14 <HAL_UART_Transmit>
				1);
		inc_drc_icon(0X01);
 8002994:	2001      	movs	r0, #1
 8002996:	f7ff fc63 	bl	8002260 <inc_drc_icon>

		for (int a = 0; a < 9; a++)
 800299a:	2300      	movs	r3, #0
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	e007      	b.n	80029b0 <cls_cmd+0x5f8>
			DISPLAY_INPUT[a] = 0x00;
 80029a0:	4a65      	ldr	r2, [pc, #404]	@ (8002b38 <cls_cmd+0x780>)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	4413      	add	r3, r2
 80029a6:	2200      	movs	r2, #0
 80029a8:	701a      	strb	r2, [r3, #0]
		for (int a = 0; a < 9; a++)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	3301      	adds	r3, #1
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2b08      	cmp	r3, #8
 80029b4:	ddf4      	ble.n	80029a0 <cls_cmd+0x5e8>
 80029b6:	e040      	b.n	8002a3a <cls_cmd+0x682>
	}
	else if ((DISPLAY_INPUT[5] == 0xC3)||(DISPLAY_INPUT[5] == 0xF1)){
 80029b8:	4b5f      	ldr	r3, [pc, #380]	@ (8002b38 <cls_cmd+0x780>)
 80029ba:	795b      	ldrb	r3, [r3, #5]
 80029bc:	2bc3      	cmp	r3, #195	@ 0xc3
 80029be:	d003      	beq.n	80029c8 <cls_cmd+0x610>
 80029c0:	4b5d      	ldr	r3, [pc, #372]	@ (8002b38 <cls_cmd+0x780>)
 80029c2:	795b      	ldrb	r3, [r3, #5]
 80029c4:	2bf1      	cmp	r3, #241	@ 0xf1
 80029c6:	d101      	bne.n	80029cc <cls_cmd+0x614>
		NVIC_SystemReset();
 80029c8:	f7fe fb20 	bl	800100c <__NVIC_SystemReset>
	}
	else if (DISPLAY_INPUT[5] == 0xE2){
 80029cc:	4b5a      	ldr	r3, [pc, #360]	@ (8002b38 <cls_cmd+0x780>)
 80029ce:	795b      	ldrb	r3, [r3, #5]
 80029d0:	2be2      	cmp	r3, #226	@ 0xe2
 80029d2:	d132      	bne.n	8002a3a <cls_cmd+0x682>
		PID_VALUE_SET_FLAG = 1;
 80029d4:	4b3b      	ldr	r3, [pc, #236]	@ (8002ac4 <cls_cmd+0x70c>)
 80029d6:	2201      	movs	r2, #1
 80029d8:	701a      	strb	r2, [r3, #0]
		//			Value_reset_flag = 1;
		CLT_FLAG = 1;
 80029da:	4b58      	ldr	r3, [pc, #352]	@ (8002b3c <cls_cmd+0x784>)
 80029dc:	2201      	movs	r2, #1
 80029de:	701a      	strb	r2, [r3, #0]
		VCV_FLAG = 0;
 80029e0:	4b57      	ldr	r3, [pc, #348]	@ (8002b40 <cls_cmd+0x788>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	701a      	strb	r2, [r3, #0]
		PSV_FLAG = 0;
 80029e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002a58 <cls_cmd+0x6a0>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	701a      	strb	r2, [r3, #0]
		STAND_BY = 0;
 80029ec:	4b55      	ldr	r3, [pc, #340]	@ (8002b44 <cls_cmd+0x78c>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	701a      	strb	r2, [r3, #0]
		SIMV_FLAG = 0;
 80029f2:	4b55      	ldr	r3, [pc, #340]	@ (8002b48 <cls_cmd+0x790>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	701a      	strb	r2, [r3, #0]
		PCV_FLAG = 0;
 80029f8:	4b54      	ldr	r3, [pc, #336]	@ (8002b4c <cls_cmd+0x794>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	701a      	strb	r2, [r3, #0]
		BAG_FLAG = 0;
 80029fe:	4b54      	ldr	r3, [pc, #336]	@ (8002b50 <cls_cmd+0x798>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	701a      	strb	r2, [r3, #0]
		psv_ppr_set_flag = 1;
 8002a04:	4b53      	ldr	r3, [pc, #332]	@ (8002b54 <cls_cmd+0x79c>)
 8002a06:	2201      	movs	r2, #1
 8002a08:	701a      	strb	r2, [r3, #0]
		rr_flag = 0;
 8002a0a:	4b32      	ldr	r3, [pc, #200]	@ (8002ad4 <cls_cmd+0x71c>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	701a      	strb	r2, [r3, #0]
		PS_flag = 1;
 8002a10:	4b37      	ldr	r3, [pc, #220]	@ (8002af0 <cls_cmd+0x738>)
 8002a12:	2201      	movs	r2, #1
 8002a14:	701a      	strb	r2, [r3, #0]

		PID_FLOW_SET_VALUE(PS_temp_value, 0.1, 0.1, 0.15, 0.5);
 8002a16:	4b11      	ldr	r3, [pc, #68]	@ (8002a5c <cls_cmd+0x6a4>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fd fd6a 	bl	80004f4 <__aeabi_ui2d>
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	2000      	movs	r0, #0
 8002a26:	ed9f 3b0a 	vldr	d3, [pc, #40]	@ 8002a50 <cls_cmd+0x698>
 8002a2a:	ed9f 2b07 	vldr	d2, [pc, #28]	@ 8002a48 <cls_cmd+0x690>
 8002a2e:	ed9f 1b06 	vldr	d1, [pc, #24]	@ 8002a48 <cls_cmd+0x690>
 8002a32:	ec43 2b10 	vmov	d0, r2, r3
 8002a36:	f001 f88f 	bl	8003b58 <PID_FLOW_SET_VALUE>
	}
	for (int a = 0; a < 9; a++)
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60bb      	str	r3, [r7, #8]
 8002a3e:	e093      	b.n	8002b68 <cls_cmd+0x7b0>
	...
 8002a48:	9999999a 	.word	0x9999999a
 8002a4c:	3fb99999 	.word	0x3fb99999
 8002a50:	33333333 	.word	0x33333333
 8002a54:	3fc33333 	.word	0x3fc33333
 8002a58:	200015b7 	.word	0x200015b7
 8002a5c:	200015b4 	.word	0x200015b4
 8002a60:	20000024 	.word	0x20000024
 8002a64:	20000034 	.word	0x20000034
 8002a68:	20000027 	.word	0x20000027
 8002a6c:	2000003c 	.word	0x2000003c
 8002a70:	20000026 	.word	0x20000026
 8002a74:	20000038 	.word	0x20000038
 8002a78:	2000001c 	.word	0x2000001c
 8002a7c:	2000002c 	.word	0x2000002c
 8002a80:	20000020 	.word	0x20000020
 8002a84:	20000030 	.word	0x20000030
 8002a88:	200015a9 	.word	0x200015a9
 8002a8c:	200015b2 	.word	0x200015b2
 8002a90:	200015b0 	.word	0x200015b0
 8002a94:	200015b3 	.word	0x200015b3
 8002a98:	200015b1 	.word	0x200015b1
 8002a9c:	20000040 	.word	0x20000040
 8002aa0:	200015e4 	.word	0x200015e4
 8002aa4:	20000041 	.word	0x20000041
 8002aa8:	200015e5 	.word	0x200015e5
 8002aac:	20000042 	.word	0x20000042
 8002ab0:	2000003d 	.word	0x2000003d
 8002ab4:	20000043 	.word	0x20000043
 8002ab8:	2000003e 	.word	0x2000003e
 8002abc:	20000044 	.word	0x20000044
 8002ac0:	2000003f 	.word	0x2000003f
 8002ac4:	200011fd 	.word	0x200011fd
 8002ac8:	200015c1 	.word	0x200015c1
 8002acc:	200015ca 	.word	0x200015ca
 8002ad0:	200015cb 	.word	0x200015cb
 8002ad4:	200015cc 	.word	0x200015cc
 8002ad8:	200015c8 	.word	0x200015c8
 8002adc:	200015c9 	.word	0x200015c9
 8002ae0:	200015cd 	.word	0x200015cd
 8002ae4:	200015ce 	.word	0x200015ce
 8002ae8:	200015cf 	.word	0x200015cf
 8002aec:	200015d0 	.word	0x200015d0
 8002af0:	200015d1 	.word	0x200015d1
 8002af4:	200015d2 	.word	0x200015d2
 8002af8:	200015f7 	.word	0x200015f7
 8002afc:	200015f8 	.word	0x200015f8
 8002b00:	200015f9 	.word	0x200015f9
 8002b04:	200015fa 	.word	0x200015fa
 8002b08:	200015fb 	.word	0x200015fb
 8002b0c:	200015fc 	.word	0x200015fc
 8002b10:	200015fd 	.word	0x200015fd
 8002b14:	200015fe 	.word	0x200015fe
 8002b18:	200015ff 	.word	0x200015ff
 8002b1c:	20001600 	.word	0x20001600
 8002b20:	2000159d 	.word	0x2000159d
 8002b24:	20000fc0 	.word	0x20000fc0
 8002b28:	2000159e 	.word	0x2000159e
 8002b2c:	2000159f 	.word	0x2000159f
 8002b30:	200015a0 	.word	0x200015a0
 8002b34:	200015a1 	.word	0x200015a1
 8002b38:	20001584 	.word	0x20001584
 8002b3c:	200015bc 	.word	0x200015bc
 8002b40:	200015b8 	.word	0x200015b8
 8002b44:	200015b6 	.word	0x200015b6
 8002b48:	200015b5 	.word	0x200015b5
 8002b4c:	200015b9 	.word	0x200015b9
 8002b50:	200015ba 	.word	0x200015ba
 8002b54:	200015c6 	.word	0x200015c6
		DISPLAY_INPUT[a] = 0x00;
 8002b58:	4a07      	ldr	r2, [pc, #28]	@ (8002b78 <cls_cmd+0x7c0>)
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	2200      	movs	r2, #0
 8002b60:	701a      	strb	r2, [r3, #0]
	for (int a = 0; a < 9; a++)
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	3301      	adds	r3, #1
 8002b66:	60bb      	str	r3, [r7, #8]
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	2b08      	cmp	r3, #8
 8002b6c:	ddf4      	ble.n	8002b58 <cls_cmd+0x7a0>
}
 8002b6e:	bf00      	nop
 8002b70:	bf00      	nop
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	20001584 	.word	0x20001584

08002b7c <Breath_calclution>:
//	numatic_exp_ctr = Te * 1000;
//	total_time = BPS * 1000;
//
//	insPause_vale = ((float) PU_temp_value / (float) 100) * numatic_insp_ctr;
//}
void Breath_calclution(void) {
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
	Single_breath_time = 60.0 / (float) RR_temp_value;
 8002b80:	4b36      	ldr	r3, [pc, #216]	@ (8002c5c <Breath_calclution+0xe0>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	ee07 3a90 	vmov	s15, r3
 8002b88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b8c:	eddf 6a34 	vldr	s13, [pc, #208]	@ 8002c60 <Breath_calclution+0xe4>
 8002b90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b94:	4b33      	ldr	r3, [pc, #204]	@ (8002c64 <Breath_calclution+0xe8>)
 8002b96:	edc3 7a00 	vstr	s15, [r3]

	Ti = ((float) temp_insP_value
 8002b9a:	4b33      	ldr	r3, [pc, #204]	@ (8002c68 <Breath_calclution+0xec>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	ee07 3a90 	vmov	s15, r3
 8002ba2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
			/ ((float) temp_insP_value + (float) temp_exp_value))
 8002ba6:	4b30      	ldr	r3, [pc, #192]	@ (8002c68 <Breath_calclution+0xec>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	ee07 3a90 	vmov	s15, r3
 8002bae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bb2:	4b2e      	ldr	r3, [pc, #184]	@ (8002c6c <Breath_calclution+0xf0>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	ee07 3a90 	vmov	s15, r3
 8002bba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
																																			* Single_breath_time;
 8002bc6:	4b27      	ldr	r3, [pc, #156]	@ (8002c64 <Breath_calclution+0xe8>)
 8002bc8:	edd3 7a00 	vldr	s15, [r3]
 8002bcc:	ee67 7a27 	vmul.f32	s15, s14, s15
	Ti = ((float) temp_insP_value
 8002bd0:	4b27      	ldr	r3, [pc, #156]	@ (8002c70 <Breath_calclution+0xf4>)
 8002bd2:	edc3 7a00 	vstr	s15, [r3]
	Te = Single_breath_time - Ti;
 8002bd6:	4b23      	ldr	r3, [pc, #140]	@ (8002c64 <Breath_calclution+0xe8>)
 8002bd8:	ed93 7a00 	vldr	s14, [r3]
 8002bdc:	4b24      	ldr	r3, [pc, #144]	@ (8002c70 <Breath_calclution+0xf4>)
 8002bde:	edd3 7a00 	vldr	s15, [r3]
 8002be2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002be6:	4b23      	ldr	r3, [pc, #140]	@ (8002c74 <Breath_calclution+0xf8>)
 8002be8:	edc3 7a00 	vstr	s15, [r3]

	numatic_insp_ctr = Ti * 1000;
 8002bec:	4b20      	ldr	r3, [pc, #128]	@ (8002c70 <Breath_calclution+0xf4>)
 8002bee:	edd3 7a00 	vldr	s15, [r3]
 8002bf2:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8002c78 <Breath_calclution+0xfc>
 8002bf6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bfe:	ee17 2a90 	vmov	r2, s15
 8002c02:	4b1e      	ldr	r3, [pc, #120]	@ (8002c7c <Breath_calclution+0x100>)
 8002c04:	601a      	str	r2, [r3, #0]
	numatic_exp_ctr = Te * 1000;
 8002c06:	4b1b      	ldr	r3, [pc, #108]	@ (8002c74 <Breath_calclution+0xf8>)
 8002c08:	edd3 7a00 	vldr	s15, [r3]
 8002c0c:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8002c78 <Breath_calclution+0xfc>
 8002c10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c18:	ee17 2a90 	vmov	r2, s15
 8002c1c:	4b18      	ldr	r3, [pc, #96]	@ (8002c80 <Breath_calclution+0x104>)
 8002c1e:	601a      	str	r2, [r3, #0]

	insPause_vale = ((float) PU_temp_value / (float) 100) * numatic_insp_ctr;
 8002c20:	4b18      	ldr	r3, [pc, #96]	@ (8002c84 <Breath_calclution+0x108>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	ee07 3a90 	vmov	s15, r3
 8002c28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c2c:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8002c88 <Breath_calclution+0x10c>
 8002c30:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002c34:	4b11      	ldr	r3, [pc, #68]	@ (8002c7c <Breath_calclution+0x100>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	ee07 3a90 	vmov	s15, r3
 8002c3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c48:	ee17 2a90 	vmov	r2, s15
 8002c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8002c8c <Breath_calclution+0x110>)
 8002c4e:	601a      	str	r2, [r3, #0]
}
 8002c50:	bf00      	nop
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	2000003c 	.word	0x2000003c
 8002c60:	42700000 	.word	0x42700000
 8002c64:	200011dc 	.word	0x200011dc
 8002c68:	2000002c 	.word	0x2000002c
 8002c6c:	20000030 	.word	0x20000030
 8002c70:	200011e0 	.word	0x200011e0
 8002c74:	200011e4 	.word	0x200011e4
 8002c78:	447a0000 	.word	0x447a0000
 8002c7c:	2000157c 	.word	0x2000157c
 8002c80:	20001580 	.word	0x20001580
 8002c84:	200015b2 	.word	0x200015b2
 8002c88:	42c80000 	.word	0x42c80000
 8002c8c:	20000150 	.word	0x20000150

08002c90 <Pre_set_value_show>:
void Pre_set_value_show(void) {
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
	intiger_val_vt_send(1, vt_value);
 8002c94:	4b3f      	ldr	r3, [pc, #252]	@ (8002d94 <Pre_set_value_show+0x104>)
 8002c96:	881b      	ldrh	r3, [r3, #0]
 8002c98:	4619      	mov	r1, r3
 8002c9a:	2001      	movs	r0, #1
 8002c9c:	f7ff fb36 	bl	800230c <intiger_val_vt_send>
	intiger_val_send(2, PLR_value);
 8002ca0:	4b3d      	ldr	r3, [pc, #244]	@ (8002d98 <Pre_set_value_show+0x108>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	2002      	movs	r0, #2
 8002ca8:	f7ff fb0c 	bl	80022c4 <intiger_val_send>
	intiger_val_send(3, RR_value);
 8002cac:	4b3b      	ldr	r3, [pc, #236]	@ (8002d9c <Pre_set_value_show+0x10c>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	2003      	movs	r0, #3
 8002cb4:	f7ff fb06 	bl	80022c4 <intiger_val_send>
	intiger_val_send(5, PU_value);
 8002cb8:	4b39      	ldr	r3, [pc, #228]	@ (8002da0 <Pre_set_value_show+0x110>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	2005      	movs	r0, #5
 8002cc0:	f7ff fb00 	bl	80022c4 <intiger_val_send>
	intiger_val_send(6, TRG_value);
 8002cc4:	4b37      	ldr	r3, [pc, #220]	@ (8002da4 <Pre_set_value_show+0x114>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	4619      	mov	r1, r3
 8002ccc:	2006      	movs	r0, #6
 8002cce:	f7ff faf9 	bl	80022c4 <intiger_val_send>
	PIP_VAL(7, PIP_value);
 8002cd2:	4b35      	ldr	r3, [pc, #212]	@ (8002da8 <Pre_set_value_show+0x118>)
 8002cd4:	f993 3000 	ldrsb.w	r3, [r3]
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	4619      	mov	r1, r3
 8002cdc:	2007      	movs	r0, #7
 8002cde:	f7ff fb45 	bl	800236c <PIP_VAL>
	//	intiger_val_send(7, PIP_value);
	intiger_val_send(8, PEEP_value);
 8002ce2:	4b32      	ldr	r3, [pc, #200]	@ (8002dac <Pre_set_value_show+0x11c>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	2008      	movs	r0, #8
 8002cea:	f7ff faeb 	bl	80022c4 <intiger_val_send>
	intiger_val_send(9, PS_value);
 8002cee:	4b30      	ldr	r3, [pc, #192]	@ (8002db0 <Pre_set_value_show+0x120>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	2009      	movs	r0, #9
 8002cf6:	f7ff fae5 	bl	80022c4 <intiger_val_send>
	//	intiger_val_send(0x43, Play_value);
	//	intiger_val_send(0x24, insP_value);
	//	intiger_val_send(0x25, exp_value);
	intiger_val_send(0x14,P_peak_alarm_max_value);
 8002cfa:	4b2e      	ldr	r3, [pc, #184]	@ (8002db4 <Pre_set_value_show+0x124>)
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	4619      	mov	r1, r3
 8002d00:	2014      	movs	r0, #20
 8002d02:	f7ff fadf 	bl	80022c4 <intiger_val_send>
	intiger_val_send(0x15,P_peak_alarm_min_value);
 8002d06:	4b2c      	ldr	r3, [pc, #176]	@ (8002db8 <Pre_set_value_show+0x128>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	2015      	movs	r0, #21
 8002d0e:	f7ff fad9 	bl	80022c4 <intiger_val_send>
	intiger_val_send(0x16,MV_alarm_max_value);
 8002d12:	4b2a      	ldr	r3, [pc, #168]	@ (8002dbc <Pre_set_value_show+0x12c>)
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	4619      	mov	r1, r3
 8002d18:	2016      	movs	r0, #22
 8002d1a:	f7ff fad3 	bl	80022c4 <intiger_val_send>
	intiger_val_send(0x17,MV_alarm_min_value);
 8002d1e:	4b28      	ldr	r3, [pc, #160]	@ (8002dc0 <Pre_set_value_show+0x130>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	4619      	mov	r1, r3
 8002d24:	2017      	movs	r0, #23
 8002d26:	f7ff facd 	bl	80022c4 <intiger_val_send>
	intiger_val_send(0x18,RR_alarm_max_value);
 8002d2a:	4b26      	ldr	r3, [pc, #152]	@ (8002dc4 <Pre_set_value_show+0x134>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	4619      	mov	r1, r3
 8002d30:	2018      	movs	r0, #24
 8002d32:	f7ff fac7 	bl	80022c4 <intiger_val_send>
	intiger_val_send(0x19,RR_alarm_min_value);
 8002d36:	4b24      	ldr	r3, [pc, #144]	@ (8002dc8 <Pre_set_value_show+0x138>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	2019      	movs	r0, #25
 8002d3e:	f7ff fac1 	bl	80022c4 <intiger_val_send>
	intiger_val_send(0x1A,peep_alarm_max_value);
 8002d42:	4b22      	ldr	r3, [pc, #136]	@ (8002dcc <Pre_set_value_show+0x13c>)
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	4619      	mov	r1, r3
 8002d48:	201a      	movs	r0, #26
 8002d4a:	f7ff fabb 	bl	80022c4 <intiger_val_send>
	intiger_val_send(0x21,peep_alarm_min_value);
 8002d4e:	4b20      	ldr	r3, [pc, #128]	@ (8002dd0 <Pre_set_value_show+0x140>)
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	4619      	mov	r1, r3
 8002d54:	2021      	movs	r0, #33	@ 0x21
 8002d56:	f7ff fab5 	bl	80022c4 <intiger_val_send>
	intiger_val_send(0x22,O2_alarm_max_value);
 8002d5a:	4b1e      	ldr	r3, [pc, #120]	@ (8002dd4 <Pre_set_value_show+0x144>)
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	4619      	mov	r1, r3
 8002d60:	2022      	movs	r0, #34	@ 0x22
 8002d62:	f7ff faaf 	bl	80022c4 <intiger_val_send>
	intiger_val_send(0x23,O2_alarm_min_value);
 8002d66:	4b1c      	ldr	r3, [pc, #112]	@ (8002dd8 <Pre_set_value_show+0x148>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	2023      	movs	r0, #35	@ 0x23
 8002d6e:	f7ff faa9 	bl	80022c4 <intiger_val_send>
	intiger_val_send(0x24, insP_value);
 8002d72:	4b1a      	ldr	r3, [pc, #104]	@ (8002ddc <Pre_set_value_show+0x14c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	4619      	mov	r1, r3
 8002d7a:	2024      	movs	r0, #36	@ 0x24
 8002d7c:	f7ff faa2 	bl	80022c4 <intiger_val_send>
	intiger_val_send(0x25, exp_value);
 8002d80:	4b17      	ldr	r3, [pc, #92]	@ (8002de0 <Pre_set_value_show+0x150>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	4619      	mov	r1, r3
 8002d88:	2025      	movs	r0, #37	@ 0x25
 8002d8a:	f7ff fa9b 	bl	80022c4 <intiger_val_send>
}
 8002d8e:	bf00      	nop
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	20000024 	.word	0x20000024
 8002d98:	20000026 	.word	0x20000026
 8002d9c:	20000027 	.word	0x20000027
 8002da0:	200015a9 	.word	0x200015a9
 8002da4:	200015ac 	.word	0x200015ac
 8002da8:	20000028 	.word	0x20000028
 8002dac:	200015b0 	.word	0x200015b0
 8002db0:	200015b1 	.word	0x200015b1
 8002db4:	20000040 	.word	0x20000040
 8002db8:	200015e4 	.word	0x200015e4
 8002dbc:	20000041 	.word	0x20000041
 8002dc0:	200015e5 	.word	0x200015e5
 8002dc4:	20000042 	.word	0x20000042
 8002dc8:	2000003d 	.word	0x2000003d
 8002dcc:	20000043 	.word	0x20000043
 8002dd0:	2000003e 	.word	0x2000003e
 8002dd4:	20000044 	.word	0x20000044
 8002dd8:	2000003f 	.word	0x2000003f
 8002ddc:	2000001c 	.word	0x2000001c
 8002de0:	20000020 	.word	0x20000020

08002de4 <modes_icon_change>:
//..............icon change..........
void modes_icon_change(m_icon_add) {
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
	uint8_t mode_icon_data[8] =
 8002dec:	4a0a      	ldr	r2, [pc, #40]	@ (8002e18 <modes_icon_change+0x34>)
 8002dee:	f107 0308 	add.w	r3, r7, #8
 8002df2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002df6:	e883 0003 	stmia.w	r3, {r0, r1}
	{ 0x5a, 0xa5, 0x05, 0x82, 0x10, 0x23, 0x00, 0x00 };
	mode_icon_data[7] = m_icon_add;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, mode_icon_data, 8, 1);
 8002e00:	f107 0108 	add.w	r1, r7, #8
 8002e04:	2301      	movs	r3, #1
 8002e06:	2208      	movs	r2, #8
 8002e08:	4804      	ldr	r0, [pc, #16]	@ (8002e1c <modes_icon_change+0x38>)
 8002e0a:	f00b ff83 	bl	800ed14 <HAL_UART_Transmit>
}
 8002e0e:	bf00      	nop
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	08014130 	.word	0x08014130
 8002e1c:	20000fc0 	.word	0x20000fc0

08002e20 <battery_icon_change>:

void battery_icon_change(uint8_t battery_icon_add) {
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4603      	mov	r3, r0
 8002e28:	71fb      	strb	r3, [r7, #7]
	uint8_t battery_icon_data[8] = {0x5A, 0XA5, 0X05, 0X82, 0X10, 0XD5, 0X00, 0X00};
 8002e2a:	4a0a      	ldr	r2, [pc, #40]	@ (8002e54 <battery_icon_change+0x34>)
 8002e2c:	f107 0308 	add.w	r3, r7, #8
 8002e30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e34:	e883 0003 	stmia.w	r3, {r0, r1}
	battery_icon_data[7] = battery_icon_add;
 8002e38:	79fb      	ldrb	r3, [r7, #7]
 8002e3a:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, battery_icon_data, 8, 1);
 8002e3c:	f107 0108 	add.w	r1, r7, #8
 8002e40:	2301      	movs	r3, #1
 8002e42:	2208      	movs	r2, #8
 8002e44:	4804      	ldr	r0, [pc, #16]	@ (8002e58 <battery_icon_change+0x38>)
 8002e46:	f00b ff65 	bl	800ed14 <HAL_UART_Transmit>
}
 8002e4a:	bf00      	nop
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	08014138 	.word	0x08014138
 8002e58:	20000fc0 	.word	0x20000fc0

08002e5c <muteUnmute_icon_change>:
void muteUnmute_icon_change(uint8_t mute_icon_add) {
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	4603      	mov	r3, r0
 8002e64:	71fb      	strb	r3, [r7, #7]
	uint8_t battery_icon_data[8] = {0x5A, 0XA5, 0X05, 0X82, 0X10, 0X37, 0X00, 0X00};
 8002e66:	4a0a      	ldr	r2, [pc, #40]	@ (8002e90 <muteUnmute_icon_change+0x34>)
 8002e68:	f107 0308 	add.w	r3, r7, #8
 8002e6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e70:	e883 0003 	stmia.w	r3, {r0, r1}
	battery_icon_data[7] = mute_icon_add;
 8002e74:	79fb      	ldrb	r3, [r7, #7]
 8002e76:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, battery_icon_data, 8, 1);
 8002e78:	f107 0108 	add.w	r1, r7, #8
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	2208      	movs	r2, #8
 8002e80:	4804      	ldr	r0, [pc, #16]	@ (8002e94 <muteUnmute_icon_change+0x38>)
 8002e82:	f00b ff47 	bl	800ed14 <HAL_UART_Transmit>
}
 8002e86:	bf00      	nop
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	08014140 	.word	0x08014140
 8002e94:	20000fc0 	.word	0x20000fc0

08002e98 <alarm_icon_change>:
void alarm_icon_change(uint8_t alarm_icon_add) {
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	71fb      	strb	r3, [r7, #7]
	uint8_t battery_icon_data[8] = {0x5A, 0XA5, 0X05, 0X82, 0X10, 0X5B, 0X00, 0X00};
 8002ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8002ecc <alarm_icon_change+0x34>)
 8002ea4:	f107 0308 	add.w	r3, r7, #8
 8002ea8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002eac:	e883 0003 	stmia.w	r3, {r0, r1}
	battery_icon_data[7] = alarm_icon_add;
 8002eb0:	79fb      	ldrb	r3, [r7, #7]
 8002eb2:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, battery_icon_data, 8, 1);
 8002eb4:	f107 0108 	add.w	r1, r7, #8
 8002eb8:	2301      	movs	r3, #1
 8002eba:	2208      	movs	r2, #8
 8002ebc:	4804      	ldr	r0, [pc, #16]	@ (8002ed0 <alarm_icon_change+0x38>)
 8002ebe:	f00b ff29 	bl	800ed14 <HAL_UART_Transmit>
}
 8002ec2:	bf00      	nop
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	08014148 	.word	0x08014148
 8002ed0:	20000fc0 	.word	0x20000fc0

08002ed4 <leak_icon_change>:
void leak_icon_change(uint8_t leak_icon_add) {
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	4603      	mov	r3, r0
 8002edc:	71fb      	strb	r3, [r7, #7]
	uint8_t leak_icon_data[8] = {0x5A, 0XA5, 0X05, 0X82, 0X10, 0XCE, 0X00, 0X00};
 8002ede:	4a0a      	ldr	r2, [pc, #40]	@ (8002f08 <leak_icon_change+0x34>)
 8002ee0:	f107 0308 	add.w	r3, r7, #8
 8002ee4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ee8:	e883 0003 	stmia.w	r3, {r0, r1}
	leak_icon_data[7] = leak_icon_add;
 8002eec:	79fb      	ldrb	r3, [r7, #7]
 8002eee:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, leak_icon_data, 8, 1);
 8002ef0:	f107 0108 	add.w	r1, r7, #8
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	2208      	movs	r2, #8
 8002ef8:	4804      	ldr	r0, [pc, #16]	@ (8002f0c <leak_icon_change+0x38>)
 8002efa:	f00b ff0b 	bl	800ed14 <HAL_UART_Transmit>
}
 8002efe:	bf00      	nop
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	08014150 	.word	0x08014150
 8002f0c:	20000fc0 	.word	0x20000fc0

08002f10 <O2_Sensor>:
void O2_Sensor(uint8_t O2_icon_add) {
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	4603      	mov	r3, r0
 8002f18:	71fb      	strb	r3, [r7, #7]
	uint8_t O2_data[8] = {0x5A, 0XA5, 0X05, 0X82, 0X10, 0X68, 0X00, 0X00};
 8002f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8002f44 <O2_Sensor+0x34>)
 8002f1c:	f107 0308 	add.w	r3, r7, #8
 8002f20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f24:	e883 0003 	stmia.w	r3, {r0, r1}
	O2_data[7] = O2_icon_add;
 8002f28:	79fb      	ldrb	r3, [r7, #7]
 8002f2a:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, O2_data, 8, 1);
 8002f2c:	f107 0108 	add.w	r1, r7, #8
 8002f30:	2301      	movs	r3, #1
 8002f32:	2208      	movs	r2, #8
 8002f34:	4804      	ldr	r0, [pc, #16]	@ (8002f48 <O2_Sensor+0x38>)
 8002f36:	f00b feed 	bl	800ed14 <HAL_UART_Transmit>
}
 8002f3a:	bf00      	nop
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	08014158 	.word	0x08014158
 8002f48:	20000fc0 	.word	0x20000fc0

08002f4c <AC_Plug>:

void AC_Plug(uint8_t AC_icon_add) {
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	4603      	mov	r3, r0
 8002f54:	71fb      	strb	r3, [r7, #7]
	uint8_t AC_data[8] = {0x5A, 0XA5, 0X05, 0X82, 0X12, 0X00, 0X00, 0X00};
 8002f56:	4a0a      	ldr	r2, [pc, #40]	@ (8002f80 <AC_Plug+0x34>)
 8002f58:	f107 0308 	add.w	r3, r7, #8
 8002f5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f60:	e883 0003 	stmia.w	r3, {r0, r1}
	AC_data[7] = AC_icon_add;
 8002f64:	79fb      	ldrb	r3, [r7, #7]
 8002f66:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, AC_data, 8, 1);
 8002f68:	f107 0108 	add.w	r1, r7, #8
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	2208      	movs	r2, #8
 8002f70:	4804      	ldr	r0, [pc, #16]	@ (8002f84 <AC_Plug+0x38>)
 8002f72:	f00b fecf 	bl	800ed14 <HAL_UART_Transmit>
}
 8002f76:	bf00      	nop
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	08014160 	.word	0x08014160
 8002f84:	20000fc0 	.word	0x20000fc0

08002f88 <update_mbar_history>:
	P_mbar_data = P_sensor_data * 70.307;
	final_P_data = (int) P_mbar_data;
	return final_P_data;
}

void update_mbar_history(float new_mbar) {
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	ed87 0a01 	vstr	s0, [r7, #4]
	mbar_history[index1] = new_mbar;
 8002f92:	4b1e      	ldr	r3, [pc, #120]	@ (800300c <update_mbar_history+0x84>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a1e      	ldr	r2, [pc, #120]	@ (8003010 <update_mbar_history+0x88>)
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	601a      	str	r2, [r3, #0]
	index1 = (index1 + 1) % SMOOTHING_WINDOW;  // Keep index within bounds
 8002fa0:	4b1a      	ldr	r3, [pc, #104]	@ (800300c <update_mbar_history+0x84>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	1c59      	adds	r1, r3, #1
 8002fa6:	4b1b      	ldr	r3, [pc, #108]	@ (8003014 <update_mbar_history+0x8c>)
 8002fa8:	fb83 2301 	smull	r2, r3, r3, r1
 8002fac:	105a      	asrs	r2, r3, #1
 8002fae:	17cb      	asrs	r3, r1, #31
 8002fb0:	1ad2      	subs	r2, r2, r3
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	4413      	add	r3, r2
 8002fb8:	1aca      	subs	r2, r1, r3
 8002fba:	4b14      	ldr	r3, [pc, #80]	@ (800300c <update_mbar_history+0x84>)
 8002fbc:	601a      	str	r2, [r3, #0]

	// Calculate moving average
	float sum = 0;
 8002fbe:	f04f 0300 	mov.w	r3, #0
 8002fc2:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < SMOOTHING_WINDOW; i++) {
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	60bb      	str	r3, [r7, #8]
 8002fc8:	e00e      	b.n	8002fe8 <update_mbar_history+0x60>
		sum += mbar_history[i];
 8002fca:	4a11      	ldr	r2, [pc, #68]	@ (8003010 <update_mbar_history+0x88>)
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4413      	add	r3, r2
 8002fd2:	edd3 7a00 	vldr	s15, [r3]
 8002fd6:	ed97 7a03 	vldr	s14, [r7, #12]
 8002fda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fde:	edc7 7a03 	vstr	s15, [r7, #12]
	for (int i = 0; i < SMOOTHING_WINDOW; i++) {
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	60bb      	str	r3, [r7, #8]
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	dded      	ble.n	8002fca <update_mbar_history+0x42>
	}
	mbar2_smooth = sum / SMOOTHING_WINDOW;
 8002fee:	ed97 7a03 	vldr	s14, [r7, #12]
 8002ff2:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8002ff6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ffa:	4b07      	ldr	r3, [pc, #28]	@ (8003018 <update_mbar_history+0x90>)
 8002ffc:	edc3 7a00 	vstr	s15, [r3]
}
 8003000:	bf00      	nop
 8003002:	3714      	adds	r7, #20
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	200011c8 	.word	0x200011c8
 8003010:	200011b4 	.word	0x200011b4
 8003014:	66666667 	.word	0x66666667
 8003018:	200011cc 	.word	0x200011cc

0800301c <play_icon_change>:
void play_icon_change(uint8_t play_icon_add) {
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	4603      	mov	r3, r0
 8003024:	71fb      	strb	r3, [r7, #7]
	uint8_t play_icon_data[8] = {0x5A, 0XA5, 0X05, 0X82, 0X10, 0X35, 0X00, 0X00};
 8003026:	4a0a      	ldr	r2, [pc, #40]	@ (8003050 <play_icon_change+0x34>)
 8003028:	f107 0308 	add.w	r3, r7, #8
 800302c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003030:	e883 0003 	stmia.w	r3, {r0, r1}
	play_icon_data[7] = play_icon_add;
 8003034:	79fb      	ldrb	r3, [r7, #7]
 8003036:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, play_icon_data, 8, 1);
 8003038:	f107 0108 	add.w	r1, r7, #8
 800303c:	2301      	movs	r3, #1
 800303e:	2208      	movs	r2, #8
 8003040:	4804      	ldr	r0, [pc, #16]	@ (8003054 <play_icon_change+0x38>)
 8003042:	f00b fe67 	bl	800ed14 <HAL_UART_Transmit>
}
 8003046:	bf00      	nop
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	08014168 	.word	0x08014168
 8003054:	20000fc0 	.word	0x20000fc0

08003058 <user_flowe_cal>:
//	double INStime = Ti * 1000;
//	double user_flow;
//	user_flow = (((int) vt_temp_value / INStime) / 2) * 100;
//	return (user_flow - 3) + 100;
//}
double user_flowe_cal(void) {
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
	double INStime = Ti * 1000;
 800305e:	4b25      	ldr	r3, [pc, #148]	@ (80030f4 <user_flowe_cal+0x9c>)
 8003060:	edd3 7a00 	vldr	s15, [r3]
 8003064:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80030f8 <user_flowe_cal+0xa0>
 8003068:	ee67 7a87 	vmul.f32	s15, s15, s14
 800306c:	ee17 0a90 	vmov	r0, s15
 8003070:	f7fd fa62 	bl	8000538 <__aeabi_f2d>
 8003074:	4602      	mov	r2, r0
 8003076:	460b      	mov	r3, r1
 8003078:	e9c7 2302 	strd	r2, r3, [r7, #8]
	double user_flow;
	user_flow = (((int) vt_temp_value / INStime) / 2) * 100;
 800307c:	4b1f      	ldr	r3, [pc, #124]	@ (80030fc <user_flowe_cal+0xa4>)
 800307e:	881b      	ldrh	r3, [r3, #0]
 8003080:	4618      	mov	r0, r3
 8003082:	f7fd fa47 	bl	8000514 <__aeabi_i2d>
 8003086:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800308a:	f7fd fbd7 	bl	800083c <__aeabi_ddiv>
 800308e:	4602      	mov	r2, r0
 8003090:	460b      	mov	r3, r1
 8003092:	4610      	mov	r0, r2
 8003094:	4619      	mov	r1, r3
 8003096:	f04f 0200 	mov.w	r2, #0
 800309a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800309e:	f7fd fbcd 	bl	800083c <__aeabi_ddiv>
 80030a2:	4602      	mov	r2, r0
 80030a4:	460b      	mov	r3, r1
 80030a6:	4610      	mov	r0, r2
 80030a8:	4619      	mov	r1, r3
 80030aa:	f04f 0200 	mov.w	r2, #0
 80030ae:	4b14      	ldr	r3, [pc, #80]	@ (8003100 <user_flowe_cal+0xa8>)
 80030b0:	f7fd fa9a 	bl	80005e8 <__aeabi_dmul>
 80030b4:	4602      	mov	r2, r0
 80030b6:	460b      	mov	r3, r1
 80030b8:	e9c7 2300 	strd	r2, r3, [r7]
	return (user_flow + 1) + 100;
 80030bc:	f04f 0200 	mov.w	r2, #0
 80030c0:	4b10      	ldr	r3, [pc, #64]	@ (8003104 <user_flowe_cal+0xac>)
 80030c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80030c6:	f7fd f8d9 	bl	800027c <__adddf3>
 80030ca:	4602      	mov	r2, r0
 80030cc:	460b      	mov	r3, r1
 80030ce:	4610      	mov	r0, r2
 80030d0:	4619      	mov	r1, r3
 80030d2:	f04f 0200 	mov.w	r2, #0
 80030d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003100 <user_flowe_cal+0xa8>)
 80030d8:	f7fd f8d0 	bl	800027c <__adddf3>
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	ec43 2b17 	vmov	d7, r2, r3
}
 80030e4:	eeb0 0a47 	vmov.f32	s0, s14
 80030e8:	eef0 0a67 	vmov.f32	s1, s15
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	200011e0 	.word	0x200011e0
 80030f8:	447a0000 	.word	0x447a0000
 80030fc:	20000034 	.word	0x20000034
 8003100:	40590000 	.word	0x40590000
 8003104:	3ff00000 	.word	0x3ff00000

08003108 <vt_alarm>:
	INStime = (((int) vt_temp_value / Ti));
	user_flow = (INStime * 60) / 1000;
	return (user_flow) + 100;
}
//left hand values from display
void vt_alarm(uint16_t value) {
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	4603      	mov	r3, r0
 8003110:	80fb      	strh	r3, [r7, #6]
	uint8_t send_intiger_val[8] = { 0x5A, 0xA5, 0x05, 0x82, 0x10, 0xD7, 0x00,
 8003112:	4a10      	ldr	r2, [pc, #64]	@ (8003154 <vt_alarm+0x4c>)
 8003114:	f107 030c 	add.w	r3, r7, #12
 8003118:	e892 0003 	ldmia.w	r2, {r0, r1}
 800311c:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	uint8_t msb = 0x00;
 8003120:	2300      	movs	r3, #0
 8003122:	75fb      	strb	r3, [r7, #23]
	uint8_t lsb = 0x00;
 8003124:	2300      	movs	r3, #0
 8003126:	75bb      	strb	r3, [r7, #22]
	lsb = (uint16_t)value;
 8003128:	88fb      	ldrh	r3, [r7, #6]
 800312a:	75bb      	strb	r3, [r7, #22]
	msb = (uint16_t)value >> 8;
 800312c:	88fb      	ldrh	r3, [r7, #6]
 800312e:	0a1b      	lsrs	r3, r3, #8
 8003130:	b29b      	uxth	r3, r3
 8003132:	75fb      	strb	r3, [r7, #23]
	send_intiger_val[6] = msb;
 8003134:	7dfb      	ldrb	r3, [r7, #23]
 8003136:	74bb      	strb	r3, [r7, #18]
	send_intiger_val[7] = lsb;
 8003138:	7dbb      	ldrb	r3, [r7, #22]
 800313a:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart1, send_intiger_val, sizeof(send_intiger_val),
 800313c:	f107 010c 	add.w	r1, r7, #12
 8003140:	2301      	movs	r3, #1
 8003142:	2208      	movs	r2, #8
 8003144:	4804      	ldr	r0, [pc, #16]	@ (8003158 <vt_alarm+0x50>)
 8003146:	f00b fde5 	bl	800ed14 <HAL_UART_Transmit>
			1);
}
 800314a:	bf00      	nop
 800314c:	3718      	adds	r7, #24
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	08014170 	.word	0x08014170
 8003158:	20000fc0 	.word	0x20000fc0

0800315c <mv_alarm>:
void mv_alarm(void) {
 800315c:	b580      	push	{r7, lr}
 800315e:	b088      	sub	sp, #32
 8003160:	af00      	add	r7, sp, #0
	uint8_t send_intiger_val[8] = { 0x5A, 0xA5, 0x05, 0x82, 0x10, 0x65, 0x00,
 8003162:	4a32      	ldr	r2, [pc, #200]	@ (800322c <mv_alarm+0xd0>)
 8003164:	f107 0310 	add.w	r3, r7, #16
 8003168:	e892 0003 	ldmia.w	r2, {r0, r1}
 800316c:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	uint8_t msb = 0x00;
 8003170:	2300      	movs	r3, #0
 8003172:	77fb      	strb	r3, [r7, #31]
	uint8_t lsb = 0x00;
 8003174:	2300      	movs	r3, #0
 8003176:	77bb      	strb	r3, [r7, #30]
	int value = 0.00;
 8003178:	2300      	movs	r3, #0
 800317a:	61bb      	str	r3, [r7, #24]
	MV_value_var = (sensor_flow_for_vt * RR_temp_value) / 1000;
 800317c:	4b2c      	ldr	r3, [pc, #176]	@ (8003230 <mv_alarm+0xd4>)
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	ee07 3a90 	vmov	s15, r3
 8003184:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003188:	4b2a      	ldr	r3, [pc, #168]	@ (8003234 <mv_alarm+0xd8>)
 800318a:	edd3 7a00 	vldr	s15, [r3]
 800318e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003192:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8003238 <mv_alarm+0xdc>
 8003196:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800319a:	4b28      	ldr	r3, [pc, #160]	@ (800323c <mv_alarm+0xe0>)
 800319c:	edc3 7a00 	vstr	s15, [r3]
	value = MV_value_var * 100;
 80031a0:	4b26      	ldr	r3, [pc, #152]	@ (800323c <mv_alarm+0xe0>)
 80031a2:	edd3 7a00 	vldr	s15, [r3]
 80031a6:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8003240 <mv_alarm+0xe4>
 80031aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031b2:	ee17 3a90 	vmov	r3, s15
 80031b6:	61bb      	str	r3, [r7, #24]
	char temp_float_data[4] = { 0, 0, 0, 0 };
 80031b8:	2300      	movs	r3, #0
 80031ba:	60fb      	str	r3, [r7, #12]
	char float_hexStr[5];

	sprintf(temp_float_data, "%X", value);
 80031bc:	f107 030c 	add.w	r3, r7, #12
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	4920      	ldr	r1, [pc, #128]	@ (8003244 <mv_alarm+0xe8>)
 80031c4:	4618      	mov	r0, r3
 80031c6:	f010 f9b1 	bl	801352c <siprintf>
	sprintf("hex %s", temp_float_data);
 80031ca:	f107 030c 	add.w	r3, r7, #12
 80031ce:	4619      	mov	r1, r3
 80031d0:	481d      	ldr	r0, [pc, #116]	@ (8003248 <mv_alarm+0xec>)
 80031d2:	f010 f9ab 	bl	801352c <siprintf>
	float_hexStr[0] = temp_float_data[0];
 80031d6:	7b3b      	ldrb	r3, [r7, #12]
 80031d8:	713b      	strb	r3, [r7, #4]
	float_hexStr[1] = temp_float_data[1];
 80031da:	7b7b      	ldrb	r3, [r7, #13]
 80031dc:	717b      	strb	r3, [r7, #5]
	float_hexStr[2] = temp_float_data[2];
 80031de:	7bbb      	ldrb	r3, [r7, #14]
 80031e0:	71bb      	strb	r3, [r7, #6]
	float_hexStr[3] = temp_float_data[3];
 80031e2:	7bfb      	ldrb	r3, [r7, #15]
 80031e4:	71fb      	strb	r3, [r7, #7]
	float_hexStr[4] = '\0';
 80031e6:	2300      	movs	r3, #0
 80031e8:	723b      	strb	r3, [r7, #8]
	result4 = (uint16_t) strtol(float_hexStr, NULL, 16);
 80031ea:	1d3b      	adds	r3, r7, #4
 80031ec:	2210      	movs	r2, #16
 80031ee:	2100      	movs	r1, #0
 80031f0:	4618      	mov	r0, r3
 80031f2:	f010 f991 	bl	8013518 <strtol>
 80031f6:	4603      	mov	r3, r0
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	4b14      	ldr	r3, [pc, #80]	@ (800324c <mv_alarm+0xf0>)
 80031fc:	801a      	strh	r2, [r3, #0]
	lsb = result4;
 80031fe:	4b13      	ldr	r3, [pc, #76]	@ (800324c <mv_alarm+0xf0>)
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	77bb      	strb	r3, [r7, #30]
	msb = result4 >> 8;
 8003204:	4b11      	ldr	r3, [pc, #68]	@ (800324c <mv_alarm+0xf0>)
 8003206:	881b      	ldrh	r3, [r3, #0]
 8003208:	0a1b      	lsrs	r3, r3, #8
 800320a:	b29b      	uxth	r3, r3
 800320c:	77fb      	strb	r3, [r7, #31]
	send_intiger_val[6] = msb;
 800320e:	7ffb      	ldrb	r3, [r7, #31]
 8003210:	75bb      	strb	r3, [r7, #22]
	send_intiger_val[7] = lsb;
 8003212:	7fbb      	ldrb	r3, [r7, #30]
 8003214:	75fb      	strb	r3, [r7, #23]
	HAL_UART_Transmit(&huart1, send_intiger_val, sizeof(send_intiger_val),
 8003216:	f107 0110 	add.w	r1, r7, #16
 800321a:	2301      	movs	r3, #1
 800321c:	2208      	movs	r2, #8
 800321e:	480c      	ldr	r0, [pc, #48]	@ (8003250 <mv_alarm+0xf4>)
 8003220:	f00b fd78 	bl	800ed14 <HAL_UART_Transmit>
			1);
}
 8003224:	bf00      	nop
 8003226:	3720      	adds	r7, #32
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	08014178 	.word	0x08014178
 8003230:	2000003c 	.word	0x2000003c
 8003234:	20001200 	.word	0x20001200
 8003238:	447a0000 	.word	0x447a0000
 800323c:	200015e0 	.word	0x200015e0
 8003240:	42c80000 	.word	0x42c80000
 8003244:	08014124 	.word	0x08014124
 8003248:	08014128 	.word	0x08014128
 800324c:	200016e2 	.word	0x200016e2
 8003250:	20000fc0 	.word	0x20000fc0

08003254 <rr_alarm>:

void rr_alarm(uint8_t value) {
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	4603      	mov	r3, r0
 800325c:	71fb      	strb	r3, [r7, #7]
	uint8_t send_intiger_val[8] = { 0x5A, 0xA5, 0x05, 0x82, 0x10, 0x66, 0x00,
 800325e:	4a0a      	ldr	r2, [pc, #40]	@ (8003288 <rr_alarm+0x34>)
 8003260:	f107 0308 	add.w	r3, r7, #8
 8003264:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003268:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	send_intiger_val[7] = value;
 800326c:	79fb      	ldrb	r3, [r7, #7]
 800326e:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, send_intiger_val, sizeof(send_intiger_val),
 8003270:	f107 0108 	add.w	r1, r7, #8
 8003274:	2301      	movs	r3, #1
 8003276:	2208      	movs	r2, #8
 8003278:	4804      	ldr	r0, [pc, #16]	@ (800328c <rr_alarm+0x38>)
 800327a:	f00b fd4b 	bl	800ed14 <HAL_UART_Transmit>
			1);
}
 800327e:	bf00      	nop
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	08014180 	.word	0x08014180
 800328c:	20000fc0 	.word	0x20000fc0

08003290 <P_Peak_pressure>:

void P_Peak_pressure(uint8_t value) {
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	4603      	mov	r3, r0
 8003298:	71fb      	strb	r3, [r7, #7]
	uint8_t send_intiger_val[8] = { 0x5A, 0xA5, 0x05, 0x82, 0x10, 0xD8, 0x00,
 800329a:	4a0a      	ldr	r2, [pc, #40]	@ (80032c4 <P_Peak_pressure+0x34>)
 800329c:	f107 0308 	add.w	r3, r7, #8
 80032a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032a4:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	send_intiger_val[7] = value;
 80032a8:	79fb      	ldrb	r3, [r7, #7]
 80032aa:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, send_intiger_val, sizeof(send_intiger_val),
 80032ac:	f107 0108 	add.w	r1, r7, #8
 80032b0:	2301      	movs	r3, #1
 80032b2:	2208      	movs	r2, #8
 80032b4:	4804      	ldr	r0, [pc, #16]	@ (80032c8 <P_Peak_pressure+0x38>)
 80032b6:	f00b fd2d 	bl	800ed14 <HAL_UART_Transmit>
			1);
}
 80032ba:	bf00      	nop
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	08014188 	.word	0x08014188
 80032c8:	20000fc0 	.word	0x20000fc0

080032cc <Peep_live_pressure>:
void Peep_live_pressure(uint8_t value) {
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	4603      	mov	r3, r0
 80032d4:	71fb      	strb	r3, [r7, #7]
	uint8_t send_intiger_val[8] = { 0x5A, 0xA5, 0x05, 0x82, 0x10, 0x67, 0x00,
 80032d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003300 <Peep_live_pressure+0x34>)
 80032d8:	f107 0308 	add.w	r3, r7, #8
 80032dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032e0:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	send_intiger_val[7] = value;
 80032e4:	79fb      	ldrb	r3, [r7, #7]
 80032e6:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, send_intiger_val, sizeof(send_intiger_val),
 80032e8:	f107 0108 	add.w	r1, r7, #8
 80032ec:	2301      	movs	r3, #1
 80032ee:	2208      	movs	r2, #8
 80032f0:	4804      	ldr	r0, [pc, #16]	@ (8003304 <Peep_live_pressure+0x38>)
 80032f2:	f00b fd0f 	bl	800ed14 <HAL_UART_Transmit>
			1);
}
 80032f6:	bf00      	nop
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	08014190 	.word	0x08014190
 8003304:	20000fc0 	.word	0x20000fc0

08003308 <Compliance>:
void Compliance(uint8_t value){
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	4603      	mov	r3, r0
 8003310:	71fb      	strb	r3, [r7, #7]
	uint8_t send_intiger_val[8] = {0x5A, 0xA5, 0x05, 0x82, 0x10, 0x9A, 0x00,
 8003312:	4a0a      	ldr	r2, [pc, #40]	@ (800333c <Compliance+0x34>)
 8003314:	f107 0308 	add.w	r3, r7, #8
 8003318:	e892 0003 	ldmia.w	r2, {r0, r1}
 800331c:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00};
	send_intiger_val[7] = value;
 8003320:	79fb      	ldrb	r3, [r7, #7]
 8003322:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, send_intiger_val, sizeof(send_intiger_val),
 8003324:	f107 0108 	add.w	r1, r7, #8
 8003328:	2301      	movs	r3, #1
 800332a:	2208      	movs	r2, #8
 800332c:	4804      	ldr	r0, [pc, #16]	@ (8003340 <Compliance+0x38>)
 800332e:	f00b fcf1 	bl	800ed14 <HAL_UART_Transmit>
			1);
}
 8003332:	bf00      	nop
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	08014198 	.word	0x08014198
 8003340:	20000fc0 	.word	0x20000fc0

08003344 <BUZZ_PWM>:
void BUZZ_PWM(void){
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
	//	__HAL_TIM_SET_AUTORELOAD(&htim4, x*24);
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 500);
 8003348:	4b09      	ldr	r3, [pc, #36]	@ (8003370 <BUZZ_PWM+0x2c>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003350:	635a      	str	r2, [r3, #52]	@ 0x34
	osDelay(500);
 8003352:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003356:	f00d f830 	bl	80103ba <osDelay>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 800335a:	4b05      	ldr	r3, [pc, #20]	@ (8003370 <BUZZ_PWM+0x2c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2200      	movs	r2, #0
 8003360:	635a      	str	r2, [r3, #52]	@ 0x34
	osDelay(500);
 8003362:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003366:	f00d f828 	bl	80103ba <osDelay>
}
 800336a:	bf00      	nop
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	20000f78 	.word	0x20000f78

08003374 <VCV_MODE>:

void VCV_MODE(void) {
 8003374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003376:	af00      	add	r7, sp, #0

	VT_UPDATE_FLAG = 0;
 8003378:	4b58      	ldr	r3, [pc, #352]	@ (80034dc <VCV_MODE+0x168>)
 800337a:	2200      	movs	r2, #0
 800337c:	701a      	strb	r2, [r3, #0]
	PID_CALIBRATE_FLAG = 1;
 800337e:	4b58      	ldr	r3, [pc, #352]	@ (80034e0 <VCV_MODE+0x16c>)
 8003380:	2201      	movs	r2, #1
 8003382:	701a      	strb	r2, [r3, #0]

	if (((user_flowe - PID_FLOW_VAR) <= 1) && ((user_flowe - PID_FLOW_VAR) >= 0)) {
 8003384:	4b57      	ldr	r3, [pc, #348]	@ (80034e4 <VCV_MODE+0x170>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a57      	ldr	r2, [pc, #348]	@ (80034e8 <VCV_MODE+0x174>)
 800338a:	7812      	ldrb	r2, [r2, #0]
 800338c:	1a9b      	subs	r3, r3, r2
 800338e:	2b01      	cmp	r3, #1
 8003390:	dc54      	bgt.n	800343c <VCV_MODE+0xc8>
 8003392:	4b54      	ldr	r3, [pc, #336]	@ (80034e4 <VCV_MODE+0x170>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a54      	ldr	r2, [pc, #336]	@ (80034e8 <VCV_MODE+0x174>)
 8003398:	7812      	ldrb	r2, [r2, #0]
 800339a:	1a9b      	subs	r3, r3, r2
 800339c:	2b00      	cmp	r3, #0
 800339e:	db4d      	blt.n	800343c <VCV_MODE+0xc8>
		PID_CALIBRATE_FLAG = 0;
 80033a0:	4b4f      	ldr	r3, [pc, #316]	@ (80034e0 <VCV_MODE+0x16c>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	701a      	strb	r2, [r3, #0]
		if(user_flowe < PID_FLOW_VAR){
 80033a6:	4b50      	ldr	r3, [pc, #320]	@ (80034e8 <VCV_MODE+0x174>)
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	461a      	mov	r2, r3
 80033ac:	4b4d      	ldr	r3, [pc, #308]	@ (80034e4 <VCV_MODE+0x170>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	dd1e      	ble.n	80033f2 <VCV_MODE+0x7e>
			if (user_flowe != PID_FLOW_VAR) {
 80033b4:	4b4c      	ldr	r3, [pc, #304]	@ (80034e8 <VCV_MODE+0x174>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	461a      	mov	r2, r3
 80033ba:	4b4a      	ldr	r3, [pc, #296]	@ (80034e4 <VCV_MODE+0x170>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d03c      	beq.n	800343c <VCV_MODE+0xc8>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PIDOut--);
 80033c2:	4b4a      	ldr	r3, [pc, #296]	@ (80034ec <VCV_MODE+0x178>)
 80033c4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80033c8:	f04f 0200 	mov.w	r2, #0
 80033cc:	4b48      	ldr	r3, [pc, #288]	@ (80034f0 <VCV_MODE+0x17c>)
 80033ce:	4620      	mov	r0, r4
 80033d0:	4629      	mov	r1, r5
 80033d2:	f7fc ff51 	bl	8000278 <__aeabi_dsub>
 80033d6:	4602      	mov	r2, r0
 80033d8:	460b      	mov	r3, r1
 80033da:	4944      	ldr	r1, [pc, #272]	@ (80034ec <VCV_MODE+0x178>)
 80033dc:	e9c1 2300 	strd	r2, r3, [r1]
 80033e0:	4b44      	ldr	r3, [pc, #272]	@ (80034f4 <VCV_MODE+0x180>)
 80033e2:	681e      	ldr	r6, [r3, #0]
 80033e4:	4620      	mov	r0, r4
 80033e6:	4629      	mov	r1, r5
 80033e8:	f7fd fbd6 	bl	8000b98 <__aeabi_d2uiz>
 80033ec:	4603      	mov	r3, r0
 80033ee:	6373      	str	r3, [r6, #52]	@ 0x34
 80033f0:	e024      	b.n	800343c <VCV_MODE+0xc8>
				//				break;
			}
		}else if(user_flowe > PID_FLOW_VAR){
 80033f2:	4b3d      	ldr	r3, [pc, #244]	@ (80034e8 <VCV_MODE+0x174>)
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	461a      	mov	r2, r3
 80033f8:	4b3a      	ldr	r3, [pc, #232]	@ (80034e4 <VCV_MODE+0x170>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	da1d      	bge.n	800343c <VCV_MODE+0xc8>
			if (user_flowe != PID_FLOW_VAR) {
 8003400:	4b39      	ldr	r3, [pc, #228]	@ (80034e8 <VCV_MODE+0x174>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	461a      	mov	r2, r3
 8003406:	4b37      	ldr	r3, [pc, #220]	@ (80034e4 <VCV_MODE+0x170>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	429a      	cmp	r2, r3
 800340c:	d016      	beq.n	800343c <VCV_MODE+0xc8>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PIDOut++);
 800340e:	4b37      	ldr	r3, [pc, #220]	@ (80034ec <VCV_MODE+0x178>)
 8003410:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003414:	f04f 0200 	mov.w	r2, #0
 8003418:	4b35      	ldr	r3, [pc, #212]	@ (80034f0 <VCV_MODE+0x17c>)
 800341a:	4620      	mov	r0, r4
 800341c:	4629      	mov	r1, r5
 800341e:	f7fc ff2d 	bl	800027c <__adddf3>
 8003422:	4602      	mov	r2, r0
 8003424:	460b      	mov	r3, r1
 8003426:	4931      	ldr	r1, [pc, #196]	@ (80034ec <VCV_MODE+0x178>)
 8003428:	e9c1 2300 	strd	r2, r3, [r1]
 800342c:	4b31      	ldr	r3, [pc, #196]	@ (80034f4 <VCV_MODE+0x180>)
 800342e:	681e      	ldr	r6, [r3, #0]
 8003430:	4620      	mov	r0, r4
 8003432:	4629      	mov	r1, r5
 8003434:	f7fd fbb0 	bl	8000b98 <__aeabi_d2uiz>
 8003438:	4603      	mov	r3, r0
 800343a:	6373      	str	r3, [r6, #52]	@ 0x34
				//				break;
			}
		}
	}
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 800343c:	2201      	movs	r2, #1
 800343e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003442:	482d      	ldr	r0, [pc, #180]	@ (80034f8 <VCV_MODE+0x184>)
 8003444:	f008 fc26 	bl	800bc94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8003448:	2201      	movs	r2, #1
 800344a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800344e:	482a      	ldr	r0, [pc, #168]	@ (80034f8 <VCV_MODE+0x184>)
 8003450:	f008 fc20 	bl	800bc94 <HAL_GPIO_WritePin>
	Data_Flag_Flow++;
 8003454:	4b29      	ldr	r3, [pc, #164]	@ (80034fc <VCV_MODE+0x188>)
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	3301      	adds	r3, #1
 800345a:	b2da      	uxtb	r2, r3
 800345c:	4b27      	ldr	r3, [pc, #156]	@ (80034fc <VCV_MODE+0x188>)
 800345e:	701a      	strb	r2, [r3, #0]
	Data_Flag_Pressure++;
 8003460:	4b27      	ldr	r3, [pc, #156]	@ (8003500 <VCV_MODE+0x18c>)
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	3301      	adds	r3, #1
 8003466:	b2da      	uxtb	r2, r3
 8003468:	4b25      	ldr	r3, [pc, #148]	@ (8003500 <VCV_MODE+0x18c>)
 800346a:	701a      	strb	r2, [r3, #0]
	osDelay(numatic_insp_ctr);
 800346c:	4b25      	ldr	r3, [pc, #148]	@ (8003504 <VCV_MODE+0x190>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4618      	mov	r0, r3
 8003472:	f00c ffa2 	bl	80103ba <osDelay>

	PID_CALIBRATE_FLAG = 0;
 8003476:	4b1a      	ldr	r3, [pc, #104]	@ (80034e0 <VCV_MODE+0x16c>)
 8003478:	2200      	movs	r2, #0
 800347a:	701a      	strb	r2, [r3, #0]
	//	osTimerStart(Button_clearHandle, (numatic_exp_ctr - 2000));
	PID_FLOW_VAR = result;
 800347c:	4b22      	ldr	r3, [pc, #136]	@ (8003508 <VCV_MODE+0x194>)
 800347e:	781a      	ldrb	r2, [r3, #0]
 8003480:	4b19      	ldr	r3, [pc, #100]	@ (80034e8 <VCV_MODE+0x174>)
 8003482:	701a      	strb	r2, [r3, #0]
	previous_pressure_first = result2;
 8003484:	4b21      	ldr	r3, [pc, #132]	@ (800350c <VCV_MODE+0x198>)
 8003486:	781a      	ldrb	r2, [r3, #0]
 8003488:	4b21      	ldr	r3, [pc, #132]	@ (8003510 <VCV_MODE+0x19c>)
 800348a:	701a      	strb	r2, [r3, #0]
	VT_UPDATE_FLAG = 1;
 800348c:	4b13      	ldr	r3, [pc, #76]	@ (80034dc <VCV_MODE+0x168>)
 800348e:	2201      	movs	r2, #1
 8003490:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8003492:	2200      	movs	r2, #0
 8003494:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003498:	4817      	ldr	r0, [pc, #92]	@ (80034f8 <VCV_MODE+0x184>)
 800349a:	f008 fbfb 	bl	800bc94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 800349e:	2200      	movs	r2, #0
 80034a0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80034a4:	4814      	ldr	r0, [pc, #80]	@ (80034f8 <VCV_MODE+0x184>)
 80034a6:	f008 fbf5 	bl	800bc94 <HAL_GPIO_WritePin>
	hI = 0;
 80034aa:	4b1a      	ldr	r3, [pc, #104]	@ (8003514 <VCV_MODE+0x1a0>)
 80034ac:	f04f 0200 	mov.w	r2, #0
 80034b0:	601a      	str	r2, [r3, #0]
	P_HI = 0;
 80034b2:	4b19      	ldr	r3, [pc, #100]	@ (8003518 <VCV_MODE+0x1a4>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	701a      	strb	r2, [r3, #0]
	exp_cycle_counter++;
 80034b8:	4b18      	ldr	r3, [pc, #96]	@ (800351c <VCV_MODE+0x1a8>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	3301      	adds	r3, #1
 80034be:	4a17      	ldr	r2, [pc, #92]	@ (800351c <VCV_MODE+0x1a8>)
 80034c0:	6013      	str	r3, [r2, #0]
	osDelay(numatic_exp_ctr);
 80034c2:	4b17      	ldr	r3, [pc, #92]	@ (8003520 <VCV_MODE+0x1ac>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f00c ff77 	bl	80103ba <osDelay>
	Peep_live_pressure(result2);
 80034cc:	4b0f      	ldr	r3, [pc, #60]	@ (800350c <VCV_MODE+0x198>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7ff fefb 	bl	80032cc <Peep_live_pressure>
}
 80034d6:	bf00      	nop
 80034d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034da:	bf00      	nop
 80034dc:	200011fc 	.word	0x200011fc
 80034e0:	200011fe 	.word	0x200011fe
 80034e4:	2000120c 	.word	0x2000120c
 80034e8:	20001208 	.word	0x20001208
 80034ec:	20001218 	.word	0x20001218
 80034f0:	3ff00000 	.word	0x3ff00000
 80034f4:	20000f30 	.word	0x20000f30
 80034f8:	40021000 	.word	0x40021000
 80034fc:	200015bf 	.word	0x200015bf
 8003500:	200015c0 	.word	0x200015c0
 8003504:	2000157c 	.word	0x2000157c
 8003508:	200016e0 	.word	0x200016e0
 800350c:	200016e1 	.word	0x200016e1
 8003510:	20001774 	.word	0x20001774
 8003514:	20000018 	.word	0x20000018
 8003518:	2000156c 	.word	0x2000156c
 800351c:	20001578 	.word	0x20001578
 8003520:	20001580 	.word	0x20001580

08003524 <PCV_MODE>:
void PCV_MODE(void) {
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0

	PLR_temp_value = PLR_value;
 8003528:	4b2f      	ldr	r3, [pc, #188]	@ (80035e8 <PCV_MODE+0xc4>)
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	461a      	mov	r2, r3
 800352e:	4b2f      	ldr	r3, [pc, #188]	@ (80035ec <PCV_MODE+0xc8>)
 8003530:	601a      	str	r2, [r3, #0]
	VT_UPDATE_FLAG = 0;
 8003532:	4b2f      	ldr	r3, [pc, #188]	@ (80035f0 <PCV_MODE+0xcc>)
 8003534:	2200      	movs	r2, #0
 8003536:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 8003538:	2201      	movs	r2, #1
 800353a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800353e:	482d      	ldr	r0, [pc, #180]	@ (80035f4 <PCV_MODE+0xd0>)
 8003540:	f008 fba8 	bl	800bc94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8003544:	2201      	movs	r2, #1
 8003546:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800354a:	482a      	ldr	r0, [pc, #168]	@ (80035f4 <PCV_MODE+0xd0>)
 800354c:	f008 fba2 	bl	800bc94 <HAL_GPIO_WritePin>
	osDelay(numatic_insp_ctr - insPause_vale);
 8003550:	4b29      	ldr	r3, [pc, #164]	@ (80035f8 <PCV_MODE+0xd4>)
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	4b29      	ldr	r3, [pc, #164]	@ (80035fc <PCV_MODE+0xd8>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	4618      	mov	r0, r3
 800355c:	f00c ff2d 	bl	80103ba <osDelay>
	PID_CALIBRATE_FLAG = 1;
 8003560:	4b27      	ldr	r3, [pc, #156]	@ (8003600 <PCV_MODE+0xdc>)
 8003562:	2201      	movs	r2, #1
 8003564:	701a      	strb	r2, [r3, #0]
	PID_FLOW_VAR = result;
 8003566:	4b27      	ldr	r3, [pc, #156]	@ (8003604 <PCV_MODE+0xe0>)
 8003568:	781a      	ldrb	r2, [r3, #0]
 800356a:	4b27      	ldr	r3, [pc, #156]	@ (8003608 <PCV_MODE+0xe4>)
 800356c:	701a      	strb	r2, [r3, #0]
	if (PU_temp_value > 0) {
 800356e:	4b27      	ldr	r3, [pc, #156]	@ (800360c <PCV_MODE+0xe8>)
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00a      	beq.n	800358c <PCV_MODE+0x68>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8003576:	2200      	movs	r2, #0
 8003578:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800357c:	481d      	ldr	r0, [pc, #116]	@ (80035f4 <PCV_MODE+0xd0>)
 800357e:	f008 fb89 	bl	800bc94 <HAL_GPIO_WritePin>
		osDelay(insPause_vale);
 8003582:	4b1e      	ldr	r3, [pc, #120]	@ (80035fc <PCV_MODE+0xd8>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4618      	mov	r0, r3
 8003588:	f00c ff17 	bl	80103ba <osDelay>
	}
	previous_pressure_first = result2;
 800358c:	4b20      	ldr	r3, [pc, #128]	@ (8003610 <PCV_MODE+0xec>)
 800358e:	781a      	ldrb	r2, [r3, #0]
 8003590:	4b20      	ldr	r3, [pc, #128]	@ (8003614 <PCV_MODE+0xf0>)
 8003592:	701a      	strb	r2, [r3, #0]
	VT_UPDATE_FLAG = 1;
 8003594:	4b16      	ldr	r3, [pc, #88]	@ (80035f0 <PCV_MODE+0xcc>)
 8003596:	2201      	movs	r2, #1
 8003598:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 800359a:	2200      	movs	r2, #0
 800359c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80035a0:	4814      	ldr	r0, [pc, #80]	@ (80035f4 <PCV_MODE+0xd0>)
 80035a2:	f008 fb77 	bl	800bc94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 80035a6:	2200      	movs	r2, #0
 80035a8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80035ac:	4811      	ldr	r0, [pc, #68]	@ (80035f4 <PCV_MODE+0xd0>)
 80035ae:	f008 fb71 	bl	800bc94 <HAL_GPIO_WritePin>
	Peep_control_flag = 1;
 80035b2:	4b19      	ldr	r3, [pc, #100]	@ (8003618 <PCV_MODE+0xf4>)
 80035b4:	2201      	movs	r2, #1
 80035b6:	701a      	strb	r2, [r3, #0]
	exp_cycle_counter++;
 80035b8:	4b18      	ldr	r3, [pc, #96]	@ (800361c <PCV_MODE+0xf8>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	3301      	adds	r3, #1
 80035be:	4a17      	ldr	r2, [pc, #92]	@ (800361c <PCV_MODE+0xf8>)
 80035c0:	6013      	str	r3, [r2, #0]
	osDelay(numatic_exp_ctr);
 80035c2:	4b17      	ldr	r3, [pc, #92]	@ (8003620 <PCV_MODE+0xfc>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f00c fef7 	bl	80103ba <osDelay>
	Peep_control_flag = 0;
 80035cc:	4b12      	ldr	r3, [pc, #72]	@ (8003618 <PCV_MODE+0xf4>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	701a      	strb	r2, [r3, #0]
	Peep_live_pressure(result2);
 80035d2:	4b0f      	ldr	r3, [pc, #60]	@ (8003610 <PCV_MODE+0xec>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7ff fe78 	bl	80032cc <Peep_live_pressure>
	PID_CALIBRATE_FLAG = 0;
 80035dc:	4b08      	ldr	r3, [pc, #32]	@ (8003600 <PCV_MODE+0xdc>)
 80035de:	2200      	movs	r2, #0
 80035e0:	701a      	strb	r2, [r3, #0]
}
 80035e2:	bf00      	nop
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	20000026 	.word	0x20000026
 80035ec:	20000038 	.word	0x20000038
 80035f0:	200011fc 	.word	0x200011fc
 80035f4:	40021000 	.word	0x40021000
 80035f8:	2000157c 	.word	0x2000157c
 80035fc:	20000150 	.word	0x20000150
 8003600:	200011fe 	.word	0x200011fe
 8003604:	200016e0 	.word	0x200016e0
 8003608:	20001208 	.word	0x20001208
 800360c:	200015b2 	.word	0x200015b2
 8003610:	200016e1 	.word	0x200016e1
 8003614:	20001774 	.word	0x20001774
 8003618:	20001601 	.word	0x20001601
 800361c:	20001578 	.word	0x20001578
 8003620:	20001580 	.word	0x20001580

08003624 <Mandatory_MODE>:
int Mandatory_MODE(void) {
 8003624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0

	VT_UPDATE_FLAG = 0;
 800362a:	4b4f      	ldr	r3, [pc, #316]	@ (8003768 <Mandatory_MODE+0x144>)
 800362c:	2200      	movs	r2, #0
 800362e:	701a      	strb	r2, [r3, #0]
	PID_CALIBRATE_FLAG = 1;
 8003630:	4b4e      	ldr	r3, [pc, #312]	@ (800376c <Mandatory_MODE+0x148>)
 8003632:	2201      	movs	r2, #1
 8003634:	701a      	strb	r2, [r3, #0]
	Spontaneous_FLAG = 0;
 8003636:	4b4e      	ldr	r3, [pc, #312]	@ (8003770 <Mandatory_MODE+0x14c>)
 8003638:	2200      	movs	r2, #0
 800363a:	701a      	strb	r2, [r3, #0]

	if (((user_flowe - PID_FLOW_VAR) <= 1) && ((user_flowe - PID_FLOW_VAR) >= 0)) {
 800363c:	4b4d      	ldr	r3, [pc, #308]	@ (8003774 <Mandatory_MODE+0x150>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a4d      	ldr	r2, [pc, #308]	@ (8003778 <Mandatory_MODE+0x154>)
 8003642:	7812      	ldrb	r2, [r2, #0]
 8003644:	1a9b      	subs	r3, r3, r2
 8003646:	2b01      	cmp	r3, #1
 8003648:	dc54      	bgt.n	80036f4 <Mandatory_MODE+0xd0>
 800364a:	4b4a      	ldr	r3, [pc, #296]	@ (8003774 <Mandatory_MODE+0x150>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a4a      	ldr	r2, [pc, #296]	@ (8003778 <Mandatory_MODE+0x154>)
 8003650:	7812      	ldrb	r2, [r2, #0]
 8003652:	1a9b      	subs	r3, r3, r2
 8003654:	2b00      	cmp	r3, #0
 8003656:	db4d      	blt.n	80036f4 <Mandatory_MODE+0xd0>
		PID_CALIBRATE_FLAG = 0;
 8003658:	4b44      	ldr	r3, [pc, #272]	@ (800376c <Mandatory_MODE+0x148>)
 800365a:	2200      	movs	r2, #0
 800365c:	701a      	strb	r2, [r3, #0]
		if(user_flowe < PID_FLOW_VAR){
 800365e:	4b46      	ldr	r3, [pc, #280]	@ (8003778 <Mandatory_MODE+0x154>)
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	461a      	mov	r2, r3
 8003664:	4b43      	ldr	r3, [pc, #268]	@ (8003774 <Mandatory_MODE+0x150>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	429a      	cmp	r2, r3
 800366a:	dd1e      	ble.n	80036aa <Mandatory_MODE+0x86>
			if (user_flowe != PID_FLOW_VAR) {
 800366c:	4b42      	ldr	r3, [pc, #264]	@ (8003778 <Mandatory_MODE+0x154>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	461a      	mov	r2, r3
 8003672:	4b40      	ldr	r3, [pc, #256]	@ (8003774 <Mandatory_MODE+0x150>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	429a      	cmp	r2, r3
 8003678:	d03c      	beq.n	80036f4 <Mandatory_MODE+0xd0>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PIDOut--);
 800367a:	4b40      	ldr	r3, [pc, #256]	@ (800377c <Mandatory_MODE+0x158>)
 800367c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003680:	f04f 0200 	mov.w	r2, #0
 8003684:	4b3e      	ldr	r3, [pc, #248]	@ (8003780 <Mandatory_MODE+0x15c>)
 8003686:	4620      	mov	r0, r4
 8003688:	4629      	mov	r1, r5
 800368a:	f7fc fdf5 	bl	8000278 <__aeabi_dsub>
 800368e:	4602      	mov	r2, r0
 8003690:	460b      	mov	r3, r1
 8003692:	493a      	ldr	r1, [pc, #232]	@ (800377c <Mandatory_MODE+0x158>)
 8003694:	e9c1 2300 	strd	r2, r3, [r1]
 8003698:	4b3a      	ldr	r3, [pc, #232]	@ (8003784 <Mandatory_MODE+0x160>)
 800369a:	681e      	ldr	r6, [r3, #0]
 800369c:	4620      	mov	r0, r4
 800369e:	4629      	mov	r1, r5
 80036a0:	f7fd fa7a 	bl	8000b98 <__aeabi_d2uiz>
 80036a4:	4603      	mov	r3, r0
 80036a6:	6373      	str	r3, [r6, #52]	@ 0x34
 80036a8:	e024      	b.n	80036f4 <Mandatory_MODE+0xd0>
				//					break;
			}
		}else if(user_flowe > PID_FLOW_VAR){
 80036aa:	4b33      	ldr	r3, [pc, #204]	@ (8003778 <Mandatory_MODE+0x154>)
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	461a      	mov	r2, r3
 80036b0:	4b30      	ldr	r3, [pc, #192]	@ (8003774 <Mandatory_MODE+0x150>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	da1d      	bge.n	80036f4 <Mandatory_MODE+0xd0>
			if (user_flowe != PID_FLOW_VAR) {
 80036b8:	4b2f      	ldr	r3, [pc, #188]	@ (8003778 <Mandatory_MODE+0x154>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	461a      	mov	r2, r3
 80036be:	4b2d      	ldr	r3, [pc, #180]	@ (8003774 <Mandatory_MODE+0x150>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d016      	beq.n	80036f4 <Mandatory_MODE+0xd0>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PIDOut++);
 80036c6:	4b2d      	ldr	r3, [pc, #180]	@ (800377c <Mandatory_MODE+0x158>)
 80036c8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80036cc:	f04f 0200 	mov.w	r2, #0
 80036d0:	4b2b      	ldr	r3, [pc, #172]	@ (8003780 <Mandatory_MODE+0x15c>)
 80036d2:	4620      	mov	r0, r4
 80036d4:	4629      	mov	r1, r5
 80036d6:	f7fc fdd1 	bl	800027c <__adddf3>
 80036da:	4602      	mov	r2, r0
 80036dc:	460b      	mov	r3, r1
 80036de:	4927      	ldr	r1, [pc, #156]	@ (800377c <Mandatory_MODE+0x158>)
 80036e0:	e9c1 2300 	strd	r2, r3, [r1]
 80036e4:	4b27      	ldr	r3, [pc, #156]	@ (8003784 <Mandatory_MODE+0x160>)
 80036e6:	681e      	ldr	r6, [r3, #0]
 80036e8:	4620      	mov	r0, r4
 80036ea:	4629      	mov	r1, r5
 80036ec:	f7fd fa54 	bl	8000b98 <__aeabi_d2uiz>
 80036f0:	4603      	mov	r3, r0
 80036f2:	6373      	str	r3, [r6, #52]	@ 0x34
				//	break;
			}
		}
	}
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 80036f4:	2201      	movs	r2, #1
 80036f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80036fa:	4823      	ldr	r0, [pc, #140]	@ (8003788 <Mandatory_MODE+0x164>)
 80036fc:	f008 faca 	bl	800bc94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8003700:	2201      	movs	r2, #1
 8003702:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003706:	4820      	ldr	r0, [pc, #128]	@ (8003788 <Mandatory_MODE+0x164>)
 8003708:	f008 fac4 	bl	800bc94 <HAL_GPIO_WritePin>
	//	holi = 1;
	osDelay(numatic_insp_ctr);
 800370c:	4b1f      	ldr	r3, [pc, #124]	@ (800378c <Mandatory_MODE+0x168>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4618      	mov	r0, r3
 8003712:	f00c fe52 	bl	80103ba <osDelay>

	PID_CALIBRATE_FLAG = 0;
 8003716:	4b15      	ldr	r3, [pc, #84]	@ (800376c <Mandatory_MODE+0x148>)
 8003718:	2200      	movs	r2, #0
 800371a:	701a      	strb	r2, [r3, #0]
	//	osTimerStart(Button_clearHandle, (numatic_exp_ctr - 2000));
	PID_FLOW_VAR = xyz1;
 800371c:	4b1c      	ldr	r3, [pc, #112]	@ (8003790 <Mandatory_MODE+0x16c>)
 800371e:	edd3 7a00 	vldr	s15, [r3]
 8003722:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003726:	edc7 7a01 	vstr	s15, [r7, #4]
 800372a:	793b      	ldrb	r3, [r7, #4]
 800372c:	b2da      	uxtb	r2, r3
 800372e:	4b12      	ldr	r3, [pc, #72]	@ (8003778 <Mandatory_MODE+0x154>)
 8003730:	701a      	strb	r2, [r3, #0]
	if (PU_temp_value > 0) {
 8003732:	4b18      	ldr	r3, [pc, #96]	@ (8003794 <Mandatory_MODE+0x170>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00a      	beq.n	8003750 <Mandatory_MODE+0x12c>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 800373a:	2200      	movs	r2, #0
 800373c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003740:	4811      	ldr	r0, [pc, #68]	@ (8003788 <Mandatory_MODE+0x164>)
 8003742:	f008 faa7 	bl	800bc94 <HAL_GPIO_WritePin>
		osDelay(insPause_vale);
 8003746:	4b14      	ldr	r3, [pc, #80]	@ (8003798 <Mandatory_MODE+0x174>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f00c fe35 	bl	80103ba <osDelay>
	}
	previous_pressure_first = result2;
 8003750:	4b12      	ldr	r3, [pc, #72]	@ (800379c <Mandatory_MODE+0x178>)
 8003752:	781a      	ldrb	r2, [r3, #0]
 8003754:	4b12      	ldr	r3, [pc, #72]	@ (80037a0 <Mandatory_MODE+0x17c>)
 8003756:	701a      	strb	r2, [r3, #0]
	Mandarine();
 8003758:	f000 f824 	bl	80037a4 <Mandarine>
	return 1;
 800375c:	2301      	movs	r3, #1
}
 800375e:	4618      	mov	r0, r3
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003766:	bf00      	nop
 8003768:	200011fc 	.word	0x200011fc
 800376c:	200011fe 	.word	0x200011fe
 8003770:	200015be 	.word	0x200015be
 8003774:	2000120c 	.word	0x2000120c
 8003778:	20001208 	.word	0x20001208
 800377c:	20001218 	.word	0x20001218
 8003780:	3ff00000 	.word	0x3ff00000
 8003784:	20000f30 	.word	0x20000f30
 8003788:	40021000 	.word	0x40021000
 800378c:	2000157c 	.word	0x2000157c
 8003790:	200011ec 	.word	0x200011ec
 8003794:	200015b2 	.word	0x200015b2
 8003798:	20000150 	.word	0x20000150
 800379c:	200016e1 	.word	0x200016e1
 80037a0:	20001774 	.word	0x20001774

080037a4 <Mandarine>:
void Mandarine(void){
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
	VT_UPDATE_FLAG = 1;
 80037a8:	4b15      	ldr	r3, [pc, #84]	@ (8003800 <Mandarine+0x5c>)
 80037aa:	2201      	movs	r2, #1
 80037ac:	701a      	strb	r2, [r3, #0]
	//	Peep_control_flag = 1;
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 80037ae:	2200      	movs	r2, #0
 80037b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80037b4:	4813      	ldr	r0, [pc, #76]	@ (8003804 <Mandarine+0x60>)
 80037b6:	f008 fa6d 	bl	800bc94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 80037ba:	2200      	movs	r2, #0
 80037bc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80037c0:	4810      	ldr	r0, [pc, #64]	@ (8003804 <Mandarine+0x60>)
 80037c2:	f008 fa67 	bl	800bc94 <HAL_GPIO_WritePin>
	//	start_time_ms = HAL_GetTick();

	//	holi = 0;
	Peep_control_flag = 1;
 80037c6:	4b10      	ldr	r3, [pc, #64]	@ (8003808 <Mandarine+0x64>)
 80037c8:	2201      	movs	r2, #1
 80037ca:	701a      	strb	r2, [r3, #0]
	exp_cycle_counter++;
 80037cc:	4b0f      	ldr	r3, [pc, #60]	@ (800380c <Mandarine+0x68>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	3301      	adds	r3, #1
 80037d2:	4a0e      	ldr	r2, [pc, #56]	@ (800380c <Mandarine+0x68>)
 80037d4:	6013      	str	r3, [r2, #0]
	Mandatory_FLAG = 0;
 80037d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003810 <Mandarine+0x6c>)
 80037d8:	2200      	movs	r2, #0
 80037da:	701a      	strb	r2, [r3, #0]
	//	start_time_ms = HAL_GetTick();  // Get the system time in milliseconds

	osDelay(numatic_exp_ctr);  // Delay for numatic_exp_ctr milliseconds
 80037dc:	4b0d      	ldr	r3, [pc, #52]	@ (8003814 <Mandarine+0x70>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f00c fdea 	bl	80103ba <osDelay>
	Mandatory_FLAG = 1;
 80037e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003810 <Mandarine+0x6c>)
 80037e8:	2201      	movs	r2, #1
 80037ea:	701a      	strb	r2, [r3, #0]
	//	end_time_ms = HAL_GetTick();  // Get the system time after delay
	//	Spontaneous_FLAG = 0;

	//	elapsed_time_ms = end_time_ms - start_time_ms;  // Calculate elapsed time in milliseconds

	hI = 0;
 80037ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003818 <Mandarine+0x74>)
 80037ee:	f04f 0200 	mov.w	r2, #0
 80037f2:	601a      	str	r2, [r3, #0]
	P_HI = 0;
 80037f4:	4b09      	ldr	r3, [pc, #36]	@ (800381c <Mandarine+0x78>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	701a      	strb	r2, [r3, #0]
}
 80037fa:	bf00      	nop
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	200011fc 	.word	0x200011fc
 8003804:	40021000 	.word	0x40021000
 8003808:	20001601 	.word	0x20001601
 800380c:	20001578 	.word	0x20001578
 8003810:	200015bd 	.word	0x200015bd
 8003814:	20001580 	.word	0x20001580
 8003818:	20000018 	.word	0x20000018
 800381c:	2000156c 	.word	0x2000156c

08003820 <SIMV_MODE>:
		PID_CALIBRATE_FLAG = 0;
	}

	SIMV_MODE();
}
void SIMV_MODE(void){
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
	//	Mandatory_FLAG = 1;

	//	if(getElapsedMilliseconds() <= numatic_insp_ctr){
	//		Mandatory_MODE();
	//	}
	Mandatory_FLAG = 1;
 8003824:	4b0c      	ldr	r3, [pc, #48]	@ (8003858 <SIMV_MODE+0x38>)
 8003826:	2201      	movs	r2, #1
 8003828:	701a      	strb	r2, [r3, #0]
	if(Mandatory_FLAG == 1){
 800382a:	4b0b      	ldr	r3, [pc, #44]	@ (8003858 <SIMV_MODE+0x38>)
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d004      	beq.n	800383c <SIMV_MODE+0x1c>
		Spontaneous_FLAG = 0;
 8003832:	4b0a      	ldr	r3, [pc, #40]	@ (800385c <SIMV_MODE+0x3c>)
 8003834:	2200      	movs	r2, #0
 8003836:	701a      	strb	r2, [r3, #0]
		Mandatory_MODE();
 8003838:	f7ff fef4 	bl	8003624 <Mandatory_MODE>
	}
	if(Mandatory_FLAG == 0){
 800383c:	4b06      	ldr	r3, [pc, #24]	@ (8003858 <SIMV_MODE+0x38>)
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	f083 0301 	eor.w	r3, r3, #1
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d004      	beq.n	8003854 <SIMV_MODE+0x34>
		Spontaneous_FLAG = 1;
 800384a:	4b04      	ldr	r3, [pc, #16]	@ (800385c <SIMV_MODE+0x3c>)
 800384c:	2201      	movs	r2, #1
 800384e:	701a      	strb	r2, [r3, #0]
		PSV_MODE();
 8003850:	f000 f806 	bl	8003860 <PSV_MODE>
	//			osDelay(numatic_exp_ctr - 250);
	//			Spontaneous_FLAG = 0;
	//
	//		}
	//	}
}
 8003854:	bf00      	nop
 8003856:	bd80      	pop	{r7, pc}
 8003858:	200015bd 	.word	0x200015bd
 800385c:	200015be 	.word	0x200015be

08003860 <PSV_MODE>:

void PSV_MODE(void){
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
	//	P_TRG = (PIP_value + result2);
	//	uint8_t store2;
	TRG_value = PIP_value;
 8003864:	4b33      	ldr	r3, [pc, #204]	@ (8003934 <PSV_MODE+0xd4>)
 8003866:	f993 3000 	ldrsb.w	r3, [r3]
 800386a:	461a      	mov	r2, r3
 800386c:	4b32      	ldr	r3, [pc, #200]	@ (8003938 <PSV_MODE+0xd8>)
 800386e:	601a      	str	r2, [r3, #0]
	if (xy>=(100-TRG_value)){
 8003870:	4b31      	ldr	r3, [pc, #196]	@ (8003938 <PSV_MODE+0xd8>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f1c3 0264 	rsb	r2, r3, #100	@ 0x64
 8003878:	4b30      	ldr	r3, [pc, #192]	@ (800393c <PSV_MODE+0xdc>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	429a      	cmp	r2, r3
 800387e:	dc2b      	bgt.n	80038d8 <PSV_MODE+0x78>
		VT_UPDATE_FLAG = 0;
 8003880:	4b2f      	ldr	r3, [pc, #188]	@ (8003940 <PSV_MODE+0xe0>)
 8003882:	2200      	movs	r2, #0
 8003884:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 8003886:	2201      	movs	r2, #1
 8003888:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800388c:	482d      	ldr	r0, [pc, #180]	@ (8003944 <PSV_MODE+0xe4>)
 800388e:	f008 fa01 	bl	800bc94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8003892:	2201      	movs	r2, #1
 8003894:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003898:	482a      	ldr	r0, [pc, #168]	@ (8003944 <PSV_MODE+0xe4>)
 800389a:	f008 f9fb 	bl	800bc94 <HAL_GPIO_WritePin>
		//		osDelay(numatic_insp_ctr - insPause_vale);
		PID_CALIBRATE_FLAG = 1;
 800389e:	4b2a      	ldr	r3, [pc, #168]	@ (8003948 <PSV_MODE+0xe8>)
 80038a0:	2201      	movs	r2, #1
 80038a2:	701a      	strb	r2, [r3, #0]
		PID_FLOW_VAR = 0;
 80038a4:	4b29      	ldr	r3, [pc, #164]	@ (800394c <PSV_MODE+0xec>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	701a      	strb	r2, [r3, #0]
		//		if (result2>PS_temp_value){
		//			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
		//			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
		//			//			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 75);
		//		}
		if (PU_temp_value > 0) {
 80038aa:	4b29      	ldr	r3, [pc, #164]	@ (8003950 <PSV_MODE+0xf0>)
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00a      	beq.n	80038c8 <PSV_MODE+0x68>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 80038b2:	2200      	movs	r2, #0
 80038b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80038b8:	4822      	ldr	r0, [pc, #136]	@ (8003944 <PSV_MODE+0xe4>)
 80038ba:	f008 f9eb 	bl	800bc94 <HAL_GPIO_WritePin>
			osDelay(insPause_vale);
 80038be:	4b25      	ldr	r3, [pc, #148]	@ (8003954 <PSV_MODE+0xf4>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f00c fd79 	bl	80103ba <osDelay>

		}
		previous_pressure_first = result2;
 80038c8:	4b23      	ldr	r3, [pc, #140]	@ (8003958 <PSV_MODE+0xf8>)
 80038ca:	781a      	ldrb	r2, [r3, #0]
 80038cc:	4b23      	ldr	r3, [pc, #140]	@ (800395c <PSV_MODE+0xfc>)
 80038ce:	701a      	strb	r2, [r3, #0]
		sensor_flow_for_vt = 0;
 80038d0:	4b23      	ldr	r3, [pc, #140]	@ (8003960 <PSV_MODE+0x100>)
 80038d2:	f04f 0200 	mov.w	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]
	}
	//	store2 = prev_pressure_first;
	if (result2>PS_temp_value){
 80038d8:	4b1f      	ldr	r3, [pc, #124]	@ (8003958 <PSV_MODE+0xf8>)
 80038da:	781a      	ldrb	r2, [r3, #0]
 80038dc:	4b21      	ldr	r3, [pc, #132]	@ (8003964 <PSV_MODE+0x104>)
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d924      	bls.n	800392e <PSV_MODE+0xce>
		//		else if (result2>PS_temp_value){
		//	else if(y<(100)){
		VT_UPDATE_FLAG = 1;
 80038e4:	4b16      	ldr	r3, [pc, #88]	@ (8003940 <PSV_MODE+0xe0>)
 80038e6:	2201      	movs	r2, #1
 80038e8:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 80038ea:	2200      	movs	r2, #0
 80038ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80038f0:	4814      	ldr	r0, [pc, #80]	@ (8003944 <PSV_MODE+0xe4>)
 80038f2:	f008 f9cf 	bl	800bc94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 80038f6:	2200      	movs	r2, #0
 80038f8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80038fc:	4811      	ldr	r0, [pc, #68]	@ (8003944 <PSV_MODE+0xe4>)
 80038fe:	f008 f9c9 	bl	800bc94 <HAL_GPIO_WritePin>
		Peep_control_flag = 1;
 8003902:	4b19      	ldr	r3, [pc, #100]	@ (8003968 <PSV_MODE+0x108>)
 8003904:	2201      	movs	r2, #1
 8003906:	701a      	strb	r2, [r3, #0]
		exp_cycle_counter++;
 8003908:	4b18      	ldr	r3, [pc, #96]	@ (800396c <PSV_MODE+0x10c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	3301      	adds	r3, #1
 800390e:	4a17      	ldr	r2, [pc, #92]	@ (800396c <PSV_MODE+0x10c>)
 8003910:	6013      	str	r3, [r2, #0]
		osDelay(200);
 8003912:	20c8      	movs	r0, #200	@ 0xc8
 8003914:	f00c fd51 	bl	80103ba <osDelay>
		Peep_control_flag = 0;
 8003918:	4b13      	ldr	r3, [pc, #76]	@ (8003968 <PSV_MODE+0x108>)
 800391a:	2200      	movs	r2, #0
 800391c:	701a      	strb	r2, [r3, #0]
		Peep_live_pressure(result2);
 800391e:	4b0e      	ldr	r3, [pc, #56]	@ (8003958 <PSV_MODE+0xf8>)
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f7ff fcd2 	bl	80032cc <Peep_live_pressure>
		PID_CALIBRATE_FLAG = 0;
 8003928:	4b07      	ldr	r3, [pc, #28]	@ (8003948 <PSV_MODE+0xe8>)
 800392a:	2200      	movs	r2, #0
 800392c:	701a      	strb	r2, [r3, #0]
	}
}
 800392e:	bf00      	nop
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	20000028 	.word	0x20000028
 8003938:	200015ac 	.word	0x200015ac
 800393c:	200011f0 	.word	0x200011f0
 8003940:	200011fc 	.word	0x200011fc
 8003944:	40021000 	.word	0x40021000
 8003948:	200011fe 	.word	0x200011fe
 800394c:	20001208 	.word	0x20001208
 8003950:	200015b2 	.word	0x200015b2
 8003954:	20000150 	.word	0x20000150
 8003958:	200016e1 	.word	0x200016e1
 800395c:	20001774 	.word	0x20001774
 8003960:	20001200 	.word	0x20001200
 8003964:	200015b4 	.word	0x200015b4
 8003968:	20001601 	.word	0x20001601
 800396c:	20001578 	.word	0x20001578

08003970 <CLT_MODE>:

	if (CLV >= LEAK_THRESHOLD && Leak_Percentage >= LEAK_PERCENT_THRESHOLD)

		return Leak_Percentage;
}
float CLT_MODE(void){
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
	//	P_TRG = (PIP_value + result2);
	//	uint8_t store2;
	//	TRG_value = PIP_value;
	PS_temp_value = 50;
 8003976:	4b53      	ldr	r3, [pc, #332]	@ (8003ac4 <CLT_MODE+0x154>)
 8003978:	2232      	movs	r2, #50	@ 0x32
 800397a:	701a      	strb	r2, [r3, #0]
	RR_temp_value = 0;
 800397c:	4b52      	ldr	r3, [pc, #328]	@ (8003ac8 <CLT_MODE+0x158>)
 800397e:	2200      	movs	r2, #0
 8003980:	701a      	strb	r2, [r3, #0]
	if (CLT_FLAG == 1){
 8003982:	4b52      	ldr	r3, [pc, #328]	@ (8003acc <CLT_MODE+0x15c>)
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	2b01      	cmp	r3, #1
 8003988:	f040 8097 	bne.w	8003aba <CLT_MODE+0x14a>
		VT_UPDATE_FLAG = 0;
 800398c:	4b50      	ldr	r3, [pc, #320]	@ (8003ad0 <CLT_MODE+0x160>)
 800398e:	2200      	movs	r2, #0
 8003990:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 8003992:	2201      	movs	r2, #1
 8003994:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003998:	484e      	ldr	r0, [pc, #312]	@ (8003ad4 <CLT_MODE+0x164>)
 800399a:	f008 f97b 	bl	800bc94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 800399e:	2201      	movs	r2, #1
 80039a0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80039a4:	484b      	ldr	r0, [pc, #300]	@ (8003ad4 <CLT_MODE+0x164>)
 80039a6:	f008 f975 	bl	800bc94 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 97);
 80039aa:	4b4b      	ldr	r3, [pc, #300]	@ (8003ad8 <CLT_MODE+0x168>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2261      	movs	r2, #97	@ 0x61
 80039b0:	635a      	str	r2, [r3, #52]	@ 0x34
		osDelay(10000);
 80039b2:	f242 7010 	movw	r0, #10000	@ 0x2710
 80039b6:	f00c fd00 	bl	80103ba <osDelay>
		//		osDelay(numatic_insp_ctr - insPause_vale);
		PID_CALIBRATE_FLAG = 1;
 80039ba:	4b48      	ldr	r3, [pc, #288]	@ (8003adc <CLT_MODE+0x16c>)
 80039bc:	2201      	movs	r2, #1
 80039be:	701a      	strb	r2, [r3, #0]
		PID_FLOW_VAR = xyz;
 80039c0:	4b47      	ldr	r3, [pc, #284]	@ (8003ae0 <CLT_MODE+0x170>)
 80039c2:	edd3 7a00 	vldr	s15, [r3]
 80039c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039ca:	edc7 7a01 	vstr	s15, [r7, #4]
 80039ce:	793b      	ldrb	r3, [r7, #4]
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	4b44      	ldr	r3, [pc, #272]	@ (8003ae4 <CLT_MODE+0x174>)
 80039d4:	701a      	strb	r2, [r3, #0]
		PID_FLOW_VAR = 0;
 80039d6:	4b43      	ldr	r3, [pc, #268]	@ (8003ae4 <CLT_MODE+0x174>)
 80039d8:	2200      	movs	r2, #0
 80039da:	701a      	strb	r2, [r3, #0]
		//		if (PU_temp_value > 0) {
		//			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
		//			osDelay(insPause_vale);
		//
		//		}
		previous_pressure_first = result2;
 80039dc:	4b42      	ldr	r3, [pc, #264]	@ (8003ae8 <CLT_MODE+0x178>)
 80039de:	781a      	ldrb	r2, [r3, #0]
 80039e0:	4b42      	ldr	r3, [pc, #264]	@ (8003aec <CLT_MODE+0x17c>)
 80039e2:	701a      	strb	r2, [r3, #0]
		sensor_flow_for_vt = 0;
 80039e4:	4b42      	ldr	r3, [pc, #264]	@ (8003af0 <CLT_MODE+0x180>)
 80039e6:	f04f 0200 	mov.w	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]
		previous_pressure_second = pressure_adc;
 80039ec:	4b41      	ldr	r3, [pc, #260]	@ (8003af4 <CLT_MODE+0x184>)
 80039ee:	881a      	ldrh	r2, [r3, #0]
 80039f0:	4b41      	ldr	r3, [pc, #260]	@ (8003af8 <CLT_MODE+0x188>)
 80039f2:	801a      	strh	r2, [r3, #0]
		//	}
		//	store2 = prev_pressure_first;
		//	if (result2>PS_temp_value){
		//		else if (result2>PS_temp_value){
		//	else if(y<(100)){
		Peep_control_flag = 1;
 80039f4:	4b41      	ldr	r3, [pc, #260]	@ (8003afc <CLT_MODE+0x18c>)
 80039f6:	2201      	movs	r2, #1
 80039f8:	701a      	strb	r2, [r3, #0]
		VT_UPDATE_FLAG = 1;
 80039fa:	4b35      	ldr	r3, [pc, #212]	@ (8003ad0 <CLT_MODE+0x160>)
 80039fc:	2201      	movs	r2, #1
 80039fe:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8003a00:	2200      	movs	r2, #0
 8003a02:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003a06:	4833      	ldr	r0, [pc, #204]	@ (8003ad4 <CLT_MODE+0x164>)
 8003a08:	f008 f944 	bl	800bc94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003a12:	4830      	ldr	r0, [pc, #192]	@ (8003ad4 <CLT_MODE+0x164>)
 8003a14:	f008 f93e 	bl	800bc94 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 75);
 8003a18:	4b2f      	ldr	r3, [pc, #188]	@ (8003ad8 <CLT_MODE+0x168>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	224b      	movs	r2, #75	@ 0x4b
 8003a1e:	635a      	str	r2, [r3, #52]	@ 0x34

		exp_cycle_counter++;
 8003a20:	4b37      	ldr	r3, [pc, #220]	@ (8003b00 <CLT_MODE+0x190>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	3301      	adds	r3, #1
 8003a26:	4a36      	ldr	r2, [pc, #216]	@ (8003b00 <CLT_MODE+0x190>)
 8003a28:	6013      	str	r3, [r2, #0]
		osDelay(3500);
 8003a2a:	f640 50ac 	movw	r0, #3500	@ 0xdac
 8003a2e:	f00c fcc4 	bl	80103ba <osDelay>
		Peep_control_flag = 0;
 8003a32:	4b32      	ldr	r3, [pc, #200]	@ (8003afc <CLT_MODE+0x18c>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	701a      	strb	r2, [r3, #0]
		Peep_live_pressure(result2);
 8003a38:	4b2b      	ldr	r3, [pc, #172]	@ (8003ae8 <CLT_MODE+0x178>)
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7ff fc45 	bl	80032cc <Peep_live_pressure>
		PID_CALIBRATE_FLAG = 0;
 8003a42:	4b26      	ldr	r3, [pc, #152]	@ (8003adc <CLT_MODE+0x16c>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	701a      	strb	r2, [r3, #0]
		CLT_FLAG = 2;
 8003a48:	4b20      	ldr	r3, [pc, #128]	@ (8003acc <CLT_MODE+0x15c>)
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	701a      	strb	r2, [r3, #0]
		float CLV = (result / result2);
 8003a4e:	4b2d      	ldr	r3, [pc, #180]	@ (8003b04 <CLT_MODE+0x194>)
 8003a50:	781a      	ldrb	r2, [r3, #0]
 8003a52:	4b25      	ldr	r3, [pc, #148]	@ (8003ae8 <CLT_MODE+0x178>)
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	ee07 3a90 	vmov	s15, r3
 8003a60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a64:	edc7 7a03 	vstr	s15, [r7, #12]
		Leak_Percentage = (CLV / result) * 100;
 8003a68:	4b26      	ldr	r3, [pc, #152]	@ (8003b04 <CLT_MODE+0x194>)
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	ee07 3a90 	vmov	s15, r3
 8003a70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a74:	edd7 6a03 	vldr	s13, [r7, #12]
 8003a78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a7c:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8003b08 <CLT_MODE+0x198>
 8003a80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a84:	4b21      	ldr	r3, [pc, #132]	@ (8003b0c <CLT_MODE+0x19c>)
 8003a86:	edc3 7a00 	vstr	s15, [r3]

		if (CLV >= LEAK_THRESHOLD && Leak_Percentage >= LEAK_PERCENT_THRESHOLD)
 8003a8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a8e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003a92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a9a:	db0e      	blt.n	8003aba <CLT_MODE+0x14a>
 8003a9c:	4b1b      	ldr	r3, [pc, #108]	@ (8003b0c <CLT_MODE+0x19c>)
 8003a9e:	edd3 7a00 	vldr	s15, [r3]
 8003aa2:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8003aa6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aae:	db04      	blt.n	8003aba <CLT_MODE+0x14a>

			return Leak_Percentage;
 8003ab0:	4b16      	ldr	r3, [pc, #88]	@ (8003b0c <CLT_MODE+0x19c>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	ee07 3a90 	vmov	s15, r3
 8003ab8:	e7ff      	b.n	8003aba <CLT_MODE+0x14a>
	}

}
 8003aba:	eeb0 0a67 	vmov.f32	s0, s15
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	200015b4 	.word	0x200015b4
 8003ac8:	2000003c 	.word	0x2000003c
 8003acc:	200015bc 	.word	0x200015bc
 8003ad0:	200011fc 	.word	0x200011fc
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	20000f30 	.word	0x20000f30
 8003adc:	200011fe 	.word	0x200011fe
 8003ae0:	200011e8 	.word	0x200011e8
 8003ae4:	20001208 	.word	0x20001208
 8003ae8:	200016e1 	.word	0x200016e1
 8003aec:	20001774 	.word	0x20001774
 8003af0:	20001200 	.word	0x20001200
 8003af4:	2000119c 	.word	0x2000119c
 8003af8:	20001776 	.word	0x20001776
 8003afc:	20001601 	.word	0x20001601
 8003b00:	20001578 	.word	0x20001578
 8003b04:	200016e0 	.word	0x200016e0
 8003b08:	42c80000 	.word	0x42c80000
 8003b0c:	200015dc 	.word	0x200015dc

08003b10 <BAG_MODE>:
void BAG_MODE(void) {
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
	VT_UPDATE_FLAG = 1;
 8003b14:	4b0a      	ldr	r3, [pc, #40]	@ (8003b40 <BAG_MODE+0x30>)
 8003b16:	2201      	movs	r2, #1
 8003b18:	701a      	strb	r2, [r3, #0]
	PID_FLOW_VAR = result;
 8003b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8003b44 <BAG_MODE+0x34>)
 8003b1c:	781a      	ldrb	r2, [r3, #0]
 8003b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8003b48 <BAG_MODE+0x38>)
 8003b20:	701a      	strb	r2, [r3, #0]
	previous_pressure_first = result2;
 8003b22:	4b0a      	ldr	r3, [pc, #40]	@ (8003b4c <BAG_MODE+0x3c>)
 8003b24:	781a      	ldrb	r2, [r3, #0]
 8003b26:	4b0a      	ldr	r3, [pc, #40]	@ (8003b50 <BAG_MODE+0x40>)
 8003b28:	701a      	strb	r2, [r3, #0]
	STAND_BY = 1;
 8003b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8003b54 <BAG_MODE+0x44>)
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	701a      	strb	r2, [r3, #0]
	//	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 140);
	Peep_live_pressure(result2);
 8003b30:	4b06      	ldr	r3, [pc, #24]	@ (8003b4c <BAG_MODE+0x3c>)
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7ff fbc9 	bl	80032cc <Peep_live_pressure>
	//	STAND_BY = 0;
	//	VT_UPDATE_FLAG = 0;
}
 8003b3a:	bf00      	nop
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	200011fc 	.word	0x200011fc
 8003b44:	200016e0 	.word	0x200016e0
 8003b48:	20001208 	.word	0x20001208
 8003b4c:	200016e1 	.word	0x200016e1
 8003b50:	20001774 	.word	0x20001774
 8003b54:	200015b6 	.word	0x200015b6

08003b58 <PID_FLOW_SET_VALUE>:
void PID_FLOW_SET_VALUE(double SETTING_POINT, double kp, double kd, double ki,
		uint32_t PID_time) {
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b08c      	sub	sp, #48	@ 0x30
 8003b5c:	af02      	add	r7, sp, #8
 8003b5e:	ed87 0b08 	vstr	d0, [r7, #32]
 8003b62:	ed87 1b06 	vstr	d1, [r7, #24]
 8003b66:	ed87 2b04 	vstr	d2, [r7, #16]
 8003b6a:	ed87 3b02 	vstr	d3, [r7, #8]
 8003b6e:	6078      	str	r0, [r7, #4]

	TempSetpoint = (int)SETTING_POINT;
 8003b70:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003b74:	f7fc ffe8 	bl	8000b48 <__aeabi_d2iz>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fc fcca 	bl	8000514 <__aeabi_i2d>
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	4918      	ldr	r1, [pc, #96]	@ (8003be8 <PID_FLOW_SET_VALUE+0x90>)
 8003b86:	e9c1 2300 	strd	r2, r3, [r1]
	PID(&TPID, &Temp, &PIDOut, &TempSetpoint, kp, kd, ki, _PID_P_ON_E,
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	9301      	str	r3, [sp, #4]
 8003b8e:	2301      	movs	r3, #1
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	ed97 2b02 	vldr	d2, [r7, #8]
 8003b96:	ed97 1b04 	vldr	d1, [r7, #16]
 8003b9a:	ed97 0b06 	vldr	d0, [r7, #24]
 8003b9e:	4b12      	ldr	r3, [pc, #72]	@ (8003be8 <PID_FLOW_SET_VALUE+0x90>)
 8003ba0:	4a12      	ldr	r2, [pc, #72]	@ (8003bec <PID_FLOW_SET_VALUE+0x94>)
 8003ba2:	4913      	ldr	r1, [pc, #76]	@ (8003bf0 <PID_FLOW_SET_VALUE+0x98>)
 8003ba4:	4813      	ldr	r0, [pc, #76]	@ (8003bf4 <PID_FLOW_SET_VALUE+0x9c>)
 8003ba6:	f005 fe33 	bl	8009810 <PID>
			_PID_CD_DIRECT);
	PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 8003baa:	2101      	movs	r1, #1
 8003bac:	4811      	ldr	r0, [pc, #68]	@ (8003bf4 <PID_FLOW_SET_VALUE+0x9c>)
 8003bae:	f005 ff65 	bl	8009a7c <PID_SetMode>
	PID_SetSampleTime(&TPID, PID_time);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	480f      	ldr	r0, [pc, #60]	@ (8003bf4 <PID_FLOW_SET_VALUE+0x9c>)
 8003bb8:	f006 f8d4 	bl	8009d64 <PID_SetSampleTime>
	PID_SetOutputLimits(&TPID, 75, 160);
 8003bbc:	ed9f 1b06 	vldr	d1, [pc, #24]	@ 8003bd8 <PID_FLOW_SET_VALUE+0x80>
 8003bc0:	ed9f 0b07 	vldr	d0, [pc, #28]	@ 8003be0 <PID_FLOW_SET_VALUE+0x88>
 8003bc4:	480b      	ldr	r0, [pc, #44]	@ (8003bf4 <PID_FLOW_SET_VALUE+0x9c>)
 8003bc6:	f005 ff77 	bl	8009ab8 <PID_SetOutputLimits>
}
 8003bca:	bf00      	nop
 8003bcc:	3728      	adds	r7, #40	@ 0x28
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	f3af 8000 	nop.w
 8003bd8:	00000000 	.word	0x00000000
 8003bdc:	40640000 	.word	0x40640000
 8003be0:	00000000 	.word	0x00000000
 8003be4:	4052c000 	.word	0x4052c000
 8003be8:	20001220 	.word	0x20001220
 8003bec:	20001218 	.word	0x20001218
 8003bf0:	20001210 	.word	0x20001210
 8003bf4:	20000d18 	.word	0x20000d18

08003bf8 <VT_KEYPAD>:
void VT_KEYPAD(void){
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
	if((DISPLAY_INPUT1[0]==0x5A)&&(DISPLAY_INPUT1[1]==0xA5)&&(DISPLAY_INPUT1[3]==0x83)
 8003bfe:	4b8f      	ldr	r3, [pc, #572]	@ (8003e3c <VT_KEYPAD+0x244>)
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	2b5a      	cmp	r3, #90	@ 0x5a
 8003c04:	f040 8115 	bne.w	8003e32 <VT_KEYPAD+0x23a>
 8003c08:	4b8c      	ldr	r3, [pc, #560]	@ (8003e3c <VT_KEYPAD+0x244>)
 8003c0a:	785b      	ldrb	r3, [r3, #1]
 8003c0c:	2ba5      	cmp	r3, #165	@ 0xa5
 8003c0e:	f040 8110 	bne.w	8003e32 <VT_KEYPAD+0x23a>
 8003c12:	4b8a      	ldr	r3, [pc, #552]	@ (8003e3c <VT_KEYPAD+0x244>)
 8003c14:	78db      	ldrb	r3, [r3, #3]
 8003c16:	2b83      	cmp	r3, #131	@ 0x83
 8003c18:	f040 810b 	bne.w	8003e32 <VT_KEYPAD+0x23a>
			&&(DISPLAY_INPUT1[4]==0x10)&&(DISPLAY_INPUT1[5]==0x95)){
 8003c1c:	4b87      	ldr	r3, [pc, #540]	@ (8003e3c <VT_KEYPAD+0x244>)
 8003c1e:	791b      	ldrb	r3, [r3, #4]
 8003c20:	2b10      	cmp	r3, #16
 8003c22:	f040 8106 	bne.w	8003e32 <VT_KEYPAD+0x23a>
 8003c26:	4b85      	ldr	r3, [pc, #532]	@ (8003e3c <VT_KEYPAD+0x244>)
 8003c28:	795b      	ldrb	r3, [r3, #5]
 8003c2a:	2b95      	cmp	r3, #149	@ 0x95
 8003c2c:	f040 8101 	bne.w	8003e32 <VT_KEYPAD+0x23a>

		if((DISPLAY_INPUT1[8] == 0xFF) && (DISPLAY_INPUT1[9] == 0xFF)){
 8003c30:	4b82      	ldr	r3, [pc, #520]	@ (8003e3c <VT_KEYPAD+0x244>)
 8003c32:	7a1b      	ldrb	r3, [r3, #8]
 8003c34:	2bff      	cmp	r3, #255	@ 0xff
 8003c36:	d125      	bne.n	8003c84 <VT_KEYPAD+0x8c>
 8003c38:	4b80      	ldr	r3, [pc, #512]	@ (8003e3c <VT_KEYPAD+0x244>)
 8003c3a:	7a5b      	ldrb	r3, [r3, #9]
 8003c3c:	2bff      	cmp	r3, #255	@ 0xff
 8003c3e:	d121      	bne.n	8003c84 <VT_KEYPAD+0x8c>
			Keypad[0] = 0x00;
 8003c40:	4b7f      	ldr	r3, [pc, #508]	@ (8003e40 <VT_KEYPAD+0x248>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	701a      	strb	r2, [r3, #0]
			Keypad[1] = 0x00;
 8003c46:	4b7e      	ldr	r3, [pc, #504]	@ (8003e40 <VT_KEYPAD+0x248>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	705a      	strb	r2, [r3, #1]
			Keypad[2] = 0x00;
 8003c4c:	4b7c      	ldr	r3, [pc, #496]	@ (8003e40 <VT_KEYPAD+0x248>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	709a      	strb	r2, [r3, #2]
			Keypad[3] = DISPLAY_INPUT1[7] & 0x0F;
 8003c52:	4b7a      	ldr	r3, [pc, #488]	@ (8003e3c <VT_KEYPAD+0x244>)
 8003c54:	79db      	ldrb	r3, [r3, #7]
 8003c56:	f003 030f 	and.w	r3, r3, #15
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	4b78      	ldr	r3, [pc, #480]	@ (8003e40 <VT_KEYPAD+0x248>)
 8003c5e:	70da      	strb	r2, [r3, #3]
			Keypad[4] = 0x01;
 8003c60:	4b77      	ldr	r3, [pc, #476]	@ (8003e40 <VT_KEYPAD+0x248>)
 8003c62:	2201      	movs	r2, #1
 8003c64:	711a      	strb	r2, [r3, #4]
			for(int j = 0; j < 12; j++){
 8003c66:	2300      	movs	r3, #0
 8003c68:	60fb      	str	r3, [r7, #12]
 8003c6a:	e007      	b.n	8003c7c <VT_KEYPAD+0x84>
				DISPLAY_INPUT1[j] = 0x00;
 8003c6c:	4a73      	ldr	r2, [pc, #460]	@ (8003e3c <VT_KEYPAD+0x244>)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	4413      	add	r3, r2
 8003c72:	2200      	movs	r2, #0
 8003c74:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 12; j++){
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	60fb      	str	r3, [r7, #12]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2b0b      	cmp	r3, #11
 8003c80:	ddf4      	ble.n	8003c6c <VT_KEYPAD+0x74>
 8003c82:	e094      	b.n	8003dae <VT_KEYPAD+0x1b6>
			}
			//                            memset(DISPLAY_INPUT1,0,13);
		}
		else if((DISPLAY_INPUT1[9] == 0xFF) && (DISPLAY_INPUT1[10] == 0xFF)){
 8003c84:	4b6d      	ldr	r3, [pc, #436]	@ (8003e3c <VT_KEYPAD+0x244>)
 8003c86:	7a5b      	ldrb	r3, [r3, #9]
 8003c88:	2bff      	cmp	r3, #255	@ 0xff
 8003c8a:	d129      	bne.n	8003ce0 <VT_KEYPAD+0xe8>
 8003c8c:	4b6b      	ldr	r3, [pc, #428]	@ (8003e3c <VT_KEYPAD+0x244>)
 8003c8e:	7a9b      	ldrb	r3, [r3, #10]
 8003c90:	2bff      	cmp	r3, #255	@ 0xff
 8003c92:	d125      	bne.n	8003ce0 <VT_KEYPAD+0xe8>
			Keypad[0] = 0x00;
 8003c94:	4b6a      	ldr	r3, [pc, #424]	@ (8003e40 <VT_KEYPAD+0x248>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	701a      	strb	r2, [r3, #0]
			Keypad[1] = 0x00;
 8003c9a:	4b69      	ldr	r3, [pc, #420]	@ (8003e40 <VT_KEYPAD+0x248>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	705a      	strb	r2, [r3, #1]
			Keypad[2] = DISPLAY_INPUT1[7] & 0x0F;
 8003ca0:	4b66      	ldr	r3, [pc, #408]	@ (8003e3c <VT_KEYPAD+0x244>)
 8003ca2:	79db      	ldrb	r3, [r3, #7]
 8003ca4:	f003 030f 	and.w	r3, r3, #15
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	4b65      	ldr	r3, [pc, #404]	@ (8003e40 <VT_KEYPAD+0x248>)
 8003cac:	709a      	strb	r2, [r3, #2]
			Keypad[3] = DISPLAY_INPUT1[8] & 0x0F;
 8003cae:	4b63      	ldr	r3, [pc, #396]	@ (8003e3c <VT_KEYPAD+0x244>)
 8003cb0:	7a1b      	ldrb	r3, [r3, #8]
 8003cb2:	f003 030f 	and.w	r3, r3, #15
 8003cb6:	b2da      	uxtb	r2, r3
 8003cb8:	4b61      	ldr	r3, [pc, #388]	@ (8003e40 <VT_KEYPAD+0x248>)
 8003cba:	70da      	strb	r2, [r3, #3]
			Keypad[4] = 0x02;
 8003cbc:	4b60      	ldr	r3, [pc, #384]	@ (8003e40 <VT_KEYPAD+0x248>)
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	711a      	strb	r2, [r3, #4]
			for(int j = 0; j < 12; j++){
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	60bb      	str	r3, [r7, #8]
 8003cc6:	e007      	b.n	8003cd8 <VT_KEYPAD+0xe0>
				DISPLAY_INPUT1[j] = 0x00;
 8003cc8:	4a5c      	ldr	r2, [pc, #368]	@ (8003e3c <VT_KEYPAD+0x244>)
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	4413      	add	r3, r2
 8003cce:	2200      	movs	r2, #0
 8003cd0:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 12; j++){
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	60bb      	str	r3, [r7, #8]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	2b0b      	cmp	r3, #11
 8003cdc:	ddf4      	ble.n	8003cc8 <VT_KEYPAD+0xd0>
 8003cde:	e066      	b.n	8003dae <VT_KEYPAD+0x1b6>
			}
			//                            memset(DISPLAY_INPUT1,0,13);
		}
		else if((DISPLAY_INPUT1[10] == 0xFF) && (DISPLAY_INPUT1[11] == 0xFF)){
 8003ce0:	4b56      	ldr	r3, [pc, #344]	@ (8003e3c <VT_KEYPAD+0x244>)
 8003ce2:	7a9b      	ldrb	r3, [r3, #10]
 8003ce4:	2bff      	cmp	r3, #255	@ 0xff
 8003ce6:	d12d      	bne.n	8003d44 <VT_KEYPAD+0x14c>
 8003ce8:	4b54      	ldr	r3, [pc, #336]	@ (8003e3c <VT_KEYPAD+0x244>)
 8003cea:	7adb      	ldrb	r3, [r3, #11]
 8003cec:	2bff      	cmp	r3, #255	@ 0xff
 8003cee:	d129      	bne.n	8003d44 <VT_KEYPAD+0x14c>
			Keypad[0] = 0x00;
 8003cf0:	4b53      	ldr	r3, [pc, #332]	@ (8003e40 <VT_KEYPAD+0x248>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	701a      	strb	r2, [r3, #0]
			Keypad[1] = DISPLAY_INPUT1[7] & 0x0F;
 8003cf6:	4b51      	ldr	r3, [pc, #324]	@ (8003e3c <VT_KEYPAD+0x244>)
 8003cf8:	79db      	ldrb	r3, [r3, #7]
 8003cfa:	f003 030f 	and.w	r3, r3, #15
 8003cfe:	b2da      	uxtb	r2, r3
 8003d00:	4b4f      	ldr	r3, [pc, #316]	@ (8003e40 <VT_KEYPAD+0x248>)
 8003d02:	705a      	strb	r2, [r3, #1]
			Keypad[2] = DISPLAY_INPUT1[8] & 0x0F;
 8003d04:	4b4d      	ldr	r3, [pc, #308]	@ (8003e3c <VT_KEYPAD+0x244>)
 8003d06:	7a1b      	ldrb	r3, [r3, #8]
 8003d08:	f003 030f 	and.w	r3, r3, #15
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	4b4c      	ldr	r3, [pc, #304]	@ (8003e40 <VT_KEYPAD+0x248>)
 8003d10:	709a      	strb	r2, [r3, #2]
			Keypad[3] = DISPLAY_INPUT1[9] & 0x0F;
 8003d12:	4b4a      	ldr	r3, [pc, #296]	@ (8003e3c <VT_KEYPAD+0x244>)
 8003d14:	7a5b      	ldrb	r3, [r3, #9]
 8003d16:	f003 030f 	and.w	r3, r3, #15
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	4b48      	ldr	r3, [pc, #288]	@ (8003e40 <VT_KEYPAD+0x248>)
 8003d1e:	70da      	strb	r2, [r3, #3]
			Keypad[4] = 0x03;
 8003d20:	4b47      	ldr	r3, [pc, #284]	@ (8003e40 <VT_KEYPAD+0x248>)
 8003d22:	2203      	movs	r2, #3
 8003d24:	711a      	strb	r2, [r3, #4]
			for(int j = 0; j < 12; j++){
 8003d26:	2300      	movs	r3, #0
 8003d28:	607b      	str	r3, [r7, #4]
 8003d2a:	e007      	b.n	8003d3c <VT_KEYPAD+0x144>
				DISPLAY_INPUT1[j] = 0x00;
 8003d2c:	4a43      	ldr	r2, [pc, #268]	@ (8003e3c <VT_KEYPAD+0x244>)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4413      	add	r3, r2
 8003d32:	2200      	movs	r2, #0
 8003d34:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 12; j++){
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	607b      	str	r3, [r7, #4]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b0b      	cmp	r3, #11
 8003d40:	ddf4      	ble.n	8003d2c <VT_KEYPAD+0x134>
 8003d42:	e034      	b.n	8003dae <VT_KEYPAD+0x1b6>
			}
			//                            memset(DISPLAY_INPUT1,0,13);
		}
		else if((DISPLAY_INPUT1[11] == 0xFF) && (DISPLAY_INPUT1[12] == 0xFF)){
 8003d44:	4b3d      	ldr	r3, [pc, #244]	@ (8003e3c <VT_KEYPAD+0x244>)
 8003d46:	7adb      	ldrb	r3, [r3, #11]
 8003d48:	2bff      	cmp	r3, #255	@ 0xff
 8003d4a:	d130      	bne.n	8003dae <VT_KEYPAD+0x1b6>
 8003d4c:	4b3b      	ldr	r3, [pc, #236]	@ (8003e3c <VT_KEYPAD+0x244>)
 8003d4e:	7b1b      	ldrb	r3, [r3, #12]
 8003d50:	2bff      	cmp	r3, #255	@ 0xff
 8003d52:	d12c      	bne.n	8003dae <VT_KEYPAD+0x1b6>
			Keypad[0] = DISPLAY_INPUT1[7] & 0x0F;
 8003d54:	4b39      	ldr	r3, [pc, #228]	@ (8003e3c <VT_KEYPAD+0x244>)
 8003d56:	79db      	ldrb	r3, [r3, #7]
 8003d58:	f003 030f 	and.w	r3, r3, #15
 8003d5c:	b2da      	uxtb	r2, r3
 8003d5e:	4b38      	ldr	r3, [pc, #224]	@ (8003e40 <VT_KEYPAD+0x248>)
 8003d60:	701a      	strb	r2, [r3, #0]
			Keypad[1] = DISPLAY_INPUT1[8] & 0x0F;
 8003d62:	4b36      	ldr	r3, [pc, #216]	@ (8003e3c <VT_KEYPAD+0x244>)
 8003d64:	7a1b      	ldrb	r3, [r3, #8]
 8003d66:	f003 030f 	and.w	r3, r3, #15
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	4b34      	ldr	r3, [pc, #208]	@ (8003e40 <VT_KEYPAD+0x248>)
 8003d6e:	705a      	strb	r2, [r3, #1]
			Keypad[2] = DISPLAY_INPUT1[9] & 0x0F;
 8003d70:	4b32      	ldr	r3, [pc, #200]	@ (8003e3c <VT_KEYPAD+0x244>)
 8003d72:	7a5b      	ldrb	r3, [r3, #9]
 8003d74:	f003 030f 	and.w	r3, r3, #15
 8003d78:	b2da      	uxtb	r2, r3
 8003d7a:	4b31      	ldr	r3, [pc, #196]	@ (8003e40 <VT_KEYPAD+0x248>)
 8003d7c:	709a      	strb	r2, [r3, #2]
			Keypad[3] = DISPLAY_INPUT1[10] & 0x0F;
 8003d7e:	4b2f      	ldr	r3, [pc, #188]	@ (8003e3c <VT_KEYPAD+0x244>)
 8003d80:	7a9b      	ldrb	r3, [r3, #10]
 8003d82:	f003 030f 	and.w	r3, r3, #15
 8003d86:	b2da      	uxtb	r2, r3
 8003d88:	4b2d      	ldr	r3, [pc, #180]	@ (8003e40 <VT_KEYPAD+0x248>)
 8003d8a:	70da      	strb	r2, [r3, #3]
			Keypad[4] = 0x04;
 8003d8c:	4b2c      	ldr	r3, [pc, #176]	@ (8003e40 <VT_KEYPAD+0x248>)
 8003d8e:	2204      	movs	r2, #4
 8003d90:	711a      	strb	r2, [r3, #4]
			for(int j = 0; j < 12; j++){
 8003d92:	2300      	movs	r3, #0
 8003d94:	603b      	str	r3, [r7, #0]
 8003d96:	e007      	b.n	8003da8 <VT_KEYPAD+0x1b0>
				DISPLAY_INPUT1[j] = 0x00;
 8003d98:	4a28      	ldr	r2, [pc, #160]	@ (8003e3c <VT_KEYPAD+0x244>)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	2200      	movs	r2, #0
 8003da0:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 12; j++){
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	3301      	adds	r3, #1
 8003da6:	603b      	str	r3, [r7, #0]
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	2b0b      	cmp	r3, #11
 8003dac:	ddf4      	ble.n	8003d98 <VT_KEYPAD+0x1a0>
			}
			//                            memset(DISPLAY_INPUT1,0,13);
		}
		HAL_UART_AbortReceive_IT(&huart1);
 8003dae:	4825      	ldr	r0, [pc, #148]	@ (8003e44 <VT_KEYPAD+0x24c>)
 8003db0:	f00b f886 	bl	800eec0 <HAL_UART_AbortReceive_IT>
		vt_value = (((int)Keypad[0]*1000)+((int)Keypad[1]*100)+((int)Keypad[2]*10)+(int)Keypad[3]);
 8003db4:	4b22      	ldr	r3, [pc, #136]	@ (8003e40 <VT_KEYPAD+0x248>)
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	461a      	mov	r2, r3
 8003dba:	0152      	lsls	r2, r2, #5
 8003dbc:	1ad2      	subs	r2, r2, r3
 8003dbe:	0092      	lsls	r2, r2, #2
 8003dc0:	4413      	add	r3, r2
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	4b1e      	ldr	r3, [pc, #120]	@ (8003e40 <VT_KEYPAD+0x248>)
 8003dc8:	785b      	ldrb	r3, [r3, #1]
 8003dca:	4619      	mov	r1, r3
 8003dcc:	0089      	lsls	r1, r1, #2
 8003dce:	440b      	add	r3, r1
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	0088      	lsls	r0, r1, #2
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	440b      	add	r3, r1
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	4413      	add	r3, r2
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	4b17      	ldr	r3, [pc, #92]	@ (8003e40 <VT_KEYPAD+0x248>)
 8003de4:	789b      	ldrb	r3, [r3, #2]
 8003de6:	4619      	mov	r1, r3
 8003de8:	0089      	lsls	r1, r1, #2
 8003dea:	440b      	add	r3, r1
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	4413      	add	r3, r2
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	4a12      	ldr	r2, [pc, #72]	@ (8003e40 <VT_KEYPAD+0x248>)
 8003df6:	78d2      	ldrb	r2, [r2, #3]
 8003df8:	4413      	add	r3, r2
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	4b12      	ldr	r3, [pc, #72]	@ (8003e48 <VT_KEYPAD+0x250>)
 8003dfe:	801a      	strh	r2, [r3, #0]
		vt_temp_value = vt_value;
 8003e00:	4b11      	ldr	r3, [pc, #68]	@ (8003e48 <VT_KEYPAD+0x250>)
 8003e02:	881a      	ldrh	r2, [r3, #0]
 8003e04:	4b11      	ldr	r3, [pc, #68]	@ (8003e4c <VT_KEYPAD+0x254>)
 8003e06:	801a      	strh	r2, [r3, #0]

		if((vt_value >= 20) && (vt_value <= 1500)){
 8003e08:	4b0f      	ldr	r3, [pc, #60]	@ (8003e48 <VT_KEYPAD+0x250>)
 8003e0a:	881b      	ldrh	r3, [r3, #0]
 8003e0c:	2b13      	cmp	r3, #19
 8003e0e:	d90c      	bls.n	8003e2a <VT_KEYPAD+0x232>
 8003e10:	4b0d      	ldr	r3, [pc, #52]	@ (8003e48 <VT_KEYPAD+0x250>)
 8003e12:	881b      	ldrh	r3, [r3, #0]
 8003e14:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d806      	bhi.n	8003e2a <VT_KEYPAD+0x232>
			intiger_val_vt_send(0x01, vt_value);
 8003e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8003e48 <VT_KEYPAD+0x250>)
 8003e1e:	881b      	ldrh	r3, [r3, #0]
 8003e20:	4619      	mov	r1, r3
 8003e22:	2001      	movs	r0, #1
 8003e24:	f7fe fa72 	bl	800230c <intiger_val_vt_send>
		}else{
			vt_value = vt_value;
		}
	}
}
 8003e28:	e003      	b.n	8003e32 <VT_KEYPAD+0x23a>
			vt_value = vt_value;
 8003e2a:	4b07      	ldr	r3, [pc, #28]	@ (8003e48 <VT_KEYPAD+0x250>)
 8003e2c:	881a      	ldrh	r2, [r3, #0]
 8003e2e:	4b06      	ldr	r3, [pc, #24]	@ (8003e48 <VT_KEYPAD+0x250>)
 8003e30:	801a      	strh	r2, [r3, #0]
}
 8003e32:	bf00      	nop
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	20001590 	.word	0x20001590
 8003e40:	200015a4 	.word	0x200015a4
 8003e44:	20000fc0 	.word	0x20000fc0
 8003e48:	20000024 	.word	0x20000024
 8003e4c:	20000034 	.word	0x20000034

08003e50 <SPI_Init>:
//..........................oxygen_sensor............
void SPI_Init(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
	HAL_SPI_Init(&hspi3);
 8003e54:	4802      	ldr	r0, [pc, #8]	@ (8003e60 <SPI_Init+0x10>)
 8003e56:	f009 f8c3 	bl	800cfe0 <HAL_SPI_Init>
}
 8003e5a:	bf00      	nop
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	20000ed8 	.word	0x20000ed8

08003e64 <MCP3551_ReadData>:
HAL_StatusTypeDef MCP3551_ReadData(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
	uint8_t txBuffer[1] = {MCP3551_START_CONVERSION_CMD};
 8003e6a:	2324      	movs	r3, #36	@ 0x24
 8003e6c:	723b      	strb	r3, [r7, #8]
	uint8_t tempBuffer[3] = {0};  // Temporary buffer
 8003e6e:	1d3b      	adds	r3, r7, #4
 8003e70:	2100      	movs	r1, #0
 8003e72:	460a      	mov	r2, r1
 8003e74:	801a      	strh	r2, [r3, #0]
 8003e76:	460a      	mov	r2, r1
 8003e78:	709a      	strb	r2, [r3, #2]
	uint32_t rawData = 0;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8003e7e:	2200      	movs	r2, #0
 8003e80:	2110      	movs	r1, #16
 8003e82:	481b      	ldr	r0, [pc, #108]	@ (8003ef0 <MCP3551_ReadData+0x8c>)
 8003e84:	f007 ff06 	bl	800bc94 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, txBuffer, 1, HAL_MAX_DELAY); // Send command
 8003e88:	f107 0108 	add.w	r1, r7, #8
 8003e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e90:	2201      	movs	r2, #1
 8003e92:	4818      	ldr	r0, [pc, #96]	@ (8003ef4 <MCP3551_ReadData+0x90>)
 8003e94:	f009 f92d 	bl	800d0f2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, tempBuffer, 3, HAL_MAX_DELAY); // Read ADC data
 8003e98:	1d39      	adds	r1, r7, #4
 8003e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e9e:	2203      	movs	r2, #3
 8003ea0:	4814      	ldr	r0, [pc, #80]	@ (8003ef4 <MCP3551_ReadData+0x90>)
 8003ea2:	f009 fa6a 	bl	800d37a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	2110      	movs	r1, #16
 8003eaa:	4811      	ldr	r0, [pc, #68]	@ (8003ef0 <MCP3551_ReadData+0x8c>)
 8003eac:	f007 fef2 	bl	800bc94 <HAL_GPIO_WritePin>

	// Combine received bytes into a 24-bit number
	rawData = ((uint32_t)tempBuffer[0] << 16) | ((uint32_t)tempBuffer[1] << 8) | tempBuffer[2];
 8003eb0:	793b      	ldrb	r3, [r7, #4]
 8003eb2:	041a      	lsls	r2, r3, #16
 8003eb4:	797b      	ldrb	r3, [r7, #5]
 8003eb6:	021b      	lsls	r3, r3, #8
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	79ba      	ldrb	r2, [r7, #6]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	60fb      	str	r3, [r7, #12]

	// Ignore erroneous max values (0xFFFFFF)
	if (rawData == 0xFFFFFF)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d101      	bne.n	8003ece <MCP3551_ReadData+0x6a>
	{
		return HAL_ERROR; // Signal an error to avoid processing invalid data
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e00c      	b.n	8003ee8 <MCP3551_ReadData+0x84>
	}

	// MCP3551 is a 24-bit signed ADC, apply sign extension for 32-bit storage
	if (rawData & 0x800000)  // Check if the sign bit is set (MSB of 24-bit)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d003      	beq.n	8003ee0 <MCP3551_ReadData+0x7c>
	{
		rawData |= 0xFF000000; // Sign-extend to 32-bit (keep negative values correct)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ede:	60fb      	str	r3, [r7, #12]
	}

	adcValue = rawData; // Store corrected ADC value
 8003ee0:	4a05      	ldr	r2, [pc, #20]	@ (8003ef8 <MCP3551_ReadData+0x94>)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6013      	str	r3, [r2, #0]
	return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	40020000 	.word	0x40020000
 8003ef4:	20000ed8 	.word	0x20000ed8
 8003ef8:	200011d0 	.word	0x200011d0

08003efc <oxy_per>:

void oxy_per(void) {
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b088      	sub	sp, #32
 8003f00:	af00      	add	r7, sp, #0
	uint8_t send_intiger_val[8] = { 0x5A, 0xA5, 0x05, 0x82, 0x10, 0x68, 0x00,
 8003f02:	4a27      	ldr	r2, [pc, #156]	@ (8003fa0 <oxy_per+0xa4>)
 8003f04:	f107 0310 	add.w	r3, r7, #16
 8003f08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f0c:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	uint8_t msb = 0x00;
 8003f10:	2300      	movs	r3, #0
 8003f12:	77fb      	strb	r3, [r7, #31]
	uint8_t lsb = 0x00;
 8003f14:	2300      	movs	r3, #0
 8003f16:	77bb      	strb	r3, [r7, #30]
	int value = 0.0;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	61bb      	str	r3, [r7, #24]
	//MV_value_var = (sensor_flow_for_vt * RR_temp_value) / 1000;
	//value = MV_value_var * 100;
	value = Percent;
 8003f1c:	4b21      	ldr	r3, [pc, #132]	@ (8003fa4 <oxy_per+0xa8>)
 8003f1e:	edd3 7a00 	vldr	s15, [r3]
 8003f22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f26:	ee17 3a90 	vmov	r3, s15
 8003f2a:	61bb      	str	r3, [r7, #24]
	char temp_float_data[4] = { 0, 0, 0, 0 };
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	60fb      	str	r3, [r7, #12]
	char float_hexStr[5];

	sprintf(temp_float_data, "%X", value);
 8003f30:	f107 030c 	add.w	r3, r7, #12
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	491c      	ldr	r1, [pc, #112]	@ (8003fa8 <oxy_per+0xac>)
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f00f faf7 	bl	801352c <siprintf>
	sprintf("hex %s", temp_float_data);
 8003f3e:	f107 030c 	add.w	r3, r7, #12
 8003f42:	4619      	mov	r1, r3
 8003f44:	4819      	ldr	r0, [pc, #100]	@ (8003fac <oxy_per+0xb0>)
 8003f46:	f00f faf1 	bl	801352c <siprintf>
	float_hexStr[0] = temp_float_data[0];
 8003f4a:	7b3b      	ldrb	r3, [r7, #12]
 8003f4c:	713b      	strb	r3, [r7, #4]
	float_hexStr[1] = temp_float_data[1];
 8003f4e:	7b7b      	ldrb	r3, [r7, #13]
 8003f50:	717b      	strb	r3, [r7, #5]
	float_hexStr[2] = temp_float_data[2];
 8003f52:	7bbb      	ldrb	r3, [r7, #14]
 8003f54:	71bb      	strb	r3, [r7, #6]
	float_hexStr[3] = temp_float_data[3];
 8003f56:	7bfb      	ldrb	r3, [r7, #15]
 8003f58:	71fb      	strb	r3, [r7, #7]
	float_hexStr[4] = '\0';
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	723b      	strb	r3, [r7, #8]
	result4 = (uint16_t) strtol(float_hexStr, NULL, 16);
 8003f5e:	1d3b      	adds	r3, r7, #4
 8003f60:	2210      	movs	r2, #16
 8003f62:	2100      	movs	r1, #0
 8003f64:	4618      	mov	r0, r3
 8003f66:	f00f fad7 	bl	8013518 <strtol>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	4b10      	ldr	r3, [pc, #64]	@ (8003fb0 <oxy_per+0xb4>)
 8003f70:	801a      	strh	r2, [r3, #0]
	lsb = result4;
 8003f72:	4b0f      	ldr	r3, [pc, #60]	@ (8003fb0 <oxy_per+0xb4>)
 8003f74:	881b      	ldrh	r3, [r3, #0]
 8003f76:	77bb      	strb	r3, [r7, #30]
	msb = result4 >> 8;
 8003f78:	4b0d      	ldr	r3, [pc, #52]	@ (8003fb0 <oxy_per+0xb4>)
 8003f7a:	881b      	ldrh	r3, [r3, #0]
 8003f7c:	0a1b      	lsrs	r3, r3, #8
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	77fb      	strb	r3, [r7, #31]
	send_intiger_val[6] = msb;
 8003f82:	7ffb      	ldrb	r3, [r7, #31]
 8003f84:	75bb      	strb	r3, [r7, #22]
	send_intiger_val[7] = lsb;
 8003f86:	7fbb      	ldrb	r3, [r7, #30]
 8003f88:	75fb      	strb	r3, [r7, #23]
	//        HAL_UART_Transmit(&huart1, send_integer_val, 8, HAL_MAX_DELAY);

	//    send_intiger_val[7] = MV_data;
	HAL_UART_Transmit(&huart1, send_intiger_val, sizeof(send_intiger_val),
 8003f8a:	f107 0110 	add.w	r1, r7, #16
 8003f8e:	2301      	movs	r3, #1
 8003f90:	2208      	movs	r2, #8
 8003f92:	4808      	ldr	r0, [pc, #32]	@ (8003fb4 <oxy_per+0xb8>)
 8003f94:	f00a febe 	bl	800ed14 <HAL_UART_Transmit>
			1);
}
 8003f98:	bf00      	nop
 8003f9a:	3720      	adds	r7, #32
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	08014158 	.word	0x08014158
 8003fa4:	20001570 	.word	0x20001570
 8003fa8:	08014124 	.word	0x08014124
 8003fac:	08014128 	.word	0x08014128
 8003fb0:	200016e2 	.word	0x200016e2
 8003fb4:	20000fc0 	.word	0x20000fc0

08003fb8 <convert_ADC_to_Percentage>:
float convert_ADC_to_Percentage(uint32_t adcValue) {
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
	Oxygen = ((float)adcValue / 6221656) * 100;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	ee07 3a90 	vmov	s15, r3
 8003fc6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003fca:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8004030 <convert_ADC_to_Percentage+0x78>
 8003fce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fd2:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8004034 <convert_ADC_to_Percentage+0x7c>
 8003fd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fda:	4b17      	ldr	r3, [pc, #92]	@ (8004038 <convert_ADC_to_Percentage+0x80>)
 8003fdc:	edc3 7a00 	vstr	s15, [r3]
	Percent = ((float)adcValue / 6221656) * 1000;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	ee07 3a90 	vmov	s15, r3
 8003fe6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003fea:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8004030 <convert_ADC_to_Percentage+0x78>
 8003fee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ff2:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800403c <convert_ADC_to_Percentage+0x84>
 8003ff6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ffa:	4b11      	ldr	r3, [pc, #68]	@ (8004040 <convert_ADC_to_Percentage+0x88>)
 8003ffc:	edc3 7a00 	vstr	s15, [r3]
	if(Percent >= 1000){
 8004000:	4b0f      	ldr	r3, [pc, #60]	@ (8004040 <convert_ADC_to_Percentage+0x88>)
 8004002:	edd3 7a00 	vldr	s15, [r3]
 8004006:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800403c <convert_ADC_to_Percentage+0x84>
 800400a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800400e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004012:	db02      	blt.n	800401a <convert_ADC_to_Percentage+0x62>
		Percent =1000;
 8004014:	4b0a      	ldr	r3, [pc, #40]	@ (8004040 <convert_ADC_to_Percentage+0x88>)
 8004016:	4a0b      	ldr	r2, [pc, #44]	@ (8004044 <convert_ADC_to_Percentage+0x8c>)
 8004018:	601a      	str	r2, [r3, #0]

	}// 2^24 - 1 = 16777215
	return Percent;
 800401a:	4b09      	ldr	r3, [pc, #36]	@ (8004040 <convert_ADC_to_Percentage+0x88>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	ee07 3a90 	vmov	s15, r3
}
 8004022:	eeb0 0a67 	vmov.f32	s0, s15
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	4abddeb0 	.word	0x4abddeb0
 8004034:	42c80000 	.word	0x42c80000
 8004038:	20001574 	.word	0x20001574
 800403c:	447a0000 	.word	0x447a0000
 8004040:	20001570 	.word	0x20001570
 8004044:	447a0000 	.word	0x447a0000

08004048 <SPI_Write>:


void SPI_Write(uint8_t *data, uint8_t len){
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	460b      	mov	r3, r1
 8004052:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(&W25Q_SPI, data, len, 1100);
 8004054:	78fb      	ldrb	r3, [r7, #3]
 8004056:	b29a      	uxth	r2, r3
 8004058:	f240 434c 	movw	r3, #1100	@ 0x44c
 800405c:	6879      	ldr	r1, [r7, #4]
 800405e:	4803      	ldr	r0, [pc, #12]	@ (800406c <SPI_Write+0x24>)
 8004060:	f009 f847 	bl	800d0f2 <HAL_SPI_Transmit>
}
 8004064:	bf00      	nop
 8004066:	3708      	adds	r7, #8
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	20000e80 	.word	0x20000e80

08004070 <SPI_Read>:
void SPI_Read(uint8_t *data, uint32_t len){
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
	HAL_SPI_Receive(&W25Q_SPI, data, len, 1100);
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	b29a      	uxth	r2, r3
 800407e:	f240 434c 	movw	r3, #1100	@ 0x44c
 8004082:	6879      	ldr	r1, [r7, #4]
 8004084:	4803      	ldr	r0, [pc, #12]	@ (8004094 <SPI_Read+0x24>)
 8004086:	f009 f978 	bl	800d37a <HAL_SPI_Receive>
}
 800408a:	bf00      	nop
 800408c:	3708      	adds	r7, #8
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	20000e80 	.word	0x20000e80

08004098 <W25Q_Read>:
	csLOW();
	SPI_Write(tDATA, 2);
	csHIGH();
	osDelay(500);
}
void W25Q_Read(uint32_t startPage, uint8_t offset, uint32_t size, uint8_t *rData){
 8004098:	b580      	push	{r7, lr}
 800409a:	b088      	sub	sp, #32
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	607a      	str	r2, [r7, #4]
 80040a2:	603b      	str	r3, [r7, #0]
 80040a4:	460b      	mov	r3, r1
 80040a6:	72fb      	strb	r3, [r7, #11]
	uint8_t tData[5];
	uint32_t memAddress = (startPage * 256) + offset;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	021a      	lsls	r2, r3, #8
 80040ac:	7afb      	ldrb	r3, [r7, #11]
 80040ae:	4413      	add	r3, r2
 80040b0:	61fb      	str	r3, [r7, #28]
	if(numBLOCK < 1024){
		tData[0] = 0x03;
 80040b2:	2303      	movs	r3, #3
 80040b4:	753b      	strb	r3, [r7, #20]
		tData[1] = (memAddress >> 16) & 0xFF;
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	0c1b      	lsrs	r3, r3, #16
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	757b      	strb	r3, [r7, #21]
		tData[2] = (memAddress >> 8) & 0xFF;
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	0a1b      	lsrs	r3, r3, #8
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	75bb      	strb	r3, [r7, #22]
		tData[3] = (memAddress) & 0xFF;
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	75fb      	strb	r3, [r7, #23]
	}
	csLOW();
 80040cc:	2200      	movs	r2, #0
 80040ce:	2101      	movs	r1, #1
 80040d0:	480a      	ldr	r0, [pc, #40]	@ (80040fc <W25Q_Read+0x64>)
 80040d2:	f007 fddf 	bl	800bc94 <HAL_GPIO_WritePin>
	SPI_Write(tData, 4);
 80040d6:	f107 0314 	add.w	r3, r7, #20
 80040da:	2104      	movs	r1, #4
 80040dc:	4618      	mov	r0, r3
 80040de:	f7ff ffb3 	bl	8004048 <SPI_Write>
	SPI_Read(rData, size);
 80040e2:	6879      	ldr	r1, [r7, #4]
 80040e4:	6838      	ldr	r0, [r7, #0]
 80040e6:	f7ff ffc3 	bl	8004070 <SPI_Read>
	csHIGH();
 80040ea:	2201      	movs	r2, #1
 80040ec:	2101      	movs	r1, #1
 80040ee:	4803      	ldr	r0, [pc, #12]	@ (80040fc <W25Q_Read+0x64>)
 80040f0:	f007 fdd0 	bl	800bc94 <HAL_GPIO_WritePin>

}
 80040f4:	bf00      	nop
 80040f6:	3720      	adds	r7, #32
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	40020400 	.word	0x40020400

08004100 <W25Q_Read1>:

void W25Q_Read1(uint32_t startPage, uint8_t offset, uint32_t size, uint16_t *rData) {
 8004100:	b580      	push	{r7, lr}
 8004102:	b08a      	sub	sp, #40	@ 0x28
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	607a      	str	r2, [r7, #4]
 800410a:	603b      	str	r3, [r7, #0]
 800410c:	460b      	mov	r3, r1
 800410e:	72fb      	strb	r3, [r7, #11]
	uint8_t tData[5];
	uint32_t memAddress = (startPage * 256) + offset;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	021a      	lsls	r2, r3, #8
 8004114:	7afb      	ldrb	r3, [r7, #11]
 8004116:	4413      	add	r3, r2
 8004118:	623b      	str	r3, [r7, #32]
	uint32_t numBytesToRead = size * 2;  // size in uint16_t, so bytes = size * 2
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	61fb      	str	r3, [r7, #28]
	uint8_t *readBuffer = malloc(numBytesToRead);
 8004120:	69f8      	ldr	r0, [r7, #28]
 8004122:	f00f f8c1 	bl	80132a8 <malloc>
 8004126:	4603      	mov	r3, r0
 8004128:	61bb      	str	r3, [r7, #24]
	if (readBuffer == NULL) {
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d045      	beq.n	80041bc <W25Q_Read1+0xbc>
		// Handle malloc failure
		return;
	}

	if (numBLOCK < 1024) {
		tData[0] = 0x03;  // Read data command
 8004130:	2303      	movs	r3, #3
 8004132:	743b      	strb	r3, [r7, #16]
		tData[1] = (memAddress >> 16) & 0xFF;
 8004134:	6a3b      	ldr	r3, [r7, #32]
 8004136:	0c1b      	lsrs	r3, r3, #16
 8004138:	b2db      	uxtb	r3, r3
 800413a:	747b      	strb	r3, [r7, #17]
		tData[2] = (memAddress >> 8) & 0xFF;
 800413c:	6a3b      	ldr	r3, [r7, #32]
 800413e:	0a1b      	lsrs	r3, r3, #8
 8004140:	b2db      	uxtb	r3, r3
 8004142:	74bb      	strb	r3, [r7, #18]
		tData[3] = memAddress & 0xFF;
 8004144:	6a3b      	ldr	r3, [r7, #32]
 8004146:	b2db      	uxtb	r3, r3
 8004148:	74fb      	strb	r3, [r7, #19]
	}

	csLOW();
 800414a:	2200      	movs	r2, #0
 800414c:	2101      	movs	r1, #1
 800414e:	481d      	ldr	r0, [pc, #116]	@ (80041c4 <W25Q_Read1+0xc4>)
 8004150:	f007 fda0 	bl	800bc94 <HAL_GPIO_WritePin>
	SPI_Write(tData, 4);
 8004154:	f107 0310 	add.w	r3, r7, #16
 8004158:	2104      	movs	r1, #4
 800415a:	4618      	mov	r0, r3
 800415c:	f7ff ff74 	bl	8004048 <SPI_Write>
	SPI_Read(readBuffer, numBytesToRead);
 8004160:	69f9      	ldr	r1, [r7, #28]
 8004162:	69b8      	ldr	r0, [r7, #24]
 8004164:	f7ff ff84 	bl	8004070 <SPI_Read>
	csHIGH();
 8004168:	2201      	movs	r2, #1
 800416a:	2101      	movs	r1, #1
 800416c:	4815      	ldr	r0, [pc, #84]	@ (80041c4 <W25Q_Read1+0xc4>)
 800416e:	f007 fd91 	bl	800bc94 <HAL_GPIO_WritePin>

	// Convert bytes to uint16_t words (big endian)
	for (uint32_t i = 0; i < size; i++) {
 8004172:	2300      	movs	r3, #0
 8004174:	627b      	str	r3, [r7, #36]	@ 0x24
 8004176:	e019      	b.n	80041ac <W25Q_Read1+0xac>
		rData[i] = ((uint16_t)readBuffer[2*i] << 8) | readBuffer[2*i + 1];
 8004178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800417a:	005b      	lsls	r3, r3, #1
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	4413      	add	r3, r2
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	b21b      	sxth	r3, r3
 8004184:	021b      	lsls	r3, r3, #8
 8004186:	b21a      	sxth	r2, r3
 8004188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418a:	005b      	lsls	r3, r3, #1
 800418c:	3301      	adds	r3, #1
 800418e:	69b9      	ldr	r1, [r7, #24]
 8004190:	440b      	add	r3, r1
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	b21b      	sxth	r3, r3
 8004196:	4313      	orrs	r3, r2
 8004198:	b219      	sxth	r1, r3
 800419a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	4413      	add	r3, r2
 80041a2:	b28a      	uxth	r2, r1
 80041a4:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0; i < size; i++) {
 80041a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a8:	3301      	adds	r3, #1
 80041aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80041ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d3e1      	bcc.n	8004178 <W25Q_Read1+0x78>
	}

	free(readBuffer);
 80041b4:	69b8      	ldr	r0, [r7, #24]
 80041b6:	f00f f87f 	bl	80132b8 <free>
 80041ba:	e000      	b.n	80041be <W25Q_Read1+0xbe>
		return;
 80041bc:	bf00      	nop
}
 80041be:	3728      	adds	r7, #40	@ 0x28
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	40020400 	.word	0x40020400

080041c8 <write_enable>:

void write_enable(void){
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
	uint8_t tData = 0x06;
 80041ce:	2306      	movs	r3, #6
 80041d0:	71fb      	strb	r3, [r7, #7]
	csLOW();
 80041d2:	2200      	movs	r2, #0
 80041d4:	2101      	movs	r1, #1
 80041d6:	480a      	ldr	r0, [pc, #40]	@ (8004200 <write_enable+0x38>)
 80041d8:	f007 fd5c 	bl	800bc94 <HAL_GPIO_WritePin>
	SPI_Write(&tData, 1);
 80041dc:	1dfb      	adds	r3, r7, #7
 80041de:	2101      	movs	r1, #1
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7ff ff31 	bl	8004048 <SPI_Write>
	csHIGH();
 80041e6:	2201      	movs	r2, #1
 80041e8:	2101      	movs	r1, #1
 80041ea:	4805      	ldr	r0, [pc, #20]	@ (8004200 <write_enable+0x38>)
 80041ec:	f007 fd52 	bl	800bc94 <HAL_GPIO_WritePin>
	osDelay(50);
 80041f0:	2032      	movs	r0, #50	@ 0x32
 80041f2:	f00c f8e2 	bl	80103ba <osDelay>
}
 80041f6:	bf00      	nop
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	40020400 	.word	0x40020400

08004204 <write_disable>:
void write_disable(void){
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
	uint8_t tData = 0x04;
 800420a:	2304      	movs	r3, #4
 800420c:	71fb      	strb	r3, [r7, #7]
	csLOW();
 800420e:	2200      	movs	r2, #0
 8004210:	2101      	movs	r1, #1
 8004212:	480a      	ldr	r0, [pc, #40]	@ (800423c <write_disable+0x38>)
 8004214:	f007 fd3e 	bl	800bc94 <HAL_GPIO_WritePin>
	SPI_Write(&tData, 1);
 8004218:	1dfb      	adds	r3, r7, #7
 800421a:	2101      	movs	r1, #1
 800421c:	4618      	mov	r0, r3
 800421e:	f7ff ff13 	bl	8004048 <SPI_Write>
	csHIGH();
 8004222:	2201      	movs	r2, #1
 8004224:	2101      	movs	r1, #1
 8004226:	4805      	ldr	r0, [pc, #20]	@ (800423c <write_disable+0x38>)
 8004228:	f007 fd34 	bl	800bc94 <HAL_GPIO_WritePin>
	osDelay(10);
 800422c:	200a      	movs	r0, #10
 800422e:	f00c f8c4 	bl	80103ba <osDelay>
}
 8004232:	bf00      	nop
 8004234:	3708      	adds	r7, #8
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	40020400 	.word	0x40020400

08004240 <bytetoWrite>:

uint32_t bytetoWrite(uint32_t size, uint16_t offset){
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	460b      	mov	r3, r1
 800424a:	807b      	strh	r3, [r7, #2]
	if((size + offset) < 256){
 800424c:	887a      	ldrh	r2, [r7, #2]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4413      	add	r3, r2
 8004252:	2bff      	cmp	r3, #255	@ 0xff
 8004254:	d801      	bhi.n	800425a <bytetoWrite+0x1a>
		return size;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	e002      	b.n	8004260 <bytetoWrite+0x20>

	}
	else{
		return 256 - offset;
 800425a:	887b      	ldrh	r3, [r7, #2]
 800425c:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
	}
}
 8004260:	4618      	mov	r0, r3
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <erase_sector>:
void erase_sector(uint8_t numSector){
 800426c:	b580      	push	{r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af00      	add	r7, sp, #0
 8004272:	4603      	mov	r3, r0
 8004274:	71fb      	strb	r3, [r7, #7]
	uint8_t tData[6];
	uint32_t memAddress = numSector * 16 * 256;
 8004276:	79fb      	ldrb	r3, [r7, #7]
 8004278:	031b      	lsls	r3, r3, #12
 800427a:	617b      	str	r3, [r7, #20]

	write_enable();
 800427c:	f7ff ffa4 	bl	80041c8 <write_enable>
	if(numBLOCK < 512){
		tData[0] = 0x20;
 8004280:	2320      	movs	r3, #32
 8004282:	733b      	strb	r3, [r7, #12]
		tData[1] = (memAddress >> 24) & 0xFF;
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	0e1b      	lsrs	r3, r3, #24
 8004288:	b2db      	uxtb	r3, r3
 800428a:	737b      	strb	r3, [r7, #13]
		tData[2] = (memAddress >> 16) & 0xFF;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	0c1b      	lsrs	r3, r3, #16
 8004290:	b2db      	uxtb	r3, r3
 8004292:	73bb      	strb	r3, [r7, #14]
		tData[3] = (memAddress >> 8) & 0xFF;
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	0a1b      	lsrs	r3, r3, #8
 8004298:	b2db      	uxtb	r3, r3
 800429a:	73fb      	strb	r3, [r7, #15]
		tData[4] = (memAddress ) & 0xFF;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	743b      	strb	r3, [r7, #16]

		csLOW();
 80042a2:	2200      	movs	r2, #0
 80042a4:	2101      	movs	r1, #1
 80042a6:	480c      	ldr	r0, [pc, #48]	@ (80042d8 <erase_sector+0x6c>)
 80042a8:	f007 fcf4 	bl	800bc94 <HAL_GPIO_WritePin>
		SPI_Write(tData, 4);
 80042ac:	f107 030c 	add.w	r3, r7, #12
 80042b0:	2104      	movs	r1, #4
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7ff fec8 	bl	8004048 <SPI_Write>
		csHIGH();
 80042b8:	2201      	movs	r2, #1
 80042ba:	2101      	movs	r1, #1
 80042bc:	4806      	ldr	r0, [pc, #24]	@ (80042d8 <erase_sector+0x6c>)
 80042be:	f007 fce9 	bl	800bc94 <HAL_GPIO_WritePin>
	}
	osDelay(450);
 80042c2:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 80042c6:	f00c f878 	bl	80103ba <osDelay>
	write_disable();
 80042ca:	f7ff ff9b 	bl	8004204 <write_disable>

}
 80042ce:	bf00      	nop
 80042d0:	3718      	adds	r7, #24
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	40020400 	.word	0x40020400

080042dc <W25Q_Write_Page>:


void W25Q_Write_Page(uint32_t page, uint16_t offset, uint32_t size, uint8_t *data){
 80042dc:	b590      	push	{r4, r7, lr}
 80042de:	b0d5      	sub	sp, #340	@ 0x154
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	f507 74a8 	add.w	r4, r7, #336	@ 0x150
 80042e6:	f5a4 74a2 	sub.w	r4, r4, #324	@ 0x144
 80042ea:	6020      	str	r0, [r4, #0]
 80042ec:	4608      	mov	r0, r1
 80042ee:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 80042f2:	f5a1 71a6 	sub.w	r1, r1, #332	@ 0x14c
 80042f6:	600a      	str	r2, [r1, #0]
 80042f8:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 80042fc:	f5a2 72a8 	sub.w	r2, r2, #336	@ 0x150
 8004300:	6013      	str	r3, [r2, #0]
 8004302:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8004306:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 800430a:	4602      	mov	r2, r0
 800430c:	801a      	strh	r2, [r3, #0]
	uint8_t tData[266];
	uint32_t startPage = page;
 800430e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8004312:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
	uint32_t endPage = startPage + ((size + offset - 1) / 256);
 800431c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8004320:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8004324:	881a      	ldrh	r2, [r3, #0]
 8004326:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800432a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4413      	add	r3, r2
 8004332:	3b01      	subs	r3, #1
 8004334:	0a1b      	lsrs	r3, r3, #8
 8004336:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800433a:	4413      	add	r3, r2
 800433c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
	uint32_t numPage = endPage - startPage + 1;
 8004340:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8004344:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	3301      	adds	r3, #1
 800434c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

	uint16_t startSector = startPage / 16;
 8004350:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004354:	091b      	lsrs	r3, r3, #4
 8004356:	f8a7 314a 	strh.w	r3, [r7, #330]	@ 0x14a
	uint16_t endSector = endPage / 16;
 800435a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800435e:	091b      	lsrs	r3, r3, #4
 8004360:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
	uint16_t numSector = endSector - startSector + 1;
 8004364:	f8b7 212e 	ldrh.w	r2, [r7, #302]	@ 0x12e
 8004368:	f8b7 314a 	ldrh.w	r3, [r7, #330]	@ 0x14a
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	b29b      	uxth	r3, r3
 8004370:	3301      	adds	r3, #1
 8004372:	f8a7 312c 	strh.w	r3, [r7, #300]	@ 0x12c
	for (uint8_t i = 0; i < numSector; i++){
 8004376:	2300      	movs	r3, #0
 8004378:	f887 3149 	strb.w	r3, [r7, #329]	@ 0x149
 800437c:	e00d      	b.n	800439a <W25Q_Write_Page+0xbe>
		erase_sector(startSector++);
 800437e:	f8b7 314a 	ldrh.w	r3, [r7, #330]	@ 0x14a
 8004382:	1c5a      	adds	r2, r3, #1
 8004384:	f8a7 214a 	strh.w	r2, [r7, #330]	@ 0x14a
 8004388:	b2db      	uxtb	r3, r3
 800438a:	4618      	mov	r0, r3
 800438c:	f7ff ff6e 	bl	800426c <erase_sector>
	for (uint8_t i = 0; i < numSector; i++){
 8004390:	f897 3149 	ldrb.w	r3, [r7, #329]	@ 0x149
 8004394:	3301      	adds	r3, #1
 8004396:	f887 3149 	strb.w	r3, [r7, #329]	@ 0x149
 800439a:	f897 3149 	ldrb.w	r3, [r7, #329]	@ 0x149
 800439e:	b29b      	uxth	r3, r3
 80043a0:	f8b7 212c 	ldrh.w	r2, [r7, #300]	@ 0x12c
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d8ea      	bhi.n	800437e <W25Q_Write_Page+0xa2>
	}
	uint32_t dataPosition = 0;
 80043a8:	2300      	movs	r3, #0
 80043aa:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
	for(uint8_t i = 0; i < numPage; i++){
 80043ae:	2300      	movs	r3, #0
 80043b0:	f887 3143 	strb.w	r3, [r7, #323]	@ 0x143
 80043b4:	e0ab      	b.n	800450e <W25Q_Write_Page+0x232>
		uint32_t memAddress = (startPage * 256) + offset;
 80043b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043ba:	021a      	lsls	r2, r3, #8
 80043bc:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80043c0:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 80043c4:	881b      	ldrh	r3, [r3, #0]
 80043c6:	4413      	add	r3, r2
 80043c8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
		uint16_t bytesRemaining = bytetoWrite(size, offset);
 80043cc:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80043d0:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 80043d4:	881a      	ldrh	r2, [r3, #0]
 80043d6:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80043da:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80043de:	4611      	mov	r1, r2
 80043e0:	6818      	ldr	r0, [r3, #0]
 80043e2:	f7ff ff2d 	bl	8004240 <bytetoWrite>
 80043e6:	4603      	mov	r3, r0
 80043e8:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
		uint32_t index = 0;
 80043ec:	2300      	movs	r3, #0
 80043ee:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c

		write_enable();
 80043f2:	f7ff fee9 	bl	80041c8 <write_enable>
		if(numBLOCK < 512){
			tData[0] = 0x02;
 80043f6:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80043fa:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80043fe:	2202      	movs	r2, #2
 8004400:	701a      	strb	r2, [r3, #0]
			tData[1] = (memAddress >> 16) & 0xFF;
 8004402:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004406:	0c1b      	lsrs	r3, r3, #16
 8004408:	b2da      	uxtb	r2, r3
 800440a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800440e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004412:	705a      	strb	r2, [r3, #1]
			tData[2] = (memAddress >> 8) & 0xFF;
 8004414:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004418:	0a1b      	lsrs	r3, r3, #8
 800441a:	b2da      	uxtb	r2, r3
 800441c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8004420:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004424:	709a      	strb	r2, [r3, #2]
			tData[3] = (memAddress) & 0xFF;
 8004426:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800442a:	b2da      	uxtb	r2, r3
 800442c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8004430:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004434:	70da      	strb	r2, [r3, #3]
			index = 4;
 8004436:	2304      	movs	r3, #4
 8004438:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
		}

		uint32_t bytestoSend = bytesRemaining + index;
 800443c:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8004440:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8004444:	4413      	add	r3, r2
 8004446:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
		for(uint8_t i = 0; i < bytesRemaining; i++){
 800444a:	2300      	movs	r3, #0
 800444c:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
 8004450:	e01a      	b.n	8004488 <W25Q_Write_Page+0x1ac>
			tData[index++] = data[i + dataPosition];
 8004452:	f897 213b 	ldrb.w	r2, [r7, #315]	@ 0x13b
 8004456:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800445a:	4413      	add	r3, r2
 800445c:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8004460:	f5a2 72a8 	sub.w	r2, r2, #336	@ 0x150
 8004464:	6812      	ldr	r2, [r2, #0]
 8004466:	441a      	add	r2, r3
 8004468:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800446c:	1c59      	adds	r1, r3, #1
 800446e:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
 8004472:	7811      	ldrb	r1, [r2, #0]
 8004474:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8004478:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 800447c:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0; i < bytesRemaining; i++){
 800447e:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 8004482:	3301      	adds	r3, #1
 8004484:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
 8004488:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 800448c:	b29b      	uxth	r3, r3
 800448e:	f8b7 2126 	ldrh.w	r2, [r7, #294]	@ 0x126
 8004492:	429a      	cmp	r2, r3
 8004494:	d8dd      	bhi.n	8004452 <W25Q_Write_Page+0x176>
		}
		csLOW();
 8004496:	2200      	movs	r2, #0
 8004498:	2101      	movs	r1, #1
 800449a:	4823      	ldr	r0, [pc, #140]	@ (8004528 <W25Q_Write_Page+0x24c>)
 800449c:	f007 fbfa 	bl	800bc94 <HAL_GPIO_WritePin>
		SPI_Write(tData, bytestoSend);
 80044a0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	f107 0314 	add.w	r3, r7, #20
 80044aa:	4611      	mov	r1, r2
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7ff fdcb 	bl	8004048 <SPI_Write>
		csHIGH();
 80044b2:	2201      	movs	r2, #1
 80044b4:	2101      	movs	r1, #1
 80044b6:	481c      	ldr	r0, [pc, #112]	@ (8004528 <W25Q_Write_Page+0x24c>)
 80044b8:	f007 fbec 	bl	800bc94 <HAL_GPIO_WritePin>
		startPage++;
 80044bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80044c0:	3301      	adds	r3, #1
 80044c2:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
		offset = 0;
 80044c6:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80044ca:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 80044ce:	2200      	movs	r2, #0
 80044d0:	801a      	strh	r2, [r3, #0]
		size = size - bytesRemaining;
 80044d2:	f8b7 2126 	ldrh.w	r2, [r7, #294]	@ 0x126
 80044d6:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80044da:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80044de:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 80044e2:	f5a1 71a6 	sub.w	r1, r1, #332	@ 0x14c
 80044e6:	6809      	ldr	r1, [r1, #0]
 80044e8:	1a8a      	subs	r2, r1, r2
 80044ea:	601a      	str	r2, [r3, #0]
		dataPosition = dataPosition + bytesRemaining;
 80044ec:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 80044f0:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80044f4:	4413      	add	r3, r2
 80044f6:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144

		osDelay(10);
 80044fa:	200a      	movs	r0, #10
 80044fc:	f00b ff5d 	bl	80103ba <osDelay>
		write_disable();
 8004500:	f7ff fe80 	bl	8004204 <write_disable>
	for(uint8_t i = 0; i < numPage; i++){
 8004504:	f897 3143 	ldrb.w	r3, [r7, #323]	@ 0x143
 8004508:	3301      	adds	r3, #1
 800450a:	f887 3143 	strb.w	r3, [r7, #323]	@ 0x143
 800450e:	f897 3143 	ldrb.w	r3, [r7, #323]	@ 0x143
 8004512:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8004516:	429a      	cmp	r2, r3
 8004518:	f63f af4d 	bhi.w	80043b6 <W25Q_Write_Page+0xda>
	}
}
 800451c:	bf00      	nop
 800451e:	bf00      	nop
 8004520:	f507 77aa 	add.w	r7, r7, #340	@ 0x154
 8004524:	46bd      	mov	sp, r7
 8004526:	bd90      	pop	{r4, r7, pc}
 8004528:	40020400 	.word	0x40020400

0800452c <W25Q_Write_Page1>:

void W25Q_Write_Page1(uint32_t page, uint16_t offset, uint32_t size, uint16_t *data){
 800452c:	b590      	push	{r4, r7, lr}
 800452e:	b0d3      	sub	sp, #332	@ 0x14c
 8004530:	af00      	add	r7, sp, #0
 8004532:	f507 74a4 	add.w	r4, r7, #328	@ 0x148
 8004536:	f5a4 749e 	sub.w	r4, r4, #316	@ 0x13c
 800453a:	6020      	str	r0, [r4, #0]
 800453c:	4608      	mov	r0, r1
 800453e:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 8004542:	f5a1 71a2 	sub.w	r1, r1, #324	@ 0x144
 8004546:	600a      	str	r2, [r1, #0]
 8004548:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800454c:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 8004550:	6013      	str	r3, [r2, #0]
 8004552:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004556:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 800455a:	4602      	mov	r2, r0
 800455c:	801a      	strh	r2, [r3, #0]
	uint8_t tData[266];
	uint32_t startPage = page;
 800455e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004562:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
	uint32_t endPage = startPage + ((size + offset - 1) / 256);
 800456c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004570:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8004574:	881a      	ldrh	r2, [r3, #0]
 8004576:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800457a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4413      	add	r3, r2
 8004582:	3b01      	subs	r3, #1
 8004584:	0a1b      	lsrs	r3, r3, #8
 8004586:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800458a:	4413      	add	r3, r2
 800458c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	uint32_t numPage = endPage - startPage + 1;
 8004590:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8004594:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	3301      	adds	r3, #1
 800459c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128

	uint16_t startSector = startPage / 16;
 80045a0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80045a4:	091b      	lsrs	r3, r3, #4
 80045a6:	f8a7 3142 	strh.w	r3, [r7, #322]	@ 0x142
	uint16_t endSector = endPage / 16;
 80045aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80045ae:	091b      	lsrs	r3, r3, #4
 80045b0:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
	uint16_t numSector = endSector - startSector + 1;
 80045b4:	f8b7 2126 	ldrh.w	r2, [r7, #294]	@ 0x126
 80045b8:	f8b7 3142 	ldrh.w	r3, [r7, #322]	@ 0x142
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	b29b      	uxth	r3, r3
 80045c0:	3301      	adds	r3, #1
 80045c2:	f8a7 3124 	strh.w	r3, [r7, #292]	@ 0x124

	// Erase all sectors involved
	for (uint8_t i = 0; i < numSector; i++){
 80045c6:	2300      	movs	r3, #0
 80045c8:	f887 3141 	strb.w	r3, [r7, #321]	@ 0x141
 80045cc:	e00d      	b.n	80045ea <W25Q_Write_Page1+0xbe>
		erase_sector(startSector++);
 80045ce:	f8b7 3142 	ldrh.w	r3, [r7, #322]	@ 0x142
 80045d2:	1c5a      	adds	r2, r3, #1
 80045d4:	f8a7 2142 	strh.w	r2, [r7, #322]	@ 0x142
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	4618      	mov	r0, r3
 80045dc:	f7ff fe46 	bl	800426c <erase_sector>
	for (uint8_t i = 0; i < numSector; i++){
 80045e0:	f897 3141 	ldrb.w	r3, [r7, #321]	@ 0x141
 80045e4:	3301      	adds	r3, #1
 80045e6:	f887 3141 	strb.w	r3, [r7, #321]	@ 0x141
 80045ea:	f897 3141 	ldrb.w	r3, [r7, #321]	@ 0x141
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	f8b7 2124 	ldrh.w	r2, [r7, #292]	@ 0x124
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d8ea      	bhi.n	80045ce <W25Q_Write_Page1+0xa2>
	}

	uint32_t dataPosition = 0;
 80045f8:	2300      	movs	r3, #0
 80045fa:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
	for(uint8_t i = 0; i < numPage; i++){
 80045fe:	2300      	movs	r3, #0
 8004600:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
 8004604:	e0dc      	b.n	80047c0 <W25Q_Write_Page1+0x294>
		uint32_t memAddress = (startPage * 256) + offset;
 8004606:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800460a:	021a      	lsls	r2, r3, #8
 800460c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004610:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8004614:	881b      	ldrh	r3, [r3, #0]
 8004616:	4413      	add	r3, r2
 8004618:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
		uint16_t bytesRemaining = bytetoWrite(size, offset);
 800461c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004620:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8004624:	881a      	ldrh	r2, [r3, #0]
 8004626:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800462a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800462e:	4611      	mov	r1, r2
 8004630:	6818      	ldr	r0, [r3, #0]
 8004632:	f7ff fe05 	bl	8004240 <bytetoWrite>
 8004636:	4603      	mov	r3, r0
 8004638:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e

		uint32_t index = 0;
 800463c:	2300      	movs	r3, #0
 800463e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134

		write_enable();
 8004642:	f7ff fdc1 	bl	80041c8 <write_enable>

		if(numBLOCK < 512){
			tData[0] = 0x02;  // Page Program command
 8004646:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800464a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800464e:	2202      	movs	r2, #2
 8004650:	701a      	strb	r2, [r3, #0]
			tData[1] = (memAddress >> 16) & 0xFF;
 8004652:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004656:	0c1b      	lsrs	r3, r3, #16
 8004658:	b2da      	uxtb	r2, r3
 800465a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800465e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004662:	705a      	strb	r2, [r3, #1]
			tData[2] = (memAddress >> 8) & 0xFF;
 8004664:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004668:	0a1b      	lsrs	r3, r3, #8
 800466a:	b2da      	uxtb	r2, r3
 800466c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004670:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004674:	709a      	strb	r2, [r3, #2]
			tData[3] = memAddress & 0xFF;
 8004676:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800467a:	b2da      	uxtb	r2, r3
 800467c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8004680:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004684:	70da      	strb	r2, [r3, #3]
			index = 4;
 8004686:	2304      	movs	r3, #4
 8004688:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
		}

		// Now copy uint16_t data into tData buffer as bytes (big endian)
		// bytesRemaining is in bytes, so number of uint16_t elements to write is bytesRemaining/2
		uint16_t numWords = bytesRemaining / 2;
 800468c:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 8004690:	085b      	lsrs	r3, r3, #1
 8004692:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c

		for(uint16_t j = 0; j < numWords; j++){
 8004696:	2300      	movs	r3, #0
 8004698:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
 800469c:	e030      	b.n	8004700 <W25Q_Write_Page1+0x1d4>
			uint16_t val = data[dataPosition/2 + j];
 800469e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80046a2:	085a      	lsrs	r2, r3, #1
 80046a4:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 80046a8:	4413      	add	r3, r2
 80046aa:	005b      	lsls	r3, r3, #1
 80046ac:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 80046b0:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 80046b4:	6812      	ldr	r2, [r2, #0]
 80046b6:	4413      	add	r3, r2
 80046b8:	881b      	ldrh	r3, [r3, #0]
 80046ba:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
			tData[index++] = (val >> 8) & 0xFF;  // high byte
 80046be:	f8b7 311a 	ldrh.w	r3, [r7, #282]	@ 0x11a
 80046c2:	0a1b      	lsrs	r3, r3, #8
 80046c4:	b299      	uxth	r1, r3
 80046c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80046ca:	1c5a      	adds	r2, r3, #1
 80046cc:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 80046d0:	b2c9      	uxtb	r1, r1
 80046d2:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 80046d6:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 80046da:	54d1      	strb	r1, [r2, r3]
			tData[index++] = val & 0xFF;         // low byte
 80046dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80046e0:	1c5a      	adds	r2, r3, #1
 80046e2:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 80046e6:	f8b7 211a 	ldrh.w	r2, [r7, #282]	@ 0x11a
 80046ea:	b2d1      	uxtb	r1, r2
 80046ec:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 80046f0:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 80046f4:	54d1      	strb	r1, [r2, r3]
		for(uint16_t j = 0; j < numWords; j++){
 80046f6:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 80046fa:	3301      	adds	r3, #1
 80046fc:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
 8004700:	f8b7 2132 	ldrh.w	r2, [r7, #306]	@ 0x132
 8004704:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8004708:	429a      	cmp	r2, r3
 800470a:	d3c8      	bcc.n	800469e <W25Q_Write_Page1+0x172>
		}

		// If bytesRemaining is odd, write the last byte separately
		if(bytesRemaining % 2 != 0){
 800470c:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	b29b      	uxth	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d016      	beq.n	8004748 <W25Q_Write_Page1+0x21c>
			tData[index++] = ((uint8_t*)data)[dataPosition + bytesRemaining - 1];
 800471a:	f8b7 211e 	ldrh.w	r2, [r7, #286]	@ 0x11e
 800471e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8004722:	4413      	add	r3, r2
 8004724:	3b01      	subs	r3, #1
 8004726:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800472a:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 800472e:	6812      	ldr	r2, [r2, #0]
 8004730:	441a      	add	r2, r3
 8004732:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004736:	1c59      	adds	r1, r3, #1
 8004738:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 800473c:	7811      	ldrb	r1, [r2, #0]
 800473e:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8004742:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8004746:	54d1      	strb	r1, [r2, r3]
		}

		csLOW();
 8004748:	2200      	movs	r2, #0
 800474a:	2101      	movs	r1, #1
 800474c:	4823      	ldr	r0, [pc, #140]	@ (80047dc <W25Q_Write_Page1+0x2b0>)
 800474e:	f007 faa1 	bl	800bc94 <HAL_GPIO_WritePin>
		SPI_Write(tData, index);
 8004752:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004756:	b2da      	uxtb	r2, r3
 8004758:	f107 0310 	add.w	r3, r7, #16
 800475c:	4611      	mov	r1, r2
 800475e:	4618      	mov	r0, r3
 8004760:	f7ff fc72 	bl	8004048 <SPI_Write>
		csHIGH();
 8004764:	2201      	movs	r2, #1
 8004766:	2101      	movs	r1, #1
 8004768:	481c      	ldr	r0, [pc, #112]	@ (80047dc <W25Q_Write_Page1+0x2b0>)
 800476a:	f007 fa93 	bl	800bc94 <HAL_GPIO_WritePin>

		startPage++;
 800476e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004772:	3301      	adds	r3, #1
 8004774:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
		offset = 0;
 8004778:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800477c:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8004780:	2200      	movs	r2, #0
 8004782:	801a      	strh	r2, [r3, #0]
		size = size - bytesRemaining;
 8004784:	f8b7 211e 	ldrh.w	r2, [r7, #286]	@ 0x11e
 8004788:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800478c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004790:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 8004794:	f5a1 71a2 	sub.w	r1, r1, #324	@ 0x144
 8004798:	6809      	ldr	r1, [r1, #0]
 800479a:	1a8a      	subs	r2, r1, r2
 800479c:	601a      	str	r2, [r3, #0]
		dataPosition = dataPosition + bytesRemaining;
 800479e:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 80047a2:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 80047a6:	4413      	add	r3, r2
 80047a8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c

		osDelay(10);
 80047ac:	200a      	movs	r0, #10
 80047ae:	f00b fe04 	bl	80103ba <osDelay>
		write_disable();
 80047b2:	f7ff fd27 	bl	8004204 <write_disable>
	for(uint8_t i = 0; i < numPage; i++){
 80047b6:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 80047ba:	3301      	adds	r3, #1
 80047bc:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
 80047c0:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 80047c4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80047c8:	429a      	cmp	r2, r3
 80047ca:	f63f af1c 	bhi.w	8004606 <W25Q_Write_Page1+0xda>
	}
}
 80047ce:	bf00      	nop
 80047d0:	bf00      	nop
 80047d2:	f507 77a6 	add.w	r7, r7, #332	@ 0x14c
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd90      	pop	{r4, r7, pc}
 80047da:	bf00      	nop
 80047dc:	40020400 	.word	0x40020400

080047e0 <intiger_val_send_Backup>:


void intiger_val_send_Backup(uint8_t icon_address, uint8_t value) {
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	4603      	mov	r3, r0
 80047e8:	460a      	mov	r2, r1
 80047ea:	71fb      	strb	r3, [r7, #7]
 80047ec:	4613      	mov	r3, r2
 80047ee:	71bb      	strb	r3, [r7, #6]
	uint8_t send_intiger_val[8] = { 0x5A, 0xA5, 0x05, 0x82, 0x10, 0x00, 0x00,
 80047f0:	4a0b      	ldr	r2, [pc, #44]	@ (8004820 <intiger_val_send_Backup+0x40>)
 80047f2:	f107 0308 	add.w	r3, r7, #8
 80047f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80047fa:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	send_intiger_val[5] = 0x3F + icon_address;
 80047fe:	79fb      	ldrb	r3, [r7, #7]
 8004800:	333f      	adds	r3, #63	@ 0x3f
 8004802:	b2db      	uxtb	r3, r3
 8004804:	737b      	strb	r3, [r7, #13]
	send_intiger_val[7] = value;
 8004806:	79bb      	ldrb	r3, [r7, #6]
 8004808:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, send_intiger_val, sizeof(send_intiger_val),
 800480a:	f107 0108 	add.w	r1, r7, #8
 800480e:	2301      	movs	r3, #1
 8004810:	2208      	movs	r2, #8
 8004812:	4804      	ldr	r0, [pc, #16]	@ (8004824 <intiger_val_send_Backup+0x44>)
 8004814:	f00a fa7e 	bl	800ed14 <HAL_UART_Transmit>
			1);
}
 8004818:	bf00      	nop
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	0801411c 	.word	0x0801411c
 8004824:	20000fc0 	.word	0x20000fc0

08004828 <intiger_val_vt_send_Backup>:
void intiger_val_vt_send_Backup(uint8_t icon_address, uint16_t value) {
 8004828:	b580      	push	{r7, lr}
 800482a:	b086      	sub	sp, #24
 800482c:	af00      	add	r7, sp, #0
 800482e:	4603      	mov	r3, r0
 8004830:	460a      	mov	r2, r1
 8004832:	71fb      	strb	r3, [r7, #7]
 8004834:	4613      	mov	r3, r2
 8004836:	80bb      	strh	r3, [r7, #4]
	uint8_t send_intiger_val[8] = { 0x5A, 0xA5, 0x05, 0x82, 0x10, 0x00, 0x00,
 8004838:	4a11      	ldr	r2, [pc, #68]	@ (8004880 <intiger_val_vt_send_Backup+0x58>)
 800483a:	f107 030c 	add.w	r3, r7, #12
 800483e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004842:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	uint8_t msb = 0x00;
 8004846:	2300      	movs	r3, #0
 8004848:	75fb      	strb	r3, [r7, #23]
	uint8_t lsb = 0x00;
 800484a:	2300      	movs	r3, #0
 800484c:	75bb      	strb	r3, [r7, #22]
	lsb = value;
 800484e:	88bb      	ldrh	r3, [r7, #4]
 8004850:	75bb      	strb	r3, [r7, #22]
	msb = value >> 8;
 8004852:	88bb      	ldrh	r3, [r7, #4]
 8004854:	0a1b      	lsrs	r3, r3, #8
 8004856:	b29b      	uxth	r3, r3
 8004858:	75fb      	strb	r3, [r7, #23]
	send_intiger_val[5] = 0x3F + icon_address;
 800485a:	79fb      	ldrb	r3, [r7, #7]
 800485c:	333f      	adds	r3, #63	@ 0x3f
 800485e:	b2db      	uxtb	r3, r3
 8004860:	747b      	strb	r3, [r7, #17]
	send_intiger_val[6] = msb;
 8004862:	7dfb      	ldrb	r3, [r7, #23]
 8004864:	74bb      	strb	r3, [r7, #18]
	send_intiger_val[7] = lsb;
 8004866:	7dbb      	ldrb	r3, [r7, #22]
 8004868:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart1, send_intiger_val, sizeof(send_intiger_val),
 800486a:	f107 010c 	add.w	r1, r7, #12
 800486e:	2301      	movs	r3, #1
 8004870:	2208      	movs	r2, #8
 8004872:	4804      	ldr	r0, [pc, #16]	@ (8004884 <intiger_val_vt_send_Backup+0x5c>)
 8004874:	f00a fa4e 	bl	800ed14 <HAL_UART_Transmit>
			1);
}
 8004878:	bf00      	nop
 800487a:	3718      	adds	r7, #24
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	0801411c 	.word	0x0801411c
 8004884:	20000fc0 	.word	0x20000fc0

08004888 <dwin_data>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_dwin_data */
void dwin_data(void const * argument)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b0c2      	sub	sp, #264	@ 0x108
 800488c:	af00      	add	r7, sp, #0
 800488e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004892:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004896:	6018      	str	r0, [r3, #0]
	/* USER CODE BEGIN 5 */
	Pre_set_value_show();
 8004898:	f7fe f9fa 	bl	8002c90 <Pre_set_value_show>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 800489c:	2201      	movs	r2, #1
 800489e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80048a2:	489c      	ldr	r0, [pc, #624]	@ (8004b14 <dwin_data+0x28c>)
 80048a4:	f007 f9f6 	bl	800bc94 <HAL_GPIO_WritePin>

	/* Infinite loop */
	for(;;)
	{

		if(Data_Flag_Pressure == 9){
 80048a8:	4b9b      	ldr	r3, [pc, #620]	@ (8004b18 <dwin_data+0x290>)
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	2b09      	cmp	r3, #9
 80048ae:	d102      	bne.n	80048b6 <dwin_data+0x2e>
			Data_Flag_Pressure = 0;
 80048b0:	4b99      	ldr	r3, [pc, #612]	@ (8004b18 <dwin_data+0x290>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	701a      	strb	r2, [r3, #0]
		}
		if(Data_Flag_Pressure == 0){
 80048b6:	4b98      	ldr	r3, [pc, #608]	@ (8004b18 <dwin_data+0x290>)
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d109      	bne.n	80048d2 <dwin_data+0x4a>
			Pressure_Array_Pdata[0] = previous_pressure_first;
 80048be:	4b97      	ldr	r3, [pc, #604]	@ (8004b1c <dwin_data+0x294>)
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	ee07 3a90 	vmov	s15, r3
 80048c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ca:	4b95      	ldr	r3, [pc, #596]	@ (8004b20 <dwin_data+0x298>)
 80048cc:	edc3 7a00 	vstr	s15, [r3]
 80048d0:	e07c      	b.n	80049cc <dwin_data+0x144>
		}
		else if(Data_Flag_Pressure == 1){
 80048d2:	4b91      	ldr	r3, [pc, #580]	@ (8004b18 <dwin_data+0x290>)
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d109      	bne.n	80048ee <dwin_data+0x66>
			Pressure_Array_Pdata[1] = previous_pressure_first;
 80048da:	4b90      	ldr	r3, [pc, #576]	@ (8004b1c <dwin_data+0x294>)
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	ee07 3a90 	vmov	s15, r3
 80048e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048e6:	4b8e      	ldr	r3, [pc, #568]	@ (8004b20 <dwin_data+0x298>)
 80048e8:	edc3 7a01 	vstr	s15, [r3, #4]
 80048ec:	e06e      	b.n	80049cc <dwin_data+0x144>
		}
		else if(Data_Flag_Pressure == 2){
 80048ee:	4b8a      	ldr	r3, [pc, #552]	@ (8004b18 <dwin_data+0x290>)
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d109      	bne.n	800490a <dwin_data+0x82>
			Pressure_Array_Pdata[2] = previous_pressure_first;
 80048f6:	4b89      	ldr	r3, [pc, #548]	@ (8004b1c <dwin_data+0x294>)
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	ee07 3a90 	vmov	s15, r3
 80048fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004902:	4b87      	ldr	r3, [pc, #540]	@ (8004b20 <dwin_data+0x298>)
 8004904:	edc3 7a02 	vstr	s15, [r3, #8]
 8004908:	e060      	b.n	80049cc <dwin_data+0x144>
		}
		else if(Data_Flag_Pressure == 3){
 800490a:	4b83      	ldr	r3, [pc, #524]	@ (8004b18 <dwin_data+0x290>)
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	2b03      	cmp	r3, #3
 8004910:	d109      	bne.n	8004926 <dwin_data+0x9e>
			Pressure_Array_Pdata[3] = previous_pressure_first;
 8004912:	4b82      	ldr	r3, [pc, #520]	@ (8004b1c <dwin_data+0x294>)
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	ee07 3a90 	vmov	s15, r3
 800491a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800491e:	4b80      	ldr	r3, [pc, #512]	@ (8004b20 <dwin_data+0x298>)
 8004920:	edc3 7a03 	vstr	s15, [r3, #12]
 8004924:	e052      	b.n	80049cc <dwin_data+0x144>
		}
		else if(Data_Flag_Pressure == 4){
 8004926:	4b7c      	ldr	r3, [pc, #496]	@ (8004b18 <dwin_data+0x290>)
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	2b04      	cmp	r3, #4
 800492c:	d109      	bne.n	8004942 <dwin_data+0xba>
			Pressure_Array_Pdata[4] = previous_pressure_first;
 800492e:	4b7b      	ldr	r3, [pc, #492]	@ (8004b1c <dwin_data+0x294>)
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	ee07 3a90 	vmov	s15, r3
 8004936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800493a:	4b79      	ldr	r3, [pc, #484]	@ (8004b20 <dwin_data+0x298>)
 800493c:	edc3 7a04 	vstr	s15, [r3, #16]
 8004940:	e044      	b.n	80049cc <dwin_data+0x144>
		}
		else if(Data_Flag_Pressure == 5){
 8004942:	4b75      	ldr	r3, [pc, #468]	@ (8004b18 <dwin_data+0x290>)
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	2b05      	cmp	r3, #5
 8004948:	d109      	bne.n	800495e <dwin_data+0xd6>
			Pressure_Array_Pdata[5] = previous_pressure_first;
 800494a:	4b74      	ldr	r3, [pc, #464]	@ (8004b1c <dwin_data+0x294>)
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	ee07 3a90 	vmov	s15, r3
 8004952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004956:	4b72      	ldr	r3, [pc, #456]	@ (8004b20 <dwin_data+0x298>)
 8004958:	edc3 7a05 	vstr	s15, [r3, #20]
 800495c:	e036      	b.n	80049cc <dwin_data+0x144>
		}
		else if(Data_Flag_Pressure == 6){
 800495e:	4b6e      	ldr	r3, [pc, #440]	@ (8004b18 <dwin_data+0x290>)
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	2b06      	cmp	r3, #6
 8004964:	d109      	bne.n	800497a <dwin_data+0xf2>
			Pressure_Array_Pdata[6] = previous_pressure_first;
 8004966:	4b6d      	ldr	r3, [pc, #436]	@ (8004b1c <dwin_data+0x294>)
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	ee07 3a90 	vmov	s15, r3
 800496e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004972:	4b6b      	ldr	r3, [pc, #428]	@ (8004b20 <dwin_data+0x298>)
 8004974:	edc3 7a06 	vstr	s15, [r3, #24]
 8004978:	e028      	b.n	80049cc <dwin_data+0x144>
		}
		else if(Data_Flag_Pressure == 7){
 800497a:	4b67      	ldr	r3, [pc, #412]	@ (8004b18 <dwin_data+0x290>)
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	2b07      	cmp	r3, #7
 8004980:	d109      	bne.n	8004996 <dwin_data+0x10e>
			Pressure_Array_Pdata[7] = previous_pressure_first;
 8004982:	4b66      	ldr	r3, [pc, #408]	@ (8004b1c <dwin_data+0x294>)
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	ee07 3a90 	vmov	s15, r3
 800498a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800498e:	4b64      	ldr	r3, [pc, #400]	@ (8004b20 <dwin_data+0x298>)
 8004990:	edc3 7a07 	vstr	s15, [r3, #28]
 8004994:	e01a      	b.n	80049cc <dwin_data+0x144>
		}
		else if(Data_Flag_Pressure == 8){
 8004996:	4b60      	ldr	r3, [pc, #384]	@ (8004b18 <dwin_data+0x290>)
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	2b08      	cmp	r3, #8
 800499c:	d109      	bne.n	80049b2 <dwin_data+0x12a>
			Pressure_Array_Pdata[8] = previous_pressure_first;
 800499e:	4b5f      	ldr	r3, [pc, #380]	@ (8004b1c <dwin_data+0x294>)
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	ee07 3a90 	vmov	s15, r3
 80049a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049aa:	4b5d      	ldr	r3, [pc, #372]	@ (8004b20 <dwin_data+0x298>)
 80049ac:	edc3 7a08 	vstr	s15, [r3, #32]
 80049b0:	e00c      	b.n	80049cc <dwin_data+0x144>
		}
		else if(Data_Flag_Pressure == 9){
 80049b2:	4b59      	ldr	r3, [pc, #356]	@ (8004b18 <dwin_data+0x290>)
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	2b09      	cmp	r3, #9
 80049b8:	d108      	bne.n	80049cc <dwin_data+0x144>
			Pressure_Array_Pdata[9] = previous_pressure_first;
 80049ba:	4b58      	ldr	r3, [pc, #352]	@ (8004b1c <dwin_data+0x294>)
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	ee07 3a90 	vmov	s15, r3
 80049c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049c6:	4b56      	ldr	r3, [pc, #344]	@ (8004b20 <dwin_data+0x298>)
 80049c8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		}


		if(Data_Flag_Flow == 9){
 80049cc:	4b55      	ldr	r3, [pc, #340]	@ (8004b24 <dwin_data+0x29c>)
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	2b09      	cmp	r3, #9
 80049d2:	d102      	bne.n	80049da <dwin_data+0x152>
			Data_Flag_Flow = 0;
 80049d4:	4b53      	ldr	r3, [pc, #332]	@ (8004b24 <dwin_data+0x29c>)
 80049d6:	2200      	movs	r2, #0
 80049d8:	701a      	strb	r2, [r3, #0]
		}
		if(Data_Flag_Flow == 0){
 80049da:	4b52      	ldr	r3, [pc, #328]	@ (8004b24 <dwin_data+0x29c>)
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d109      	bne.n	80049f6 <dwin_data+0x16e>
			Flow_Array_Fdata[0] = PID_FLOW_VAR;
 80049e2:	4b51      	ldr	r3, [pc, #324]	@ (8004b28 <dwin_data+0x2a0>)
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	ee07 3a90 	vmov	s15, r3
 80049ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ee:	4b4f      	ldr	r3, [pc, #316]	@ (8004b2c <dwin_data+0x2a4>)
 80049f0:	edc3 7a00 	vstr	s15, [r3]
 80049f4:	e07c      	b.n	8004af0 <dwin_data+0x268>
		}
		else if(Data_Flag_Flow == 1){
 80049f6:	4b4b      	ldr	r3, [pc, #300]	@ (8004b24 <dwin_data+0x29c>)
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d109      	bne.n	8004a12 <dwin_data+0x18a>
			Flow_Array_Fdata[1] = PID_FLOW_VAR;
 80049fe:	4b4a      	ldr	r3, [pc, #296]	@ (8004b28 <dwin_data+0x2a0>)
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	ee07 3a90 	vmov	s15, r3
 8004a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a0a:	4b48      	ldr	r3, [pc, #288]	@ (8004b2c <dwin_data+0x2a4>)
 8004a0c:	edc3 7a01 	vstr	s15, [r3, #4]
 8004a10:	e06e      	b.n	8004af0 <dwin_data+0x268>
		}
		else if(Data_Flag_Flow == 2){
 8004a12:	4b44      	ldr	r3, [pc, #272]	@ (8004b24 <dwin_data+0x29c>)
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d109      	bne.n	8004a2e <dwin_data+0x1a6>
			Flow_Array_Fdata[2] = PID_FLOW_VAR;
 8004a1a:	4b43      	ldr	r3, [pc, #268]	@ (8004b28 <dwin_data+0x2a0>)
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	ee07 3a90 	vmov	s15, r3
 8004a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a26:	4b41      	ldr	r3, [pc, #260]	@ (8004b2c <dwin_data+0x2a4>)
 8004a28:	edc3 7a02 	vstr	s15, [r3, #8]
 8004a2c:	e060      	b.n	8004af0 <dwin_data+0x268>
		}
		else if(Data_Flag_Flow == 3){
 8004a2e:	4b3d      	ldr	r3, [pc, #244]	@ (8004b24 <dwin_data+0x29c>)
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	2b03      	cmp	r3, #3
 8004a34:	d109      	bne.n	8004a4a <dwin_data+0x1c2>
			Flow_Array_Fdata[3] = PID_FLOW_VAR;
 8004a36:	4b3c      	ldr	r3, [pc, #240]	@ (8004b28 <dwin_data+0x2a0>)
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	ee07 3a90 	vmov	s15, r3
 8004a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a42:	4b3a      	ldr	r3, [pc, #232]	@ (8004b2c <dwin_data+0x2a4>)
 8004a44:	edc3 7a03 	vstr	s15, [r3, #12]
 8004a48:	e052      	b.n	8004af0 <dwin_data+0x268>
		}
		else if(Data_Flag_Flow == 4){
 8004a4a:	4b36      	ldr	r3, [pc, #216]	@ (8004b24 <dwin_data+0x29c>)
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	2b04      	cmp	r3, #4
 8004a50:	d109      	bne.n	8004a66 <dwin_data+0x1de>
			Flow_Array_Fdata[4] = PID_FLOW_VAR;
 8004a52:	4b35      	ldr	r3, [pc, #212]	@ (8004b28 <dwin_data+0x2a0>)
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	ee07 3a90 	vmov	s15, r3
 8004a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a5e:	4b33      	ldr	r3, [pc, #204]	@ (8004b2c <dwin_data+0x2a4>)
 8004a60:	edc3 7a04 	vstr	s15, [r3, #16]
 8004a64:	e044      	b.n	8004af0 <dwin_data+0x268>
		}
		else if(Data_Flag_Flow == 5){
 8004a66:	4b2f      	ldr	r3, [pc, #188]	@ (8004b24 <dwin_data+0x29c>)
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	2b05      	cmp	r3, #5
 8004a6c:	d109      	bne.n	8004a82 <dwin_data+0x1fa>
			Flow_Array_Fdata[5] = PID_FLOW_VAR;
 8004a6e:	4b2e      	ldr	r3, [pc, #184]	@ (8004b28 <dwin_data+0x2a0>)
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	ee07 3a90 	vmov	s15, r3
 8004a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a7a:	4b2c      	ldr	r3, [pc, #176]	@ (8004b2c <dwin_data+0x2a4>)
 8004a7c:	edc3 7a05 	vstr	s15, [r3, #20]
 8004a80:	e036      	b.n	8004af0 <dwin_data+0x268>
		}
		else if(Data_Flag_Flow == 6){
 8004a82:	4b28      	ldr	r3, [pc, #160]	@ (8004b24 <dwin_data+0x29c>)
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	2b06      	cmp	r3, #6
 8004a88:	d109      	bne.n	8004a9e <dwin_data+0x216>
			Flow_Array_Fdata[6] = PID_FLOW_VAR;
 8004a8a:	4b27      	ldr	r3, [pc, #156]	@ (8004b28 <dwin_data+0x2a0>)
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	ee07 3a90 	vmov	s15, r3
 8004a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a96:	4b25      	ldr	r3, [pc, #148]	@ (8004b2c <dwin_data+0x2a4>)
 8004a98:	edc3 7a06 	vstr	s15, [r3, #24]
 8004a9c:	e028      	b.n	8004af0 <dwin_data+0x268>
		}
		else if(Data_Flag_Flow == 7){
 8004a9e:	4b21      	ldr	r3, [pc, #132]	@ (8004b24 <dwin_data+0x29c>)
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	2b07      	cmp	r3, #7
 8004aa4:	d109      	bne.n	8004aba <dwin_data+0x232>
			Flow_Array_Fdata[7] = PID_FLOW_VAR;
 8004aa6:	4b20      	ldr	r3, [pc, #128]	@ (8004b28 <dwin_data+0x2a0>)
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	ee07 3a90 	vmov	s15, r3
 8004aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ab2:	4b1e      	ldr	r3, [pc, #120]	@ (8004b2c <dwin_data+0x2a4>)
 8004ab4:	edc3 7a07 	vstr	s15, [r3, #28]
 8004ab8:	e01a      	b.n	8004af0 <dwin_data+0x268>
		}
		else if(Data_Flag_Flow == 8){
 8004aba:	4b1a      	ldr	r3, [pc, #104]	@ (8004b24 <dwin_data+0x29c>)
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	2b08      	cmp	r3, #8
 8004ac0:	d109      	bne.n	8004ad6 <dwin_data+0x24e>
			Flow_Array_Fdata[8] = PID_FLOW_VAR;
 8004ac2:	4b19      	ldr	r3, [pc, #100]	@ (8004b28 <dwin_data+0x2a0>)
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	ee07 3a90 	vmov	s15, r3
 8004aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ace:	4b17      	ldr	r3, [pc, #92]	@ (8004b2c <dwin_data+0x2a4>)
 8004ad0:	edc3 7a08 	vstr	s15, [r3, #32]
 8004ad4:	e00c      	b.n	8004af0 <dwin_data+0x268>
		}
		else if(Data_Flag_Flow == 9){
 8004ad6:	4b13      	ldr	r3, [pc, #76]	@ (8004b24 <dwin_data+0x29c>)
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	2b09      	cmp	r3, #9
 8004adc:	d108      	bne.n	8004af0 <dwin_data+0x268>
			Flow_Array_Fdata[9] = PID_FLOW_VAR;
 8004ade:	4b12      	ldr	r3, [pc, #72]	@ (8004b28 <dwin_data+0x2a0>)
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	ee07 3a90 	vmov	s15, r3
 8004ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aea:	4b10      	ldr	r3, [pc, #64]	@ (8004b2c <dwin_data+0x2a4>)
 8004aec:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		}

		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == GPIO_PIN_RESET){
 8004af0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004af4:	480e      	ldr	r0, [pc, #56]	@ (8004b30 <dwin_data+0x2a8>)
 8004af6:	f007 f8b5 	bl	800bc64 <HAL_GPIO_ReadPin>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d11f      	bne.n	8004b40 <dwin_data+0x2b8>
			Backup_flag = 1;
 8004b00:	4b0c      	ldr	r3, [pc, #48]	@ (8004b34 <dwin_data+0x2ac>)
 8004b02:	2201      	movs	r2, #1
 8004b04:	701a      	strb	r2, [r3, #0]
			Backup_flag1 = 1;
 8004b06:	4b0c      	ldr	r3, [pc, #48]	@ (8004b38 <dwin_data+0x2b0>)
 8004b08:	2201      	movs	r2, #1
 8004b0a:	701a      	strb	r2, [r3, #0]
			Display_Switch_Flag = 1;
 8004b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b3c <dwin_data+0x2b4>)
 8004b0e:	2201      	movs	r2, #1
 8004b10:	701a      	strb	r2, [r3, #0]
 8004b12:	e044      	b.n	8004b9e <dwin_data+0x316>
 8004b14:	40021000 	.word	0x40021000
 8004b18:	200015c0 	.word	0x200015c0
 8004b1c:	20001774 	.word	0x20001774
 8004b20:	200016b8 	.word	0x200016b8
 8004b24:	200015bf 	.word	0x200015bf
 8004b28:	20001208 	.word	0x20001208
 8004b2c:	20001690 	.word	0x20001690
 8004b30:	40020800 	.word	0x40020800
 8004b34:	20001779 	.word	0x20001779
 8004b38:	2000177a 	.word	0x2000177a
 8004b3c:	2000177c 	.word	0x2000177c
		}
		else if((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == GPIO_PIN_SET)){
 8004b40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004b44:	48ae      	ldr	r0, [pc, #696]	@ (8004e00 <dwin_data+0x578>)
 8004b46:	f007 f88d 	bl	800bc64 <HAL_GPIO_ReadPin>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d106      	bne.n	8004b5e <dwin_data+0x2d6>
			Backup_flag = 0;
 8004b50:	4bac      	ldr	r3, [pc, #688]	@ (8004e04 <dwin_data+0x57c>)
 8004b52:	2200      	movs	r2, #0
 8004b54:	701a      	strb	r2, [r3, #0]
			Display_Switch_Flag = 0;
 8004b56:	4bac      	ldr	r3, [pc, #688]	@ (8004e08 <dwin_data+0x580>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	701a      	strb	r2, [r3, #0]
 8004b5c:	e01f      	b.n	8004b9e <dwin_data+0x316>
			//			Backup_flag1 = 1;
		}

		else if((HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11) == GPIO_PIN_RESET)){
 8004b5e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004b62:	48aa      	ldr	r0, [pc, #680]	@ (8004e0c <dwin_data+0x584>)
 8004b64:	f007 f87e 	bl	800bc64 <HAL_GPIO_ReadPin>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d109      	bne.n	8004b82 <dwin_data+0x2fa>
			Backup_flag = 1;
 8004b6e:	4ba5      	ldr	r3, [pc, #660]	@ (8004e04 <dwin_data+0x57c>)
 8004b70:	2201      	movs	r2, #1
 8004b72:	701a      	strb	r2, [r3, #0]
			Backup_flag1 = 1;
 8004b74:	4ba6      	ldr	r3, [pc, #664]	@ (8004e10 <dwin_data+0x588>)
 8004b76:	2201      	movs	r2, #1
 8004b78:	701a      	strb	r2, [r3, #0]
			AC_Detection_Flag = 1;
 8004b7a:	4ba6      	ldr	r3, [pc, #664]	@ (8004e14 <dwin_data+0x58c>)
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	701a      	strb	r2, [r3, #0]
 8004b80:	e00d      	b.n	8004b9e <dwin_data+0x316>
		}
		else if((HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11) == GPIO_PIN_SET)){
 8004b82:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004b86:	48a1      	ldr	r0, [pc, #644]	@ (8004e0c <dwin_data+0x584>)
 8004b88:	f007 f86c 	bl	800bc64 <HAL_GPIO_ReadPin>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d105      	bne.n	8004b9e <dwin_data+0x316>
			Backup_flag = 0;
 8004b92:	4b9c      	ldr	r3, [pc, #624]	@ (8004e04 <dwin_data+0x57c>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	701a      	strb	r2, [r3, #0]
			AC_Detection_Flag = 0;
 8004b98:	4b9e      	ldr	r3, [pc, #632]	@ (8004e14 <dwin_data+0x58c>)
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	701a      	strb	r2, [r3, #0]
		}
		if ((HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11) == GPIO_PIN_RESET)){
 8004b9e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004ba2:	489a      	ldr	r0, [pc, #616]	@ (8004e0c <dwin_data+0x584>)
 8004ba4:	f007 f85e 	bl	800bc64 <HAL_GPIO_ReadPin>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d103      	bne.n	8004bb6 <dwin_data+0x32e>

			AC_Plug(0x78);
 8004bae:	2078      	movs	r0, #120	@ 0x78
 8004bb0:	f7fe f9cc 	bl	8002f4c <AC_Plug>
 8004bb4:	e00a      	b.n	8004bcc <dwin_data+0x344>
		}
		else if((HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11) == GPIO_PIN_SET)){
 8004bb6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004bba:	4894      	ldr	r0, [pc, #592]	@ (8004e0c <dwin_data+0x584>)
 8004bbc:	f007 f852 	bl	800bc64 <HAL_GPIO_ReadPin>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d102      	bne.n	8004bcc <dwin_data+0x344>
			AC_Plug(0x77);
 8004bc6:	2077      	movs	r0, #119	@ 0x77
 8004bc8:	f7fe f9c0 	bl	8002f4c <AC_Plug>
		//			Battery_ADC_Flag = 0;
		//			Backup_flag = 0;
		//		}


		Breath_calclution();
 8004bcc:	f7fd ffd6 	bl	8002b7c <Breath_calclution>
		user_flowe = user_flowe_cal();
 8004bd0:	f7fe fa42 	bl	8003058 <user_flowe_cal>
 8004bd4:	ec53 2b10 	vmov	r2, r3, d0
 8004bd8:	4610      	mov	r0, r2
 8004bda:	4619      	mov	r1, r3
 8004bdc:	f7fb ffb4 	bl	8000b48 <__aeabi_d2iz>
 8004be0:	4603      	mov	r3, r0
 8004be2:	4a8d      	ldr	r2, [pc, #564]	@ (8004e18 <dwin_data+0x590>)
 8004be4:	6013      	str	r3, [r2, #0]
		//			user_flowe = user_flowe_cal();
		//		}
		//		user2_flow = user_flowe;
		//		user1_flow = (int)(user2_flow * 10) / 10.0;
		//take the button status for display data//
		HAL_UART_Receive_IT(&huart1, DISPLAY_INPUT1, 13);
 8004be6:	220d      	movs	r2, #13
 8004be8:	498c      	ldr	r1, [pc, #560]	@ (8004e1c <dwin_data+0x594>)
 8004bea:	488d      	ldr	r0, [pc, #564]	@ (8004e20 <dwin_data+0x598>)
 8004bec:	f00a f91d 	bl	800ee2a <HAL_UART_Receive_IT>
		osDelay(100);
 8004bf0:	2064      	movs	r0, #100	@ 0x64
 8004bf2:	f00b fbe2 	bl	80103ba <osDelay>
		HAL_UART_AbortReceive_IT(&huart1);
 8004bf6:	488a      	ldr	r0, [pc, #552]	@ (8004e20 <dwin_data+0x598>)
 8004bf8:	f00a f962 	bl	800eec0 <HAL_UART_AbortReceive_IT>
		if(DISPLAY_INPUT1[2]==0x06){
 8004bfc:	4b87      	ldr	r3, [pc, #540]	@ (8004e1c <dwin_data+0x594>)
 8004bfe:	789b      	ldrb	r3, [r3, #2]
 8004c00:	2b06      	cmp	r3, #6
 8004c02:	d13a      	bne.n	8004c7a <dwin_data+0x3f2>
			for(int a = 0; a<=9; a++){
 8004c04:	2300      	movs	r3, #0
 8004c06:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004c0a:	e01b      	b.n	8004c44 <dwin_data+0x3bc>
				DISPLAY_INPUT[a]=DISPLAY_INPUT1[a];
 8004c0c:	4a83      	ldr	r2, [pc, #524]	@ (8004e1c <dwin_data+0x594>)
 8004c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c12:	4413      	add	r3, r2
 8004c14:	7819      	ldrb	r1, [r3, #0]
 8004c16:	4a83      	ldr	r2, [pc, #524]	@ (8004e24 <dwin_data+0x59c>)
 8004c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c1c:	4413      	add	r3, r2
 8004c1e:	460a      	mov	r2, r1
 8004c20:	701a      	strb	r2, [r3, #0]
				received_length++;
 8004c22:	4b81      	ldr	r3, [pc, #516]	@ (8004e28 <dwin_data+0x5a0>)
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	3301      	adds	r3, #1
 8004c28:	b2da      	uxtb	r2, r3
 8004c2a:	4b7f      	ldr	r3, [pc, #508]	@ (8004e28 <dwin_data+0x5a0>)
 8004c2c:	701a      	strb	r2, [r3, #0]
				DISPLAY_INPUT1[a]=0x00;
 8004c2e:	4a7b      	ldr	r2, [pc, #492]	@ (8004e1c <dwin_data+0x594>)
 8004c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c34:	4413      	add	r3, r2
 8004c36:	2200      	movs	r2, #0
 8004c38:	701a      	strb	r2, [r3, #0]
			for(int a = 0; a<=9; a++){
 8004c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c3e:	3301      	adds	r3, #1
 8004c40:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c48:	2b09      	cmp	r3, #9
 8004c4a:	dddf      	ble.n	8004c0c <dwin_data+0x384>
			}
			if(DISPLAY_INPUT1[2]==0x0A){
 8004c4c:	4b73      	ldr	r3, [pc, #460]	@ (8004e1c <dwin_data+0x594>)
 8004c4e:	789b      	ldrb	r3, [r3, #2]
 8004c50:	2b0a      	cmp	r3, #10
 8004c52:	d112      	bne.n	8004c7a <dwin_data+0x3f2>
				//								DISPLAY_INPUT1[ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] = 0x00;
				for(int i = 0; i<13; i++){
 8004c54:	2300      	movs	r3, #0
 8004c56:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004c5a:	e00a      	b.n	8004c72 <dwin_data+0x3ea>
					DISPLAY_INPUT1[i] = 0x00;
 8004c5c:	4a6f      	ldr	r2, [pc, #444]	@ (8004e1c <dwin_data+0x594>)
 8004c5e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004c62:	4413      	add	r3, r2
 8004c64:	2200      	movs	r2, #0
 8004c66:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i<13; i++){
 8004c68:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004c72:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004c76:	2b0c      	cmp	r3, #12
 8004c78:	ddf0      	ble.n	8004c5c <dwin_data+0x3d4>
				}
			}
		}

		VT_KEYPAD();
 8004c7a:	f7fe ffbd 	bl	8003bf8 <VT_KEYPAD>
		if (DISPLAY_INPUT[5] == 0x9D) {
 8004c7e:	4b69      	ldr	r3, [pc, #420]	@ (8004e24 <dwin_data+0x59c>)
 8004c80:	795b      	ldrb	r3, [r3, #5]
 8004c82:	2b9d      	cmp	r3, #157	@ 0x9d
 8004c84:	d179      	bne.n	8004d7a <dwin_data+0x4f2>
			if (DISPLAY_INPUT[8] == 0x01) {
 8004c86:	4b67      	ldr	r3, [pc, #412]	@ (8004e24 <dwin_data+0x59c>)
 8004c88:	7a1b      	ldrb	r3, [r3, #8]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d136      	bne.n	8004cfc <dwin_data+0x474>
				vt_flag = 0;
 8004c8e:	4b67      	ldr	r3, [pc, #412]	@ (8004e2c <dwin_data+0x5a4>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	701a      	strb	r2, [r3, #0]
				plt_flag = 0;
 8004c94:	4b66      	ldr	r3, [pc, #408]	@ (8004e30 <dwin_data+0x5a8>)
 8004c96:	2200      	movs	r2, #0
 8004c98:	701a      	strb	r2, [r3, #0]
				rr_flag = 0;
 8004c9a:	4b66      	ldr	r3, [pc, #408]	@ (8004e34 <dwin_data+0x5ac>)
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	701a      	strb	r2, [r3, #0]
				i_flag = 1;
 8004ca0:	4b65      	ldr	r3, [pc, #404]	@ (8004e38 <dwin_data+0x5b0>)
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	701a      	strb	r2, [r3, #0]
				e_flag = 0;
 8004ca6:	4b65      	ldr	r3, [pc, #404]	@ (8004e3c <dwin_data+0x5b4>)
 8004ca8:	2200      	movs	r2, #0
 8004caa:	701a      	strb	r2, [r3, #0]
				pu_flag = 0;
 8004cac:	4b64      	ldr	r3, [pc, #400]	@ (8004e40 <dwin_data+0x5b8>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	701a      	strb	r2, [r3, #0]
				trg_flag = 0;
 8004cb2:	4b64      	ldr	r3, [pc, #400]	@ (8004e44 <dwin_data+0x5bc>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	701a      	strb	r2, [r3, #0]
				pip_flag = 0;
 8004cb8:	4b63      	ldr	r3, [pc, #396]	@ (8004e48 <dwin_data+0x5c0>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	701a      	strb	r2, [r3, #0]
				peep_flag = 0;
 8004cbe:	4b63      	ldr	r3, [pc, #396]	@ (8004e4c <dwin_data+0x5c4>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	701a      	strb	r2, [r3, #0]
				PS_flag = 0;
 8004cc4:	4b62      	ldr	r3, [pc, #392]	@ (8004e50 <dwin_data+0x5c8>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	701a      	strb	r2, [r3, #0]
				display_data(0x10, 0x04, 0x00);
 8004cca:	2200      	movs	r2, #0
 8004ccc:	2104      	movs	r1, #4
 8004cce:	2010      	movs	r0, #16
 8004cd0:	f7fd f866 	bl	8001da0 <display_data>
				for (int a = 0; a < 9; a++)
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004cda:	e00a      	b.n	8004cf2 <dwin_data+0x46a>
					DISPLAY_INPUT[a] = 0x00;
 8004cdc:	4a51      	ldr	r2, [pc, #324]	@ (8004e24 <dwin_data+0x59c>)
 8004cde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ce2:	4413      	add	r3, r2
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	701a      	strb	r2, [r3, #0]
				for (int a = 0; a < 9; a++)
 8004ce8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cec:	3301      	adds	r3, #1
 8004cee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004cf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cf6:	2b08      	cmp	r3, #8
 8004cf8:	ddf0      	ble.n	8004cdc <dwin_data+0x454>
 8004cfa:	e039      	b.n	8004d70 <dwin_data+0x4e8>
			} else if (DISPLAY_INPUT[8] == 0x02) {
 8004cfc:	4b49      	ldr	r3, [pc, #292]	@ (8004e24 <dwin_data+0x59c>)
 8004cfe:	7a1b      	ldrb	r3, [r3, #8]
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d135      	bne.n	8004d70 <dwin_data+0x4e8>
				vt_flag = 0;
 8004d04:	4b49      	ldr	r3, [pc, #292]	@ (8004e2c <dwin_data+0x5a4>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	701a      	strb	r2, [r3, #0]
				plt_flag = 0;
 8004d0a:	4b49      	ldr	r3, [pc, #292]	@ (8004e30 <dwin_data+0x5a8>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	701a      	strb	r2, [r3, #0]
				rr_flag = 0;
 8004d10:	4b48      	ldr	r3, [pc, #288]	@ (8004e34 <dwin_data+0x5ac>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	701a      	strb	r2, [r3, #0]
				i_flag = 0;
 8004d16:	4b48      	ldr	r3, [pc, #288]	@ (8004e38 <dwin_data+0x5b0>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	701a      	strb	r2, [r3, #0]
				e_flag = 1;
 8004d1c:	4b47      	ldr	r3, [pc, #284]	@ (8004e3c <dwin_data+0x5b4>)
 8004d1e:	2201      	movs	r2, #1
 8004d20:	701a      	strb	r2, [r3, #0]
				pu_flag = 0;
 8004d22:	4b47      	ldr	r3, [pc, #284]	@ (8004e40 <dwin_data+0x5b8>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	701a      	strb	r2, [r3, #0]
				trg_flag = 0;
 8004d28:	4b46      	ldr	r3, [pc, #280]	@ (8004e44 <dwin_data+0x5bc>)
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	701a      	strb	r2, [r3, #0]
				pip_flag = 0;
 8004d2e:	4b46      	ldr	r3, [pc, #280]	@ (8004e48 <dwin_data+0x5c0>)
 8004d30:	2200      	movs	r2, #0
 8004d32:	701a      	strb	r2, [r3, #0]
				peep_flag = 0;
 8004d34:	4b45      	ldr	r3, [pc, #276]	@ (8004e4c <dwin_data+0x5c4>)
 8004d36:	2200      	movs	r2, #0
 8004d38:	701a      	strb	r2, [r3, #0]
				PS_flag = 0;
 8004d3a:	4b45      	ldr	r3, [pc, #276]	@ (8004e50 <dwin_data+0x5c8>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	701a      	strb	r2, [r3, #0]
				display_data(0x10, 0x04, 0x00);
 8004d40:	2200      	movs	r2, #0
 8004d42:	2104      	movs	r1, #4
 8004d44:	2010      	movs	r0, #16
 8004d46:	f7fd f82b 	bl	8001da0 <display_data>
				for (int a = 0; a < 9; a++)
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004d50:	e00a      	b.n	8004d68 <dwin_data+0x4e0>
					DISPLAY_INPUT[a] = 0x00;
 8004d52:	4a34      	ldr	r2, [pc, #208]	@ (8004e24 <dwin_data+0x59c>)
 8004d54:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004d58:	4413      	add	r3, r2
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	701a      	strb	r2, [r3, #0]
				for (int a = 0; a < 9; a++)
 8004d5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004d62:	3301      	adds	r3, #1
 8004d64:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004d68:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004d6c:	2b08      	cmp	r3, #8
 8004d6e:	ddf0      	ble.n	8004d52 <dwin_data+0x4ca>
			}
			temp_add = 0x04;
 8004d70:	4b38      	ldr	r3, [pc, #224]	@ (8004e54 <dwin_data+0x5cc>)
 8004d72:	2204      	movs	r2, #4
 8004d74:	701a      	strb	r2, [r3, #0]
 8004d76:	f000 bd62 	b.w	800583e <dwin_data+0xfb6>
		}else if (((DISPLAY_INPUT[5] == 0x95) && (DISPLAY_INPUT[8] == 0x01))) {
 8004d7a:	4b2a      	ldr	r3, [pc, #168]	@ (8004e24 <dwin_data+0x59c>)
 8004d7c:	795b      	ldrb	r3, [r3, #5]
 8004d7e:	2b95      	cmp	r3, #149	@ 0x95
 8004d80:	d16a      	bne.n	8004e58 <dwin_data+0x5d0>
 8004d82:	4b28      	ldr	r3, [pc, #160]	@ (8004e24 <dwin_data+0x59c>)
 8004d84:	7a1b      	ldrb	r3, [r3, #8]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d166      	bne.n	8004e58 <dwin_data+0x5d0>
			vt_flag = 1;
 8004d8a:	4b28      	ldr	r3, [pc, #160]	@ (8004e2c <dwin_data+0x5a4>)
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	701a      	strb	r2, [r3, #0]
			plt_flag = 0;
 8004d90:	4b27      	ldr	r3, [pc, #156]	@ (8004e30 <dwin_data+0x5a8>)
 8004d92:	2200      	movs	r2, #0
 8004d94:	701a      	strb	r2, [r3, #0]
			rr_flag = 0;
 8004d96:	4b27      	ldr	r3, [pc, #156]	@ (8004e34 <dwin_data+0x5ac>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	701a      	strb	r2, [r3, #0]
			i_flag = 0;
 8004d9c:	4b26      	ldr	r3, [pc, #152]	@ (8004e38 <dwin_data+0x5b0>)
 8004d9e:	2200      	movs	r2, #0
 8004da0:	701a      	strb	r2, [r3, #0]
			e_flag = 0;
 8004da2:	4b26      	ldr	r3, [pc, #152]	@ (8004e3c <dwin_data+0x5b4>)
 8004da4:	2200      	movs	r2, #0
 8004da6:	701a      	strb	r2, [r3, #0]
			pu_flag = 0;
 8004da8:	4b25      	ldr	r3, [pc, #148]	@ (8004e40 <dwin_data+0x5b8>)
 8004daa:	2200      	movs	r2, #0
 8004dac:	701a      	strb	r2, [r3, #0]
			trg_flag = 0;
 8004dae:	4b25      	ldr	r3, [pc, #148]	@ (8004e44 <dwin_data+0x5bc>)
 8004db0:	2200      	movs	r2, #0
 8004db2:	701a      	strb	r2, [r3, #0]
			pip_flag = 0;
 8004db4:	4b24      	ldr	r3, [pc, #144]	@ (8004e48 <dwin_data+0x5c0>)
 8004db6:	2200      	movs	r2, #0
 8004db8:	701a      	strb	r2, [r3, #0]
			peep_flag = 0;
 8004dba:	4b24      	ldr	r3, [pc, #144]	@ (8004e4c <dwin_data+0x5c4>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	701a      	strb	r2, [r3, #0]
			PS_flag = 0;
 8004dc0:	4b23      	ldr	r3, [pc, #140]	@ (8004e50 <dwin_data+0x5c8>)
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	701a      	strb	r2, [r3, #0]
			display_data(0x10, 0x01, 0x00);
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	2101      	movs	r1, #1
 8004dca:	2010      	movs	r0, #16
 8004dcc:	f7fc ffe8 	bl	8001da0 <display_data>
			temp_add = 0x01;
 8004dd0:	4b20      	ldr	r3, [pc, #128]	@ (8004e54 <dwin_data+0x5cc>)
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004ddc:	e00a      	b.n	8004df4 <dwin_data+0x56c>
				DISPLAY_INPUT[a] = 0x00;
 8004dde:	4a11      	ldr	r2, [pc, #68]	@ (8004e24 <dwin_data+0x59c>)
 8004de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de4:	4413      	add	r3, r2
 8004de6:	2200      	movs	r2, #0
 8004de8:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 8004dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dee:	3301      	adds	r3, #1
 8004df0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df8:	2b08      	cmp	r3, #8
 8004dfa:	ddf0      	ble.n	8004dde <dwin_data+0x556>
 8004dfc:	f000 bd1f 	b.w	800583e <dwin_data+0xfb6>
 8004e00:	40020800 	.word	0x40020800
 8004e04:	20001779 	.word	0x20001779
 8004e08:	2000177c 	.word	0x2000177c
 8004e0c:	40020c00 	.word	0x40020c00
 8004e10:	2000177a 	.word	0x2000177a
 8004e14:	2000177b 	.word	0x2000177b
 8004e18:	2000120c 	.word	0x2000120c
 8004e1c:	20001590 	.word	0x20001590
 8004e20:	20000fc0 	.word	0x20000fc0
 8004e24:	20001584 	.word	0x20001584
 8004e28:	20001778 	.word	0x20001778
 8004e2c:	200015ca 	.word	0x200015ca
 8004e30:	200015cb 	.word	0x200015cb
 8004e34:	200015cc 	.word	0x200015cc
 8004e38:	200015c8 	.word	0x200015c8
 8004e3c:	200015c9 	.word	0x200015c9
 8004e40:	200015cd 	.word	0x200015cd
 8004e44:	200015ce 	.word	0x200015ce
 8004e48:	200015cf 	.word	0x200015cf
 8004e4c:	200015d0 	.word	0x200015d0
 8004e50:	200015d1 	.word	0x200015d1
 8004e54:	2000159d 	.word	0x2000159d

		} else if (((DISPLAY_INPUT[5] == 0x9B) && (DISPLAY_INPUT[8] == 0x01))) {
 8004e58:	4ba7      	ldr	r3, [pc, #668]	@ (80050f8 <dwin_data+0x870>)
 8004e5a:	795b      	ldrb	r3, [r3, #5]
 8004e5c:	2b9b      	cmp	r3, #155	@ 0x9b
 8004e5e:	d13e      	bne.n	8004ede <dwin_data+0x656>
 8004e60:	4ba5      	ldr	r3, [pc, #660]	@ (80050f8 <dwin_data+0x870>)
 8004e62:	7a1b      	ldrb	r3, [r3, #8]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d13a      	bne.n	8004ede <dwin_data+0x656>
			vt_flag = 0;
 8004e68:	4ba4      	ldr	r3, [pc, #656]	@ (80050fc <dwin_data+0x874>)
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	701a      	strb	r2, [r3, #0]
			plt_flag = 1;
 8004e6e:	4ba4      	ldr	r3, [pc, #656]	@ (8005100 <dwin_data+0x878>)
 8004e70:	2201      	movs	r2, #1
 8004e72:	701a      	strb	r2, [r3, #0]
			rr_flag = 0;
 8004e74:	4ba3      	ldr	r3, [pc, #652]	@ (8005104 <dwin_data+0x87c>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	701a      	strb	r2, [r3, #0]
			i_flag = 0;
 8004e7a:	4ba3      	ldr	r3, [pc, #652]	@ (8005108 <dwin_data+0x880>)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	701a      	strb	r2, [r3, #0]
			e_flag = 0;
 8004e80:	4ba2      	ldr	r3, [pc, #648]	@ (800510c <dwin_data+0x884>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	701a      	strb	r2, [r3, #0]
			pu_flag = 0;
 8004e86:	4ba2      	ldr	r3, [pc, #648]	@ (8005110 <dwin_data+0x888>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	701a      	strb	r2, [r3, #0]
			trg_flag = 0;
 8004e8c:	4ba1      	ldr	r3, [pc, #644]	@ (8005114 <dwin_data+0x88c>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	701a      	strb	r2, [r3, #0]
			pip_flag = 0;
 8004e92:	4ba1      	ldr	r3, [pc, #644]	@ (8005118 <dwin_data+0x890>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	701a      	strb	r2, [r3, #0]
			peep_flag = 0;
 8004e98:	4ba0      	ldr	r3, [pc, #640]	@ (800511c <dwin_data+0x894>)
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	701a      	strb	r2, [r3, #0]
			PS_flag = 0;
 8004e9e:	4ba0      	ldr	r3, [pc, #640]	@ (8005120 <dwin_data+0x898>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	701a      	strb	r2, [r3, #0]
			display_data(0x10, 0x02, 0x00);
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	2102      	movs	r1, #2
 8004ea8:	2010      	movs	r0, #16
 8004eaa:	f7fc ff79 	bl	8001da0 <display_data>
			temp_add = 0x02;
 8004eae:	4b9d      	ldr	r3, [pc, #628]	@ (8005124 <dwin_data+0x89c>)
 8004eb0:	2202      	movs	r2, #2
 8004eb2:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004eba:	e00a      	b.n	8004ed2 <dwin_data+0x64a>
				DISPLAY_INPUT[a] = 0x00;
 8004ebc:	4a8e      	ldr	r2, [pc, #568]	@ (80050f8 <dwin_data+0x870>)
 8004ebe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004ec2:	4413      	add	r3, r2
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 8004ec8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004ecc:	3301      	adds	r3, #1
 8004ece:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004ed2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004ed6:	2b08      	cmp	r3, #8
 8004ed8:	ddf0      	ble.n	8004ebc <dwin_data+0x634>
 8004eda:	f000 bcb0 	b.w	800583e <dwin_data+0xfb6>
		} else if (((DISPLAY_INPUT[5] == 0x9C) && (DISPLAY_INPUT[8] == 0x01))) {
 8004ede:	4b86      	ldr	r3, [pc, #536]	@ (80050f8 <dwin_data+0x870>)
 8004ee0:	795b      	ldrb	r3, [r3, #5]
 8004ee2:	2b9c      	cmp	r3, #156	@ 0x9c
 8004ee4:	d141      	bne.n	8004f6a <dwin_data+0x6e2>
 8004ee6:	4b84      	ldr	r3, [pc, #528]	@ (80050f8 <dwin_data+0x870>)
 8004ee8:	7a1b      	ldrb	r3, [r3, #8]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d13d      	bne.n	8004f6a <dwin_data+0x6e2>
			osDelay(50);
 8004eee:	2032      	movs	r0, #50	@ 0x32
 8004ef0:	f00b fa63 	bl	80103ba <osDelay>
			vt_flag = 0;
 8004ef4:	4b81      	ldr	r3, [pc, #516]	@ (80050fc <dwin_data+0x874>)
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	701a      	strb	r2, [r3, #0]
			plt_flag = 0;
 8004efa:	4b81      	ldr	r3, [pc, #516]	@ (8005100 <dwin_data+0x878>)
 8004efc:	2200      	movs	r2, #0
 8004efe:	701a      	strb	r2, [r3, #0]
			rr_flag = 1;
 8004f00:	4b80      	ldr	r3, [pc, #512]	@ (8005104 <dwin_data+0x87c>)
 8004f02:	2201      	movs	r2, #1
 8004f04:	701a      	strb	r2, [r3, #0]
			i_flag = 0;
 8004f06:	4b80      	ldr	r3, [pc, #512]	@ (8005108 <dwin_data+0x880>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	701a      	strb	r2, [r3, #0]
			e_flag = 0;
 8004f0c:	4b7f      	ldr	r3, [pc, #508]	@ (800510c <dwin_data+0x884>)
 8004f0e:	2200      	movs	r2, #0
 8004f10:	701a      	strb	r2, [r3, #0]
			pu_flag = 0;
 8004f12:	4b7f      	ldr	r3, [pc, #508]	@ (8005110 <dwin_data+0x888>)
 8004f14:	2200      	movs	r2, #0
 8004f16:	701a      	strb	r2, [r3, #0]
			trg_flag = 0;
 8004f18:	4b7e      	ldr	r3, [pc, #504]	@ (8005114 <dwin_data+0x88c>)
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	701a      	strb	r2, [r3, #0]
			pip_flag = 0;
 8004f1e:	4b7e      	ldr	r3, [pc, #504]	@ (8005118 <dwin_data+0x890>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	701a      	strb	r2, [r3, #0]
			peep_flag = 0;
 8004f24:	4b7d      	ldr	r3, [pc, #500]	@ (800511c <dwin_data+0x894>)
 8004f26:	2200      	movs	r2, #0
 8004f28:	701a      	strb	r2, [r3, #0]
			PS_flag = 0;
 8004f2a:	4b7d      	ldr	r3, [pc, #500]	@ (8005120 <dwin_data+0x898>)
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	701a      	strb	r2, [r3, #0]
			display_data(0x10, 0x03, 0x00);
 8004f30:	2200      	movs	r2, #0
 8004f32:	2103      	movs	r1, #3
 8004f34:	2010      	movs	r0, #16
 8004f36:	f7fc ff33 	bl	8001da0 <display_data>
			temp_add = 0x03;
 8004f3a:	4b7a      	ldr	r3, [pc, #488]	@ (8005124 <dwin_data+0x89c>)
 8004f3c:	2203      	movs	r2, #3
 8004f3e:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 8004f40:	2300      	movs	r3, #0
 8004f42:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004f46:	e00a      	b.n	8004f5e <dwin_data+0x6d6>
				DISPLAY_INPUT[a] = 0x00;
 8004f48:	4a6b      	ldr	r2, [pc, #428]	@ (80050f8 <dwin_data+0x870>)
 8004f4a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004f4e:	4413      	add	r3, r2
 8004f50:	2200      	movs	r2, #0
 8004f52:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 8004f54:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004f58:	3301      	adds	r3, #1
 8004f5a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004f5e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004f62:	2b08      	cmp	r3, #8
 8004f64:	ddf0      	ble.n	8004f48 <dwin_data+0x6c0>
 8004f66:	f000 bc6a 	b.w	800583e <dwin_data+0xfb6>
		} else if (((DISPLAY_INPUT[5] == 0x9E) && (DISPLAY_INPUT[8] == 0x01))) {
 8004f6a:	4b63      	ldr	r3, [pc, #396]	@ (80050f8 <dwin_data+0x870>)
 8004f6c:	795b      	ldrb	r3, [r3, #5]
 8004f6e:	2b9e      	cmp	r3, #158	@ 0x9e
 8004f70:	d13e      	bne.n	8004ff0 <dwin_data+0x768>
 8004f72:	4b61      	ldr	r3, [pc, #388]	@ (80050f8 <dwin_data+0x870>)
 8004f74:	7a1b      	ldrb	r3, [r3, #8]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d13a      	bne.n	8004ff0 <dwin_data+0x768>
			vt_flag = 0;
 8004f7a:	4b60      	ldr	r3, [pc, #384]	@ (80050fc <dwin_data+0x874>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	701a      	strb	r2, [r3, #0]
			plt_flag = 0;
 8004f80:	4b5f      	ldr	r3, [pc, #380]	@ (8005100 <dwin_data+0x878>)
 8004f82:	2200      	movs	r2, #0
 8004f84:	701a      	strb	r2, [r3, #0]
			rr_flag = 0;
 8004f86:	4b5f      	ldr	r3, [pc, #380]	@ (8005104 <dwin_data+0x87c>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	701a      	strb	r2, [r3, #0]
			i_flag = 0;
 8004f8c:	4b5e      	ldr	r3, [pc, #376]	@ (8005108 <dwin_data+0x880>)
 8004f8e:	2200      	movs	r2, #0
 8004f90:	701a      	strb	r2, [r3, #0]
			e_flag = 0;
 8004f92:	4b5e      	ldr	r3, [pc, #376]	@ (800510c <dwin_data+0x884>)
 8004f94:	2200      	movs	r2, #0
 8004f96:	701a      	strb	r2, [r3, #0]
			pu_flag = 1;
 8004f98:	4b5d      	ldr	r3, [pc, #372]	@ (8005110 <dwin_data+0x888>)
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	701a      	strb	r2, [r3, #0]
			trg_flag = 0;
 8004f9e:	4b5d      	ldr	r3, [pc, #372]	@ (8005114 <dwin_data+0x88c>)
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	701a      	strb	r2, [r3, #0]
			pip_flag = 0;
 8004fa4:	4b5c      	ldr	r3, [pc, #368]	@ (8005118 <dwin_data+0x890>)
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	701a      	strb	r2, [r3, #0]
			peep_flag = 0;
 8004faa:	4b5c      	ldr	r3, [pc, #368]	@ (800511c <dwin_data+0x894>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	701a      	strb	r2, [r3, #0]
			PS_flag = 0;
 8004fb0:	4b5b      	ldr	r3, [pc, #364]	@ (8005120 <dwin_data+0x898>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	701a      	strb	r2, [r3, #0]
			display_data(0x10, 0x05, 0x00);
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	2105      	movs	r1, #5
 8004fba:	2010      	movs	r0, #16
 8004fbc:	f7fc fef0 	bl	8001da0 <display_data>
			temp_add = 0x05;
 8004fc0:	4b58      	ldr	r3, [pc, #352]	@ (8005124 <dwin_data+0x89c>)
 8004fc2:	2205      	movs	r2, #5
 8004fc4:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004fcc:	e00a      	b.n	8004fe4 <dwin_data+0x75c>
				DISPLAY_INPUT[a] = 0x00;
 8004fce:	4a4a      	ldr	r2, [pc, #296]	@ (80050f8 <dwin_data+0x870>)
 8004fd0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004fd4:	4413      	add	r3, r2
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 8004fda:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004fde:	3301      	adds	r3, #1
 8004fe0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004fe4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004fe8:	2b08      	cmp	r3, #8
 8004fea:	ddf0      	ble.n	8004fce <dwin_data+0x746>
 8004fec:	f000 bc27 	b.w	800583e <dwin_data+0xfb6>
		}else if (((DISPLAY_INPUT[5] == 0x9F) && (DISPLAY_INPUT[8] == 0x01))) {
 8004ff0:	4b41      	ldr	r3, [pc, #260]	@ (80050f8 <dwin_data+0x870>)
 8004ff2:	795b      	ldrb	r3, [r3, #5]
 8004ff4:	2b9f      	cmp	r3, #159	@ 0x9f
 8004ff6:	d13d      	bne.n	8005074 <dwin_data+0x7ec>
 8004ff8:	4b3f      	ldr	r3, [pc, #252]	@ (80050f8 <dwin_data+0x870>)
 8004ffa:	7a1b      	ldrb	r3, [r3, #8]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d139      	bne.n	8005074 <dwin_data+0x7ec>
			vt_flag = 0;
 8005000:	4b3e      	ldr	r3, [pc, #248]	@ (80050fc <dwin_data+0x874>)
 8005002:	2200      	movs	r2, #0
 8005004:	701a      	strb	r2, [r3, #0]
			plt_flag = 0;
 8005006:	4b3e      	ldr	r3, [pc, #248]	@ (8005100 <dwin_data+0x878>)
 8005008:	2200      	movs	r2, #0
 800500a:	701a      	strb	r2, [r3, #0]
			rr_flag = 0;
 800500c:	4b3d      	ldr	r3, [pc, #244]	@ (8005104 <dwin_data+0x87c>)
 800500e:	2200      	movs	r2, #0
 8005010:	701a      	strb	r2, [r3, #0]
			i_flag = 0;
 8005012:	4b3d      	ldr	r3, [pc, #244]	@ (8005108 <dwin_data+0x880>)
 8005014:	2200      	movs	r2, #0
 8005016:	701a      	strb	r2, [r3, #0]
			e_flag = 0;
 8005018:	4b3c      	ldr	r3, [pc, #240]	@ (800510c <dwin_data+0x884>)
 800501a:	2200      	movs	r2, #0
 800501c:	701a      	strb	r2, [r3, #0]
			pu_flag = 0;
 800501e:	4b3c      	ldr	r3, [pc, #240]	@ (8005110 <dwin_data+0x888>)
 8005020:	2200      	movs	r2, #0
 8005022:	701a      	strb	r2, [r3, #0]
			trg_flag = 1;
 8005024:	4b3b      	ldr	r3, [pc, #236]	@ (8005114 <dwin_data+0x88c>)
 8005026:	2201      	movs	r2, #1
 8005028:	701a      	strb	r2, [r3, #0]
			pip_flag = 0;
 800502a:	4b3b      	ldr	r3, [pc, #236]	@ (8005118 <dwin_data+0x890>)
 800502c:	2200      	movs	r2, #0
 800502e:	701a      	strb	r2, [r3, #0]
			peep_flag = 0;
 8005030:	4b3a      	ldr	r3, [pc, #232]	@ (800511c <dwin_data+0x894>)
 8005032:	2200      	movs	r2, #0
 8005034:	701a      	strb	r2, [r3, #0]
			PS_flag = 0;
 8005036:	4b3a      	ldr	r3, [pc, #232]	@ (8005120 <dwin_data+0x898>)
 8005038:	2200      	movs	r2, #0
 800503a:	701a      	strb	r2, [r3, #0]
			display_data(0x10, 0x06, 0x00);
 800503c:	2200      	movs	r2, #0
 800503e:	2106      	movs	r1, #6
 8005040:	2010      	movs	r0, #16
 8005042:	f7fc fead 	bl	8001da0 <display_data>
			temp_add = 0x06;
 8005046:	4b37      	ldr	r3, [pc, #220]	@ (8005124 <dwin_data+0x89c>)
 8005048:	2206      	movs	r2, #6
 800504a:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 800504c:	2300      	movs	r3, #0
 800504e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005052:	e00a      	b.n	800506a <dwin_data+0x7e2>
				DISPLAY_INPUT[a] = 0x00;
 8005054:	4a28      	ldr	r2, [pc, #160]	@ (80050f8 <dwin_data+0x870>)
 8005056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800505a:	4413      	add	r3, r2
 800505c:	2200      	movs	r2, #0
 800505e:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 8005060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005064:	3301      	adds	r3, #1
 8005066:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800506a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800506e:	2b08      	cmp	r3, #8
 8005070:	ddf0      	ble.n	8005054 <dwin_data+0x7cc>
 8005072:	e3e4      	b.n	800583e <dwin_data+0xfb6>
		} else if (((DISPLAY_INPUT[5] == 0xA0) && (DISPLAY_INPUT[8] == 0x01))) {
 8005074:	4b20      	ldr	r3, [pc, #128]	@ (80050f8 <dwin_data+0x870>)
 8005076:	795b      	ldrb	r3, [r3, #5]
 8005078:	2ba0      	cmp	r3, #160	@ 0xa0
 800507a:	d155      	bne.n	8005128 <dwin_data+0x8a0>
 800507c:	4b1e      	ldr	r3, [pc, #120]	@ (80050f8 <dwin_data+0x870>)
 800507e:	7a1b      	ldrb	r3, [r3, #8]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d151      	bne.n	8005128 <dwin_data+0x8a0>
			vt_flag = 0;
 8005084:	4b1d      	ldr	r3, [pc, #116]	@ (80050fc <dwin_data+0x874>)
 8005086:	2200      	movs	r2, #0
 8005088:	701a      	strb	r2, [r3, #0]
			plt_flag = 0;
 800508a:	4b1d      	ldr	r3, [pc, #116]	@ (8005100 <dwin_data+0x878>)
 800508c:	2200      	movs	r2, #0
 800508e:	701a      	strb	r2, [r3, #0]
			rr_flag = 0;
 8005090:	4b1c      	ldr	r3, [pc, #112]	@ (8005104 <dwin_data+0x87c>)
 8005092:	2200      	movs	r2, #0
 8005094:	701a      	strb	r2, [r3, #0]
			i_flag = 0;
 8005096:	4b1c      	ldr	r3, [pc, #112]	@ (8005108 <dwin_data+0x880>)
 8005098:	2200      	movs	r2, #0
 800509a:	701a      	strb	r2, [r3, #0]
			e_flag = 0;
 800509c:	4b1b      	ldr	r3, [pc, #108]	@ (800510c <dwin_data+0x884>)
 800509e:	2200      	movs	r2, #0
 80050a0:	701a      	strb	r2, [r3, #0]
			pu_flag = 0;
 80050a2:	4b1b      	ldr	r3, [pc, #108]	@ (8005110 <dwin_data+0x888>)
 80050a4:	2200      	movs	r2, #0
 80050a6:	701a      	strb	r2, [r3, #0]
			trg_flag = 0;
 80050a8:	4b1a      	ldr	r3, [pc, #104]	@ (8005114 <dwin_data+0x88c>)
 80050aa:	2200      	movs	r2, #0
 80050ac:	701a      	strb	r2, [r3, #0]
			pip_flag = 1;
 80050ae:	4b1a      	ldr	r3, [pc, #104]	@ (8005118 <dwin_data+0x890>)
 80050b0:	2201      	movs	r2, #1
 80050b2:	701a      	strb	r2, [r3, #0]
			peep_flag = 0;
 80050b4:	4b19      	ldr	r3, [pc, #100]	@ (800511c <dwin_data+0x894>)
 80050b6:	2200      	movs	r2, #0
 80050b8:	701a      	strb	r2, [r3, #0]
			PS_flag = 0;
 80050ba:	4b19      	ldr	r3, [pc, #100]	@ (8005120 <dwin_data+0x898>)
 80050bc:	2200      	movs	r2, #0
 80050be:	701a      	strb	r2, [r3, #0]
			display_data(0x10, 0x07, 0x00);
 80050c0:	2200      	movs	r2, #0
 80050c2:	2107      	movs	r1, #7
 80050c4:	2010      	movs	r0, #16
 80050c6:	f7fc fe6b 	bl	8001da0 <display_data>
			temp_add = 0x07;
 80050ca:	4b16      	ldr	r3, [pc, #88]	@ (8005124 <dwin_data+0x89c>)
 80050cc:	2207      	movs	r2, #7
 80050ce:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 80050d0:	2300      	movs	r3, #0
 80050d2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80050d6:	e00a      	b.n	80050ee <dwin_data+0x866>
				DISPLAY_INPUT[a] = 0x00;
 80050d8:	4a07      	ldr	r2, [pc, #28]	@ (80050f8 <dwin_data+0x870>)
 80050da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050de:	4413      	add	r3, r2
 80050e0:	2200      	movs	r2, #0
 80050e2:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 80050e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050e8:	3301      	adds	r3, #1
 80050ea:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80050ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050f2:	2b08      	cmp	r3, #8
 80050f4:	ddf0      	ble.n	80050d8 <dwin_data+0x850>
 80050f6:	e3a2      	b.n	800583e <dwin_data+0xfb6>
 80050f8:	20001584 	.word	0x20001584
 80050fc:	200015ca 	.word	0x200015ca
 8005100:	200015cb 	.word	0x200015cb
 8005104:	200015cc 	.word	0x200015cc
 8005108:	200015c8 	.word	0x200015c8
 800510c:	200015c9 	.word	0x200015c9
 8005110:	200015cd 	.word	0x200015cd
 8005114:	200015ce 	.word	0x200015ce
 8005118:	200015cf 	.word	0x200015cf
 800511c:	200015d0 	.word	0x200015d0
 8005120:	200015d1 	.word	0x200015d1
 8005124:	2000159d 	.word	0x2000159d
		} else if (((DISPLAY_INPUT[5] == 0xA1) && (DISPLAY_INPUT[8] == 0x01))) {
 8005128:	4bac      	ldr	r3, [pc, #688]	@ (80053dc <dwin_data+0xb54>)
 800512a:	795b      	ldrb	r3, [r3, #5]
 800512c:	2ba1      	cmp	r3, #161	@ 0xa1
 800512e:	d13d      	bne.n	80051ac <dwin_data+0x924>
 8005130:	4baa      	ldr	r3, [pc, #680]	@ (80053dc <dwin_data+0xb54>)
 8005132:	7a1b      	ldrb	r3, [r3, #8]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d139      	bne.n	80051ac <dwin_data+0x924>
			vt_flag = 0;
 8005138:	4ba9      	ldr	r3, [pc, #676]	@ (80053e0 <dwin_data+0xb58>)
 800513a:	2200      	movs	r2, #0
 800513c:	701a      	strb	r2, [r3, #0]
			plt_flag = 0;
 800513e:	4ba9      	ldr	r3, [pc, #676]	@ (80053e4 <dwin_data+0xb5c>)
 8005140:	2200      	movs	r2, #0
 8005142:	701a      	strb	r2, [r3, #0]
			rr_flag = 0;
 8005144:	4ba8      	ldr	r3, [pc, #672]	@ (80053e8 <dwin_data+0xb60>)
 8005146:	2200      	movs	r2, #0
 8005148:	701a      	strb	r2, [r3, #0]
			i_flag = 0;
 800514a:	4ba8      	ldr	r3, [pc, #672]	@ (80053ec <dwin_data+0xb64>)
 800514c:	2200      	movs	r2, #0
 800514e:	701a      	strb	r2, [r3, #0]
			e_flag = 0;
 8005150:	4ba7      	ldr	r3, [pc, #668]	@ (80053f0 <dwin_data+0xb68>)
 8005152:	2200      	movs	r2, #0
 8005154:	701a      	strb	r2, [r3, #0]
			pu_flag = 0;
 8005156:	4ba7      	ldr	r3, [pc, #668]	@ (80053f4 <dwin_data+0xb6c>)
 8005158:	2200      	movs	r2, #0
 800515a:	701a      	strb	r2, [r3, #0]
			trg_flag = 0;
 800515c:	4ba6      	ldr	r3, [pc, #664]	@ (80053f8 <dwin_data+0xb70>)
 800515e:	2200      	movs	r2, #0
 8005160:	701a      	strb	r2, [r3, #0]
			pip_flag = 0;
 8005162:	4ba6      	ldr	r3, [pc, #664]	@ (80053fc <dwin_data+0xb74>)
 8005164:	2200      	movs	r2, #0
 8005166:	701a      	strb	r2, [r3, #0]
			peep_flag = 1;
 8005168:	4ba5      	ldr	r3, [pc, #660]	@ (8005400 <dwin_data+0xb78>)
 800516a:	2201      	movs	r2, #1
 800516c:	701a      	strb	r2, [r3, #0]
			PS_flag = 0;
 800516e:	4ba5      	ldr	r3, [pc, #660]	@ (8005404 <dwin_data+0xb7c>)
 8005170:	2200      	movs	r2, #0
 8005172:	701a      	strb	r2, [r3, #0]
			display_data(0x10, 0x08, 0x00);
 8005174:	2200      	movs	r2, #0
 8005176:	2108      	movs	r1, #8
 8005178:	2010      	movs	r0, #16
 800517a:	f7fc fe11 	bl	8001da0 <display_data>
			temp_add = 0x08;
 800517e:	4ba2      	ldr	r3, [pc, #648]	@ (8005408 <dwin_data+0xb80>)
 8005180:	2208      	movs	r2, #8
 8005182:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 8005184:	2300      	movs	r3, #0
 8005186:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800518a:	e00a      	b.n	80051a2 <dwin_data+0x91a>
				DISPLAY_INPUT[a] = 0x00;
 800518c:	4a93      	ldr	r2, [pc, #588]	@ (80053dc <dwin_data+0xb54>)
 800518e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005192:	4413      	add	r3, r2
 8005194:	2200      	movs	r2, #0
 8005196:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 8005198:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800519c:	3301      	adds	r3, #1
 800519e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80051a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051a6:	2b08      	cmp	r3, #8
 80051a8:	ddf0      	ble.n	800518c <dwin_data+0x904>
 80051aa:	e348      	b.n	800583e <dwin_data+0xfb6>
		} else if (((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xAF) && (DISPLAY_INPUT[8] == 0x01))) {
 80051ac:	4b8b      	ldr	r3, [pc, #556]	@ (80053dc <dwin_data+0xb54>)
 80051ae:	791b      	ldrb	r3, [r3, #4]
 80051b0:	2b10      	cmp	r3, #16
 80051b2:	d141      	bne.n	8005238 <dwin_data+0x9b0>
 80051b4:	4b89      	ldr	r3, [pc, #548]	@ (80053dc <dwin_data+0xb54>)
 80051b6:	795b      	ldrb	r3, [r3, #5]
 80051b8:	2baf      	cmp	r3, #175	@ 0xaf
 80051ba:	d13d      	bne.n	8005238 <dwin_data+0x9b0>
 80051bc:	4b87      	ldr	r3, [pc, #540]	@ (80053dc <dwin_data+0xb54>)
 80051be:	7a1b      	ldrb	r3, [r3, #8]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d139      	bne.n	8005238 <dwin_data+0x9b0>
			vt_flag = 0;
 80051c4:	4b86      	ldr	r3, [pc, #536]	@ (80053e0 <dwin_data+0xb58>)
 80051c6:	2200      	movs	r2, #0
 80051c8:	701a      	strb	r2, [r3, #0]
			plt_flag = 0;
 80051ca:	4b86      	ldr	r3, [pc, #536]	@ (80053e4 <dwin_data+0xb5c>)
 80051cc:	2200      	movs	r2, #0
 80051ce:	701a      	strb	r2, [r3, #0]
			rr_flag = 0;
 80051d0:	4b85      	ldr	r3, [pc, #532]	@ (80053e8 <dwin_data+0xb60>)
 80051d2:	2200      	movs	r2, #0
 80051d4:	701a      	strb	r2, [r3, #0]
			i_flag = 0;
 80051d6:	4b85      	ldr	r3, [pc, #532]	@ (80053ec <dwin_data+0xb64>)
 80051d8:	2200      	movs	r2, #0
 80051da:	701a      	strb	r2, [r3, #0]
			e_flag = 0;
 80051dc:	4b84      	ldr	r3, [pc, #528]	@ (80053f0 <dwin_data+0xb68>)
 80051de:	2200      	movs	r2, #0
 80051e0:	701a      	strb	r2, [r3, #0]
			pu_flag = 0;
 80051e2:	4b84      	ldr	r3, [pc, #528]	@ (80053f4 <dwin_data+0xb6c>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	701a      	strb	r2, [r3, #0]
			trg_flag = 0;
 80051e8:	4b83      	ldr	r3, [pc, #524]	@ (80053f8 <dwin_data+0xb70>)
 80051ea:	2200      	movs	r2, #0
 80051ec:	701a      	strb	r2, [r3, #0]
			pip_flag = 0;
 80051ee:	4b83      	ldr	r3, [pc, #524]	@ (80053fc <dwin_data+0xb74>)
 80051f0:	2200      	movs	r2, #0
 80051f2:	701a      	strb	r2, [r3, #0]
			peep_flag = 0;
 80051f4:	4b82      	ldr	r3, [pc, #520]	@ (8005400 <dwin_data+0xb78>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	701a      	strb	r2, [r3, #0]
			PS_flag = 1;
 80051fa:	4b82      	ldr	r3, [pc, #520]	@ (8005404 <dwin_data+0xb7c>)
 80051fc:	2201      	movs	r2, #1
 80051fe:	701a      	strb	r2, [r3, #0]
			display_data(0x10, 0x22, 0x00);
 8005200:	2200      	movs	r2, #0
 8005202:	2122      	movs	r1, #34	@ 0x22
 8005204:	2010      	movs	r0, #16
 8005206:	f7fc fdcb 	bl	8001da0 <display_data>
			clears_add = 0x22;
 800520a:	4b80      	ldr	r3, [pc, #512]	@ (800540c <dwin_data+0xb84>)
 800520c:	2222      	movs	r2, #34	@ 0x22
 800520e:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 8005210:	2300      	movs	r3, #0
 8005212:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005216:	e00a      	b.n	800522e <dwin_data+0x9a6>
				DISPLAY_INPUT[a] = 0x00;
 8005218:	4a70      	ldr	r2, [pc, #448]	@ (80053dc <dwin_data+0xb54>)
 800521a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800521e:	4413      	add	r3, r2
 8005220:	2200      	movs	r2, #0
 8005222:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 8005224:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005228:	3301      	adds	r3, #1
 800522a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800522e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005232:	2b08      	cmp	r3, #8
 8005234:	ddf0      	ble.n	8005218 <dwin_data+0x990>
 8005236:	e302      	b.n	800583e <dwin_data+0xfb6>
		}
		else if (((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA5)
 8005238:	4b68      	ldr	r3, [pc, #416]	@ (80053dc <dwin_data+0xb54>)
 800523a:	791b      	ldrb	r3, [r3, #4]
 800523c:	2b10      	cmp	r3, #16
 800523e:	d141      	bne.n	80052c4 <dwin_data+0xa3c>
 8005240:	4b66      	ldr	r3, [pc, #408]	@ (80053dc <dwin_data+0xb54>)
 8005242:	795b      	ldrb	r3, [r3, #5]
 8005244:	2ba5      	cmp	r3, #165	@ 0xa5
 8005246:	d13d      	bne.n	80052c4 <dwin_data+0xa3c>

				&& (DISPLAY_INPUT[8] == 0x01))) {
 8005248:	4b64      	ldr	r3, [pc, #400]	@ (80053dc <dwin_data+0xb54>)
 800524a:	7a1b      	ldrb	r3, [r3, #8]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d139      	bne.n	80052c4 <dwin_data+0xa3c>
			P_peak_alarm_min_flag = 0;
 8005250:	4b6f      	ldr	r3, [pc, #444]	@ (8005410 <dwin_data+0xb88>)
 8005252:	2200      	movs	r2, #0
 8005254:	701a      	strb	r2, [r3, #0]
			MV_alarm_min_flag = 0;
 8005256:	4b6f      	ldr	r3, [pc, #444]	@ (8005414 <dwin_data+0xb8c>)
 8005258:	2200      	movs	r2, #0
 800525a:	701a      	strb	r2, [r3, #0]
			RR_alarm_min_flag = 0;
 800525c:	4b6e      	ldr	r3, [pc, #440]	@ (8005418 <dwin_data+0xb90>)
 800525e:	2200      	movs	r2, #0
 8005260:	701a      	strb	r2, [r3, #0]
			peep_alarm_min_flag = 0;
 8005262:	4b6e      	ldr	r3, [pc, #440]	@ (800541c <dwin_data+0xb94>)
 8005264:	2200      	movs	r2, #0
 8005266:	701a      	strb	r2, [r3, #0]
			P_peak_alarm_max_flag = 1;
 8005268:	4b6d      	ldr	r3, [pc, #436]	@ (8005420 <dwin_data+0xb98>)
 800526a:	2201      	movs	r2, #1
 800526c:	701a      	strb	r2, [r3, #0]
			MV_alarm_max_flag = 0;
 800526e:	4b6d      	ldr	r3, [pc, #436]	@ (8005424 <dwin_data+0xb9c>)
 8005270:	2200      	movs	r2, #0
 8005272:	701a      	strb	r2, [r3, #0]
			RR_alarm_max_flag = 0;
 8005274:	4b6c      	ldr	r3, [pc, #432]	@ (8005428 <dwin_data+0xba0>)
 8005276:	2200      	movs	r2, #0
 8005278:	701a      	strb	r2, [r3, #0]
			peep_alarm_max_flag = 0;
 800527a:	4b6c      	ldr	r3, [pc, #432]	@ (800542c <dwin_data+0xba4>)
 800527c:	2200      	movs	r2, #0
 800527e:	701a      	strb	r2, [r3, #0]
			O2_alarm_max_flag = 0;
 8005280:	4b6b      	ldr	r3, [pc, #428]	@ (8005430 <dwin_data+0xba8>)
 8005282:	2200      	movs	r2, #0
 8005284:	701a      	strb	r2, [r3, #0]
			O2_alarm_min_flag = 0;
 8005286:	4b6b      	ldr	r3, [pc, #428]	@ (8005434 <dwin_data+0xbac>)
 8005288:	2200      	movs	r2, #0
 800528a:	701a      	strb	r2, [r3, #0]
			display_data(0x10, 0x12, 0x00);
 800528c:	2200      	movs	r2, #0
 800528e:	2112      	movs	r1, #18
 8005290:	2010      	movs	r0, #16
 8005292:	f7fc fd85 	bl	8001da0 <display_data>
			clear_add = 0x12;
 8005296:	4b68      	ldr	r3, [pc, #416]	@ (8005438 <dwin_data+0xbb0>)
 8005298:	2212      	movs	r2, #18
 800529a:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 800529c:	2300      	movs	r3, #0
 800529e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80052a2:	e00a      	b.n	80052ba <dwin_data+0xa32>
				DISPLAY_INPUT[a] = 0x00;
 80052a4:	4a4d      	ldr	r2, [pc, #308]	@ (80053dc <dwin_data+0xb54>)
 80052a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052aa:	4413      	add	r3, r2
 80052ac:	2200      	movs	r2, #0
 80052ae:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 80052b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052b4:	3301      	adds	r3, #1
 80052b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80052ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052be:	2b08      	cmp	r3, #8
 80052c0:	ddf0      	ble.n	80052a4 <dwin_data+0xa1c>
 80052c2:	e2bc      	b.n	800583e <dwin_data+0xfb6>
		}

		else if (((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA6)
 80052c4:	4b45      	ldr	r3, [pc, #276]	@ (80053dc <dwin_data+0xb54>)
 80052c6:	791b      	ldrb	r3, [r3, #4]
 80052c8:	2b10      	cmp	r3, #16
 80052ca:	d141      	bne.n	8005350 <dwin_data+0xac8>
 80052cc:	4b43      	ldr	r3, [pc, #268]	@ (80053dc <dwin_data+0xb54>)
 80052ce:	795b      	ldrb	r3, [r3, #5]
 80052d0:	2ba6      	cmp	r3, #166	@ 0xa6
 80052d2:	d13d      	bne.n	8005350 <dwin_data+0xac8>
				&& (DISPLAY_INPUT[8] == 0x01))) {
 80052d4:	4b41      	ldr	r3, [pc, #260]	@ (80053dc <dwin_data+0xb54>)
 80052d6:	7a1b      	ldrb	r3, [r3, #8]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d139      	bne.n	8005350 <dwin_data+0xac8>
			P_peak_alarm_min_flag = 1;
 80052dc:	4b4c      	ldr	r3, [pc, #304]	@ (8005410 <dwin_data+0xb88>)
 80052de:	2201      	movs	r2, #1
 80052e0:	701a      	strb	r2, [r3, #0]
			MV_alarm_min_flag = 0;
 80052e2:	4b4c      	ldr	r3, [pc, #304]	@ (8005414 <dwin_data+0xb8c>)
 80052e4:	2200      	movs	r2, #0
 80052e6:	701a      	strb	r2, [r3, #0]
			RR_alarm_min_flag = 0;
 80052e8:	4b4b      	ldr	r3, [pc, #300]	@ (8005418 <dwin_data+0xb90>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	701a      	strb	r2, [r3, #0]
			peep_alarm_min_flag = 0;
 80052ee:	4b4b      	ldr	r3, [pc, #300]	@ (800541c <dwin_data+0xb94>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	701a      	strb	r2, [r3, #0]
			P_peak_alarm_max_flag = 0;
 80052f4:	4b4a      	ldr	r3, [pc, #296]	@ (8005420 <dwin_data+0xb98>)
 80052f6:	2200      	movs	r2, #0
 80052f8:	701a      	strb	r2, [r3, #0]
			MV_alarm_max_flag = 0;
 80052fa:	4b4a      	ldr	r3, [pc, #296]	@ (8005424 <dwin_data+0xb9c>)
 80052fc:	2200      	movs	r2, #0
 80052fe:	701a      	strb	r2, [r3, #0]
			RR_alarm_max_flag = 0;
 8005300:	4b49      	ldr	r3, [pc, #292]	@ (8005428 <dwin_data+0xba0>)
 8005302:	2200      	movs	r2, #0
 8005304:	701a      	strb	r2, [r3, #0]
			peep_alarm_max_flag = 0;
 8005306:	4b49      	ldr	r3, [pc, #292]	@ (800542c <dwin_data+0xba4>)
 8005308:	2200      	movs	r2, #0
 800530a:	701a      	strb	r2, [r3, #0]
			O2_alarm_max_flag = 0;
 800530c:	4b48      	ldr	r3, [pc, #288]	@ (8005430 <dwin_data+0xba8>)
 800530e:	2200      	movs	r2, #0
 8005310:	701a      	strb	r2, [r3, #0]
			O2_alarm_min_flag = 0;
 8005312:	4b48      	ldr	r3, [pc, #288]	@ (8005434 <dwin_data+0xbac>)
 8005314:	2200      	movs	r2, #0
 8005316:	701a      	strb	r2, [r3, #0]
			display_data(0x10, 0x13, 0x00);
 8005318:	2200      	movs	r2, #0
 800531a:	2113      	movs	r1, #19
 800531c:	2010      	movs	r0, #16
 800531e:	f7fc fd3f 	bl	8001da0 <display_data>
			clear_add = 0x13;
 8005322:	4b45      	ldr	r3, [pc, #276]	@ (8005438 <dwin_data+0xbb0>)
 8005324:	2213      	movs	r2, #19
 8005326:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 8005328:	2300      	movs	r3, #0
 800532a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800532e:	e00a      	b.n	8005346 <dwin_data+0xabe>
				DISPLAY_INPUT[a] = 0x00;
 8005330:	4a2a      	ldr	r2, [pc, #168]	@ (80053dc <dwin_data+0xb54>)
 8005332:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005336:	4413      	add	r3, r2
 8005338:	2200      	movs	r2, #0
 800533a:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 800533c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005340:	3301      	adds	r3, #1
 8005342:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005346:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800534a:	2b08      	cmp	r3, #8
 800534c:	ddf0      	ble.n	8005330 <dwin_data+0xaa8>
 800534e:	e276      	b.n	800583e <dwin_data+0xfb6>
		}

		else if (((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA7)
 8005350:	4b22      	ldr	r3, [pc, #136]	@ (80053dc <dwin_data+0xb54>)
 8005352:	791b      	ldrb	r3, [r3, #4]
 8005354:	2b10      	cmp	r3, #16
 8005356:	d171      	bne.n	800543c <dwin_data+0xbb4>
 8005358:	4b20      	ldr	r3, [pc, #128]	@ (80053dc <dwin_data+0xb54>)
 800535a:	795b      	ldrb	r3, [r3, #5]
 800535c:	2ba7      	cmp	r3, #167	@ 0xa7
 800535e:	d16d      	bne.n	800543c <dwin_data+0xbb4>
				&& (DISPLAY_INPUT[8] == 0x01))) {
 8005360:	4b1e      	ldr	r3, [pc, #120]	@ (80053dc <dwin_data+0xb54>)
 8005362:	7a1b      	ldrb	r3, [r3, #8]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d169      	bne.n	800543c <dwin_data+0xbb4>
			P_peak_alarm_min_flag = 0;
 8005368:	4b29      	ldr	r3, [pc, #164]	@ (8005410 <dwin_data+0xb88>)
 800536a:	2200      	movs	r2, #0
 800536c:	701a      	strb	r2, [r3, #0]
			MV_alarm_min_flag = 0;
 800536e:	4b29      	ldr	r3, [pc, #164]	@ (8005414 <dwin_data+0xb8c>)
 8005370:	2200      	movs	r2, #0
 8005372:	701a      	strb	r2, [r3, #0]
			RR_alarm_min_flag = 0;
 8005374:	4b28      	ldr	r3, [pc, #160]	@ (8005418 <dwin_data+0xb90>)
 8005376:	2200      	movs	r2, #0
 8005378:	701a      	strb	r2, [r3, #0]
			peep_alarm_min_flag = 0;
 800537a:	4b28      	ldr	r3, [pc, #160]	@ (800541c <dwin_data+0xb94>)
 800537c:	2200      	movs	r2, #0
 800537e:	701a      	strb	r2, [r3, #0]
			P_peak_alarm_max_flag = 0;
 8005380:	4b27      	ldr	r3, [pc, #156]	@ (8005420 <dwin_data+0xb98>)
 8005382:	2200      	movs	r2, #0
 8005384:	701a      	strb	r2, [r3, #0]
			MV_alarm_max_flag = 1;
 8005386:	4b27      	ldr	r3, [pc, #156]	@ (8005424 <dwin_data+0xb9c>)
 8005388:	2201      	movs	r2, #1
 800538a:	701a      	strb	r2, [r3, #0]
			RR_alarm_max_flag = 0;
 800538c:	4b26      	ldr	r3, [pc, #152]	@ (8005428 <dwin_data+0xba0>)
 800538e:	2200      	movs	r2, #0
 8005390:	701a      	strb	r2, [r3, #0]
			peep_alarm_max_flag = 0;
 8005392:	4b26      	ldr	r3, [pc, #152]	@ (800542c <dwin_data+0xba4>)
 8005394:	2200      	movs	r2, #0
 8005396:	701a      	strb	r2, [r3, #0]
			O2_alarm_max_flag = 0;
 8005398:	4b25      	ldr	r3, [pc, #148]	@ (8005430 <dwin_data+0xba8>)
 800539a:	2200      	movs	r2, #0
 800539c:	701a      	strb	r2, [r3, #0]
			O2_alarm_min_flag = 0;
 800539e:	4b25      	ldr	r3, [pc, #148]	@ (8005434 <dwin_data+0xbac>)
 80053a0:	2200      	movs	r2, #0
 80053a2:	701a      	strb	r2, [r3, #0]
			display_data(0x10, 0x14, 0x00);
 80053a4:	2200      	movs	r2, #0
 80053a6:	2114      	movs	r1, #20
 80053a8:	2010      	movs	r0, #16
 80053aa:	f7fc fcf9 	bl	8001da0 <display_data>
			clear_add = 0x14;
 80053ae:	4b22      	ldr	r3, [pc, #136]	@ (8005438 <dwin_data+0xbb0>)
 80053b0:	2214      	movs	r2, #20
 80053b2:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 80053b4:	2300      	movs	r3, #0
 80053b6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80053ba:	e00a      	b.n	80053d2 <dwin_data+0xb4a>
				DISPLAY_INPUT[a] = 0x00;
 80053bc:	4a07      	ldr	r2, [pc, #28]	@ (80053dc <dwin_data+0xb54>)
 80053be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80053c2:	4413      	add	r3, r2
 80053c4:	2200      	movs	r2, #0
 80053c6:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 80053c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80053cc:	3301      	adds	r3, #1
 80053ce:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80053d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80053d6:	2b08      	cmp	r3, #8
 80053d8:	ddf0      	ble.n	80053bc <dwin_data+0xb34>
 80053da:	e230      	b.n	800583e <dwin_data+0xfb6>
 80053dc:	20001584 	.word	0x20001584
 80053e0:	200015ca 	.word	0x200015ca
 80053e4:	200015cb 	.word	0x200015cb
 80053e8:	200015cc 	.word	0x200015cc
 80053ec:	200015c8 	.word	0x200015c8
 80053f0:	200015c9 	.word	0x200015c9
 80053f4:	200015cd 	.word	0x200015cd
 80053f8:	200015ce 	.word	0x200015ce
 80053fc:	200015cf 	.word	0x200015cf
 8005400:	200015d0 	.word	0x200015d0
 8005404:	200015d1 	.word	0x200015d1
 8005408:	2000159d 	.word	0x2000159d
 800540c:	2000159f 	.word	0x2000159f
 8005410:	200015f7 	.word	0x200015f7
 8005414:	200015f8 	.word	0x200015f8
 8005418:	200015f9 	.word	0x200015f9
 800541c:	200015fa 	.word	0x200015fa
 8005420:	200015fc 	.word	0x200015fc
 8005424:	200015fd 	.word	0x200015fd
 8005428:	200015fe 	.word	0x200015fe
 800542c:	200015ff 	.word	0x200015ff
 8005430:	20001600 	.word	0x20001600
 8005434:	200015fb 	.word	0x200015fb
 8005438:	2000159e 	.word	0x2000159e
		}

		else if (((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA8)
 800543c:	4bae      	ldr	r3, [pc, #696]	@ (80056f8 <dwin_data+0xe70>)
 800543e:	791b      	ldrb	r3, [r3, #4]
 8005440:	2b10      	cmp	r3, #16
 8005442:	d141      	bne.n	80054c8 <dwin_data+0xc40>
 8005444:	4bac      	ldr	r3, [pc, #688]	@ (80056f8 <dwin_data+0xe70>)
 8005446:	795b      	ldrb	r3, [r3, #5]
 8005448:	2ba8      	cmp	r3, #168	@ 0xa8
 800544a:	d13d      	bne.n	80054c8 <dwin_data+0xc40>
				&& (DISPLAY_INPUT[8] == 0x01))) {
 800544c:	4baa      	ldr	r3, [pc, #680]	@ (80056f8 <dwin_data+0xe70>)
 800544e:	7a1b      	ldrb	r3, [r3, #8]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d139      	bne.n	80054c8 <dwin_data+0xc40>
			P_peak_alarm_min_flag = 0;
 8005454:	4ba9      	ldr	r3, [pc, #676]	@ (80056fc <dwin_data+0xe74>)
 8005456:	2200      	movs	r2, #0
 8005458:	701a      	strb	r2, [r3, #0]
			MV_alarm_min_flag = 1;
 800545a:	4ba9      	ldr	r3, [pc, #676]	@ (8005700 <dwin_data+0xe78>)
 800545c:	2201      	movs	r2, #1
 800545e:	701a      	strb	r2, [r3, #0]
			RR_alarm_min_flag = 0;
 8005460:	4ba8      	ldr	r3, [pc, #672]	@ (8005704 <dwin_data+0xe7c>)
 8005462:	2200      	movs	r2, #0
 8005464:	701a      	strb	r2, [r3, #0]
			peep_alarm_min_flag = 0;
 8005466:	4ba8      	ldr	r3, [pc, #672]	@ (8005708 <dwin_data+0xe80>)
 8005468:	2200      	movs	r2, #0
 800546a:	701a      	strb	r2, [r3, #0]
			P_peak_alarm_max_flag = 0;
 800546c:	4ba7      	ldr	r3, [pc, #668]	@ (800570c <dwin_data+0xe84>)
 800546e:	2200      	movs	r2, #0
 8005470:	701a      	strb	r2, [r3, #0]
			MV_alarm_max_flag = 0;
 8005472:	4ba7      	ldr	r3, [pc, #668]	@ (8005710 <dwin_data+0xe88>)
 8005474:	2200      	movs	r2, #0
 8005476:	701a      	strb	r2, [r3, #0]
			RR_alarm_max_flag = 0;
 8005478:	4ba6      	ldr	r3, [pc, #664]	@ (8005714 <dwin_data+0xe8c>)
 800547a:	2200      	movs	r2, #0
 800547c:	701a      	strb	r2, [r3, #0]
			peep_alarm_max_flag = 0;
 800547e:	4ba6      	ldr	r3, [pc, #664]	@ (8005718 <dwin_data+0xe90>)
 8005480:	2200      	movs	r2, #0
 8005482:	701a      	strb	r2, [r3, #0]
			O2_alarm_max_flag = 0;
 8005484:	4ba5      	ldr	r3, [pc, #660]	@ (800571c <dwin_data+0xe94>)
 8005486:	2200      	movs	r2, #0
 8005488:	701a      	strb	r2, [r3, #0]
			O2_alarm_min_flag = 0;
 800548a:	4ba5      	ldr	r3, [pc, #660]	@ (8005720 <dwin_data+0xe98>)
 800548c:	2200      	movs	r2, #0
 800548e:	701a      	strb	r2, [r3, #0]
			display_data(0x10, 0x15, 0x00);
 8005490:	2200      	movs	r2, #0
 8005492:	2115      	movs	r1, #21
 8005494:	2010      	movs	r0, #16
 8005496:	f7fc fc83 	bl	8001da0 <display_data>
			clear_add = 0x15;
 800549a:	4ba2      	ldr	r3, [pc, #648]	@ (8005724 <dwin_data+0xe9c>)
 800549c:	2215      	movs	r2, #21
 800549e:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 80054a0:	2300      	movs	r3, #0
 80054a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80054a6:	e00a      	b.n	80054be <dwin_data+0xc36>
				DISPLAY_INPUT[a] = 0x00;
 80054a8:	4a93      	ldr	r2, [pc, #588]	@ (80056f8 <dwin_data+0xe70>)
 80054aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80054ae:	4413      	add	r3, r2
 80054b0:	2200      	movs	r2, #0
 80054b2:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 80054b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80054b8:	3301      	adds	r3, #1
 80054ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80054be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80054c2:	2b08      	cmp	r3, #8
 80054c4:	ddf0      	ble.n	80054a8 <dwin_data+0xc20>
 80054c6:	e1ba      	b.n	800583e <dwin_data+0xfb6>
		}

		else if (((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA9)
 80054c8:	4b8b      	ldr	r3, [pc, #556]	@ (80056f8 <dwin_data+0xe70>)
 80054ca:	791b      	ldrb	r3, [r3, #4]
 80054cc:	2b10      	cmp	r3, #16
 80054ce:	d141      	bne.n	8005554 <dwin_data+0xccc>
 80054d0:	4b89      	ldr	r3, [pc, #548]	@ (80056f8 <dwin_data+0xe70>)
 80054d2:	795b      	ldrb	r3, [r3, #5]
 80054d4:	2ba9      	cmp	r3, #169	@ 0xa9
 80054d6:	d13d      	bne.n	8005554 <dwin_data+0xccc>
				&& (DISPLAY_INPUT[8] == 0x01))) {
 80054d8:	4b87      	ldr	r3, [pc, #540]	@ (80056f8 <dwin_data+0xe70>)
 80054da:	7a1b      	ldrb	r3, [r3, #8]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d139      	bne.n	8005554 <dwin_data+0xccc>
			P_peak_alarm_min_flag = 0;
 80054e0:	4b86      	ldr	r3, [pc, #536]	@ (80056fc <dwin_data+0xe74>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	701a      	strb	r2, [r3, #0]
			MV_alarm_min_flag = 0;
 80054e6:	4b86      	ldr	r3, [pc, #536]	@ (8005700 <dwin_data+0xe78>)
 80054e8:	2200      	movs	r2, #0
 80054ea:	701a      	strb	r2, [r3, #0]
			RR_alarm_min_flag = 0;
 80054ec:	4b85      	ldr	r3, [pc, #532]	@ (8005704 <dwin_data+0xe7c>)
 80054ee:	2200      	movs	r2, #0
 80054f0:	701a      	strb	r2, [r3, #0]
			peep_alarm_min_flag = 0;
 80054f2:	4b85      	ldr	r3, [pc, #532]	@ (8005708 <dwin_data+0xe80>)
 80054f4:	2200      	movs	r2, #0
 80054f6:	701a      	strb	r2, [r3, #0]
			P_peak_alarm_max_flag = 0;
 80054f8:	4b84      	ldr	r3, [pc, #528]	@ (800570c <dwin_data+0xe84>)
 80054fa:	2200      	movs	r2, #0
 80054fc:	701a      	strb	r2, [r3, #0]
			MV_alarm_max_flag = 0;
 80054fe:	4b84      	ldr	r3, [pc, #528]	@ (8005710 <dwin_data+0xe88>)
 8005500:	2200      	movs	r2, #0
 8005502:	701a      	strb	r2, [r3, #0]
			RR_alarm_max_flag = 1;
 8005504:	4b83      	ldr	r3, [pc, #524]	@ (8005714 <dwin_data+0xe8c>)
 8005506:	2201      	movs	r2, #1
 8005508:	701a      	strb	r2, [r3, #0]
			peep_alarm_max_flag = 0;
 800550a:	4b83      	ldr	r3, [pc, #524]	@ (8005718 <dwin_data+0xe90>)
 800550c:	2200      	movs	r2, #0
 800550e:	701a      	strb	r2, [r3, #0]
			O2_alarm_max_flag = 0;
 8005510:	4b82      	ldr	r3, [pc, #520]	@ (800571c <dwin_data+0xe94>)
 8005512:	2200      	movs	r2, #0
 8005514:	701a      	strb	r2, [r3, #0]
			O2_alarm_min_flag = 0;
 8005516:	4b82      	ldr	r3, [pc, #520]	@ (8005720 <dwin_data+0xe98>)
 8005518:	2200      	movs	r2, #0
 800551a:	701a      	strb	r2, [r3, #0]
			display_data(0x10, 0x16, 0x00);
 800551c:	2200      	movs	r2, #0
 800551e:	2116      	movs	r1, #22
 8005520:	2010      	movs	r0, #16
 8005522:	f7fc fc3d 	bl	8001da0 <display_data>
			clear_add = 0x16;
 8005526:	4b7f      	ldr	r3, [pc, #508]	@ (8005724 <dwin_data+0xe9c>)
 8005528:	2216      	movs	r2, #22
 800552a:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 800552c:	2300      	movs	r3, #0
 800552e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005532:	e00a      	b.n	800554a <dwin_data+0xcc2>
				DISPLAY_INPUT[a] = 0x00;
 8005534:	4a70      	ldr	r2, [pc, #448]	@ (80056f8 <dwin_data+0xe70>)
 8005536:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800553a:	4413      	add	r3, r2
 800553c:	2200      	movs	r2, #0
 800553e:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 8005540:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005544:	3301      	adds	r3, #1
 8005546:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800554a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800554e:	2b08      	cmp	r3, #8
 8005550:	ddf0      	ble.n	8005534 <dwin_data+0xcac>
 8005552:	e174      	b.n	800583e <dwin_data+0xfb6>
		}

		else if (((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xAA)
 8005554:	4b68      	ldr	r3, [pc, #416]	@ (80056f8 <dwin_data+0xe70>)
 8005556:	791b      	ldrb	r3, [r3, #4]
 8005558:	2b10      	cmp	r3, #16
 800555a:	d141      	bne.n	80055e0 <dwin_data+0xd58>
 800555c:	4b66      	ldr	r3, [pc, #408]	@ (80056f8 <dwin_data+0xe70>)
 800555e:	795b      	ldrb	r3, [r3, #5]
 8005560:	2baa      	cmp	r3, #170	@ 0xaa
 8005562:	d13d      	bne.n	80055e0 <dwin_data+0xd58>
				&& (DISPLAY_INPUT[8] == 0x01))) {
 8005564:	4b64      	ldr	r3, [pc, #400]	@ (80056f8 <dwin_data+0xe70>)
 8005566:	7a1b      	ldrb	r3, [r3, #8]
 8005568:	2b01      	cmp	r3, #1
 800556a:	d139      	bne.n	80055e0 <dwin_data+0xd58>
			P_peak_alarm_min_flag = 0;
 800556c:	4b63      	ldr	r3, [pc, #396]	@ (80056fc <dwin_data+0xe74>)
 800556e:	2200      	movs	r2, #0
 8005570:	701a      	strb	r2, [r3, #0]
			MV_alarm_min_flag = 0;
 8005572:	4b63      	ldr	r3, [pc, #396]	@ (8005700 <dwin_data+0xe78>)
 8005574:	2200      	movs	r2, #0
 8005576:	701a      	strb	r2, [r3, #0]
			RR_alarm_min_flag = 1;
 8005578:	4b62      	ldr	r3, [pc, #392]	@ (8005704 <dwin_data+0xe7c>)
 800557a:	2201      	movs	r2, #1
 800557c:	701a      	strb	r2, [r3, #0]
			peep_alarm_min_flag = 0;
 800557e:	4b62      	ldr	r3, [pc, #392]	@ (8005708 <dwin_data+0xe80>)
 8005580:	2200      	movs	r2, #0
 8005582:	701a      	strb	r2, [r3, #0]
			P_peak_alarm_max_flag = 0;
 8005584:	4b61      	ldr	r3, [pc, #388]	@ (800570c <dwin_data+0xe84>)
 8005586:	2200      	movs	r2, #0
 8005588:	701a      	strb	r2, [r3, #0]
			MV_alarm_max_flag = 0;
 800558a:	4b61      	ldr	r3, [pc, #388]	@ (8005710 <dwin_data+0xe88>)
 800558c:	2200      	movs	r2, #0
 800558e:	701a      	strb	r2, [r3, #0]
			RR_alarm_max_flag = 0;
 8005590:	4b60      	ldr	r3, [pc, #384]	@ (8005714 <dwin_data+0xe8c>)
 8005592:	2200      	movs	r2, #0
 8005594:	701a      	strb	r2, [r3, #0]
			peep_alarm_max_flag = 0;
 8005596:	4b60      	ldr	r3, [pc, #384]	@ (8005718 <dwin_data+0xe90>)
 8005598:	2200      	movs	r2, #0
 800559a:	701a      	strb	r2, [r3, #0]
			O2_alarm_max_flag = 0;
 800559c:	4b5f      	ldr	r3, [pc, #380]	@ (800571c <dwin_data+0xe94>)
 800559e:	2200      	movs	r2, #0
 80055a0:	701a      	strb	r2, [r3, #0]
			O2_alarm_min_flag = 0;
 80055a2:	4b5f      	ldr	r3, [pc, #380]	@ (8005720 <dwin_data+0xe98>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	701a      	strb	r2, [r3, #0]
			display_data(0x10, 0x17, 0x00);
 80055a8:	2200      	movs	r2, #0
 80055aa:	2117      	movs	r1, #23
 80055ac:	2010      	movs	r0, #16
 80055ae:	f7fc fbf7 	bl	8001da0 <display_data>
			clear_add = 0x17;
 80055b2:	4b5c      	ldr	r3, [pc, #368]	@ (8005724 <dwin_data+0xe9c>)
 80055b4:	2217      	movs	r2, #23
 80055b6:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 80055b8:	2300      	movs	r3, #0
 80055ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80055be:	e00a      	b.n	80055d6 <dwin_data+0xd4e>
				DISPLAY_INPUT[a] = 0x00;
 80055c0:	4a4d      	ldr	r2, [pc, #308]	@ (80056f8 <dwin_data+0xe70>)
 80055c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80055c6:	4413      	add	r3, r2
 80055c8:	2200      	movs	r2, #0
 80055ca:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 80055cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80055d0:	3301      	adds	r3, #1
 80055d2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80055d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80055da:	2b08      	cmp	r3, #8
 80055dc:	ddf0      	ble.n	80055c0 <dwin_data+0xd38>
 80055de:	e12e      	b.n	800583e <dwin_data+0xfb6>
		}

		else if (((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xAB)
 80055e0:	4b45      	ldr	r3, [pc, #276]	@ (80056f8 <dwin_data+0xe70>)
 80055e2:	791b      	ldrb	r3, [r3, #4]
 80055e4:	2b10      	cmp	r3, #16
 80055e6:	d141      	bne.n	800566c <dwin_data+0xde4>
 80055e8:	4b43      	ldr	r3, [pc, #268]	@ (80056f8 <dwin_data+0xe70>)
 80055ea:	795b      	ldrb	r3, [r3, #5]
 80055ec:	2bab      	cmp	r3, #171	@ 0xab
 80055ee:	d13d      	bne.n	800566c <dwin_data+0xde4>
				&& (DISPLAY_INPUT[8] == 0x01))) {
 80055f0:	4b41      	ldr	r3, [pc, #260]	@ (80056f8 <dwin_data+0xe70>)
 80055f2:	7a1b      	ldrb	r3, [r3, #8]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d139      	bne.n	800566c <dwin_data+0xde4>
			P_peak_alarm_min_flag = 0;
 80055f8:	4b40      	ldr	r3, [pc, #256]	@ (80056fc <dwin_data+0xe74>)
 80055fa:	2200      	movs	r2, #0
 80055fc:	701a      	strb	r2, [r3, #0]
			MV_alarm_min_flag = 0;
 80055fe:	4b40      	ldr	r3, [pc, #256]	@ (8005700 <dwin_data+0xe78>)
 8005600:	2200      	movs	r2, #0
 8005602:	701a      	strb	r2, [r3, #0]
			RR_alarm_min_flag = 0;
 8005604:	4b3f      	ldr	r3, [pc, #252]	@ (8005704 <dwin_data+0xe7c>)
 8005606:	2200      	movs	r2, #0
 8005608:	701a      	strb	r2, [r3, #0]
			peep_alarm_min_flag = 0;
 800560a:	4b3f      	ldr	r3, [pc, #252]	@ (8005708 <dwin_data+0xe80>)
 800560c:	2200      	movs	r2, #0
 800560e:	701a      	strb	r2, [r3, #0]
			P_peak_alarm_max_flag = 0;
 8005610:	4b3e      	ldr	r3, [pc, #248]	@ (800570c <dwin_data+0xe84>)
 8005612:	2200      	movs	r2, #0
 8005614:	701a      	strb	r2, [r3, #0]
			MV_alarm_max_flag = 0;
 8005616:	4b3e      	ldr	r3, [pc, #248]	@ (8005710 <dwin_data+0xe88>)
 8005618:	2200      	movs	r2, #0
 800561a:	701a      	strb	r2, [r3, #0]
			RR_alarm_max_flag = 0;
 800561c:	4b3d      	ldr	r3, [pc, #244]	@ (8005714 <dwin_data+0xe8c>)
 800561e:	2200      	movs	r2, #0
 8005620:	701a      	strb	r2, [r3, #0]
			peep_alarm_max_flag = 1;
 8005622:	4b3d      	ldr	r3, [pc, #244]	@ (8005718 <dwin_data+0xe90>)
 8005624:	2201      	movs	r2, #1
 8005626:	701a      	strb	r2, [r3, #0]
			O2_alarm_max_flag = 0;
 8005628:	4b3c      	ldr	r3, [pc, #240]	@ (800571c <dwin_data+0xe94>)
 800562a:	2200      	movs	r2, #0
 800562c:	701a      	strb	r2, [r3, #0]
			O2_alarm_min_flag = 0;
 800562e:	4b3c      	ldr	r3, [pc, #240]	@ (8005720 <dwin_data+0xe98>)
 8005630:	2200      	movs	r2, #0
 8005632:	701a      	strb	r2, [r3, #0]
			display_data(0x10, 0x18, 0x00);
 8005634:	2200      	movs	r2, #0
 8005636:	2118      	movs	r1, #24
 8005638:	2010      	movs	r0, #16
 800563a:	f7fc fbb1 	bl	8001da0 <display_data>
			clear_add = 0x18;
 800563e:	4b39      	ldr	r3, [pc, #228]	@ (8005724 <dwin_data+0xe9c>)
 8005640:	2218      	movs	r2, #24
 8005642:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 8005644:	2300      	movs	r3, #0
 8005646:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800564a:	e00a      	b.n	8005662 <dwin_data+0xdda>
				DISPLAY_INPUT[a] = 0x00;
 800564c:	4a2a      	ldr	r2, [pc, #168]	@ (80056f8 <dwin_data+0xe70>)
 800564e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005652:	4413      	add	r3, r2
 8005654:	2200      	movs	r2, #0
 8005656:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 8005658:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800565c:	3301      	adds	r3, #1
 800565e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005662:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005666:	2b08      	cmp	r3, #8
 8005668:	ddf0      	ble.n	800564c <dwin_data+0xdc4>
 800566a:	e0e8      	b.n	800583e <dwin_data+0xfb6>
		}

		else if (((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xAC)
 800566c:	4b22      	ldr	r3, [pc, #136]	@ (80056f8 <dwin_data+0xe70>)
 800566e:	791b      	ldrb	r3, [r3, #4]
 8005670:	2b10      	cmp	r3, #16
 8005672:	d159      	bne.n	8005728 <dwin_data+0xea0>
 8005674:	4b20      	ldr	r3, [pc, #128]	@ (80056f8 <dwin_data+0xe70>)
 8005676:	795b      	ldrb	r3, [r3, #5]
 8005678:	2bac      	cmp	r3, #172	@ 0xac
 800567a:	d155      	bne.n	8005728 <dwin_data+0xea0>
				&& (DISPLAY_INPUT[8] == 0x01))) {
 800567c:	4b1e      	ldr	r3, [pc, #120]	@ (80056f8 <dwin_data+0xe70>)
 800567e:	7a1b      	ldrb	r3, [r3, #8]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d151      	bne.n	8005728 <dwin_data+0xea0>
			P_peak_alarm_min_flag = 0;
 8005684:	4b1d      	ldr	r3, [pc, #116]	@ (80056fc <dwin_data+0xe74>)
 8005686:	2200      	movs	r2, #0
 8005688:	701a      	strb	r2, [r3, #0]
			MV_alarm_min_flag = 0;
 800568a:	4b1d      	ldr	r3, [pc, #116]	@ (8005700 <dwin_data+0xe78>)
 800568c:	2200      	movs	r2, #0
 800568e:	701a      	strb	r2, [r3, #0]
			RR_alarm_min_flag = 0;
 8005690:	4b1c      	ldr	r3, [pc, #112]	@ (8005704 <dwin_data+0xe7c>)
 8005692:	2200      	movs	r2, #0
 8005694:	701a      	strb	r2, [r3, #0]
			peep_alarm_min_flag = 1;
 8005696:	4b1c      	ldr	r3, [pc, #112]	@ (8005708 <dwin_data+0xe80>)
 8005698:	2201      	movs	r2, #1
 800569a:	701a      	strb	r2, [r3, #0]
			P_peak_alarm_max_flag = 0;
 800569c:	4b1b      	ldr	r3, [pc, #108]	@ (800570c <dwin_data+0xe84>)
 800569e:	2200      	movs	r2, #0
 80056a0:	701a      	strb	r2, [r3, #0]
			MV_alarm_max_flag = 0;
 80056a2:	4b1b      	ldr	r3, [pc, #108]	@ (8005710 <dwin_data+0xe88>)
 80056a4:	2200      	movs	r2, #0
 80056a6:	701a      	strb	r2, [r3, #0]
			RR_alarm_max_flag = 0;
 80056a8:	4b1a      	ldr	r3, [pc, #104]	@ (8005714 <dwin_data+0xe8c>)
 80056aa:	2200      	movs	r2, #0
 80056ac:	701a      	strb	r2, [r3, #0]
			peep_alarm_max_flag = 0;
 80056ae:	4b1a      	ldr	r3, [pc, #104]	@ (8005718 <dwin_data+0xe90>)
 80056b0:	2200      	movs	r2, #0
 80056b2:	701a      	strb	r2, [r3, #0]
			O2_alarm_max_flag = 0;
 80056b4:	4b19      	ldr	r3, [pc, #100]	@ (800571c <dwin_data+0xe94>)
 80056b6:	2200      	movs	r2, #0
 80056b8:	701a      	strb	r2, [r3, #0]
			O2_alarm_min_flag = 0;
 80056ba:	4b19      	ldr	r3, [pc, #100]	@ (8005720 <dwin_data+0xe98>)
 80056bc:	2200      	movs	r2, #0
 80056be:	701a      	strb	r2, [r3, #0]
			display_data(0x10, 0x19, 0x00);
 80056c0:	2200      	movs	r2, #0
 80056c2:	2119      	movs	r1, #25
 80056c4:	2010      	movs	r0, #16
 80056c6:	f7fc fb6b 	bl	8001da0 <display_data>
			clear_add = 0x19;
 80056ca:	4b16      	ldr	r3, [pc, #88]	@ (8005724 <dwin_data+0xe9c>)
 80056cc:	2219      	movs	r2, #25
 80056ce:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 80056d0:	2300      	movs	r3, #0
 80056d2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80056d6:	e00a      	b.n	80056ee <dwin_data+0xe66>
				DISPLAY_INPUT[a] = 0x00;
 80056d8:	4a07      	ldr	r2, [pc, #28]	@ (80056f8 <dwin_data+0xe70>)
 80056da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80056de:	4413      	add	r3, r2
 80056e0:	2200      	movs	r2, #0
 80056e2:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 80056e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80056e8:	3301      	adds	r3, #1
 80056ea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80056ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80056f2:	2b08      	cmp	r3, #8
 80056f4:	ddf0      	ble.n	80056d8 <dwin_data+0xe50>
 80056f6:	e0a2      	b.n	800583e <dwin_data+0xfb6>
 80056f8:	20001584 	.word	0x20001584
 80056fc:	200015f7 	.word	0x200015f7
 8005700:	200015f8 	.word	0x200015f8
 8005704:	200015f9 	.word	0x200015f9
 8005708:	200015fa 	.word	0x200015fa
 800570c:	200015fc 	.word	0x200015fc
 8005710:	200015fd 	.word	0x200015fd
 8005714:	200015fe 	.word	0x200015fe
 8005718:	200015ff 	.word	0x200015ff
 800571c:	20001600 	.word	0x20001600
 8005720:	200015fb 	.word	0x200015fb
 8005724:	2000159e 	.word	0x2000159e
		}
		else if (((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xAD)
 8005728:	4ba6      	ldr	r3, [pc, #664]	@ (80059c4 <dwin_data+0x113c>)
 800572a:	791b      	ldrb	r3, [r3, #4]
 800572c:	2b10      	cmp	r3, #16
 800572e:	d141      	bne.n	80057b4 <dwin_data+0xf2c>
 8005730:	4ba4      	ldr	r3, [pc, #656]	@ (80059c4 <dwin_data+0x113c>)
 8005732:	795b      	ldrb	r3, [r3, #5]
 8005734:	2bad      	cmp	r3, #173	@ 0xad
 8005736:	d13d      	bne.n	80057b4 <dwin_data+0xf2c>
				&& (DISPLAY_INPUT[8] == 0x01))) {
 8005738:	4ba2      	ldr	r3, [pc, #648]	@ (80059c4 <dwin_data+0x113c>)
 800573a:	7a1b      	ldrb	r3, [r3, #8]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d139      	bne.n	80057b4 <dwin_data+0xf2c>
			P_peak_alarm_min_flag = 0;
 8005740:	4ba1      	ldr	r3, [pc, #644]	@ (80059c8 <dwin_data+0x1140>)
 8005742:	2200      	movs	r2, #0
 8005744:	701a      	strb	r2, [r3, #0]
			MV_alarm_min_flag = 0;
 8005746:	4ba1      	ldr	r3, [pc, #644]	@ (80059cc <dwin_data+0x1144>)
 8005748:	2200      	movs	r2, #0
 800574a:	701a      	strb	r2, [r3, #0]
			RR_alarm_min_flag = 0;
 800574c:	4ba0      	ldr	r3, [pc, #640]	@ (80059d0 <dwin_data+0x1148>)
 800574e:	2200      	movs	r2, #0
 8005750:	701a      	strb	r2, [r3, #0]
			peep_alarm_min_flag = 0;
 8005752:	4ba0      	ldr	r3, [pc, #640]	@ (80059d4 <dwin_data+0x114c>)
 8005754:	2200      	movs	r2, #0
 8005756:	701a      	strb	r2, [r3, #0]
			P_peak_alarm_max_flag = 0;
 8005758:	4b9f      	ldr	r3, [pc, #636]	@ (80059d8 <dwin_data+0x1150>)
 800575a:	2200      	movs	r2, #0
 800575c:	701a      	strb	r2, [r3, #0]
			MV_alarm_max_flag = 0;
 800575e:	4b9f      	ldr	r3, [pc, #636]	@ (80059dc <dwin_data+0x1154>)
 8005760:	2200      	movs	r2, #0
 8005762:	701a      	strb	r2, [r3, #0]
			RR_alarm_max_flag = 0;
 8005764:	4b9e      	ldr	r3, [pc, #632]	@ (80059e0 <dwin_data+0x1158>)
 8005766:	2200      	movs	r2, #0
 8005768:	701a      	strb	r2, [r3, #0]
			peep_alarm_max_flag = 0;
 800576a:	4b9e      	ldr	r3, [pc, #632]	@ (80059e4 <dwin_data+0x115c>)
 800576c:	2200      	movs	r2, #0
 800576e:	701a      	strb	r2, [r3, #0]
			O2_alarm_max_flag = 1;
 8005770:	4b9d      	ldr	r3, [pc, #628]	@ (80059e8 <dwin_data+0x1160>)
 8005772:	2201      	movs	r2, #1
 8005774:	701a      	strb	r2, [r3, #0]
			O2_alarm_min_flag = 0;
 8005776:	4b9d      	ldr	r3, [pc, #628]	@ (80059ec <dwin_data+0x1164>)
 8005778:	2200      	movs	r2, #0
 800577a:	701a      	strb	r2, [r3, #0]
			display_data(0x10, 0x20, 0x00);
 800577c:	2200      	movs	r2, #0
 800577e:	2120      	movs	r1, #32
 8005780:	2010      	movs	r0, #16
 8005782:	f7fc fb0d 	bl	8001da0 <display_data>
			clears_add = 0x20;
 8005786:	4b9a      	ldr	r3, [pc, #616]	@ (80059f0 <dwin_data+0x1168>)
 8005788:	2220      	movs	r2, #32
 800578a:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 800578c:	2300      	movs	r3, #0
 800578e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005792:	e00a      	b.n	80057aa <dwin_data+0xf22>
				DISPLAY_INPUT[a] = 0x00;
 8005794:	4a8b      	ldr	r2, [pc, #556]	@ (80059c4 <dwin_data+0x113c>)
 8005796:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800579a:	4413      	add	r3, r2
 800579c:	2200      	movs	r2, #0
 800579e:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 80057a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80057a4:	3301      	adds	r3, #1
 80057a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80057aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80057ae:	2b08      	cmp	r3, #8
 80057b0:	ddf0      	ble.n	8005794 <dwin_data+0xf0c>
 80057b2:	e044      	b.n	800583e <dwin_data+0xfb6>
		}

		else if (((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xAE)
 80057b4:	4b83      	ldr	r3, [pc, #524]	@ (80059c4 <dwin_data+0x113c>)
 80057b6:	791b      	ldrb	r3, [r3, #4]
 80057b8:	2b10      	cmp	r3, #16
 80057ba:	d140      	bne.n	800583e <dwin_data+0xfb6>
 80057bc:	4b81      	ldr	r3, [pc, #516]	@ (80059c4 <dwin_data+0x113c>)
 80057be:	795b      	ldrb	r3, [r3, #5]
 80057c0:	2bae      	cmp	r3, #174	@ 0xae
 80057c2:	d13c      	bne.n	800583e <dwin_data+0xfb6>
				&& (DISPLAY_INPUT[8] == 0x01))) {
 80057c4:	4b7f      	ldr	r3, [pc, #508]	@ (80059c4 <dwin_data+0x113c>)
 80057c6:	7a1b      	ldrb	r3, [r3, #8]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d138      	bne.n	800583e <dwin_data+0xfb6>
			P_peak_alarm_min_flag = 0;
 80057cc:	4b7e      	ldr	r3, [pc, #504]	@ (80059c8 <dwin_data+0x1140>)
 80057ce:	2200      	movs	r2, #0
 80057d0:	701a      	strb	r2, [r3, #0]
			MV_alarm_min_flag = 0;
 80057d2:	4b7e      	ldr	r3, [pc, #504]	@ (80059cc <dwin_data+0x1144>)
 80057d4:	2200      	movs	r2, #0
 80057d6:	701a      	strb	r2, [r3, #0]
			RR_alarm_min_flag = 0;
 80057d8:	4b7d      	ldr	r3, [pc, #500]	@ (80059d0 <dwin_data+0x1148>)
 80057da:	2200      	movs	r2, #0
 80057dc:	701a      	strb	r2, [r3, #0]
			peep_alarm_min_flag = 0;
 80057de:	4b7d      	ldr	r3, [pc, #500]	@ (80059d4 <dwin_data+0x114c>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	701a      	strb	r2, [r3, #0]
			P_peak_alarm_max_flag = 0;
 80057e4:	4b7c      	ldr	r3, [pc, #496]	@ (80059d8 <dwin_data+0x1150>)
 80057e6:	2200      	movs	r2, #0
 80057e8:	701a      	strb	r2, [r3, #0]
			MV_alarm_max_flag = 0;
 80057ea:	4b7c      	ldr	r3, [pc, #496]	@ (80059dc <dwin_data+0x1154>)
 80057ec:	2200      	movs	r2, #0
 80057ee:	701a      	strb	r2, [r3, #0]
			RR_alarm_max_flag = 0;
 80057f0:	4b7b      	ldr	r3, [pc, #492]	@ (80059e0 <dwin_data+0x1158>)
 80057f2:	2200      	movs	r2, #0
 80057f4:	701a      	strb	r2, [r3, #0]
			peep_alarm_max_flag = 0;
 80057f6:	4b7b      	ldr	r3, [pc, #492]	@ (80059e4 <dwin_data+0x115c>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	701a      	strb	r2, [r3, #0]
			O2_alarm_max_flag = 0;
 80057fc:	4b7a      	ldr	r3, [pc, #488]	@ (80059e8 <dwin_data+0x1160>)
 80057fe:	2200      	movs	r2, #0
 8005800:	701a      	strb	r2, [r3, #0]
			O2_alarm_min_flag = 1;
 8005802:	4b7a      	ldr	r3, [pc, #488]	@ (80059ec <dwin_data+0x1164>)
 8005804:	2201      	movs	r2, #1
 8005806:	701a      	strb	r2, [r3, #0]
			display_data(0x10, 0x21, 0x00);
 8005808:	2200      	movs	r2, #0
 800580a:	2121      	movs	r1, #33	@ 0x21
 800580c:	2010      	movs	r0, #16
 800580e:	f7fc fac7 	bl	8001da0 <display_data>
			clears_add = 0x21;
 8005812:	4b77      	ldr	r3, [pc, #476]	@ (80059f0 <dwin_data+0x1168>)
 8005814:	2221      	movs	r2, #33	@ 0x21
 8005816:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 8005818:	2300      	movs	r3, #0
 800581a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800581e:	e00a      	b.n	8005836 <dwin_data+0xfae>
				DISPLAY_INPUT[a] = 0x00;
 8005820:	4a68      	ldr	r2, [pc, #416]	@ (80059c4 <dwin_data+0x113c>)
 8005822:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005826:	4413      	add	r3, r2
 8005828:	2200      	movs	r2, #0
 800582a:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 800582c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005830:	3301      	adds	r3, #1
 8005832:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005836:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800583a:	2b08      	cmp	r3, #8
 800583c:	ddf0      	ble.n	8005820 <dwin_data+0xf98>
		}


		////////////////////This part to increase and dicres all the values////////////////////////////////////
		if (i_flag == 1) {
 800583e:	4b6d      	ldr	r3, [pc, #436]	@ (80059f4 <dwin_data+0x116c>)
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d053      	beq.n	80058ee <dwin_data+0x1066>
			if (((DISPLAY_INPUT[5] == 0xA2) && (DISPLAY_INPUT[8] == 0x01))) {
 8005846:	4b5f      	ldr	r3, [pc, #380]	@ (80059c4 <dwin_data+0x113c>)
 8005848:	795b      	ldrb	r3, [r3, #5]
 800584a:	2ba2      	cmp	r3, #162	@ 0xa2
 800584c:	d124      	bne.n	8005898 <dwin_data+0x1010>
 800584e:	4b5d      	ldr	r3, [pc, #372]	@ (80059c4 <dwin_data+0x113c>)
 8005850:	7a1b      	ldrb	r3, [r3, #8]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d120      	bne.n	8005898 <dwin_data+0x1010>
				insP_value += 0x01;
 8005856:	4b68      	ldr	r3, [pc, #416]	@ (80059f8 <dwin_data+0x1170>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	3301      	adds	r3, #1
 800585c:	4a66      	ldr	r2, [pc, #408]	@ (80059f8 <dwin_data+0x1170>)
 800585e:	6013      	str	r3, [r2, #0]
				intiger_val_send(0x24, insP_value);
 8005860:	4b65      	ldr	r3, [pc, #404]	@ (80059f8 <dwin_data+0x1170>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	b2db      	uxtb	r3, r3
 8005866:	4619      	mov	r1, r3
 8005868:	2024      	movs	r0, #36	@ 0x24
 800586a:	f7fc fd2b 	bl	80022c4 <intiger_val_send>
				for (int a = 0; a < 9; a++)
 800586e:	2300      	movs	r3, #0
 8005870:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005874:	e00a      	b.n	800588c <dwin_data+0x1004>
					DISPLAY_INPUT[a] = 0x00;
 8005876:	4a53      	ldr	r2, [pc, #332]	@ (80059c4 <dwin_data+0x113c>)
 8005878:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800587c:	4413      	add	r3, r2
 800587e:	2200      	movs	r2, #0
 8005880:	701a      	strb	r2, [r3, #0]
				for (int a = 0; a < 9; a++)
 8005882:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005886:	3301      	adds	r3, #1
 8005888:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800588c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005890:	2b08      	cmp	r3, #8
 8005892:	ddf0      	ble.n	8005876 <dwin_data+0xfee>
 8005894:	f001 b8b2 	b.w	80069fc <dwin_data+0x2174>
			} else if (((DISPLAY_INPUT[5] == 0xA3)
 8005898:	4b4a      	ldr	r3, [pc, #296]	@ (80059c4 <dwin_data+0x113c>)
 800589a:	795b      	ldrb	r3, [r3, #5]
 800589c:	2ba3      	cmp	r3, #163	@ 0xa3
 800589e:	f041 80ad 	bne.w	80069fc <dwin_data+0x2174>
					&& (DISPLAY_INPUT[8] == 0x01))) {
 80058a2:	4b48      	ldr	r3, [pc, #288]	@ (80059c4 <dwin_data+0x113c>)
 80058a4:	7a1b      	ldrb	r3, [r3, #8]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	f041 80a8 	bne.w	80069fc <dwin_data+0x2174>
				insP_value -= 0x01;
 80058ac:	4b52      	ldr	r3, [pc, #328]	@ (80059f8 <dwin_data+0x1170>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	3b01      	subs	r3, #1
 80058b2:	4a51      	ldr	r2, [pc, #324]	@ (80059f8 <dwin_data+0x1170>)
 80058b4:	6013      	str	r3, [r2, #0]
				intiger_val_send(0x24, insP_value);
 80058b6:	4b50      	ldr	r3, [pc, #320]	@ (80059f8 <dwin_data+0x1170>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	4619      	mov	r1, r3
 80058be:	2024      	movs	r0, #36	@ 0x24
 80058c0:	f7fc fd00 	bl	80022c4 <intiger_val_send>
				for (int a = 0; a < 9; a++)
 80058c4:	2300      	movs	r3, #0
 80058c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80058ca:	e00a      	b.n	80058e2 <dwin_data+0x105a>
					DISPLAY_INPUT[a] = 0x00;
 80058cc:	4a3d      	ldr	r2, [pc, #244]	@ (80059c4 <dwin_data+0x113c>)
 80058ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80058d2:	4413      	add	r3, r2
 80058d4:	2200      	movs	r2, #0
 80058d6:	701a      	strb	r2, [r3, #0]
				for (int a = 0; a < 9; a++)
 80058d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80058dc:	3301      	adds	r3, #1
 80058de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80058e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80058e6:	2b08      	cmp	r3, #8
 80058e8:	ddf0      	ble.n	80058cc <dwin_data+0x1044>
 80058ea:	f001 b887 	b.w	80069fc <dwin_data+0x2174>
			}
		} else if (e_flag == 1) {
 80058ee:	4b43      	ldr	r3, [pc, #268]	@ (80059fc <dwin_data+0x1174>)
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d053      	beq.n	800599e <dwin_data+0x1116>
			if (((DISPLAY_INPUT[5] == 0xA2) && (DISPLAY_INPUT[8] == 0x01))) {
 80058f6:	4b33      	ldr	r3, [pc, #204]	@ (80059c4 <dwin_data+0x113c>)
 80058f8:	795b      	ldrb	r3, [r3, #5]
 80058fa:	2ba2      	cmp	r3, #162	@ 0xa2
 80058fc:	d124      	bne.n	8005948 <dwin_data+0x10c0>
 80058fe:	4b31      	ldr	r3, [pc, #196]	@ (80059c4 <dwin_data+0x113c>)
 8005900:	7a1b      	ldrb	r3, [r3, #8]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d120      	bne.n	8005948 <dwin_data+0x10c0>
				exp_value += 0x01;
 8005906:	4b3e      	ldr	r3, [pc, #248]	@ (8005a00 <dwin_data+0x1178>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	3301      	adds	r3, #1
 800590c:	4a3c      	ldr	r2, [pc, #240]	@ (8005a00 <dwin_data+0x1178>)
 800590e:	6013      	str	r3, [r2, #0]
				intiger_val_send(0x25, exp_value);
 8005910:	4b3b      	ldr	r3, [pc, #236]	@ (8005a00 <dwin_data+0x1178>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	b2db      	uxtb	r3, r3
 8005916:	4619      	mov	r1, r3
 8005918:	2025      	movs	r0, #37	@ 0x25
 800591a:	f7fc fcd3 	bl	80022c4 <intiger_val_send>
				for (int a = 0; a < 9; a++)
 800591e:	2300      	movs	r3, #0
 8005920:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005924:	e00a      	b.n	800593c <dwin_data+0x10b4>
					DISPLAY_INPUT[a] = 0x00;
 8005926:	4a27      	ldr	r2, [pc, #156]	@ (80059c4 <dwin_data+0x113c>)
 8005928:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800592c:	4413      	add	r3, r2
 800592e:	2200      	movs	r2, #0
 8005930:	701a      	strb	r2, [r3, #0]
				for (int a = 0; a < 9; a++)
 8005932:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005936:	3301      	adds	r3, #1
 8005938:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800593c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005940:	2b08      	cmp	r3, #8
 8005942:	ddf0      	ble.n	8005926 <dwin_data+0x109e>
 8005944:	f001 b85a 	b.w	80069fc <dwin_data+0x2174>
			} else if (((DISPLAY_INPUT[5] == 0xA3)
 8005948:	4b1e      	ldr	r3, [pc, #120]	@ (80059c4 <dwin_data+0x113c>)
 800594a:	795b      	ldrb	r3, [r3, #5]
 800594c:	2ba3      	cmp	r3, #163	@ 0xa3
 800594e:	f041 8055 	bne.w	80069fc <dwin_data+0x2174>
					&& (DISPLAY_INPUT[8] == 0x01))) {
 8005952:	4b1c      	ldr	r3, [pc, #112]	@ (80059c4 <dwin_data+0x113c>)
 8005954:	7a1b      	ldrb	r3, [r3, #8]
 8005956:	2b01      	cmp	r3, #1
 8005958:	f041 8050 	bne.w	80069fc <dwin_data+0x2174>
				exp_value -= 0x01;
 800595c:	4b28      	ldr	r3, [pc, #160]	@ (8005a00 <dwin_data+0x1178>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	3b01      	subs	r3, #1
 8005962:	4a27      	ldr	r2, [pc, #156]	@ (8005a00 <dwin_data+0x1178>)
 8005964:	6013      	str	r3, [r2, #0]
				intiger_val_send(0x25, exp_value);
 8005966:	4b26      	ldr	r3, [pc, #152]	@ (8005a00 <dwin_data+0x1178>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	b2db      	uxtb	r3, r3
 800596c:	4619      	mov	r1, r3
 800596e:	2025      	movs	r0, #37	@ 0x25
 8005970:	f7fc fca8 	bl	80022c4 <intiger_val_send>
				for (int a = 0; a < 9; a++)
 8005974:	2300      	movs	r3, #0
 8005976:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800597a:	e00a      	b.n	8005992 <dwin_data+0x110a>
					DISPLAY_INPUT[a] = 0x00;
 800597c:	4a11      	ldr	r2, [pc, #68]	@ (80059c4 <dwin_data+0x113c>)
 800597e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005982:	4413      	add	r3, r2
 8005984:	2200      	movs	r2, #0
 8005986:	701a      	strb	r2, [r3, #0]
				for (int a = 0; a < 9; a++)
 8005988:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800598c:	3301      	adds	r3, #1
 800598e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005992:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005996:	2b08      	cmp	r3, #8
 8005998:	ddf0      	ble.n	800597c <dwin_data+0x10f4>
 800599a:	f001 b82f 	b.w	80069fc <dwin_data+0x2174>
			}
		} else if (vt_flag == 1) {
 800599e:	4b19      	ldr	r3, [pc, #100]	@ (8005a04 <dwin_data+0x117c>)
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d030      	beq.n	8005a08 <dwin_data+0x1180>
			if (((DISPLAY_INPUT[5] == 0xA2) && (DISPLAY_INPUT[8] == 0x01))) {
 80059a6:	4b07      	ldr	r3, [pc, #28]	@ (80059c4 <dwin_data+0x113c>)
 80059a8:	795b      	ldrb	r3, [r3, #5]
 80059aa:	2ba2      	cmp	r3, #162	@ 0xa2
 80059ac:	f041 8026 	bne.w	80069fc <dwin_data+0x2174>
 80059b0:	4b04      	ldr	r3, [pc, #16]	@ (80059c4 <dwin_data+0x113c>)
 80059b2:	7a1b      	ldrb	r3, [r3, #8]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	f001 8021 	beq.w	80069fc <dwin_data+0x2174>
				//					vt_value += 10;
				//					intiger_val_vt_send(0x01, vt_value);
				//					for (int a = 0; a < 9; a++)
				//						DISPLAY_INPUT[a] = 0x00;
				//				}
			} else if (((DISPLAY_INPUT[5] == 0xA3) && (DISPLAY_INPUT[8] == 0x01))) {
 80059ba:	4b02      	ldr	r3, [pc, #8]	@ (80059c4 <dwin_data+0x113c>)
 80059bc:	795b      	ldrb	r3, [r3, #5]
 80059be:	2ba3      	cmp	r3, #163	@ 0xa3
 80059c0:	f001 b81c 	b.w	80069fc <dwin_data+0x2174>
 80059c4:	20001584 	.word	0x20001584
 80059c8:	200015f7 	.word	0x200015f7
 80059cc:	200015f8 	.word	0x200015f8
 80059d0:	200015f9 	.word	0x200015f9
 80059d4:	200015fa 	.word	0x200015fa
 80059d8:	200015fc 	.word	0x200015fc
 80059dc:	200015fd 	.word	0x200015fd
 80059e0:	200015fe 	.word	0x200015fe
 80059e4:	200015ff 	.word	0x200015ff
 80059e8:	20001600 	.word	0x20001600
 80059ec:	200015fb 	.word	0x200015fb
 80059f0:	2000159f 	.word	0x2000159f
 80059f4:	200015c8 	.word	0x200015c8
 80059f8:	2000001c 	.word	0x2000001c
 80059fc:	200015c9 	.word	0x200015c9
 8005a00:	20000020 	.word	0x20000020
 8005a04:	200015ca 	.word	0x200015ca
				//					intiger_val_vt_send(0x01, vt_value);
				//					for (int a = 0; a < 9; a++)
				//						DISPLAY_INPUT[a] = 0x00;
				//				}
			}
		} else if (plt_flag == 1) {
 8005a08:	4bad      	ldr	r3, [pc, #692]	@ (8005cc0 <dwin_data+0x1438>)
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f000 8082 	beq.w	8005b16 <dwin_data+0x128e>
			if (((DISPLAY_INPUT[5] == 0xA2) && (DISPLAY_INPUT[8] == 0x01))) {
 8005a12:	4bac      	ldr	r3, [pc, #688]	@ (8005cc4 <dwin_data+0x143c>)
 8005a14:	795b      	ldrb	r3, [r3, #5]
 8005a16:	2ba2      	cmp	r3, #162	@ 0xa2
 8005a18:	d13b      	bne.n	8005a92 <dwin_data+0x120a>
 8005a1a:	4baa      	ldr	r3, [pc, #680]	@ (8005cc4 <dwin_data+0x143c>)
 8005a1c:	7a1b      	ldrb	r3, [r3, #8]
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d137      	bne.n	8005a92 <dwin_data+0x120a>
				if (PLR_value == 60) {
 8005a22:	4ba9      	ldr	r3, [pc, #676]	@ (8005cc8 <dwin_data+0x1440>)
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	2b3c      	cmp	r3, #60	@ 0x3c
 8005a28:	d105      	bne.n	8005a36 <dwin_data+0x11ae>
					PLR_value = PLR_value;
 8005a2a:	4ba7      	ldr	r3, [pc, #668]	@ (8005cc8 <dwin_data+0x1440>)
 8005a2c:	781a      	ldrb	r2, [r3, #0]
 8005a2e:	4ba6      	ldr	r3, [pc, #664]	@ (8005cc8 <dwin_data+0x1440>)
 8005a30:	701a      	strb	r2, [r3, #0]
				if (PLR_value == 60) {
 8005a32:	f000 bfe3 	b.w	80069fc <dwin_data+0x2174>
				} else {
					Value_reset_flag = 0;
 8005a36:	4ba5      	ldr	r3, [pc, #660]	@ (8005ccc <dwin_data+0x1444>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	701a      	strb	r2, [r3, #0]
					plt_value_reset_flag = 1;
 8005a3c:	4ba4      	ldr	r3, [pc, #656]	@ (8005cd0 <dwin_data+0x1448>)
 8005a3e:	2201      	movs	r2, #1
 8005a40:	701a      	strb	r2, [r3, #0]
					osTimerStart(Touch_value_resetHandle, 5000);
 8005a42:	4ba4      	ldr	r3, [pc, #656]	@ (8005cd4 <dwin_data+0x144c>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f241 3188 	movw	r1, #5000	@ 0x1388
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f00a fcfe 	bl	801044c <osTimerStart>
					PLR_value += 1;
 8005a50:	4b9d      	ldr	r3, [pc, #628]	@ (8005cc8 <dwin_data+0x1440>)
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	3301      	adds	r3, #1
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	4b9b      	ldr	r3, [pc, #620]	@ (8005cc8 <dwin_data+0x1440>)
 8005a5a:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x02, PLR_value);
 8005a5c:	4b9a      	ldr	r3, [pc, #616]	@ (8005cc8 <dwin_data+0x1440>)
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	4619      	mov	r1, r3
 8005a62:	2002      	movs	r0, #2
 8005a64:	f7fc fc2e 	bl	80022c4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 8005a68:	2300      	movs	r3, #0
 8005a6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005a6e:	e00a      	b.n	8005a86 <dwin_data+0x11fe>
						DISPLAY_INPUT[a] = 0x00;
 8005a70:	4a94      	ldr	r2, [pc, #592]	@ (8005cc4 <dwin_data+0x143c>)
 8005a72:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005a76:	4413      	add	r3, r2
 8005a78:	2200      	movs	r2, #0
 8005a7a:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 8005a7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005a80:	3301      	adds	r3, #1
 8005a82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005a86:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005a8a:	2b08      	cmp	r3, #8
 8005a8c:	ddf0      	ble.n	8005a70 <dwin_data+0x11e8>
				if (PLR_value == 60) {
 8005a8e:	f000 bfb5 	b.w	80069fc <dwin_data+0x2174>
				}
			} else if ((DISPLAY_INPUT[5] == 0xA3)
 8005a92:	4b8c      	ldr	r3, [pc, #560]	@ (8005cc4 <dwin_data+0x143c>)
 8005a94:	795b      	ldrb	r3, [r3, #5]
 8005a96:	2ba3      	cmp	r3, #163	@ 0xa3
 8005a98:	f040 87b0 	bne.w	80069fc <dwin_data+0x2174>
					&& (DISPLAY_INPUT[8] == 0x01)) {
 8005a9c:	4b89      	ldr	r3, [pc, #548]	@ (8005cc4 <dwin_data+0x143c>)
 8005a9e:	7a1b      	ldrb	r3, [r3, #8]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	f040 87ab 	bne.w	80069fc <dwin_data+0x2174>
				if (PLR_value == 5) {
 8005aa6:	4b88      	ldr	r3, [pc, #544]	@ (8005cc8 <dwin_data+0x1440>)
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	2b05      	cmp	r3, #5
 8005aac:	d105      	bne.n	8005aba <dwin_data+0x1232>
					PLR_value = PLR_value;
 8005aae:	4b86      	ldr	r3, [pc, #536]	@ (8005cc8 <dwin_data+0x1440>)
 8005ab0:	781a      	ldrb	r2, [r3, #0]
 8005ab2:	4b85      	ldr	r3, [pc, #532]	@ (8005cc8 <dwin_data+0x1440>)
 8005ab4:	701a      	strb	r2, [r3, #0]
 8005ab6:	f000 bfa1 	b.w	80069fc <dwin_data+0x2174>
				} else {
					Value_reset_flag = 0;
 8005aba:	4b84      	ldr	r3, [pc, #528]	@ (8005ccc <dwin_data+0x1444>)
 8005abc:	2200      	movs	r2, #0
 8005abe:	701a      	strb	r2, [r3, #0]
					plt_value_reset_flag = 1;
 8005ac0:	4b83      	ldr	r3, [pc, #524]	@ (8005cd0 <dwin_data+0x1448>)
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	701a      	strb	r2, [r3, #0]
					osTimerStart(Touch_value_resetHandle, 5000);
 8005ac6:	4b83      	ldr	r3, [pc, #524]	@ (8005cd4 <dwin_data+0x144c>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f241 3188 	movw	r1, #5000	@ 0x1388
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f00a fcbc 	bl	801044c <osTimerStart>
					PLR_value -= 1;
 8005ad4:	4b7c      	ldr	r3, [pc, #496]	@ (8005cc8 <dwin_data+0x1440>)
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	b2da      	uxtb	r2, r3
 8005adc:	4b7a      	ldr	r3, [pc, #488]	@ (8005cc8 <dwin_data+0x1440>)
 8005ade:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x02, PLR_value);
 8005ae0:	4b79      	ldr	r3, [pc, #484]	@ (8005cc8 <dwin_data+0x1440>)
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	2002      	movs	r0, #2
 8005ae8:	f7fc fbec 	bl	80022c4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 8005aec:	2300      	movs	r3, #0
 8005aee:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005af2:	e00a      	b.n	8005b0a <dwin_data+0x1282>
						DISPLAY_INPUT[a] = 0x00;
 8005af4:	4a73      	ldr	r2, [pc, #460]	@ (8005cc4 <dwin_data+0x143c>)
 8005af6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005afa:	4413      	add	r3, r2
 8005afc:	2200      	movs	r2, #0
 8005afe:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 8005b00:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005b04:	3301      	adds	r3, #1
 8005b06:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005b0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005b0e:	2b08      	cmp	r3, #8
 8005b10:	ddf0      	ble.n	8005af4 <dwin_data+0x126c>
 8005b12:	f000 bf73 	b.w	80069fc <dwin_data+0x2174>
				}
			}
		} else if (rr_flag == 1) {
 8005b16:	4b70      	ldr	r3, [pc, #448]	@ (8005cd8 <dwin_data+0x1450>)
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	f000 808a 	beq.w	8005c34 <dwin_data+0x13ac>
			if ((DISPLAY_INPUT[5] == 0xA2) && (DISPLAY_INPUT[8] == 0x01)) {
 8005b20:	4b68      	ldr	r3, [pc, #416]	@ (8005cc4 <dwin_data+0x143c>)
 8005b22:	795b      	ldrb	r3, [r3, #5]
 8005b24:	2ba2      	cmp	r3, #162	@ 0xa2
 8005b26:	d13f      	bne.n	8005ba8 <dwin_data+0x1320>
 8005b28:	4b66      	ldr	r3, [pc, #408]	@ (8005cc4 <dwin_data+0x143c>)
 8005b2a:	7a1b      	ldrb	r3, [r3, #8]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d13b      	bne.n	8005ba8 <dwin_data+0x1320>
				if (RR_value == 100) {
 8005b30:	4b6a      	ldr	r3, [pc, #424]	@ (8005cdc <dwin_data+0x1454>)
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	2b64      	cmp	r3, #100	@ 0x64
 8005b36:	d104      	bne.n	8005b42 <dwin_data+0x12ba>
					RR_value = RR_value;
 8005b38:	4b68      	ldr	r3, [pc, #416]	@ (8005cdc <dwin_data+0x1454>)
 8005b3a:	781a      	ldrb	r2, [r3, #0]
 8005b3c:	4b67      	ldr	r3, [pc, #412]	@ (8005cdc <dwin_data+0x1454>)
 8005b3e:	701a      	strb	r2, [r3, #0]
 8005b40:	e01d      	b.n	8005b7e <dwin_data+0x12f6>
				} else {
					Value_reset_flag = 0;
 8005b42:	4b62      	ldr	r3, [pc, #392]	@ (8005ccc <dwin_data+0x1444>)
 8005b44:	2200      	movs	r2, #0
 8005b46:	701a      	strb	r2, [r3, #0]
					rr_value_reset_flag = 1;
 8005b48:	4b65      	ldr	r3, [pc, #404]	@ (8005ce0 <dwin_data+0x1458>)
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	701a      	strb	r2, [r3, #0]
					osTimerStart(Touch_value_resetHandle, 5000);
 8005b4e:	4b61      	ldr	r3, [pc, #388]	@ (8005cd4 <dwin_data+0x144c>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f241 3188 	movw	r1, #5000	@ 0x1388
 8005b56:	4618      	mov	r0, r3
 8005b58:	f00a fc78 	bl	801044c <osTimerStart>
					RR_value += 1;
 8005b5c:	4b5f      	ldr	r3, [pc, #380]	@ (8005cdc <dwin_data+0x1454>)
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	3301      	adds	r3, #1
 8005b62:	b2da      	uxtb	r2, r3
 8005b64:	4b5d      	ldr	r3, [pc, #372]	@ (8005cdc <dwin_data+0x1454>)
 8005b66:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x03, RR_value);
 8005b68:	4b5c      	ldr	r3, [pc, #368]	@ (8005cdc <dwin_data+0x1454>)
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	2003      	movs	r0, #3
 8005b70:	f7fc fba8 	bl	80022c4 <intiger_val_send>
					rr_alarm(RR_value);
 8005b74:	4b59      	ldr	r3, [pc, #356]	@ (8005cdc <dwin_data+0x1454>)
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7fd fb6b 	bl	8003254 <rr_alarm>
					//					for (int a = 0; a < 9; a++)
					//						DISPLAY_INPUT[a] = 0x00;
				}
				for (int a = 0; a < 9; a++)
 8005b7e:	2300      	movs	r3, #0
 8005b80:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005b84:	e00a      	b.n	8005b9c <dwin_data+0x1314>
					DISPLAY_INPUT[a] = 0x00;
 8005b86:	4a4f      	ldr	r2, [pc, #316]	@ (8005cc4 <dwin_data+0x143c>)
 8005b88:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005b8c:	4413      	add	r3, r2
 8005b8e:	2200      	movs	r2, #0
 8005b90:	701a      	strb	r2, [r3, #0]
				for (int a = 0; a < 9; a++)
 8005b92:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005b96:	3301      	adds	r3, #1
 8005b98:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005b9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005ba0:	2b08      	cmp	r3, #8
 8005ba2:	ddf0      	ble.n	8005b86 <dwin_data+0x12fe>
 8005ba4:	f000 bf2a 	b.w	80069fc <dwin_data+0x2174>
			} else if (((DISPLAY_INPUT[5] == 0xA3)
 8005ba8:	4b46      	ldr	r3, [pc, #280]	@ (8005cc4 <dwin_data+0x143c>)
 8005baa:	795b      	ldrb	r3, [r3, #5]
 8005bac:	2ba3      	cmp	r3, #163	@ 0xa3
 8005bae:	f040 8725 	bne.w	80069fc <dwin_data+0x2174>
					&& (DISPLAY_INPUT[8] == 0x01))) {
 8005bb2:	4b44      	ldr	r3, [pc, #272]	@ (8005cc4 <dwin_data+0x143c>)
 8005bb4:	7a1b      	ldrb	r3, [r3, #8]
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	f040 8720 	bne.w	80069fc <dwin_data+0x2174>
				if (RR_value == 5) {
 8005bbc:	4b47      	ldr	r3, [pc, #284]	@ (8005cdc <dwin_data+0x1454>)
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	2b05      	cmp	r3, #5
 8005bc2:	d104      	bne.n	8005bce <dwin_data+0x1346>
					RR_value = RR_value;
 8005bc4:	4b45      	ldr	r3, [pc, #276]	@ (8005cdc <dwin_data+0x1454>)
 8005bc6:	781a      	ldrb	r2, [r3, #0]
 8005bc8:	4b44      	ldr	r3, [pc, #272]	@ (8005cdc <dwin_data+0x1454>)
 8005bca:	701a      	strb	r2, [r3, #0]
 8005bcc:	e01d      	b.n	8005c0a <dwin_data+0x1382>
				} else {
					Value_reset_flag = 0;
 8005bce:	4b3f      	ldr	r3, [pc, #252]	@ (8005ccc <dwin_data+0x1444>)
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	701a      	strb	r2, [r3, #0]
					rr_value_reset_flag = 1;
 8005bd4:	4b42      	ldr	r3, [pc, #264]	@ (8005ce0 <dwin_data+0x1458>)
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	701a      	strb	r2, [r3, #0]
					osTimerStart(Touch_value_resetHandle, 5000);
 8005bda:	4b3e      	ldr	r3, [pc, #248]	@ (8005cd4 <dwin_data+0x144c>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f241 3188 	movw	r1, #5000	@ 0x1388
 8005be2:	4618      	mov	r0, r3
 8005be4:	f00a fc32 	bl	801044c <osTimerStart>
					RR_value -= 1;
 8005be8:	4b3c      	ldr	r3, [pc, #240]	@ (8005cdc <dwin_data+0x1454>)
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	3b01      	subs	r3, #1
 8005bee:	b2da      	uxtb	r2, r3
 8005bf0:	4b3a      	ldr	r3, [pc, #232]	@ (8005cdc <dwin_data+0x1454>)
 8005bf2:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x03, RR_value);
 8005bf4:	4b39      	ldr	r3, [pc, #228]	@ (8005cdc <dwin_data+0x1454>)
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	2003      	movs	r0, #3
 8005bfc:	f7fc fb62 	bl	80022c4 <intiger_val_send>
					rr_alarm(RR_value);
 8005c00:	4b36      	ldr	r3, [pc, #216]	@ (8005cdc <dwin_data+0x1454>)
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	4618      	mov	r0, r3
 8005c06:	f7fd fb25 	bl	8003254 <rr_alarm>
					//					for (int a = 0; a < 9; a++)
					//						DISPLAY_INPUT[a] = 0x00;
				}
				for (int a = 0; a < 9; a++)
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005c10:	e00a      	b.n	8005c28 <dwin_data+0x13a0>
					DISPLAY_INPUT[a] = 0x00;
 8005c12:	4a2c      	ldr	r2, [pc, #176]	@ (8005cc4 <dwin_data+0x143c>)
 8005c14:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005c18:	4413      	add	r3, r2
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	701a      	strb	r2, [r3, #0]
				for (int a = 0; a < 9; a++)
 8005c1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005c22:	3301      	adds	r3, #1
 8005c24:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005c28:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005c2c:	2b08      	cmp	r3, #8
 8005c2e:	ddf0      	ble.n	8005c12 <dwin_data+0x138a>
 8005c30:	f000 bee4 	b.w	80069fc <dwin_data+0x2174>
			}
		} else if (pu_flag == 1) {
 8005c34:	4b2b      	ldr	r3, [pc, #172]	@ (8005ce4 <dwin_data+0x145c>)
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f000 809b 	beq.w	8005d74 <dwin_data+0x14ec>
			if (((DISPLAY_INPUT[5] == 0xA2) && (DISPLAY_INPUT[8] == 0x01))) {
 8005c3e:	4b21      	ldr	r3, [pc, #132]	@ (8005cc4 <dwin_data+0x143c>)
 8005c40:	795b      	ldrb	r3, [r3, #5]
 8005c42:	2ba2      	cmp	r3, #162	@ 0xa2
 8005c44:	d154      	bne.n	8005cf0 <dwin_data+0x1468>
 8005c46:	4b1f      	ldr	r3, [pc, #124]	@ (8005cc4 <dwin_data+0x143c>)
 8005c48:	7a1b      	ldrb	r3, [r3, #8]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d150      	bne.n	8005cf0 <dwin_data+0x1468>
				if (PU_value == 50) {
 8005c4e:	4b26      	ldr	r3, [pc, #152]	@ (8005ce8 <dwin_data+0x1460>)
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	2b32      	cmp	r3, #50	@ 0x32
 8005c54:	d105      	bne.n	8005c62 <dwin_data+0x13da>
					PU_value = PU_value;
 8005c56:	4b24      	ldr	r3, [pc, #144]	@ (8005ce8 <dwin_data+0x1460>)
 8005c58:	781a      	ldrb	r2, [r3, #0]
 8005c5a:	4b23      	ldr	r3, [pc, #140]	@ (8005ce8 <dwin_data+0x1460>)
 8005c5c:	701a      	strb	r2, [r3, #0]
				if (PU_value == 50) {
 8005c5e:	f000 becd 	b.w	80069fc <dwin_data+0x2174>
				} else {
					Value_reset_flag = 0;
 8005c62:	4b1a      	ldr	r3, [pc, #104]	@ (8005ccc <dwin_data+0x1444>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	701a      	strb	r2, [r3, #0]
					pu_value_reset_flag = 1;
 8005c68:	4b20      	ldr	r3, [pc, #128]	@ (8005cec <dwin_data+0x1464>)
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	701a      	strb	r2, [r3, #0]
					osTimerStart(Touch_value_resetHandle, 5000);
 8005c6e:	4b19      	ldr	r3, [pc, #100]	@ (8005cd4 <dwin_data+0x144c>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f241 3188 	movw	r1, #5000	@ 0x1388
 8005c76:	4618      	mov	r0, r3
 8005c78:	f00a fbe8 	bl	801044c <osTimerStart>
					PU_value += 1;
 8005c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8005ce8 <dwin_data+0x1460>)
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	3301      	adds	r3, #1
 8005c82:	b2da      	uxtb	r2, r3
 8005c84:	4b18      	ldr	r3, [pc, #96]	@ (8005ce8 <dwin_data+0x1460>)
 8005c86:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x05, PU_value);
 8005c88:	4b17      	ldr	r3, [pc, #92]	@ (8005ce8 <dwin_data+0x1460>)
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	2005      	movs	r0, #5
 8005c90:	f7fc fb18 	bl	80022c4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 8005c94:	2300      	movs	r3, #0
 8005c96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005c9a:	e00a      	b.n	8005cb2 <dwin_data+0x142a>
						DISPLAY_INPUT[a] = 0x00;
 8005c9c:	4a09      	ldr	r2, [pc, #36]	@ (8005cc4 <dwin_data+0x143c>)
 8005c9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ca2:	4413      	add	r3, r2
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 8005ca8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005cac:	3301      	adds	r3, #1
 8005cae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005cb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005cb6:	2b08      	cmp	r3, #8
 8005cb8:	ddf0      	ble.n	8005c9c <dwin_data+0x1414>
				if (PU_value == 50) {
 8005cba:	f000 be9f 	b.w	80069fc <dwin_data+0x2174>
 8005cbe:	bf00      	nop
 8005cc0:	200015cb 	.word	0x200015cb
 8005cc4:	20001584 	.word	0x20001584
 8005cc8:	20000026 	.word	0x20000026
 8005ccc:	200015c1 	.word	0x200015c1
 8005cd0:	200015d5 	.word	0x200015d5
 8005cd4:	20001134 	.word	0x20001134
 8005cd8:	200015cc 	.word	0x200015cc
 8005cdc:	20000027 	.word	0x20000027
 8005ce0:	200015d6 	.word	0x200015d6
 8005ce4:	200015cd 	.word	0x200015cd
 8005ce8:	200015a9 	.word	0x200015a9
 8005cec:	200015d7 	.word	0x200015d7
				}
			} else if (((DISPLAY_INPUT[5] == 0xA3)
 8005cf0:	4b9e      	ldr	r3, [pc, #632]	@ (8005f6c <dwin_data+0x16e4>)
 8005cf2:	795b      	ldrb	r3, [r3, #5]
 8005cf4:	2ba3      	cmp	r3, #163	@ 0xa3
 8005cf6:	f040 8681 	bne.w	80069fc <dwin_data+0x2174>
					&& (DISPLAY_INPUT[8] == 0x01))) {
 8005cfa:	4b9c      	ldr	r3, [pc, #624]	@ (8005f6c <dwin_data+0x16e4>)
 8005cfc:	7a1b      	ldrb	r3, [r3, #8]
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	f040 867c 	bne.w	80069fc <dwin_data+0x2174>
				if (PU_value == 0) {
 8005d04:	4b9a      	ldr	r3, [pc, #616]	@ (8005f70 <dwin_data+0x16e8>)
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d105      	bne.n	8005d18 <dwin_data+0x1490>
					PU_value = PU_value;
 8005d0c:	4b98      	ldr	r3, [pc, #608]	@ (8005f70 <dwin_data+0x16e8>)
 8005d0e:	781a      	ldrb	r2, [r3, #0]
 8005d10:	4b97      	ldr	r3, [pc, #604]	@ (8005f70 <dwin_data+0x16e8>)
 8005d12:	701a      	strb	r2, [r3, #0]
 8005d14:	f000 be72 	b.w	80069fc <dwin_data+0x2174>
				} else {
					Value_reset_flag = 0;
 8005d18:	4b96      	ldr	r3, [pc, #600]	@ (8005f74 <dwin_data+0x16ec>)
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	701a      	strb	r2, [r3, #0]
					pu_value_reset_flag = 1;
 8005d1e:	4b96      	ldr	r3, [pc, #600]	@ (8005f78 <dwin_data+0x16f0>)
 8005d20:	2201      	movs	r2, #1
 8005d22:	701a      	strb	r2, [r3, #0]
					osTimerStart(Touch_value_resetHandle, 5000);
 8005d24:	4b95      	ldr	r3, [pc, #596]	@ (8005f7c <dwin_data+0x16f4>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f241 3188 	movw	r1, #5000	@ 0x1388
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f00a fb8d 	bl	801044c <osTimerStart>
					PU_value -= 1;
 8005d32:	4b8f      	ldr	r3, [pc, #572]	@ (8005f70 <dwin_data+0x16e8>)
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	3b01      	subs	r3, #1
 8005d38:	b2da      	uxtb	r2, r3
 8005d3a:	4b8d      	ldr	r3, [pc, #564]	@ (8005f70 <dwin_data+0x16e8>)
 8005d3c:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x05, PU_value);
 8005d3e:	4b8c      	ldr	r3, [pc, #560]	@ (8005f70 <dwin_data+0x16e8>)
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	4619      	mov	r1, r3
 8005d44:	2005      	movs	r0, #5
 8005d46:	f7fc fabd 	bl	80022c4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005d50:	e00a      	b.n	8005d68 <dwin_data+0x14e0>
						DISPLAY_INPUT[a] = 0x00;
 8005d52:	4a86      	ldr	r2, [pc, #536]	@ (8005f6c <dwin_data+0x16e4>)
 8005d54:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005d58:	4413      	add	r3, r2
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 8005d5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005d62:	3301      	adds	r3, #1
 8005d64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005d68:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005d6c:	2b08      	cmp	r3, #8
 8005d6e:	ddf0      	ble.n	8005d52 <dwin_data+0x14ca>
 8005d70:	f000 be44 	b.w	80069fc <dwin_data+0x2174>
				}
			}
		} else if (trg_flag == 1) {
 8005d74:	4b82      	ldr	r3, [pc, #520]	@ (8005f80 <dwin_data+0x16f8>)
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d053      	beq.n	8005e24 <dwin_data+0x159c>
			if (((DISPLAY_INPUT[5] == 0xA2) && (DISPLAY_INPUT[8] == 0x01))) {
 8005d7c:	4b7b      	ldr	r3, [pc, #492]	@ (8005f6c <dwin_data+0x16e4>)
 8005d7e:	795b      	ldrb	r3, [r3, #5]
 8005d80:	2ba2      	cmp	r3, #162	@ 0xa2
 8005d82:	d124      	bne.n	8005dce <dwin_data+0x1546>
 8005d84:	4b79      	ldr	r3, [pc, #484]	@ (8005f6c <dwin_data+0x16e4>)
 8005d86:	7a1b      	ldrb	r3, [r3, #8]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d120      	bne.n	8005dce <dwin_data+0x1546>
				TRG_value += 1;
 8005d8c:	4b7d      	ldr	r3, [pc, #500]	@ (8005f84 <dwin_data+0x16fc>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	3301      	adds	r3, #1
 8005d92:	4a7c      	ldr	r2, [pc, #496]	@ (8005f84 <dwin_data+0x16fc>)
 8005d94:	6013      	str	r3, [r2, #0]
				intiger_val_send(0x06, TRG_value);
 8005d96:	4b7b      	ldr	r3, [pc, #492]	@ (8005f84 <dwin_data+0x16fc>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	2006      	movs	r0, #6
 8005da0:	f7fc fa90 	bl	80022c4 <intiger_val_send>
				for (int a = 0; a < 9; a++)
 8005da4:	2300      	movs	r3, #0
 8005da6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005daa:	e00a      	b.n	8005dc2 <dwin_data+0x153a>
					DISPLAY_INPUT[a] = 0x00;
 8005dac:	4a6f      	ldr	r2, [pc, #444]	@ (8005f6c <dwin_data+0x16e4>)
 8005dae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005db2:	4413      	add	r3, r2
 8005db4:	2200      	movs	r2, #0
 8005db6:	701a      	strb	r2, [r3, #0]
				for (int a = 0; a < 9; a++)
 8005db8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005dc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005dc6:	2b08      	cmp	r3, #8
 8005dc8:	ddf0      	ble.n	8005dac <dwin_data+0x1524>
 8005dca:	f000 be17 	b.w	80069fc <dwin_data+0x2174>
			} else if (((DISPLAY_INPUT[5] == 0xA3)
 8005dce:	4b67      	ldr	r3, [pc, #412]	@ (8005f6c <dwin_data+0x16e4>)
 8005dd0:	795b      	ldrb	r3, [r3, #5]
 8005dd2:	2ba3      	cmp	r3, #163	@ 0xa3
 8005dd4:	f040 8612 	bne.w	80069fc <dwin_data+0x2174>
					&& (DISPLAY_INPUT[8] == 0x01))) {
 8005dd8:	4b64      	ldr	r3, [pc, #400]	@ (8005f6c <dwin_data+0x16e4>)
 8005dda:	7a1b      	ldrb	r3, [r3, #8]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	f040 860d 	bne.w	80069fc <dwin_data+0x2174>
				TRG_value -= 1;
 8005de2:	4b68      	ldr	r3, [pc, #416]	@ (8005f84 <dwin_data+0x16fc>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	3b01      	subs	r3, #1
 8005de8:	4a66      	ldr	r2, [pc, #408]	@ (8005f84 <dwin_data+0x16fc>)
 8005dea:	6013      	str	r3, [r2, #0]
				intiger_val_send(0x06, TRG_value);
 8005dec:	4b65      	ldr	r3, [pc, #404]	@ (8005f84 <dwin_data+0x16fc>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	4619      	mov	r1, r3
 8005df4:	2006      	movs	r0, #6
 8005df6:	f7fc fa65 	bl	80022c4 <intiger_val_send>
				for (int a = 0; a < 9; a++)
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005e00:	e00a      	b.n	8005e18 <dwin_data+0x1590>
					DISPLAY_INPUT[a] = 0x00;
 8005e02:	4a5a      	ldr	r2, [pc, #360]	@ (8005f6c <dwin_data+0x16e4>)
 8005e04:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005e08:	4413      	add	r3, r2
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	701a      	strb	r2, [r3, #0]
				for (int a = 0; a < 9; a++)
 8005e0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005e12:	3301      	adds	r3, #1
 8005e14:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005e18:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005e1c:	2b08      	cmp	r3, #8
 8005e1e:	ddf0      	ble.n	8005e02 <dwin_data+0x157a>
 8005e20:	f000 bdec 	b.w	80069fc <dwin_data+0x2174>
			}
		} else if (pip_flag == 1) {
 8005e24:	4b58      	ldr	r3, [pc, #352]	@ (8005f88 <dwin_data+0x1700>)
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f000 8087 	beq.w	8005f3c <dwin_data+0x16b4>
			if (((DISPLAY_INPUT[5] == 0xA2) && (DISPLAY_INPUT[8] == 0x01))) {
 8005e2e:	4b4f      	ldr	r3, [pc, #316]	@ (8005f6c <dwin_data+0x16e4>)
 8005e30:	795b      	ldrb	r3, [r3, #5]
 8005e32:	2ba2      	cmp	r3, #162	@ 0xa2
 8005e34:	d13d      	bne.n	8005eb2 <dwin_data+0x162a>
 8005e36:	4b4d      	ldr	r3, [pc, #308]	@ (8005f6c <dwin_data+0x16e4>)
 8005e38:	7a1b      	ldrb	r3, [r3, #8]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d139      	bne.n	8005eb2 <dwin_data+0x162a>
				if (PIP_value == 0){
 8005e3e:	4b53      	ldr	r3, [pc, #332]	@ (8005f8c <dwin_data+0x1704>)
 8005e40:	f993 3000 	ldrsb.w	r3, [r3]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d106      	bne.n	8005e56 <dwin_data+0x15ce>
					PIP_value = PIP_value;
 8005e48:	4b50      	ldr	r3, [pc, #320]	@ (8005f8c <dwin_data+0x1704>)
 8005e4a:	f993 2000 	ldrsb.w	r2, [r3]
 8005e4e:	4b4f      	ldr	r3, [pc, #316]	@ (8005f8c <dwin_data+0x1704>)
 8005e50:	701a      	strb	r2, [r3, #0]
				if (PIP_value == 0){
 8005e52:	f000 bdd3 	b.w	80069fc <dwin_data+0x2174>
				}else{
					Value_reset_flag = 0;
 8005e56:	4b47      	ldr	r3, [pc, #284]	@ (8005f74 <dwin_data+0x16ec>)
 8005e58:	2200      	movs	r2, #0
 8005e5a:	701a      	strb	r2, [r3, #0]
					pip_value_reset_flag = 1;
 8005e5c:	4b4c      	ldr	r3, [pc, #304]	@ (8005f90 <dwin_data+0x1708>)
 8005e5e:	2201      	movs	r2, #1
 8005e60:	701a      	strb	r2, [r3, #0]
					osTimerStart(Touch_value_resetHandle, 5000);
 8005e62:	4b46      	ldr	r3, [pc, #280]	@ (8005f7c <dwin_data+0x16f4>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f241 3188 	movw	r1, #5000	@ 0x1388
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f00a faee 	bl	801044c <osTimerStart>
					PIP_value += 1;
 8005e70:	4b46      	ldr	r3, [pc, #280]	@ (8005f8c <dwin_data+0x1704>)
 8005e72:	f993 3000 	ldrsb.w	r3, [r3]
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	3301      	adds	r3, #1
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	b25a      	sxtb	r2, r3
 8005e7e:	4b43      	ldr	r3, [pc, #268]	@ (8005f8c <dwin_data+0x1704>)
 8005e80:	701a      	strb	r2, [r3, #0]
					//					intiger_val_send(0x07, PIP_value);
					PIP_VAL(0x07, PIP_value);
 8005e82:	4b42      	ldr	r3, [pc, #264]	@ (8005f8c <dwin_data+0x1704>)
 8005e84:	f993 3000 	ldrsb.w	r3, [r3]
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	2007      	movs	r0, #7
 8005e8e:	f7fc fa6d 	bl	800236c <PIP_VAL>
					for (int a = 0; a < 9; a++)
 8005e92:	2300      	movs	r3, #0
 8005e94:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005e96:	e007      	b.n	8005ea8 <dwin_data+0x1620>
						DISPLAY_INPUT[a] = 0x00;
 8005e98:	4a34      	ldr	r2, [pc, #208]	@ (8005f6c <dwin_data+0x16e4>)
 8005e9a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005e9c:	4413      	add	r3, r2
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 8005ea2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005ea8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005eaa:	2b08      	cmp	r3, #8
 8005eac:	ddf4      	ble.n	8005e98 <dwin_data+0x1610>
				if (PIP_value == 0){
 8005eae:	f000 bda5 	b.w	80069fc <dwin_data+0x2174>
				}
			}else if (((DISPLAY_INPUT[5] == 0xA3)
 8005eb2:	4b2e      	ldr	r3, [pc, #184]	@ (8005f6c <dwin_data+0x16e4>)
 8005eb4:	795b      	ldrb	r3, [r3, #5]
 8005eb6:	2ba3      	cmp	r3, #163	@ 0xa3
 8005eb8:	f040 85a0 	bne.w	80069fc <dwin_data+0x2174>
					&& (DISPLAY_INPUT[8] == 0x01))) {
 8005ebc:	4b2b      	ldr	r3, [pc, #172]	@ (8005f6c <dwin_data+0x16e4>)
 8005ebe:	7a1b      	ldrb	r3, [r3, #8]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	f040 859b 	bne.w	80069fc <dwin_data+0x2174>
				if(PIP_value == -20){
 8005ec6:	4b31      	ldr	r3, [pc, #196]	@ (8005f8c <dwin_data+0x1704>)
 8005ec8:	f993 3000 	ldrsb.w	r3, [r3]
 8005ecc:	f113 0f14 	cmn.w	r3, #20
 8005ed0:	d106      	bne.n	8005ee0 <dwin_data+0x1658>
					PIP_value = PIP_value;
 8005ed2:	4b2e      	ldr	r3, [pc, #184]	@ (8005f8c <dwin_data+0x1704>)
 8005ed4:	f993 2000 	ldrsb.w	r2, [r3]
 8005ed8:	4b2c      	ldr	r3, [pc, #176]	@ (8005f8c <dwin_data+0x1704>)
 8005eda:	701a      	strb	r2, [r3, #0]
 8005edc:	f000 bd8e 	b.w	80069fc <dwin_data+0x2174>
				}else{
					Value_reset_flag = 0;
 8005ee0:	4b24      	ldr	r3, [pc, #144]	@ (8005f74 <dwin_data+0x16ec>)
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	701a      	strb	r2, [r3, #0]
					pip_value_reset_flag = 1;
 8005ee6:	4b2a      	ldr	r3, [pc, #168]	@ (8005f90 <dwin_data+0x1708>)
 8005ee8:	2201      	movs	r2, #1
 8005eea:	701a      	strb	r2, [r3, #0]
					osTimerStart(Touch_value_resetHandle, 5000);
 8005eec:	4b23      	ldr	r3, [pc, #140]	@ (8005f7c <dwin_data+0x16f4>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f241 3188 	movw	r1, #5000	@ 0x1388
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f00a faa9 	bl	801044c <osTimerStart>
					PIP_value -= 1;
 8005efa:	4b24      	ldr	r3, [pc, #144]	@ (8005f8c <dwin_data+0x1704>)
 8005efc:	f993 3000 	ldrsb.w	r3, [r3]
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	3b01      	subs	r3, #1
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	b25a      	sxtb	r2, r3
 8005f08:	4b20      	ldr	r3, [pc, #128]	@ (8005f8c <dwin_data+0x1704>)
 8005f0a:	701a      	strb	r2, [r3, #0]
					//					intiger_val_send(0x07, PIP_value);
					PIP_VAL(0x07, PIP_value);
 8005f0c:	4b1f      	ldr	r3, [pc, #124]	@ (8005f8c <dwin_data+0x1704>)
 8005f0e:	f993 3000 	ldrsb.w	r3, [r3]
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	4619      	mov	r1, r3
 8005f16:	2007      	movs	r0, #7
 8005f18:	f7fc fa28 	bl	800236c <PIP_VAL>
					for (int a = 0; a < 9; a++)
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f20:	e007      	b.n	8005f32 <dwin_data+0x16aa>
						DISPLAY_INPUT[a] = 0x00;
 8005f22:	4a12      	ldr	r2, [pc, #72]	@ (8005f6c <dwin_data+0x16e4>)
 8005f24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f26:	4413      	add	r3, r2
 8005f28:	2200      	movs	r2, #0
 8005f2a:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 8005f2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f2e:	3301      	adds	r3, #1
 8005f30:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f34:	2b08      	cmp	r3, #8
 8005f36:	ddf4      	ble.n	8005f22 <dwin_data+0x169a>
 8005f38:	f000 bd60 	b.w	80069fc <dwin_data+0x2174>
				}
			}
		}else if (peep_flag == 1) {
 8005f3c:	4b15      	ldr	r3, [pc, #84]	@ (8005f94 <dwin_data+0x170c>)
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	f000 8091 	beq.w	8006068 <dwin_data+0x17e0>
			if (((DISPLAY_INPUT[5] == 0xA2) && (DISPLAY_INPUT[8] == 0x01))) {
 8005f46:	4b09      	ldr	r3, [pc, #36]	@ (8005f6c <dwin_data+0x16e4>)
 8005f48:	795b      	ldrb	r3, [r3, #5]
 8005f4a:	2ba2      	cmp	r3, #162	@ 0xa2
 8005f4c:	d14f      	bne.n	8005fee <dwin_data+0x1766>
 8005f4e:	4b07      	ldr	r3, [pc, #28]	@ (8005f6c <dwin_data+0x16e4>)
 8005f50:	7a1b      	ldrb	r3, [r3, #8]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d14b      	bne.n	8005fee <dwin_data+0x1766>
				if (PEEP_value == 30) {
 8005f56:	4b10      	ldr	r3, [pc, #64]	@ (8005f98 <dwin_data+0x1710>)
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	2b1e      	cmp	r3, #30
 8005f5c:	d11e      	bne.n	8005f9c <dwin_data+0x1714>
					PEEP_value = PEEP_value;
 8005f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8005f98 <dwin_data+0x1710>)
 8005f60:	781a      	ldrb	r2, [r3, #0]
 8005f62:	4b0d      	ldr	r3, [pc, #52]	@ (8005f98 <dwin_data+0x1710>)
 8005f64:	701a      	strb	r2, [r3, #0]
				if (PEEP_value == 30) {
 8005f66:	f000 bd49 	b.w	80069fc <dwin_data+0x2174>
 8005f6a:	bf00      	nop
 8005f6c:	20001584 	.word	0x20001584
 8005f70:	200015a9 	.word	0x200015a9
 8005f74:	200015c1 	.word	0x200015c1
 8005f78:	200015d7 	.word	0x200015d7
 8005f7c:	20001134 	.word	0x20001134
 8005f80:	200015ce 	.word	0x200015ce
 8005f84:	200015ac 	.word	0x200015ac
 8005f88:	200015cf 	.word	0x200015cf
 8005f8c:	20000028 	.word	0x20000028
 8005f90:	200015d8 	.word	0x200015d8
 8005f94:	200015d0 	.word	0x200015d0
 8005f98:	200015b0 	.word	0x200015b0
				} else {
					Value_reset_flag = 0;
 8005f9c:	4b9d      	ldr	r3, [pc, #628]	@ (8006214 <dwin_data+0x198c>)
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	701a      	strb	r2, [r3, #0]
					peep_value_reset_flag = 1;
 8005fa2:	4b9d      	ldr	r3, [pc, #628]	@ (8006218 <dwin_data+0x1990>)
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	701a      	strb	r2, [r3, #0]
					osTimerStart(Touch_value_resetHandle, 5000);
 8005fa8:	4b9c      	ldr	r3, [pc, #624]	@ (800621c <dwin_data+0x1994>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f241 3188 	movw	r1, #5000	@ 0x1388
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f00a fa4b 	bl	801044c <osTimerStart>
					PEEP_value += 1;
 8005fb6:	4b9a      	ldr	r3, [pc, #616]	@ (8006220 <dwin_data+0x1998>)
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	3301      	adds	r3, #1
 8005fbc:	b2da      	uxtb	r2, r3
 8005fbe:	4b98      	ldr	r3, [pc, #608]	@ (8006220 <dwin_data+0x1998>)
 8005fc0:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x08, PEEP_value);
 8005fc2:	4b97      	ldr	r3, [pc, #604]	@ (8006220 <dwin_data+0x1998>)
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	2008      	movs	r0, #8
 8005fca:	f7fc f97b 	bl	80022c4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 8005fce:	2300      	movs	r3, #0
 8005fd0:	677b      	str	r3, [r7, #116]	@ 0x74
 8005fd2:	e007      	b.n	8005fe4 <dwin_data+0x175c>
						DISPLAY_INPUT[a] = 0x00;
 8005fd4:	4a93      	ldr	r2, [pc, #588]	@ (8006224 <dwin_data+0x199c>)
 8005fd6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fd8:	4413      	add	r3, r2
 8005fda:	2200      	movs	r2, #0
 8005fdc:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 8005fde:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	677b      	str	r3, [r7, #116]	@ 0x74
 8005fe4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fe6:	2b08      	cmp	r3, #8
 8005fe8:	ddf4      	ble.n	8005fd4 <dwin_data+0x174c>
				if (PEEP_value == 30) {
 8005fea:	f000 bd07 	b.w	80069fc <dwin_data+0x2174>
				}
			} else if (((DISPLAY_INPUT[5] == 0xA3)
 8005fee:	4b8d      	ldr	r3, [pc, #564]	@ (8006224 <dwin_data+0x199c>)
 8005ff0:	795b      	ldrb	r3, [r3, #5]
 8005ff2:	2ba3      	cmp	r3, #163	@ 0xa3
 8005ff4:	f040 8502 	bne.w	80069fc <dwin_data+0x2174>
					&& (DISPLAY_INPUT[8] == 0x01))) {
 8005ff8:	4b8a      	ldr	r3, [pc, #552]	@ (8006224 <dwin_data+0x199c>)
 8005ffa:	7a1b      	ldrb	r3, [r3, #8]
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	f040 84fd 	bne.w	80069fc <dwin_data+0x2174>
				if (PEEP_value == 0) {
 8006002:	4b87      	ldr	r3, [pc, #540]	@ (8006220 <dwin_data+0x1998>)
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d105      	bne.n	8006016 <dwin_data+0x178e>
					PEEP_value = PEEP_value;
 800600a:	4b85      	ldr	r3, [pc, #532]	@ (8006220 <dwin_data+0x1998>)
 800600c:	781a      	ldrb	r2, [r3, #0]
 800600e:	4b84      	ldr	r3, [pc, #528]	@ (8006220 <dwin_data+0x1998>)
 8006010:	701a      	strb	r2, [r3, #0]
 8006012:	f000 bcf3 	b.w	80069fc <dwin_data+0x2174>
				} else {
					Value_reset_flag = 0;
 8006016:	4b7f      	ldr	r3, [pc, #508]	@ (8006214 <dwin_data+0x198c>)
 8006018:	2200      	movs	r2, #0
 800601a:	701a      	strb	r2, [r3, #0]
					peep_value_reset_flag = 1;
 800601c:	4b7e      	ldr	r3, [pc, #504]	@ (8006218 <dwin_data+0x1990>)
 800601e:	2201      	movs	r2, #1
 8006020:	701a      	strb	r2, [r3, #0]
					osTimerStart(Touch_value_resetHandle, 5000);
 8006022:	4b7e      	ldr	r3, [pc, #504]	@ (800621c <dwin_data+0x1994>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f241 3188 	movw	r1, #5000	@ 0x1388
 800602a:	4618      	mov	r0, r3
 800602c:	f00a fa0e 	bl	801044c <osTimerStart>
					PEEP_value -= 1;
 8006030:	4b7b      	ldr	r3, [pc, #492]	@ (8006220 <dwin_data+0x1998>)
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	3b01      	subs	r3, #1
 8006036:	b2da      	uxtb	r2, r3
 8006038:	4b79      	ldr	r3, [pc, #484]	@ (8006220 <dwin_data+0x1998>)
 800603a:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x08, PEEP_value);
 800603c:	4b78      	ldr	r3, [pc, #480]	@ (8006220 <dwin_data+0x1998>)
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	4619      	mov	r1, r3
 8006042:	2008      	movs	r0, #8
 8006044:	f7fc f93e 	bl	80022c4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 8006048:	2300      	movs	r3, #0
 800604a:	673b      	str	r3, [r7, #112]	@ 0x70
 800604c:	e007      	b.n	800605e <dwin_data+0x17d6>
						DISPLAY_INPUT[a] = 0x00;
 800604e:	4a75      	ldr	r2, [pc, #468]	@ (8006224 <dwin_data+0x199c>)
 8006050:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006052:	4413      	add	r3, r2
 8006054:	2200      	movs	r2, #0
 8006056:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 8006058:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800605a:	3301      	adds	r3, #1
 800605c:	673b      	str	r3, [r7, #112]	@ 0x70
 800605e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006060:	2b08      	cmp	r3, #8
 8006062:	ddf4      	ble.n	800604e <dwin_data+0x17c6>
 8006064:	f000 bcca 	b.w	80069fc <dwin_data+0x2174>
				}
			}
		} 		else if (P_peak_alarm_max_flag == 1){
 8006068:	4b6f      	ldr	r3, [pc, #444]	@ (8006228 <dwin_data+0x19a0>)
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d066      	beq.n	800613e <dwin_data+0x18b6>
			if(((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA2) && (DISPLAY_INPUT[8] == 0x01))){
 8006070:	4b6c      	ldr	r3, [pc, #432]	@ (8006224 <dwin_data+0x199c>)
 8006072:	791b      	ldrb	r3, [r3, #4]
 8006074:	2b10      	cmp	r3, #16
 8006076:	d12d      	bne.n	80060d4 <dwin_data+0x184c>
 8006078:	4b6a      	ldr	r3, [pc, #424]	@ (8006224 <dwin_data+0x199c>)
 800607a:	795b      	ldrb	r3, [r3, #5]
 800607c:	2ba2      	cmp	r3, #162	@ 0xa2
 800607e:	d129      	bne.n	80060d4 <dwin_data+0x184c>
 8006080:	4b68      	ldr	r3, [pc, #416]	@ (8006224 <dwin_data+0x199c>)
 8006082:	7a1b      	ldrb	r3, [r3, #8]
 8006084:	2b01      	cmp	r3, #1
 8006086:	d125      	bne.n	80060d4 <dwin_data+0x184c>
				if (P_peak_alarm_max_value==60){
 8006088:	4b68      	ldr	r3, [pc, #416]	@ (800622c <dwin_data+0x19a4>)
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	2b3c      	cmp	r3, #60	@ 0x3c
 800608e:	d105      	bne.n	800609c <dwin_data+0x1814>
					P_peak_alarm_max_value=P_peak_alarm_max_value;
 8006090:	4b66      	ldr	r3, [pc, #408]	@ (800622c <dwin_data+0x19a4>)
 8006092:	781a      	ldrb	r2, [r3, #0]
 8006094:	4b65      	ldr	r3, [pc, #404]	@ (800622c <dwin_data+0x19a4>)
 8006096:	701a      	strb	r2, [r3, #0]
				if (P_peak_alarm_max_value==60){
 8006098:	f000 bcb0 	b.w	80069fc <dwin_data+0x2174>
				}
				else{
					P_peak_alarm_max_value +=1;
 800609c:	4b63      	ldr	r3, [pc, #396]	@ (800622c <dwin_data+0x19a4>)
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	3301      	adds	r3, #1
 80060a2:	b2da      	uxtb	r2, r3
 80060a4:	4b61      	ldr	r3, [pc, #388]	@ (800622c <dwin_data+0x19a4>)
 80060a6:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x14,P_peak_alarm_max_value);
 80060a8:	4b60      	ldr	r3, [pc, #384]	@ (800622c <dwin_data+0x19a4>)
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	4619      	mov	r1, r3
 80060ae:	2014      	movs	r0, #20
 80060b0:	f7fc f908 	bl	80022c4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 80060b4:	2300      	movs	r3, #0
 80060b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80060b8:	e007      	b.n	80060ca <dwin_data+0x1842>
						DISPLAY_INPUT[a] = 0x00;
 80060ba:	4a5a      	ldr	r2, [pc, #360]	@ (8006224 <dwin_data+0x199c>)
 80060bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060be:	4413      	add	r3, r2
 80060c0:	2200      	movs	r2, #0
 80060c2:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 80060c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060c6:	3301      	adds	r3, #1
 80060c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80060ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060cc:	2b08      	cmp	r3, #8
 80060ce:	ddf4      	ble.n	80060ba <dwin_data+0x1832>
				if (P_peak_alarm_max_value==60){
 80060d0:	f000 bc94 	b.w	80069fc <dwin_data+0x2174>
				}
			}
			else if (((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA3) && (DISPLAY_INPUT[8]== 0x01))){
 80060d4:	4b53      	ldr	r3, [pc, #332]	@ (8006224 <dwin_data+0x199c>)
 80060d6:	791b      	ldrb	r3, [r3, #4]
 80060d8:	2b10      	cmp	r3, #16
 80060da:	f040 848f 	bne.w	80069fc <dwin_data+0x2174>
 80060de:	4b51      	ldr	r3, [pc, #324]	@ (8006224 <dwin_data+0x199c>)
 80060e0:	795b      	ldrb	r3, [r3, #5]
 80060e2:	2ba3      	cmp	r3, #163	@ 0xa3
 80060e4:	f040 848a 	bne.w	80069fc <dwin_data+0x2174>
 80060e8:	4b4e      	ldr	r3, [pc, #312]	@ (8006224 <dwin_data+0x199c>)
 80060ea:	7a1b      	ldrb	r3, [r3, #8]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	f040 8485 	bne.w	80069fc <dwin_data+0x2174>
				if (P_peak_alarm_max_value==20){
 80060f2:	4b4e      	ldr	r3, [pc, #312]	@ (800622c <dwin_data+0x19a4>)
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	2b14      	cmp	r3, #20
 80060f8:	d105      	bne.n	8006106 <dwin_data+0x187e>
					P_peak_alarm_max_value=P_peak_alarm_max_value;
 80060fa:	4b4c      	ldr	r3, [pc, #304]	@ (800622c <dwin_data+0x19a4>)
 80060fc:	781a      	ldrb	r2, [r3, #0]
 80060fe:	4b4b      	ldr	r3, [pc, #300]	@ (800622c <dwin_data+0x19a4>)
 8006100:	701a      	strb	r2, [r3, #0]
 8006102:	f000 bc7b 	b.w	80069fc <dwin_data+0x2174>
				}
				else{
					P_peak_alarm_max_value -= 1;
 8006106:	4b49      	ldr	r3, [pc, #292]	@ (800622c <dwin_data+0x19a4>)
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	3b01      	subs	r3, #1
 800610c:	b2da      	uxtb	r2, r3
 800610e:	4b47      	ldr	r3, [pc, #284]	@ (800622c <dwin_data+0x19a4>)
 8006110:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x14,P_peak_alarm_max_value);
 8006112:	4b46      	ldr	r3, [pc, #280]	@ (800622c <dwin_data+0x19a4>)
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	4619      	mov	r1, r3
 8006118:	2014      	movs	r0, #20
 800611a:	f7fc f8d3 	bl	80022c4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 800611e:	2300      	movs	r3, #0
 8006120:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006122:	e007      	b.n	8006134 <dwin_data+0x18ac>
						DISPLAY_INPUT[a] = 0x00;
 8006124:	4a3f      	ldr	r2, [pc, #252]	@ (8006224 <dwin_data+0x199c>)
 8006126:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006128:	4413      	add	r3, r2
 800612a:	2200      	movs	r2, #0
 800612c:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 800612e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006130:	3301      	adds	r3, #1
 8006132:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006134:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006136:	2b08      	cmp	r3, #8
 8006138:	ddf4      	ble.n	8006124 <dwin_data+0x189c>
 800613a:	f000 bc5f 	b.w	80069fc <dwin_data+0x2174>
				}
			}
		}
		else if (P_peak_alarm_min_flag == 1){
 800613e:	4b3c      	ldr	r3, [pc, #240]	@ (8006230 <dwin_data+0x19a8>)
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d078      	beq.n	8006238 <dwin_data+0x19b0>
			if(((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA2) && (DISPLAY_INPUT[8] == 0x01))){
 8006146:	4b37      	ldr	r3, [pc, #220]	@ (8006224 <dwin_data+0x199c>)
 8006148:	791b      	ldrb	r3, [r3, #4]
 800614a:	2b10      	cmp	r3, #16
 800614c:	d12d      	bne.n	80061aa <dwin_data+0x1922>
 800614e:	4b35      	ldr	r3, [pc, #212]	@ (8006224 <dwin_data+0x199c>)
 8006150:	795b      	ldrb	r3, [r3, #5]
 8006152:	2ba2      	cmp	r3, #162	@ 0xa2
 8006154:	d129      	bne.n	80061aa <dwin_data+0x1922>
 8006156:	4b33      	ldr	r3, [pc, #204]	@ (8006224 <dwin_data+0x199c>)
 8006158:	7a1b      	ldrb	r3, [r3, #8]
 800615a:	2b01      	cmp	r3, #1
 800615c:	d125      	bne.n	80061aa <dwin_data+0x1922>
				if (P_peak_alarm_min_value==20){
 800615e:	4b35      	ldr	r3, [pc, #212]	@ (8006234 <dwin_data+0x19ac>)
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	2b14      	cmp	r3, #20
 8006164:	d105      	bne.n	8006172 <dwin_data+0x18ea>
					P_peak_alarm_min_value = P_peak_alarm_min_value;
 8006166:	4b33      	ldr	r3, [pc, #204]	@ (8006234 <dwin_data+0x19ac>)
 8006168:	781a      	ldrb	r2, [r3, #0]
 800616a:	4b32      	ldr	r3, [pc, #200]	@ (8006234 <dwin_data+0x19ac>)
 800616c:	701a      	strb	r2, [r3, #0]
				if (P_peak_alarm_min_value==20){
 800616e:	f000 bc45 	b.w	80069fc <dwin_data+0x2174>
				}
				else{
					P_peak_alarm_min_value +=1;
 8006172:	4b30      	ldr	r3, [pc, #192]	@ (8006234 <dwin_data+0x19ac>)
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	3301      	adds	r3, #1
 8006178:	b2da      	uxtb	r2, r3
 800617a:	4b2e      	ldr	r3, [pc, #184]	@ (8006234 <dwin_data+0x19ac>)
 800617c:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x15,P_peak_alarm_min_value);
 800617e:	4b2d      	ldr	r3, [pc, #180]	@ (8006234 <dwin_data+0x19ac>)
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	4619      	mov	r1, r3
 8006184:	2015      	movs	r0, #21
 8006186:	f7fc f89d 	bl	80022c4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 800618a:	2300      	movs	r3, #0
 800618c:	667b      	str	r3, [r7, #100]	@ 0x64
 800618e:	e007      	b.n	80061a0 <dwin_data+0x1918>
						DISPLAY_INPUT[a] = 0x00;
 8006190:	4a24      	ldr	r2, [pc, #144]	@ (8006224 <dwin_data+0x199c>)
 8006192:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006194:	4413      	add	r3, r2
 8006196:	2200      	movs	r2, #0
 8006198:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 800619a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800619c:	3301      	adds	r3, #1
 800619e:	667b      	str	r3, [r7, #100]	@ 0x64
 80061a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80061a2:	2b08      	cmp	r3, #8
 80061a4:	ddf4      	ble.n	8006190 <dwin_data+0x1908>
				if (P_peak_alarm_min_value==20){
 80061a6:	f000 bc29 	b.w	80069fc <dwin_data+0x2174>
				}
			}
			else if (((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA3) && (DISPLAY_INPUT[8]== 0x01))){
 80061aa:	4b1e      	ldr	r3, [pc, #120]	@ (8006224 <dwin_data+0x199c>)
 80061ac:	791b      	ldrb	r3, [r3, #4]
 80061ae:	2b10      	cmp	r3, #16
 80061b0:	f040 8424 	bne.w	80069fc <dwin_data+0x2174>
 80061b4:	4b1b      	ldr	r3, [pc, #108]	@ (8006224 <dwin_data+0x199c>)
 80061b6:	795b      	ldrb	r3, [r3, #5]
 80061b8:	2ba3      	cmp	r3, #163	@ 0xa3
 80061ba:	f040 841f 	bne.w	80069fc <dwin_data+0x2174>
 80061be:	4b19      	ldr	r3, [pc, #100]	@ (8006224 <dwin_data+0x199c>)
 80061c0:	7a1b      	ldrb	r3, [r3, #8]
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	f040 841a 	bne.w	80069fc <dwin_data+0x2174>
				if (P_peak_alarm_min_value==0){
 80061c8:	4b1a      	ldr	r3, [pc, #104]	@ (8006234 <dwin_data+0x19ac>)
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d105      	bne.n	80061dc <dwin_data+0x1954>
					P_peak_alarm_min_value = P_peak_alarm_min_value;
 80061d0:	4b18      	ldr	r3, [pc, #96]	@ (8006234 <dwin_data+0x19ac>)
 80061d2:	781a      	ldrb	r2, [r3, #0]
 80061d4:	4b17      	ldr	r3, [pc, #92]	@ (8006234 <dwin_data+0x19ac>)
 80061d6:	701a      	strb	r2, [r3, #0]
 80061d8:	f000 bc10 	b.w	80069fc <dwin_data+0x2174>
				}
				else{
					P_peak_alarm_min_value -= 1;
 80061dc:	4b15      	ldr	r3, [pc, #84]	@ (8006234 <dwin_data+0x19ac>)
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	3b01      	subs	r3, #1
 80061e2:	b2da      	uxtb	r2, r3
 80061e4:	4b13      	ldr	r3, [pc, #76]	@ (8006234 <dwin_data+0x19ac>)
 80061e6:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x15,P_peak_alarm_min_value);
 80061e8:	4b12      	ldr	r3, [pc, #72]	@ (8006234 <dwin_data+0x19ac>)
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	4619      	mov	r1, r3
 80061ee:	2015      	movs	r0, #21
 80061f0:	f7fc f868 	bl	80022c4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 80061f4:	2300      	movs	r3, #0
 80061f6:	663b      	str	r3, [r7, #96]	@ 0x60
 80061f8:	e007      	b.n	800620a <dwin_data+0x1982>
						DISPLAY_INPUT[a] = 0x00;
 80061fa:	4a0a      	ldr	r2, [pc, #40]	@ (8006224 <dwin_data+0x199c>)
 80061fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80061fe:	4413      	add	r3, r2
 8006200:	2200      	movs	r2, #0
 8006202:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 8006204:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006206:	3301      	adds	r3, #1
 8006208:	663b      	str	r3, [r7, #96]	@ 0x60
 800620a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800620c:	2b08      	cmp	r3, #8
 800620e:	ddf4      	ble.n	80061fa <dwin_data+0x1972>
 8006210:	e3f4      	b.n	80069fc <dwin_data+0x2174>
 8006212:	bf00      	nop
 8006214:	200015c1 	.word	0x200015c1
 8006218:	200015d9 	.word	0x200015d9
 800621c:	20001134 	.word	0x20001134
 8006220:	200015b0 	.word	0x200015b0
 8006224:	20001584 	.word	0x20001584
 8006228:	200015fc 	.word	0x200015fc
 800622c:	20000040 	.word	0x20000040
 8006230:	200015f7 	.word	0x200015f7
 8006234:	200015e4 	.word	0x200015e4
				}
			}
		}
		else if (MV_alarm_max_flag == 1){
 8006238:	4b94      	ldr	r3, [pc, #592]	@ (800648c <dwin_data+0x1c04>)
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d062      	beq.n	8006306 <dwin_data+0x1a7e>
			if(((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA2) && (DISPLAY_INPUT[8] == 0x01))){
 8006240:	4b93      	ldr	r3, [pc, #588]	@ (8006490 <dwin_data+0x1c08>)
 8006242:	791b      	ldrb	r3, [r3, #4]
 8006244:	2b10      	cmp	r3, #16
 8006246:	d12b      	bne.n	80062a0 <dwin_data+0x1a18>
 8006248:	4b91      	ldr	r3, [pc, #580]	@ (8006490 <dwin_data+0x1c08>)
 800624a:	795b      	ldrb	r3, [r3, #5]
 800624c:	2ba2      	cmp	r3, #162	@ 0xa2
 800624e:	d127      	bne.n	80062a0 <dwin_data+0x1a18>
 8006250:	4b8f      	ldr	r3, [pc, #572]	@ (8006490 <dwin_data+0x1c08>)
 8006252:	7a1b      	ldrb	r3, [r3, #8]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d123      	bne.n	80062a0 <dwin_data+0x1a18>
				if (MV_alarm_max_value==50){
 8006258:	4b8e      	ldr	r3, [pc, #568]	@ (8006494 <dwin_data+0x1c0c>)
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	2b32      	cmp	r3, #50	@ 0x32
 800625e:	d104      	bne.n	800626a <dwin_data+0x19e2>
					MV_alarm_max_value = MV_alarm_max_value;
 8006260:	4b8c      	ldr	r3, [pc, #560]	@ (8006494 <dwin_data+0x1c0c>)
 8006262:	781a      	ldrb	r2, [r3, #0]
 8006264:	4b8b      	ldr	r3, [pc, #556]	@ (8006494 <dwin_data+0x1c0c>)
 8006266:	701a      	strb	r2, [r3, #0]
				if (MV_alarm_max_value==50){
 8006268:	e3c8      	b.n	80069fc <dwin_data+0x2174>
				}
				else{
					MV_alarm_max_value +=1;
 800626a:	4b8a      	ldr	r3, [pc, #552]	@ (8006494 <dwin_data+0x1c0c>)
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	3301      	adds	r3, #1
 8006270:	b2da      	uxtb	r2, r3
 8006272:	4b88      	ldr	r3, [pc, #544]	@ (8006494 <dwin_data+0x1c0c>)
 8006274:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x16,MV_alarm_max_value);
 8006276:	4b87      	ldr	r3, [pc, #540]	@ (8006494 <dwin_data+0x1c0c>)
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	4619      	mov	r1, r3
 800627c:	2016      	movs	r0, #22
 800627e:	f7fc f821 	bl	80022c4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 8006282:	2300      	movs	r3, #0
 8006284:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006286:	e007      	b.n	8006298 <dwin_data+0x1a10>
						DISPLAY_INPUT[a] = 0x00;
 8006288:	4a81      	ldr	r2, [pc, #516]	@ (8006490 <dwin_data+0x1c08>)
 800628a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800628c:	4413      	add	r3, r2
 800628e:	2200      	movs	r2, #0
 8006290:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 8006292:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006294:	3301      	adds	r3, #1
 8006296:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006298:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800629a:	2b08      	cmp	r3, #8
 800629c:	ddf4      	ble.n	8006288 <dwin_data+0x1a00>
				if (MV_alarm_max_value==50){
 800629e:	e3ad      	b.n	80069fc <dwin_data+0x2174>
				}
			}
			else if (((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA3) && (DISPLAY_INPUT[8]== 0x01))){
 80062a0:	4b7b      	ldr	r3, [pc, #492]	@ (8006490 <dwin_data+0x1c08>)
 80062a2:	791b      	ldrb	r3, [r3, #4]
 80062a4:	2b10      	cmp	r3, #16
 80062a6:	f040 83a9 	bne.w	80069fc <dwin_data+0x2174>
 80062aa:	4b79      	ldr	r3, [pc, #484]	@ (8006490 <dwin_data+0x1c08>)
 80062ac:	795b      	ldrb	r3, [r3, #5]
 80062ae:	2ba3      	cmp	r3, #163	@ 0xa3
 80062b0:	f040 83a4 	bne.w	80069fc <dwin_data+0x2174>
 80062b4:	4b76      	ldr	r3, [pc, #472]	@ (8006490 <dwin_data+0x1c08>)
 80062b6:	7a1b      	ldrb	r3, [r3, #8]
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	f040 839f 	bne.w	80069fc <dwin_data+0x2174>
				if (MV_alarm_max_value==3){
 80062be:	4b75      	ldr	r3, [pc, #468]	@ (8006494 <dwin_data+0x1c0c>)
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	2b03      	cmp	r3, #3
 80062c4:	d104      	bne.n	80062d0 <dwin_data+0x1a48>
					MV_alarm_max_value = MV_alarm_max_value;
 80062c6:	4b73      	ldr	r3, [pc, #460]	@ (8006494 <dwin_data+0x1c0c>)
 80062c8:	781a      	ldrb	r2, [r3, #0]
 80062ca:	4b72      	ldr	r3, [pc, #456]	@ (8006494 <dwin_data+0x1c0c>)
 80062cc:	701a      	strb	r2, [r3, #0]
 80062ce:	e395      	b.n	80069fc <dwin_data+0x2174>
				}
				else{
					MV_alarm_max_value -= 1;
 80062d0:	4b70      	ldr	r3, [pc, #448]	@ (8006494 <dwin_data+0x1c0c>)
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	3b01      	subs	r3, #1
 80062d6:	b2da      	uxtb	r2, r3
 80062d8:	4b6e      	ldr	r3, [pc, #440]	@ (8006494 <dwin_data+0x1c0c>)
 80062da:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x16,MV_alarm_max_value);
 80062dc:	4b6d      	ldr	r3, [pc, #436]	@ (8006494 <dwin_data+0x1c0c>)
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	4619      	mov	r1, r3
 80062e2:	2016      	movs	r0, #22
 80062e4:	f7fb ffee 	bl	80022c4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 80062e8:	2300      	movs	r3, #0
 80062ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 80062ec:	e007      	b.n	80062fe <dwin_data+0x1a76>
						DISPLAY_INPUT[a] = 0x00;
 80062ee:	4a68      	ldr	r2, [pc, #416]	@ (8006490 <dwin_data+0x1c08>)
 80062f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80062f2:	4413      	add	r3, r2
 80062f4:	2200      	movs	r2, #0
 80062f6:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 80062f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80062fa:	3301      	adds	r3, #1
 80062fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80062fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006300:	2b08      	cmp	r3, #8
 8006302:	ddf4      	ble.n	80062ee <dwin_data+0x1a66>
 8006304:	e37a      	b.n	80069fc <dwin_data+0x2174>
				}
			}
		}
		else if (MV_alarm_min_flag == 1){
 8006306:	4b64      	ldr	r3, [pc, #400]	@ (8006498 <dwin_data+0x1c10>)
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d062      	beq.n	80063d4 <dwin_data+0x1b4c>
			if(((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA2) && (DISPLAY_INPUT[8] == 0x01))){
 800630e:	4b60      	ldr	r3, [pc, #384]	@ (8006490 <dwin_data+0x1c08>)
 8006310:	791b      	ldrb	r3, [r3, #4]
 8006312:	2b10      	cmp	r3, #16
 8006314:	d12b      	bne.n	800636e <dwin_data+0x1ae6>
 8006316:	4b5e      	ldr	r3, [pc, #376]	@ (8006490 <dwin_data+0x1c08>)
 8006318:	795b      	ldrb	r3, [r3, #5]
 800631a:	2ba2      	cmp	r3, #162	@ 0xa2
 800631c:	d127      	bne.n	800636e <dwin_data+0x1ae6>
 800631e:	4b5c      	ldr	r3, [pc, #368]	@ (8006490 <dwin_data+0x1c08>)
 8006320:	7a1b      	ldrb	r3, [r3, #8]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d123      	bne.n	800636e <dwin_data+0x1ae6>
				if(MV_alarm_min_value==47){
 8006326:	4b5d      	ldr	r3, [pc, #372]	@ (800649c <dwin_data+0x1c14>)
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	2b2f      	cmp	r3, #47	@ 0x2f
 800632c:	d104      	bne.n	8006338 <dwin_data+0x1ab0>
					MV_alarm_min_value = MV_alarm_min_value;
 800632e:	4b5b      	ldr	r3, [pc, #364]	@ (800649c <dwin_data+0x1c14>)
 8006330:	781a      	ldrb	r2, [r3, #0]
 8006332:	4b5a      	ldr	r3, [pc, #360]	@ (800649c <dwin_data+0x1c14>)
 8006334:	701a      	strb	r2, [r3, #0]
				if(MV_alarm_min_value==47){
 8006336:	e361      	b.n	80069fc <dwin_data+0x2174>
				}
				else{
					MV_alarm_min_value +=1;
 8006338:	4b58      	ldr	r3, [pc, #352]	@ (800649c <dwin_data+0x1c14>)
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	3301      	adds	r3, #1
 800633e:	b2da      	uxtb	r2, r3
 8006340:	4b56      	ldr	r3, [pc, #344]	@ (800649c <dwin_data+0x1c14>)
 8006342:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x17,MV_alarm_min_value);
 8006344:	4b55      	ldr	r3, [pc, #340]	@ (800649c <dwin_data+0x1c14>)
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	4619      	mov	r1, r3
 800634a:	2017      	movs	r0, #23
 800634c:	f7fb ffba 	bl	80022c4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 8006350:	2300      	movs	r3, #0
 8006352:	657b      	str	r3, [r7, #84]	@ 0x54
 8006354:	e007      	b.n	8006366 <dwin_data+0x1ade>
						DISPLAY_INPUT[a] = 0x00;
 8006356:	4a4e      	ldr	r2, [pc, #312]	@ (8006490 <dwin_data+0x1c08>)
 8006358:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800635a:	4413      	add	r3, r2
 800635c:	2200      	movs	r2, #0
 800635e:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 8006360:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006362:	3301      	adds	r3, #1
 8006364:	657b      	str	r3, [r7, #84]	@ 0x54
 8006366:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006368:	2b08      	cmp	r3, #8
 800636a:	ddf4      	ble.n	8006356 <dwin_data+0x1ace>
				if(MV_alarm_min_value==47){
 800636c:	e346      	b.n	80069fc <dwin_data+0x2174>
				}
			}
			else if (((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA3) && (DISPLAY_INPUT[8]== 0x01))){
 800636e:	4b48      	ldr	r3, [pc, #288]	@ (8006490 <dwin_data+0x1c08>)
 8006370:	791b      	ldrb	r3, [r3, #4]
 8006372:	2b10      	cmp	r3, #16
 8006374:	f040 8342 	bne.w	80069fc <dwin_data+0x2174>
 8006378:	4b45      	ldr	r3, [pc, #276]	@ (8006490 <dwin_data+0x1c08>)
 800637a:	795b      	ldrb	r3, [r3, #5]
 800637c:	2ba3      	cmp	r3, #163	@ 0xa3
 800637e:	f040 833d 	bne.w	80069fc <dwin_data+0x2174>
 8006382:	4b43      	ldr	r3, [pc, #268]	@ (8006490 <dwin_data+0x1c08>)
 8006384:	7a1b      	ldrb	r3, [r3, #8]
 8006386:	2b01      	cmp	r3, #1
 8006388:	f040 8338 	bne.w	80069fc <dwin_data+0x2174>
				if(MV_alarm_min_value==0){
 800638c:	4b43      	ldr	r3, [pc, #268]	@ (800649c <dwin_data+0x1c14>)
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d104      	bne.n	800639e <dwin_data+0x1b16>
					MV_alarm_min_value = MV_alarm_min_value;
 8006394:	4b41      	ldr	r3, [pc, #260]	@ (800649c <dwin_data+0x1c14>)
 8006396:	781a      	ldrb	r2, [r3, #0]
 8006398:	4b40      	ldr	r3, [pc, #256]	@ (800649c <dwin_data+0x1c14>)
 800639a:	701a      	strb	r2, [r3, #0]
 800639c:	e32e      	b.n	80069fc <dwin_data+0x2174>
				}
				else{
					MV_alarm_min_value -= 1;
 800639e:	4b3f      	ldr	r3, [pc, #252]	@ (800649c <dwin_data+0x1c14>)
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	3b01      	subs	r3, #1
 80063a4:	b2da      	uxtb	r2, r3
 80063a6:	4b3d      	ldr	r3, [pc, #244]	@ (800649c <dwin_data+0x1c14>)
 80063a8:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x17,MV_alarm_min_value);
 80063aa:	4b3c      	ldr	r3, [pc, #240]	@ (800649c <dwin_data+0x1c14>)
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	4619      	mov	r1, r3
 80063b0:	2017      	movs	r0, #23
 80063b2:	f7fb ff87 	bl	80022c4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 80063b6:	2300      	movs	r3, #0
 80063b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80063ba:	e007      	b.n	80063cc <dwin_data+0x1b44>
						DISPLAY_INPUT[a] = 0x00;
 80063bc:	4a34      	ldr	r2, [pc, #208]	@ (8006490 <dwin_data+0x1c08>)
 80063be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063c0:	4413      	add	r3, r2
 80063c2:	2200      	movs	r2, #0
 80063c4:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 80063c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063c8:	3301      	adds	r3, #1
 80063ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80063cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063ce:	2b08      	cmp	r3, #8
 80063d0:	ddf4      	ble.n	80063bc <dwin_data+0x1b34>
 80063d2:	e313      	b.n	80069fc <dwin_data+0x2174>
				}
			}
		}
		else if (RR_alarm_max_flag == 1){
 80063d4:	4b32      	ldr	r3, [pc, #200]	@ (80064a0 <dwin_data+0x1c18>)
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d071      	beq.n	80064c0 <dwin_data+0x1c38>
			if(((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA2) && (DISPLAY_INPUT[8] == 0x01))){
 80063dc:	4b2c      	ldr	r3, [pc, #176]	@ (8006490 <dwin_data+0x1c08>)
 80063de:	791b      	ldrb	r3, [r3, #4]
 80063e0:	2b10      	cmp	r3, #16
 80063e2:	d12b      	bne.n	800643c <dwin_data+0x1bb4>
 80063e4:	4b2a      	ldr	r3, [pc, #168]	@ (8006490 <dwin_data+0x1c08>)
 80063e6:	795b      	ldrb	r3, [r3, #5]
 80063e8:	2ba2      	cmp	r3, #162	@ 0xa2
 80063ea:	d127      	bne.n	800643c <dwin_data+0x1bb4>
 80063ec:	4b28      	ldr	r3, [pc, #160]	@ (8006490 <dwin_data+0x1c08>)
 80063ee:	7a1b      	ldrb	r3, [r3, #8]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d123      	bne.n	800643c <dwin_data+0x1bb4>
				if(RR_alarm_max_value==60){
 80063f4:	4b2b      	ldr	r3, [pc, #172]	@ (80064a4 <dwin_data+0x1c1c>)
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	2b3c      	cmp	r3, #60	@ 0x3c
 80063fa:	d104      	bne.n	8006406 <dwin_data+0x1b7e>
					RR_alarm_max_value = RR_alarm_max_value;
 80063fc:	4b29      	ldr	r3, [pc, #164]	@ (80064a4 <dwin_data+0x1c1c>)
 80063fe:	781a      	ldrb	r2, [r3, #0]
 8006400:	4b28      	ldr	r3, [pc, #160]	@ (80064a4 <dwin_data+0x1c1c>)
 8006402:	701a      	strb	r2, [r3, #0]
				if(RR_alarm_max_value==60){
 8006404:	e2fa      	b.n	80069fc <dwin_data+0x2174>
				}
				else{
					RR_alarm_max_value +=1;
 8006406:	4b27      	ldr	r3, [pc, #156]	@ (80064a4 <dwin_data+0x1c1c>)
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	3301      	adds	r3, #1
 800640c:	b2da      	uxtb	r2, r3
 800640e:	4b25      	ldr	r3, [pc, #148]	@ (80064a4 <dwin_data+0x1c1c>)
 8006410:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x18,RR_alarm_max_value);
 8006412:	4b24      	ldr	r3, [pc, #144]	@ (80064a4 <dwin_data+0x1c1c>)
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	4619      	mov	r1, r3
 8006418:	2018      	movs	r0, #24
 800641a:	f7fb ff53 	bl	80022c4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 800641e:	2300      	movs	r3, #0
 8006420:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006422:	e007      	b.n	8006434 <dwin_data+0x1bac>
						DISPLAY_INPUT[a] = 0x00;
 8006424:	4a1a      	ldr	r2, [pc, #104]	@ (8006490 <dwin_data+0x1c08>)
 8006426:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006428:	4413      	add	r3, r2
 800642a:	2200      	movs	r2, #0
 800642c:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 800642e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006430:	3301      	adds	r3, #1
 8006432:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006434:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006436:	2b08      	cmp	r3, #8
 8006438:	ddf4      	ble.n	8006424 <dwin_data+0x1b9c>
				if(RR_alarm_max_value==60){
 800643a:	e2df      	b.n	80069fc <dwin_data+0x2174>
				}
			}
			else if (((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA3) && (DISPLAY_INPUT[8]== 0x01))){
 800643c:	4b14      	ldr	r3, [pc, #80]	@ (8006490 <dwin_data+0x1c08>)
 800643e:	791b      	ldrb	r3, [r3, #4]
 8006440:	2b10      	cmp	r3, #16
 8006442:	f040 82db 	bne.w	80069fc <dwin_data+0x2174>
 8006446:	4b12      	ldr	r3, [pc, #72]	@ (8006490 <dwin_data+0x1c08>)
 8006448:	795b      	ldrb	r3, [r3, #5]
 800644a:	2ba3      	cmp	r3, #163	@ 0xa3
 800644c:	f040 82d6 	bne.w	80069fc <dwin_data+0x2174>
 8006450:	4b0f      	ldr	r3, [pc, #60]	@ (8006490 <dwin_data+0x1c08>)
 8006452:	7a1b      	ldrb	r3, [r3, #8]
 8006454:	2b01      	cmp	r3, #1
 8006456:	f040 82d1 	bne.w	80069fc <dwin_data+0x2174>
				if(RR_alarm_max_value==8){
 800645a:	4b12      	ldr	r3, [pc, #72]	@ (80064a4 <dwin_data+0x1c1c>)
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	2b08      	cmp	r3, #8
 8006460:	d104      	bne.n	800646c <dwin_data+0x1be4>
					RR_alarm_max_value = RR_alarm_max_value;
 8006462:	4b10      	ldr	r3, [pc, #64]	@ (80064a4 <dwin_data+0x1c1c>)
 8006464:	781a      	ldrb	r2, [r3, #0]
 8006466:	4b0f      	ldr	r3, [pc, #60]	@ (80064a4 <dwin_data+0x1c1c>)
 8006468:	701a      	strb	r2, [r3, #0]
 800646a:	e2c7      	b.n	80069fc <dwin_data+0x2174>
				}
				else{
					RR_alarm_max_value -= 1;
 800646c:	4b0d      	ldr	r3, [pc, #52]	@ (80064a4 <dwin_data+0x1c1c>)
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	3b01      	subs	r3, #1
 8006472:	b2da      	uxtb	r2, r3
 8006474:	4b0b      	ldr	r3, [pc, #44]	@ (80064a4 <dwin_data+0x1c1c>)
 8006476:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x18,RR_alarm_max_value);
 8006478:	4b0a      	ldr	r3, [pc, #40]	@ (80064a4 <dwin_data+0x1c1c>)
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	4619      	mov	r1, r3
 800647e:	2018      	movs	r0, #24
 8006480:	f7fb ff20 	bl	80022c4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 8006484:	2300      	movs	r3, #0
 8006486:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006488:	e016      	b.n	80064b8 <dwin_data+0x1c30>
 800648a:	bf00      	nop
 800648c:	200015fd 	.word	0x200015fd
 8006490:	20001584 	.word	0x20001584
 8006494:	20000041 	.word	0x20000041
 8006498:	200015f8 	.word	0x200015f8
 800649c:	200015e5 	.word	0x200015e5
 80064a0:	200015fe 	.word	0x200015fe
 80064a4:	20000042 	.word	0x20000042
						DISPLAY_INPUT[a] = 0x00;
 80064a8:	4a92      	ldr	r2, [pc, #584]	@ (80066f4 <dwin_data+0x1e6c>)
 80064aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064ac:	4413      	add	r3, r2
 80064ae:	2200      	movs	r2, #0
 80064b0:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 80064b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064b4:	3301      	adds	r3, #1
 80064b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064ba:	2b08      	cmp	r3, #8
 80064bc:	ddf4      	ble.n	80064a8 <dwin_data+0x1c20>
 80064be:	e29d      	b.n	80069fc <dwin_data+0x2174>
				}
			}
		}
		else if (RR_alarm_min_flag == 1){
 80064c0:	4b8d      	ldr	r3, [pc, #564]	@ (80066f8 <dwin_data+0x1e70>)
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d062      	beq.n	800658e <dwin_data+0x1d06>
			if(((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA2) && (DISPLAY_INPUT[8] == 0x01))){
 80064c8:	4b8a      	ldr	r3, [pc, #552]	@ (80066f4 <dwin_data+0x1e6c>)
 80064ca:	791b      	ldrb	r3, [r3, #4]
 80064cc:	2b10      	cmp	r3, #16
 80064ce:	d12b      	bne.n	8006528 <dwin_data+0x1ca0>
 80064d0:	4b88      	ldr	r3, [pc, #544]	@ (80066f4 <dwin_data+0x1e6c>)
 80064d2:	795b      	ldrb	r3, [r3, #5]
 80064d4:	2ba2      	cmp	r3, #162	@ 0xa2
 80064d6:	d127      	bne.n	8006528 <dwin_data+0x1ca0>
 80064d8:	4b86      	ldr	r3, [pc, #536]	@ (80066f4 <dwin_data+0x1e6c>)
 80064da:	7a1b      	ldrb	r3, [r3, #8]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d123      	bne.n	8006528 <dwin_data+0x1ca0>
				if (RR_alarm_min_value==8){
 80064e0:	4b86      	ldr	r3, [pc, #536]	@ (80066fc <dwin_data+0x1e74>)
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	2b08      	cmp	r3, #8
 80064e6:	d104      	bne.n	80064f2 <dwin_data+0x1c6a>
					RR_alarm_min_value = RR_alarm_min_value;
 80064e8:	4b84      	ldr	r3, [pc, #528]	@ (80066fc <dwin_data+0x1e74>)
 80064ea:	781a      	ldrb	r2, [r3, #0]
 80064ec:	4b83      	ldr	r3, [pc, #524]	@ (80066fc <dwin_data+0x1e74>)
 80064ee:	701a      	strb	r2, [r3, #0]
				if (RR_alarm_min_value==8){
 80064f0:	e284      	b.n	80069fc <dwin_data+0x2174>
				}
				else{
					RR_alarm_min_value +=1;
 80064f2:	4b82      	ldr	r3, [pc, #520]	@ (80066fc <dwin_data+0x1e74>)
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	3301      	adds	r3, #1
 80064f8:	b2da      	uxtb	r2, r3
 80064fa:	4b80      	ldr	r3, [pc, #512]	@ (80066fc <dwin_data+0x1e74>)
 80064fc:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x19,RR_alarm_min_value);
 80064fe:	4b7f      	ldr	r3, [pc, #508]	@ (80066fc <dwin_data+0x1e74>)
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	4619      	mov	r1, r3
 8006504:	2019      	movs	r0, #25
 8006506:	f7fb fedd 	bl	80022c4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 800650a:	2300      	movs	r3, #0
 800650c:	647b      	str	r3, [r7, #68]	@ 0x44
 800650e:	e007      	b.n	8006520 <dwin_data+0x1c98>
						DISPLAY_INPUT[a] = 0x00;
 8006510:	4a78      	ldr	r2, [pc, #480]	@ (80066f4 <dwin_data+0x1e6c>)
 8006512:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006514:	4413      	add	r3, r2
 8006516:	2200      	movs	r2, #0
 8006518:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 800651a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800651c:	3301      	adds	r3, #1
 800651e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006520:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006522:	2b08      	cmp	r3, #8
 8006524:	ddf4      	ble.n	8006510 <dwin_data+0x1c88>
				if (RR_alarm_min_value==8){
 8006526:	e269      	b.n	80069fc <dwin_data+0x2174>
				}
			}
			else if (((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA3) && (DISPLAY_INPUT[8]== 0x01))){
 8006528:	4b72      	ldr	r3, [pc, #456]	@ (80066f4 <dwin_data+0x1e6c>)
 800652a:	791b      	ldrb	r3, [r3, #4]
 800652c:	2b10      	cmp	r3, #16
 800652e:	f040 8265 	bne.w	80069fc <dwin_data+0x2174>
 8006532:	4b70      	ldr	r3, [pc, #448]	@ (80066f4 <dwin_data+0x1e6c>)
 8006534:	795b      	ldrb	r3, [r3, #5]
 8006536:	2ba3      	cmp	r3, #163	@ 0xa3
 8006538:	f040 8260 	bne.w	80069fc <dwin_data+0x2174>
 800653c:	4b6d      	ldr	r3, [pc, #436]	@ (80066f4 <dwin_data+0x1e6c>)
 800653e:	7a1b      	ldrb	r3, [r3, #8]
 8006540:	2b01      	cmp	r3, #1
 8006542:	f040 825b 	bne.w	80069fc <dwin_data+0x2174>
				if(RR_alarm_min_value==0){
 8006546:	4b6d      	ldr	r3, [pc, #436]	@ (80066fc <dwin_data+0x1e74>)
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d104      	bne.n	8006558 <dwin_data+0x1cd0>
					RR_alarm_min_value = RR_alarm_min_value;
 800654e:	4b6b      	ldr	r3, [pc, #428]	@ (80066fc <dwin_data+0x1e74>)
 8006550:	781a      	ldrb	r2, [r3, #0]
 8006552:	4b6a      	ldr	r3, [pc, #424]	@ (80066fc <dwin_data+0x1e74>)
 8006554:	701a      	strb	r2, [r3, #0]
 8006556:	e251      	b.n	80069fc <dwin_data+0x2174>
				}
				else{
					RR_alarm_min_value -= 1;
 8006558:	4b68      	ldr	r3, [pc, #416]	@ (80066fc <dwin_data+0x1e74>)
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	3b01      	subs	r3, #1
 800655e:	b2da      	uxtb	r2, r3
 8006560:	4b66      	ldr	r3, [pc, #408]	@ (80066fc <dwin_data+0x1e74>)
 8006562:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x19,RR_alarm_min_value);
 8006564:	4b65      	ldr	r3, [pc, #404]	@ (80066fc <dwin_data+0x1e74>)
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	4619      	mov	r1, r3
 800656a:	2019      	movs	r0, #25
 800656c:	f7fb feaa 	bl	80022c4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 8006570:	2300      	movs	r3, #0
 8006572:	643b      	str	r3, [r7, #64]	@ 0x40
 8006574:	e007      	b.n	8006586 <dwin_data+0x1cfe>
						DISPLAY_INPUT[a] = 0x00;
 8006576:	4a5f      	ldr	r2, [pc, #380]	@ (80066f4 <dwin_data+0x1e6c>)
 8006578:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800657a:	4413      	add	r3, r2
 800657c:	2200      	movs	r2, #0
 800657e:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 8006580:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006582:	3301      	adds	r3, #1
 8006584:	643b      	str	r3, [r7, #64]	@ 0x40
 8006586:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006588:	2b08      	cmp	r3, #8
 800658a:	ddf4      	ble.n	8006576 <dwin_data+0x1cee>
 800658c:	e236      	b.n	80069fc <dwin_data+0x2174>
				}
			}
		}
		else if (peep_alarm_max_flag == 1){
 800658e:	4b5c      	ldr	r3, [pc, #368]	@ (8006700 <dwin_data+0x1e78>)
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d062      	beq.n	800665c <dwin_data+0x1dd4>
			if(((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA2) && (DISPLAY_INPUT[8] == 0x01))){
 8006596:	4b57      	ldr	r3, [pc, #348]	@ (80066f4 <dwin_data+0x1e6c>)
 8006598:	791b      	ldrb	r3, [r3, #4]
 800659a:	2b10      	cmp	r3, #16
 800659c:	d12b      	bne.n	80065f6 <dwin_data+0x1d6e>
 800659e:	4b55      	ldr	r3, [pc, #340]	@ (80066f4 <dwin_data+0x1e6c>)
 80065a0:	795b      	ldrb	r3, [r3, #5]
 80065a2:	2ba2      	cmp	r3, #162	@ 0xa2
 80065a4:	d127      	bne.n	80065f6 <dwin_data+0x1d6e>
 80065a6:	4b53      	ldr	r3, [pc, #332]	@ (80066f4 <dwin_data+0x1e6c>)
 80065a8:	7a1b      	ldrb	r3, [r3, #8]
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d123      	bne.n	80065f6 <dwin_data+0x1d6e>
				if (peep_alarm_max_value==30){
 80065ae:	4b55      	ldr	r3, [pc, #340]	@ (8006704 <dwin_data+0x1e7c>)
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	2b1e      	cmp	r3, #30
 80065b4:	d104      	bne.n	80065c0 <dwin_data+0x1d38>
					peep_alarm_max_value = peep_alarm_max_value;
 80065b6:	4b53      	ldr	r3, [pc, #332]	@ (8006704 <dwin_data+0x1e7c>)
 80065b8:	781a      	ldrb	r2, [r3, #0]
 80065ba:	4b52      	ldr	r3, [pc, #328]	@ (8006704 <dwin_data+0x1e7c>)
 80065bc:	701a      	strb	r2, [r3, #0]
				if (peep_alarm_max_value==30){
 80065be:	e21d      	b.n	80069fc <dwin_data+0x2174>
				}
				else{
					peep_alarm_max_value +=1;
 80065c0:	4b50      	ldr	r3, [pc, #320]	@ (8006704 <dwin_data+0x1e7c>)
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	3301      	adds	r3, #1
 80065c6:	b2da      	uxtb	r2, r3
 80065c8:	4b4e      	ldr	r3, [pc, #312]	@ (8006704 <dwin_data+0x1e7c>)
 80065ca:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x1A,peep_alarm_max_value);
 80065cc:	4b4d      	ldr	r3, [pc, #308]	@ (8006704 <dwin_data+0x1e7c>)
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	4619      	mov	r1, r3
 80065d2:	201a      	movs	r0, #26
 80065d4:	f7fb fe76 	bl	80022c4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 80065d8:	2300      	movs	r3, #0
 80065da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065dc:	e007      	b.n	80065ee <dwin_data+0x1d66>
						DISPLAY_INPUT[a] = 0x00;
 80065de:	4a45      	ldr	r2, [pc, #276]	@ (80066f4 <dwin_data+0x1e6c>)
 80065e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065e2:	4413      	add	r3, r2
 80065e4:	2200      	movs	r2, #0
 80065e6:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 80065e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065ea:	3301      	adds	r3, #1
 80065ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065f0:	2b08      	cmp	r3, #8
 80065f2:	ddf4      	ble.n	80065de <dwin_data+0x1d56>
				if (peep_alarm_max_value==30){
 80065f4:	e202      	b.n	80069fc <dwin_data+0x2174>
				}
			}
			else if (((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA3) && (DISPLAY_INPUT[8]== 0x01))){
 80065f6:	4b3f      	ldr	r3, [pc, #252]	@ (80066f4 <dwin_data+0x1e6c>)
 80065f8:	791b      	ldrb	r3, [r3, #4]
 80065fa:	2b10      	cmp	r3, #16
 80065fc:	f040 81fe 	bne.w	80069fc <dwin_data+0x2174>
 8006600:	4b3c      	ldr	r3, [pc, #240]	@ (80066f4 <dwin_data+0x1e6c>)
 8006602:	795b      	ldrb	r3, [r3, #5]
 8006604:	2ba3      	cmp	r3, #163	@ 0xa3
 8006606:	f040 81f9 	bne.w	80069fc <dwin_data+0x2174>
 800660a:	4b3a      	ldr	r3, [pc, #232]	@ (80066f4 <dwin_data+0x1e6c>)
 800660c:	7a1b      	ldrb	r3, [r3, #8]
 800660e:	2b01      	cmp	r3, #1
 8006610:	f040 81f4 	bne.w	80069fc <dwin_data+0x2174>
				if (peep_alarm_max_value==10){
 8006614:	4b3b      	ldr	r3, [pc, #236]	@ (8006704 <dwin_data+0x1e7c>)
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	2b0a      	cmp	r3, #10
 800661a:	d104      	bne.n	8006626 <dwin_data+0x1d9e>
					peep_alarm_max_value = peep_alarm_max_value;
 800661c:	4b39      	ldr	r3, [pc, #228]	@ (8006704 <dwin_data+0x1e7c>)
 800661e:	781a      	ldrb	r2, [r3, #0]
 8006620:	4b38      	ldr	r3, [pc, #224]	@ (8006704 <dwin_data+0x1e7c>)
 8006622:	701a      	strb	r2, [r3, #0]
 8006624:	e1ea      	b.n	80069fc <dwin_data+0x2174>
				}
				else{
					peep_alarm_max_value -= 1;
 8006626:	4b37      	ldr	r3, [pc, #220]	@ (8006704 <dwin_data+0x1e7c>)
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	3b01      	subs	r3, #1
 800662c:	b2da      	uxtb	r2, r3
 800662e:	4b35      	ldr	r3, [pc, #212]	@ (8006704 <dwin_data+0x1e7c>)
 8006630:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x1A,peep_alarm_max_value);
 8006632:	4b34      	ldr	r3, [pc, #208]	@ (8006704 <dwin_data+0x1e7c>)
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	4619      	mov	r1, r3
 8006638:	201a      	movs	r0, #26
 800663a:	f7fb fe43 	bl	80022c4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 800663e:	2300      	movs	r3, #0
 8006640:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006642:	e007      	b.n	8006654 <dwin_data+0x1dcc>
						DISPLAY_INPUT[a] = 0x00;
 8006644:	4a2b      	ldr	r2, [pc, #172]	@ (80066f4 <dwin_data+0x1e6c>)
 8006646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006648:	4413      	add	r3, r2
 800664a:	2200      	movs	r2, #0
 800664c:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 800664e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006650:	3301      	adds	r3, #1
 8006652:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006656:	2b08      	cmp	r3, #8
 8006658:	ddf4      	ble.n	8006644 <dwin_data+0x1dbc>
 800665a:	e1cf      	b.n	80069fc <dwin_data+0x2174>
				}
			}
		}
		else if (peep_alarm_min_flag == 1){
 800665c:	4b2a      	ldr	r3, [pc, #168]	@ (8006708 <dwin_data+0x1e80>)
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d070      	beq.n	8006746 <dwin_data+0x1ebe>
			if(((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA2) && (DISPLAY_INPUT[8] == 0x01))){
 8006664:	4b23      	ldr	r3, [pc, #140]	@ (80066f4 <dwin_data+0x1e6c>)
 8006666:	791b      	ldrb	r3, [r3, #4]
 8006668:	2b10      	cmp	r3, #16
 800666a:	d12b      	bne.n	80066c4 <dwin_data+0x1e3c>
 800666c:	4b21      	ldr	r3, [pc, #132]	@ (80066f4 <dwin_data+0x1e6c>)
 800666e:	795b      	ldrb	r3, [r3, #5]
 8006670:	2ba2      	cmp	r3, #162	@ 0xa2
 8006672:	d127      	bne.n	80066c4 <dwin_data+0x1e3c>
 8006674:	4b1f      	ldr	r3, [pc, #124]	@ (80066f4 <dwin_data+0x1e6c>)
 8006676:	7a1b      	ldrb	r3, [r3, #8]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d123      	bne.n	80066c4 <dwin_data+0x1e3c>
				if (peep_alarm_min_value==10){
 800667c:	4b23      	ldr	r3, [pc, #140]	@ (800670c <dwin_data+0x1e84>)
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	2b0a      	cmp	r3, #10
 8006682:	d104      	bne.n	800668e <dwin_data+0x1e06>
					peep_alarm_min_value = peep_alarm_min_value;
 8006684:	4b21      	ldr	r3, [pc, #132]	@ (800670c <dwin_data+0x1e84>)
 8006686:	781a      	ldrb	r2, [r3, #0]
 8006688:	4b20      	ldr	r3, [pc, #128]	@ (800670c <dwin_data+0x1e84>)
 800668a:	701a      	strb	r2, [r3, #0]
				if (peep_alarm_min_value==10){
 800668c:	e1b6      	b.n	80069fc <dwin_data+0x2174>
				}
				else{
					peep_alarm_min_value +=1;
 800668e:	4b1f      	ldr	r3, [pc, #124]	@ (800670c <dwin_data+0x1e84>)
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	3301      	adds	r3, #1
 8006694:	b2da      	uxtb	r2, r3
 8006696:	4b1d      	ldr	r3, [pc, #116]	@ (800670c <dwin_data+0x1e84>)
 8006698:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x21,peep_alarm_min_value);
 800669a:	4b1c      	ldr	r3, [pc, #112]	@ (800670c <dwin_data+0x1e84>)
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	4619      	mov	r1, r3
 80066a0:	2021      	movs	r0, #33	@ 0x21
 80066a2:	f7fb fe0f 	bl	80022c4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 80066a6:	2300      	movs	r3, #0
 80066a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80066aa:	e007      	b.n	80066bc <dwin_data+0x1e34>
						DISPLAY_INPUT[a] = 0x00;
 80066ac:	4a11      	ldr	r2, [pc, #68]	@ (80066f4 <dwin_data+0x1e6c>)
 80066ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066b0:	4413      	add	r3, r2
 80066b2:	2200      	movs	r2, #0
 80066b4:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 80066b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066b8:	3301      	adds	r3, #1
 80066ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80066bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066be:	2b08      	cmp	r3, #8
 80066c0:	ddf4      	ble.n	80066ac <dwin_data+0x1e24>
				if (peep_alarm_min_value==10){
 80066c2:	e19b      	b.n	80069fc <dwin_data+0x2174>
				}
			}
			else if (((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA3) && (DISPLAY_INPUT[8]== 0x01))){
 80066c4:	4b0b      	ldr	r3, [pc, #44]	@ (80066f4 <dwin_data+0x1e6c>)
 80066c6:	791b      	ldrb	r3, [r3, #4]
 80066c8:	2b10      	cmp	r3, #16
 80066ca:	f040 8197 	bne.w	80069fc <dwin_data+0x2174>
 80066ce:	4b09      	ldr	r3, [pc, #36]	@ (80066f4 <dwin_data+0x1e6c>)
 80066d0:	795b      	ldrb	r3, [r3, #5]
 80066d2:	2ba3      	cmp	r3, #163	@ 0xa3
 80066d4:	f040 8192 	bne.w	80069fc <dwin_data+0x2174>
 80066d8:	4b06      	ldr	r3, [pc, #24]	@ (80066f4 <dwin_data+0x1e6c>)
 80066da:	7a1b      	ldrb	r3, [r3, #8]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	f040 818d 	bne.w	80069fc <dwin_data+0x2174>
				if (peep_alarm_min_value==0){
 80066e2:	4b0a      	ldr	r3, [pc, #40]	@ (800670c <dwin_data+0x1e84>)
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d112      	bne.n	8006710 <dwin_data+0x1e88>
					peep_alarm_min_value = peep_alarm_min_value;
 80066ea:	4b08      	ldr	r3, [pc, #32]	@ (800670c <dwin_data+0x1e84>)
 80066ec:	781a      	ldrb	r2, [r3, #0]
 80066ee:	4b07      	ldr	r3, [pc, #28]	@ (800670c <dwin_data+0x1e84>)
 80066f0:	701a      	strb	r2, [r3, #0]
 80066f2:	e183      	b.n	80069fc <dwin_data+0x2174>
 80066f4:	20001584 	.word	0x20001584
 80066f8:	200015f9 	.word	0x200015f9
 80066fc:	2000003d 	.word	0x2000003d
 8006700:	200015ff 	.word	0x200015ff
 8006704:	20000043 	.word	0x20000043
 8006708:	200015fa 	.word	0x200015fa
 800670c:	2000003e 	.word	0x2000003e
				}
				else{
					peep_alarm_min_value -= 1;
 8006710:	4b93      	ldr	r3, [pc, #588]	@ (8006960 <dwin_data+0x20d8>)
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	3b01      	subs	r3, #1
 8006716:	b2da      	uxtb	r2, r3
 8006718:	4b91      	ldr	r3, [pc, #580]	@ (8006960 <dwin_data+0x20d8>)
 800671a:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x21,peep_alarm_min_value);
 800671c:	4b90      	ldr	r3, [pc, #576]	@ (8006960 <dwin_data+0x20d8>)
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	4619      	mov	r1, r3
 8006722:	2021      	movs	r0, #33	@ 0x21
 8006724:	f7fb fdce 	bl	80022c4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 8006728:	2300      	movs	r3, #0
 800672a:	633b      	str	r3, [r7, #48]	@ 0x30
 800672c:	e007      	b.n	800673e <dwin_data+0x1eb6>
						DISPLAY_INPUT[a] = 0x00;
 800672e:	4a8d      	ldr	r2, [pc, #564]	@ (8006964 <dwin_data+0x20dc>)
 8006730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006732:	4413      	add	r3, r2
 8006734:	2200      	movs	r2, #0
 8006736:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 8006738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800673a:	3301      	adds	r3, #1
 800673c:	633b      	str	r3, [r7, #48]	@ 0x30
 800673e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006740:	2b08      	cmp	r3, #8
 8006742:	ddf4      	ble.n	800672e <dwin_data+0x1ea6>
 8006744:	e15a      	b.n	80069fc <dwin_data+0x2174>
				}
			}
		}
		else if (O2_alarm_max_flag == 1){
 8006746:	4b88      	ldr	r3, [pc, #544]	@ (8006968 <dwin_data+0x20e0>)
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d062      	beq.n	8006814 <dwin_data+0x1f8c>
			if(((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA2) && (DISPLAY_INPUT[8] == 0x01))){
 800674e:	4b85      	ldr	r3, [pc, #532]	@ (8006964 <dwin_data+0x20dc>)
 8006750:	791b      	ldrb	r3, [r3, #4]
 8006752:	2b10      	cmp	r3, #16
 8006754:	d12b      	bne.n	80067ae <dwin_data+0x1f26>
 8006756:	4b83      	ldr	r3, [pc, #524]	@ (8006964 <dwin_data+0x20dc>)
 8006758:	795b      	ldrb	r3, [r3, #5]
 800675a:	2ba2      	cmp	r3, #162	@ 0xa2
 800675c:	d127      	bne.n	80067ae <dwin_data+0x1f26>
 800675e:	4b81      	ldr	r3, [pc, #516]	@ (8006964 <dwin_data+0x20dc>)
 8006760:	7a1b      	ldrb	r3, [r3, #8]
 8006762:	2b01      	cmp	r3, #1
 8006764:	d123      	bne.n	80067ae <dwin_data+0x1f26>
				if (O2_alarm_max_value==100){
 8006766:	4b81      	ldr	r3, [pc, #516]	@ (800696c <dwin_data+0x20e4>)
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	2b64      	cmp	r3, #100	@ 0x64
 800676c:	d104      	bne.n	8006778 <dwin_data+0x1ef0>
					O2_alarm_max_value = O2_alarm_max_value;
 800676e:	4b7f      	ldr	r3, [pc, #508]	@ (800696c <dwin_data+0x20e4>)
 8006770:	781a      	ldrb	r2, [r3, #0]
 8006772:	4b7e      	ldr	r3, [pc, #504]	@ (800696c <dwin_data+0x20e4>)
 8006774:	701a      	strb	r2, [r3, #0]
				if (O2_alarm_max_value==100){
 8006776:	e141      	b.n	80069fc <dwin_data+0x2174>
				}
				else{
					O2_alarm_max_value +=1;
 8006778:	4b7c      	ldr	r3, [pc, #496]	@ (800696c <dwin_data+0x20e4>)
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	3301      	adds	r3, #1
 800677e:	b2da      	uxtb	r2, r3
 8006780:	4b7a      	ldr	r3, [pc, #488]	@ (800696c <dwin_data+0x20e4>)
 8006782:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x22,O2_alarm_max_value);
 8006784:	4b79      	ldr	r3, [pc, #484]	@ (800696c <dwin_data+0x20e4>)
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	4619      	mov	r1, r3
 800678a:	2022      	movs	r0, #34	@ 0x22
 800678c:	f7fb fd9a 	bl	80022c4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 8006790:	2300      	movs	r3, #0
 8006792:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006794:	e007      	b.n	80067a6 <dwin_data+0x1f1e>
						DISPLAY_INPUT[a] = 0x00;
 8006796:	4a73      	ldr	r2, [pc, #460]	@ (8006964 <dwin_data+0x20dc>)
 8006798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800679a:	4413      	add	r3, r2
 800679c:	2200      	movs	r2, #0
 800679e:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 80067a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067a2:	3301      	adds	r3, #1
 80067a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067a8:	2b08      	cmp	r3, #8
 80067aa:	ddf4      	ble.n	8006796 <dwin_data+0x1f0e>
				if (O2_alarm_max_value==100){
 80067ac:	e126      	b.n	80069fc <dwin_data+0x2174>
				}
			}

			else if (((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA3) && (DISPLAY_INPUT[8]== 0x01))){
 80067ae:	4b6d      	ldr	r3, [pc, #436]	@ (8006964 <dwin_data+0x20dc>)
 80067b0:	791b      	ldrb	r3, [r3, #4]
 80067b2:	2b10      	cmp	r3, #16
 80067b4:	f040 8122 	bne.w	80069fc <dwin_data+0x2174>
 80067b8:	4b6a      	ldr	r3, [pc, #424]	@ (8006964 <dwin_data+0x20dc>)
 80067ba:	795b      	ldrb	r3, [r3, #5]
 80067bc:	2ba3      	cmp	r3, #163	@ 0xa3
 80067be:	f040 811d 	bne.w	80069fc <dwin_data+0x2174>
 80067c2:	4b68      	ldr	r3, [pc, #416]	@ (8006964 <dwin_data+0x20dc>)
 80067c4:	7a1b      	ldrb	r3, [r3, #8]
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	f040 8118 	bne.w	80069fc <dwin_data+0x2174>
				if (O2_alarm_max_value==60){
 80067cc:	4b67      	ldr	r3, [pc, #412]	@ (800696c <dwin_data+0x20e4>)
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	2b3c      	cmp	r3, #60	@ 0x3c
 80067d2:	d104      	bne.n	80067de <dwin_data+0x1f56>
					O2_alarm_max_value = O2_alarm_max_value;
 80067d4:	4b65      	ldr	r3, [pc, #404]	@ (800696c <dwin_data+0x20e4>)
 80067d6:	781a      	ldrb	r2, [r3, #0]
 80067d8:	4b64      	ldr	r3, [pc, #400]	@ (800696c <dwin_data+0x20e4>)
 80067da:	701a      	strb	r2, [r3, #0]
 80067dc:	e10e      	b.n	80069fc <dwin_data+0x2174>
				}
				else{
					O2_alarm_max_value -= 1;
 80067de:	4b63      	ldr	r3, [pc, #396]	@ (800696c <dwin_data+0x20e4>)
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	3b01      	subs	r3, #1
 80067e4:	b2da      	uxtb	r2, r3
 80067e6:	4b61      	ldr	r3, [pc, #388]	@ (800696c <dwin_data+0x20e4>)
 80067e8:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x22,O2_alarm_max_value);
 80067ea:	4b60      	ldr	r3, [pc, #384]	@ (800696c <dwin_data+0x20e4>)
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	4619      	mov	r1, r3
 80067f0:	2022      	movs	r0, #34	@ 0x22
 80067f2:	f7fb fd67 	bl	80022c4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 80067f6:	2300      	movs	r3, #0
 80067f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067fa:	e007      	b.n	800680c <dwin_data+0x1f84>
						DISPLAY_INPUT[a] = 0x00;
 80067fc:	4a59      	ldr	r2, [pc, #356]	@ (8006964 <dwin_data+0x20dc>)
 80067fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006800:	4413      	add	r3, r2
 8006802:	2200      	movs	r2, #0
 8006804:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 8006806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006808:	3301      	adds	r3, #1
 800680a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800680c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800680e:	2b08      	cmp	r3, #8
 8006810:	ddf4      	ble.n	80067fc <dwin_data+0x1f74>
 8006812:	e0f3      	b.n	80069fc <dwin_data+0x2174>
				}
			}
		}

		else if (O2_alarm_min_flag == 1){
 8006814:	4b56      	ldr	r3, [pc, #344]	@ (8006970 <dwin_data+0x20e8>)
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d062      	beq.n	80068e2 <dwin_data+0x205a>

			if(((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA2) && (DISPLAY_INPUT[8] == 0x01))){
 800681c:	4b51      	ldr	r3, [pc, #324]	@ (8006964 <dwin_data+0x20dc>)
 800681e:	791b      	ldrb	r3, [r3, #4]
 8006820:	2b10      	cmp	r3, #16
 8006822:	d12b      	bne.n	800687c <dwin_data+0x1ff4>
 8006824:	4b4f      	ldr	r3, [pc, #316]	@ (8006964 <dwin_data+0x20dc>)
 8006826:	795b      	ldrb	r3, [r3, #5]
 8006828:	2ba2      	cmp	r3, #162	@ 0xa2
 800682a:	d127      	bne.n	800687c <dwin_data+0x1ff4>
 800682c:	4b4d      	ldr	r3, [pc, #308]	@ (8006964 <dwin_data+0x20dc>)
 800682e:	7a1b      	ldrb	r3, [r3, #8]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d123      	bne.n	800687c <dwin_data+0x1ff4>
				if (O2_alarm_min_value==60){
 8006834:	4b4f      	ldr	r3, [pc, #316]	@ (8006974 <dwin_data+0x20ec>)
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	2b3c      	cmp	r3, #60	@ 0x3c
 800683a:	d104      	bne.n	8006846 <dwin_data+0x1fbe>
					O2_alarm_min_value = O2_alarm_min_value;
 800683c:	4b4d      	ldr	r3, [pc, #308]	@ (8006974 <dwin_data+0x20ec>)
 800683e:	781a      	ldrb	r2, [r3, #0]
 8006840:	4b4c      	ldr	r3, [pc, #304]	@ (8006974 <dwin_data+0x20ec>)
 8006842:	701a      	strb	r2, [r3, #0]
				if (O2_alarm_min_value==60){
 8006844:	e0da      	b.n	80069fc <dwin_data+0x2174>
				}
				else{
					O2_alarm_min_value +=1;
 8006846:	4b4b      	ldr	r3, [pc, #300]	@ (8006974 <dwin_data+0x20ec>)
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	3301      	adds	r3, #1
 800684c:	b2da      	uxtb	r2, r3
 800684e:	4b49      	ldr	r3, [pc, #292]	@ (8006974 <dwin_data+0x20ec>)
 8006850:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x23,O2_alarm_min_value);
 8006852:	4b48      	ldr	r3, [pc, #288]	@ (8006974 <dwin_data+0x20ec>)
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	4619      	mov	r1, r3
 8006858:	2023      	movs	r0, #35	@ 0x23
 800685a:	f7fb fd33 	bl	80022c4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 800685e:	2300      	movs	r3, #0
 8006860:	627b      	str	r3, [r7, #36]	@ 0x24
 8006862:	e007      	b.n	8006874 <dwin_data+0x1fec>
						DISPLAY_INPUT[a] = 0x00;
 8006864:	4a3f      	ldr	r2, [pc, #252]	@ (8006964 <dwin_data+0x20dc>)
 8006866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006868:	4413      	add	r3, r2
 800686a:	2200      	movs	r2, #0
 800686c:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 800686e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006870:	3301      	adds	r3, #1
 8006872:	627b      	str	r3, [r7, #36]	@ 0x24
 8006874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006876:	2b08      	cmp	r3, #8
 8006878:	ddf4      	ble.n	8006864 <dwin_data+0x1fdc>
				if (O2_alarm_min_value==60){
 800687a:	e0bf      	b.n	80069fc <dwin_data+0x2174>
				}
			}

			else if (((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA3) && (DISPLAY_INPUT[8]== 0x01))){
 800687c:	4b39      	ldr	r3, [pc, #228]	@ (8006964 <dwin_data+0x20dc>)
 800687e:	791b      	ldrb	r3, [r3, #4]
 8006880:	2b10      	cmp	r3, #16
 8006882:	f040 80bb 	bne.w	80069fc <dwin_data+0x2174>
 8006886:	4b37      	ldr	r3, [pc, #220]	@ (8006964 <dwin_data+0x20dc>)
 8006888:	795b      	ldrb	r3, [r3, #5]
 800688a:	2ba3      	cmp	r3, #163	@ 0xa3
 800688c:	f040 80b6 	bne.w	80069fc <dwin_data+0x2174>
 8006890:	4b34      	ldr	r3, [pc, #208]	@ (8006964 <dwin_data+0x20dc>)
 8006892:	7a1b      	ldrb	r3, [r3, #8]
 8006894:	2b01      	cmp	r3, #1
 8006896:	f040 80b1 	bne.w	80069fc <dwin_data+0x2174>
				if (O2_alarm_min_value==20){
 800689a:	4b36      	ldr	r3, [pc, #216]	@ (8006974 <dwin_data+0x20ec>)
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	2b14      	cmp	r3, #20
 80068a0:	d104      	bne.n	80068ac <dwin_data+0x2024>
					O2_alarm_min_value = O2_alarm_min_value;
 80068a2:	4b34      	ldr	r3, [pc, #208]	@ (8006974 <dwin_data+0x20ec>)
 80068a4:	781a      	ldrb	r2, [r3, #0]
 80068a6:	4b33      	ldr	r3, [pc, #204]	@ (8006974 <dwin_data+0x20ec>)
 80068a8:	701a      	strb	r2, [r3, #0]
 80068aa:	e0a7      	b.n	80069fc <dwin_data+0x2174>
				}
				else{
					O2_alarm_min_value -= 1;
 80068ac:	4b31      	ldr	r3, [pc, #196]	@ (8006974 <dwin_data+0x20ec>)
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	3b01      	subs	r3, #1
 80068b2:	b2da      	uxtb	r2, r3
 80068b4:	4b2f      	ldr	r3, [pc, #188]	@ (8006974 <dwin_data+0x20ec>)
 80068b6:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x23,O2_alarm_min_value);
 80068b8:	4b2e      	ldr	r3, [pc, #184]	@ (8006974 <dwin_data+0x20ec>)
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	4619      	mov	r1, r3
 80068be:	2023      	movs	r0, #35	@ 0x23
 80068c0:	f7fb fd00 	bl	80022c4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 80068c4:	2300      	movs	r3, #0
 80068c6:	623b      	str	r3, [r7, #32]
 80068c8:	e007      	b.n	80068da <dwin_data+0x2052>
						DISPLAY_INPUT[a] = 0x00;
 80068ca:	4a26      	ldr	r2, [pc, #152]	@ (8006964 <dwin_data+0x20dc>)
 80068cc:	6a3b      	ldr	r3, [r7, #32]
 80068ce:	4413      	add	r3, r2
 80068d0:	2200      	movs	r2, #0
 80068d2:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 80068d4:	6a3b      	ldr	r3, [r7, #32]
 80068d6:	3301      	adds	r3, #1
 80068d8:	623b      	str	r3, [r7, #32]
 80068da:	6a3b      	ldr	r3, [r7, #32]
 80068dc:	2b08      	cmp	r3, #8
 80068de:	ddf4      	ble.n	80068ca <dwin_data+0x2042>
 80068e0:	e08c      	b.n	80069fc <dwin_data+0x2174>
				}
			}
		}else if (PS_flag == 1) {
 80068e2:	4b25      	ldr	r3, [pc, #148]	@ (8006978 <dwin_data+0x20f0>)
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	f000 8088 	beq.w	80069fc <dwin_data+0x2174>
			if (((DISPLAY_INPUT[5] == 0xA2) && (DISPLAY_INPUT[8] == 0x01))) {
 80068ec:	4b1d      	ldr	r3, [pc, #116]	@ (8006964 <dwin_data+0x20dc>)
 80068ee:	795b      	ldrb	r3, [r3, #5]
 80068f0:	2ba2      	cmp	r3, #162	@ 0xa2
 80068f2:	d14b      	bne.n	800698c <dwin_data+0x2104>
 80068f4:	4b1b      	ldr	r3, [pc, #108]	@ (8006964 <dwin_data+0x20dc>)
 80068f6:	7a1b      	ldrb	r3, [r3, #8]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d147      	bne.n	800698c <dwin_data+0x2104>
				if (PS_value == 60) {
 80068fc:	4b1f      	ldr	r3, [pc, #124]	@ (800697c <dwin_data+0x20f4>)
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	2b3c      	cmp	r3, #60	@ 0x3c
 8006902:	d104      	bne.n	800690e <dwin_data+0x2086>
					PS_value = PS_value;
 8006904:	4b1d      	ldr	r3, [pc, #116]	@ (800697c <dwin_data+0x20f4>)
 8006906:	781a      	ldrb	r2, [r3, #0]
 8006908:	4b1c      	ldr	r3, [pc, #112]	@ (800697c <dwin_data+0x20f4>)
 800690a:	701a      	strb	r2, [r3, #0]
				if (PS_value == 60) {
 800690c:	e076      	b.n	80069fc <dwin_data+0x2174>
				} else {
					Value_reset_flag = 0;
 800690e:	4b1c      	ldr	r3, [pc, #112]	@ (8006980 <dwin_data+0x20f8>)
 8006910:	2200      	movs	r2, #0
 8006912:	701a      	strb	r2, [r3, #0]
					PS_value_reset_flag = 1;
 8006914:	4b1b      	ldr	r3, [pc, #108]	@ (8006984 <dwin_data+0x20fc>)
 8006916:	2201      	movs	r2, #1
 8006918:	701a      	strb	r2, [r3, #0]
					osTimerStart(Touch_value_resetHandle, 5000);
 800691a:	4b1b      	ldr	r3, [pc, #108]	@ (8006988 <dwin_data+0x2100>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8006922:	4618      	mov	r0, r3
 8006924:	f009 fd92 	bl	801044c <osTimerStart>
					PS_value += 1;
 8006928:	4b14      	ldr	r3, [pc, #80]	@ (800697c <dwin_data+0x20f4>)
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	3301      	adds	r3, #1
 800692e:	b2da      	uxtb	r2, r3
 8006930:	4b12      	ldr	r3, [pc, #72]	@ (800697c <dwin_data+0x20f4>)
 8006932:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x09, PS_value);
 8006934:	4b11      	ldr	r3, [pc, #68]	@ (800697c <dwin_data+0x20f4>)
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	4619      	mov	r1, r3
 800693a:	2009      	movs	r0, #9
 800693c:	f7fb fcc2 	bl	80022c4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 8006940:	2300      	movs	r3, #0
 8006942:	61fb      	str	r3, [r7, #28]
 8006944:	e007      	b.n	8006956 <dwin_data+0x20ce>
						DISPLAY_INPUT[a] = 0x00;
 8006946:	4a07      	ldr	r2, [pc, #28]	@ (8006964 <dwin_data+0x20dc>)
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	4413      	add	r3, r2
 800694c:	2200      	movs	r2, #0
 800694e:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	3301      	adds	r3, #1
 8006954:	61fb      	str	r3, [r7, #28]
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	2b08      	cmp	r3, #8
 800695a:	ddf4      	ble.n	8006946 <dwin_data+0x20be>
				if (PS_value == 60) {
 800695c:	e04e      	b.n	80069fc <dwin_data+0x2174>
 800695e:	bf00      	nop
 8006960:	2000003e 	.word	0x2000003e
 8006964:	20001584 	.word	0x20001584
 8006968:	20001600 	.word	0x20001600
 800696c:	20000044 	.word	0x20000044
 8006970:	200015fb 	.word	0x200015fb
 8006974:	2000003f 	.word	0x2000003f
 8006978:	200015d1 	.word	0x200015d1
 800697c:	200015b1 	.word	0x200015b1
 8006980:	200015c1 	.word	0x200015c1
 8006984:	200015da 	.word	0x200015da
 8006988:	20001134 	.word	0x20001134
				}
			} else if ((DISPLAY_INPUT[5] == 0xA3)
 800698c:	4b9a      	ldr	r3, [pc, #616]	@ (8006bf8 <dwin_data+0x2370>)
 800698e:	795b      	ldrb	r3, [r3, #5]
 8006990:	2ba3      	cmp	r3, #163	@ 0xa3
 8006992:	d133      	bne.n	80069fc <dwin_data+0x2174>
					&& (DISPLAY_INPUT[8] == 0x01)) {
 8006994:	4b98      	ldr	r3, [pc, #608]	@ (8006bf8 <dwin_data+0x2370>)
 8006996:	7a1b      	ldrb	r3, [r3, #8]
 8006998:	2b01      	cmp	r3, #1
 800699a:	d12f      	bne.n	80069fc <dwin_data+0x2174>
				if (PS_value == 5) {
 800699c:	4b97      	ldr	r3, [pc, #604]	@ (8006bfc <dwin_data+0x2374>)
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	2b05      	cmp	r3, #5
 80069a2:	d104      	bne.n	80069ae <dwin_data+0x2126>
					PS_value = PS_value;
 80069a4:	4b95      	ldr	r3, [pc, #596]	@ (8006bfc <dwin_data+0x2374>)
 80069a6:	781a      	ldrb	r2, [r3, #0]
 80069a8:	4b94      	ldr	r3, [pc, #592]	@ (8006bfc <dwin_data+0x2374>)
 80069aa:	701a      	strb	r2, [r3, #0]
 80069ac:	e026      	b.n	80069fc <dwin_data+0x2174>
				} else {
					Value_reset_flag = 0;
 80069ae:	4b94      	ldr	r3, [pc, #592]	@ (8006c00 <dwin_data+0x2378>)
 80069b0:	2200      	movs	r2, #0
 80069b2:	701a      	strb	r2, [r3, #0]
					PS_value_reset_flag = 1;
 80069b4:	4b93      	ldr	r3, [pc, #588]	@ (8006c04 <dwin_data+0x237c>)
 80069b6:	2201      	movs	r2, #1
 80069b8:	701a      	strb	r2, [r3, #0]
					osTimerStart(Touch_value_resetHandle, 5000);
 80069ba:	4b93      	ldr	r3, [pc, #588]	@ (8006c08 <dwin_data+0x2380>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f241 3188 	movw	r1, #5000	@ 0x1388
 80069c2:	4618      	mov	r0, r3
 80069c4:	f009 fd42 	bl	801044c <osTimerStart>
					PS_value -= 1;
 80069c8:	4b8c      	ldr	r3, [pc, #560]	@ (8006bfc <dwin_data+0x2374>)
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	3b01      	subs	r3, #1
 80069ce:	b2da      	uxtb	r2, r3
 80069d0:	4b8a      	ldr	r3, [pc, #552]	@ (8006bfc <dwin_data+0x2374>)
 80069d2:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x09, PS_value);
 80069d4:	4b89      	ldr	r3, [pc, #548]	@ (8006bfc <dwin_data+0x2374>)
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	4619      	mov	r1, r3
 80069da:	2009      	movs	r0, #9
 80069dc:	f7fb fc72 	bl	80022c4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 80069e0:	2300      	movs	r3, #0
 80069e2:	61bb      	str	r3, [r7, #24]
 80069e4:	e007      	b.n	80069f6 <dwin_data+0x216e>
						DISPLAY_INPUT[a] = 0x00;
 80069e6:	4a84      	ldr	r2, [pc, #528]	@ (8006bf8 <dwin_data+0x2370>)
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	4413      	add	r3, r2
 80069ec:	2200      	movs	r2, #0
 80069ee:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	3301      	adds	r3, #1
 80069f4:	61bb      	str	r3, [r7, #24]
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	2b08      	cmp	r3, #8
 80069fa:	ddf4      	ble.n	80069e6 <dwin_data+0x215e>
				}
			}
		}

		if(DISPLAY_INPUT[5] == 0xCD){
 80069fc:	4b7e      	ldr	r3, [pc, #504]	@ (8006bf8 <dwin_data+0x2370>)
 80069fe:	795b      	ldrb	r3, [r3, #5]
 8006a00:	2bcd      	cmp	r3, #205	@ 0xcd
 8006a02:	d105      	bne.n	8006a10 <dwin_data+0x2188>
			osDelay(30);
 8006a04:	201e      	movs	r0, #30
 8006a06:	f009 fcd8 	bl	80103ba <osDelay>
			O2_flag = 1;
 8006a0a:	4b80      	ldr	r3, [pc, #512]	@ (8006c0c <dwin_data+0x2384>)
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	701a      	strb	r2, [r3, #0]
		}
		if(O2_flag == 1){
 8006a10:	4b7e      	ldr	r3, [pc, #504]	@ (8006c0c <dwin_data+0x2384>)
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d003      	beq.n	8006a20 <dwin_data+0x2198>
			O2_Sensor(0x00);
 8006a18:	2000      	movs	r0, #0
 8006a1a:	f7fc fa79 	bl	8002f10 <O2_Sensor>
 8006a1e:	e00f      	b.n	8006a40 <dwin_data+0x21b8>
		}
		else if (O2_flag == 0){
 8006a20:	4b7a      	ldr	r3, [pc, #488]	@ (8006c0c <dwin_data+0x2384>)
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	f083 0301 	eor.w	r3, r3, #1
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d008      	beq.n	8006a40 <dwin_data+0x21b8>
			MCP3551_ReadData();
 8006a2e:	f7fd fa19 	bl	8003e64 <MCP3551_ReadData>
			convert_ADC_to_Percentage(adcValue);
 8006a32:	4b77      	ldr	r3, [pc, #476]	@ (8006c10 <dwin_data+0x2388>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7fd fabe 	bl	8003fb8 <convert_ADC_to_Percentage>
			oxy_per();
 8006a3c:	f7fd fa5e 	bl	8003efc <oxy_per>
		}
		if(DISPLAY_INPUT[5] == 0xCC){
 8006a40:	4b6d      	ldr	r3, [pc, #436]	@ (8006bf8 <dwin_data+0x2370>)
 8006a42:	795b      	ldrb	r3, [r3, #5]
 8006a44:	2bcc      	cmp	r3, #204	@ 0xcc
 8006a46:	d105      	bne.n	8006a54 <dwin_data+0x21cc>
			osDelay(30);
 8006a48:	201e      	movs	r0, #30
 8006a4a:	f009 fcb6 	bl	80103ba <osDelay>
			O2_flag = 0;
 8006a4e:	4b6f      	ldr	r3, [pc, #444]	@ (8006c0c <dwin_data+0x2384>)
 8006a50:	2200      	movs	r2, #0
 8006a52:	701a      	strb	r2, [r3, #0]
		}

		//play pause icon change
		if (((DISPLAY_INPUT[0] == 0x5A) && (DISPLAY_INPUT[1] == 0xA5)
 8006a54:	4b68      	ldr	r3, [pc, #416]	@ (8006bf8 <dwin_data+0x2370>)
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	2b5a      	cmp	r3, #90	@ 0x5a
 8006a5a:	d122      	bne.n	8006aa2 <dwin_data+0x221a>
 8006a5c:	4b66      	ldr	r3, [pc, #408]	@ (8006bf8 <dwin_data+0x2370>)
 8006a5e:	785b      	ldrb	r3, [r3, #1]
 8006a60:	2ba5      	cmp	r3, #165	@ 0xa5
 8006a62:	d11e      	bne.n	8006aa2 <dwin_data+0x221a>
				&& (DISPLAY_INPUT[2] == 0x06) && (DISPLAY_INPUT[3] == 0x83)
 8006a64:	4b64      	ldr	r3, [pc, #400]	@ (8006bf8 <dwin_data+0x2370>)
 8006a66:	789b      	ldrb	r3, [r3, #2]
 8006a68:	2b06      	cmp	r3, #6
 8006a6a:	d11a      	bne.n	8006aa2 <dwin_data+0x221a>
 8006a6c:	4b62      	ldr	r3, [pc, #392]	@ (8006bf8 <dwin_data+0x2370>)
 8006a6e:	78db      	ldrb	r3, [r3, #3]
 8006a70:	2b83      	cmp	r3, #131	@ 0x83
 8006a72:	d116      	bne.n	8006aa2 <dwin_data+0x221a>
				&& (DISPLAY_INPUT[5] == 0x35))) {
 8006a74:	4b60      	ldr	r3, [pc, #384]	@ (8006bf8 <dwin_data+0x2370>)
 8006a76:	795b      	ldrb	r3, [r3, #5]
 8006a78:	2b35      	cmp	r3, #53	@ 0x35
 8006a7a:	d112      	bne.n	8006aa2 <dwin_data+0x221a>
			if (DISPLAY_INPUT[8] == 0x6A){
 8006a7c:	4b5e      	ldr	r3, [pc, #376]	@ (8006bf8 <dwin_data+0x2370>)
 8006a7e:	7a1b      	ldrb	r3, [r3, #8]
 8006a80:	2b6a      	cmp	r3, #106	@ 0x6a
 8006a82:	d103      	bne.n	8006a8c <dwin_data+0x2204>
				play_icon_change(0x6A);
 8006a84:	206a      	movs	r0, #106	@ 0x6a
 8006a86:	f7fc fac9 	bl	800301c <play_icon_change>
 8006a8a:	e00a      	b.n	8006aa2 <dwin_data+0x221a>
			} else if(DISPLAY_INPUT[8] == 0x69){
 8006a8c:	4b5a      	ldr	r3, [pc, #360]	@ (8006bf8 <dwin_data+0x2370>)
 8006a8e:	7a1b      	ldrb	r3, [r3, #8]
 8006a90:	2b69      	cmp	r3, #105	@ 0x69
 8006a92:	d103      	bne.n	8006a9c <dwin_data+0x2214>
				play_icon_change(0x69);
 8006a94:	2069      	movs	r0, #105	@ 0x69
 8006a96:	f7fc fac1 	bl	800301c <play_icon_change>
 8006a9a:	e002      	b.n	8006aa2 <dwin_data+0x221a>
			}
			else{
				play_icon_change(0x6A);
 8006a9c:	206a      	movs	r0, #106	@ 0x6a
 8006a9e:	f7fc fabd 	bl	800301c <play_icon_change>
			}
		}
		//  mode selection
		if (DISPLAY_INPUT[5] == 0XB3){
 8006aa2:	4b55      	ldr	r3, [pc, #340]	@ (8006bf8 <dwin_data+0x2370>)
 8006aa4:	795b      	ldrb	r3, [r3, #5]
 8006aa6:	2bb3      	cmp	r3, #179	@ 0xb3
 8006aa8:	d10c      	bne.n	8006ac4 <dwin_data+0x223c>
			osDelay(50);
 8006aaa:	2032      	movs	r0, #50	@ 0x32
 8006aac:	f009 fc85 	bl	80103ba <osDelay>
			mode_select_number = 0X01;
 8006ab0:	4b58      	ldr	r3, [pc, #352]	@ (8006c14 <dwin_data+0x238c>)
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	701a      	strb	r2, [r3, #0]
			modes_icon_change(0x3B);
 8006ab6:	203b      	movs	r0, #59	@ 0x3b
 8006ab8:	f7fc f994 	bl	8002de4 <modes_icon_change>
			play_icon_change(0x69);
 8006abc:	2069      	movs	r0, #105	@ 0x69
 8006abe:	f7fc faad 	bl	800301c <play_icon_change>
 8006ac2:	e071      	b.n	8006ba8 <dwin_data+0x2320>
		}
		else if (DISPLAY_INPUT[5] == 0XB4){
 8006ac4:	4b4c      	ldr	r3, [pc, #304]	@ (8006bf8 <dwin_data+0x2370>)
 8006ac6:	795b      	ldrb	r3, [r3, #5]
 8006ac8:	2bb4      	cmp	r3, #180	@ 0xb4
 8006aca:	d112      	bne.n	8006af2 <dwin_data+0x226a>
			osDelay(50);
 8006acc:	2032      	movs	r0, #50	@ 0x32
 8006ace:	f009 fc74 	bl	80103ba <osDelay>
			mode_select_number = 0X02;
 8006ad2:	4b50      	ldr	r3, [pc, #320]	@ (8006c14 <dwin_data+0x238c>)
 8006ad4:	2202      	movs	r2, #2
 8006ad6:	701a      	strb	r2, [r3, #0]
			modes_icon_change(0x3C);
 8006ad8:	203c      	movs	r0, #60	@ 0x3c
 8006ada:	f7fc f983 	bl	8002de4 <modes_icon_change>
			play_icon_change(0x69);
 8006ade:	2069      	movs	r0, #105	@ 0x69
 8006ae0:	f7fc fa9c 	bl	800301c <play_icon_change>
			STAND_BY = 1;
 8006ae4:	4b4c      	ldr	r3, [pc, #304]	@ (8006c18 <dwin_data+0x2390>)
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	701a      	strb	r2, [r3, #0]
			VCV_FLAG = 0;
 8006aea:	4b4c      	ldr	r3, [pc, #304]	@ (8006c1c <dwin_data+0x2394>)
 8006aec:	2200      	movs	r2, #0
 8006aee:	701a      	strb	r2, [r3, #0]
 8006af0:	e05a      	b.n	8006ba8 <dwin_data+0x2320>
		}
		else if (DISPLAY_INPUT[5] == 0XB5){
 8006af2:	4b41      	ldr	r3, [pc, #260]	@ (8006bf8 <dwin_data+0x2370>)
 8006af4:	795b      	ldrb	r3, [r3, #5]
 8006af6:	2bb5      	cmp	r3, #181	@ 0xb5
 8006af8:	d112      	bne.n	8006b20 <dwin_data+0x2298>
			osDelay(50);
 8006afa:	2032      	movs	r0, #50	@ 0x32
 8006afc:	f009 fc5d 	bl	80103ba <osDelay>
			mode_select_number = 0X03;
 8006b00:	4b44      	ldr	r3, [pc, #272]	@ (8006c14 <dwin_data+0x238c>)
 8006b02:	2203      	movs	r2, #3
 8006b04:	701a      	strb	r2, [r3, #0]
			modes_icon_change(0x3D);
 8006b06:	203d      	movs	r0, #61	@ 0x3d
 8006b08:	f7fc f96c 	bl	8002de4 <modes_icon_change>
			play_icon_change(0x69);
 8006b0c:	2069      	movs	r0, #105	@ 0x69
 8006b0e:	f7fc fa85 	bl	800301c <play_icon_change>
			STAND_BY = 1;
 8006b12:	4b41      	ldr	r3, [pc, #260]	@ (8006c18 <dwin_data+0x2390>)
 8006b14:	2201      	movs	r2, #1
 8006b16:	701a      	strb	r2, [r3, #0]
			PCV_FLAG = 0;
 8006b18:	4b41      	ldr	r3, [pc, #260]	@ (8006c20 <dwin_data+0x2398>)
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	701a      	strb	r2, [r3, #0]
 8006b1e:	e043      	b.n	8006ba8 <dwin_data+0x2320>
		}
		else if (DISPLAY_INPUT[5] == 0XB6){
 8006b20:	4b35      	ldr	r3, [pc, #212]	@ (8006bf8 <dwin_data+0x2370>)
 8006b22:	795b      	ldrb	r3, [r3, #5]
 8006b24:	2bb6      	cmp	r3, #182	@ 0xb6
 8006b26:	d112      	bne.n	8006b4e <dwin_data+0x22c6>
			osDelay(50);
 8006b28:	2032      	movs	r0, #50	@ 0x32
 8006b2a:	f009 fc46 	bl	80103ba <osDelay>
			mode_select_number = 0X04;
 8006b2e:	4b39      	ldr	r3, [pc, #228]	@ (8006c14 <dwin_data+0x238c>)
 8006b30:	2204      	movs	r2, #4
 8006b32:	701a      	strb	r2, [r3, #0]
			modes_icon_change(0x3E);
 8006b34:	203e      	movs	r0, #62	@ 0x3e
 8006b36:	f7fc f955 	bl	8002de4 <modes_icon_change>
			play_icon_change(0x69);
 8006b3a:	2069      	movs	r0, #105	@ 0x69
 8006b3c:	f7fc fa6e 	bl	800301c <play_icon_change>
			STAND_BY = 1;
 8006b40:	4b35      	ldr	r3, [pc, #212]	@ (8006c18 <dwin_data+0x2390>)
 8006b42:	2201      	movs	r2, #1
 8006b44:	701a      	strb	r2, [r3, #0]
			SIMV_FLAG = 0;
 8006b46:	4b37      	ldr	r3, [pc, #220]	@ (8006c24 <dwin_data+0x239c>)
 8006b48:	2200      	movs	r2, #0
 8006b4a:	701a      	strb	r2, [r3, #0]
 8006b4c:	e02c      	b.n	8006ba8 <dwin_data+0x2320>
		}
		else if (DISPLAY_INPUT[5] == 0XB7){
 8006b4e:	4b2a      	ldr	r3, [pc, #168]	@ (8006bf8 <dwin_data+0x2370>)
 8006b50:	795b      	ldrb	r3, [r3, #5]
 8006b52:	2bb7      	cmp	r3, #183	@ 0xb7
 8006b54:	d112      	bne.n	8006b7c <dwin_data+0x22f4>
			osDelay(50);
 8006b56:	2032      	movs	r0, #50	@ 0x32
 8006b58:	f009 fc2f 	bl	80103ba <osDelay>
			mode_select_number = 0X05;
 8006b5c:	4b2d      	ldr	r3, [pc, #180]	@ (8006c14 <dwin_data+0x238c>)
 8006b5e:	2205      	movs	r2, #5
 8006b60:	701a      	strb	r2, [r3, #0]
			modes_icon_change(0x3F);
 8006b62:	203f      	movs	r0, #63	@ 0x3f
 8006b64:	f7fc f93e 	bl	8002de4 <modes_icon_change>
			play_icon_change(0x69);
 8006b68:	2069      	movs	r0, #105	@ 0x69
 8006b6a:	f7fc fa57 	bl	800301c <play_icon_change>
			STAND_BY = 1;
 8006b6e:	4b2a      	ldr	r3, [pc, #168]	@ (8006c18 <dwin_data+0x2390>)
 8006b70:	2201      	movs	r2, #1
 8006b72:	701a      	strb	r2, [r3, #0]
			PSV_FLAG = 0;
 8006b74:	4b2c      	ldr	r3, [pc, #176]	@ (8006c28 <dwin_data+0x23a0>)
 8006b76:	2200      	movs	r2, #0
 8006b78:	701a      	strb	r2, [r3, #0]
 8006b7a:	e015      	b.n	8006ba8 <dwin_data+0x2320>
		}
		else if (DISPLAY_INPUT[5] == 0XB8){
 8006b7c:	4b1e      	ldr	r3, [pc, #120]	@ (8006bf8 <dwin_data+0x2370>)
 8006b7e:	795b      	ldrb	r3, [r3, #5]
 8006b80:	2bb8      	cmp	r3, #184	@ 0xb8
 8006b82:	d111      	bne.n	8006ba8 <dwin_data+0x2320>
			osDelay(50);
 8006b84:	2032      	movs	r0, #50	@ 0x32
 8006b86:	f009 fc18 	bl	80103ba <osDelay>
			mode_select_number = 0X06;
 8006b8a:	4b22      	ldr	r3, [pc, #136]	@ (8006c14 <dwin_data+0x238c>)
 8006b8c:	2206      	movs	r2, #6
 8006b8e:	701a      	strb	r2, [r3, #0]
			modes_icon_change(0x40);
 8006b90:	2040      	movs	r0, #64	@ 0x40
 8006b92:	f7fc f927 	bl	8002de4 <modes_icon_change>
			play_icon_change(0x69);
 8006b96:	2069      	movs	r0, #105	@ 0x69
 8006b98:	f7fc fa40 	bl	800301c <play_icon_change>
			STAND_BY = 1;
 8006b9c:	4b1e      	ldr	r3, [pc, #120]	@ (8006c18 <dwin_data+0x2390>)
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	701a      	strb	r2, [r3, #0]
			BAG_FLAG = 0;
 8006ba2:	4b22      	ldr	r3, [pc, #136]	@ (8006c2c <dwin_data+0x23a4>)
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	701a      	strb	r2, [r3, #0]
		}
		if(mode_select_number == 0x01){
 8006ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8006c14 <dwin_data+0x238c>)
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d103      	bne.n	8006bb8 <dwin_data+0x2330>
			modes_icon_change(0x3B);
 8006bb0:	203b      	movs	r0, #59	@ 0x3b
 8006bb2:	f7fc f917 	bl	8002de4 <modes_icon_change>
 8006bb6:	e042      	b.n	8006c3e <dwin_data+0x23b6>
			//			play_icon_change(0x69);
		}
		else if(mode_select_number == 0x02){
 8006bb8:	4b16      	ldr	r3, [pc, #88]	@ (8006c14 <dwin_data+0x238c>)
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d103      	bne.n	8006bc8 <dwin_data+0x2340>
			modes_icon_change(0x3C);
 8006bc0:	203c      	movs	r0, #60	@ 0x3c
 8006bc2:	f7fc f90f 	bl	8002de4 <modes_icon_change>
 8006bc6:	e03a      	b.n	8006c3e <dwin_data+0x23b6>
			//			play_icon_change(0x69);
		}
		else if(mode_select_number == 0x03){
 8006bc8:	4b12      	ldr	r3, [pc, #72]	@ (8006c14 <dwin_data+0x238c>)
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	2b03      	cmp	r3, #3
 8006bce:	d103      	bne.n	8006bd8 <dwin_data+0x2350>
			modes_icon_change(0x3D);
 8006bd0:	203d      	movs	r0, #61	@ 0x3d
 8006bd2:	f7fc f907 	bl	8002de4 <modes_icon_change>
 8006bd6:	e032      	b.n	8006c3e <dwin_data+0x23b6>
			//			play_icon_change(0x69);
		}
		else if(mode_select_number == 0x04){
 8006bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8006c14 <dwin_data+0x238c>)
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	2b04      	cmp	r3, #4
 8006bde:	d103      	bne.n	8006be8 <dwin_data+0x2360>
			modes_icon_change(0x3E);
 8006be0:	203e      	movs	r0, #62	@ 0x3e
 8006be2:	f7fc f8ff 	bl	8002de4 <modes_icon_change>
 8006be6:	e02a      	b.n	8006c3e <dwin_data+0x23b6>
			//			play_icon_change(0x69);
		}
		else if(mode_select_number == 0x05){
 8006be8:	4b0a      	ldr	r3, [pc, #40]	@ (8006c14 <dwin_data+0x238c>)
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	2b05      	cmp	r3, #5
 8006bee:	d11f      	bne.n	8006c30 <dwin_data+0x23a8>
			modes_icon_change(0x3F);
 8006bf0:	203f      	movs	r0, #63	@ 0x3f
 8006bf2:	f7fc f8f7 	bl	8002de4 <modes_icon_change>
 8006bf6:	e022      	b.n	8006c3e <dwin_data+0x23b6>
 8006bf8:	20001584 	.word	0x20001584
 8006bfc:	200015b1 	.word	0x200015b1
 8006c00:	200015c1 	.word	0x200015c1
 8006c04:	200015da 	.word	0x200015da
 8006c08:	20001134 	.word	0x20001134
 8006c0c:	200015d3 	.word	0x200015d3
 8006c10:	200011d0 	.word	0x200011d0
 8006c14:	200015bb 	.word	0x200015bb
 8006c18:	200015b6 	.word	0x200015b6
 8006c1c:	200015b8 	.word	0x200015b8
 8006c20:	200015b9 	.word	0x200015b9
 8006c24:	200015b5 	.word	0x200015b5
 8006c28:	200015b7 	.word	0x200015b7
 8006c2c:	200015ba 	.word	0x200015ba
			//			play_icon_change(0x69);
		}
		else if(mode_select_number == 0x06){
 8006c30:	4b73      	ldr	r3, [pc, #460]	@ (8006e00 <dwin_data+0x2578>)
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	2b06      	cmp	r3, #6
 8006c36:	d102      	bne.n	8006c3e <dwin_data+0x23b6>
			modes_icon_change(0x40);
 8006c38:	2040      	movs	r0, #64	@ 0x40
 8006c3a:	f7fc f8d3 	bl	8002de4 <modes_icon_change>
			//			play_icon_change(0x69);
		}


		if ((DISPLAY_INPUT[0] == 0x5A) && (DISPLAY_INPUT[1] == 0xA5) &&
 8006c3e:	4b71      	ldr	r3, [pc, #452]	@ (8006e04 <dwin_data+0x257c>)
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	2b5a      	cmp	r3, #90	@ 0x5a
 8006c44:	d11a      	bne.n	8006c7c <dwin_data+0x23f4>
 8006c46:	4b6f      	ldr	r3, [pc, #444]	@ (8006e04 <dwin_data+0x257c>)
 8006c48:	785b      	ldrb	r3, [r3, #1]
 8006c4a:	2ba5      	cmp	r3, #165	@ 0xa5
 8006c4c:	d116      	bne.n	8006c7c <dwin_data+0x23f4>
				(DISPLAY_INPUT[2] == 0x06) && (DISPLAY_INPUT[3] == 0x83) &&
 8006c4e:	4b6d      	ldr	r3, [pc, #436]	@ (8006e04 <dwin_data+0x257c>)
 8006c50:	789b      	ldrb	r3, [r3, #2]
		if ((DISPLAY_INPUT[0] == 0x5A) && (DISPLAY_INPUT[1] == 0xA5) &&
 8006c52:	2b06      	cmp	r3, #6
 8006c54:	d112      	bne.n	8006c7c <dwin_data+0x23f4>
				(DISPLAY_INPUT[2] == 0x06) && (DISPLAY_INPUT[3] == 0x83) &&
 8006c56:	4b6b      	ldr	r3, [pc, #428]	@ (8006e04 <dwin_data+0x257c>)
 8006c58:	78db      	ldrb	r3, [r3, #3]
 8006c5a:	2b83      	cmp	r3, #131	@ 0x83
 8006c5c:	d10e      	bne.n	8006c7c <dwin_data+0x23f4>
				(DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0x37) && (DISPLAY_INPUT[8] == 0x4D) ) {
 8006c5e:	4b69      	ldr	r3, [pc, #420]	@ (8006e04 <dwin_data+0x257c>)
 8006c60:	791b      	ldrb	r3, [r3, #4]
				(DISPLAY_INPUT[2] == 0x06) && (DISPLAY_INPUT[3] == 0x83) &&
 8006c62:	2b10      	cmp	r3, #16
 8006c64:	d10a      	bne.n	8006c7c <dwin_data+0x23f4>
				(DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0x37) && (DISPLAY_INPUT[8] == 0x4D) ) {
 8006c66:	4b67      	ldr	r3, [pc, #412]	@ (8006e04 <dwin_data+0x257c>)
 8006c68:	795b      	ldrb	r3, [r3, #5]
 8006c6a:	2b37      	cmp	r3, #55	@ 0x37
 8006c6c:	d106      	bne.n	8006c7c <dwin_data+0x23f4>
 8006c6e:	4b65      	ldr	r3, [pc, #404]	@ (8006e04 <dwin_data+0x257c>)
 8006c70:	7a1b      	ldrb	r3, [r3, #8]
 8006c72:	2b4d      	cmp	r3, #77	@ 0x4d
 8006c74:	d102      	bne.n	8006c7c <dwin_data+0x23f4>
			Head = 1;
 8006c76:	4b64      	ldr	r3, [pc, #400]	@ (8006e08 <dwin_data+0x2580>)
 8006c78:	2201      	movs	r2, #1
 8006c7a:	701a      	strb	r2, [r3, #0]
		}
		if ((DISPLAY_INPUT[0] == 0x5A) && (DISPLAY_INPUT[1] == 0xA5) &&
 8006c7c:	4b61      	ldr	r3, [pc, #388]	@ (8006e04 <dwin_data+0x257c>)
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	2b5a      	cmp	r3, #90	@ 0x5a
 8006c82:	d11a      	bne.n	8006cba <dwin_data+0x2432>
 8006c84:	4b5f      	ldr	r3, [pc, #380]	@ (8006e04 <dwin_data+0x257c>)
 8006c86:	785b      	ldrb	r3, [r3, #1]
 8006c88:	2ba5      	cmp	r3, #165	@ 0xa5
 8006c8a:	d116      	bne.n	8006cba <dwin_data+0x2432>
				(DISPLAY_INPUT[2] == 0x06) && (DISPLAY_INPUT[3] == 0x83) &&
 8006c8c:	4b5d      	ldr	r3, [pc, #372]	@ (8006e04 <dwin_data+0x257c>)
 8006c8e:	789b      	ldrb	r3, [r3, #2]
		if ((DISPLAY_INPUT[0] == 0x5A) && (DISPLAY_INPUT[1] == 0xA5) &&
 8006c90:	2b06      	cmp	r3, #6
 8006c92:	d112      	bne.n	8006cba <dwin_data+0x2432>
				(DISPLAY_INPUT[2] == 0x06) && (DISPLAY_INPUT[3] == 0x83) &&
 8006c94:	4b5b      	ldr	r3, [pc, #364]	@ (8006e04 <dwin_data+0x257c>)
 8006c96:	78db      	ldrb	r3, [r3, #3]
 8006c98:	2b83      	cmp	r3, #131	@ 0x83
 8006c9a:	d10e      	bne.n	8006cba <dwin_data+0x2432>
				(DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0x37) && (DISPLAY_INPUT[8] == 0x4C) ) {
 8006c9c:	4b59      	ldr	r3, [pc, #356]	@ (8006e04 <dwin_data+0x257c>)
 8006c9e:	791b      	ldrb	r3, [r3, #4]
				(DISPLAY_INPUT[2] == 0x06) && (DISPLAY_INPUT[3] == 0x83) &&
 8006ca0:	2b10      	cmp	r3, #16
 8006ca2:	d10a      	bne.n	8006cba <dwin_data+0x2432>
				(DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0x37) && (DISPLAY_INPUT[8] == 0x4C) ) {
 8006ca4:	4b57      	ldr	r3, [pc, #348]	@ (8006e04 <dwin_data+0x257c>)
 8006ca6:	795b      	ldrb	r3, [r3, #5]
 8006ca8:	2b37      	cmp	r3, #55	@ 0x37
 8006caa:	d106      	bne.n	8006cba <dwin_data+0x2432>
 8006cac:	4b55      	ldr	r3, [pc, #340]	@ (8006e04 <dwin_data+0x257c>)
 8006cae:	7a1b      	ldrb	r3, [r3, #8]
 8006cb0:	2b4c      	cmp	r3, #76	@ 0x4c
 8006cb2:	d102      	bne.n	8006cba <dwin_data+0x2432>
			Head = 0;
 8006cb4:	4b54      	ldr	r3, [pc, #336]	@ (8006e08 <dwin_data+0x2580>)
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == GPIO_PIN_RESET){
 8006cba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006cbe:	4853      	ldr	r0, [pc, #332]	@ (8006e0c <dwin_data+0x2584>)
 8006cc0:	f004 ffd0 	bl	800bc64 <HAL_GPIO_ReadPin>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d134      	bne.n	8006d34 <dwin_data+0x24ac>
			//			HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
			//			HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
			//			HAL_PWR_EnterSTANDBYMode();
			//			Enter_Sleep_Mode();
			PCV_FLAG = 0;
 8006cca:	4b51      	ldr	r3, [pc, #324]	@ (8006e10 <dwin_data+0x2588>)
 8006ccc:	2200      	movs	r2, #0
 8006cce:	701a      	strb	r2, [r3, #0]
			VCV_FLAG = 0;
 8006cd0:	4b50      	ldr	r3, [pc, #320]	@ (8006e14 <dwin_data+0x258c>)
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	701a      	strb	r2, [r3, #0]
			PSV_FLAG = 0;
 8006cd6:	4b50      	ldr	r3, [pc, #320]	@ (8006e18 <dwin_data+0x2590>)
 8006cd8:	2200      	movs	r2, #0
 8006cda:	701a      	strb	r2, [r3, #0]
			STAND_BY = 1;
 8006cdc:	4b4f      	ldr	r3, [pc, #316]	@ (8006e1c <dwin_data+0x2594>)
 8006cde:	2201      	movs	r2, #1
 8006ce0:	701a      	strb	r2, [r3, #0]
			SIMV_FLAG = 0;
 8006ce2:	4b4f      	ldr	r3, [pc, #316]	@ (8006e20 <dwin_data+0x2598>)
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	701a      	strb	r2, [r3, #0]
			BAG_FLAG = 0;
 8006ce8:	4b4e      	ldr	r3, [pc, #312]	@ (8006e24 <dwin_data+0x259c>)
 8006cea:	2200      	movs	r2, #0
 8006cec:	701a      	strb	r2, [r3, #0]
			stand_ppr_set_flag = 1;
 8006cee:	4b4e      	ldr	r3, [pc, #312]	@ (8006e28 <dwin_data+0x25a0>)
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	701a      	strb	r2, [r3, #0]
			vTaskSuspend(NotificationHandle);
 8006cf4:	4b4d      	ldr	r3, [pc, #308]	@ (8006e2c <dwin_data+0x25a4>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f00a fc25 	bl	8011548 <vTaskSuspend>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006d04:	484a      	ldr	r0, [pc, #296]	@ (8006e30 <dwin_data+0x25a8>)
 8006d06:	f004 ffc5 	bl	800bc94 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	2102      	movs	r1, #2
 8006d0e:	4848      	ldr	r0, [pc, #288]	@ (8006e30 <dwin_data+0x25a8>)
 8006d10:	f004 ffc0 	bl	800bc94 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8006d14:	4b47      	ldr	r3, [pc, #284]	@ (8006e34 <dwin_data+0x25ac>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006d22:	4845      	ldr	r0, [pc, #276]	@ (8006e38 <dwin_data+0x25b0>)
 8006d24:	f004 ffb6 	bl	800bc94 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8006d28:	2200      	movs	r2, #0
 8006d2a:	2104      	movs	r1, #4
 8006d2c:	4837      	ldr	r0, [pc, #220]	@ (8006e0c <dwin_data+0x2584>)
 8006d2e:	f004 ffb1 	bl	800bc94 <HAL_GPIO_WritePin>
 8006d32:	e01d      	b.n	8006d70 <dwin_data+0x24e8>
			//			buzz_flag = 0;
		}
		else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == GPIO_PIN_SET){
 8006d34:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006d38:	4834      	ldr	r0, [pc, #208]	@ (8006e0c <dwin_data+0x2584>)
 8006d3a:	f004 ff93 	bl	800bc64 <HAL_GPIO_ReadPin>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d115      	bne.n	8006d70 <dwin_data+0x24e8>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8006d44:	2200      	movs	r2, #0
 8006d46:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006d4a:	4839      	ldr	r0, [pc, #228]	@ (8006e30 <dwin_data+0x25a8>)
 8006d4c:	f004 ffa2 	bl	800bc94 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8006d50:	2201      	movs	r2, #1
 8006d52:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006d56:	4838      	ldr	r0, [pc, #224]	@ (8006e38 <dwin_data+0x25b0>)
 8006d58:	f004 ff9c 	bl	800bc94 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	2104      	movs	r1, #4
 8006d60:	482a      	ldr	r0, [pc, #168]	@ (8006e0c <dwin_data+0x2584>)
 8006d62:	f004 ff97 	bl	800bc94 <HAL_GPIO_WritePin>
			vTaskResume(NotificationHandle);
 8006d66:	4b31      	ldr	r3, [pc, #196]	@ (8006e2c <dwin_data+0x25a4>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f00a fcb2 	bl	80116d4 <vTaskResume>

		}
		if ((DISPLAY_INPUT[5] == 0xBC) || (DISPLAY_INPUT[5] == 0xBD) || (DISPLAY_INPUT[5] == 0xBE) || (DISPLAY_INPUT[5] == 0xBF) ||
 8006d70:	4b24      	ldr	r3, [pc, #144]	@ (8006e04 <dwin_data+0x257c>)
 8006d72:	795b      	ldrb	r3, [r3, #5]
 8006d74:	2bbc      	cmp	r3, #188	@ 0xbc
 8006d76:	d017      	beq.n	8006da8 <dwin_data+0x2520>
 8006d78:	4b22      	ldr	r3, [pc, #136]	@ (8006e04 <dwin_data+0x257c>)
 8006d7a:	795b      	ldrb	r3, [r3, #5]
 8006d7c:	2bbd      	cmp	r3, #189	@ 0xbd
 8006d7e:	d013      	beq.n	8006da8 <dwin_data+0x2520>
 8006d80:	4b20      	ldr	r3, [pc, #128]	@ (8006e04 <dwin_data+0x257c>)
 8006d82:	795b      	ldrb	r3, [r3, #5]
 8006d84:	2bbe      	cmp	r3, #190	@ 0xbe
 8006d86:	d00f      	beq.n	8006da8 <dwin_data+0x2520>
 8006d88:	4b1e      	ldr	r3, [pc, #120]	@ (8006e04 <dwin_data+0x257c>)
 8006d8a:	795b      	ldrb	r3, [r3, #5]
 8006d8c:	2bbf      	cmp	r3, #191	@ 0xbf
 8006d8e:	d00b      	beq.n	8006da8 <dwin_data+0x2520>
				(DISPLAY_INPUT[5] == 0xC0) || (DISPLAY_INPUT[5] == 0xC1) || (DISPLAY_INPUT[5] == 0xC8)){
 8006d90:	4b1c      	ldr	r3, [pc, #112]	@ (8006e04 <dwin_data+0x257c>)
 8006d92:	795b      	ldrb	r3, [r3, #5]
		if ((DISPLAY_INPUT[5] == 0xBC) || (DISPLAY_INPUT[5] == 0xBD) || (DISPLAY_INPUT[5] == 0xBE) || (DISPLAY_INPUT[5] == 0xBF) ||
 8006d94:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d96:	d007      	beq.n	8006da8 <dwin_data+0x2520>
				(DISPLAY_INPUT[5] == 0xC0) || (DISPLAY_INPUT[5] == 0xC1) || (DISPLAY_INPUT[5] == 0xC8)){
 8006d98:	4b1a      	ldr	r3, [pc, #104]	@ (8006e04 <dwin_data+0x257c>)
 8006d9a:	795b      	ldrb	r3, [r3, #5]
 8006d9c:	2bc1      	cmp	r3, #193	@ 0xc1
 8006d9e:	d003      	beq.n	8006da8 <dwin_data+0x2520>
 8006da0:	4b18      	ldr	r3, [pc, #96]	@ (8006e04 <dwin_data+0x257c>)
 8006da2:	795b      	ldrb	r3, [r3, #5]
 8006da4:	2bc8      	cmp	r3, #200	@ 0xc8
 8006da6:	d120      	bne.n	8006dea <dwin_data+0x2562>
			osDelay(30);
 8006da8:	201e      	movs	r0, #30
 8006daa:	f009 fb06 	bl	80103ba <osDelay>
			uint8_t clear_graph[8] = { 0x5A, 0xA5, 0x05, 0x82, 0x03, 0x05, 0x00, 0x00 };
 8006dae:	4a23      	ldr	r2, [pc, #140]	@ (8006e3c <dwin_data+0x25b4>)
 8006db0:	f107 0310 	add.w	r3, r7, #16
 8006db4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006db8:	e883 0003 	stmia.w	r3, {r0, r1}
			uint8_t clear_graph2[8] = { 0x5A, 0xA5, 0x05, 0x82, 0x03, 0x0B, 0x00, 0x00 };
 8006dbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dc0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006dc4:	4a1e      	ldr	r2, [pc, #120]	@ (8006e40 <dwin_data+0x25b8>)
 8006dc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006dca:	e883 0003 	stmia.w	r3, {r0, r1}
			HAL_UART_Transmit(&huart1, clear_graph, sizeof(clear_graph),
 8006dce:	f107 0110 	add.w	r1, r7, #16
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	2208      	movs	r2, #8
 8006dd6:	481b      	ldr	r0, [pc, #108]	@ (8006e44 <dwin_data+0x25bc>)
 8006dd8:	f007 ff9c 	bl	800ed14 <HAL_UART_Transmit>
					1);
			HAL_UART_Transmit(&huart1, clear_graph2, sizeof(clear_graph2),
 8006ddc:	f107 0108 	add.w	r1, r7, #8
 8006de0:	2301      	movs	r3, #1
 8006de2:	2208      	movs	r2, #8
 8006de4:	4817      	ldr	r0, [pc, #92]	@ (8006e44 <dwin_data+0x25bc>)
 8006de6:	f007 ff95 	bl	800ed14 <HAL_UART_Transmit>
					1);
		}

		cls_cmd(temp_add);
 8006dea:	4b17      	ldr	r3, [pc, #92]	@ (8006e48 <dwin_data+0x25c0>)
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7fb fae2 	bl	80023b8 <cls_cmd>





		vTaskDelay(pdMS_TO_TICKS(5));
 8006df4:	2005      	movs	r0, #5
 8006df6:	f00a fb71 	bl	80114dc <vTaskDelay>
		if(Data_Flag_Pressure == 9){
 8006dfa:	f7fd bd55 	b.w	80048a8 <dwin_data+0x20>
 8006dfe:	bf00      	nop
 8006e00:	200015bb 	.word	0x200015bb
 8006e04:	20001584 	.word	0x20001584
 8006e08:	200015e6 	.word	0x200015e6
 8006e0c:	40020800 	.word	0x40020800
 8006e10:	200015b9 	.word	0x200015b9
 8006e14:	200015b8 	.word	0x200015b8
 8006e18:	200015b7 	.word	0x200015b7
 8006e1c:	200015b6 	.word	0x200015b6
 8006e20:	200015b5 	.word	0x200015b5
 8006e24:	200015ba 	.word	0x200015ba
 8006e28:	200015c2 	.word	0x200015c2
 8006e2c:	2000111c 	.word	0x2000111c
 8006e30:	40021000 	.word	0x40021000
 8006e34:	20000f78 	.word	0x20000f78
 8006e38:	40020c00 	.word	0x40020c00
 8006e3c:	080141a0 	.word	0x080141a0
 8006e40:	080141a8 	.word	0x080141a8
 8006e44:	20000fc0 	.word	0x20000fc0
 8006e48:	2000159d 	.word	0x2000159d
 8006e4c:	00000000 	.word	0x00000000

08006e50 <sensor_one>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_sensor_one */
void sensor_one(void const * argument)
{
 8006e50:	b5b0      	push	{r4, r5, r7, lr}
 8006e52:	b088      	sub	sp, #32
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]

		////.......oxygen_sensor..............
		//		MCP3551_ReadData();
		//		convert_ADC_to_Percentage(adcValue);
		//		oxy_per();
		uint8_t sensor_data_counter = 0;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	77fb      	strb	r3, [r7, #31]
		for(int a = 0; a < 24; a++){
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	61bb      	str	r3, [r7, #24]
 8006e60:	e01d      	b.n	8006e9e <sensor_one+0x4e>
			if(sensor_data[a] == 0x11){
 8006e62:	4a6f      	ldr	r2, [pc, #444]	@ (8007020 <sensor_one+0x1d0>)
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	4413      	add	r3, r2
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	2b11      	cmp	r3, #17
 8006e6c:	d114      	bne.n	8006e98 <sensor_one+0x48>
				for(int b = a; b < (a+ 12); b++){
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	617b      	str	r3, [r7, #20]
 8006e72:	e00c      	b.n	8006e8e <sensor_one+0x3e>
					final_sensor_data[sensor_data_counter] = sensor_data[b];
 8006e74:	7ffb      	ldrb	r3, [r7, #31]
 8006e76:	496a      	ldr	r1, [pc, #424]	@ (8007020 <sensor_one+0x1d0>)
 8006e78:	697a      	ldr	r2, [r7, #20]
 8006e7a:	440a      	add	r2, r1
 8006e7c:	7811      	ldrb	r1, [r2, #0]
 8006e7e:	4a69      	ldr	r2, [pc, #420]	@ (8007024 <sensor_one+0x1d4>)
 8006e80:	54d1      	strb	r1, [r2, r3]
					sensor_data_counter++;
 8006e82:	7ffb      	ldrb	r3, [r7, #31]
 8006e84:	3301      	adds	r3, #1
 8006e86:	77fb      	strb	r3, [r7, #31]
				for(int b = a; b < (a+ 12); b++){
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	617b      	str	r3, [r7, #20]
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	330b      	adds	r3, #11
 8006e92:	697a      	ldr	r2, [r7, #20]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	dded      	ble.n	8006e74 <sensor_one+0x24>
		for(int a = 0; a < 24; a++){
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	61bb      	str	r3, [r7, #24]
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	2b17      	cmp	r3, #23
 8006ea2:	ddde      	ble.n	8006e62 <sensor_one+0x12>
				}
			}
		}
		pressure_adc = (((final_sensor_data[3] << 8)) | final_sensor_data[4]);
 8006ea4:	4b5f      	ldr	r3, [pc, #380]	@ (8007024 <sensor_one+0x1d4>)
 8006ea6:	78db      	ldrb	r3, [r3, #3]
 8006ea8:	b21b      	sxth	r3, r3
 8006eaa:	021b      	lsls	r3, r3, #8
 8006eac:	b21a      	sxth	r2, r3
 8006eae:	4b5d      	ldr	r3, [pc, #372]	@ (8007024 <sensor_one+0x1d4>)
 8006eb0:	791b      	ldrb	r3, [r3, #4]
 8006eb2:	b21b      	sxth	r3, r3
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	b21b      	sxth	r3, r3
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	4b5b      	ldr	r3, [pc, #364]	@ (8007028 <sensor_one+0x1d8>)
 8006ebc:	801a      	strh	r2, [r3, #0]
		//		pressure_adc = ((final_sensor_data[3] << 8));
		pressure_data = ((pressure_adc - DigoutP_Min)/Sensp) - 1.496;
 8006ebe:	4b5a      	ldr	r3, [pc, #360]	@ (8007028 <sensor_one+0x1d8>)
 8006ec0:	881b      	ldrh	r3, [r3, #0]
 8006ec2:	f6a3 43cd 	subw	r3, r3, #3277	@ 0xccd
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f7f9 fb24 	bl	8000514 <__aeabi_i2d>
 8006ecc:	a34e      	add	r3, pc, #312	@ (adr r3, 8007008 <sensor_one+0x1b8>)
 8006ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed2:	f7f9 fcb3 	bl	800083c <__aeabi_ddiv>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	460b      	mov	r3, r1
 8006eda:	4610      	mov	r0, r2
 8006edc:	4619      	mov	r1, r3
 8006ede:	a34c      	add	r3, pc, #304	@ (adr r3, 8007010 <sensor_one+0x1c0>)
 8006ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee4:	f7f9 f9c8 	bl	8000278 <__aeabi_dsub>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	460b      	mov	r3, r1
 8006eec:	4610      	mov	r0, r2
 8006eee:	4619      	mov	r1, r3
 8006ef0:	f7f9 fe72 	bl	8000bd8 <__aeabi_d2f>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	4a4d      	ldr	r2, [pc, #308]	@ (800702c <sensor_one+0x1dc>)
 8006ef8:	6013      	str	r3, [r2, #0]
		mbar = pressure_data * 70.307;
 8006efa:	4b4c      	ldr	r3, [pc, #304]	@ (800702c <sensor_one+0x1dc>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7f9 fb1a 	bl	8000538 <__aeabi_f2d>
 8006f04:	a344      	add	r3, pc, #272	@ (adr r3, 8007018 <sensor_one+0x1c8>)
 8006f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0a:	f7f9 fb6d 	bl	80005e8 <__aeabi_dmul>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	460b      	mov	r3, r1
 8006f12:	4610      	mov	r0, r2
 8006f14:	4619      	mov	r1, r3
 8006f16:	f7f9 fe5f 	bl	8000bd8 <__aeabi_d2f>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	4a44      	ldr	r2, [pc, #272]	@ (8007030 <sensor_one+0x1e0>)
 8006f1e:	6013      	str	r3, [r2, #0]
		pressure = mbar;
 8006f20:	4b43      	ldr	r3, [pc, #268]	@ (8007030 <sensor_one+0x1e0>)
 8006f22:	edd3 7a00 	vldr	s15, [r3]
 8006f26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f2a:	ee17 2a90 	vmov	r2, s15
 8006f2e:	4b41      	ldr	r3, [pc, #260]	@ (8007034 <sensor_one+0x1e4>)
 8006f30:	601a      	str	r2, [r3, #0]

		sprintf(pressure_string, "%X", pressure);
 8006f32:	4b40      	ldr	r3, [pc, #256]	@ (8007034 <sensor_one+0x1e4>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	461a      	mov	r2, r3
 8006f38:	493f      	ldr	r1, [pc, #252]	@ (8007038 <sensor_one+0x1e8>)
 8006f3a:	4840      	ldr	r0, [pc, #256]	@ (800703c <sensor_one+0x1ec>)
 8006f3c:	f00c faf6 	bl	801352c <siprintf>
		sprintf("hex %s", pressure_string);
 8006f40:	493e      	ldr	r1, [pc, #248]	@ (800703c <sensor_one+0x1ec>)
 8006f42:	483f      	ldr	r0, [pc, #252]	@ (8007040 <sensor_one+0x1f0>)
 8006f44:	f00c faf2 	bl	801352c <siprintf>
		strtohex[0] = pressure_string[0];
 8006f48:	4b3c      	ldr	r3, [pc, #240]	@ (800703c <sensor_one+0x1ec>)
 8006f4a:	781a      	ldrb	r2, [r3, #0]
 8006f4c:	4b3d      	ldr	r3, [pc, #244]	@ (8007044 <sensor_one+0x1f4>)
 8006f4e:	701a      	strb	r2, [r3, #0]
		strtohex[1] = pressure_string[1];
 8006f50:	4b3a      	ldr	r3, [pc, #232]	@ (800703c <sensor_one+0x1ec>)
 8006f52:	785a      	ldrb	r2, [r3, #1]
 8006f54:	4b3b      	ldr	r3, [pc, #236]	@ (8007044 <sensor_one+0x1f4>)
 8006f56:	705a      	strb	r2, [r3, #1]
		strtohex[2] = '\0';
 8006f58:	4b3a      	ldr	r3, [pc, #232]	@ (8007044 <sensor_one+0x1f4>)
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	709a      	strb	r2, [r3, #2]
		result2 = (uint8_t) strtol(strtohex, NULL, 16);
 8006f5e:	2210      	movs	r2, #16
 8006f60:	2100      	movs	r1, #0
 8006f62:	4838      	ldr	r0, [pc, #224]	@ (8007044 <sensor_one+0x1f4>)
 8006f64:	f00c fad8 	bl	8013518 <strtol>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	b2da      	uxtb	r2, r3
 8006f6c:	4b36      	ldr	r3, [pc, #216]	@ (8007048 <sensor_one+0x1f8>)
 8006f6e:	701a      	strb	r2, [r3, #0]

		if(Peep_control_flag == 1){
 8006f70:	4b36      	ldr	r3, [pc, #216]	@ (800704c <sensor_one+0x1fc>)
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00b      	beq.n	8006f90 <sensor_one+0x140>
			if(PEEP_temp_value == result2){
 8006f78:	4b35      	ldr	r3, [pc, #212]	@ (8007050 <sensor_one+0x200>)
 8006f7a:	781a      	ldrb	r2, [r3, #0]
 8006f7c:	4b32      	ldr	r3, [pc, #200]	@ (8007048 <sensor_one+0x1f8>)
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d105      	bne.n	8006f90 <sensor_one+0x140>
				//				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PIDOut);
				//				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 8006f84:	2201      	movs	r2, #1
 8006f86:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006f8a:	4832      	ldr	r0, [pc, #200]	@ (8007054 <sensor_one+0x204>)
 8006f8c:	f004 fe82 	bl	800bc94 <HAL_GPIO_WritePin>

			}
		}

		if(P_HI<=result2)
 8006f90:	4b31      	ldr	r3, [pc, #196]	@ (8007058 <sensor_one+0x208>)
 8006f92:	781a      	ldrb	r2, [r3, #0]
 8006f94:	4b2c      	ldr	r3, [pc, #176]	@ (8007048 <sensor_one+0x1f8>)
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d804      	bhi.n	8006fa6 <sensor_one+0x156>
		{
			P_HI=result2;
 8006f9c:	4b2a      	ldr	r3, [pc, #168]	@ (8007048 <sensor_one+0x1f8>)
 8006f9e:	781a      	ldrb	r2, [r3, #0]
 8006fa0:	4b2d      	ldr	r3, [pc, #180]	@ (8007058 <sensor_one+0x208>)
 8006fa2:	701a      	strb	r2, [r3, #0]
 8006fa4:	e003      	b.n	8006fae <sensor_one+0x15e>
		}
		else
		{
			P_HI=result2;
 8006fa6:	4b28      	ldr	r3, [pc, #160]	@ (8007048 <sensor_one+0x1f8>)
 8006fa8:	781a      	ldrb	r2, [r3, #0]
 8006faa:	4b2b      	ldr	r3, [pc, #172]	@ (8007058 <sensor_one+0x208>)
 8006fac:	701a      	strb	r2, [r3, #0]
		}

		if(P_HI==255)
 8006fae:	4b2a      	ldr	r3, [pc, #168]	@ (8007058 <sensor_one+0x208>)
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	2bff      	cmp	r3, #255	@ 0xff
 8006fb4:	d102      	bne.n	8006fbc <sensor_one+0x16c>
		{
			P_HI=0;
 8006fb6:	4b28      	ldr	r3, [pc, #160]	@ (8007058 <sensor_one+0x208>)
 8006fb8:	2200      	movs	r2, #0
 8006fba:	701a      	strb	r2, [r3, #0]
		}

		// flow Sensor code
		flow_byts = (final_sensor_data[1] << 8) | final_sensor_data[2];
 8006fbc:	4b19      	ldr	r3, [pc, #100]	@ (8007024 <sensor_one+0x1d4>)
 8006fbe:	785b      	ldrb	r3, [r3, #1]
 8006fc0:	b21b      	sxth	r3, r3
 8006fc2:	021b      	lsls	r3, r3, #8
 8006fc4:	b21a      	sxth	r2, r3
 8006fc6:	4b17      	ldr	r3, [pc, #92]	@ (8007024 <sensor_one+0x1d4>)
 8006fc8:	789b      	ldrb	r3, [r3, #2]
 8006fca:	b21b      	sxth	r3, r3
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	b21b      	sxth	r3, r3
 8006fd0:	b29a      	uxth	r2, r3
 8006fd2:	4b22      	ldr	r3, [pc, #136]	@ (800705c <sensor_one+0x20c>)
 8006fd4:	801a      	strh	r2, [r3, #0]
		if (flow_byts < offset) {
 8006fd6:	4b21      	ldr	r3, [pc, #132]	@ (800705c <sensor_one+0x20c>)
 8006fd8:	881b      	ldrh	r3, [r3, #0]
 8006fda:	461a      	mov	r2, r3
 8006fdc:	4b20      	ldr	r3, [pc, #128]	@ (8007060 <sensor_one+0x210>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	da43      	bge.n	800706c <sensor_one+0x21c>
			data = (offset - flow_byts) / scal_fact; // Array to hold the resulting hexadecimal string
 8006fe4:	4b1e      	ldr	r3, [pc, #120]	@ (8007060 <sensor_one+0x210>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a1c      	ldr	r2, [pc, #112]	@ (800705c <sensor_one+0x20c>)
 8006fea:	8812      	ldrh	r2, [r2, #0]
 8006fec:	1a9a      	subs	r2, r3, r2
 8006fee:	4b1d      	ldr	r3, [pc, #116]	@ (8007064 <sensor_one+0x214>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	fb92 f3f3 	sdiv	r3, r2, r3
 8006ff6:	4a1c      	ldr	r2, [pc, #112]	@ (8007068 <sensor_one+0x218>)
 8006ff8:	6013      	str	r3, [r2, #0]
			data = 100 - data;
 8006ffa:	4b1b      	ldr	r3, [pc, #108]	@ (8007068 <sensor_one+0x218>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8007002:	4a19      	ldr	r2, [pc, #100]	@ (8007068 <sensor_one+0x218>)
 8007004:	6013      	str	r3, [r2, #0]
 8007006:	e046      	b.n	8007096 <sensor_one+0x246>
 8007008:	00000000 	.word	0x00000000
 800700c:	40c11100 	.word	0x40c11100
 8007010:	b22d0e56 	.word	0xb22d0e56
 8007014:	3ff7ef9d 	.word	0x3ff7ef9d
 8007018:	e353f7cf 	.word	0xe353f7cf
 800701c:	405193a5 	.word	0x405193a5
 8007020:	20001178 	.word	0x20001178
 8007024:	20001190 	.word	0x20001190
 8007028:	2000119c 	.word	0x2000119c
 800702c:	200011a4 	.word	0x200011a4
 8007030:	200011ac 	.word	0x200011ac
 8007034:	200011b0 	.word	0x200011b0
 8007038:	08014124 	.word	0x08014124
 800703c:	20001678 	.word	0x20001678
 8007040:	08014128 	.word	0x08014128
 8007044:	2000167c 	.word	0x2000167c
 8007048:	200016e1 	.word	0x200016e1
 800704c:	20001601 	.word	0x20001601
 8007050:	200015b3 	.word	0x200015b3
 8007054:	40021000 	.word	0x40021000
 8007058:	2000156c 	.word	0x2000156c
 800705c:	2000116c 	.word	0x2000116c
 8007060:	20000010 	.word	0x20000010
 8007064:	20000014 	.word	0x20000014
 8007068:	20001170 	.word	0x20001170
		} else {
			data = (flow_byts - offset) / scal_fact;
 800706c:	4b96      	ldr	r3, [pc, #600]	@ (80072c8 <sensor_one+0x478>)
 800706e:	881b      	ldrh	r3, [r3, #0]
 8007070:	461a      	mov	r2, r3
 8007072:	4b96      	ldr	r3, [pc, #600]	@ (80072cc <sensor_one+0x47c>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	1ad2      	subs	r2, r2, r3
 8007078:	4b95      	ldr	r3, [pc, #596]	@ (80072d0 <sensor_one+0x480>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	fb92 f3f3 	sdiv	r3, r2, r3
 8007080:	4a94      	ldr	r2, [pc, #592]	@ (80072d4 <sensor_one+0x484>)
 8007082:	6013      	str	r3, [r2, #0]
			data += 100;
 8007084:	4b93      	ldr	r3, [pc, #588]	@ (80072d4 <sensor_one+0x484>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	3364      	adds	r3, #100	@ 0x64
 800708a:	4a92      	ldr	r2, [pc, #584]	@ (80072d4 <sensor_one+0x484>)
 800708c:	6013      	str	r3, [r2, #0]
			raw_flow_val = data;
 800708e:	4b91      	ldr	r3, [pc, #580]	@ (80072d4 <sensor_one+0x484>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a91      	ldr	r2, [pc, #580]	@ (80072d8 <sensor_one+0x488>)
 8007094:	6013      	str	r3, [r2, #0]
		}
		ppr_flow_data = data;
 8007096:	4b8f      	ldr	r3, [pc, #572]	@ (80072d4 <sensor_one+0x484>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	ee07 3a90 	vmov	s15, r3
 800709e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80070a2:	4b8e      	ldr	r3, [pc, #568]	@ (80072dc <sensor_one+0x48c>)
 80070a4:	edc3 7a00 	vstr	s15, [r3]
		flow_adc = ((final_sensor_data[5] << 8) | final_sensor_data[6]);
 80070a8:	4b8d      	ldr	r3, [pc, #564]	@ (80072e0 <sensor_one+0x490>)
 80070aa:	795b      	ldrb	r3, [r3, #5]
 80070ac:	b21b      	sxth	r3, r3
 80070ae:	021b      	lsls	r3, r3, #8
 80070b0:	b21a      	sxth	r2, r3
 80070b2:	4b8b      	ldr	r3, [pc, #556]	@ (80072e0 <sensor_one+0x490>)
 80070b4:	799b      	ldrb	r3, [r3, #6]
 80070b6:	b21b      	sxth	r3, r3
 80070b8:	4313      	orrs	r3, r2
 80070ba:	b21b      	sxth	r3, r3
 80070bc:	b29a      	uxth	r2, r3
 80070be:	4b89      	ldr	r3, [pc, #548]	@ (80072e4 <sensor_one+0x494>)
 80070c0:	801a      	strh	r2, [r3, #0]
		flow_data = ((pressure_adc - DigoutP_Min)/Sensp) - 1.463;
 80070c2:	4b89      	ldr	r3, [pc, #548]	@ (80072e8 <sensor_one+0x498>)
 80070c4:	881b      	ldrh	r3, [r3, #0]
 80070c6:	f6a3 43cd 	subw	r3, r3, #3277	@ 0xccd
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7f9 fa22 	bl	8000514 <__aeabi_i2d>
 80070d0:	a36f      	add	r3, pc, #444	@ (adr r3, 8007290 <sensor_one+0x440>)
 80070d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d6:	f7f9 fbb1 	bl	800083c <__aeabi_ddiv>
 80070da:	4602      	mov	r2, r0
 80070dc:	460b      	mov	r3, r1
 80070de:	4610      	mov	r0, r2
 80070e0:	4619      	mov	r1, r3
 80070e2:	a36d      	add	r3, pc, #436	@ (adr r3, 8007298 <sensor_one+0x448>)
 80070e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e8:	f7f9 f8c6 	bl	8000278 <__aeabi_dsub>
 80070ec:	4602      	mov	r2, r0
 80070ee:	460b      	mov	r3, r1
 80070f0:	4610      	mov	r0, r2
 80070f2:	4619      	mov	r1, r3
 80070f4:	f7f9 fd70 	bl	8000bd8 <__aeabi_d2f>
 80070f8:	4603      	mov	r3, r0
 80070fa:	4a7c      	ldr	r2, [pc, #496]	@ (80072ec <sensor_one+0x49c>)
 80070fc:	6013      	str	r3, [r2, #0]
		float flow = flow_data * 68.9476;
 80070fe:	4b7b      	ldr	r3, [pc, #492]	@ (80072ec <sensor_one+0x49c>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4618      	mov	r0, r3
 8007104:	f7f9 fa18 	bl	8000538 <__aeabi_f2d>
 8007108:	a365      	add	r3, pc, #404	@ (adr r3, 80072a0 <sensor_one+0x450>)
 800710a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800710e:	f7f9 fa6b 	bl	80005e8 <__aeabi_dmul>
 8007112:	4602      	mov	r2, r0
 8007114:	460b      	mov	r3, r1
 8007116:	4610      	mov	r0, r2
 8007118:	4619      	mov	r1, r3
 800711a:	f7f9 fd5d 	bl	8000bd8 <__aeabi_d2f>
 800711e:	4603      	mov	r3, r0
 8007120:	60fb      	str	r3, [r7, #12]
		update_mbar_history(flow);  // Smooth the value
 8007122:	ed97 0a03 	vldr	s0, [r7, #12]
 8007126:	f7fb ff2f 	bl	8002f88 <update_mbar_history>
		p_flow = (int)mbar2_smooth;
 800712a:	4b71      	ldr	r3, [pc, #452]	@ (80072f0 <sensor_one+0x4a0>)
 800712c:	edd3 7a00 	vldr	s15, [r3]
 8007130:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007134:	ee17 2a90 	vmov	r2, s15
 8007138:	4b6e      	ldr	r3, [pc, #440]	@ (80072f4 <sensor_one+0x4a4>)
 800713a:	601a      	str	r2, [r3, #0]

		//		update_mbar_history(flow);  // Smooth the value

		//		        pressure_graph2 = (int)mbar2_smooth;

		if (VT_UPDATE_FLAG == 1){
 800713c:	4b6e      	ldr	r3, [pc, #440]	@ (80072f8 <sensor_one+0x4a8>)
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	2b00      	cmp	r3, #0
 8007142:	f000 80e9 	beq.w	8007318 <sensor_one+0x4c8>
			//			xy =((((0.016)*p_flow * p_flow))+((0.30)*p_flow) + 99.6);
			xy = 0.0005 * PIDOut * sqrt(2 * p_flow * 1000 / 1.2);
 8007146:	4b6d      	ldr	r3, [pc, #436]	@ (80072fc <sensor_one+0x4ac>)
 8007148:	e9d3 0100 	ldrd	r0, r1, [r3]
 800714c:	a356      	add	r3, pc, #344	@ (adr r3, 80072a8 <sensor_one+0x458>)
 800714e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007152:	f7f9 fa49 	bl	80005e8 <__aeabi_dmul>
 8007156:	4602      	mov	r2, r0
 8007158:	460b      	mov	r3, r1
 800715a:	4614      	mov	r4, r2
 800715c:	461d      	mov	r5, r3
 800715e:	4b65      	ldr	r3, [pc, #404]	@ (80072f4 <sensor_one+0x4a4>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8007166:	fb02 f303 	mul.w	r3, r2, r3
 800716a:	4618      	mov	r0, r3
 800716c:	f7f9 f9d2 	bl	8000514 <__aeabi_i2d>
 8007170:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8007174:	4b62      	ldr	r3, [pc, #392]	@ (8007300 <sensor_one+0x4b0>)
 8007176:	f7f9 fb61 	bl	800083c <__aeabi_ddiv>
 800717a:	4602      	mov	r2, r0
 800717c:	460b      	mov	r3, r1
 800717e:	ec43 2b17 	vmov	d7, r2, r3
 8007182:	eeb0 0a47 	vmov.f32	s0, s14
 8007186:	eef0 0a67 	vmov.f32	s1, s15
 800718a:	f00c fe1f 	bl	8013dcc <sqrt>
 800718e:	ec53 2b10 	vmov	r2, r3, d0
 8007192:	4620      	mov	r0, r4
 8007194:	4629      	mov	r1, r5
 8007196:	f7f9 fa27 	bl	80005e8 <__aeabi_dmul>
 800719a:	4602      	mov	r2, r0
 800719c:	460b      	mov	r3, r1
 800719e:	4610      	mov	r0, r2
 80071a0:	4619      	mov	r1, r3
 80071a2:	f7f9 fcd1 	bl	8000b48 <__aeabi_d2iz>
 80071a6:	4603      	mov	r3, r0
 80071a8:	4a56      	ldr	r2, [pc, #344]	@ (8007304 <sensor_one+0x4b4>)
 80071aa:	6013      	str	r3, [r2, #0]
			xy = 100 - xy;
 80071ac:	4b55      	ldr	r3, [pc, #340]	@ (8007304 <sensor_one+0x4b4>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80071b4:	4a53      	ldr	r2, [pc, #332]	@ (8007304 <sensor_one+0x4b4>)
 80071b6:	6013      	str	r3, [r2, #0]


			xyz = ((((0.016)*p_flow * p_flow))+((0.30)*p_flow) + 99.6);
 80071b8:	4b4e      	ldr	r3, [pc, #312]	@ (80072f4 <sensor_one+0x4a4>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4618      	mov	r0, r3
 80071be:	f7f9 f9a9 	bl	8000514 <__aeabi_i2d>
 80071c2:	a33b      	add	r3, pc, #236	@ (adr r3, 80072b0 <sensor_one+0x460>)
 80071c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c8:	f7f9 fa0e 	bl	80005e8 <__aeabi_dmul>
 80071cc:	4602      	mov	r2, r0
 80071ce:	460b      	mov	r3, r1
 80071d0:	4614      	mov	r4, r2
 80071d2:	461d      	mov	r5, r3
 80071d4:	4b47      	ldr	r3, [pc, #284]	@ (80072f4 <sensor_one+0x4a4>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4618      	mov	r0, r3
 80071da:	f7f9 f99b 	bl	8000514 <__aeabi_i2d>
 80071de:	4602      	mov	r2, r0
 80071e0:	460b      	mov	r3, r1
 80071e2:	4620      	mov	r0, r4
 80071e4:	4629      	mov	r1, r5
 80071e6:	f7f9 f9ff 	bl	80005e8 <__aeabi_dmul>
 80071ea:	4602      	mov	r2, r0
 80071ec:	460b      	mov	r3, r1
 80071ee:	4614      	mov	r4, r2
 80071f0:	461d      	mov	r5, r3
 80071f2:	4b40      	ldr	r3, [pc, #256]	@ (80072f4 <sensor_one+0x4a4>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7f9 f98c 	bl	8000514 <__aeabi_i2d>
 80071fc:	a32e      	add	r3, pc, #184	@ (adr r3, 80072b8 <sensor_one+0x468>)
 80071fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007202:	f7f9 f9f1 	bl	80005e8 <__aeabi_dmul>
 8007206:	4602      	mov	r2, r0
 8007208:	460b      	mov	r3, r1
 800720a:	4620      	mov	r0, r4
 800720c:	4629      	mov	r1, r5
 800720e:	f7f9 f835 	bl	800027c <__adddf3>
 8007212:	4602      	mov	r2, r0
 8007214:	460b      	mov	r3, r1
 8007216:	4610      	mov	r0, r2
 8007218:	4619      	mov	r1, r3
 800721a:	a329      	add	r3, pc, #164	@ (adr r3, 80072c0 <sensor_one+0x470>)
 800721c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007220:	f7f9 f82c 	bl	800027c <__adddf3>
 8007224:	4602      	mov	r2, r0
 8007226:	460b      	mov	r3, r1
 8007228:	4610      	mov	r0, r2
 800722a:	4619      	mov	r1, r3
 800722c:	f7f9 fcd4 	bl	8000bd8 <__aeabi_d2f>
 8007230:	4603      	mov	r3, r0
 8007232:	4a35      	ldr	r2, [pc, #212]	@ (8007308 <sensor_one+0x4b8>)
 8007234:	6013      	str	r3, [r2, #0]
			xyz = 100 - (xyz-100);
 8007236:	4b34      	ldr	r3, [pc, #208]	@ (8007308 <sensor_one+0x4b8>)
 8007238:	edd3 7a00 	vldr	s15, [r3]
 800723c:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800730c <sensor_one+0x4bc>
 8007240:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007244:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800730c <sensor_one+0x4bc>
 8007248:	ee77 7a67 	vsub.f32	s15, s14, s15
 800724c:	4b2e      	ldr	r3, [pc, #184]	@ (8007308 <sensor_one+0x4b8>)
 800724e:	edc3 7a00 	vstr	s15, [r3]
			xyz1 = (int)(xyz * 10) / 10.0;
 8007252:	4b2d      	ldr	r3, [pc, #180]	@ (8007308 <sensor_one+0x4b8>)
 8007254:	edd3 7a00 	vldr	s15, [r3]
 8007258:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800725c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007260:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007264:	ee17 0a90 	vmov	r0, s15
 8007268:	f7f9 f954 	bl	8000514 <__aeabi_i2d>
 800726c:	f04f 0200 	mov.w	r2, #0
 8007270:	4b27      	ldr	r3, [pc, #156]	@ (8007310 <sensor_one+0x4c0>)
 8007272:	f7f9 fae3 	bl	800083c <__aeabi_ddiv>
 8007276:	4602      	mov	r2, r0
 8007278:	460b      	mov	r3, r1
 800727a:	4610      	mov	r0, r2
 800727c:	4619      	mov	r1, r3
 800727e:	f7f9 fcab 	bl	8000bd8 <__aeabi_d2f>
 8007282:	4603      	mov	r3, r0
 8007284:	4a23      	ldr	r2, [pc, #140]	@ (8007314 <sensor_one+0x4c4>)
 8007286:	6013      	str	r3, [r2, #0]
 8007288:	e0dc      	b.n	8007444 <sensor_one+0x5f4>
 800728a:	bf00      	nop
 800728c:	f3af 8000 	nop.w
 8007290:	00000000 	.word	0x00000000
 8007294:	40c11100 	.word	0x40c11100
 8007298:	b020c49c 	.word	0xb020c49c
 800729c:	3ff76872 	.word	0x3ff76872
 80072a0:	7a786c22 	.word	0x7a786c22
 80072a4:	40513ca5 	.word	0x40513ca5
 80072a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80072ac:	3f40624d 	.word	0x3f40624d
 80072b0:	d2f1a9fc 	.word	0xd2f1a9fc
 80072b4:	3f90624d 	.word	0x3f90624d
 80072b8:	33333333 	.word	0x33333333
 80072bc:	3fd33333 	.word	0x3fd33333
 80072c0:	66666666 	.word	0x66666666
 80072c4:	4058e666 	.word	0x4058e666
 80072c8:	2000116c 	.word	0x2000116c
 80072cc:	20000010 	.word	0x20000010
 80072d0:	20000014 	.word	0x20000014
 80072d4:	20001170 	.word	0x20001170
 80072d8:	20001174 	.word	0x20001174
 80072dc:	200011d4 	.word	0x200011d4
 80072e0:	20001190 	.word	0x20001190
 80072e4:	200011a2 	.word	0x200011a2
 80072e8:	2000119c 	.word	0x2000119c
 80072ec:	200011a8 	.word	0x200011a8
 80072f0:	200011cc 	.word	0x200011cc
 80072f4:	200011d8 	.word	0x200011d8
 80072f8:	200011fc 	.word	0x200011fc
 80072fc:	20001218 	.word	0x20001218
 8007300:	3ff33333 	.word	0x3ff33333
 8007304:	200011f0 	.word	0x200011f0
 8007308:	200011e8 	.word	0x200011e8
 800730c:	42c80000 	.word	0x42c80000
 8007310:	40240000 	.word	0x40240000
 8007314:	200011ec 	.word	0x200011ec

		}
		else {
			//			xy =((((0.016)*p_flow * p_flow))+((0.30)*p_flow) + 99.6);
			//			xy = xy;
			xy = 0.0005 * PIDOut * sqrt(2 * p_flow * 1000 / 1.2);
 8007318:	4bbf      	ldr	r3, [pc, #764]	@ (8007618 <sensor_one+0x7c8>)
 800731a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800731e:	a3b4      	add	r3, pc, #720	@ (adr r3, 80075f0 <sensor_one+0x7a0>)
 8007320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007324:	f7f9 f960 	bl	80005e8 <__aeabi_dmul>
 8007328:	4602      	mov	r2, r0
 800732a:	460b      	mov	r3, r1
 800732c:	4614      	mov	r4, r2
 800732e:	461d      	mov	r5, r3
 8007330:	4bba      	ldr	r3, [pc, #744]	@ (800761c <sensor_one+0x7cc>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8007338:	fb02 f303 	mul.w	r3, r2, r3
 800733c:	4618      	mov	r0, r3
 800733e:	f7f9 f8e9 	bl	8000514 <__aeabi_i2d>
 8007342:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8007346:	4bb6      	ldr	r3, [pc, #728]	@ (8007620 <sensor_one+0x7d0>)
 8007348:	f7f9 fa78 	bl	800083c <__aeabi_ddiv>
 800734c:	4602      	mov	r2, r0
 800734e:	460b      	mov	r3, r1
 8007350:	ec43 2b17 	vmov	d7, r2, r3
 8007354:	eeb0 0a47 	vmov.f32	s0, s14
 8007358:	eef0 0a67 	vmov.f32	s1, s15
 800735c:	f00c fd36 	bl	8013dcc <sqrt>
 8007360:	ec53 2b10 	vmov	r2, r3, d0
 8007364:	4620      	mov	r0, r4
 8007366:	4629      	mov	r1, r5
 8007368:	f7f9 f93e 	bl	80005e8 <__aeabi_dmul>
 800736c:	4602      	mov	r2, r0
 800736e:	460b      	mov	r3, r1
 8007370:	4610      	mov	r0, r2
 8007372:	4619      	mov	r1, r3
 8007374:	f7f9 fbe8 	bl	8000b48 <__aeabi_d2iz>
 8007378:	4603      	mov	r3, r0
 800737a:	4aaa      	ldr	r2, [pc, #680]	@ (8007624 <sensor_one+0x7d4>)
 800737c:	6013      	str	r3, [r2, #0]
			xy = 100 + xy;
 800737e:	4ba9      	ldr	r3, [pc, #676]	@ (8007624 <sensor_one+0x7d4>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	3364      	adds	r3, #100	@ 0x64
 8007384:	4aa7      	ldr	r2, [pc, #668]	@ (8007624 <sensor_one+0x7d4>)
 8007386:	6013      	str	r3, [r2, #0]

			xyz =((((0.016)*p_flow * p_flow))+((0.30)*p_flow) + 99.6);
 8007388:	4ba4      	ldr	r3, [pc, #656]	@ (800761c <sensor_one+0x7cc>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4618      	mov	r0, r3
 800738e:	f7f9 f8c1 	bl	8000514 <__aeabi_i2d>
 8007392:	a399      	add	r3, pc, #612	@ (adr r3, 80075f8 <sensor_one+0x7a8>)
 8007394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007398:	f7f9 f926 	bl	80005e8 <__aeabi_dmul>
 800739c:	4602      	mov	r2, r0
 800739e:	460b      	mov	r3, r1
 80073a0:	4614      	mov	r4, r2
 80073a2:	461d      	mov	r5, r3
 80073a4:	4b9d      	ldr	r3, [pc, #628]	@ (800761c <sensor_one+0x7cc>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4618      	mov	r0, r3
 80073aa:	f7f9 f8b3 	bl	8000514 <__aeabi_i2d>
 80073ae:	4602      	mov	r2, r0
 80073b0:	460b      	mov	r3, r1
 80073b2:	4620      	mov	r0, r4
 80073b4:	4629      	mov	r1, r5
 80073b6:	f7f9 f917 	bl	80005e8 <__aeabi_dmul>
 80073ba:	4602      	mov	r2, r0
 80073bc:	460b      	mov	r3, r1
 80073be:	4614      	mov	r4, r2
 80073c0:	461d      	mov	r5, r3
 80073c2:	4b96      	ldr	r3, [pc, #600]	@ (800761c <sensor_one+0x7cc>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7f9 f8a4 	bl	8000514 <__aeabi_i2d>
 80073cc:	a38c      	add	r3, pc, #560	@ (adr r3, 8007600 <sensor_one+0x7b0>)
 80073ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d2:	f7f9 f909 	bl	80005e8 <__aeabi_dmul>
 80073d6:	4602      	mov	r2, r0
 80073d8:	460b      	mov	r3, r1
 80073da:	4620      	mov	r0, r4
 80073dc:	4629      	mov	r1, r5
 80073de:	f7f8 ff4d 	bl	800027c <__adddf3>
 80073e2:	4602      	mov	r2, r0
 80073e4:	460b      	mov	r3, r1
 80073e6:	4610      	mov	r0, r2
 80073e8:	4619      	mov	r1, r3
 80073ea:	a387      	add	r3, pc, #540	@ (adr r3, 8007608 <sensor_one+0x7b8>)
 80073ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f0:	f7f8 ff44 	bl	800027c <__adddf3>
 80073f4:	4602      	mov	r2, r0
 80073f6:	460b      	mov	r3, r1
 80073f8:	4610      	mov	r0, r2
 80073fa:	4619      	mov	r1, r3
 80073fc:	f7f9 fbec 	bl	8000bd8 <__aeabi_d2f>
 8007400:	4603      	mov	r3, r0
 8007402:	4a89      	ldr	r2, [pc, #548]	@ (8007628 <sensor_one+0x7d8>)
 8007404:	6013      	str	r3, [r2, #0]
			xyz = xyz;
 8007406:	4b88      	ldr	r3, [pc, #544]	@ (8007628 <sensor_one+0x7d8>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a87      	ldr	r2, [pc, #540]	@ (8007628 <sensor_one+0x7d8>)
 800740c:	6013      	str	r3, [r2, #0]
			xyz1 = (int)(xyz * 10) / 10.0;
 800740e:	4b86      	ldr	r3, [pc, #536]	@ (8007628 <sensor_one+0x7d8>)
 8007410:	edd3 7a00 	vldr	s15, [r3]
 8007414:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8007418:	ee67 7a87 	vmul.f32	s15, s15, s14
 800741c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007420:	ee17 0a90 	vmov	r0, s15
 8007424:	f7f9 f876 	bl	8000514 <__aeabi_i2d>
 8007428:	f04f 0200 	mov.w	r2, #0
 800742c:	4b7f      	ldr	r3, [pc, #508]	@ (800762c <sensor_one+0x7dc>)
 800742e:	f7f9 fa05 	bl	800083c <__aeabi_ddiv>
 8007432:	4602      	mov	r2, r0
 8007434:	460b      	mov	r3, r1
 8007436:	4610      	mov	r0, r2
 8007438:	4619      	mov	r1, r3
 800743a:	f7f9 fbcd 	bl	8000bd8 <__aeabi_d2f>
 800743e:	4603      	mov	r3, r0
 8007440:	4a7b      	ldr	r2, [pc, #492]	@ (8007630 <sensor_one+0x7e0>)
 8007442:	6013      	str	r3, [r2, #0]

		}
		//		ppr_flow_data = xy;

		sprintf(hex_string, "%X", xy);
 8007444:	4b77      	ldr	r3, [pc, #476]	@ (8007624 <sensor_one+0x7d4>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	461a      	mov	r2, r3
 800744a:	497a      	ldr	r1, [pc, #488]	@ (8007634 <sensor_one+0x7e4>)
 800744c:	487a      	ldr	r0, [pc, #488]	@ (8007638 <sensor_one+0x7e8>)
 800744e:	f00c f86d 	bl	801352c <siprintf>
		sprintf("hex %s", hex_string);
 8007452:	4979      	ldr	r1, [pc, #484]	@ (8007638 <sensor_one+0x7e8>)
 8007454:	4879      	ldr	r0, [pc, #484]	@ (800763c <sensor_one+0x7ec>)
 8007456:	f00c f869 	bl	801352c <siprintf>
		hexStr[0] = hex_string[0];
 800745a:	4b77      	ldr	r3, [pc, #476]	@ (8007638 <sensor_one+0x7e8>)
 800745c:	781a      	ldrb	r2, [r3, #0]
 800745e:	4b78      	ldr	r3, [pc, #480]	@ (8007640 <sensor_one+0x7f0>)
 8007460:	701a      	strb	r2, [r3, #0]
		hexStr[1] = hex_string[1];
 8007462:	4b75      	ldr	r3, [pc, #468]	@ (8007638 <sensor_one+0x7e8>)
 8007464:	785a      	ldrb	r2, [r3, #1]
 8007466:	4b76      	ldr	r3, [pc, #472]	@ (8007640 <sensor_one+0x7f0>)
 8007468:	705a      	strb	r2, [r3, #1]
		hexStr[2] = '\0';
 800746a:	4b75      	ldr	r3, [pc, #468]	@ (8007640 <sensor_one+0x7f0>)
 800746c:	2200      	movs	r2, #0
 800746e:	709a      	strb	r2, [r3, #2]
		result = (uint8_t) strtol(hexStr, NULL, 16);
 8007470:	2210      	movs	r2, #16
 8007472:	2100      	movs	r1, #0
 8007474:	4872      	ldr	r0, [pc, #456]	@ (8007640 <sensor_one+0x7f0>)
 8007476:	f00c f84f 	bl	8013518 <strtol>
 800747a:	4603      	mov	r3, r0
 800747c:	b2da      	uxtb	r2, r3
 800747e:	4b71      	ldr	r3, [pc, #452]	@ (8007644 <sensor_one+0x7f4>)
 8007480:	701a      	strb	r2, [r3, #0]

		V1 = result2 * sensor_flow_for_vt;
 8007482:	4b71      	ldr	r3, [pc, #452]	@ (8007648 <sensor_one+0x7f8>)
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	ee07 3a90 	vmov	s15, r3
 800748a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800748e:	4b6f      	ldr	r3, [pc, #444]	@ (800764c <sensor_one+0x7fc>)
 8007490:	edd3 7a00 	vldr	s15, [r3]
 8007494:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007498:	4b6d      	ldr	r3, [pc, #436]	@ (8007650 <sensor_one+0x800>)
 800749a:	edc3 7a00 	vstr	s15, [r3]
		Volume = (V1 / previous_pressure_first);
 800749e:	4b6c      	ldr	r3, [pc, #432]	@ (8007650 <sensor_one+0x800>)
 80074a0:	edd3 6a00 	vldr	s13, [r3]
 80074a4:	4b6b      	ldr	r3, [pc, #428]	@ (8007654 <sensor_one+0x804>)
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	ee07 3a90 	vmov	s15, r3
 80074ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80074b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074b8:	ee17 2a90 	vmov	r2, s15
 80074bc:	4b66      	ldr	r3, [pc, #408]	@ (8007658 <sensor_one+0x808>)
 80074be:	601a      	str	r2, [r3, #0]

		sprintf(PV_string, "%X", Volume);
 80074c0:	4b65      	ldr	r3, [pc, #404]	@ (8007658 <sensor_one+0x808>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	461a      	mov	r2, r3
 80074c6:	495b      	ldr	r1, [pc, #364]	@ (8007634 <sensor_one+0x7e4>)
 80074c8:	4864      	ldr	r0, [pc, #400]	@ (800765c <sensor_one+0x80c>)
 80074ca:	f00c f82f 	bl	801352c <siprintf>
		sprintf("hex %s", PV_string);
 80074ce:	4963      	ldr	r1, [pc, #396]	@ (800765c <sensor_one+0x80c>)
 80074d0:	485a      	ldr	r0, [pc, #360]	@ (800763c <sensor_one+0x7ec>)
 80074d2:	f00c f82b 	bl	801352c <siprintf>
		PV[0] = PV_string[0];
 80074d6:	4b61      	ldr	r3, [pc, #388]	@ (800765c <sensor_one+0x80c>)
 80074d8:	781a      	ldrb	r2, [r3, #0]
 80074da:	4b61      	ldr	r3, [pc, #388]	@ (8007660 <sensor_one+0x810>)
 80074dc:	701a      	strb	r2, [r3, #0]
		PV[1] = PV_string[1];
 80074de:	4b5f      	ldr	r3, [pc, #380]	@ (800765c <sensor_one+0x80c>)
 80074e0:	785a      	ldrb	r2, [r3, #1]
 80074e2:	4b5f      	ldr	r3, [pc, #380]	@ (8007660 <sensor_one+0x810>)
 80074e4:	705a      	strb	r2, [r3, #1]
		PV[2] = '\0';
 80074e6:	4b5e      	ldr	r3, [pc, #376]	@ (8007660 <sensor_one+0x810>)
 80074e8:	2200      	movs	r2, #0
 80074ea:	709a      	strb	r2, [r3, #2]
		PV_Graph = (uint8_t) strtol(PV, NULL, 16);
 80074ec:	2210      	movs	r2, #16
 80074ee:	2100      	movs	r1, #0
 80074f0:	485b      	ldr	r0, [pc, #364]	@ (8007660 <sensor_one+0x810>)
 80074f2:	f00c f811 	bl	8013518 <strtol>
 80074f6:	4603      	mov	r3, r0
 80074f8:	b2da      	uxtb	r2, r3
 80074fa:	4b5a      	ldr	r3, [pc, #360]	@ (8007664 <sensor_one+0x814>)
 80074fc:	701a      	strb	r2, [r3, #0]

		v_y = Volume/ y_coor;
 80074fe:	4b56      	ldr	r3, [pc, #344]	@ (8007658 <sensor_one+0x808>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	ee07 3a90 	vmov	s15, r3
 8007506:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800750a:	4b57      	ldr	r3, [pc, #348]	@ (8007668 <sensor_one+0x818>)
 800750c:	ed93 7a00 	vldr	s14, [r3]
 8007510:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007514:	4b55      	ldr	r3, [pc, #340]	@ (800766c <sensor_one+0x81c>)
 8007516:	edc3 7a00 	vstr	s15, [r3]
		p_x = mbar / x_coor;
 800751a:	4b55      	ldr	r3, [pc, #340]	@ (8007670 <sensor_one+0x820>)
 800751c:	edd3 6a00 	vldr	s13, [r3]
 8007520:	4b54      	ldr	r3, [pc, #336]	@ (8007674 <sensor_one+0x824>)
 8007522:	ed93 7a00 	vldr	s14, [r3]
 8007526:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800752a:	4b53      	ldr	r3, [pc, #332]	@ (8007678 <sensor_one+0x828>)
 800752c:	edc3 7a00 	vstr	s15, [r3]
		p_x1 = mbar / 0.35;
 8007530:	4b4f      	ldr	r3, [pc, #316]	@ (8007670 <sensor_one+0x820>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4618      	mov	r0, r3
 8007536:	f7f8 ffff 	bl	8000538 <__aeabi_f2d>
 800753a:	a335      	add	r3, pc, #212	@ (adr r3, 8007610 <sensor_one+0x7c0>)
 800753c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007540:	f7f9 f97c 	bl	800083c <__aeabi_ddiv>
 8007544:	4602      	mov	r2, r0
 8007546:	460b      	mov	r3, r1
 8007548:	4610      	mov	r0, r2
 800754a:	4619      	mov	r1, r3
 800754c:	f7f9 fb44 	bl	8000bd8 <__aeabi_d2f>
 8007550:	4603      	mov	r3, r0
 8007552:	4a4a      	ldr	r2, [pc, #296]	@ (800767c <sensor_one+0x82c>)
 8007554:	6013      	str	r3, [r2, #0]
		FV = sensor_flow_for_vt / result;
 8007556:	4b3d      	ldr	r3, [pc, #244]	@ (800764c <sensor_one+0x7fc>)
 8007558:	edd3 6a00 	vldr	s13, [r3]
 800755c:	4b39      	ldr	r3, [pc, #228]	@ (8007644 <sensor_one+0x7f4>)
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	ee07 3a90 	vmov	s15, r3
 8007564:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007568:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800756c:	4b44      	ldr	r3, [pc, #272]	@ (8007680 <sensor_one+0x830>)
 800756e:	edc3 7a00 	vstr	s15, [r3]
		vt_x = Volume * vt_coor;
 8007572:	4b39      	ldr	r3, [pc, #228]	@ (8007658 <sensor_one+0x808>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	ee07 3a90 	vmov	s15, r3
 800757a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800757e:	4b41      	ldr	r3, [pc, #260]	@ (8007684 <sensor_one+0x834>)
 8007580:	edd3 7a00 	vldr	s15, [r3]
 8007584:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007588:	4b3f      	ldr	r3, [pc, #252]	@ (8007688 <sensor_one+0x838>)
 800758a:	edc3 7a00 	vstr	s15, [r3]
		fl_y = (hI - 100) * fl_coor;
 800758e:	4b3f      	ldr	r3, [pc, #252]	@ (800768c <sensor_one+0x83c>)
 8007590:	edd3 7a00 	vldr	s15, [r3]
 8007594:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8007690 <sensor_one+0x840>
 8007598:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800759c:	4b3d      	ldr	r3, [pc, #244]	@ (8007694 <sensor_one+0x844>)
 800759e:	edd3 7a00 	vldr	s15, [r3]
 80075a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075a6:	4b3c      	ldr	r3, [pc, #240]	@ (8007698 <sensor_one+0x848>)
 80075a8:	edc3 7a00 	vstr	s15, [r3]
		fl_ny = (100 - PID_FLOW_VAR) * fl_coor;
 80075ac:	4b3b      	ldr	r3, [pc, #236]	@ (800769c <sensor_one+0x84c>)
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80075b4:	ee07 3a90 	vmov	s15, r3
 80075b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80075bc:	4b35      	ldr	r3, [pc, #212]	@ (8007694 <sensor_one+0x844>)
 80075be:	edd3 7a00 	vldr	s15, [r3]
 80075c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075c6:	4b36      	ldr	r3, [pc, #216]	@ (80076a0 <sensor_one+0x850>)
 80075c8:	edc3 7a00 	vstr	s15, [r3]

		if(hI>=ppr_flow_data)
 80075cc:	4b2f      	ldr	r3, [pc, #188]	@ (800768c <sensor_one+0x83c>)
 80075ce:	ed93 7a00 	vldr	s14, [r3]
 80075d2:	4b34      	ldr	r3, [pc, #208]	@ (80076a4 <sensor_one+0x854>)
 80075d4:	edd3 7a00 	vldr	s15, [r3]
 80075d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80075dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075e0:	db62      	blt.n	80076a8 <sensor_one+0x858>
		{
			hI=hI;
 80075e2:	4b2a      	ldr	r3, [pc, #168]	@ (800768c <sensor_one+0x83c>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a29      	ldr	r2, [pc, #164]	@ (800768c <sensor_one+0x83c>)
 80075e8:	6013      	str	r3, [r2, #0]
 80075ea:	e061      	b.n	80076b0 <sensor_one+0x860>
 80075ec:	f3af 8000 	nop.w
 80075f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80075f4:	3f40624d 	.word	0x3f40624d
 80075f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80075fc:	3f90624d 	.word	0x3f90624d
 8007600:	33333333 	.word	0x33333333
 8007604:	3fd33333 	.word	0x3fd33333
 8007608:	66666666 	.word	0x66666666
 800760c:	4058e666 	.word	0x4058e666
 8007610:	66666666 	.word	0x66666666
 8007614:	3fd66666 	.word	0x3fd66666
 8007618:	20001218 	.word	0x20001218
 800761c:	200011d8 	.word	0x200011d8
 8007620:	3ff33333 	.word	0x3ff33333
 8007624:	200011f0 	.word	0x200011f0
 8007628:	200011e8 	.word	0x200011e8
 800762c:	40240000 	.word	0x40240000
 8007630:	200011ec 	.word	0x200011ec
 8007634:	08014124 	.word	0x08014124
 8007638:	20001680 	.word	0x20001680
 800763c:	08014128 	.word	0x08014128
 8007640:	20001688 	.word	0x20001688
 8007644:	200016e0 	.word	0x200016e0
 8007648:	200016e1 	.word	0x200016e1
 800764c:	20001200 	.word	0x20001200
 8007650:	200011f4 	.word	0x200011f4
 8007654:	20001774 	.word	0x20001774
 8007658:	200011f8 	.word	0x200011f8
 800765c:	20001684 	.word	0x20001684
 8007660:	2000168c 	.word	0x2000168c
 8007664:	200016e4 	.word	0x200016e4
 8007668:	20000000 	.word	0x20000000
 800766c:	20001144 	.word	0x20001144
 8007670:	200011ac 	.word	0x200011ac
 8007674:	20000004 	.word	0x20000004
 8007678:	20001148 	.word	0x20001148
 800767c:	2000114c 	.word	0x2000114c
 8007680:	20001158 	.word	0x20001158
 8007684:	20000008 	.word	0x20000008
 8007688:	2000115c 	.word	0x2000115c
 800768c:	20000018 	.word	0x20000018
 8007690:	42c80000 	.word	0x42c80000
 8007694:	2000000c 	.word	0x2000000c
 8007698:	20001160 	.word	0x20001160
 800769c:	20001208 	.word	0x20001208
 80076a0:	20001164 	.word	0x20001164
 80076a4:	200011d4 	.word	0x200011d4
		}
		else
		{
			hI=ppr_flow_data;
 80076a8:	4baa      	ldr	r3, [pc, #680]	@ (8007954 <sensor_one+0xb04>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4aaa      	ldr	r2, [pc, #680]	@ (8007958 <sensor_one+0xb08>)
 80076ae:	6013      	str	r3, [r2, #0]
		}
		if(hI==255)
 80076b0:	4ba9      	ldr	r3, [pc, #676]	@ (8007958 <sensor_one+0xb08>)
 80076b2:	edd3 7a00 	vldr	s15, [r3]
 80076b6:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 800795c <sensor_one+0xb0c>
 80076ba:	eef4 7a47 	vcmp.f32	s15, s14
 80076be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076c2:	d103      	bne.n	80076cc <sensor_one+0x87c>
		{
			hI=0;
 80076c4:	4ba4      	ldr	r3, [pc, #656]	@ (8007958 <sensor_one+0xb08>)
 80076c6:	f04f 0200 	mov.w	r2, #0
 80076ca:	601a      	str	r2, [r3, #0]
		}


		////LEAK TEST ICON////
		if(CLT_FLAG == 1){
 80076cc:	4ba4      	ldr	r3, [pc, #656]	@ (8007960 <sensor_one+0xb10>)
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d103      	bne.n	80076dc <sensor_one+0x88c>
			leak_icon_change(0x72);
 80076d4:	2072      	movs	r0, #114	@ 0x72
 80076d6:	f7fb fbfd 	bl	8002ed4 <leak_icon_change>
 80076da:	e032      	b.n	8007742 <sensor_one+0x8f2>
		}
		else if(CLT_FLAG == 2){
 80076dc:	4ba0      	ldr	r3, [pc, #640]	@ (8007960 <sensor_one+0xb10>)
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	d12b      	bne.n	800773c <sensor_one+0x8ec>
			if(previous_pressure_second <= 17500){
 80076e4:	4b9f      	ldr	r3, [pc, #636]	@ (8007964 <sensor_one+0xb14>)
 80076e6:	881b      	ldrh	r3, [r3, #0]
 80076e8:	f244 425c 	movw	r2, #17500	@ 0x445c
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d80d      	bhi.n	800770c <sensor_one+0x8bc>
				leak_icon_change(0x73);
 80076f0:	2073      	movs	r0, #115	@ 0x73
 80076f2:	f7fb fbef 	bl	8002ed4 <leak_icon_change>
				osDelay(3000);
 80076f6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80076fa:	f008 fe5e 	bl	80103ba <osDelay>
				CLT_FLAG = 0;
 80076fe:	4b98      	ldr	r3, [pc, #608]	@ (8007960 <sensor_one+0xb10>)
 8007700:	2200      	movs	r2, #0
 8007702:	701a      	strb	r2, [r3, #0]
				leak_icon_change(0x00);
 8007704:	2000      	movs	r0, #0
 8007706:	f7fb fbe5 	bl	8002ed4 <leak_icon_change>
 800770a:	e01a      	b.n	8007742 <sensor_one+0x8f2>
			}
			else if(previous_pressure_second > 17500){
 800770c:	4b95      	ldr	r3, [pc, #596]	@ (8007964 <sensor_one+0xb14>)
 800770e:	881b      	ldrh	r3, [r3, #0]
 8007710:	f244 425c 	movw	r2, #17500	@ 0x445c
 8007714:	4293      	cmp	r3, r2
 8007716:	d90d      	bls.n	8007734 <sensor_one+0x8e4>
				leak_icon_change(0x74);
 8007718:	2074      	movs	r0, #116	@ 0x74
 800771a:	f7fb fbdb 	bl	8002ed4 <leak_icon_change>
				osDelay(3000);
 800771e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8007722:	f008 fe4a 	bl	80103ba <osDelay>
				CLT_FLAG = 0;
 8007726:	4b8e      	ldr	r3, [pc, #568]	@ (8007960 <sensor_one+0xb10>)
 8007728:	2200      	movs	r2, #0
 800772a:	701a      	strb	r2, [r3, #0]
				leak_icon_change(0x00);
 800772c:	2000      	movs	r0, #0
 800772e:	f7fb fbd1 	bl	8002ed4 <leak_icon_change>
 8007732:	e006      	b.n	8007742 <sensor_one+0x8f2>
			}
			else
				leak_icon_change(0x00);
 8007734:	2000      	movs	r0, #0
 8007736:	f7fb fbcd 	bl	8002ed4 <leak_icon_change>
 800773a:	e002      	b.n	8007742 <sensor_one+0x8f2>
		}
		else
			leak_icon_change(0x00);
 800773c:	2000      	movs	r0, #0
 800773e:	f7fb fbc9 	bl	8002ed4 <leak_icon_change>



		if ((VT_UPDATE_FLAG == 1) && (VCV_FLAG == 1)){
 8007742:	4b89      	ldr	r3, [pc, #548]	@ (8007968 <sensor_one+0xb18>)
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d041      	beq.n	80077ce <sensor_one+0x97e>
 800774a:	4b88      	ldr	r3, [pc, #544]	@ (800796c <sensor_one+0xb1c>)
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d03d      	beq.n	80077ce <sensor_one+0x97e>

			mv_alarm();
 8007752:	f7fb fd03 	bl	800315c <mv_alarm>
			//				hI_stor_data = PID_FLOW_VAR - 97;
			//				actual_vt = (((float) hI_stor_data / 100)
			//						* numatic_insp_ctr) * 2 ;
			//			}
			//			sensor_flow_for_vt = actual_vt;
			hI_stor_data = PID_FLOW_VAR - 100;
 8007756:	4b86      	ldr	r3, [pc, #536]	@ (8007970 <sensor_one+0xb20>)
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	3b64      	subs	r3, #100	@ 0x64
 800775c:	4a85      	ldr	r2, [pc, #532]	@ (8007974 <sensor_one+0xb24>)
 800775e:	6013      	str	r3, [r2, #0]
			sensor_flow_for_vt = (((float) hI_stor_data / 100)
 8007760:	4b84      	ldr	r3, [pc, #528]	@ (8007974 <sensor_one+0xb24>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	ee07 3a90 	vmov	s15, r3
 8007768:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800776c:	eddf 6a82 	vldr	s13, [pc, #520]	@ 8007978 <sensor_one+0xb28>
 8007770:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					* numatic_insp_ctr) * 2;
 8007774:	4b81      	ldr	r3, [pc, #516]	@ (800797c <sensor_one+0xb2c>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	ee07 3a90 	vmov	s15, r3
 800777c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007780:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007784:	ee77 7aa7 	vadd.f32	s15, s15, s15
			sensor_flow_for_vt = (((float) hI_stor_data / 100)
 8007788:	4b7d      	ldr	r3, [pc, #500]	@ (8007980 <sensor_one+0xb30>)
 800778a:	edc3 7a00 	vstr	s15, [r3]
			vt_alarm((uint16_t)sensor_flow_for_vt);
 800778e:	4b7c      	ldr	r3, [pc, #496]	@ (8007980 <sensor_one+0xb30>)
 8007790:	edd3 7a00 	vldr	s15, [r3]
 8007794:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007798:	ee17 3a90 	vmov	r3, s15
 800779c:	b29b      	uxth	r3, r3
 800779e:	4618      	mov	r0, r3
 80077a0:	f7fb fcb2 	bl	8003108 <vt_alarm>
			Compliance(sensor_flow_for_vt/previous_pressure_first);
 80077a4:	4b76      	ldr	r3, [pc, #472]	@ (8007980 <sensor_one+0xb30>)
 80077a6:	edd3 6a00 	vldr	s13, [r3]
 80077aa:	4b76      	ldr	r3, [pc, #472]	@ (8007984 <sensor_one+0xb34>)
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	ee07 3a90 	vmov	s15, r3
 80077b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80077b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077be:	edc7 7a00 	vstr	s15, [r7]
 80077c2:	783b      	ldrb	r3, [r7, #0]
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	4618      	mov	r0, r3
 80077c8:	f7fb fd9e 	bl	8003308 <Compliance>
 80077cc:	e047      	b.n	800785e <sensor_one+0xa0e>

		}
		else if((VT_UPDATE_FLAG == 1) && (VCV_FLAG == 0)){
 80077ce:	4b66      	ldr	r3, [pc, #408]	@ (8007968 <sensor_one+0xb18>)
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d043      	beq.n	800785e <sensor_one+0xa0e>
 80077d6:	4b65      	ldr	r3, [pc, #404]	@ (800796c <sensor_one+0xb1c>)
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	f083 0301 	eor.w	r3, r3, #1
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d03c      	beq.n	800785e <sensor_one+0xa0e>
			mv_alarm();
 80077e4:	f7fb fcba 	bl	800315c <mv_alarm>

			hI_stor_data = PID_FLOW_VAR - 97;
 80077e8:	4b61      	ldr	r3, [pc, #388]	@ (8007970 <sensor_one+0xb20>)
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	3b61      	subs	r3, #97	@ 0x61
 80077ee:	4a61      	ldr	r2, [pc, #388]	@ (8007974 <sensor_one+0xb24>)
 80077f0:	6013      	str	r3, [r2, #0]
			sensor_flow_for_vt = (((float) hI_stor_data / 100)
 80077f2:	4b60      	ldr	r3, [pc, #384]	@ (8007974 <sensor_one+0xb24>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	ee07 3a90 	vmov	s15, r3
 80077fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80077fe:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8007978 <sensor_one+0xb28>
 8007802:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					* numatic_insp_ctr) * 2 ;
 8007806:	4b5d      	ldr	r3, [pc, #372]	@ (800797c <sensor_one+0xb2c>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	ee07 3a90 	vmov	s15, r3
 800780e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007816:	ee77 7aa7 	vadd.f32	s15, s15, s15
			sensor_flow_for_vt = (((float) hI_stor_data / 100)
 800781a:	4b59      	ldr	r3, [pc, #356]	@ (8007980 <sensor_one+0xb30>)
 800781c:	edc3 7a00 	vstr	s15, [r3]
			vt_alarm((uint16_t)sensor_flow_for_vt);
 8007820:	4b57      	ldr	r3, [pc, #348]	@ (8007980 <sensor_one+0xb30>)
 8007822:	edd3 7a00 	vldr	s15, [r3]
 8007826:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800782a:	ee17 3a90 	vmov	r3, s15
 800782e:	b29b      	uxth	r3, r3
 8007830:	4618      	mov	r0, r3
 8007832:	f7fb fc69 	bl	8003108 <vt_alarm>
			Compliance(sensor_flow_for_vt/previous_pressure_first);
 8007836:	4b52      	ldr	r3, [pc, #328]	@ (8007980 <sensor_one+0xb30>)
 8007838:	edd3 6a00 	vldr	s13, [r3]
 800783c:	4b51      	ldr	r3, [pc, #324]	@ (8007984 <sensor_one+0xb34>)
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	ee07 3a90 	vmov	s15, r3
 8007844:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007848:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800784c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007850:	edc7 7a00 	vstr	s15, [r7]
 8007854:	783b      	ldrb	r3, [r7, #0]
 8007856:	b2db      	uxtb	r3, r3
 8007858:	4618      	mov	r0, r3
 800785a:	f7fb fd55 	bl	8003308 <Compliance>
		}
		if ((VCV_FLAG == 1) && (PID_CALIBRATE_FLAG == 1)) {
 800785e:	4b43      	ldr	r3, [pc, #268]	@ (800796c <sensor_one+0xb1c>)
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d01c      	beq.n	80078a0 <sensor_one+0xa50>
 8007866:	4b48      	ldr	r3, [pc, #288]	@ (8007988 <sensor_one+0xb38>)
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d018      	beq.n	80078a0 <sensor_one+0xa50>
			Temp = result;
 800786e:	4b47      	ldr	r3, [pc, #284]	@ (800798c <sensor_one+0xb3c>)
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	4618      	mov	r0, r3
 8007874:	f7f8 fe3e 	bl	80004f4 <__aeabi_ui2d>
 8007878:	4602      	mov	r2, r0
 800787a:	460b      	mov	r3, r1
 800787c:	4944      	ldr	r1, [pc, #272]	@ (8007990 <sensor_one+0xb40>)
 800787e:	e9c1 2300 	strd	r2, r3, [r1]
			PID_Compute(&TPID);
 8007882:	4844      	ldr	r0, [pc, #272]	@ (8007994 <sensor_one+0xb44>)
 8007884:	f002 f810 	bl	80098a8 <PID_Compute>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PIDOut);
 8007888:	4b43      	ldr	r3, [pc, #268]	@ (8007998 <sensor_one+0xb48>)
 800788a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788e:	4943      	ldr	r1, [pc, #268]	@ (800799c <sensor_one+0xb4c>)
 8007890:	680c      	ldr	r4, [r1, #0]
 8007892:	4610      	mov	r0, r2
 8007894:	4619      	mov	r1, r3
 8007896:	f7f9 f97f 	bl	8000b98 <__aeabi_d2uiz>
 800789a:	4603      	mov	r3, r0
 800789c:	6363      	str	r3, [r4, #52]	@ 0x34
 800789e:	e0a1      	b.n	80079e4 <sensor_one+0xb94>
		}
		else if (PCV_FLAG == 1) {
 80078a0:	4b3f      	ldr	r3, [pc, #252]	@ (80079a0 <sensor_one+0xb50>)
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d018      	beq.n	80078da <sensor_one+0xa8a>

			Temp = previous_pressure_first;
 80078a8:	4b36      	ldr	r3, [pc, #216]	@ (8007984 <sensor_one+0xb34>)
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7f8 fe21 	bl	80004f4 <__aeabi_ui2d>
 80078b2:	4602      	mov	r2, r0
 80078b4:	460b      	mov	r3, r1
 80078b6:	4936      	ldr	r1, [pc, #216]	@ (8007990 <sensor_one+0xb40>)
 80078b8:	e9c1 2300 	strd	r2, r3, [r1]
			PID_Compute(&TPID);
 80078bc:	4835      	ldr	r0, [pc, #212]	@ (8007994 <sensor_one+0xb44>)
 80078be:	f001 fff3 	bl	80098a8 <PID_Compute>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PIDOut);
 80078c2:	4b35      	ldr	r3, [pc, #212]	@ (8007998 <sensor_one+0xb48>)
 80078c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c8:	4934      	ldr	r1, [pc, #208]	@ (800799c <sensor_one+0xb4c>)
 80078ca:	680c      	ldr	r4, [r1, #0]
 80078cc:	4610      	mov	r0, r2
 80078ce:	4619      	mov	r1, r3
 80078d0:	f7f9 f962 	bl	8000b98 <__aeabi_d2uiz>
 80078d4:	4603      	mov	r3, r0
 80078d6:	6363      	str	r3, [r4, #52]	@ 0x34
 80078d8:	e084      	b.n	80079e4 <sensor_one+0xb94>

		}
		else if ((SIMV_FLAG == 1) && (PID_CALIBRATE_FLAG == 1)) {
 80078da:	4b32      	ldr	r3, [pc, #200]	@ (80079a4 <sensor_one+0xb54>)
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d064      	beq.n	80079ac <sensor_one+0xb5c>
 80078e2:	4b29      	ldr	r3, [pc, #164]	@ (8007988 <sensor_one+0xb38>)
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d060      	beq.n	80079ac <sensor_one+0xb5c>
			Temp = result;
 80078ea:	4b28      	ldr	r3, [pc, #160]	@ (800798c <sensor_one+0xb3c>)
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	4618      	mov	r0, r3
 80078f0:	f7f8 fe00 	bl	80004f4 <__aeabi_ui2d>
 80078f4:	4602      	mov	r2, r0
 80078f6:	460b      	mov	r3, r1
 80078f8:	4925      	ldr	r1, [pc, #148]	@ (8007990 <sensor_one+0xb40>)
 80078fa:	e9c1 2300 	strd	r2, r3, [r1]
			PID_Compute(&TPID);
 80078fe:	4825      	ldr	r0, [pc, #148]	@ (8007994 <sensor_one+0xb44>)
 8007900:	f001 ffd2 	bl	80098a8 <PID_Compute>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PIDOut);
 8007904:	4b24      	ldr	r3, [pc, #144]	@ (8007998 <sensor_one+0xb48>)
 8007906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800790a:	4924      	ldr	r1, [pc, #144]	@ (800799c <sensor_one+0xb4c>)
 800790c:	680c      	ldr	r4, [r1, #0]
 800790e:	4610      	mov	r0, r2
 8007910:	4619      	mov	r1, r3
 8007912:	f7f9 f941 	bl	8000b98 <__aeabi_d2uiz>
 8007916:	4603      	mov	r3, r0
 8007918:	6363      	str	r3, [r4, #52]	@ 0x34
			if(Spontaneous_FLAG == 1){
 800791a:	4b23      	ldr	r3, [pc, #140]	@ (80079a8 <sensor_one+0xb58>)
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d060      	beq.n	80079e4 <sensor_one+0xb94>
				Temp = previous_pressure_first;
 8007922:	4b18      	ldr	r3, [pc, #96]	@ (8007984 <sensor_one+0xb34>)
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	4618      	mov	r0, r3
 8007928:	f7f8 fde4 	bl	80004f4 <__aeabi_ui2d>
 800792c:	4602      	mov	r2, r0
 800792e:	460b      	mov	r3, r1
 8007930:	4917      	ldr	r1, [pc, #92]	@ (8007990 <sensor_one+0xb40>)
 8007932:	e9c1 2300 	strd	r2, r3, [r1]
				PID_Compute(&TPID);
 8007936:	4817      	ldr	r0, [pc, #92]	@ (8007994 <sensor_one+0xb44>)
 8007938:	f001 ffb6 	bl	80098a8 <PID_Compute>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PIDOut);
 800793c:	4b16      	ldr	r3, [pc, #88]	@ (8007998 <sensor_one+0xb48>)
 800793e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007942:	4916      	ldr	r1, [pc, #88]	@ (800799c <sensor_one+0xb4c>)
 8007944:	680c      	ldr	r4, [r1, #0]
 8007946:	4610      	mov	r0, r2
 8007948:	4619      	mov	r1, r3
 800794a:	f7f9 f925 	bl	8000b98 <__aeabi_d2uiz>
 800794e:	4603      	mov	r3, r0
 8007950:	6363      	str	r3, [r4, #52]	@ 0x34
			if(Spontaneous_FLAG == 1){
 8007952:	e047      	b.n	80079e4 <sensor_one+0xb94>
 8007954:	200011d4 	.word	0x200011d4
 8007958:	20000018 	.word	0x20000018
 800795c:	437f0000 	.word	0x437f0000
 8007960:	200015bc 	.word	0x200015bc
 8007964:	20001776 	.word	0x20001776
 8007968:	200011fc 	.word	0x200011fc
 800796c:	200015b8 	.word	0x200015b8
 8007970:	20001208 	.word	0x20001208
 8007974:	20001204 	.word	0x20001204
 8007978:	42c80000 	.word	0x42c80000
 800797c:	2000157c 	.word	0x2000157c
 8007980:	20001200 	.word	0x20001200
 8007984:	20001774 	.word	0x20001774
 8007988:	200011fe 	.word	0x200011fe
 800798c:	200016e0 	.word	0x200016e0
 8007990:	20001210 	.word	0x20001210
 8007994:	20000d18 	.word	0x20000d18
 8007998:	20001218 	.word	0x20001218
 800799c:	20000f30 	.word	0x20000f30
 80079a0:	200015b9 	.word	0x200015b9
 80079a4:	200015b5 	.word	0x200015b5
 80079a8:	200015be 	.word	0x200015be
			}

		}
		else if (PSV_FLAG == 1) {
 80079ac:	4b24      	ldr	r3, [pc, #144]	@ (8007a40 <sensor_one+0xbf0>)
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d017      	beq.n	80079e4 <sensor_one+0xb94>

			Temp = previous_pressure_first;
 80079b4:	4b23      	ldr	r3, [pc, #140]	@ (8007a44 <sensor_one+0xbf4>)
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	4618      	mov	r0, r3
 80079ba:	f7f8 fd9b 	bl	80004f4 <__aeabi_ui2d>
 80079be:	4602      	mov	r2, r0
 80079c0:	460b      	mov	r3, r1
 80079c2:	4921      	ldr	r1, [pc, #132]	@ (8007a48 <sensor_one+0xbf8>)
 80079c4:	e9c1 2300 	strd	r2, r3, [r1]
			PID_Compute(&TPID);
 80079c8:	4820      	ldr	r0, [pc, #128]	@ (8007a4c <sensor_one+0xbfc>)
 80079ca:	f001 ff6d 	bl	80098a8 <PID_Compute>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PIDOut);
 80079ce:	4b20      	ldr	r3, [pc, #128]	@ (8007a50 <sensor_one+0xc00>)
 80079d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d4:	491f      	ldr	r1, [pc, #124]	@ (8007a54 <sensor_one+0xc04>)
 80079d6:	680c      	ldr	r4, [r1, #0]
 80079d8:	4610      	mov	r0, r2
 80079da:	4619      	mov	r1, r3
 80079dc:	f7f9 f8dc 	bl	8000b98 <__aeabi_d2uiz>
 80079e0:	4603      	mov	r3, r0
 80079e2:	6363      	str	r3, [r4, #52]	@ 0x34
		//			Temp = previous_pressure_first;
		//			PID_Compute(&TPID);
		//			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PIDOut);
		//		}

		P_Peak_pressure(previous_pressure_first);
 80079e4:	4b17      	ldr	r3, [pc, #92]	@ (8007a44 <sensor_one+0xbf4>)
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	4618      	mov	r0, r3
 80079ea:	f7fb fc51 	bl	8003290 <P_Peak_pressure>
		data_val2[19] = 0x64;
 80079ee:	4b1a      	ldr	r3, [pc, #104]	@ (8007a58 <sensor_one+0xc08>)
 80079f0:	2264      	movs	r2, #100	@ 0x64
 80079f2:	74da      	strb	r2, [r3, #19]
		//		data_val2[25] = 0x64;
		//        data_val2[25] = 0x64;
		data_val2[21] = result;
 80079f4:	4b19      	ldr	r3, [pc, #100]	@ (8007a5c <sensor_one+0xc0c>)
 80079f6:	781a      	ldrb	r2, [r3, #0]
 80079f8:	4b17      	ldr	r3, [pc, #92]	@ (8007a58 <sensor_one+0xc08>)
 80079fa:	755a      	strb	r2, [r3, #21]
		//		data_val2[14] = 0x01;
		data_val2[15] = result2;
 80079fc:	4b18      	ldr	r3, [pc, #96]	@ (8007a60 <sensor_one+0xc10>)
 80079fe:	781a      	ldrb	r2, [r3, #0]
 8007a00:	4b15      	ldr	r3, [pc, #84]	@ (8007a58 <sensor_one+0xc08>)
 8007a02:	73da      	strb	r2, [r3, #15]
		//							HAL_MAX_DELAY);
		//        data_val2[27] = PV_Graph;
		//        data_val2[21] = result;
		//                data_val2[21] = 0x64;
		//                data_val2[15] = 0x00;
		for (int a = 0; a < 22; a++){
 8007a04:	2300      	movs	r3, #0
 8007a06:	613b      	str	r3, [r7, #16]
 8007a08:	e00b      	b.n	8007a22 <sensor_one+0xbd2>
			display_payload[a] = data_val2[a];
 8007a0a:	4a13      	ldr	r2, [pc, #76]	@ (8007a58 <sensor_one+0xc08>)
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	4413      	add	r3, r2
 8007a10:	7819      	ldrb	r1, [r3, #0]
 8007a12:	4a14      	ldr	r2, [pc, #80]	@ (8007a64 <sensor_one+0xc14>)
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	4413      	add	r3, r2
 8007a18:	460a      	mov	r2, r1
 8007a1a:	701a      	strb	r2, [r3, #0]
		for (int a = 0; a < 22; a++){
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	3301      	adds	r3, #1
 8007a20:	613b      	str	r3, [r7, #16]
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	2b15      	cmp	r3, #21
 8007a26:	ddf0      	ble.n	8007a0a <sensor_one+0xbba>
		}
		HAL_UART_Transmit(&huart1, display_payload, sizeof(display_payload),
 8007a28:	2303      	movs	r3, #3
 8007a2a:	2216      	movs	r2, #22
 8007a2c:	490d      	ldr	r1, [pc, #52]	@ (8007a64 <sensor_one+0xc14>)
 8007a2e:	480e      	ldr	r0, [pc, #56]	@ (8007a68 <sensor_one+0xc18>)
 8007a30:	f007 f970 	bl	800ed14 <HAL_UART_Transmit>
				3);

		vTaskDelay(pdMS_TO_TICKS(10));
 8007a34:	200a      	movs	r0, #10
 8007a36:	f009 fd51 	bl	80114dc <vTaskDelay>
	{
 8007a3a:	f7ff ba0d 	b.w	8006e58 <sensor_one+0x8>
 8007a3e:	bf00      	nop
 8007a40:	200015b7 	.word	0x200015b7
 8007a44:	20001774 	.word	0x20001774
 8007a48:	20001210 	.word	0x20001210
 8007a4c:	20000d18 	.word	0x20000d18
 8007a50:	20001218 	.word	0x20001218
 8007a54:	20000f30 	.word	0x20000f30
 8007a58:	20000048 	.word	0x20000048
 8007a5c:	200016e0 	.word	0x200016e0
 8007a60:	200016e1 	.word	0x200016e1
 8007a64:	20001604 	.word	0x20001604
 8007a68:	20000fc0 	.word	0x20000fc0
 8007a6c:	00000000 	.word	0x00000000

08007a70 <mode_ctr>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_mode_ctr */
void mode_ctr(void const * argument)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN mode_ctr */
	/* Infinite loop */
	for(;;)
	{

		if (VCV_FLAG == 1) {
 8007a78:	4b65      	ldr	r3, [pc, #404]	@ (8007c10 <mode_ctr+0x1a0>)
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d01e      	beq.n	8007abe <mode_ctr+0x4e>
			PID_VALUE_SET_FLAG = 1;
 8007a80:	4b64      	ldr	r3, [pc, #400]	@ (8007c14 <mode_ctr+0x1a4>)
 8007a82:	2201      	movs	r2, #1
 8007a84:	701a      	strb	r2, [r3, #0]
			if(PID_VALUE_SET_FLAG == 1){
 8007a86:	4b63      	ldr	r3, [pc, #396]	@ (8007c14 <mode_ctr+0x1a4>)
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d014      	beq.n	8007ab8 <mode_ctr+0x48>
				PID_FLOW_SET_VALUE(user_flowe, 1.0, 1.0, 0, 10);
 8007a8e:	4b62      	ldr	r3, [pc, #392]	@ (8007c18 <mode_ctr+0x1a8>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7f8 fd3e 	bl	8000514 <__aeabi_i2d>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	200a      	movs	r0, #10
 8007a9e:	ed9f 3b54 	vldr	d3, [pc, #336]	@ 8007bf0 <mode_ctr+0x180>
 8007aa2:	ed9f 2b55 	vldr	d2, [pc, #340]	@ 8007bf8 <mode_ctr+0x188>
 8007aa6:	ed9f 1b54 	vldr	d1, [pc, #336]	@ 8007bf8 <mode_ctr+0x188>
 8007aaa:	ec43 2b10 	vmov	d0, r2, r3
 8007aae:	f7fc f853 	bl	8003b58 <PID_FLOW_SET_VALUE>
				//					PID_FLOW_SET_VALUE(user1_flow, 2.0, 2.0, 0, 5);
				//				}
				//				if(vt_value > 100){
				//					PID_FLOW_SET_VALUE(user1_flow, 0.5, 0.1, 0, 5);
				//				}
				PID_VALUE_SET_FLAG = 0;
 8007ab2:	4b58      	ldr	r3, [pc, #352]	@ (8007c14 <mode_ctr+0x1a4>)
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	701a      	strb	r2, [r3, #0]
			}
			VCV_MODE();
 8007ab8:	f7fb fc5c 	bl	8003374 <VCV_MODE>
 8007abc:	e093      	b.n	8007be6 <mode_ctr+0x176>
		}
		else if (PCV_FLAG == 1) {
 8007abe:	4b57      	ldr	r3, [pc, #348]	@ (8007c1c <mode_ctr+0x1ac>)
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d03a      	beq.n	8007b3c <mode_ctr+0xcc>
			PID_VALUE_SET_FLAG = 1;
 8007ac6:	4b53      	ldr	r3, [pc, #332]	@ (8007c14 <mode_ctr+0x1a4>)
 8007ac8:	2201      	movs	r2, #1
 8007aca:	701a      	strb	r2, [r3, #0]
			if ((RR_temp_value >= 5) && (RR_temp_value < 12)) {
 8007acc:	4b54      	ldr	r3, [pc, #336]	@ (8007c20 <mode_ctr+0x1b0>)
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	2b04      	cmp	r3, #4
 8007ad2:	d916      	bls.n	8007b02 <mode_ctr+0x92>
 8007ad4:	4b52      	ldr	r3, [pc, #328]	@ (8007c20 <mode_ctr+0x1b0>)
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	2b0b      	cmp	r3, #11
 8007ada:	d812      	bhi.n	8007b02 <mode_ctr+0x92>
				PID_FLOW_SET_VALUE(PLR_temp_value, 0.1, 0.1, 0, 5);
 8007adc:	4b51      	ldr	r3, [pc, #324]	@ (8007c24 <mode_ctr+0x1b4>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f7f8 fd17 	bl	8000514 <__aeabi_i2d>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	460b      	mov	r3, r1
 8007aea:	2005      	movs	r0, #5
 8007aec:	ed9f 3b40 	vldr	d3, [pc, #256]	@ 8007bf0 <mode_ctr+0x180>
 8007af0:	ed9f 2b43 	vldr	d2, [pc, #268]	@ 8007c00 <mode_ctr+0x190>
 8007af4:	ed9f 1b42 	vldr	d1, [pc, #264]	@ 8007c00 <mode_ctr+0x190>
 8007af8:	ec43 2b10 	vmov	d0, r2, r3
 8007afc:	f7fc f82c 	bl	8003b58 <PID_FLOW_SET_VALUE>
 8007b00:	e019      	b.n	8007b36 <mode_ctr+0xc6>
			} else if ((RR_temp_value >= 12) && (RR_temp_value <= 30)) {
 8007b02:	4b47      	ldr	r3, [pc, #284]	@ (8007c20 <mode_ctr+0x1b0>)
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	2b0b      	cmp	r3, #11
 8007b08:	d915      	bls.n	8007b36 <mode_ctr+0xc6>
 8007b0a:	4b45      	ldr	r3, [pc, #276]	@ (8007c20 <mode_ctr+0x1b0>)
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	2b1e      	cmp	r3, #30
 8007b10:	d811      	bhi.n	8007b36 <mode_ctr+0xc6>
				PID_FLOW_SET_VALUE(PLR_temp_value, 0.5, 0.5, 0, 5);
 8007b12:	4b44      	ldr	r3, [pc, #272]	@ (8007c24 <mode_ctr+0x1b4>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7f8 fcfc 	bl	8000514 <__aeabi_i2d>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	460b      	mov	r3, r1
 8007b20:	2005      	movs	r0, #5
 8007b22:	ed9f 3b33 	vldr	d3, [pc, #204]	@ 8007bf0 <mode_ctr+0x180>
 8007b26:	ed9f 2b38 	vldr	d2, [pc, #224]	@ 8007c08 <mode_ctr+0x198>
 8007b2a:	ed9f 1b37 	vldr	d1, [pc, #220]	@ 8007c08 <mode_ctr+0x198>
 8007b2e:	ec43 2b10 	vmov	d0, r2, r3
 8007b32:	f7fc f811 	bl	8003b58 <PID_FLOW_SET_VALUE>
			}
			PCV_MODE();
 8007b36:	f7fb fcf5 	bl	8003524 <PCV_MODE>
 8007b3a:	e054      	b.n	8007be6 <mode_ctr+0x176>
		}
		else if (SIMV_FLAG == 1){
 8007b3c:	4b3a      	ldr	r3, [pc, #232]	@ (8007c28 <mode_ctr+0x1b8>)
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d022      	beq.n	8007b8a <mode_ctr+0x11a>
			//			Mandatory_FLAG = 1;
			if (Mandatory_FLAG == 1){
 8007b44:	4b39      	ldr	r3, [pc, #228]	@ (8007c2c <mode_ctr+0x1bc>)
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d01b      	beq.n	8007b84 <mode_ctr+0x114>
				PID_VALUE_SET_FLAG = 1;
 8007b4c:	4b31      	ldr	r3, [pc, #196]	@ (8007c14 <mode_ctr+0x1a4>)
 8007b4e:	2201      	movs	r2, #1
 8007b50:	701a      	strb	r2, [r3, #0]
				if(PID_VALUE_SET_FLAG == 1){
 8007b52:	4b30      	ldr	r3, [pc, #192]	@ (8007c14 <mode_ctr+0x1a4>)
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d014      	beq.n	8007b84 <mode_ctr+0x114>
					PID_FLOW_SET_VALUE(user_flowe, 1.0, 0.5, 0, 5);
 8007b5a:	4b2f      	ldr	r3, [pc, #188]	@ (8007c18 <mode_ctr+0x1a8>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7f8 fcd8 	bl	8000514 <__aeabi_i2d>
 8007b64:	4602      	mov	r2, r0
 8007b66:	460b      	mov	r3, r1
 8007b68:	2005      	movs	r0, #5
 8007b6a:	ed9f 3b21 	vldr	d3, [pc, #132]	@ 8007bf0 <mode_ctr+0x180>
 8007b6e:	ed9f 2b26 	vldr	d2, [pc, #152]	@ 8007c08 <mode_ctr+0x198>
 8007b72:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8007bf8 <mode_ctr+0x188>
 8007b76:	ec43 2b10 	vmov	d0, r2, r3
 8007b7a:	f7fb ffed 	bl	8003b58 <PID_FLOW_SET_VALUE>
					PID_VALUE_SET_FLAG = 0;
 8007b7e:	4b25      	ldr	r3, [pc, #148]	@ (8007c14 <mode_ctr+0x1a4>)
 8007b80:	2200      	movs	r2, #0
 8007b82:	701a      	strb	r2, [r3, #0]
				}
			}
			SIMV_MODE();
 8007b84:	f7fb fe4c 	bl	8003820 <SIMV_MODE>
 8007b88:	e02d      	b.n	8007be6 <mode_ctr+0x176>
			//			Mandatory_MODE();
		}
		else if (PSV_FLAG == 1) {
 8007b8a:	4b29      	ldr	r3, [pc, #164]	@ (8007c30 <mode_ctr+0x1c0>)
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d005      	beq.n	8007b9e <mode_ctr+0x12e>
			PID_VALUE_SET_FLAG = 1;
 8007b92:	4b20      	ldr	r3, [pc, #128]	@ (8007c14 <mode_ctr+0x1a4>)
 8007b94:	2201      	movs	r2, #1
 8007b96:	701a      	strb	r2, [r3, #0]
			PSV_MODE();
 8007b98:	f7fb fe62 	bl	8003860 <PSV_MODE>
 8007b9c:	e023      	b.n	8007be6 <mode_ctr+0x176>
		}

		else if (CLT_FLAG == 1) {
 8007b9e:	4b25      	ldr	r3, [pc, #148]	@ (8007c34 <mode_ctr+0x1c4>)
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d116      	bne.n	8007bd4 <mode_ctr+0x164>
			mbar = 0;
 8007ba6:	4b24      	ldr	r3, [pc, #144]	@ (8007c38 <mode_ctr+0x1c8>)
 8007ba8:	f04f 0200 	mov.w	r2, #0
 8007bac:	601a      	str	r2, [r3, #0]
			previous_pressure_first = 0;
 8007bae:	4b23      	ldr	r3, [pc, #140]	@ (8007c3c <mode_ctr+0x1cc>)
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	701a      	strb	r2, [r3, #0]
			PIDOut = 0;
 8007bb4:	4922      	ldr	r1, [pc, #136]	@ (8007c40 <mode_ctr+0x1d0>)
 8007bb6:	f04f 0200 	mov.w	r2, #0
 8007bba:	f04f 0300 	mov.w	r3, #0
 8007bbe:	e9c1 2300 	strd	r2, r3, [r1]
			PID_VALUE_SET_FLAG = 1;
 8007bc2:	4b14      	ldr	r3, [pc, #80]	@ (8007c14 <mode_ctr+0x1a4>)
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	701a      	strb	r2, [r3, #0]
			osDelay(200);
 8007bc8:	20c8      	movs	r0, #200	@ 0xc8
 8007bca:	f008 fbf6 	bl	80103ba <osDelay>
			CLT_MODE();
 8007bce:	f7fb fecf 	bl	8003970 <CLT_MODE>
 8007bd2:	e008      	b.n	8007be6 <mode_ctr+0x176>
		//		else if ((PSV_FLAG == 1) && (SIMV_FLAG == 1)){
		//			PID_VALUE_SET_FLAG = 1;
		//			PSV_MODE();
		//			PSV_FLAG = 0;
		//		}
		else if (BAG_FLAG == 1) {
 8007bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8007c44 <mode_ctr+0x1d4>)
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d004      	beq.n	8007be6 <mode_ctr+0x176>
			PID_VALUE_SET_FLAG = 1;
 8007bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8007c14 <mode_ctr+0x1a4>)
 8007bde:	2201      	movs	r2, #1
 8007be0:	701a      	strb	r2, [r3, #0]
			BAG_MODE();
 8007be2:	f7fb ff95 	bl	8003b10 <BAG_MODE>
		}

		vTaskDelay(pdMS_TO_TICKS(50));
 8007be6:	2032      	movs	r0, #50	@ 0x32
 8007be8:	f009 fc78 	bl	80114dc <vTaskDelay>
		if (VCV_FLAG == 1) {
 8007bec:	e744      	b.n	8007a78 <mode_ctr+0x8>
 8007bee:	bf00      	nop
	...
 8007bfc:	3ff00000 	.word	0x3ff00000
 8007c00:	9999999a 	.word	0x9999999a
 8007c04:	3fb99999 	.word	0x3fb99999
 8007c08:	00000000 	.word	0x00000000
 8007c0c:	3fe00000 	.word	0x3fe00000
 8007c10:	200015b8 	.word	0x200015b8
 8007c14:	200011fd 	.word	0x200011fd
 8007c18:	2000120c 	.word	0x2000120c
 8007c1c:	200015b9 	.word	0x200015b9
 8007c20:	2000003c 	.word	0x2000003c
 8007c24:	20000038 	.word	0x20000038
 8007c28:	200015b5 	.word	0x200015b5
 8007c2c:	200015bd 	.word	0x200015bd
 8007c30:	200015b7 	.word	0x200015b7
 8007c34:	200015bc 	.word	0x200015bc
 8007c38:	200011ac 	.word	0x200011ac
 8007c3c:	20001774 	.word	0x20001774
 8007c40:	20001218 	.word	0x20001218
 8007c44:	200015ba 	.word	0x200015ba

08007c48 <Icon>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Icon */
void Icon(void const * argument)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Icon */
	muteUnmute_icon_change(0x4C);
 8007c50:	204c      	movs	r0, #76	@ 0x4c
 8007c52:	f7fb f903 	bl	8002e5c <muteUnmute_icon_change>
	modes_icon_change(0x3A);
 8007c56:	203a      	movs	r0, #58	@ 0x3a
 8007c58:	f7fb f8c4 	bl	8002de4 <modes_icon_change>
	play_icon_change(0x69);
 8007c5c:	2069      	movs	r0, #105	@ 0x69
 8007c5e:	f7fb f9dd 	bl	800301c <play_icon_change>
	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8007c62:	2200      	movs	r2, #0
 8007c64:	2102      	movs	r1, #2
 8007c66:	4878      	ldr	r0, [pc, #480]	@ (8007e48 <Icon+0x200>)
 8007c68:	f004 f814 	bl	800bc94 <HAL_GPIO_WritePin>
		if (pressure_adc<16550){
 8007c6c:	4b77      	ldr	r3, [pc, #476]	@ (8007e4c <Icon+0x204>)
 8007c6e:	881b      	ldrh	r3, [r3, #0]
 8007c70:	f244 02a5 	movw	r2, #16549	@ 0x40a5
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d817      	bhi.n	8007ca8 <Icon+0x60>
			update_flag = 1;
 8007c78:	4b75      	ldr	r3, [pc, #468]	@ (8007e50 <Icon+0x208>)
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	701a      	strb	r2, [r3, #0]
			if (update_flag == 1 ){
 8007c7e:	4b74      	ldr	r3, [pc, #464]	@ (8007e50 <Icon+0x208>)
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d110      	bne.n	8007ca8 <Icon+0x60>
				storevalue = pressure_adc;
 8007c86:	4b71      	ldr	r3, [pc, #452]	@ (8007e4c <Icon+0x204>)
 8007c88:	881b      	ldrh	r3, [r3, #0]
 8007c8a:	b2da      	uxtb	r2, r3
 8007c8c:	4b71      	ldr	r3, [pc, #452]	@ (8007e54 <Icon+0x20c>)
 8007c8e:	701a      	strb	r2, [r3, #0]
				storevalue1 = storevalue - pressure_adc;
 8007c90:	4b70      	ldr	r3, [pc, #448]	@ (8007e54 <Icon+0x20c>)
 8007c92:	781a      	ldrb	r2, [r3, #0]
 8007c94:	4b6d      	ldr	r3, [pc, #436]	@ (8007e4c <Icon+0x204>)
 8007c96:	881b      	ldrh	r3, [r3, #0]
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	1ad3      	subs	r3, r2, r3
 8007c9c:	b2da      	uxtb	r2, r3
 8007c9e:	4b6e      	ldr	r3, [pc, #440]	@ (8007e58 <Icon+0x210>)
 8007ca0:	701a      	strb	r2, [r3, #0]
				update_flag = 0;
 8007ca2:	4b6b      	ldr	r3, [pc, #428]	@ (8007e50 <Icon+0x208>)
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	701a      	strb	r2, [r3, #0]
			}
		}
		if(((previous_pressure_first<P_peak_alarm_min_value)||(previous_pressure_first>P_peak_alarm_max_value))||
 8007ca8:	4b6c      	ldr	r3, [pc, #432]	@ (8007e5c <Icon+0x214>)
 8007caa:	781a      	ldrb	r2, [r3, #0]
 8007cac:	4b6c      	ldr	r3, [pc, #432]	@ (8007e60 <Icon+0x218>)
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d35e      	bcc.n	8007d72 <Icon+0x12a>
 8007cb4:	4b69      	ldr	r3, [pc, #420]	@ (8007e5c <Icon+0x214>)
 8007cb6:	781a      	ldrb	r2, [r3, #0]
 8007cb8:	4b6a      	ldr	r3, [pc, #424]	@ (8007e64 <Icon+0x21c>)
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d858      	bhi.n	8007d72 <Icon+0x12a>
				((MV_value_var < MV_alarm_min_value) || (MV_value_var > MV_alarm_max_value))||
 8007cc0:	4b69      	ldr	r3, [pc, #420]	@ (8007e68 <Icon+0x220>)
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	ee07 3a90 	vmov	s15, r3
 8007cc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007ccc:	4b67      	ldr	r3, [pc, #412]	@ (8007e6c <Icon+0x224>)
 8007cce:	edd3 7a00 	vldr	s15, [r3]
		if(((previous_pressure_first<P_peak_alarm_min_value)||(previous_pressure_first>P_peak_alarm_max_value))||
 8007cd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cda:	dc4a      	bgt.n	8007d72 <Icon+0x12a>
				((MV_value_var < MV_alarm_min_value) || (MV_value_var > MV_alarm_max_value))||
 8007cdc:	4b64      	ldr	r3, [pc, #400]	@ (8007e70 <Icon+0x228>)
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	ee07 3a90 	vmov	s15, r3
 8007ce4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007ce8:	4b60      	ldr	r3, [pc, #384]	@ (8007e6c <Icon+0x224>)
 8007cea:	edd3 7a00 	vldr	s15, [r3]
 8007cee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cf6:	d43c      	bmi.n	8007d72 <Icon+0x12a>
				((RR_temp_value < RR_alarm_min_value) || (RR_temp_value > RR_alarm_max_value))
 8007cf8:	4b5e      	ldr	r3, [pc, #376]	@ (8007e74 <Icon+0x22c>)
 8007cfa:	781a      	ldrb	r2, [r3, #0]
 8007cfc:	4b5e      	ldr	r3, [pc, #376]	@ (8007e78 <Icon+0x230>)
 8007cfe:	781b      	ldrb	r3, [r3, #0]
				((MV_value_var < MV_alarm_min_value) || (MV_value_var > MV_alarm_max_value))||
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d336      	bcc.n	8007d72 <Icon+0x12a>
				((RR_temp_value < RR_alarm_min_value) || (RR_temp_value > RR_alarm_max_value))
 8007d04:	4b5b      	ldr	r3, [pc, #364]	@ (8007e74 <Icon+0x22c>)
 8007d06:	781a      	ldrb	r2, [r3, #0]
 8007d08:	4b5c      	ldr	r3, [pc, #368]	@ (8007e7c <Icon+0x234>)
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d830      	bhi.n	8007d72 <Icon+0x12a>
				||(((Oxygen < O2_alarm_min_value) || (Oxygen > O2_alarm_max_value))&& (O2_flag == 0))||(pressure_adc<16550)
 8007d10:	4b5b      	ldr	r3, [pc, #364]	@ (8007e80 <Icon+0x238>)
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	ee07 3a90 	vmov	s15, r3
 8007d18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007d1c:	4b59      	ldr	r3, [pc, #356]	@ (8007e84 <Icon+0x23c>)
 8007d1e:	edd3 7a00 	vldr	s15, [r3]
 8007d22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d2a:	dc0d      	bgt.n	8007d48 <Icon+0x100>
 8007d2c:	4b56      	ldr	r3, [pc, #344]	@ (8007e88 <Icon+0x240>)
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	ee07 3a90 	vmov	s15, r3
 8007d34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007d38:	4b52      	ldr	r3, [pc, #328]	@ (8007e84 <Icon+0x23c>)
 8007d3a:	edd3 7a00 	vldr	s15, [r3]
 8007d3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d46:	d506      	bpl.n	8007d56 <Icon+0x10e>
 8007d48:	4b50      	ldr	r3, [pc, #320]	@ (8007e8c <Icon+0x244>)
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	f083 0301 	eor.w	r3, r3, #1
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d10d      	bne.n	8007d72 <Icon+0x12a>
 8007d56:	4b3d      	ldr	r3, [pc, #244]	@ (8007e4c <Icon+0x204>)
 8007d58:	881b      	ldrh	r3, [r3, #0]
 8007d5a:	f244 02a5 	movw	r2, #16549	@ 0x40a5
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d907      	bls.n	8007d72 <Icon+0x12a>
				||(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13) == GPIO_PIN_RESET))
 8007d62:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007d66:	4838      	ldr	r0, [pc, #224]	@ (8007e48 <Icon+0x200>)
 8007d68:	f003 ff7c 	bl	800bc64 <HAL_GPIO_ReadPin>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d103      	bne.n	8007d7a <Icon+0x132>
		{
			Alarm_Condition_Flag = 1;
 8007d72:	4b47      	ldr	r3, [pc, #284]	@ (8007e90 <Icon+0x248>)
 8007d74:	2201      	movs	r2, #1
 8007d76:	701a      	strb	r2, [r3, #0]
 8007d78:	e05a      	b.n	8007e30 <Icon+0x1e8>
		}
		else if (((previous_pressure_first>P_peak_alarm_min_value)||(previous_pressure_first<P_peak_alarm_max_value))||
 8007d7a:	4b38      	ldr	r3, [pc, #224]	@ (8007e5c <Icon+0x214>)
 8007d7c:	781a      	ldrb	r2, [r3, #0]
 8007d7e:	4b38      	ldr	r3, [pc, #224]	@ (8007e60 <Icon+0x218>)
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d851      	bhi.n	8007e2a <Icon+0x1e2>
 8007d86:	4b35      	ldr	r3, [pc, #212]	@ (8007e5c <Icon+0x214>)
 8007d88:	781a      	ldrb	r2, [r3, #0]
 8007d8a:	4b36      	ldr	r3, [pc, #216]	@ (8007e64 <Icon+0x21c>)
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d34b      	bcc.n	8007e2a <Icon+0x1e2>
				((MV_value_var > MV_alarm_min_value) || (MV_value_var < MV_alarm_max_value))||
 8007d92:	4b35      	ldr	r3, [pc, #212]	@ (8007e68 <Icon+0x220>)
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	ee07 3a90 	vmov	s15, r3
 8007d9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007d9e:	4b33      	ldr	r3, [pc, #204]	@ (8007e6c <Icon+0x224>)
 8007da0:	edd3 7a00 	vldr	s15, [r3]
		else if (((previous_pressure_first>P_peak_alarm_min_value)||(previous_pressure_first<P_peak_alarm_max_value))||
 8007da4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dac:	d43d      	bmi.n	8007e2a <Icon+0x1e2>
				((MV_value_var > MV_alarm_min_value) || (MV_value_var < MV_alarm_max_value))||
 8007dae:	4b30      	ldr	r3, [pc, #192]	@ (8007e70 <Icon+0x228>)
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	ee07 3a90 	vmov	s15, r3
 8007db6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007dba:	4b2c      	ldr	r3, [pc, #176]	@ (8007e6c <Icon+0x224>)
 8007dbc:	edd3 7a00 	vldr	s15, [r3]
 8007dc0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dc8:	dc2f      	bgt.n	8007e2a <Icon+0x1e2>
				((RR_temp_value > RR_alarm_min_value) || (RR_temp_value < RR_alarm_max_value))
 8007dca:	4b2a      	ldr	r3, [pc, #168]	@ (8007e74 <Icon+0x22c>)
 8007dcc:	781a      	ldrb	r2, [r3, #0]
 8007dce:	4b2a      	ldr	r3, [pc, #168]	@ (8007e78 <Icon+0x230>)
 8007dd0:	781b      	ldrb	r3, [r3, #0]
				((MV_value_var > MV_alarm_min_value) || (MV_value_var < MV_alarm_max_value))||
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d829      	bhi.n	8007e2a <Icon+0x1e2>
				((RR_temp_value > RR_alarm_min_value) || (RR_temp_value < RR_alarm_max_value))
 8007dd6:	4b27      	ldr	r3, [pc, #156]	@ (8007e74 <Icon+0x22c>)
 8007dd8:	781a      	ldrb	r2, [r3, #0]
 8007dda:	4b28      	ldr	r3, [pc, #160]	@ (8007e7c <Icon+0x234>)
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d323      	bcc.n	8007e2a <Icon+0x1e2>
				||((Oxygen > O2_alarm_min_value) || (Oxygen < O2_alarm_max_value))||(storevalue1<0)
 8007de2:	4b27      	ldr	r3, [pc, #156]	@ (8007e80 <Icon+0x238>)
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	ee07 3a90 	vmov	s15, r3
 8007dea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007dee:	4b25      	ldr	r3, [pc, #148]	@ (8007e84 <Icon+0x23c>)
 8007df0:	edd3 7a00 	vldr	s15, [r3]
 8007df4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dfc:	d415      	bmi.n	8007e2a <Icon+0x1e2>
 8007dfe:	4b22      	ldr	r3, [pc, #136]	@ (8007e88 <Icon+0x240>)
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	ee07 3a90 	vmov	s15, r3
 8007e06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007e0a:	4b1e      	ldr	r3, [pc, #120]	@ (8007e84 <Icon+0x23c>)
 8007e0c:	edd3 7a00 	vldr	s15, [r3]
 8007e10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e18:	dc07      	bgt.n	8007e2a <Icon+0x1e2>
				||(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13) == GPIO_PIN_SET))
 8007e1a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007e1e:	480a      	ldr	r0, [pc, #40]	@ (8007e48 <Icon+0x200>)
 8007e20:	f003 ff20 	bl	800bc64 <HAL_GPIO_ReadPin>
 8007e24:	4603      	mov	r3, r0
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d102      	bne.n	8007e30 <Icon+0x1e8>
		{
			Alarm_Condition_Flag = 0;
 8007e2a:	4b19      	ldr	r3, [pc, #100]	@ (8007e90 <Icon+0x248>)
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	701a      	strb	r2, [r3, #0]
		}
		if((Head == 0) && (Alarm_Condition_Flag == 1)){
 8007e30:	4b18      	ldr	r3, [pc, #96]	@ (8007e94 <Icon+0x24c>)
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d12f      	bne.n	8007e98 <Icon+0x250>
 8007e38:	4b15      	ldr	r3, [pc, #84]	@ (8007e90 <Icon+0x248>)
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d12b      	bne.n	8007e98 <Icon+0x250>
			BUZZ_PWM();
 8007e40:	f7fb fa80 	bl	8003344 <BUZZ_PWM>
 8007e44:	e034      	b.n	8007eb0 <Icon+0x268>
 8007e46:	bf00      	nop
 8007e48:	40021000 	.word	0x40021000
 8007e4c:	2000119c 	.word	0x2000119c
 8007e50:	2000119e 	.word	0x2000119e
 8007e54:	2000119f 	.word	0x2000119f
 8007e58:	200011a0 	.word	0x200011a0
 8007e5c:	20001774 	.word	0x20001774
 8007e60:	200015e4 	.word	0x200015e4
 8007e64:	20000040 	.word	0x20000040
 8007e68:	200015e5 	.word	0x200015e5
 8007e6c:	200015e0 	.word	0x200015e0
 8007e70:	20000041 	.word	0x20000041
 8007e74:	2000003c 	.word	0x2000003c
 8007e78:	2000003d 	.word	0x2000003d
 8007e7c:	20000042 	.word	0x20000042
 8007e80:	2000003f 	.word	0x2000003f
 8007e84:	20001574 	.word	0x20001574
 8007e88:	20000044 	.word	0x20000044
 8007e8c:	200015d3 	.word	0x200015d3
 8007e90:	200015e7 	.word	0x200015e7
 8007e94:	200015e6 	.word	0x200015e6
		}
		else if((Head == 1) && (Alarm_Condition_Flag == 0)){
 8007e98:	4ba2      	ldr	r3, [pc, #648]	@ (8008124 <Icon+0x4dc>)
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d107      	bne.n	8007eb0 <Icon+0x268>
 8007ea0:	4ba1      	ldr	r3, [pc, #644]	@ (8008128 <Icon+0x4e0>)
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d103      	bne.n	8007eb0 <Icon+0x268>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8007ea8:	4ba0      	ldr	r3, [pc, #640]	@ (800812c <Icon+0x4e4>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	2200      	movs	r2, #0
 8007eae:	635a      	str	r2, [r3, #52]	@ 0x34
		}

		alarm_count = 0; // Reset alarm list
 8007eb0:	4b9f      	ldr	r3, [pc, #636]	@ (8008130 <Icon+0x4e8>)
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	701a      	strb	r2, [r3, #0]

		if (previous_pressure_first > P_peak_alarm_max_value)
 8007eb6:	4b9f      	ldr	r3, [pc, #636]	@ (8008134 <Icon+0x4ec>)
 8007eb8:	781a      	ldrb	r2, [r3, #0]
 8007eba:	4b9f      	ldr	r3, [pc, #636]	@ (8008138 <Icon+0x4f0>)
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d909      	bls.n	8007ed6 <Icon+0x28e>
			alarm_icons[alarm_count++] = 0x5B;
 8007ec2:	4b9b      	ldr	r3, [pc, #620]	@ (8008130 <Icon+0x4e8>)
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	1c5a      	adds	r2, r3, #1
 8007ec8:	b2d1      	uxtb	r1, r2
 8007eca:	4a99      	ldr	r2, [pc, #612]	@ (8008130 <Icon+0x4e8>)
 8007ecc:	7011      	strb	r1, [r2, #0]
 8007ece:	461a      	mov	r2, r3
 8007ed0:	4b9a      	ldr	r3, [pc, #616]	@ (800813c <Icon+0x4f4>)
 8007ed2:	215b      	movs	r1, #91	@ 0x5b
 8007ed4:	5499      	strb	r1, [r3, r2]

		if (previous_pressure_first < P_peak_alarm_min_value)
 8007ed6:	4b97      	ldr	r3, [pc, #604]	@ (8008134 <Icon+0x4ec>)
 8007ed8:	781a      	ldrb	r2, [r3, #0]
 8007eda:	4b99      	ldr	r3, [pc, #612]	@ (8008140 <Icon+0x4f8>)
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d209      	bcs.n	8007ef6 <Icon+0x2ae>
			alarm_icons[alarm_count++] = 0x5C;
 8007ee2:	4b93      	ldr	r3, [pc, #588]	@ (8008130 <Icon+0x4e8>)
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	1c5a      	adds	r2, r3, #1
 8007ee8:	b2d1      	uxtb	r1, r2
 8007eea:	4a91      	ldr	r2, [pc, #580]	@ (8008130 <Icon+0x4e8>)
 8007eec:	7011      	strb	r1, [r2, #0]
 8007eee:	461a      	mov	r2, r3
 8007ef0:	4b92      	ldr	r3, [pc, #584]	@ (800813c <Icon+0x4f4>)
 8007ef2:	215c      	movs	r1, #92	@ 0x5c
 8007ef4:	5499      	strb	r1, [r3, r2]

		if (MV_value_var > MV_alarm_max_value)
 8007ef6:	4b93      	ldr	r3, [pc, #588]	@ (8008144 <Icon+0x4fc>)
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	ee07 3a90 	vmov	s15, r3
 8007efe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007f02:	4b91      	ldr	r3, [pc, #580]	@ (8008148 <Icon+0x500>)
 8007f04:	edd3 7a00 	vldr	s15, [r3]
 8007f08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f10:	d509      	bpl.n	8007f26 <Icon+0x2de>
			alarm_icons[alarm_count++] = 0x5D;
 8007f12:	4b87      	ldr	r3, [pc, #540]	@ (8008130 <Icon+0x4e8>)
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	1c5a      	adds	r2, r3, #1
 8007f18:	b2d1      	uxtb	r1, r2
 8007f1a:	4a85      	ldr	r2, [pc, #532]	@ (8008130 <Icon+0x4e8>)
 8007f1c:	7011      	strb	r1, [r2, #0]
 8007f1e:	461a      	mov	r2, r3
 8007f20:	4b86      	ldr	r3, [pc, #536]	@ (800813c <Icon+0x4f4>)
 8007f22:	215d      	movs	r1, #93	@ 0x5d
 8007f24:	5499      	strb	r1, [r3, r2]

		if (MV_value_var < MV_alarm_min_value)
 8007f26:	4b89      	ldr	r3, [pc, #548]	@ (800814c <Icon+0x504>)
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	ee07 3a90 	vmov	s15, r3
 8007f2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007f32:	4b85      	ldr	r3, [pc, #532]	@ (8008148 <Icon+0x500>)
 8007f34:	edd3 7a00 	vldr	s15, [r3]
 8007f38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f40:	dd09      	ble.n	8007f56 <Icon+0x30e>
			alarm_icons[alarm_count++] = 0x5E;
 8007f42:	4b7b      	ldr	r3, [pc, #492]	@ (8008130 <Icon+0x4e8>)
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	1c5a      	adds	r2, r3, #1
 8007f48:	b2d1      	uxtb	r1, r2
 8007f4a:	4a79      	ldr	r2, [pc, #484]	@ (8008130 <Icon+0x4e8>)
 8007f4c:	7011      	strb	r1, [r2, #0]
 8007f4e:	461a      	mov	r2, r3
 8007f50:	4b7a      	ldr	r3, [pc, #488]	@ (800813c <Icon+0x4f4>)
 8007f52:	215e      	movs	r1, #94	@ 0x5e
 8007f54:	5499      	strb	r1, [r3, r2]

		if (RR_temp_value > RR_alarm_max_value)
 8007f56:	4b7e      	ldr	r3, [pc, #504]	@ (8008150 <Icon+0x508>)
 8007f58:	781a      	ldrb	r2, [r3, #0]
 8007f5a:	4b7e      	ldr	r3, [pc, #504]	@ (8008154 <Icon+0x50c>)
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d909      	bls.n	8007f76 <Icon+0x32e>
			alarm_icons[alarm_count++] = 0x5F;
 8007f62:	4b73      	ldr	r3, [pc, #460]	@ (8008130 <Icon+0x4e8>)
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	1c5a      	adds	r2, r3, #1
 8007f68:	b2d1      	uxtb	r1, r2
 8007f6a:	4a71      	ldr	r2, [pc, #452]	@ (8008130 <Icon+0x4e8>)
 8007f6c:	7011      	strb	r1, [r2, #0]
 8007f6e:	461a      	mov	r2, r3
 8007f70:	4b72      	ldr	r3, [pc, #456]	@ (800813c <Icon+0x4f4>)
 8007f72:	215f      	movs	r1, #95	@ 0x5f
 8007f74:	5499      	strb	r1, [r3, r2]

		if (RR_temp_value < RR_alarm_min_value)
 8007f76:	4b76      	ldr	r3, [pc, #472]	@ (8008150 <Icon+0x508>)
 8007f78:	781a      	ldrb	r2, [r3, #0]
 8007f7a:	4b77      	ldr	r3, [pc, #476]	@ (8008158 <Icon+0x510>)
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d209      	bcs.n	8007f96 <Icon+0x34e>
			alarm_icons[alarm_count++] = 0x60;
 8007f82:	4b6b      	ldr	r3, [pc, #428]	@ (8008130 <Icon+0x4e8>)
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	1c5a      	adds	r2, r3, #1
 8007f88:	b2d1      	uxtb	r1, r2
 8007f8a:	4a69      	ldr	r2, [pc, #420]	@ (8008130 <Icon+0x4e8>)
 8007f8c:	7011      	strb	r1, [r2, #0]
 8007f8e:	461a      	mov	r2, r3
 8007f90:	4b6a      	ldr	r3, [pc, #424]	@ (800813c <Icon+0x4f4>)
 8007f92:	2160      	movs	r1, #96	@ 0x60
 8007f94:	5499      	strb	r1, [r3, r2]

		if ((Oxygen > O2_alarm_max_value) && (O2_flag == 0))
 8007f96:	4b71      	ldr	r3, [pc, #452]	@ (800815c <Icon+0x514>)
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	ee07 3a90 	vmov	s15, r3
 8007f9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007fa2:	4b6f      	ldr	r3, [pc, #444]	@ (8008160 <Icon+0x518>)
 8007fa4:	edd3 7a00 	vldr	s15, [r3]
 8007fa8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fb0:	d510      	bpl.n	8007fd4 <Icon+0x38c>
 8007fb2:	4b6c      	ldr	r3, [pc, #432]	@ (8008164 <Icon+0x51c>)
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	f083 0301 	eor.w	r3, r3, #1
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d009      	beq.n	8007fd4 <Icon+0x38c>
			alarm_icons[alarm_count++] = 0x61;
 8007fc0:	4b5b      	ldr	r3, [pc, #364]	@ (8008130 <Icon+0x4e8>)
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	1c5a      	adds	r2, r3, #1
 8007fc6:	b2d1      	uxtb	r1, r2
 8007fc8:	4a59      	ldr	r2, [pc, #356]	@ (8008130 <Icon+0x4e8>)
 8007fca:	7011      	strb	r1, [r2, #0]
 8007fcc:	461a      	mov	r2, r3
 8007fce:	4b5b      	ldr	r3, [pc, #364]	@ (800813c <Icon+0x4f4>)
 8007fd0:	2161      	movs	r1, #97	@ 0x61
 8007fd2:	5499      	strb	r1, [r3, r2]

		if ((Oxygen < O2_alarm_min_value) && (O2_flag == 0))
 8007fd4:	4b64      	ldr	r3, [pc, #400]	@ (8008168 <Icon+0x520>)
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	ee07 3a90 	vmov	s15, r3
 8007fdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007fe0:	4b5f      	ldr	r3, [pc, #380]	@ (8008160 <Icon+0x518>)
 8007fe2:	edd3 7a00 	vldr	s15, [r3]
 8007fe6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fee:	dd10      	ble.n	8008012 <Icon+0x3ca>
 8007ff0:	4b5c      	ldr	r3, [pc, #368]	@ (8008164 <Icon+0x51c>)
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	f083 0301 	eor.w	r3, r3, #1
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d009      	beq.n	8008012 <Icon+0x3ca>
			alarm_icons[alarm_count++] = 0x62;
 8007ffe:	4b4c      	ldr	r3, [pc, #304]	@ (8008130 <Icon+0x4e8>)
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	1c5a      	adds	r2, r3, #1
 8008004:	b2d1      	uxtb	r1, r2
 8008006:	4a4a      	ldr	r2, [pc, #296]	@ (8008130 <Icon+0x4e8>)
 8008008:	7011      	strb	r1, [r2, #0]
 800800a:	461a      	mov	r2, r3
 800800c:	4b4b      	ldr	r3, [pc, #300]	@ (800813c <Icon+0x4f4>)
 800800e:	2162      	movs	r1, #98	@ 0x62
 8008010:	5499      	strb	r1, [r3, r2]

		if (pressure_adc < 16555)
 8008012:	4b56      	ldr	r3, [pc, #344]	@ (800816c <Icon+0x524>)
 8008014:	881b      	ldrh	r3, [r3, #0]
 8008016:	f244 02aa 	movw	r2, #16554	@ 0x40aa
 800801a:	4293      	cmp	r3, r2
 800801c:	d809      	bhi.n	8008032 <Icon+0x3ea>
			alarm_icons[alarm_count++] = 0x65;
 800801e:	4b44      	ldr	r3, [pc, #272]	@ (8008130 <Icon+0x4e8>)
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	1c5a      	adds	r2, r3, #1
 8008024:	b2d1      	uxtb	r1, r2
 8008026:	4a42      	ldr	r2, [pc, #264]	@ (8008130 <Icon+0x4e8>)
 8008028:	7011      	strb	r1, [r2, #0]
 800802a:	461a      	mov	r2, r3
 800802c:	4b43      	ldr	r3, [pc, #268]	@ (800813c <Icon+0x4f4>)
 800802e:	2165      	movs	r1, #101	@ 0x65
 8008030:	5499      	strb	r1, [r3, r2]

		if (storevalue1 < 0)
			alarm_icons[alarm_count++] = 0x00;

		if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13) == GPIO_PIN_RESET) {
 8008032:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8008036:	484e      	ldr	r0, [pc, #312]	@ (8008170 <Icon+0x528>)
 8008038:	f003 fe14 	bl	800bc64 <HAL_GPIO_ReadPin>
 800803c:	4603      	mov	r3, r0
 800803e:	2b00      	cmp	r3, #0
 8008040:	d10d      	bne.n	800805e <Icon+0x416>
			PSW = 1;
 8008042:	4b4c      	ldr	r3, [pc, #304]	@ (8008174 <Icon+0x52c>)
 8008044:	2201      	movs	r2, #1
 8008046:	701a      	strb	r2, [r3, #0]
			alarm_icons[alarm_count++] = 0x67;
 8008048:	4b39      	ldr	r3, [pc, #228]	@ (8008130 <Icon+0x4e8>)
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	1c5a      	adds	r2, r3, #1
 800804e:	b2d1      	uxtb	r1, r2
 8008050:	4a37      	ldr	r2, [pc, #220]	@ (8008130 <Icon+0x4e8>)
 8008052:	7011      	strb	r1, [r2, #0]
 8008054:	461a      	mov	r2, r3
 8008056:	4b39      	ldr	r3, [pc, #228]	@ (800813c <Icon+0x4f4>)
 8008058:	2167      	movs	r1, #103	@ 0x67
 800805a:	5499      	strb	r1, [r3, r2]
 800805c:	e014      	b.n	8008088 <Icon+0x440>
		}
		else if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13) == GPIO_PIN_RESET) {
 800805e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8008062:	4843      	ldr	r0, [pc, #268]	@ (8008170 <Icon+0x528>)
 8008064:	f003 fdfe 	bl	800bc64 <HAL_GPIO_ReadPin>
 8008068:	4603      	mov	r3, r0
 800806a:	2b00      	cmp	r3, #0
 800806c:	d10c      	bne.n	8008088 <Icon+0x440>
			PSW = 0;
 800806e:	4b41      	ldr	r3, [pc, #260]	@ (8008174 <Icon+0x52c>)
 8008070:	2200      	movs	r2, #0
 8008072:	701a      	strb	r2, [r3, #0]
			alarm_icons[alarm_count++] = 0x00;
 8008074:	4b2e      	ldr	r3, [pc, #184]	@ (8008130 <Icon+0x4e8>)
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	1c5a      	adds	r2, r3, #1
 800807a:	b2d1      	uxtb	r1, r2
 800807c:	4a2c      	ldr	r2, [pc, #176]	@ (8008130 <Icon+0x4e8>)
 800807e:	7011      	strb	r1, [r2, #0]
 8008080:	461a      	mov	r2, r3
 8008082:	4b2e      	ldr	r3, [pc, #184]	@ (800813c <Icon+0x4f4>)
 8008084:	2100      	movs	r1, #0
 8008086:	5499      	strb	r1, [r3, r2]
		}
		if ((HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11)== GPIO_PIN_RESET) && (Battery_average >= 3222 && Battery_average <= 3260)) {
 8008088:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800808c:	483a      	ldr	r0, [pc, #232]	@ (8008178 <Icon+0x530>)
 800808e:	f003 fde9 	bl	800bc64 <HAL_GPIO_ReadPin>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d11d      	bne.n	80080d4 <Icon+0x48c>
 8008098:	4b38      	ldr	r3, [pc, #224]	@ (800817c <Icon+0x534>)
 800809a:	edd3 7a00 	vldr	s15, [r3]
 800809e:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8008180 <Icon+0x538>
 80080a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80080a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080aa:	db13      	blt.n	80080d4 <Icon+0x48c>
 80080ac:	4b33      	ldr	r3, [pc, #204]	@ (800817c <Icon+0x534>)
 80080ae:	edd3 7a00 	vldr	s15, [r3]
 80080b2:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8008184 <Icon+0x53c>
 80080b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80080ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080be:	d809      	bhi.n	80080d4 <Icon+0x48c>
			alarm_icons[alarm_count++] = 0x5A;
 80080c0:	4b1b      	ldr	r3, [pc, #108]	@ (8008130 <Icon+0x4e8>)
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	1c5a      	adds	r2, r3, #1
 80080c6:	b2d1      	uxtb	r1, r2
 80080c8:	4a19      	ldr	r2, [pc, #100]	@ (8008130 <Icon+0x4e8>)
 80080ca:	7011      	strb	r1, [r2, #0]
 80080cc:	461a      	mov	r2, r3
 80080ce:	4b1b      	ldr	r3, [pc, #108]	@ (800813c <Icon+0x4f4>)
 80080d0:	215a      	movs	r1, #90	@ 0x5a
 80080d2:	5499      	strb	r1, [r3, r2]
		}

		static uint8_t current_alarm_index = 0;
		static uint32_t last_switch_time = 0;
		uint32_t now = HAL_GetTick();
 80080d4:	f002 fb16 	bl	800a704 <HAL_GetTick>
 80080d8:	60f8      	str	r0, [r7, #12]

		if (alarm_count > 0) {
 80080da:	4b15      	ldr	r3, [pc, #84]	@ (8008130 <Icon+0x4e8>)
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d056      	beq.n	8008190 <Icon+0x548>
			if (now - last_switch_time >= 1000) { // 1 second per icon
 80080e2:	4b29      	ldr	r3, [pc, #164]	@ (8008188 <Icon+0x540>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	68fa      	ldr	r2, [r7, #12]
 80080e8:	1ad3      	subs	r3, r2, r3
 80080ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80080ee:	d355      	bcc.n	800819c <Icon+0x554>
				alarm_icon_change(alarm_icons[current_alarm_index]);
 80080f0:	4b26      	ldr	r3, [pc, #152]	@ (800818c <Icon+0x544>)
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	461a      	mov	r2, r3
 80080f6:	4b11      	ldr	r3, [pc, #68]	@ (800813c <Icon+0x4f4>)
 80080f8:	5c9b      	ldrb	r3, [r3, r2]
 80080fa:	4618      	mov	r0, r3
 80080fc:	f7fa fecc 	bl	8002e98 <alarm_icon_change>
				current_alarm_index = (current_alarm_index + 1) % alarm_count;
 8008100:	4b22      	ldr	r3, [pc, #136]	@ (800818c <Icon+0x544>)
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	3301      	adds	r3, #1
 8008106:	4a0a      	ldr	r2, [pc, #40]	@ (8008130 <Icon+0x4e8>)
 8008108:	7812      	ldrb	r2, [r2, #0]
 800810a:	fb93 f1f2 	sdiv	r1, r3, r2
 800810e:	fb01 f202 	mul.w	r2, r1, r2
 8008112:	1a9b      	subs	r3, r3, r2
 8008114:	b2da      	uxtb	r2, r3
 8008116:	4b1d      	ldr	r3, [pc, #116]	@ (800818c <Icon+0x544>)
 8008118:	701a      	strb	r2, [r3, #0]
				last_switch_time = now;
 800811a:	4a1b      	ldr	r2, [pc, #108]	@ (8008188 <Icon+0x540>)
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	6013      	str	r3, [r2, #0]
 8008120:	e03c      	b.n	800819c <Icon+0x554>
 8008122:	bf00      	nop
 8008124:	200015e6 	.word	0x200015e6
 8008128:	200015e7 	.word	0x200015e7
 800812c:	20000f78 	.word	0x20000f78
 8008130:	200015f6 	.word	0x200015f6
 8008134:	20001774 	.word	0x20001774
 8008138:	20000040 	.word	0x20000040
 800813c:	200015ec 	.word	0x200015ec
 8008140:	200015e4 	.word	0x200015e4
 8008144:	20000041 	.word	0x20000041
 8008148:	200015e0 	.word	0x200015e0
 800814c:	200015e5 	.word	0x200015e5
 8008150:	2000003c 	.word	0x2000003c
 8008154:	20000042 	.word	0x20000042
 8008158:	2000003d 	.word	0x2000003d
 800815c:	20000044 	.word	0x20000044
 8008160:	20001574 	.word	0x20001574
 8008164:	200015d3 	.word	0x200015d3
 8008168:	2000003f 	.word	0x2000003f
 800816c:	2000119c 	.word	0x2000119c
 8008170:	40021000 	.word	0x40021000
 8008174:	200011ff 	.word	0x200011ff
 8008178:	40020c00 	.word	0x40020c00
 800817c:	200013d0 	.word	0x200013d0
 8008180:	45496000 	.word	0x45496000
 8008184:	454bc000 	.word	0x454bc000
 8008188:	200017c0 	.word	0x200017c0
 800818c:	200017c4 	.word	0x200017c4
			}
		} else {
			alarm_icon_change(0x00); // No alarms
 8008190:	2000      	movs	r0, #0
 8008192:	f7fa fe81 	bl	8002e98 <alarm_icon_change>
			current_alarm_index = 0;
 8008196:	4b03      	ldr	r3, [pc, #12]	@ (80081a4 <Icon+0x55c>)
 8008198:	2200      	movs	r2, #0
 800819a:	701a      	strb	r2, [r3, #0]
		}

		//    osDelay(1);
		vTaskDelay(pdMS_TO_TICKS(50));  // Delay before re-checking
 800819c:	2032      	movs	r0, #50	@ 0x32
 800819e:	f009 f99d 	bl	80114dc <vTaskDelay>
	{
 80081a2:	e55e      	b.n	8007c62 <Icon+0x1a>
 80081a4:	200017c4 	.word	0x200017c4

080081a8 <Battery>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Battery */
void Battery(void const * argument)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for(;;)
	{


		HAL_ADC_Start(&hadc1);
 80081b0:	48b3      	ldr	r0, [pc, #716]	@ (8008480 <Battery+0x2d8>)
 80081b2:	f002 fb1b 	bl	800a7ec <HAL_ADC_Start>
		HAL_ADC_Start(&hadc2);
 80081b6:	48b3      	ldr	r0, [pc, #716]	@ (8008484 <Battery+0x2dc>)
 80081b8:	f002 fb18 	bl	800a7ec <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80081bc:	f04f 31ff 	mov.w	r1, #4294967295
 80081c0:	48af      	ldr	r0, [pc, #700]	@ (8008480 <Battery+0x2d8>)
 80081c2:	f002 fc18 	bl	800a9f6 <HAL_ADC_PollForConversion>
		HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 80081c6:	f04f 31ff 	mov.w	r1, #4294967295
 80081ca:	48ae      	ldr	r0, [pc, #696]	@ (8008484 <Battery+0x2dc>)
 80081cc:	f002 fc13 	bl	800a9f6 <HAL_ADC_PollForConversion>
		Battery_Adc_Value = HAL_ADC_GetValue(&hadc1);
 80081d0:	48ab      	ldr	r0, [pc, #684]	@ (8008480 <Battery+0x2d8>)
 80081d2:	f002 fc9b 	bl	800ab0c <HAL_ADC_GetValue>
 80081d6:	4603      	mov	r3, r0
 80081d8:	b29a      	uxth	r2, r3
 80081da:	4bab      	ldr	r3, [pc, #684]	@ (8008488 <Battery+0x2e0>)
 80081dc:	801a      	strh	r2, [r3, #0]
		ACS_Adc_Value = HAL_ADC_GetValue(&hadc2);
 80081de:	48a9      	ldr	r0, [pc, #676]	@ (8008484 <Battery+0x2dc>)
 80081e0:	f002 fc94 	bl	800ab0c <HAL_ADC_GetValue>
 80081e4:	4603      	mov	r3, r0
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	4ba8      	ldr	r3, [pc, #672]	@ (800848c <Battery+0x2e4>)
 80081ea:	801a      	strh	r2, [r3, #0]
		total -= readings[readIndex];
 80081ec:	4ba8      	ldr	r3, [pc, #672]	@ (8008490 <Battery+0x2e8>)
 80081ee:	ed93 7a00 	vldr	s14, [r3]
 80081f2:	4ba8      	ldr	r3, [pc, #672]	@ (8008494 <Battery+0x2ec>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4aa8      	ldr	r2, [pc, #672]	@ (8008498 <Battery+0x2f0>)
 80081f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081fc:	ee07 3a90 	vmov	s15, r3
 8008200:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008204:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008208:	4ba1      	ldr	r3, [pc, #644]	@ (8008490 <Battery+0x2e8>)
 800820a:	edc3 7a00 	vstr	s15, [r3]
		readings[readIndex] = ACS_Adc_Value;
 800820e:	4ba1      	ldr	r3, [pc, #644]	@ (8008494 <Battery+0x2ec>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a9e      	ldr	r2, [pc, #632]	@ (800848c <Battery+0x2e4>)
 8008214:	8811      	ldrh	r1, [r2, #0]
 8008216:	4aa0      	ldr	r2, [pc, #640]	@ (8008498 <Battery+0x2f0>)
 8008218:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		total += readings[readIndex];
 800821c:	4b9d      	ldr	r3, [pc, #628]	@ (8008494 <Battery+0x2ec>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a9d      	ldr	r2, [pc, #628]	@ (8008498 <Battery+0x2f0>)
 8008222:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008226:	ee07 3a90 	vmov	s15, r3
 800822a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800822e:	4b98      	ldr	r3, [pc, #608]	@ (8008490 <Battery+0x2e8>)
 8008230:	edd3 7a00 	vldr	s15, [r3]
 8008234:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008238:	4b95      	ldr	r3, [pc, #596]	@ (8008490 <Battery+0x2e8>)
 800823a:	edc3 7a00 	vstr	s15, [r3]
		readIndex = (readIndex + 1) % NUM_READINGS;
 800823e:	4b95      	ldr	r3, [pc, #596]	@ (8008494 <Battery+0x2ec>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	1c5a      	adds	r2, r3, #1
 8008244:	4b95      	ldr	r3, [pc, #596]	@ (800849c <Battery+0x2f4>)
 8008246:	fb83 1302 	smull	r1, r3, r3, r2
 800824a:	1199      	asrs	r1, r3, #6
 800824c:	17d3      	asrs	r3, r2, #31
 800824e:	1acb      	subs	r3, r1, r3
 8008250:	21c8      	movs	r1, #200	@ 0xc8
 8008252:	fb01 f303 	mul.w	r3, r1, r3
 8008256:	1ad3      	subs	r3, r2, r3
 8008258:	4a8e      	ldr	r2, [pc, #568]	@ (8008494 <Battery+0x2ec>)
 800825a:	6013      	str	r3, [r2, #0]
		average = total / NUM_READINGS;
 800825c:	4b8c      	ldr	r3, [pc, #560]	@ (8008490 <Battery+0x2e8>)
 800825e:	ed93 7a00 	vldr	s14, [r3]
 8008262:	eddf 6a8f 	vldr	s13, [pc, #572]	@ 80084a0 <Battery+0x2f8>
 8008266:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800826a:	4b8e      	ldr	r3, [pc, #568]	@ (80084a4 <Battery+0x2fc>)
 800826c:	edc3 7a00 	vstr	s15, [r3]

		total1 -= readings1[readIndex1];
 8008270:	4b8d      	ldr	r3, [pc, #564]	@ (80084a8 <Battery+0x300>)
 8008272:	ed93 7a00 	vldr	s14, [r3]
 8008276:	4b8d      	ldr	r3, [pc, #564]	@ (80084ac <Battery+0x304>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a8d      	ldr	r2, [pc, #564]	@ (80084b0 <Battery+0x308>)
 800827c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008280:	ee07 3a90 	vmov	s15, r3
 8008284:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008288:	ee77 7a67 	vsub.f32	s15, s14, s15
 800828c:	4b86      	ldr	r3, [pc, #536]	@ (80084a8 <Battery+0x300>)
 800828e:	edc3 7a00 	vstr	s15, [r3]
		readings1[readIndex1] = Battery_Adc_Value;
 8008292:	4b86      	ldr	r3, [pc, #536]	@ (80084ac <Battery+0x304>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a7c      	ldr	r2, [pc, #496]	@ (8008488 <Battery+0x2e0>)
 8008298:	8811      	ldrh	r1, [r2, #0]
 800829a:	4a85      	ldr	r2, [pc, #532]	@ (80084b0 <Battery+0x308>)
 800829c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		total1 += readings1[readIndex1];
 80082a0:	4b82      	ldr	r3, [pc, #520]	@ (80084ac <Battery+0x304>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a82      	ldr	r2, [pc, #520]	@ (80084b0 <Battery+0x308>)
 80082a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082aa:	ee07 3a90 	vmov	s15, r3
 80082ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80082b2:	4b7d      	ldr	r3, [pc, #500]	@ (80084a8 <Battery+0x300>)
 80082b4:	edd3 7a00 	vldr	s15, [r3]
 80082b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80082bc:	4b7a      	ldr	r3, [pc, #488]	@ (80084a8 <Battery+0x300>)
 80082be:	edc3 7a00 	vstr	s15, [r3]
		readIndex1 = (readIndex1 + 1) % NUM_READINGS1;
 80082c2:	4b7a      	ldr	r3, [pc, #488]	@ (80084ac <Battery+0x304>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	1c5a      	adds	r2, r3, #1
 80082c8:	4b74      	ldr	r3, [pc, #464]	@ (800849c <Battery+0x2f4>)
 80082ca:	fb83 1302 	smull	r1, r3, r3, r2
 80082ce:	1199      	asrs	r1, r3, #6
 80082d0:	17d3      	asrs	r3, r2, #31
 80082d2:	1acb      	subs	r3, r1, r3
 80082d4:	21c8      	movs	r1, #200	@ 0xc8
 80082d6:	fb01 f303 	mul.w	r3, r1, r3
 80082da:	1ad3      	subs	r3, r2, r3
 80082dc:	4a73      	ldr	r2, [pc, #460]	@ (80084ac <Battery+0x304>)
 80082de:	6013      	str	r3, [r2, #0]
		Battery_average = total1 / NUM_READINGS1;
 80082e0:	4b71      	ldr	r3, [pc, #452]	@ (80084a8 <Battery+0x300>)
 80082e2:	ed93 7a00 	vldr	s14, [r3]
 80082e6:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80084a0 <Battery+0x2f8>
 80082ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80082ee:	4b71      	ldr	r3, [pc, #452]	@ (80084b4 <Battery+0x30c>)
 80082f0:	edc3 7a00 	vstr	s15, [r3]

		rawVoltage = (float) average * 3.3 * 2 / 4095;
 80082f4:	4b6b      	ldr	r3, [pc, #428]	@ (80084a4 <Battery+0x2fc>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4618      	mov	r0, r3
 80082fa:	f7f8 f91d 	bl	8000538 <__aeabi_f2d>
 80082fe:	a35c      	add	r3, pc, #368	@ (adr r3, 8008470 <Battery+0x2c8>)
 8008300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008304:	f7f8 f970 	bl	80005e8 <__aeabi_dmul>
 8008308:	4602      	mov	r2, r0
 800830a:	460b      	mov	r3, r1
 800830c:	4610      	mov	r0, r2
 800830e:	4619      	mov	r1, r3
 8008310:	4602      	mov	r2, r0
 8008312:	460b      	mov	r3, r1
 8008314:	f7f7 ffb2 	bl	800027c <__adddf3>
 8008318:	4602      	mov	r2, r0
 800831a:	460b      	mov	r3, r1
 800831c:	4610      	mov	r0, r2
 800831e:	4619      	mov	r1, r3
 8008320:	a355      	add	r3, pc, #340	@ (adr r3, 8008478 <Battery+0x2d0>)
 8008322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008326:	f7f8 fa89 	bl	800083c <__aeabi_ddiv>
 800832a:	4602      	mov	r2, r0
 800832c:	460b      	mov	r3, r1
 800832e:	4610      	mov	r0, r2
 8008330:	4619      	mov	r1, r3
 8008332:	f7f8 fc51 	bl	8000bd8 <__aeabi_d2f>
 8008336:	4603      	mov	r3, r0
 8008338:	4a5f      	ldr	r2, [pc, #380]	@ (80084b8 <Battery+0x310>)
 800833a:	6013      	str	r3, [r2, #0]
		//If rawVolatage is not 2.5 volt, multiply by a factor.
		current = (rawVoltage - 2.5);
 800833c:	4b5e      	ldr	r3, [pc, #376]	@ (80084b8 <Battery+0x310>)
 800833e:	edd3 7a00 	vldr	s15, [r3]
 8008342:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 8008346:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800834a:	4b5c      	ldr	r3, [pc, #368]	@ (80084bc <Battery+0x314>)
 800834c:	edc3 7a00 	vstr	s15, [r3]

		if((HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11) == GPIO_PIN_SET) && (average >=1590)){
 8008350:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008354:	485a      	ldr	r0, [pc, #360]	@ (80084c0 <Battery+0x318>)
 8008356:	f003 fc85 	bl	800bc64 <HAL_GPIO_ReadPin>
 800835a:	4603      	mov	r3, r0
 800835c:	2b01      	cmp	r3, #1
 800835e:	d10e      	bne.n	800837e <Battery+0x1d6>
 8008360:	4b50      	ldr	r3, [pc, #320]	@ (80084a4 <Battery+0x2fc>)
 8008362:	edd3 7a00 	vldr	s15, [r3]
 8008366:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 80084c4 <Battery+0x31c>
 800836a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800836e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008372:	db04      	blt.n	800837e <Battery+0x1d6>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8008374:	2201      	movs	r2, #1
 8008376:	2140      	movs	r1, #64	@ 0x40
 8008378:	4853      	ldr	r0, [pc, #332]	@ (80084c8 <Battery+0x320>)
 800837a:	f003 fc8b 	bl	800bc94 <HAL_GPIO_WritePin>
		}
		if((HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11) == GPIO_PIN_RESET) || (average < 1590)){
 800837e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008382:	484f      	ldr	r0, [pc, #316]	@ (80084c0 <Battery+0x318>)
 8008384:	f003 fc6e 	bl	800bc64 <HAL_GPIO_ReadPin>
 8008388:	4603      	mov	r3, r0
 800838a:	2b00      	cmp	r3, #0
 800838c:	d009      	beq.n	80083a2 <Battery+0x1fa>
 800838e:	4b45      	ldr	r3, [pc, #276]	@ (80084a4 <Battery+0x2fc>)
 8008390:	edd3 7a00 	vldr	s15, [r3]
 8008394:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 80084c4 <Battery+0x31c>
 8008398:	eef4 7ac7 	vcmpe.f32	s15, s14
 800839c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083a0:	d504      	bpl.n	80083ac <Battery+0x204>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80083a2:	2200      	movs	r2, #0
 80083a4:	2140      	movs	r1, #64	@ 0x40
 80083a6:	4848      	ldr	r0, [pc, #288]	@ (80084c8 <Battery+0x320>)
 80083a8:	f003 fc74 	bl	800bc94 <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11) == GPIO_PIN_SET) && (Battery_average > 3000 && Battery_average < 3222)){
 80083ac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80083b0:	4843      	ldr	r0, [pc, #268]	@ (80084c0 <Battery+0x318>)
 80083b2:	f003 fc57 	bl	800bc64 <HAL_GPIO_ReadPin>
 80083b6:	4603      	mov	r3, r0
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d117      	bne.n	80083ec <Battery+0x244>
 80083bc:	4b3d      	ldr	r3, [pc, #244]	@ (80084b4 <Battery+0x30c>)
 80083be:	edd3 7a00 	vldr	s15, [r3]
 80083c2:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 80084cc <Battery+0x324>
 80083c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80083ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083ce:	dd0d      	ble.n	80083ec <Battery+0x244>
 80083d0:	4b38      	ldr	r3, [pc, #224]	@ (80084b4 <Battery+0x30c>)
 80083d2:	edd3 7a00 	vldr	s15, [r3]
 80083d6:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 80084d0 <Battery+0x328>
 80083da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80083de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083e2:	d503      	bpl.n	80083ec <Battery+0x244>
			battery_icon_change(0x54);
 80083e4:	2054      	movs	r0, #84	@ 0x54
 80083e6:	f7fa fd1b 	bl	8002e20 <battery_icon_change>
 80083ea:	e1ab      	b.n	8008744 <Battery+0x59c>
		}
		else if((HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11) == GPIO_PIN_SET) && (Battery_average >= 3222 && Battery_average <= 3382)){
 80083ec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80083f0:	4833      	ldr	r0, [pc, #204]	@ (80084c0 <Battery+0x318>)
 80083f2:	f003 fc37 	bl	800bc64 <HAL_GPIO_ReadPin>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d117      	bne.n	800842c <Battery+0x284>
 80083fc:	4b2d      	ldr	r3, [pc, #180]	@ (80084b4 <Battery+0x30c>)
 80083fe:	edd3 7a00 	vldr	s15, [r3]
 8008402:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80084d0 <Battery+0x328>
 8008406:	eef4 7ac7 	vcmpe.f32	s15, s14
 800840a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800840e:	db0d      	blt.n	800842c <Battery+0x284>
 8008410:	4b28      	ldr	r3, [pc, #160]	@ (80084b4 <Battery+0x30c>)
 8008412:	edd3 7a00 	vldr	s15, [r3]
 8008416:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80084d4 <Battery+0x32c>
 800841a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800841e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008422:	d803      	bhi.n	800842c <Battery+0x284>
			battery_icon_change(0x55);
 8008424:	2055      	movs	r0, #85	@ 0x55
 8008426:	f7fa fcfb 	bl	8002e20 <battery_icon_change>
 800842a:	e18b      	b.n	8008744 <Battery+0x59c>
		}
		else if((HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11) == GPIO_PIN_SET) && (Battery_average >= 3383 && Battery_average <= 3542)){
 800842c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008430:	4823      	ldr	r0, [pc, #140]	@ (80084c0 <Battery+0x318>)
 8008432:	f003 fc17 	bl	800bc64 <HAL_GPIO_ReadPin>
 8008436:	4603      	mov	r3, r0
 8008438:	2b01      	cmp	r3, #1
 800843a:	d151      	bne.n	80084e0 <Battery+0x338>
 800843c:	4b1d      	ldr	r3, [pc, #116]	@ (80084b4 <Battery+0x30c>)
 800843e:	edd3 7a00 	vldr	s15, [r3]
 8008442:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80084d8 <Battery+0x330>
 8008446:	eef4 7ac7 	vcmpe.f32	s15, s14
 800844a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800844e:	db47      	blt.n	80084e0 <Battery+0x338>
 8008450:	4b18      	ldr	r3, [pc, #96]	@ (80084b4 <Battery+0x30c>)
 8008452:	edd3 7a00 	vldr	s15, [r3]
 8008456:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80084dc <Battery+0x334>
 800845a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800845e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008462:	d83d      	bhi.n	80084e0 <Battery+0x338>
			battery_icon_change(0x56);
 8008464:	2056      	movs	r0, #86	@ 0x56
 8008466:	f7fa fcdb 	bl	8002e20 <battery_icon_change>
 800846a:	e16b      	b.n	8008744 <Battery+0x59c>
 800846c:	f3af 8000 	nop.w
 8008470:	66666666 	.word	0x66666666
 8008474:	400a6666 	.word	0x400a6666
 8008478:	00000000 	.word	0x00000000
 800847c:	40affe00 	.word	0x40affe00
 8008480:	20000d88 	.word	0x20000d88
 8008484:	20000dd0 	.word	0x20000dd0
 8008488:	20001228 	.word	0x20001228
 800848c:	2000122a 	.word	0x2000122a
 8008490:	20001238 	.word	0x20001238
 8008494:	200013cc 	.word	0x200013cc
 8008498:	2000123c 	.word	0x2000123c
 800849c:	51eb851f 	.word	0x51eb851f
 80084a0:	43480000 	.word	0x43480000
 80084a4:	20001234 	.word	0x20001234
 80084a8:	200013d4 	.word	0x200013d4
 80084ac:	20001568 	.word	0x20001568
 80084b0:	200013d8 	.word	0x200013d8
 80084b4:	200013d0 	.word	0x200013d0
 80084b8:	2000122c 	.word	0x2000122c
 80084bc:	20001230 	.word	0x20001230
 80084c0:	40020c00 	.word	0x40020c00
 80084c4:	44c6c000 	.word	0x44c6c000
 80084c8:	40020800 	.word	0x40020800
 80084cc:	453b8000 	.word	0x453b8000
 80084d0:	45496000 	.word	0x45496000
 80084d4:	45536000 	.word	0x45536000
 80084d8:	45537000 	.word	0x45537000
 80084dc:	455d6000 	.word	0x455d6000
		}
		else if((HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11) == GPIO_PIN_SET) && (Battery_average >= 3543 && Battery_average <= 3702)){
 80084e0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80084e4:	489c      	ldr	r0, [pc, #624]	@ (8008758 <Battery+0x5b0>)
 80084e6:	f003 fbbd 	bl	800bc64 <HAL_GPIO_ReadPin>
 80084ea:	4603      	mov	r3, r0
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d117      	bne.n	8008520 <Battery+0x378>
 80084f0:	4b9a      	ldr	r3, [pc, #616]	@ (800875c <Battery+0x5b4>)
 80084f2:	edd3 7a00 	vldr	s15, [r3]
 80084f6:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8008760 <Battery+0x5b8>
 80084fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80084fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008502:	db0d      	blt.n	8008520 <Battery+0x378>
 8008504:	4b95      	ldr	r3, [pc, #596]	@ (800875c <Battery+0x5b4>)
 8008506:	edd3 7a00 	vldr	s15, [r3]
 800850a:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8008764 <Battery+0x5bc>
 800850e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008516:	d803      	bhi.n	8008520 <Battery+0x378>
			battery_icon_change(0x57);
 8008518:	2057      	movs	r0, #87	@ 0x57
 800851a:	f7fa fc81 	bl	8002e20 <battery_icon_change>
 800851e:	e111      	b.n	8008744 <Battery+0x59c>
		}
		else if((HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11) == GPIO_PIN_SET) && (Battery_average >= 3703 && Battery_average <= 3862)){
 8008520:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008524:	488c      	ldr	r0, [pc, #560]	@ (8008758 <Battery+0x5b0>)
 8008526:	f003 fb9d 	bl	800bc64 <HAL_GPIO_ReadPin>
 800852a:	4603      	mov	r3, r0
 800852c:	2b01      	cmp	r3, #1
 800852e:	d117      	bne.n	8008560 <Battery+0x3b8>
 8008530:	4b8a      	ldr	r3, [pc, #552]	@ (800875c <Battery+0x5b4>)
 8008532:	edd3 7a00 	vldr	s15, [r3]
 8008536:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 8008768 <Battery+0x5c0>
 800853a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800853e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008542:	db0d      	blt.n	8008560 <Battery+0x3b8>
 8008544:	4b85      	ldr	r3, [pc, #532]	@ (800875c <Battery+0x5b4>)
 8008546:	edd3 7a00 	vldr	s15, [r3]
 800854a:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 800876c <Battery+0x5c4>
 800854e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008556:	d803      	bhi.n	8008560 <Battery+0x3b8>
			battery_icon_change(0x58);
 8008558:	2058      	movs	r0, #88	@ 0x58
 800855a:	f7fa fc61 	bl	8002e20 <battery_icon_change>
 800855e:	e0f1      	b.n	8008744 <Battery+0x59c>
		}
		else if((HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11) == GPIO_PIN_SET) && (Battery_average >= 3863 && Battery_average <= 4095)){
 8008560:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008564:	487c      	ldr	r0, [pc, #496]	@ (8008758 <Battery+0x5b0>)
 8008566:	f003 fb7d 	bl	800bc64 <HAL_GPIO_ReadPin>
 800856a:	4603      	mov	r3, r0
 800856c:	2b01      	cmp	r3, #1
 800856e:	d117      	bne.n	80085a0 <Battery+0x3f8>
 8008570:	4b7a      	ldr	r3, [pc, #488]	@ (800875c <Battery+0x5b4>)
 8008572:	edd3 7a00 	vldr	s15, [r3]
 8008576:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 8008770 <Battery+0x5c8>
 800857a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800857e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008582:	db0d      	blt.n	80085a0 <Battery+0x3f8>
 8008584:	4b75      	ldr	r3, [pc, #468]	@ (800875c <Battery+0x5b4>)
 8008586:	edd3 7a00 	vldr	s15, [r3]
 800858a:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8008774 <Battery+0x5cc>
 800858e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008596:	d803      	bhi.n	80085a0 <Battery+0x3f8>
			battery_icon_change(0x59);
 8008598:	2059      	movs	r0, #89	@ 0x59
 800859a:	f7fa fc41 	bl	8002e20 <battery_icon_change>
 800859e:	e0d1      	b.n	8008744 <Battery+0x59c>
		}
		else if((HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11) == GPIO_PIN_SET) && (Battery_average <=3000)){
 80085a0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80085a4:	486c      	ldr	r0, [pc, #432]	@ (8008758 <Battery+0x5b0>)
 80085a6:	f003 fb5d 	bl	800bc64 <HAL_GPIO_ReadPin>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d10d      	bne.n	80085cc <Battery+0x424>
 80085b0:	4b6a      	ldr	r3, [pc, #424]	@ (800875c <Battery+0x5b4>)
 80085b2:	edd3 7a00 	vldr	s15, [r3]
 80085b6:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8008778 <Battery+0x5d0>
 80085ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80085be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085c2:	d803      	bhi.n	80085cc <Battery+0x424>
			battery_icon_change(0x4E);
 80085c4:	204e      	movs	r0, #78	@ 0x4e
 80085c6:	f7fa fc2b 	bl	8002e20 <battery_icon_change>
 80085ca:	e0bb      	b.n	8008744 <Battery+0x59c>
		}
		else if ((HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11) == GPIO_PIN_RESET)&&(Battery_average >= 3863 && Battery_average <= 4030)) {
 80085cc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80085d0:	4861      	ldr	r0, [pc, #388]	@ (8008758 <Battery+0x5b0>)
 80085d2:	f003 fb47 	bl	800bc64 <HAL_GPIO_ReadPin>
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d117      	bne.n	800860c <Battery+0x464>
 80085dc:	4b5f      	ldr	r3, [pc, #380]	@ (800875c <Battery+0x5b4>)
 80085de:	edd3 7a00 	vldr	s15, [r3]
 80085e2:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8008770 <Battery+0x5c8>
 80085e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80085ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085ee:	db0d      	blt.n	800860c <Battery+0x464>
 80085f0:	4b5a      	ldr	r3, [pc, #360]	@ (800875c <Battery+0x5b4>)
 80085f2:	edd3 7a00 	vldr	s15, [r3]
 80085f6:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 800877c <Battery+0x5d4>
 80085fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80085fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008602:	d803      	bhi.n	800860c <Battery+0x464>
			battery_icon_change(0x53);
 8008604:	2053      	movs	r0, #83	@ 0x53
 8008606:	f7fa fc0b 	bl	8002e20 <battery_icon_change>
 800860a:	e09b      	b.n	8008744 <Battery+0x59c>
		}
		else if ((HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11) == GPIO_PIN_RESET) && (Battery_average >= 3703 && Battery_average <= 3862)) {
 800860c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008610:	4851      	ldr	r0, [pc, #324]	@ (8008758 <Battery+0x5b0>)
 8008612:	f003 fb27 	bl	800bc64 <HAL_GPIO_ReadPin>
 8008616:	4603      	mov	r3, r0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d117      	bne.n	800864c <Battery+0x4a4>
 800861c:	4b4f      	ldr	r3, [pc, #316]	@ (800875c <Battery+0x5b4>)
 800861e:	edd3 7a00 	vldr	s15, [r3]
 8008622:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8008768 <Battery+0x5c0>
 8008626:	eef4 7ac7 	vcmpe.f32	s15, s14
 800862a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800862e:	db0d      	blt.n	800864c <Battery+0x4a4>
 8008630:	4b4a      	ldr	r3, [pc, #296]	@ (800875c <Battery+0x5b4>)
 8008632:	edd3 7a00 	vldr	s15, [r3]
 8008636:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800876c <Battery+0x5c4>
 800863a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800863e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008642:	d803      	bhi.n	800864c <Battery+0x4a4>

			battery_icon_change(0x52);
 8008644:	2052      	movs	r0, #82	@ 0x52
 8008646:	f7fa fbeb 	bl	8002e20 <battery_icon_change>
 800864a:	e07b      	b.n	8008744 <Battery+0x59c>
		}
		else if ((HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11) == GPIO_PIN_RESET) && (Battery_average >= 3543 && Battery_average <= 3702)) {
 800864c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008650:	4841      	ldr	r0, [pc, #260]	@ (8008758 <Battery+0x5b0>)
 8008652:	f003 fb07 	bl	800bc64 <HAL_GPIO_ReadPin>
 8008656:	4603      	mov	r3, r0
 8008658:	2b00      	cmp	r3, #0
 800865a:	d117      	bne.n	800868c <Battery+0x4e4>
 800865c:	4b3f      	ldr	r3, [pc, #252]	@ (800875c <Battery+0x5b4>)
 800865e:	edd3 7a00 	vldr	s15, [r3]
 8008662:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8008760 <Battery+0x5b8>
 8008666:	eef4 7ac7 	vcmpe.f32	s15, s14
 800866a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800866e:	db0d      	blt.n	800868c <Battery+0x4e4>
 8008670:	4b3a      	ldr	r3, [pc, #232]	@ (800875c <Battery+0x5b4>)
 8008672:	edd3 7a00 	vldr	s15, [r3]
 8008676:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8008764 <Battery+0x5bc>
 800867a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800867e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008682:	d803      	bhi.n	800868c <Battery+0x4e4>

			battery_icon_change(0x51);
 8008684:	2051      	movs	r0, #81	@ 0x51
 8008686:	f7fa fbcb 	bl	8002e20 <battery_icon_change>
 800868a:	e05b      	b.n	8008744 <Battery+0x59c>
		}
		else if ((HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11) == GPIO_PIN_RESET) && (Battery_average >= 3383 && Battery_average <= 3542)) {
 800868c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008690:	4831      	ldr	r0, [pc, #196]	@ (8008758 <Battery+0x5b0>)
 8008692:	f003 fae7 	bl	800bc64 <HAL_GPIO_ReadPin>
 8008696:	4603      	mov	r3, r0
 8008698:	2b00      	cmp	r3, #0
 800869a:	d117      	bne.n	80086cc <Battery+0x524>
 800869c:	4b2f      	ldr	r3, [pc, #188]	@ (800875c <Battery+0x5b4>)
 800869e:	edd3 7a00 	vldr	s15, [r3]
 80086a2:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8008780 <Battery+0x5d8>
 80086a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80086aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086ae:	db0d      	blt.n	80086cc <Battery+0x524>
 80086b0:	4b2a      	ldr	r3, [pc, #168]	@ (800875c <Battery+0x5b4>)
 80086b2:	edd3 7a00 	vldr	s15, [r3]
 80086b6:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8008784 <Battery+0x5dc>
 80086ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80086be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086c2:	d803      	bhi.n	80086cc <Battery+0x524>

			battery_icon_change(0x50);
 80086c4:	2050      	movs	r0, #80	@ 0x50
 80086c6:	f7fa fbab 	bl	8002e20 <battery_icon_change>
 80086ca:	e03b      	b.n	8008744 <Battery+0x59c>
		}
		else if ((HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11)== GPIO_PIN_RESET) && (Battery_average >= 3222 && Battery_average <= 3382)) {
 80086cc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80086d0:	4821      	ldr	r0, [pc, #132]	@ (8008758 <Battery+0x5b0>)
 80086d2:	f003 fac7 	bl	800bc64 <HAL_GPIO_ReadPin>
 80086d6:	4603      	mov	r3, r0
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d117      	bne.n	800870c <Battery+0x564>
 80086dc:	4b1f      	ldr	r3, [pc, #124]	@ (800875c <Battery+0x5b4>)
 80086de:	edd3 7a00 	vldr	s15, [r3]
 80086e2:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8008788 <Battery+0x5e0>
 80086e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80086ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086ee:	db0d      	blt.n	800870c <Battery+0x564>
 80086f0:	4b1a      	ldr	r3, [pc, #104]	@ (800875c <Battery+0x5b4>)
 80086f2:	edd3 7a00 	vldr	s15, [r3]
 80086f6:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 800878c <Battery+0x5e4>
 80086fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80086fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008702:	d803      	bhi.n	800870c <Battery+0x564>
			battery_icon_change(0x4F);
 8008704:	204f      	movs	r0, #79	@ 0x4f
 8008706:	f7fa fb8b 	bl	8002e20 <battery_icon_change>
 800870a:	e01b      	b.n	8008744 <Battery+0x59c>
		}
		else if ((HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11)== GPIO_PIN_RESET) && (Battery_average <=3222)) {
 800870c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008710:	4811      	ldr	r0, [pc, #68]	@ (8008758 <Battery+0x5b0>)
 8008712:	f003 faa7 	bl	800bc64 <HAL_GPIO_ReadPin>
 8008716:	4603      	mov	r3, r0
 8008718:	2b00      	cmp	r3, #0
 800871a:	d110      	bne.n	800873e <Battery+0x596>
 800871c:	4b0f      	ldr	r3, [pc, #60]	@ (800875c <Battery+0x5b4>)
 800871e:	edd3 7a00 	vldr	s15, [r3]
 8008722:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8008788 <Battery+0x5e0>
 8008726:	eef4 7ac7 	vcmpe.f32	s15, s14
 800872a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800872e:	d806      	bhi.n	800873e <Battery+0x596>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8008730:	2201      	movs	r2, #1
 8008732:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008736:	4816      	ldr	r0, [pc, #88]	@ (8008790 <Battery+0x5e8>)
 8008738:	f003 faac 	bl	800bc94 <HAL_GPIO_WritePin>
 800873c:	e002      	b.n	8008744 <Battery+0x59c>
		}

		else {
			battery_icon_change(0x00);
 800873e:	2000      	movs	r0, #0
 8008740:	f7fa fb6e 	bl	8002e20 <battery_icon_change>
		}
		HAL_ADC_Stop(&hadc1);
 8008744:	4813      	ldr	r0, [pc, #76]	@ (8008794 <Battery+0x5ec>)
 8008746:	f002 f923 	bl	800a990 <HAL_ADC_Stop>
		HAL_ADC_Stop(&hadc2);
 800874a:	4813      	ldr	r0, [pc, #76]	@ (8008798 <Battery+0x5f0>)
 800874c:	f002 f920 	bl	800a990 <HAL_ADC_Stop>
		vTaskDelay(pdMS_TO_TICKS(100));
 8008750:	2064      	movs	r0, #100	@ 0x64
 8008752:	f008 fec3 	bl	80114dc <vTaskDelay>
		HAL_ADC_Start(&hadc1);
 8008756:	e52b      	b.n	80081b0 <Battery+0x8>
 8008758:	40020c00 	.word	0x40020c00
 800875c:	200013d0 	.word	0x200013d0
 8008760:	455d7000 	.word	0x455d7000
 8008764:	45676000 	.word	0x45676000
 8008768:	45677000 	.word	0x45677000
 800876c:	45716000 	.word	0x45716000
 8008770:	45717000 	.word	0x45717000
 8008774:	457ff000 	.word	0x457ff000
 8008778:	453b8000 	.word	0x453b8000
 800877c:	457be000 	.word	0x457be000
 8008780:	45537000 	.word	0x45537000
 8008784:	455d6000 	.word	0x455d6000
 8008788:	45496000 	.word	0x45496000
 800878c:	45536000 	.word	0x45536000
 8008790:	40020800 	.word	0x40020800
 8008794:	20000d88 	.word	0x20000d88
 8008798:	20000dd0 	.word	0x20000dd0

0800879c <Loop>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Loop */
void Loop(void const * argument)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b084      	sub	sp, #16
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for(;;)
	{

		//		loop_flag = 1;
		ab = 262 - v_y;
 80087a4:	4b91      	ldr	r3, [pc, #580]	@ (80089ec <Loop+0x250>)
 80087a6:	edd3 7a00 	vldr	s15, [r3]
 80087aa:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 80089f0 <Loop+0x254>
 80087ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80087b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087b6:	ee17 3a90 	vmov	r3, s15
 80087ba:	b29a      	uxth	r2, r3
 80087bc:	4b8d      	ldr	r3, [pc, #564]	@ (80089f4 <Loop+0x258>)
 80087be:	801a      	strh	r2, [r3, #0]
		sprintf(v_xString, "%X", ab);
 80087c0:	4b8c      	ldr	r3, [pc, #560]	@ (80089f4 <Loop+0x258>)
 80087c2:	881b      	ldrh	r3, [r3, #0]
 80087c4:	461a      	mov	r2, r3
 80087c6:	498c      	ldr	r1, [pc, #560]	@ (80089f8 <Loop+0x25c>)
 80087c8:	488c      	ldr	r0, [pc, #560]	@ (80089fc <Loop+0x260>)
 80087ca:	f00a feaf 	bl	801352c <siprintf>
		sprintf("hex %s", v_xString);
 80087ce:	498b      	ldr	r1, [pc, #556]	@ (80089fc <Loop+0x260>)
 80087d0:	488b      	ldr	r0, [pc, #556]	@ (8008a00 <Loop+0x264>)
 80087d2:	f00a feab 	bl	801352c <siprintf>
		//		v_x1[0] = v_xString[0];
		//		v_x1[1] = v_xString[1];
		//		v_x1[2] = '\0';
		v_x1[0] = '0';
 80087d6:	4b8b      	ldr	r3, [pc, #556]	@ (8008a04 <Loop+0x268>)
 80087d8:	2230      	movs	r2, #48	@ 0x30
 80087da:	701a      	strb	r2, [r3, #0]
		v_x1[1] = '0';
 80087dc:	4b89      	ldr	r3, [pc, #548]	@ (8008a04 <Loop+0x268>)
 80087de:	2230      	movs	r2, #48	@ 0x30
 80087e0:	705a      	strb	r2, [r3, #1]
		v_x1[2] = '\0';
 80087e2:	4b88      	ldr	r3, [pc, #544]	@ (8008a04 <Loop+0x268>)
 80087e4:	2200      	movs	r2, #0
 80087e6:	709a      	strb	r2, [r3, #2]

		v_x3[0] = v_xString[0];
 80087e8:	4b84      	ldr	r3, [pc, #528]	@ (80089fc <Loop+0x260>)
 80087ea:	781a      	ldrb	r2, [r3, #0]
 80087ec:	4b86      	ldr	r3, [pc, #536]	@ (8008a08 <Loop+0x26c>)
 80087ee:	701a      	strb	r2, [r3, #0]
		v_x3[1] = v_xString[1];
 80087f0:	4b82      	ldr	r3, [pc, #520]	@ (80089fc <Loop+0x260>)
 80087f2:	785a      	ldrb	r2, [r3, #1]
 80087f4:	4b84      	ldr	r3, [pc, #528]	@ (8008a08 <Loop+0x26c>)
 80087f6:	705a      	strb	r2, [r3, #1]
		v_x3[2] = '\0';
 80087f8:	4b83      	ldr	r3, [pc, #524]	@ (8008a08 <Loop+0x26c>)
 80087fa:	2200      	movs	r2, #0
 80087fc:	709a      	strb	r2, [r3, #2]

		a1 = (uint8_t) strtol(v_x1, NULL, 16);
 80087fe:	2210      	movs	r2, #16
 8008800:	2100      	movs	r1, #0
 8008802:	4880      	ldr	r0, [pc, #512]	@ (8008a04 <Loop+0x268>)
 8008804:	f00a fe88 	bl	8013518 <strtol>
 8008808:	4603      	mov	r3, r0
 800880a:	b2da      	uxtb	r2, r3
 800880c:	4b7f      	ldr	r3, [pc, #508]	@ (8008a0c <Loop+0x270>)
 800880e:	701a      	strb	r2, [r3, #0]
		a2 = (uint8_t) strtol(v_x3, NULL, 16);
 8008810:	2210      	movs	r2, #16
 8008812:	2100      	movs	r1, #0
 8008814:	487c      	ldr	r0, [pc, #496]	@ (8008a08 <Loop+0x26c>)
 8008816:	f00a fe7f 	bl	8013518 <strtol>
 800881a:	4603      	mov	r3, r0
 800881c:	b2da      	uxtb	r2, r3
 800881e:	4b7c      	ldr	r3, [pc, #496]	@ (8008a10 <Loop+0x274>)
 8008820:	701a      	strb	r2, [r3, #0]


		cd = 673 + p_x;
 8008822:	4b7c      	ldr	r3, [pc, #496]	@ (8008a14 <Loop+0x278>)
 8008824:	edd3 7a00 	vldr	s15, [r3]
 8008828:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 8008a18 <Loop+0x27c>
 800882c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008830:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008834:	ee17 3a90 	vmov	r3, s15
 8008838:	b29a      	uxth	r2, r3
 800883a:	4b78      	ldr	r3, [pc, #480]	@ (8008a1c <Loop+0x280>)
 800883c:	801a      	strh	r2, [r3, #0]
		sprintf(v_yString, "%X", cd);
 800883e:	4b77      	ldr	r3, [pc, #476]	@ (8008a1c <Loop+0x280>)
 8008840:	881b      	ldrh	r3, [r3, #0]
 8008842:	461a      	mov	r2, r3
 8008844:	496c      	ldr	r1, [pc, #432]	@ (80089f8 <Loop+0x25c>)
 8008846:	4876      	ldr	r0, [pc, #472]	@ (8008a20 <Loop+0x284>)
 8008848:	f00a fe70 	bl	801352c <siprintf>
		sprintf("hex %s", v_yString);
 800884c:	4974      	ldr	r1, [pc, #464]	@ (8008a20 <Loop+0x284>)
 800884e:	486c      	ldr	r0, [pc, #432]	@ (8008a00 <Loop+0x264>)
 8008850:	f00a fe6c 	bl	801352c <siprintf>
		v_y1[0] = '0';
 8008854:	4b73      	ldr	r3, [pc, #460]	@ (8008a24 <Loop+0x288>)
 8008856:	2230      	movs	r2, #48	@ 0x30
 8008858:	701a      	strb	r2, [r3, #0]
		v_y1[1] = v_yString[0];
 800885a:	4b71      	ldr	r3, [pc, #452]	@ (8008a20 <Loop+0x284>)
 800885c:	781a      	ldrb	r2, [r3, #0]
 800885e:	4b71      	ldr	r3, [pc, #452]	@ (8008a24 <Loop+0x288>)
 8008860:	705a      	strb	r2, [r3, #1]
		v_y1[2] = '\0';
 8008862:	4b70      	ldr	r3, [pc, #448]	@ (8008a24 <Loop+0x288>)
 8008864:	2200      	movs	r2, #0
 8008866:	709a      	strb	r2, [r3, #2]

		v_y3[0] = v_yString[1];
 8008868:	4b6d      	ldr	r3, [pc, #436]	@ (8008a20 <Loop+0x284>)
 800886a:	785a      	ldrb	r2, [r3, #1]
 800886c:	4b6e      	ldr	r3, [pc, #440]	@ (8008a28 <Loop+0x28c>)
 800886e:	701a      	strb	r2, [r3, #0]
		v_y3[1] = v_yString[2];
 8008870:	4b6b      	ldr	r3, [pc, #428]	@ (8008a20 <Loop+0x284>)
 8008872:	789a      	ldrb	r2, [r3, #2]
 8008874:	4b6c      	ldr	r3, [pc, #432]	@ (8008a28 <Loop+0x28c>)
 8008876:	705a      	strb	r2, [r3, #1]
		v_y3[2] = '\0';
 8008878:	4b6b      	ldr	r3, [pc, #428]	@ (8008a28 <Loop+0x28c>)
 800887a:	2200      	movs	r2, #0
 800887c:	709a      	strb	r2, [r3, #2]
		y12 = (uint8_t) strtol(v_y1, NULL, 16);
 800887e:	2210      	movs	r2, #16
 8008880:	2100      	movs	r1, #0
 8008882:	4868      	ldr	r0, [pc, #416]	@ (8008a24 <Loop+0x288>)
 8008884:	f00a fe48 	bl	8013518 <strtol>
 8008888:	4603      	mov	r3, r0
 800888a:	b2da      	uxtb	r2, r3
 800888c:	4b67      	ldr	r3, [pc, #412]	@ (8008a2c <Loop+0x290>)
 800888e:	701a      	strb	r2, [r3, #0]
		y2 = (uint8_t) strtol(v_y3, NULL, 16);
 8008890:	2210      	movs	r2, #16
 8008892:	2100      	movs	r1, #0
 8008894:	4864      	ldr	r0, [pc, #400]	@ (8008a28 <Loop+0x28c>)
 8008896:	f00a fe3f 	bl	8013518 <strtol>
 800889a:	4603      	mov	r3, r0
 800889c:	b2da      	uxtb	r2, r3
 800889e:	4b64      	ldr	r3, [pc, #400]	@ (8008a30 <Loop+0x294>)
 80088a0:	701a      	strb	r2, [r3, #0]
		//		y4 = (uint8_t) strtol(v_y4, NULL, 16);




		line[16] = y12;
 80088a2:	4b62      	ldr	r3, [pc, #392]	@ (8008a2c <Loop+0x290>)
 80088a4:	781a      	ldrb	r2, [r3, #0]
 80088a6:	4b63      	ldr	r3, [pc, #396]	@ (8008a34 <Loop+0x298>)
 80088a8:	741a      	strb	r2, [r3, #16]
		line[17] = y2;
 80088aa:	4b61      	ldr	r3, [pc, #388]	@ (8008a30 <Loop+0x294>)
 80088ac:	781a      	ldrb	r2, [r3, #0]
 80088ae:	4b61      	ldr	r3, [pc, #388]	@ (8008a34 <Loop+0x298>)
 80088b0:	745a      	strb	r2, [r3, #17]
		line[18] = a1;
 80088b2:	4b56      	ldr	r3, [pc, #344]	@ (8008a0c <Loop+0x270>)
 80088b4:	781a      	ldrb	r2, [r3, #0]
 80088b6:	4b5f      	ldr	r3, [pc, #380]	@ (8008a34 <Loop+0x298>)
 80088b8:	749a      	strb	r2, [r3, #18]
		line[19] = a2;
 80088ba:	4b55      	ldr	r3, [pc, #340]	@ (8008a10 <Loop+0x274>)
 80088bc:	781a      	ldrb	r2, [r3, #0]
 80088be:	4b5d      	ldr	r3, [pc, #372]	@ (8008a34 <Loop+0x298>)
 80088c0:	74da      	strb	r2, [r3, #19]
		line_graph[16] = y12;
 80088c2:	4b5a      	ldr	r3, [pc, #360]	@ (8008a2c <Loop+0x290>)
 80088c4:	781a      	ldrb	r2, [r3, #0]
 80088c6:	4b5c      	ldr	r3, [pc, #368]	@ (8008a38 <Loop+0x29c>)
 80088c8:	741a      	strb	r2, [r3, #16]
		line_graph[17] = y2;
 80088ca:	4b59      	ldr	r3, [pc, #356]	@ (8008a30 <Loop+0x294>)
 80088cc:	781a      	ldrb	r2, [r3, #0]
 80088ce:	4b5a      	ldr	r3, [pc, #360]	@ (8008a38 <Loop+0x29c>)
 80088d0:	745a      	strb	r2, [r3, #17]
		line_graph[18] = a1;
 80088d2:	4b4e      	ldr	r3, [pc, #312]	@ (8008a0c <Loop+0x270>)
 80088d4:	781a      	ldrb	r2, [r3, #0]
 80088d6:	4b58      	ldr	r3, [pc, #352]	@ (8008a38 <Loop+0x29c>)
 80088d8:	749a      	strb	r2, [r3, #18]
		line_graph[19] = a2;
 80088da:	4b4d      	ldr	r3, [pc, #308]	@ (8008a10 <Loop+0x274>)
 80088dc:	781a      	ldrb	r2, [r3, #0]
 80088de:	4b56      	ldr	r3, [pc, #344]	@ (8008a38 <Loop+0x29c>)
 80088e0:	74da      	strb	r2, [r3, #19]
		line_graph[20] = 0x02;
 80088e2:	4b55      	ldr	r3, [pc, #340]	@ (8008a38 <Loop+0x29c>)
 80088e4:	2202      	movs	r2, #2
 80088e6:	751a      	strb	r2, [r3, #20]
		line_graph[21] = 0xA2;
 80088e8:	4b53      	ldr	r3, [pc, #332]	@ (8008a38 <Loop+0x29c>)
 80088ea:	22a2      	movs	r2, #162	@ 0xa2
 80088ec:	755a      	strb	r2, [r3, #21]
		line_graph[22] = 0x01;
 80088ee:	4b52      	ldr	r3, [pc, #328]	@ (8008a38 <Loop+0x29c>)
 80088f0:	2201      	movs	r2, #1
 80088f2:	759a      	strb	r2, [r3, #22]
		line_graph[23] = 0x06;
 80088f4:	4b50      	ldr	r3, [pc, #320]	@ (8008a38 <Loop+0x29c>)
 80088f6:	2206      	movs	r2, #6
 80088f8:	75da      	strb	r2, [r3, #23]

		line_gr8[16] = y12;
 80088fa:	4b4c      	ldr	r3, [pc, #304]	@ (8008a2c <Loop+0x290>)
 80088fc:	781a      	ldrb	r2, [r3, #0]
 80088fe:	4b4f      	ldr	r3, [pc, #316]	@ (8008a3c <Loop+0x2a0>)
 8008900:	741a      	strb	r2, [r3, #16]
		line_gr8[17] = y2;
 8008902:	4b4b      	ldr	r3, [pc, #300]	@ (8008a30 <Loop+0x294>)
 8008904:	781a      	ldrb	r2, [r3, #0]
 8008906:	4b4d      	ldr	r3, [pc, #308]	@ (8008a3c <Loop+0x2a0>)
 8008908:	745a      	strb	r2, [r3, #17]
		line_gr8[18] = a1;
 800890a:	4b40      	ldr	r3, [pc, #256]	@ (8008a0c <Loop+0x270>)
 800890c:	781a      	ldrb	r2, [r3, #0]
 800890e:	4b4b      	ldr	r3, [pc, #300]	@ (8008a3c <Loop+0x2a0>)
 8008910:	749a      	strb	r2, [r3, #18]
		line_gr8[19] = a2;
 8008912:	4b3f      	ldr	r3, [pc, #252]	@ (8008a10 <Loop+0x274>)
 8008914:	781a      	ldrb	r2, [r3, #0]
 8008916:	4b49      	ldr	r3, [pc, #292]	@ (8008a3c <Loop+0x2a0>)
 8008918:	74da      	strb	r2, [r3, #19]
		line_gr8[20] = 0x02;
 800891a:	4b48      	ldr	r3, [pc, #288]	@ (8008a3c <Loop+0x2a0>)
 800891c:	2202      	movs	r2, #2
 800891e:	751a      	strb	r2, [r3, #20]
		line_gr8[21] = 0xA2;
 8008920:	4b46      	ldr	r3, [pc, #280]	@ (8008a3c <Loop+0x2a0>)
 8008922:	22a2      	movs	r2, #162	@ 0xa2
 8008924:	755a      	strb	r2, [r3, #21]
		line_gr8[22] = 0x01;
 8008926:	4b45      	ldr	r3, [pc, #276]	@ (8008a3c <Loop+0x2a0>)
 8008928:	2201      	movs	r2, #1
 800892a:	759a      	strb	r2, [r3, #22]
		line_gr8[23] = 0x07;
 800892c:	4b43      	ldr	r3, [pc, #268]	@ (8008a3c <Loop+0x2a0>)
 800892e:	2207      	movs	r2, #7
 8008930:	75da      	strb	r2, [r3, #23]
		line_gr8[24] = y12;
 8008932:	4b3e      	ldr	r3, [pc, #248]	@ (8008a2c <Loop+0x290>)
 8008934:	781a      	ldrb	r2, [r3, #0]
 8008936:	4b41      	ldr	r3, [pc, #260]	@ (8008a3c <Loop+0x2a0>)
 8008938:	761a      	strb	r2, [r3, #24]
		line_gr8[25] = y2;
 800893a:	4b3d      	ldr	r3, [pc, #244]	@ (8008a30 <Loop+0x294>)
 800893c:	781a      	ldrb	r2, [r3, #0]
 800893e:	4b3f      	ldr	r3, [pc, #252]	@ (8008a3c <Loop+0x2a0>)
 8008940:	765a      	strb	r2, [r3, #25]
		line_gr8[26] = a1;
 8008942:	4b32      	ldr	r3, [pc, #200]	@ (8008a0c <Loop+0x270>)
 8008944:	781a      	ldrb	r2, [r3, #0]
 8008946:	4b3d      	ldr	r3, [pc, #244]	@ (8008a3c <Loop+0x2a0>)
 8008948:	769a      	strb	r2, [r3, #26]
		line_gr8[27] = a2 + 1;
 800894a:	4b31      	ldr	r3, [pc, #196]	@ (8008a10 <Loop+0x274>)
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	3301      	adds	r3, #1
 8008950:	b2da      	uxtb	r2, r3
 8008952:	4b3a      	ldr	r3, [pc, #232]	@ (8008a3c <Loop+0x2a0>)
 8008954:	76da      	strb	r2, [r3, #27]
		line_gr8[28] = 0x02;
 8008956:	4b39      	ldr	r3, [pc, #228]	@ (8008a3c <Loop+0x2a0>)
 8008958:	2202      	movs	r2, #2
 800895a:	771a      	strb	r2, [r3, #28]
		line_gr8[29] = 0xA2;
 800895c:	4b37      	ldr	r3, [pc, #220]	@ (8008a3c <Loop+0x2a0>)
 800895e:	22a2      	movs	r2, #162	@ 0xa2
 8008960:	775a      	strb	r2, [r3, #29]
		line_gr8[30] = 0x01;
 8008962:	4b36      	ldr	r3, [pc, #216]	@ (8008a3c <Loop+0x2a0>)
 8008964:	2201      	movs	r2, #1
 8008966:	779a      	strb	r2, [r3, #30]
		line_gr8[31] = 0x08;
 8008968:	4b34      	ldr	r3, [pc, #208]	@ (8008a3c <Loop+0x2a0>)
 800896a:	2208      	movs	r2, #8
 800896c:	77da      	strb	r2, [r3, #31]
		line_gr8[32] = y12;
 800896e:	4b2f      	ldr	r3, [pc, #188]	@ (8008a2c <Loop+0x290>)
 8008970:	781a      	ldrb	r2, [r3, #0]
 8008972:	4b32      	ldr	r3, [pc, #200]	@ (8008a3c <Loop+0x2a0>)
 8008974:	f883 2020 	strb.w	r2, [r3, #32]
		line_gr8[33] = y2;
 8008978:	4b2d      	ldr	r3, [pc, #180]	@ (8008a30 <Loop+0x294>)
 800897a:	781a      	ldrb	r2, [r3, #0]
 800897c:	4b2f      	ldr	r3, [pc, #188]	@ (8008a3c <Loop+0x2a0>)
 800897e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		line_gr8[34] = a1;
 8008982:	4b22      	ldr	r3, [pc, #136]	@ (8008a0c <Loop+0x270>)
 8008984:	781a      	ldrb	r2, [r3, #0]
 8008986:	4b2d      	ldr	r3, [pc, #180]	@ (8008a3c <Loop+0x2a0>)
 8008988:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		line_gr8[35] = a2 + 2;
 800898c:	4b20      	ldr	r3, [pc, #128]	@ (8008a10 <Loop+0x274>)
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	3302      	adds	r3, #2
 8008992:	b2da      	uxtb	r2, r3
 8008994:	4b29      	ldr	r3, [pc, #164]	@ (8008a3c <Loop+0x2a0>)
 8008996:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		line_gr8[36] = 0x02;
 800899a:	4b28      	ldr	r3, [pc, #160]	@ (8008a3c <Loop+0x2a0>)
 800899c:	2202      	movs	r2, #2
 800899e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		line_gr8[37] = 0xA2;
 80089a2:	4b26      	ldr	r3, [pc, #152]	@ (8008a3c <Loop+0x2a0>)
 80089a4:	22a2      	movs	r2, #162	@ 0xa2
 80089a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
		line_gr8[38] = 0x01;
 80089aa:	4b24      	ldr	r3, [pc, #144]	@ (8008a3c <Loop+0x2a0>)
 80089ac:	2201      	movs	r2, #1
 80089ae:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		line_gr8[39] = 0x09;
 80089b2:	4b22      	ldr	r3, [pc, #136]	@ (8008a3c <Loop+0x2a0>)
 80089b4:	2209      	movs	r2, #9
 80089b6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		line_gr8[40] = y12;
 80089ba:	4b1c      	ldr	r3, [pc, #112]	@ (8008a2c <Loop+0x290>)
 80089bc:	781a      	ldrb	r2, [r3, #0]
 80089be:	4b1f      	ldr	r3, [pc, #124]	@ (8008a3c <Loop+0x2a0>)
 80089c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		line_gr8[41] = y2;
 80089c4:	4b1a      	ldr	r3, [pc, #104]	@ (8008a30 <Loop+0x294>)
 80089c6:	781a      	ldrb	r2, [r3, #0]
 80089c8:	4b1c      	ldr	r3, [pc, #112]	@ (8008a3c <Loop+0x2a0>)
 80089ca:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		line_gr8[42] = a1;
 80089ce:	4b0f      	ldr	r3, [pc, #60]	@ (8008a0c <Loop+0x270>)
 80089d0:	781a      	ldrb	r2, [r3, #0]
 80089d2:	4b1a      	ldr	r3, [pc, #104]	@ (8008a3c <Loop+0x2a0>)
 80089d4:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		line_gr8[43] = a2 + 3;
 80089d8:	4b0d      	ldr	r3, [pc, #52]	@ (8008a10 <Loop+0x274>)
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	3303      	adds	r3, #3
 80089de:	b2da      	uxtb	r2, r3
 80089e0:	4b16      	ldr	r3, [pc, #88]	@ (8008a3c <Loop+0x2a0>)
 80089e2:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

		for (int a = 0; a < 46; a++){
 80089e6:	2300      	movs	r3, #0
 80089e8:	60fb      	str	r3, [r7, #12]
 80089ea:	e038      	b.n	8008a5e <Loop+0x2c2>
 80089ec:	20001144 	.word	0x20001144
 80089f0:	43830000 	.word	0x43830000
 80089f4:	2000113c 	.word	0x2000113c
 80089f8:	08014124 	.word	0x08014124
 80089fc:	200016e8 	.word	0x200016e8
 8008a00:	08014128 	.word	0x08014128
 8008a04:	200016f0 	.word	0x200016f0
 8008a08:	200016f4 	.word	0x200016f4
 8008a0c:	200016f7 	.word	0x200016f7
 8008a10:	200016f8 	.word	0x200016f8
 8008a14:	20001148 	.word	0x20001148
 8008a18:	44284000 	.word	0x44284000
 8008a1c:	20001140 	.word	0x20001140
 8008a20:	200016fc 	.word	0x200016fc
 8008a24:	20001704 	.word	0x20001704
 8008a28:	20001708 	.word	0x20001708
 8008a2c:	2000170b 	.word	0x2000170b
 8008a30:	2000170c 	.word	0x2000170c
 8008a34:	20000060 	.word	0x20000060
 8008a38:	20000078 	.word	0x20000078
 8008a3c:	20000094 	.word	0x20000094
			line_graph2[a] = line_gr8[a];
 8008a40:	4aa4      	ldr	r2, [pc, #656]	@ (8008cd4 <Loop+0x538>)
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	4413      	add	r3, r2
 8008a46:	7819      	ldrb	r1, [r3, #0]
 8008a48:	4aa3      	ldr	r2, [pc, #652]	@ (8008cd8 <Loop+0x53c>)
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	4413      	add	r3, r2
 8008a4e:	460a      	mov	r2, r1
 8008a50:	701a      	strb	r2, [r3, #0]
			loop_flag = 1;
 8008a52:	4ba2      	ldr	r3, [pc, #648]	@ (8008cdc <Loop+0x540>)
 8008a54:	2201      	movs	r2, #1
 8008a56:	701a      	strb	r2, [r3, #0]
		for (int a = 0; a < 46; a++){
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	60fb      	str	r3, [r7, #12]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2b2d      	cmp	r3, #45	@ 0x2d
 8008a62:	dded      	ble.n	8008a40 <Loop+0x2a4>
		}

		HAL_UART_Transmit(&huart1, line_graph2, sizeof(line_graph2), 6);
 8008a64:	2306      	movs	r3, #6
 8008a66:	222e      	movs	r2, #46	@ 0x2e
 8008a68:	499b      	ldr	r1, [pc, #620]	@ (8008cd8 <Loop+0x53c>)
 8008a6a:	489d      	ldr	r0, [pc, #628]	@ (8008ce0 <Loop+0x544>)
 8008a6c:	f006 f952 	bl	800ed14 <HAL_UART_Transmit>

		if (VT_UPDATE_FLAG == 0){
 8008a70:	4b9c      	ldr	r3, [pc, #624]	@ (8008ce4 <Loop+0x548>)
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	f083 0301 	eor.w	r3, r3, #1
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d025      	beq.n	8008aca <Loop+0x32e>
			m1 = y12;
 8008a7e:	4b9a      	ldr	r3, [pc, #616]	@ (8008ce8 <Loop+0x54c>)
 8008a80:	781a      	ldrb	r2, [r3, #0]
 8008a82:	4b9a      	ldr	r3, [pc, #616]	@ (8008cec <Loop+0x550>)
 8008a84:	701a      	strb	r2, [r3, #0]
			m2 = y2;
 8008a86:	4b9a      	ldr	r3, [pc, #616]	@ (8008cf0 <Loop+0x554>)
 8008a88:	781a      	ldrb	r2, [r3, #0]
 8008a8a:	4b9a      	ldr	r3, [pc, #616]	@ (8008cf4 <Loop+0x558>)
 8008a8c:	701a      	strb	r2, [r3, #0]
			n1 = a1;
 8008a8e:	4b9a      	ldr	r3, [pc, #616]	@ (8008cf8 <Loop+0x55c>)
 8008a90:	781a      	ldrb	r2, [r3, #0]
 8008a92:	4b9a      	ldr	r3, [pc, #616]	@ (8008cfc <Loop+0x560>)
 8008a94:	701a      	strb	r2, [r3, #0]
			n2 = a2;
 8008a96:	4b9a      	ldr	r3, [pc, #616]	@ (8008d00 <Loop+0x564>)
 8008a98:	781a      	ldrb	r2, [r3, #0]
 8008a9a:	4b9a      	ldr	r3, [pc, #616]	@ (8008d04 <Loop+0x568>)
 8008a9c:	701a      	strb	r2, [r3, #0]
			o1 = p_x;
 8008a9e:	4b9a      	ldr	r3, [pc, #616]	@ (8008d08 <Loop+0x56c>)
 8008aa0:	edd3 7a00 	vldr	s15, [r3]
 8008aa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008aa8:	edc7 7a00 	vstr	s15, [r7]
 8008aac:	783b      	ldrb	r3, [r7, #0]
 8008aae:	b2da      	uxtb	r2, r3
 8008ab0:	4b96      	ldr	r3, [pc, #600]	@ (8008d0c <Loop+0x570>)
 8008ab2:	701a      	strb	r2, [r3, #0]
			o2 = v_y;
 8008ab4:	4b96      	ldr	r3, [pc, #600]	@ (8008d10 <Loop+0x574>)
 8008ab6:	edd3 7a00 	vldr	s15, [r3]
 8008aba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008abe:	edc7 7a00 	vstr	s15, [r7]
 8008ac2:	783b      	ldrb	r3, [r7, #0]
 8008ac4:	b2da      	uxtb	r2, r3
 8008ac6:	4b93      	ldr	r3, [pc, #588]	@ (8008d14 <Loop+0x578>)
 8008ac8:	701a      	strb	r2, [r3, #0]
			//			HAL_UART_Transmit(&huart1, line2, sizeof(line2), HAL_MAX_DELAY);

		}
		if(VT_UPDATE_FLAG == 1){
 8008aca:	4b86      	ldr	r3, [pc, #536]	@ (8008ce4 <Loop+0x548>)
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	f000 817d 	beq.w	8008dce <Loop+0x632>
			n1n2 = (n1<<8) | n2;
 8008ad4:	4b89      	ldr	r3, [pc, #548]	@ (8008cfc <Loop+0x560>)
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	021b      	lsls	r3, r3, #8
 8008ada:	4a8a      	ldr	r2, [pc, #552]	@ (8008d04 <Loop+0x568>)
 8008adc:	7812      	ldrb	r2, [r2, #0]
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	4b8d      	ldr	r3, [pc, #564]	@ (8008d18 <Loop+0x57c>)
 8008ae4:	601a      	str	r2, [r3, #0]
			m1m2 = (m1<<8) | m2;
 8008ae6:	4b81      	ldr	r3, [pc, #516]	@ (8008cec <Loop+0x550>)
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	021b      	lsls	r3, r3, #8
 8008aec:	4a81      	ldr	r2, [pc, #516]	@ (8008cf4 <Loop+0x558>)
 8008aee:	7812      	ldrb	r2, [r2, #0]
 8008af0:	4313      	orrs	r3, r2
 8008af2:	461a      	mov	r2, r3
 8008af4:	4b89      	ldr	r3, [pc, #548]	@ (8008d1c <Loop+0x580>)
 8008af6:	601a      	str	r2, [r3, #0]
			bc = 262 - v_y;
 8008af8:	4b85      	ldr	r3, [pc, #532]	@ (8008d10 <Loop+0x574>)
 8008afa:	edd3 7a00 	vldr	s15, [r3]
 8008afe:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8008d20 <Loop+0x584>
 8008b02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b0a:	ee17 3a90 	vmov	r3, s15
 8008b0e:	b29a      	uxth	r2, r3
 8008b10:	4b84      	ldr	r3, [pc, #528]	@ (8008d24 <Loop+0x588>)
 8008b12:	801a      	strh	r2, [r3, #0]
			sprintf(v_x2String, "%X", bc);
 8008b14:	4b83      	ldr	r3, [pc, #524]	@ (8008d24 <Loop+0x588>)
 8008b16:	881b      	ldrh	r3, [r3, #0]
 8008b18:	461a      	mov	r2, r3
 8008b1a:	4983      	ldr	r1, [pc, #524]	@ (8008d28 <Loop+0x58c>)
 8008b1c:	4883      	ldr	r0, [pc, #524]	@ (8008d2c <Loop+0x590>)
 8008b1e:	f00a fd05 	bl	801352c <siprintf>
			sprintf("hex %s", v_x2String);
 8008b22:	4982      	ldr	r1, [pc, #520]	@ (8008d2c <Loop+0x590>)
 8008b24:	4882      	ldr	r0, [pc, #520]	@ (8008d30 <Loop+0x594>)
 8008b26:	f00a fd01 	bl	801352c <siprintf>
			v_x2[0] = '0';
 8008b2a:	4b82      	ldr	r3, [pc, #520]	@ (8008d34 <Loop+0x598>)
 8008b2c:	2230      	movs	r2, #48	@ 0x30
 8008b2e:	701a      	strb	r2, [r3, #0]
			v_x2[1] = '0';
 8008b30:	4b80      	ldr	r3, [pc, #512]	@ (8008d34 <Loop+0x598>)
 8008b32:	2230      	movs	r2, #48	@ 0x30
 8008b34:	705a      	strb	r2, [r3, #1]
			v_x2[2] = '\0';
 8008b36:	4b7f      	ldr	r3, [pc, #508]	@ (8008d34 <Loop+0x598>)
 8008b38:	2200      	movs	r2, #0
 8008b3a:	709a      	strb	r2, [r3, #2]

			v_x4[0] = v_x2String[0];
 8008b3c:	4b7b      	ldr	r3, [pc, #492]	@ (8008d2c <Loop+0x590>)
 8008b3e:	781a      	ldrb	r2, [r3, #0]
 8008b40:	4b7d      	ldr	r3, [pc, #500]	@ (8008d38 <Loop+0x59c>)
 8008b42:	701a      	strb	r2, [r3, #0]
			v_x4[1] = v_x2String[1];
 8008b44:	4b79      	ldr	r3, [pc, #484]	@ (8008d2c <Loop+0x590>)
 8008b46:	785a      	ldrb	r2, [r3, #1]
 8008b48:	4b7b      	ldr	r3, [pc, #492]	@ (8008d38 <Loop+0x59c>)
 8008b4a:	705a      	strb	r2, [r3, #1]
			v_x4[2] = '\0';
 8008b4c:	4b7a      	ldr	r3, [pc, #488]	@ (8008d38 <Loop+0x59c>)
 8008b4e:	2200      	movs	r2, #0
 8008b50:	709a      	strb	r2, [r3, #2]
			a3 = (uint8_t) strtol(v_x2, NULL, 16);
 8008b52:	2210      	movs	r2, #16
 8008b54:	2100      	movs	r1, #0
 8008b56:	4877      	ldr	r0, [pc, #476]	@ (8008d34 <Loop+0x598>)
 8008b58:	f00a fcde 	bl	8013518 <strtol>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	b2da      	uxtb	r2, r3
 8008b60:	4b76      	ldr	r3, [pc, #472]	@ (8008d3c <Loop+0x5a0>)
 8008b62:	701a      	strb	r2, [r3, #0]
			a4 = (uint8_t) strtol(v_x4, NULL, 16);
 8008b64:	2210      	movs	r2, #16
 8008b66:	2100      	movs	r1, #0
 8008b68:	4873      	ldr	r0, [pc, #460]	@ (8008d38 <Loop+0x59c>)
 8008b6a:	f00a fcd5 	bl	8013518 <strtol>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	b2da      	uxtb	r2, r3
 8008b72:	4b73      	ldr	r3, [pc, #460]	@ (8008d40 <Loop+0x5a4>)
 8008b74:	701a      	strb	r2, [r3, #0]

			de = 684 + p_x1;
 8008b76:	4b73      	ldr	r3, [pc, #460]	@ (8008d44 <Loop+0x5a8>)
 8008b78:	edd3 7a00 	vldr	s15, [r3]
 8008b7c:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8008d48 <Loop+0x5ac>
 8008b80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008b84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b88:	ee17 3a90 	vmov	r3, s15
 8008b8c:	b29a      	uxth	r2, r3
 8008b8e:	4b6f      	ldr	r3, [pc, #444]	@ (8008d4c <Loop+0x5b0>)
 8008b90:	801a      	strh	r2, [r3, #0]
			sprintf(v_y2String, "%X", de);
 8008b92:	4b6e      	ldr	r3, [pc, #440]	@ (8008d4c <Loop+0x5b0>)
 8008b94:	881b      	ldrh	r3, [r3, #0]
 8008b96:	461a      	mov	r2, r3
 8008b98:	4963      	ldr	r1, [pc, #396]	@ (8008d28 <Loop+0x58c>)
 8008b9a:	486d      	ldr	r0, [pc, #436]	@ (8008d50 <Loop+0x5b4>)
 8008b9c:	f00a fcc6 	bl	801352c <siprintf>
			sprintf("hex %s", v_y2String);
 8008ba0:	496b      	ldr	r1, [pc, #428]	@ (8008d50 <Loop+0x5b4>)
 8008ba2:	4863      	ldr	r0, [pc, #396]	@ (8008d30 <Loop+0x594>)
 8008ba4:	f00a fcc2 	bl	801352c <siprintf>
			v_y2[0] = '0';
 8008ba8:	4b6a      	ldr	r3, [pc, #424]	@ (8008d54 <Loop+0x5b8>)
 8008baa:	2230      	movs	r2, #48	@ 0x30
 8008bac:	701a      	strb	r2, [r3, #0]
			v_y2[1] = v_y2String[0];
 8008bae:	4b68      	ldr	r3, [pc, #416]	@ (8008d50 <Loop+0x5b4>)
 8008bb0:	781a      	ldrb	r2, [r3, #0]
 8008bb2:	4b68      	ldr	r3, [pc, #416]	@ (8008d54 <Loop+0x5b8>)
 8008bb4:	705a      	strb	r2, [r3, #1]
			v_y2[2] = '\0';
 8008bb6:	4b67      	ldr	r3, [pc, #412]	@ (8008d54 <Loop+0x5b8>)
 8008bb8:	2200      	movs	r2, #0
 8008bba:	709a      	strb	r2, [r3, #2]

			v_y4[0] = v_y2String[1];
 8008bbc:	4b64      	ldr	r3, [pc, #400]	@ (8008d50 <Loop+0x5b4>)
 8008bbe:	785a      	ldrb	r2, [r3, #1]
 8008bc0:	4b65      	ldr	r3, [pc, #404]	@ (8008d58 <Loop+0x5bc>)
 8008bc2:	701a      	strb	r2, [r3, #0]
			v_y4[1] = v_y2String[2];
 8008bc4:	4b62      	ldr	r3, [pc, #392]	@ (8008d50 <Loop+0x5b4>)
 8008bc6:	789a      	ldrb	r2, [r3, #2]
 8008bc8:	4b63      	ldr	r3, [pc, #396]	@ (8008d58 <Loop+0x5bc>)
 8008bca:	705a      	strb	r2, [r3, #1]
			v_y4[2] = '\0';
 8008bcc:	4b62      	ldr	r3, [pc, #392]	@ (8008d58 <Loop+0x5bc>)
 8008bce:	2200      	movs	r2, #0
 8008bd0:	709a      	strb	r2, [r3, #2]
			y3 = (uint8_t) strtol(v_y2, NULL, 16);
 8008bd2:	2210      	movs	r2, #16
 8008bd4:	2100      	movs	r1, #0
 8008bd6:	485f      	ldr	r0, [pc, #380]	@ (8008d54 <Loop+0x5b8>)
 8008bd8:	f00a fc9e 	bl	8013518 <strtol>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	b2da      	uxtb	r2, r3
 8008be0:	4b5e      	ldr	r3, [pc, #376]	@ (8008d5c <Loop+0x5c0>)
 8008be2:	701a      	strb	r2, [r3, #0]
			y4 = (uint8_t) strtol(v_y4, NULL, 16);
 8008be4:	2210      	movs	r2, #16
 8008be6:	2100      	movs	r1, #0
 8008be8:	485b      	ldr	r0, [pc, #364]	@ (8008d58 <Loop+0x5bc>)
 8008bea:	f00a fc95 	bl	8013518 <strtol>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	b2da      	uxtb	r2, r3
 8008bf2:	4b5b      	ldr	r3, [pc, #364]	@ (8008d60 <Loop+0x5c4>)
 8008bf4:	701a      	strb	r2, [r3, #0]
			//			line_graph3[19] = n2;
			//			line_graph3[20] = y3;
			//			line_graph3[21] = y4;
			//			line_graph3[22] = a3;
			//			line_graph3[23] = a4;
			line_gr81[16] = m1;
 8008bf6:	4b3d      	ldr	r3, [pc, #244]	@ (8008cec <Loop+0x550>)
 8008bf8:	781a      	ldrb	r2, [r3, #0]
 8008bfa:	4b5a      	ldr	r3, [pc, #360]	@ (8008d64 <Loop+0x5c8>)
 8008bfc:	741a      	strb	r2, [r3, #16]
			line_gr81[17] = m2;
 8008bfe:	4b3d      	ldr	r3, [pc, #244]	@ (8008cf4 <Loop+0x558>)
 8008c00:	781a      	ldrb	r2, [r3, #0]
 8008c02:	4b58      	ldr	r3, [pc, #352]	@ (8008d64 <Loop+0x5c8>)
 8008c04:	745a      	strb	r2, [r3, #17]
			line_gr81[18] = n1;
 8008c06:	4b3d      	ldr	r3, [pc, #244]	@ (8008cfc <Loop+0x560>)
 8008c08:	781a      	ldrb	r2, [r3, #0]
 8008c0a:	4b56      	ldr	r3, [pc, #344]	@ (8008d64 <Loop+0x5c8>)
 8008c0c:	749a      	strb	r2, [r3, #18]
			line_gr81[19] = n2;
 8008c0e:	4b3d      	ldr	r3, [pc, #244]	@ (8008d04 <Loop+0x568>)
 8008c10:	781a      	ldrb	r2, [r3, #0]
 8008c12:	4b54      	ldr	r3, [pc, #336]	@ (8008d64 <Loop+0x5c8>)
 8008c14:	74da      	strb	r2, [r3, #19]
			line_gr81[20] = y3;
 8008c16:	4b51      	ldr	r3, [pc, #324]	@ (8008d5c <Loop+0x5c0>)
 8008c18:	781a      	ldrb	r2, [r3, #0]
 8008c1a:	4b52      	ldr	r3, [pc, #328]	@ (8008d64 <Loop+0x5c8>)
 8008c1c:	751a      	strb	r2, [r3, #20]
			line_gr81[21] = y4;
 8008c1e:	4b50      	ldr	r3, [pc, #320]	@ (8008d60 <Loop+0x5c4>)
 8008c20:	781a      	ldrb	r2, [r3, #0]
 8008c22:	4b50      	ldr	r3, [pc, #320]	@ (8008d64 <Loop+0x5c8>)
 8008c24:	755a      	strb	r2, [r3, #21]
			line_gr81[22] = a3;
 8008c26:	4b45      	ldr	r3, [pc, #276]	@ (8008d3c <Loop+0x5a0>)
 8008c28:	781a      	ldrb	r2, [r3, #0]
 8008c2a:	4b4e      	ldr	r3, [pc, #312]	@ (8008d64 <Loop+0x5c8>)
 8008c2c:	759a      	strb	r2, [r3, #22]
			line_gr81[23] = a4+1;
 8008c2e:	4b44      	ldr	r3, [pc, #272]	@ (8008d40 <Loop+0x5a4>)
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	3301      	adds	r3, #1
 8008c34:	b2da      	uxtb	r2, r3
 8008c36:	4b4b      	ldr	r3, [pc, #300]	@ (8008d64 <Loop+0x5c8>)
 8008c38:	75da      	strb	r2, [r3, #23]
			line_gr81[24] = m1;
 8008c3a:	4b2c      	ldr	r3, [pc, #176]	@ (8008cec <Loop+0x550>)
 8008c3c:	781a      	ldrb	r2, [r3, #0]
 8008c3e:	4b49      	ldr	r3, [pc, #292]	@ (8008d64 <Loop+0x5c8>)
 8008c40:	761a      	strb	r2, [r3, #24]
			line_gr81[25] = m2;
 8008c42:	4b2c      	ldr	r3, [pc, #176]	@ (8008cf4 <Loop+0x558>)
 8008c44:	781a      	ldrb	r2, [r3, #0]
 8008c46:	4b47      	ldr	r3, [pc, #284]	@ (8008d64 <Loop+0x5c8>)
 8008c48:	765a      	strb	r2, [r3, #25]
			line_gr81[26] = n1;
 8008c4a:	4b2c      	ldr	r3, [pc, #176]	@ (8008cfc <Loop+0x560>)
 8008c4c:	781a      	ldrb	r2, [r3, #0]
 8008c4e:	4b45      	ldr	r3, [pc, #276]	@ (8008d64 <Loop+0x5c8>)
 8008c50:	769a      	strb	r2, [r3, #26]
			line_gr81[27] = n2+1;
 8008c52:	4b2c      	ldr	r3, [pc, #176]	@ (8008d04 <Loop+0x568>)
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	3301      	adds	r3, #1
 8008c58:	b2da      	uxtb	r2, r3
 8008c5a:	4b42      	ldr	r3, [pc, #264]	@ (8008d64 <Loop+0x5c8>)
 8008c5c:	76da      	strb	r2, [r3, #27]
			line_gr81[28] = y3;
 8008c5e:	4b3f      	ldr	r3, [pc, #252]	@ (8008d5c <Loop+0x5c0>)
 8008c60:	781a      	ldrb	r2, [r3, #0]
 8008c62:	4b40      	ldr	r3, [pc, #256]	@ (8008d64 <Loop+0x5c8>)
 8008c64:	771a      	strb	r2, [r3, #28]
			line_gr81[29] = y4;
 8008c66:	4b3e      	ldr	r3, [pc, #248]	@ (8008d60 <Loop+0x5c4>)
 8008c68:	781a      	ldrb	r2, [r3, #0]
 8008c6a:	4b3e      	ldr	r3, [pc, #248]	@ (8008d64 <Loop+0x5c8>)
 8008c6c:	775a      	strb	r2, [r3, #29]
			line_gr81[30] = a3;
 8008c6e:	4b33      	ldr	r3, [pc, #204]	@ (8008d3c <Loop+0x5a0>)
 8008c70:	781a      	ldrb	r2, [r3, #0]
 8008c72:	4b3c      	ldr	r3, [pc, #240]	@ (8008d64 <Loop+0x5c8>)
 8008c74:	779a      	strb	r2, [r3, #30]
			line_gr81[31] = a4+2;
 8008c76:	4b32      	ldr	r3, [pc, #200]	@ (8008d40 <Loop+0x5a4>)
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	3302      	adds	r3, #2
 8008c7c:	b2da      	uxtb	r2, r3
 8008c7e:	4b39      	ldr	r3, [pc, #228]	@ (8008d64 <Loop+0x5c8>)
 8008c80:	77da      	strb	r2, [r3, #31]
			line_gr81[32] = m1;
 8008c82:	4b1a      	ldr	r3, [pc, #104]	@ (8008cec <Loop+0x550>)
 8008c84:	781a      	ldrb	r2, [r3, #0]
 8008c86:	4b37      	ldr	r3, [pc, #220]	@ (8008d64 <Loop+0x5c8>)
 8008c88:	f883 2020 	strb.w	r2, [r3, #32]
			line_gr81[33] = m2;
 8008c8c:	4b19      	ldr	r3, [pc, #100]	@ (8008cf4 <Loop+0x558>)
 8008c8e:	781a      	ldrb	r2, [r3, #0]
 8008c90:	4b34      	ldr	r3, [pc, #208]	@ (8008d64 <Loop+0x5c8>)
 8008c92:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			line_gr81[34] = n1;
 8008c96:	4b19      	ldr	r3, [pc, #100]	@ (8008cfc <Loop+0x560>)
 8008c98:	781a      	ldrb	r2, [r3, #0]
 8008c9a:	4b32      	ldr	r3, [pc, #200]	@ (8008d64 <Loop+0x5c8>)
 8008c9c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
			line_gr81[35] = n2+2;
 8008ca0:	4b18      	ldr	r3, [pc, #96]	@ (8008d04 <Loop+0x568>)
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	3302      	adds	r3, #2
 8008ca6:	b2da      	uxtb	r2, r3
 8008ca8:	4b2e      	ldr	r3, [pc, #184]	@ (8008d64 <Loop+0x5c8>)
 8008caa:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
			line_gr81[36] = y3;
 8008cae:	4b2b      	ldr	r3, [pc, #172]	@ (8008d5c <Loop+0x5c0>)
 8008cb0:	781a      	ldrb	r2, [r3, #0]
 8008cb2:	4b2c      	ldr	r3, [pc, #176]	@ (8008d64 <Loop+0x5c8>)
 8008cb4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			line_gr81[37] = y4;
 8008cb8:	4b29      	ldr	r3, [pc, #164]	@ (8008d60 <Loop+0x5c4>)
 8008cba:	781a      	ldrb	r2, [r3, #0]
 8008cbc:	4b29      	ldr	r3, [pc, #164]	@ (8008d64 <Loop+0x5c8>)
 8008cbe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			line_gr81[38] = a3;
 8008cc2:	4b1e      	ldr	r3, [pc, #120]	@ (8008d3c <Loop+0x5a0>)
 8008cc4:	781a      	ldrb	r2, [r3, #0]
 8008cc6:	4b27      	ldr	r3, [pc, #156]	@ (8008d64 <Loop+0x5c8>)
 8008cc8:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			line_gr81[39] = a4+3;
 8008ccc:	4b1c      	ldr	r3, [pc, #112]	@ (8008d40 <Loop+0x5a4>)
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	e04a      	b.n	8008d68 <Loop+0x5cc>
 8008cd2:	bf00      	nop
 8008cd4:	20000094 	.word	0x20000094
 8008cd8:	2000161c 	.word	0x2000161c
 8008cdc:	20001735 	.word	0x20001735
 8008ce0:	20000fc0 	.word	0x20000fc0
 8008ce4:	200011fc 	.word	0x200011fc
 8008ce8:	2000170b 	.word	0x2000170b
 8008cec:	20001736 	.word	0x20001736
 8008cf0:	2000170c 	.word	0x2000170c
 8008cf4:	20001737 	.word	0x20001737
 8008cf8:	200016f7 	.word	0x200016f7
 8008cfc:	20001738 	.word	0x20001738
 8008d00:	200016f8 	.word	0x200016f8
 8008d04:	20001739 	.word	0x20001739
 8008d08:	20001148 	.word	0x20001148
 8008d0c:	2000173a 	.word	0x2000173a
 8008d10:	20001144 	.word	0x20001144
 8008d14:	2000173b 	.word	0x2000173b
 8008d18:	20001150 	.word	0x20001150
 8008d1c:	20001154 	.word	0x20001154
 8008d20:	43830000 	.word	0x43830000
 8008d24:	2000113e 	.word	0x2000113e
 8008d28:	08014124 	.word	0x08014124
 8008d2c:	20001710 	.word	0x20001710
 8008d30:	08014128 	.word	0x08014128
 8008d34:	20001718 	.word	0x20001718
 8008d38:	2000171c 	.word	0x2000171c
 8008d3c:	2000171f 	.word	0x2000171f
 8008d40:	20001720 	.word	0x20001720
 8008d44:	2000114c 	.word	0x2000114c
 8008d48:	442b0000 	.word	0x442b0000
 8008d4c:	20001142 	.word	0x20001142
 8008d50:	20001724 	.word	0x20001724
 8008d54:	2000172c 	.word	0x2000172c
 8008d58:	20001730 	.word	0x20001730
 8008d5c:	20001733 	.word	0x20001733
 8008d60:	20001734 	.word	0x20001734
 8008d64:	200000c4 	.word	0x200000c4
 8008d68:	3303      	adds	r3, #3
 8008d6a:	b2da      	uxtb	r2, r3
 8008d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8008dd8 <Loop+0x63c>)
 8008d6e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			line_gr81[40] = m1;
 8008d72:	4b1a      	ldr	r3, [pc, #104]	@ (8008ddc <Loop+0x640>)
 8008d74:	781a      	ldrb	r2, [r3, #0]
 8008d76:	4b18      	ldr	r3, [pc, #96]	@ (8008dd8 <Loop+0x63c>)
 8008d78:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			line_gr81[41] = m2;
 8008d7c:	4b18      	ldr	r3, [pc, #96]	@ (8008de0 <Loop+0x644>)
 8008d7e:	781a      	ldrb	r2, [r3, #0]
 8008d80:	4b15      	ldr	r3, [pc, #84]	@ (8008dd8 <Loop+0x63c>)
 8008d82:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			line_gr81[42] = n1;
 8008d86:	4b17      	ldr	r3, [pc, #92]	@ (8008de4 <Loop+0x648>)
 8008d88:	781a      	ldrb	r2, [r3, #0]
 8008d8a:	4b13      	ldr	r3, [pc, #76]	@ (8008dd8 <Loop+0x63c>)
 8008d8c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			line_gr81[43] = n2+3;
 8008d90:	4b15      	ldr	r3, [pc, #84]	@ (8008de8 <Loop+0x64c>)
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	3303      	adds	r3, #3
 8008d96:	b2da      	uxtb	r2, r3
 8008d98:	4b0f      	ldr	r3, [pc, #60]	@ (8008dd8 <Loop+0x63c>)
 8008d9a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

			for (int a = 0; a < 46; a++){
 8008d9e:	2300      	movs	r3, #0
 8008da0:	60bb      	str	r3, [r7, #8]
 8008da2:	e00b      	b.n	8008dbc <Loop+0x620>
				//						line4[a] = line3[a];
				//				line_graph2[a] = line_graph3[a];
				line_graph2[a] = line_gr81[a];
 8008da4:	4a0c      	ldr	r2, [pc, #48]	@ (8008dd8 <Loop+0x63c>)
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	4413      	add	r3, r2
 8008daa:	7819      	ldrb	r1, [r3, #0]
 8008dac:	4a0f      	ldr	r2, [pc, #60]	@ (8008dec <Loop+0x650>)
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	4413      	add	r3, r2
 8008db2:	460a      	mov	r2, r1
 8008db4:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 46; a++){
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	3301      	adds	r3, #1
 8008dba:	60bb      	str	r3, [r7, #8]
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	2b2d      	cmp	r3, #45	@ 0x2d
 8008dc0:	ddf0      	ble.n	8008da4 <Loop+0x608>
			}
			HAL_UART_Transmit(&huart1, line_graph2, sizeof(line_graph2), 6);
 8008dc2:	2306      	movs	r3, #6
 8008dc4:	222e      	movs	r2, #46	@ 0x2e
 8008dc6:	4909      	ldr	r1, [pc, #36]	@ (8008dec <Loop+0x650>)
 8008dc8:	4809      	ldr	r0, [pc, #36]	@ (8008df0 <Loop+0x654>)
 8008dca:	f005 ffa3 	bl	800ed14 <HAL_UART_Transmit>
		}

		vTaskDelay(pdMS_TO_TICKS(100));
 8008dce:	2064      	movs	r0, #100	@ 0x64
 8008dd0:	f008 fb84 	bl	80114dc <vTaskDelay>
		ab = 262 - v_y;
 8008dd4:	e4e6      	b.n	80087a4 <Loop+0x8>
 8008dd6:	bf00      	nop
 8008dd8:	200000c4 	.word	0x200000c4
 8008ddc:	20001736 	.word	0x20001736
 8008de0:	20001737 	.word	0x20001737
 8008de4:	20001738 	.word	0x20001738
 8008de8:	20001739 	.word	0x20001739
 8008dec:	2000161c 	.word	0x2000161c
 8008df0:	20000fc0 	.word	0x20000fc0

08008df4 <FVG>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_FVG */
void FVG(void const * argument)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b084      	sub	sp, #16
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN FVG */
	/* Infinite loop */
	for(;;)
	{
		vt_xc = 676 + vt_x;
 8008dfc:	4b71      	ldr	r3, [pc, #452]	@ (8008fc4 <FVG+0x1d0>)
 8008dfe:	edd3 7a00 	vldr	s15, [r3]
 8008e02:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 8008fc8 <FVG+0x1d4>
 8008e06:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008e0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e0e:	ee17 3a90 	vmov	r3, s15
 8008e12:	b29a      	uxth	r2, r3
 8008e14:	4b6d      	ldr	r3, [pc, #436]	@ (8008fcc <FVG+0x1d8>)
 8008e16:	801a      	strh	r2, [r3, #0]
		sprintf(vt_xString, "%X", vt_xc);
 8008e18:	4b6c      	ldr	r3, [pc, #432]	@ (8008fcc <FVG+0x1d8>)
 8008e1a:	881b      	ldrh	r3, [r3, #0]
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	496c      	ldr	r1, [pc, #432]	@ (8008fd0 <FVG+0x1dc>)
 8008e20:	486c      	ldr	r0, [pc, #432]	@ (8008fd4 <FVG+0x1e0>)
 8008e22:	f00a fb83 	bl	801352c <siprintf>
		sprintf("hex %s", vt_xString);
 8008e26:	496b      	ldr	r1, [pc, #428]	@ (8008fd4 <FVG+0x1e0>)
 8008e28:	486b      	ldr	r0, [pc, #428]	@ (8008fd8 <FVG+0x1e4>)
 8008e2a:	f00a fb7f 	bl	801352c <siprintf>

		vt_x1[0] = '0';
 8008e2e:	4b6b      	ldr	r3, [pc, #428]	@ (8008fdc <FVG+0x1e8>)
 8008e30:	2230      	movs	r2, #48	@ 0x30
 8008e32:	701a      	strb	r2, [r3, #0]
		vt_x1[1] = vt_xString[0];
 8008e34:	4b67      	ldr	r3, [pc, #412]	@ (8008fd4 <FVG+0x1e0>)
 8008e36:	781a      	ldrb	r2, [r3, #0]
 8008e38:	4b68      	ldr	r3, [pc, #416]	@ (8008fdc <FVG+0x1e8>)
 8008e3a:	705a      	strb	r2, [r3, #1]
		vt_x1[2] = '\0';
 8008e3c:	4b67      	ldr	r3, [pc, #412]	@ (8008fdc <FVG+0x1e8>)
 8008e3e:	2200      	movs	r2, #0
 8008e40:	709a      	strb	r2, [r3, #2]

		vt_x3[0] = vt_xString[1];
 8008e42:	4b64      	ldr	r3, [pc, #400]	@ (8008fd4 <FVG+0x1e0>)
 8008e44:	785a      	ldrb	r2, [r3, #1]
 8008e46:	4b66      	ldr	r3, [pc, #408]	@ (8008fe0 <FVG+0x1ec>)
 8008e48:	701a      	strb	r2, [r3, #0]
		vt_x3[1] = vt_xString[2];
 8008e4a:	4b62      	ldr	r3, [pc, #392]	@ (8008fd4 <FVG+0x1e0>)
 8008e4c:	789a      	ldrb	r2, [r3, #2]
 8008e4e:	4b64      	ldr	r3, [pc, #400]	@ (8008fe0 <FVG+0x1ec>)
 8008e50:	705a      	strb	r2, [r3, #1]
		vt_x3[2] = '\0';
 8008e52:	4b63      	ldr	r3, [pc, #396]	@ (8008fe0 <FVG+0x1ec>)
 8008e54:	2200      	movs	r2, #0
 8008e56:	709a      	strb	r2, [r3, #2]

		v1 = (uint8_t) strtol(vt_x1, NULL, 16);
 8008e58:	2210      	movs	r2, #16
 8008e5a:	2100      	movs	r1, #0
 8008e5c:	485f      	ldr	r0, [pc, #380]	@ (8008fdc <FVG+0x1e8>)
 8008e5e:	f00a fb5b 	bl	8013518 <strtol>
 8008e62:	4603      	mov	r3, r0
 8008e64:	b2da      	uxtb	r2, r3
 8008e66:	4b5f      	ldr	r3, [pc, #380]	@ (8008fe4 <FVG+0x1f0>)
 8008e68:	701a      	strb	r2, [r3, #0]
		v2 = (uint8_t) strtol(vt_x3, NULL, 16);
 8008e6a:	2210      	movs	r2, #16
 8008e6c:	2100      	movs	r1, #0
 8008e6e:	485c      	ldr	r0, [pc, #368]	@ (8008fe0 <FVG+0x1ec>)
 8008e70:	f00a fb52 	bl	8013518 <strtol>
 8008e74:	4603      	mov	r3, r0
 8008e76:	b2da      	uxtb	r2, r3
 8008e78:	4b5b      	ldr	r3, [pc, #364]	@ (8008fe8 <FVG+0x1f4>)
 8008e7a:	701a      	strb	r2, [r3, #0]

		fl_yc = 422 - fl_y;
 8008e7c:	4b5b      	ldr	r3, [pc, #364]	@ (8008fec <FVG+0x1f8>)
 8008e7e:	edd3 7a00 	vldr	s15, [r3]
 8008e82:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8008ff0 <FVG+0x1fc>
 8008e86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e8e:	ee17 3a90 	vmov	r3, s15
 8008e92:	b29a      	uxth	r2, r3
 8008e94:	4b57      	ldr	r3, [pc, #348]	@ (8008ff4 <FVG+0x200>)
 8008e96:	801a      	strh	r2, [r3, #0]
		sprintf(f_yString, "%X", fl_yc);
 8008e98:	4b56      	ldr	r3, [pc, #344]	@ (8008ff4 <FVG+0x200>)
 8008e9a:	881b      	ldrh	r3, [r3, #0]
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	494c      	ldr	r1, [pc, #304]	@ (8008fd0 <FVG+0x1dc>)
 8008ea0:	4855      	ldr	r0, [pc, #340]	@ (8008ff8 <FVG+0x204>)
 8008ea2:	f00a fb43 	bl	801352c <siprintf>
		sprintf("hex %s", f_yString);
 8008ea6:	4954      	ldr	r1, [pc, #336]	@ (8008ff8 <FVG+0x204>)
 8008ea8:	484b      	ldr	r0, [pc, #300]	@ (8008fd8 <FVG+0x1e4>)
 8008eaa:	f00a fb3f 	bl	801352c <siprintf>

		f_y1[0] = '0';
 8008eae:	4b53      	ldr	r3, [pc, #332]	@ (8008ffc <FVG+0x208>)
 8008eb0:	2230      	movs	r2, #48	@ 0x30
 8008eb2:	701a      	strb	r2, [r3, #0]
		f_y1[1] = f_yString[0];
 8008eb4:	4b50      	ldr	r3, [pc, #320]	@ (8008ff8 <FVG+0x204>)
 8008eb6:	781a      	ldrb	r2, [r3, #0]
 8008eb8:	4b50      	ldr	r3, [pc, #320]	@ (8008ffc <FVG+0x208>)
 8008eba:	705a      	strb	r2, [r3, #1]
		f_y1[2] = '\0';
 8008ebc:	4b4f      	ldr	r3, [pc, #316]	@ (8008ffc <FVG+0x208>)
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	709a      	strb	r2, [r3, #2]

		f_y3[0] = f_yString[1];
 8008ec2:	4b4d      	ldr	r3, [pc, #308]	@ (8008ff8 <FVG+0x204>)
 8008ec4:	785a      	ldrb	r2, [r3, #1]
 8008ec6:	4b4e      	ldr	r3, [pc, #312]	@ (8009000 <FVG+0x20c>)
 8008ec8:	701a      	strb	r2, [r3, #0]
		f_y3[1] = f_yString[2];
 8008eca:	4b4b      	ldr	r3, [pc, #300]	@ (8008ff8 <FVG+0x204>)
 8008ecc:	789a      	ldrb	r2, [r3, #2]
 8008ece:	4b4c      	ldr	r3, [pc, #304]	@ (8009000 <FVG+0x20c>)
 8008ed0:	705a      	strb	r2, [r3, #1]
		f_y3[2] = '\0';
 8008ed2:	4b4b      	ldr	r3, [pc, #300]	@ (8009000 <FVG+0x20c>)
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	709a      	strb	r2, [r3, #2]

		f1 = (uint8_t) strtol(f_y1, NULL, 16);
 8008ed8:	2210      	movs	r2, #16
 8008eda:	2100      	movs	r1, #0
 8008edc:	4847      	ldr	r0, [pc, #284]	@ (8008ffc <FVG+0x208>)
 8008ede:	f00a fb1b 	bl	8013518 <strtol>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	b2da      	uxtb	r2, r3
 8008ee6:	4b47      	ldr	r3, [pc, #284]	@ (8009004 <FVG+0x210>)
 8008ee8:	701a      	strb	r2, [r3, #0]
		f2 = (uint8_t) strtol(f_y3, NULL, 16);
 8008eea:	2210      	movs	r2, #16
 8008eec:	2100      	movs	r1, #0
 8008eee:	4844      	ldr	r0, [pc, #272]	@ (8009000 <FVG+0x20c>)
 8008ef0:	f00a fb12 	bl	8013518 <strtol>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	b2da      	uxtb	r2, r3
 8008ef8:	4b43      	ldr	r3, [pc, #268]	@ (8009008 <FVG+0x214>)
 8008efa:	701a      	strb	r2, [r3, #0]

		flowvt[16] = v1;
 8008efc:	4b39      	ldr	r3, [pc, #228]	@ (8008fe4 <FVG+0x1f0>)
 8008efe:	781a      	ldrb	r2, [r3, #0]
 8008f00:	4b42      	ldr	r3, [pc, #264]	@ (800900c <FVG+0x218>)
 8008f02:	741a      	strb	r2, [r3, #16]
		flowvt[17] = v2;
 8008f04:	4b38      	ldr	r3, [pc, #224]	@ (8008fe8 <FVG+0x1f4>)
 8008f06:	781a      	ldrb	r2, [r3, #0]
 8008f08:	4b40      	ldr	r3, [pc, #256]	@ (800900c <FVG+0x218>)
 8008f0a:	745a      	strb	r2, [r3, #17]
		flowvt[18] = f1;
 8008f0c:	4b3d      	ldr	r3, [pc, #244]	@ (8009004 <FVG+0x210>)
 8008f0e:	781a      	ldrb	r2, [r3, #0]
 8008f10:	4b3e      	ldr	r3, [pc, #248]	@ (800900c <FVG+0x218>)
 8008f12:	749a      	strb	r2, [r3, #18]
		flowvt[19] = f2;
 8008f14:	4b3c      	ldr	r3, [pc, #240]	@ (8009008 <FVG+0x214>)
 8008f16:	781a      	ldrb	r2, [r3, #0]
 8008f18:	4b3c      	ldr	r3, [pc, #240]	@ (800900c <FVG+0x218>)
 8008f1a:	74da      	strb	r2, [r3, #19]
		flowvt[20] = 0x02;
 8008f1c:	4b3b      	ldr	r3, [pc, #236]	@ (800900c <FVG+0x218>)
 8008f1e:	2202      	movs	r2, #2
 8008f20:	751a      	strb	r2, [r3, #20]
		flowvt[21] = 0xA4;
 8008f22:	4b3a      	ldr	r3, [pc, #232]	@ (800900c <FVG+0x218>)
 8008f24:	22a4      	movs	r2, #164	@ 0xa4
 8008f26:	755a      	strb	r2, [r3, #21]
		flowvt[22] = 0x01;
 8008f28:	4b38      	ldr	r3, [pc, #224]	@ (800900c <FVG+0x218>)
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	759a      	strb	r2, [r3, #22]
		flowvt[23] = 0xA6;
 8008f2e:	4b37      	ldr	r3, [pc, #220]	@ (800900c <FVG+0x218>)
 8008f30:	22a6      	movs	r2, #166	@ 0xa6
 8008f32:	75da      	strb	r2, [r3, #23]
		flowvt[24] = v1;
 8008f34:	4b2b      	ldr	r3, [pc, #172]	@ (8008fe4 <FVG+0x1f0>)
 8008f36:	781a      	ldrb	r2, [r3, #0]
 8008f38:	4b34      	ldr	r3, [pc, #208]	@ (800900c <FVG+0x218>)
 8008f3a:	761a      	strb	r2, [r3, #24]
		flowvt[25] = v2;
 8008f3c:	4b2a      	ldr	r3, [pc, #168]	@ (8008fe8 <FVG+0x1f4>)
 8008f3e:	781a      	ldrb	r2, [r3, #0]
 8008f40:	4b32      	ldr	r3, [pc, #200]	@ (800900c <FVG+0x218>)
 8008f42:	765a      	strb	r2, [r3, #25]
		flowvt[26] = f1;
 8008f44:	4b2f      	ldr	r3, [pc, #188]	@ (8009004 <FVG+0x210>)
 8008f46:	781a      	ldrb	r2, [r3, #0]
 8008f48:	4b30      	ldr	r3, [pc, #192]	@ (800900c <FVG+0x218>)
 8008f4a:	769a      	strb	r2, [r3, #26]
		flowvt[27] = f2+1;
 8008f4c:	4b2e      	ldr	r3, [pc, #184]	@ (8009008 <FVG+0x214>)
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	3301      	adds	r3, #1
 8008f52:	b2da      	uxtb	r2, r3
 8008f54:	4b2d      	ldr	r3, [pc, #180]	@ (800900c <FVG+0x218>)
 8008f56:	76da      	strb	r2, [r3, #27]
		flowvt[28] = 0x02;
 8008f58:	4b2c      	ldr	r3, [pc, #176]	@ (800900c <FVG+0x218>)
 8008f5a:	2202      	movs	r2, #2
 8008f5c:	771a      	strb	r2, [r3, #28]
		flowvt[29] = 0xA4;
 8008f5e:	4b2b      	ldr	r3, [pc, #172]	@ (800900c <FVG+0x218>)
 8008f60:	22a4      	movs	r2, #164	@ 0xa4
 8008f62:	775a      	strb	r2, [r3, #29]
		flowvt[30] = 0x01;
 8008f64:	4b29      	ldr	r3, [pc, #164]	@ (800900c <FVG+0x218>)
 8008f66:	2201      	movs	r2, #1
 8008f68:	779a      	strb	r2, [r3, #30]
		flowvt[31] = 0xA7;
 8008f6a:	4b28      	ldr	r3, [pc, #160]	@ (800900c <FVG+0x218>)
 8008f6c:	22a7      	movs	r2, #167	@ 0xa7
 8008f6e:	77da      	strb	r2, [r3, #31]
		flowvt[32] = v1;
 8008f70:	4b1c      	ldr	r3, [pc, #112]	@ (8008fe4 <FVG+0x1f0>)
 8008f72:	781a      	ldrb	r2, [r3, #0]
 8008f74:	4b25      	ldr	r3, [pc, #148]	@ (800900c <FVG+0x218>)
 8008f76:	f883 2020 	strb.w	r2, [r3, #32]
		flowvt[33] = v2;
 8008f7a:	4b1b      	ldr	r3, [pc, #108]	@ (8008fe8 <FVG+0x1f4>)
 8008f7c:	781a      	ldrb	r2, [r3, #0]
 8008f7e:	4b23      	ldr	r3, [pc, #140]	@ (800900c <FVG+0x218>)
 8008f80:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		flowvt[34] = f1;
 8008f84:	4b1f      	ldr	r3, [pc, #124]	@ (8009004 <FVG+0x210>)
 8008f86:	781a      	ldrb	r2, [r3, #0]
 8008f88:	4b20      	ldr	r3, [pc, #128]	@ (800900c <FVG+0x218>)
 8008f8a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		flowvt[35] = f2+2;
 8008f8e:	4b1e      	ldr	r3, [pc, #120]	@ (8009008 <FVG+0x214>)
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	3302      	adds	r3, #2
 8008f94:	b2da      	uxtb	r2, r3
 8008f96:	4b1d      	ldr	r3, [pc, #116]	@ (800900c <FVG+0x218>)
 8008f98:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		flowvt[36] = 0x02;
 8008f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800900c <FVG+0x218>)
 8008f9e:	2202      	movs	r2, #2
 8008fa0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		flowvt[37] = 0xA4;
 8008fa4:	4b19      	ldr	r3, [pc, #100]	@ (800900c <FVG+0x218>)
 8008fa6:	22a4      	movs	r2, #164	@ 0xa4
 8008fa8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
		flowvt[38] = 0x01;
 8008fac:	4b17      	ldr	r3, [pc, #92]	@ (800900c <FVG+0x218>)
 8008fae:	2201      	movs	r2, #1
 8008fb0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		flowvt[39] = 0xA8;
 8008fb4:	4b15      	ldr	r3, [pc, #84]	@ (800900c <FVG+0x218>)
 8008fb6:	22a8      	movs	r2, #168	@ 0xa8
 8008fb8:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27


		for (int a = 0; a < 42; a++){
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	60fb      	str	r3, [r7, #12]
 8008fc0:	e032      	b.n	8009028 <FVG+0x234>
 8008fc2:	bf00      	nop
 8008fc4:	2000115c 	.word	0x2000115c
 8008fc8:	44290000 	.word	0x44290000
 8008fcc:	20001168 	.word	0x20001168
 8008fd0:	08014124 	.word	0x08014124
 8008fd4:	2000173c 	.word	0x2000173c
 8008fd8:	08014128 	.word	0x08014128
 8008fdc:	20001744 	.word	0x20001744
 8008fe0:	20001748 	.word	0x20001748
 8008fe4:	2000174b 	.word	0x2000174b
 8008fe8:	2000174c 	.word	0x2000174c
 8008fec:	20001160 	.word	0x20001160
 8008ff0:	43d30000 	.word	0x43d30000
 8008ff4:	2000116a 	.word	0x2000116a
 8008ff8:	20001750 	.word	0x20001750
 8008ffc:	20001758 	.word	0x20001758
 8009000:	2000175c 	.word	0x2000175c
 8009004:	2000175f 	.word	0x2000175f
 8009008:	20001760 	.word	0x20001760
 800900c:	200000f4 	.word	0x200000f4
			//						line4[a] = line3[a];
			//				line_graph2[a] = line_graph3[a];
			fvg[a] = flowvt[a];
 8009010:	4a5e      	ldr	r2, [pc, #376]	@ (800918c <FVG+0x398>)
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	4413      	add	r3, r2
 8009016:	7819      	ldrb	r1, [r3, #0]
 8009018:	4a5d      	ldr	r2, [pc, #372]	@ (8009190 <FVG+0x39c>)
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	4413      	add	r3, r2
 800901e:	460a      	mov	r2, r1
 8009020:	701a      	strb	r2, [r3, #0]
		for (int a = 0; a < 42; a++){
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	3301      	adds	r3, #1
 8009026:	60fb      	str	r3, [r7, #12]
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2b29      	cmp	r3, #41	@ 0x29
 800902c:	ddf0      	ble.n	8009010 <FVG+0x21c>
		}
		HAL_UART_Transmit(&huart1, fvg, sizeof(fvg), 6);
 800902e:	2306      	movs	r3, #6
 8009030:	222a      	movs	r2, #42	@ 0x2a
 8009032:	4957      	ldr	r1, [pc, #348]	@ (8009190 <FVG+0x39c>)
 8009034:	4857      	ldr	r0, [pc, #348]	@ (8009194 <FVG+0x3a0>)
 8009036:	f005 fe6d 	bl	800ed14 <HAL_UART_Transmit>

		if (VT_UPDATE_FLAG == 0){
 800903a:	4b57      	ldr	r3, [pc, #348]	@ (8009198 <FVG+0x3a4>)
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	f083 0301 	eor.w	r3, r3, #1
 8009042:	b2db      	uxtb	r3, r3
 8009044:	2b00      	cmp	r3, #0
 8009046:	d00f      	beq.n	8009068 <FVG+0x274>
			i1 = v1;
 8009048:	4b54      	ldr	r3, [pc, #336]	@ (800919c <FVG+0x3a8>)
 800904a:	781a      	ldrb	r2, [r3, #0]
 800904c:	4b54      	ldr	r3, [pc, #336]	@ (80091a0 <FVG+0x3ac>)
 800904e:	701a      	strb	r2, [r3, #0]
			i2 = v2;
 8009050:	4b54      	ldr	r3, [pc, #336]	@ (80091a4 <FVG+0x3b0>)
 8009052:	781a      	ldrb	r2, [r3, #0]
 8009054:	4b54      	ldr	r3, [pc, #336]	@ (80091a8 <FVG+0x3b4>)
 8009056:	701a      	strb	r2, [r3, #0]
			k1 = f1;
 8009058:	4b54      	ldr	r3, [pc, #336]	@ (80091ac <FVG+0x3b8>)
 800905a:	781a      	ldrb	r2, [r3, #0]
 800905c:	4b54      	ldr	r3, [pc, #336]	@ (80091b0 <FVG+0x3bc>)
 800905e:	701a      	strb	r2, [r3, #0]
			k2 = f2;
 8009060:	4b54      	ldr	r3, [pc, #336]	@ (80091b4 <FVG+0x3c0>)
 8009062:	781a      	ldrb	r2, [r3, #0]
 8009064:	4b54      	ldr	r3, [pc, #336]	@ (80091b8 <FVG+0x3c4>)
 8009066:	701a      	strb	r2, [r3, #0]
		}
		if (VT_UPDATE_FLAG == 1){
 8009068:	4b4b      	ldr	r3, [pc, #300]	@ (8009198 <FVG+0x3a4>)
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	2b00      	cmp	r3, #0
 800906e:	f000 8088 	beq.w	8009182 <FVG+0x38e>
			flowvt[16] = i1;
 8009072:	4b4b      	ldr	r3, [pc, #300]	@ (80091a0 <FVG+0x3ac>)
 8009074:	781a      	ldrb	r2, [r3, #0]
 8009076:	4b45      	ldr	r3, [pc, #276]	@ (800918c <FVG+0x398>)
 8009078:	741a      	strb	r2, [r3, #16]
			flowvt[17] = i2;
 800907a:	4b4b      	ldr	r3, [pc, #300]	@ (80091a8 <FVG+0x3b4>)
 800907c:	781a      	ldrb	r2, [r3, #0]
 800907e:	4b43      	ldr	r3, [pc, #268]	@ (800918c <FVG+0x398>)
 8009080:	745a      	strb	r2, [r3, #17]
			flowvt[18] = k1;
 8009082:	4b4b      	ldr	r3, [pc, #300]	@ (80091b0 <FVG+0x3bc>)
 8009084:	781a      	ldrb	r2, [r3, #0]
 8009086:	4b41      	ldr	r3, [pc, #260]	@ (800918c <FVG+0x398>)
 8009088:	749a      	strb	r2, [r3, #18]
			flowvt[19] = k2;
 800908a:	4b4b      	ldr	r3, [pc, #300]	@ (80091b8 <FVG+0x3c4>)
 800908c:	781a      	ldrb	r2, [r3, #0]
 800908e:	4b3f      	ldr	r3, [pc, #252]	@ (800918c <FVG+0x398>)
 8009090:	74da      	strb	r2, [r3, #19]
			flowvt[20] = v1;
 8009092:	4b42      	ldr	r3, [pc, #264]	@ (800919c <FVG+0x3a8>)
 8009094:	781a      	ldrb	r2, [r3, #0]
 8009096:	4b3d      	ldr	r3, [pc, #244]	@ (800918c <FVG+0x398>)
 8009098:	751a      	strb	r2, [r3, #20]
			flowvt[21] = v2;
 800909a:	4b42      	ldr	r3, [pc, #264]	@ (80091a4 <FVG+0x3b0>)
 800909c:	781a      	ldrb	r2, [r3, #0]
 800909e:	4b3b      	ldr	r3, [pc, #236]	@ (800918c <FVG+0x398>)
 80090a0:	755a      	strb	r2, [r3, #21]
			flowvt[22] = f1;
 80090a2:	4b42      	ldr	r3, [pc, #264]	@ (80091ac <FVG+0x3b8>)
 80090a4:	781a      	ldrb	r2, [r3, #0]
 80090a6:	4b39      	ldr	r3, [pc, #228]	@ (800918c <FVG+0x398>)
 80090a8:	759a      	strb	r2, [r3, #22]
			flowvt[23] = f2;
 80090aa:	4b42      	ldr	r3, [pc, #264]	@ (80091b4 <FVG+0x3c0>)
 80090ac:	781a      	ldrb	r2, [r3, #0]
 80090ae:	4b37      	ldr	r3, [pc, #220]	@ (800918c <FVG+0x398>)
 80090b0:	75da      	strb	r2, [r3, #23]
			flowvt[24] = i1;
 80090b2:	4b3b      	ldr	r3, [pc, #236]	@ (80091a0 <FVG+0x3ac>)
 80090b4:	781a      	ldrb	r2, [r3, #0]
 80090b6:	4b35      	ldr	r3, [pc, #212]	@ (800918c <FVG+0x398>)
 80090b8:	761a      	strb	r2, [r3, #24]
			flowvt[25] = i2;
 80090ba:	4b3b      	ldr	r3, [pc, #236]	@ (80091a8 <FVG+0x3b4>)
 80090bc:	781a      	ldrb	r2, [r3, #0]
 80090be:	4b33      	ldr	r3, [pc, #204]	@ (800918c <FVG+0x398>)
 80090c0:	765a      	strb	r2, [r3, #25]
			flowvt[26] = k1;
 80090c2:	4b3b      	ldr	r3, [pc, #236]	@ (80091b0 <FVG+0x3bc>)
 80090c4:	781a      	ldrb	r2, [r3, #0]
 80090c6:	4b31      	ldr	r3, [pc, #196]	@ (800918c <FVG+0x398>)
 80090c8:	769a      	strb	r2, [r3, #26]
			flowvt[27] = k2+1;
 80090ca:	4b3b      	ldr	r3, [pc, #236]	@ (80091b8 <FVG+0x3c4>)
 80090cc:	781b      	ldrb	r3, [r3, #0]
 80090ce:	3301      	adds	r3, #1
 80090d0:	b2da      	uxtb	r2, r3
 80090d2:	4b2e      	ldr	r3, [pc, #184]	@ (800918c <FVG+0x398>)
 80090d4:	76da      	strb	r2, [r3, #27]
			flowvt[28] = v1;
 80090d6:	4b31      	ldr	r3, [pc, #196]	@ (800919c <FVG+0x3a8>)
 80090d8:	781a      	ldrb	r2, [r3, #0]
 80090da:	4b2c      	ldr	r3, [pc, #176]	@ (800918c <FVG+0x398>)
 80090dc:	771a      	strb	r2, [r3, #28]
			flowvt[29] = v2;
 80090de:	4b31      	ldr	r3, [pc, #196]	@ (80091a4 <FVG+0x3b0>)
 80090e0:	781a      	ldrb	r2, [r3, #0]
 80090e2:	4b2a      	ldr	r3, [pc, #168]	@ (800918c <FVG+0x398>)
 80090e4:	775a      	strb	r2, [r3, #29]
			flowvt[30] = f1;
 80090e6:	4b31      	ldr	r3, [pc, #196]	@ (80091ac <FVG+0x3b8>)
 80090e8:	781a      	ldrb	r2, [r3, #0]
 80090ea:	4b28      	ldr	r3, [pc, #160]	@ (800918c <FVG+0x398>)
 80090ec:	779a      	strb	r2, [r3, #30]
			flowvt[31] = f2+1;
 80090ee:	4b31      	ldr	r3, [pc, #196]	@ (80091b4 <FVG+0x3c0>)
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	3301      	adds	r3, #1
 80090f4:	b2da      	uxtb	r2, r3
 80090f6:	4b25      	ldr	r3, [pc, #148]	@ (800918c <FVG+0x398>)
 80090f8:	77da      	strb	r2, [r3, #31]
			flowvt[32] = i1;
 80090fa:	4b29      	ldr	r3, [pc, #164]	@ (80091a0 <FVG+0x3ac>)
 80090fc:	781a      	ldrb	r2, [r3, #0]
 80090fe:	4b23      	ldr	r3, [pc, #140]	@ (800918c <FVG+0x398>)
 8009100:	f883 2020 	strb.w	r2, [r3, #32]
			flowvt[33] = i2;
 8009104:	4b28      	ldr	r3, [pc, #160]	@ (80091a8 <FVG+0x3b4>)
 8009106:	781a      	ldrb	r2, [r3, #0]
 8009108:	4b20      	ldr	r3, [pc, #128]	@ (800918c <FVG+0x398>)
 800910a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			flowvt[34] = k1;
 800910e:	4b28      	ldr	r3, [pc, #160]	@ (80091b0 <FVG+0x3bc>)
 8009110:	781a      	ldrb	r2, [r3, #0]
 8009112:	4b1e      	ldr	r3, [pc, #120]	@ (800918c <FVG+0x398>)
 8009114:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
			flowvt[35] = k2+2;
 8009118:	4b27      	ldr	r3, [pc, #156]	@ (80091b8 <FVG+0x3c4>)
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	3302      	adds	r3, #2
 800911e:	b2da      	uxtb	r2, r3
 8009120:	4b1a      	ldr	r3, [pc, #104]	@ (800918c <FVG+0x398>)
 8009122:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
			flowvt[36] = v1;
 8009126:	4b1d      	ldr	r3, [pc, #116]	@ (800919c <FVG+0x3a8>)
 8009128:	781a      	ldrb	r2, [r3, #0]
 800912a:	4b18      	ldr	r3, [pc, #96]	@ (800918c <FVG+0x398>)
 800912c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			flowvt[37] = v2;
 8009130:	4b1c      	ldr	r3, [pc, #112]	@ (80091a4 <FVG+0x3b0>)
 8009132:	781a      	ldrb	r2, [r3, #0]
 8009134:	4b15      	ldr	r3, [pc, #84]	@ (800918c <FVG+0x398>)
 8009136:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			flowvt[38] = f1;
 800913a:	4b1c      	ldr	r3, [pc, #112]	@ (80091ac <FVG+0x3b8>)
 800913c:	781a      	ldrb	r2, [r3, #0]
 800913e:	4b13      	ldr	r3, [pc, #76]	@ (800918c <FVG+0x398>)
 8009140:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			flowvt[39] = f2+2;
 8009144:	4b1b      	ldr	r3, [pc, #108]	@ (80091b4 <FVG+0x3c0>)
 8009146:	781b      	ldrb	r3, [r3, #0]
 8009148:	3302      	adds	r3, #2
 800914a:	b2da      	uxtb	r2, r3
 800914c:	4b0f      	ldr	r3, [pc, #60]	@ (800918c <FVG+0x398>)
 800914e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27


			for (int a = 0; a < 42; a++){
 8009152:	2300      	movs	r3, #0
 8009154:	60bb      	str	r3, [r7, #8]
 8009156:	e00b      	b.n	8009170 <FVG+0x37c>
				//						line4[a] = line3[a];
				//				line_graph2[a] = line_graph3[a];
				fvg[a] = flowvt[a];
 8009158:	4a0c      	ldr	r2, [pc, #48]	@ (800918c <FVG+0x398>)
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	4413      	add	r3, r2
 800915e:	7819      	ldrb	r1, [r3, #0]
 8009160:	4a0b      	ldr	r2, [pc, #44]	@ (8009190 <FVG+0x39c>)
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	4413      	add	r3, r2
 8009166:	460a      	mov	r2, r1
 8009168:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 42; a++){
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	3301      	adds	r3, #1
 800916e:	60bb      	str	r3, [r7, #8]
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	2b29      	cmp	r3, #41	@ 0x29
 8009174:	ddf0      	ble.n	8009158 <FVG+0x364>
			}

			HAL_UART_Transmit(&huart1, fvg, sizeof(fvg), 6);
 8009176:	2306      	movs	r3, #6
 8009178:	222a      	movs	r2, #42	@ 0x2a
 800917a:	4905      	ldr	r1, [pc, #20]	@ (8009190 <FVG+0x39c>)
 800917c:	4805      	ldr	r0, [pc, #20]	@ (8009194 <FVG+0x3a0>)
 800917e:	f005 fdc9 	bl	800ed14 <HAL_UART_Transmit>

		}
		vTaskDelay(pdMS_TO_TICKS(100));
 8009182:	2064      	movs	r0, #100	@ 0x64
 8009184:	f008 f9aa 	bl	80114dc <vTaskDelay>
		vt_xc = 676 + vt_x;
 8009188:	e638      	b.n	8008dfc <FVG+0x8>
 800918a:	bf00      	nop
 800918c:	200000f4 	.word	0x200000f4
 8009190:	2000164c 	.word	0x2000164c
 8009194:	20000fc0 	.word	0x20000fc0
 8009198:	200011fc 	.word	0x200011fc
 800919c:	2000174b 	.word	0x2000174b
 80091a0:	20001761 	.word	0x20001761
 80091a4:	2000174c 	.word	0x2000174c
 80091a8:	20001762 	.word	0x20001762
 80091ac:	2000175f 	.word	0x2000175f
 80091b0:	20001763 	.word	0x20001763
 80091b4:	20001760 	.word	0x20001760
 80091b8:	20001764 	.word	0x20001764

080091bc <backup>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_backup */
void backup(void const * argument)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b098      	sub	sp, #96	@ 0x60
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN backup */
	/* Infinite loop */
	for(;;)
	{

		uint8_t arr[50] = {PLR_value, RR_value, insP_value, exp_value, PU_value, TRG_value, PIP_value, PEEP_value, P_peak_alarm_max_value, P_peak_alarm_min_value, MV_alarm_max_value, MV_alarm_min_value, RR_alarm_max_value, RR_alarm_min_value, peep_alarm_max_value, peep_alarm_min_value, O2_alarm_max_value, O2_alarm_min_value, PS_value, RR_temp_value, mode_select_number, m_icon_add, O2_flag};
 80091c4:	f107 0308 	add.w	r3, r7, #8
 80091c8:	2232      	movs	r2, #50	@ 0x32
 80091ca:	2100      	movs	r1, #0
 80091cc:	4618      	mov	r0, r3
 80091ce:	f00a f9cf 	bl	8013570 <memset>
 80091d2:	4bc5      	ldr	r3, [pc, #788]	@ (80094e8 <backup+0x32c>)
 80091d4:	781b      	ldrb	r3, [r3, #0]
 80091d6:	723b      	strb	r3, [r7, #8]
 80091d8:	4bc4      	ldr	r3, [pc, #784]	@ (80094ec <backup+0x330>)
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	727b      	strb	r3, [r7, #9]
 80091de:	4bc4      	ldr	r3, [pc, #784]	@ (80094f0 <backup+0x334>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	72bb      	strb	r3, [r7, #10]
 80091e6:	4bc3      	ldr	r3, [pc, #780]	@ (80094f4 <backup+0x338>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	b2db      	uxtb	r3, r3
 80091ec:	72fb      	strb	r3, [r7, #11]
 80091ee:	4bc2      	ldr	r3, [pc, #776]	@ (80094f8 <backup+0x33c>)
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	733b      	strb	r3, [r7, #12]
 80091f4:	4bc1      	ldr	r3, [pc, #772]	@ (80094fc <backup+0x340>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	b2db      	uxtb	r3, r3
 80091fa:	737b      	strb	r3, [r7, #13]
 80091fc:	4bc0      	ldr	r3, [pc, #768]	@ (8009500 <backup+0x344>)
 80091fe:	f993 3000 	ldrsb.w	r3, [r3]
 8009202:	b2db      	uxtb	r3, r3
 8009204:	73bb      	strb	r3, [r7, #14]
 8009206:	4bbf      	ldr	r3, [pc, #764]	@ (8009504 <backup+0x348>)
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	73fb      	strb	r3, [r7, #15]
 800920c:	4bbe      	ldr	r3, [pc, #760]	@ (8009508 <backup+0x34c>)
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	743b      	strb	r3, [r7, #16]
 8009212:	4bbe      	ldr	r3, [pc, #760]	@ (800950c <backup+0x350>)
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	747b      	strb	r3, [r7, #17]
 8009218:	4bbd      	ldr	r3, [pc, #756]	@ (8009510 <backup+0x354>)
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	74bb      	strb	r3, [r7, #18]
 800921e:	4bbd      	ldr	r3, [pc, #756]	@ (8009514 <backup+0x358>)
 8009220:	781b      	ldrb	r3, [r3, #0]
 8009222:	74fb      	strb	r3, [r7, #19]
 8009224:	4bbc      	ldr	r3, [pc, #752]	@ (8009518 <backup+0x35c>)
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	753b      	strb	r3, [r7, #20]
 800922a:	4bbc      	ldr	r3, [pc, #752]	@ (800951c <backup+0x360>)
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	757b      	strb	r3, [r7, #21]
 8009230:	4bbb      	ldr	r3, [pc, #748]	@ (8009520 <backup+0x364>)
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	75bb      	strb	r3, [r7, #22]
 8009236:	4bbb      	ldr	r3, [pc, #748]	@ (8009524 <backup+0x368>)
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	75fb      	strb	r3, [r7, #23]
 800923c:	4bba      	ldr	r3, [pc, #744]	@ (8009528 <backup+0x36c>)
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	763b      	strb	r3, [r7, #24]
 8009242:	4bba      	ldr	r3, [pc, #744]	@ (800952c <backup+0x370>)
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	767b      	strb	r3, [r7, #25]
 8009248:	4bb9      	ldr	r3, [pc, #740]	@ (8009530 <backup+0x374>)
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	76bb      	strb	r3, [r7, #26]
 800924e:	4bb9      	ldr	r3, [pc, #740]	@ (8009534 <backup+0x378>)
 8009250:	781b      	ldrb	r3, [r3, #0]
 8009252:	76fb      	strb	r3, [r7, #27]
 8009254:	4bb8      	ldr	r3, [pc, #736]	@ (8009538 <backup+0x37c>)
 8009256:	781b      	ldrb	r3, [r3, #0]
 8009258:	773b      	strb	r3, [r7, #28]
 800925a:	4bb8      	ldr	r3, [pc, #736]	@ (800953c <backup+0x380>)
 800925c:	781b      	ldrb	r3, [r3, #0]
 800925e:	777b      	strb	r3, [r7, #29]
 8009260:	4bb7      	ldr	r3, [pc, #732]	@ (8009540 <backup+0x384>)
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	77bb      	strb	r3, [r7, #30]
		uint16_t arr1[5] = {vt_value};
 8009266:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800926a:	2200      	movs	r2, #0
 800926c:	601a      	str	r2, [r3, #0]
 800926e:	605a      	str	r2, [r3, #4]
 8009270:	811a      	strh	r2, [r3, #8]
 8009272:	4bb4      	ldr	r3, [pc, #720]	@ (8009544 <backup+0x388>)
 8009274:	881b      	ldrh	r3, [r3, #0]
 8009276:	87bb      	strh	r3, [r7, #60]	@ 0x3c

		if((Display_Switch_Flag == 1) || (AC_Detection_Flag == 1)){
 8009278:	4bb3      	ldr	r3, [pc, #716]	@ (8009548 <backup+0x38c>)
 800927a:	781b      	ldrb	r3, [r3, #0]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d103      	bne.n	8009288 <backup+0xcc>
 8009280:	4bb2      	ldr	r3, [pc, #712]	@ (800954c <backup+0x390>)
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d019      	beq.n	80092bc <backup+0x100>
			W25Q_Write_Page(0, 1, 50, arr);
 8009288:	f107 0308 	add.w	r3, r7, #8
 800928c:	2232      	movs	r2, #50	@ 0x32
 800928e:	2101      	movs	r1, #1
 8009290:	2000      	movs	r0, #0
 8009292:	f7fb f823 	bl	80042dc <W25Q_Write_Page>
			W25Q_Read(0, 1, 50, RxData);
 8009296:	4bae      	ldr	r3, [pc, #696]	@ (8009550 <backup+0x394>)
 8009298:	2232      	movs	r2, #50	@ 0x32
 800929a:	2101      	movs	r1, #1
 800929c:	2000      	movs	r0, #0
 800929e:	f7fa fefb 	bl	8004098 <W25Q_Read>
			W25Q_Write_Page1(1, 1, 5, arr1);
 80092a2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80092a6:	2205      	movs	r2, #5
 80092a8:	2101      	movs	r1, #1
 80092aa:	2001      	movs	r0, #1
 80092ac:	f7fb f93e 	bl	800452c <W25Q_Write_Page1>
			W25Q_Read1(1, 1, 5, RxData1);
 80092b0:	4ba8      	ldr	r3, [pc, #672]	@ (8009554 <backup+0x398>)
 80092b2:	2205      	movs	r2, #5
 80092b4:	2101      	movs	r1, #1
 80092b6:	2001      	movs	r0, #1
 80092b8:	f7fa ff22 	bl	8004100 <W25Q_Read1>
		}

		if((Backup_flag == 0) && (Backup_flag1 == 1)){
 80092bc:	4ba6      	ldr	r3, [pc, #664]	@ (8009558 <backup+0x39c>)
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	f083 0301 	eor.w	r3, r3, #1
 80092c4:	b2db      	uxtb	r3, r3
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	f000 8159 	beq.w	800957e <backup+0x3c2>
 80092cc:	4ba3      	ldr	r3, [pc, #652]	@ (800955c <backup+0x3a0>)
 80092ce:	781b      	ldrb	r3, [r3, #0]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	f000 8154 	beq.w	800957e <backup+0x3c2>
			uint8_t PLR_Backup = RxData[0];
 80092d6:	4b9e      	ldr	r3, [pc, #632]	@ (8009550 <backup+0x394>)
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			uint8_t RR_Backup = RxData[1];
 80092de:	4b9c      	ldr	r3, [pc, #624]	@ (8009550 <backup+0x394>)
 80092e0:	785b      	ldrb	r3, [r3, #1]
 80092e2:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
			uint8_t insP_Backup = RxData[2];
 80092e6:	4b9a      	ldr	r3, [pc, #616]	@ (8009550 <backup+0x394>)
 80092e8:	789b      	ldrb	r3, [r3, #2]
 80092ea:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
			uint8_t exp_Backup = RxData[3];
 80092ee:	4b98      	ldr	r3, [pc, #608]	@ (8009550 <backup+0x394>)
 80092f0:	78db      	ldrb	r3, [r3, #3]
 80092f2:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
			uint8_t PU_Backup = RxData[4];
 80092f6:	4b96      	ldr	r3, [pc, #600]	@ (8009550 <backup+0x394>)
 80092f8:	791b      	ldrb	r3, [r3, #4]
 80092fa:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
			uint8_t TRG_Backup = RxData[5];
 80092fe:	4b94      	ldr	r3, [pc, #592]	@ (8009550 <backup+0x394>)
 8009300:	795b      	ldrb	r3, [r3, #5]
 8009302:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
			int8_t PIP_Backup = RxData[6];
 8009306:	4b92      	ldr	r3, [pc, #584]	@ (8009550 <backup+0x394>)
 8009308:	799b      	ldrb	r3, [r3, #6]
 800930a:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
			uint8_t PEEP_Backup = RxData[7];
 800930e:	4b90      	ldr	r3, [pc, #576]	@ (8009550 <backup+0x394>)
 8009310:	79db      	ldrb	r3, [r3, #7]
 8009312:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
			uint8_t P_peak_max_Backup = RxData[8];
 8009316:	4b8e      	ldr	r3, [pc, #568]	@ (8009550 <backup+0x394>)
 8009318:	7a1b      	ldrb	r3, [r3, #8]
 800931a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			uint8_t P_peak_min_Backup = RxData[9];
 800931e:	4b8c      	ldr	r3, [pc, #560]	@ (8009550 <backup+0x394>)
 8009320:	7a5b      	ldrb	r3, [r3, #9]
 8009322:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
			uint8_t MV_peak_max_Backup = RxData[10];
 8009326:	4b8a      	ldr	r3, [pc, #552]	@ (8009550 <backup+0x394>)
 8009328:	7a9b      	ldrb	r3, [r3, #10]
 800932a:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
			uint8_t MV_peak_min_Backup = RxData[11];
 800932e:	4b88      	ldr	r3, [pc, #544]	@ (8009550 <backup+0x394>)
 8009330:	7adb      	ldrb	r3, [r3, #11]
 8009332:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
			uint8_t RR_peak_max_Backup = RxData[12];
 8009336:	4b86      	ldr	r3, [pc, #536]	@ (8009550 <backup+0x394>)
 8009338:	7b1b      	ldrb	r3, [r3, #12]
 800933a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
			uint8_t RR_peak_min_Backup = RxData[13];
 800933e:	4b84      	ldr	r3, [pc, #528]	@ (8009550 <backup+0x394>)
 8009340:	7b5b      	ldrb	r3, [r3, #13]
 8009342:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
			uint8_t Peep_peak_max_Backup = RxData[14];
 8009346:	4b82      	ldr	r3, [pc, #520]	@ (8009550 <backup+0x394>)
 8009348:	7b9b      	ldrb	r3, [r3, #14]
 800934a:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
			uint8_t Peep_peak_min_Backup = RxData[15];
 800934e:	4b80      	ldr	r3, [pc, #512]	@ (8009550 <backup+0x394>)
 8009350:	7bdb      	ldrb	r3, [r3, #15]
 8009352:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
			uint8_t O2_peak_max_Backup = RxData[16];
 8009356:	4b7e      	ldr	r3, [pc, #504]	@ (8009550 <backup+0x394>)
 8009358:	7c1b      	ldrb	r3, [r3, #16]
 800935a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			uint8_t O2_peak_min_Backup = RxData[17];
 800935e:	4b7c      	ldr	r3, [pc, #496]	@ (8009550 <backup+0x394>)
 8009360:	7c5b      	ldrb	r3, [r3, #17]
 8009362:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
			uint8_t PS_Backup = RxData[18];
 8009366:	4b7a      	ldr	r3, [pc, #488]	@ (8009550 <backup+0x394>)
 8009368:	7c9b      	ldrb	r3, [r3, #18]
 800936a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
			uint8_t RR_alarm_backup = RxData[19];
 800936e:	4b78      	ldr	r3, [pc, #480]	@ (8009550 <backup+0x394>)
 8009370:	7cdb      	ldrb	r3, [r3, #19]
 8009372:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
			uint8_t mode_select_backup = RxData[20];
 8009376:	4b76      	ldr	r3, [pc, #472]	@ (8009550 <backup+0x394>)
 8009378:	7d1b      	ldrb	r3, [r3, #20]
 800937a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
			uint8_t m_icon_add_backup = RxData[21];
 800937e:	4b74      	ldr	r3, [pc, #464]	@ (8009550 <backup+0x394>)
 8009380:	7d5b      	ldrb	r3, [r3, #21]
 8009382:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
			uint8_t O2_flag_backup = RxData[22];
 8009386:	4b72      	ldr	r3, [pc, #456]	@ (8009550 <backup+0x394>)
 8009388:	7d9b      	ldrb	r3, [r3, #22]
 800938a:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
			uint16_t vt_value_backup = RxData1[0];
 800938e:	4b71      	ldr	r3, [pc, #452]	@ (8009554 <backup+0x398>)
 8009390:	881b      	ldrh	r3, [r3, #0]
 8009392:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
			STAND_BY = 1;
 8009396:	4b72      	ldr	r3, [pc, #456]	@ (8009560 <backup+0x3a4>)
 8009398:	2201      	movs	r2, #1
 800939a:	701a      	strb	r2, [r3, #0]
			VCV_FLAG = 0;
 800939c:	4b71      	ldr	r3, [pc, #452]	@ (8009564 <backup+0x3a8>)
 800939e:	2200      	movs	r2, #0
 80093a0:	701a      	strb	r2, [r3, #0]
			PCV_FLAG = 0;
 80093a2:	4b71      	ldr	r3, [pc, #452]	@ (8009568 <backup+0x3ac>)
 80093a4:	2200      	movs	r2, #0
 80093a6:	701a      	strb	r2, [r3, #0]
			SIMV_FLAG = 0;
 80093a8:	4b70      	ldr	r3, [pc, #448]	@ (800956c <backup+0x3b0>)
 80093aa:	2200      	movs	r2, #0
 80093ac:	701a      	strb	r2, [r3, #0]
			PSV_FLAG = 0;
 80093ae:	4b70      	ldr	r3, [pc, #448]	@ (8009570 <backup+0x3b4>)
 80093b0:	2200      	movs	r2, #0
 80093b2:	701a      	strb	r2, [r3, #0]
			BAG_FLAG = 0;
 80093b4:	4b6f      	ldr	r3, [pc, #444]	@ (8009574 <backup+0x3b8>)
 80093b6:	2200      	movs	r2, #0
 80093b8:	701a      	strb	r2, [r3, #0]

			osDelay(5000);
 80093ba:	f241 3088 	movw	r0, #5000	@ 0x1388
 80093be:	f006 fffc 	bl	80103ba <osDelay>
			intiger_val_send_Backup(0x02, PLR_Backup);
 80093c2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80093c6:	4619      	mov	r1, r3
 80093c8:	2002      	movs	r0, #2
 80093ca:	f7fb fa09 	bl	80047e0 <intiger_val_send_Backup>
			intiger_val_send_Backup(0x03, RR_Backup);
 80093ce:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80093d2:	4619      	mov	r1, r3
 80093d4:	2003      	movs	r0, #3
 80093d6:	f7fb fa03 	bl	80047e0 <intiger_val_send_Backup>
			intiger_val_send_Backup(0x05, PU_Backup);
 80093da:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80093de:	4619      	mov	r1, r3
 80093e0:	2005      	movs	r0, #5
 80093e2:	f7fb f9fd 	bl	80047e0 <intiger_val_send_Backup>
			intiger_val_send_Backup(0x06, TRG_Backup);
 80093e6:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 80093ea:	4619      	mov	r1, r3
 80093ec:	2006      	movs	r0, #6
 80093ee:	f7fb f9f7 	bl	80047e0 <intiger_val_send_Backup>
			PIP_VAL(0x07, PIP_Backup);
 80093f2:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 80093f6:	4619      	mov	r1, r3
 80093f8:	2007      	movs	r0, #7
 80093fa:	f7f8 ffb7 	bl	800236c <PIP_VAL>
			intiger_val_send_Backup(0x08, PEEP_Backup);
 80093fe:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8009402:	4619      	mov	r1, r3
 8009404:	2008      	movs	r0, #8
 8009406:	f7fb f9eb 	bl	80047e0 <intiger_val_send_Backup>
			intiger_val_send_Backup(0x09, PS_Backup);
 800940a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800940e:	4619      	mov	r1, r3
 8009410:	2009      	movs	r0, #9
 8009412:	f7fb f9e5 	bl	80047e0 <intiger_val_send_Backup>
			intiger_val_send_Backup(0x14, P_peak_max_Backup);
 8009416:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800941a:	4619      	mov	r1, r3
 800941c:	2014      	movs	r0, #20
 800941e:	f7fb f9df 	bl	80047e0 <intiger_val_send_Backup>
			intiger_val_send_Backup(0x15, P_peak_min_Backup);
 8009422:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8009426:	4619      	mov	r1, r3
 8009428:	2015      	movs	r0, #21
 800942a:	f7fb f9d9 	bl	80047e0 <intiger_val_send_Backup>
			intiger_val_send_Backup(0x16, MV_peak_max_Backup);
 800942e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8009432:	4619      	mov	r1, r3
 8009434:	2016      	movs	r0, #22
 8009436:	f7fb f9d3 	bl	80047e0 <intiger_val_send_Backup>
			intiger_val_send_Backup(0x17, MV_peak_min_Backup);
 800943a:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800943e:	4619      	mov	r1, r3
 8009440:	2017      	movs	r0, #23
 8009442:	f7fb f9cd 	bl	80047e0 <intiger_val_send_Backup>
			intiger_val_send_Backup(0x18, RR_peak_max_Backup);
 8009446:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800944a:	4619      	mov	r1, r3
 800944c:	2018      	movs	r0, #24
 800944e:	f7fb f9c7 	bl	80047e0 <intiger_val_send_Backup>
			intiger_val_send_Backup(0x19, RR_peak_min_Backup);
 8009452:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8009456:	4619      	mov	r1, r3
 8009458:	2019      	movs	r0, #25
 800945a:	f7fb f9c1 	bl	80047e0 <intiger_val_send_Backup>
			intiger_val_send_Backup(0x1A, Peep_peak_max_Backup);
 800945e:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8009462:	4619      	mov	r1, r3
 8009464:	201a      	movs	r0, #26
 8009466:	f7fb f9bb 	bl	80047e0 <intiger_val_send_Backup>
			intiger_val_send_Backup(0x21, Peep_peak_min_Backup);
 800946a:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800946e:	4619      	mov	r1, r3
 8009470:	2021      	movs	r0, #33	@ 0x21
 8009472:	f7fb f9b5 	bl	80047e0 <intiger_val_send_Backup>
			intiger_val_send_Backup(0x22, O2_peak_max_Backup);
 8009476:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800947a:	4619      	mov	r1, r3
 800947c:	2022      	movs	r0, #34	@ 0x22
 800947e:	f7fb f9af 	bl	80047e0 <intiger_val_send_Backup>
			intiger_val_send_Backup(0x23, O2_peak_min_Backup);
 8009482:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8009486:	4619      	mov	r1, r3
 8009488:	2023      	movs	r0, #35	@ 0x23
 800948a:	f7fb f9a9 	bl	80047e0 <intiger_val_send_Backup>
			intiger_val_send_Backup(0x24, insP_Backup);
 800948e:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8009492:	4619      	mov	r1, r3
 8009494:	2024      	movs	r0, #36	@ 0x24
 8009496:	f7fb f9a3 	bl	80047e0 <intiger_val_send_Backup>
			intiger_val_send_Backup(0x25, exp_Backup);
 800949a:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 800949e:	4619      	mov	r1, r3
 80094a0:	2025      	movs	r0, #37	@ 0x25
 80094a2:	f7fb f99d 	bl	80047e0 <intiger_val_send_Backup>
			intiger_val_send_Backup(0x27, RR_alarm_backup);
 80094a6:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80094aa:	4619      	mov	r1, r3
 80094ac:	2027      	movs	r0, #39	@ 0x27
 80094ae:	f7fb f997 	bl	80047e0 <intiger_val_send_Backup>
			intiger_val_vt_send_Backup(0x01, vt_value_backup);
 80094b2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80094b6:	4619      	mov	r1, r3
 80094b8:	2001      	movs	r0, #1
 80094ba:	f7fb f9b5 	bl	8004828 <intiger_val_vt_send_Backup>
			mode_select_number = mode_select_backup;
 80094be:	4a1e      	ldr	r2, [pc, #120]	@ (8009538 <backup+0x37c>)
 80094c0:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80094c4:	7013      	strb	r3, [r2, #0]
			m_icon_add = m_icon_add_backup;
 80094c6:	4a1d      	ldr	r2, [pc, #116]	@ (800953c <backup+0x380>)
 80094c8:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80094cc:	7013      	strb	r3, [r2, #0]
			O2_flag = O2_flag_backup;
 80094ce:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	bf14      	ite	ne
 80094d6:	2301      	movne	r3, #1
 80094d8:	2300      	moveq	r3, #0
 80094da:	b2da      	uxtb	r2, r3
 80094dc:	4b18      	ldr	r3, [pc, #96]	@ (8009540 <backup+0x384>)
 80094de:	701a      	strb	r2, [r3, #0]
			osDelay(100);
 80094e0:	2064      	movs	r0, #100	@ 0x64
 80094e2:	f006 ff6a 	bl	80103ba <osDelay>
 80094e6:	e047      	b.n	8009578 <backup+0x3bc>
 80094e8:	20000026 	.word	0x20000026
 80094ec:	20000027 	.word	0x20000027
 80094f0:	2000001c 	.word	0x2000001c
 80094f4:	20000020 	.word	0x20000020
 80094f8:	200015a9 	.word	0x200015a9
 80094fc:	200015ac 	.word	0x200015ac
 8009500:	20000028 	.word	0x20000028
 8009504:	200015b0 	.word	0x200015b0
 8009508:	20000040 	.word	0x20000040
 800950c:	200015e4 	.word	0x200015e4
 8009510:	20000041 	.word	0x20000041
 8009514:	200015e5 	.word	0x200015e5
 8009518:	20000042 	.word	0x20000042
 800951c:	2000003d 	.word	0x2000003d
 8009520:	20000043 	.word	0x20000043
 8009524:	2000003e 	.word	0x2000003e
 8009528:	20000044 	.word	0x20000044
 800952c:	2000003f 	.word	0x2000003f
 8009530:	200015b1 	.word	0x200015b1
 8009534:	2000003c 	.word	0x2000003c
 8009538:	200015bb 	.word	0x200015bb
 800953c:	200015e8 	.word	0x200015e8
 8009540:	200015d3 	.word	0x200015d3
 8009544:	20000024 	.word	0x20000024
 8009548:	2000177c 	.word	0x2000177c
 800954c:	2000177b 	.word	0x2000177b
 8009550:	20001780 	.word	0x20001780
 8009554:	200017b4 	.word	0x200017b4
 8009558:	20001779 	.word	0x20001779
 800955c:	2000177a 	.word	0x2000177a
 8009560:	200015b6 	.word	0x200015b6
 8009564:	200015b8 	.word	0x200015b8
 8009568:	200015b9 	.word	0x200015b9
 800956c:	200015b5 	.word	0x200015b5
 8009570:	200015b7 	.word	0x200015b7
 8009574:	200015ba 	.word	0x200015ba
			Backup_flag1 = 0;
 8009578:	4b03      	ldr	r3, [pc, #12]	@ (8009588 <backup+0x3cc>)
 800957a:	2200      	movs	r2, #0
 800957c:	701a      	strb	r2, [r3, #0]
		}
		vTaskDelay(pdMS_TO_TICKS(100));
 800957e:	2064      	movs	r0, #100	@ 0x64
 8009580:	f007 ffac 	bl	80114dc <vTaskDelay>
	{
 8009584:	e61e      	b.n	80091c4 <backup+0x8>
 8009586:	bf00      	nop
 8009588:	2000177a 	.word	0x2000177a

0800958c <Clear_Button>:
	/* USER CODE END backup */
}

/* Clear_Button function */
void Clear_Button(void const * argument)
{
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Clear_Button */
	if (PID_CALIBRATE_FLAG == 1) {
 8009594:	4b06      	ldr	r3, [pc, #24]	@ (80095b0 <Clear_Button+0x24>)
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d003      	beq.n	80095a4 <Clear_Button+0x18>
		previous_pressure_first = result2;
 800959c:	4b05      	ldr	r3, [pc, #20]	@ (80095b4 <Clear_Button+0x28>)
 800959e:	781a      	ldrb	r2, [r3, #0]
 80095a0:	4b05      	ldr	r3, [pc, #20]	@ (80095b8 <Clear_Button+0x2c>)
 80095a2:	701a      	strb	r2, [r3, #0]
	}
	/* USER CODE END Clear_Button */
}
 80095a4:	bf00      	nop
 80095a6:	370c      	adds	r7, #12
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr
 80095b0:	200011fe 	.word	0x200011fe
 80095b4:	200016e1 	.word	0x200016e1
 80095b8:	20001774 	.word	0x20001774

080095bc <value_reset>:

/* value_reset function */
void value_reset(void const * argument)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b082      	sub	sp, #8
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN value_reset */
	test++;
 80095c4:	4b56      	ldr	r3, [pc, #344]	@ (8009720 <value_reset+0x164>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	3301      	adds	r3, #1
 80095ca:	4a55      	ldr	r2, [pc, #340]	@ (8009720 <value_reset+0x164>)
 80095cc:	6013      	str	r3, [r2, #0]
	if ((Value_reset_flag == 0) && (vt_value_reset_flag == 1)) {
 80095ce:	4b55      	ldr	r3, [pc, #340]	@ (8009724 <value_reset+0x168>)
 80095d0:	781b      	ldrb	r3, [r3, #0]
 80095d2:	f083 0301 	eor.w	r3, r3, #1
 80095d6:	b2db      	uxtb	r3, r3
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d01b      	beq.n	8009614 <value_reset+0x58>
 80095dc:	4b52      	ldr	r3, [pc, #328]	@ (8009728 <value_reset+0x16c>)
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d017      	beq.n	8009614 <value_reset+0x58>
		test2++;
 80095e4:	4b51      	ldr	r3, [pc, #324]	@ (800972c <value_reset+0x170>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	3301      	adds	r3, #1
 80095ea:	4a50      	ldr	r2, [pc, #320]	@ (800972c <value_reset+0x170>)
 80095ec:	6013      	str	r3, [r2, #0]
		vt_value = vt_temp_value;
 80095ee:	4b50      	ldr	r3, [pc, #320]	@ (8009730 <value_reset+0x174>)
 80095f0:	881a      	ldrh	r2, [r3, #0]
 80095f2:	4b50      	ldr	r3, [pc, #320]	@ (8009734 <value_reset+0x178>)
 80095f4:	801a      	strh	r2, [r3, #0]
		intiger_val_vt_send(0x01, vt_value);
 80095f6:	4b4f      	ldr	r3, [pc, #316]	@ (8009734 <value_reset+0x178>)
 80095f8:	881b      	ldrh	r3, [r3, #0]
 80095fa:	4619      	mov	r1, r3
 80095fc:	2001      	movs	r0, #1
 80095fe:	f7f8 fe85 	bl	800230c <intiger_val_vt_send>
		vt_value_reset_flag = 0;
 8009602:	4b49      	ldr	r3, [pc, #292]	@ (8009728 <value_reset+0x16c>)
 8009604:	2200      	movs	r2, #0
 8009606:	701a      	strb	r2, [r3, #0]
		osTimerStop(Touch_value_resetHandle);
 8009608:	4b4b      	ldr	r3, [pc, #300]	@ (8009738 <value_reset+0x17c>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4618      	mov	r0, r3
 800960e:	f006 ff61 	bl	80104d4 <osTimerStop>
 8009612:	e07d      	b.n	8009710 <value_reset+0x154>
	} else if ((Value_reset_flag == 0) && (plt_value_reset_flag == 1)) {
 8009614:	4b43      	ldr	r3, [pc, #268]	@ (8009724 <value_reset+0x168>)
 8009616:	781b      	ldrb	r3, [r3, #0]
 8009618:	f083 0301 	eor.w	r3, r3, #1
 800961c:	b2db      	uxtb	r3, r3
 800961e:	2b00      	cmp	r3, #0
 8009620:	d017      	beq.n	8009652 <value_reset+0x96>
 8009622:	4b46      	ldr	r3, [pc, #280]	@ (800973c <value_reset+0x180>)
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d013      	beq.n	8009652 <value_reset+0x96>
		PLR_value = PLR_temp_value;
 800962a:	4b45      	ldr	r3, [pc, #276]	@ (8009740 <value_reset+0x184>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	b2da      	uxtb	r2, r3
 8009630:	4b44      	ldr	r3, [pc, #272]	@ (8009744 <value_reset+0x188>)
 8009632:	701a      	strb	r2, [r3, #0]
		intiger_val_send(0x02, PLR_value);
 8009634:	4b43      	ldr	r3, [pc, #268]	@ (8009744 <value_reset+0x188>)
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	4619      	mov	r1, r3
 800963a:	2002      	movs	r0, #2
 800963c:	f7f8 fe42 	bl	80022c4 <intiger_val_send>
		plt_value_reset_flag = 0;
 8009640:	4b3e      	ldr	r3, [pc, #248]	@ (800973c <value_reset+0x180>)
 8009642:	2200      	movs	r2, #0
 8009644:	701a      	strb	r2, [r3, #0]
		osTimerStop(Touch_value_resetHandle);
 8009646:	4b3c      	ldr	r3, [pc, #240]	@ (8009738 <value_reset+0x17c>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4618      	mov	r0, r3
 800964c:	f006 ff42 	bl	80104d4 <osTimerStop>
 8009650:	e05e      	b.n	8009710 <value_reset+0x154>
	} else if ((Value_reset_flag == 0) && (rr_value_reset_flag == 1)) {
 8009652:	4b34      	ldr	r3, [pc, #208]	@ (8009724 <value_reset+0x168>)
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	f083 0301 	eor.w	r3, r3, #1
 800965a:	b2db      	uxtb	r3, r3
 800965c:	2b00      	cmp	r3, #0
 800965e:	d016      	beq.n	800968e <value_reset+0xd2>
 8009660:	4b39      	ldr	r3, [pc, #228]	@ (8009748 <value_reset+0x18c>)
 8009662:	781b      	ldrb	r3, [r3, #0]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d012      	beq.n	800968e <value_reset+0xd2>
		RR_value = RR_temp_value;
 8009668:	4b38      	ldr	r3, [pc, #224]	@ (800974c <value_reset+0x190>)
 800966a:	781a      	ldrb	r2, [r3, #0]
 800966c:	4b38      	ldr	r3, [pc, #224]	@ (8009750 <value_reset+0x194>)
 800966e:	701a      	strb	r2, [r3, #0]
		intiger_val_send(0x03, RR_value);
 8009670:	4b37      	ldr	r3, [pc, #220]	@ (8009750 <value_reset+0x194>)
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	4619      	mov	r1, r3
 8009676:	2003      	movs	r0, #3
 8009678:	f7f8 fe24 	bl	80022c4 <intiger_val_send>
		rr_value_reset_flag = 0;
 800967c:	4b32      	ldr	r3, [pc, #200]	@ (8009748 <value_reset+0x18c>)
 800967e:	2200      	movs	r2, #0
 8009680:	701a      	strb	r2, [r3, #0]
		osTimerStop(Touch_value_resetHandle);
 8009682:	4b2d      	ldr	r3, [pc, #180]	@ (8009738 <value_reset+0x17c>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4618      	mov	r0, r3
 8009688:	f006 ff24 	bl	80104d4 <osTimerStop>
 800968c:	e040      	b.n	8009710 <value_reset+0x154>
	} else if ((Value_reset_flag == 0) && (pu_value_reset_flag == 1)) {
 800968e:	4b25      	ldr	r3, [pc, #148]	@ (8009724 <value_reset+0x168>)
 8009690:	781b      	ldrb	r3, [r3, #0]
 8009692:	f083 0301 	eor.w	r3, r3, #1
 8009696:	b2db      	uxtb	r3, r3
 8009698:	2b00      	cmp	r3, #0
 800969a:	d016      	beq.n	80096ca <value_reset+0x10e>
 800969c:	4b2d      	ldr	r3, [pc, #180]	@ (8009754 <value_reset+0x198>)
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d012      	beq.n	80096ca <value_reset+0x10e>
		PU_value = PU_temp_value;
 80096a4:	4b2c      	ldr	r3, [pc, #176]	@ (8009758 <value_reset+0x19c>)
 80096a6:	781a      	ldrb	r2, [r3, #0]
 80096a8:	4b2c      	ldr	r3, [pc, #176]	@ (800975c <value_reset+0x1a0>)
 80096aa:	701a      	strb	r2, [r3, #0]
		intiger_val_send(0x05, PU_value);
 80096ac:	4b2b      	ldr	r3, [pc, #172]	@ (800975c <value_reset+0x1a0>)
 80096ae:	781b      	ldrb	r3, [r3, #0]
 80096b0:	4619      	mov	r1, r3
 80096b2:	2005      	movs	r0, #5
 80096b4:	f7f8 fe06 	bl	80022c4 <intiger_val_send>
		rr_value_reset_flag = 0;
 80096b8:	4b23      	ldr	r3, [pc, #140]	@ (8009748 <value_reset+0x18c>)
 80096ba:	2200      	movs	r2, #0
 80096bc:	701a      	strb	r2, [r3, #0]
		osTimerStop(Touch_value_resetHandle);
 80096be:	4b1e      	ldr	r3, [pc, #120]	@ (8009738 <value_reset+0x17c>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4618      	mov	r0, r3
 80096c4:	f006 ff06 	bl	80104d4 <osTimerStop>
 80096c8:	e022      	b.n	8009710 <value_reset+0x154>
	} else if ((Value_reset_flag == 0) && (peep_value_reset_flag == 1)) {
 80096ca:	4b16      	ldr	r3, [pc, #88]	@ (8009724 <value_reset+0x168>)
 80096cc:	781b      	ldrb	r3, [r3, #0]
 80096ce:	f083 0301 	eor.w	r3, r3, #1
 80096d2:	b2db      	uxtb	r3, r3
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d016      	beq.n	8009706 <value_reset+0x14a>
 80096d8:	4b21      	ldr	r3, [pc, #132]	@ (8009760 <value_reset+0x1a4>)
 80096da:	781b      	ldrb	r3, [r3, #0]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d012      	beq.n	8009706 <value_reset+0x14a>
		PEEP_value = PEEP_temp_value;
 80096e0:	4b20      	ldr	r3, [pc, #128]	@ (8009764 <value_reset+0x1a8>)
 80096e2:	781a      	ldrb	r2, [r3, #0]
 80096e4:	4b20      	ldr	r3, [pc, #128]	@ (8009768 <value_reset+0x1ac>)
 80096e6:	701a      	strb	r2, [r3, #0]
		intiger_val_send(0x08, PEEP_value);
 80096e8:	4b1f      	ldr	r3, [pc, #124]	@ (8009768 <value_reset+0x1ac>)
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	4619      	mov	r1, r3
 80096ee:	2008      	movs	r0, #8
 80096f0:	f7f8 fde8 	bl	80022c4 <intiger_val_send>
		peep_value_reset_flag = 0;
 80096f4:	4b1a      	ldr	r3, [pc, #104]	@ (8009760 <value_reset+0x1a4>)
 80096f6:	2200      	movs	r2, #0
 80096f8:	701a      	strb	r2, [r3, #0]
		osTimerStop(Touch_value_resetHandle);
 80096fa:	4b0f      	ldr	r3, [pc, #60]	@ (8009738 <value_reset+0x17c>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	4618      	mov	r0, r3
 8009700:	f006 fee8 	bl	80104d4 <osTimerStop>
 8009704:	e004      	b.n	8009710 <value_reset+0x154>
	} else {
		osTimerStop(Touch_value_resetHandle);
 8009706:	4b0c      	ldr	r3, [pc, #48]	@ (8009738 <value_reset+0x17c>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4618      	mov	r0, r3
 800970c:	f006 fee2 	bl	80104d4 <osTimerStop>
	}
	Value_reset_flag = 0;
 8009710:	4b04      	ldr	r3, [pc, #16]	@ (8009724 <value_reset+0x168>)
 8009712:	2200      	movs	r2, #0
 8009714:	701a      	strb	r2, [r3, #0]
	/* USER CODE END value_reset */
}
 8009716:	bf00      	nop
 8009718:	3708      	adds	r7, #8
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	2000176c 	.word	0x2000176c
 8009724:	200015c1 	.word	0x200015c1
 8009728:	200015d4 	.word	0x200015d4
 800972c:	20001768 	.word	0x20001768
 8009730:	20000034 	.word	0x20000034
 8009734:	20000024 	.word	0x20000024
 8009738:	20001134 	.word	0x20001134
 800973c:	200015d5 	.word	0x200015d5
 8009740:	20000038 	.word	0x20000038
 8009744:	20000026 	.word	0x20000026
 8009748:	200015d6 	.word	0x200015d6
 800974c:	2000003c 	.word	0x2000003c
 8009750:	20000027 	.word	0x20000027
 8009754:	200015d7 	.word	0x200015d7
 8009758:	200015b2 	.word	0x200015b2
 800975c:	200015a9 	.word	0x200015a9
 8009760:	200015d9 	.word	0x200015d9
 8009764:	200015b3 	.word	0x200015b3
 8009768:	200015b0 	.word	0x200015b0

0800976c <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b082      	sub	sp, #8
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a04      	ldr	r2, [pc, #16]	@ (800978c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d101      	bne.n	8009782 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 800977e:	f000 ffad 	bl	800a6dc <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8009782:	bf00      	nop
 8009784:	3708      	adds	r7, #8
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
 800978a:	bf00      	nop
 800978c:	40001000 	.word	0x40001000

08009790 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8009790:	b480      	push	{r7}
 8009792:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009794:	b672      	cpsid	i
}
 8009796:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8009798:	bf00      	nop
 800979a:	e7fd      	b.n	8009798 <Error_Handler+0x8>

0800979c <PID_Init>:
#include "pid_h.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b082      	sub	sp, #8
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ac:	6879      	ldr	r1, [r7, #4]
 80097ae:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	uPID->LastInput = *uPID->MyInput;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ba:	6879      	ldr	r1, [r7, #4]
 80097bc:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	if (uPID->OutputSum > uPID->OutMax)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80097cc:	f7f7 f99c 	bl	8000b08 <__aeabi_dcmpgt>
 80097d0:	4603      	mov	r3, r0
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d006      	beq.n	80097e4 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80097dc:	6879      	ldr	r1, [r7, #4]
 80097de:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }

}
 80097e2:	e011      	b.n	8009808 <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80097f0:	f7f7 f96c 	bl	8000acc <__aeabi_dcmplt>
 80097f4:	4603      	mov	r3, r0
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d100      	bne.n	80097fc <PID_Init+0x60>
}
 80097fa:	e005      	b.n	8009808 <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8009802:	6879      	ldr	r1, [r7, #4]
 8009804:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
}
 8009808:	bf00      	nop
 800980a:	3708      	adds	r7, #8
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b08a      	sub	sp, #40	@ 0x28
 8009814:	af00      	add	r7, sp, #0
 8009816:	6278      	str	r0, [r7, #36]	@ 0x24
 8009818:	6239      	str	r1, [r7, #32]
 800981a:	61fa      	str	r2, [r7, #28]
 800981c:	61bb      	str	r3, [r7, #24]
 800981e:	ed87 0b04 	vstr	d0, [r7, #16]
 8009822:	ed87 1b02 	vstr	d1, [r7, #8]
 8009826:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 800982a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800982c:	69fa      	ldr	r2, [r7, #28]
 800982e:	645a      	str	r2, [r3, #68]	@ 0x44
	uPID->MyInput    = Input;
 8009830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009832:	6a3a      	ldr	r2, [r7, #32]
 8009834:	641a      	str	r2, [r3, #64]	@ 0x40
	uPID->MySetpoint = Setpoint;
 8009836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009838:	69ba      	ldr	r2, [r7, #24]
 800983a:	649a      	str	r2, [r3, #72]	@ 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 800983c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800983e:	2200      	movs	r2, #0
 8009840:	705a      	strb	r2, [r3, #1]

	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 8009842:	ed9f 1b15 	vldr	d1, [pc, #84]	@ 8009898 <PID+0x88>
 8009846:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 80098a0 <PID+0x90>
 800984a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800984c:	f000 f934 	bl	8009ab8 <PID_SetOutputLimits>

	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8009850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009852:	2264      	movs	r2, #100	@ 0x64
 8009854:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 8009856:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800985a:	4619      	mov	r1, r3
 800985c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800985e:	f000 fa41 	bl	8009ce4 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8009862:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8009866:	4619      	mov	r1, r3
 8009868:	ed97 2b00 	vldr	d2, [r7]
 800986c:	ed97 1b02 	vldr	d1, [r7, #8]
 8009870:	ed97 0b04 	vldr	d0, [r7, #16]
 8009874:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009876:	f000 f98d 	bl	8009b94 <PID_SetTunings2>

	uPID->LastTime = GetTime() - uPID->SampleTime;
 800987a:	f000 ff43 	bl	800a704 <HAL_GetTick>
 800987e:	4602      	mov	r2, r0
 8009880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009882:	689b      	ldr	r3, [r3, #8]
 8009884:	1ad2      	subs	r2, r2, r3
 8009886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009888:	605a      	str	r2, [r3, #4]

}
 800988a:	bf00      	nop
 800988c:	3728      	adds	r7, #40	@ 0x28
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
 8009892:	bf00      	nop
 8009894:	f3af 8000 	nop.w
 8009898:	00000000 	.word	0x00000000
 800989c:	406fe000 	.word	0x406fe000
	...

080098a8 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 80098a8:	b5b0      	push	{r4, r5, r7, lr}
 80098aa:	b08c      	sub	sp, #48	@ 0x30
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;

	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	785b      	ldrb	r3, [r3, #1]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d101      	bne.n	80098bc <PID_Compute+0x14>
	{
		return _FALSE;
 80098b8:	2300      	movs	r3, #0
 80098ba:	e0db      	b.n	8009a74 <PID_Compute+0x1cc>
	}

	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 80098bc:	f000 ff22 	bl	800a704 <HAL_GetTick>
 80098c0:	6278      	str	r0, [r7, #36]	@ 0x24
	timeChange = (now - uPID->LastTime);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098c8:	1ad3      	subs	r3, r2, r3
 80098ca:	623b      	str	r3, [r7, #32]

	if (timeChange >= uPID->SampleTime)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	689b      	ldr	r3, [r3, #8]
 80098d0:	6a3a      	ldr	r2, [r7, #32]
 80098d2:	429a      	cmp	r2, r3
 80098d4:	f0c0 80cd 	bcc.w	8009a72 <PID_Compute+0x1ca>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e0:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80098e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80098ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80098f0:	f7f6 fcc2 	bl	8000278 <__aeabi_dsub>
 80098f4:	4602      	mov	r2, r0
 80098f6:	460b      	mov	r3, r1
 80098f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8009902:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009906:	f7f6 fcb7 	bl	8000278 <__aeabi_dsub>
 800990a:	4602      	mov	r2, r0
 800990c:	460b      	mov	r3, r1
 800990e:	e9c7 2302 	strd	r2, r3, [r7, #8]

		uPID->OutputSum     += (uPID->Ki * error);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800991e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009922:	f7f6 fe61 	bl	80005e8 <__aeabi_dmul>
 8009926:	4602      	mov	r2, r0
 8009928:	460b      	mov	r3, r1
 800992a:	4620      	mov	r0, r4
 800992c:	4629      	mov	r1, r5
 800992e:	f7f6 fca5 	bl	800027c <__adddf3>
 8009932:	4602      	mov	r2, r0
 8009934:	460b      	mov	r3, r1
 8009936:	6879      	ldr	r1, [r7, #4]
 8009938:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50

		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	781b      	ldrb	r3, [r3, #0]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d114      	bne.n	800996e <PID_Compute+0xc6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8009950:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009954:	f7f6 fe48 	bl	80005e8 <__aeabi_dmul>
 8009958:	4602      	mov	r2, r0
 800995a:	460b      	mov	r3, r1
 800995c:	4620      	mov	r0, r4
 800995e:	4629      	mov	r1, r5
 8009960:	f7f6 fc8a 	bl	8000278 <__aeabi_dsub>
 8009964:	4602      	mov	r2, r0
 8009966:	460b      	mov	r3, r1
 8009968:	6879      	ldr	r1, [r7, #4]
 800996a:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		}

		if (uPID->OutputSum > uPID->OutMax)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800997a:	f7f7 f8c5 	bl	8000b08 <__aeabi_dcmpgt>
 800997e:	4603      	mov	r3, r0
 8009980:	2b00      	cmp	r3, #0
 8009982:	d006      	beq.n	8009992 <PID_Compute+0xea>
		{
			uPID->OutputSum = uPID->OutMax;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800998a:	6879      	ldr	r1, [r7, #4]
 800998c:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8009990:	e010      	b.n	80099b4 <PID_Compute+0x10c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800999e:	f7f7 f895 	bl	8000acc <__aeabi_dcmplt>
 80099a2:	4603      	mov	r3, r0
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d005      	beq.n	80099b4 <PID_Compute+0x10c>
		{
			uPID->OutputSum = uPID->OutMin;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80099ae:	6879      	ldr	r1, [r7, #4]
 80099b0:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		}
		else { }

		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d00b      	beq.n	80099d4 <PID_Compute+0x12c>
		{
			output = uPID->Kp * error;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80099c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80099c6:	f7f6 fe0f 	bl	80005e8 <__aeabi_dmul>
 80099ca:	4602      	mov	r2, r0
 80099cc:	460b      	mov	r3, r1
 80099ce:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80099d2:	e005      	b.n	80099e0 <PID_Compute+0x138>
		}
		else
		{
			output = 0;
 80099d4:	f04f 0200 	mov.w	r2, #0
 80099d8:	f04f 0300 	mov.w	r3, #0
 80099dc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		}

		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80099ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80099f0:	f7f6 fdfa 	bl	80005e8 <__aeabi_dmul>
 80099f4:	4602      	mov	r2, r0
 80099f6:	460b      	mov	r3, r1
 80099f8:	4620      	mov	r0, r4
 80099fa:	4629      	mov	r1, r5
 80099fc:	f7f6 fc3c 	bl	8000278 <__aeabi_dsub>
 8009a00:	4602      	mov	r2, r0
 8009a02:	460b      	mov	r3, r1
 8009a04:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8009a08:	f7f6 fc38 	bl	800027c <__adddf3>
 8009a0c:	4602      	mov	r2, r0
 8009a0e:	460b      	mov	r3, r1
 8009a10:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

		if (output > uPID->OutMax)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8009a1a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8009a1e:	f7f7 f873 	bl	8000b08 <__aeabi_dcmpgt>
 8009a22:	4603      	mov	r3, r0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d005      	beq.n	8009a34 <PID_Compute+0x18c>
		{
			output = uPID->OutMax;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8009a2e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8009a32:	e00e      	b.n	8009a52 <PID_Compute+0x1aa>
		}
		else if (output < uPID->OutMin)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8009a3a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8009a3e:	f7f7 f845 	bl	8000acc <__aeabi_dcmplt>
 8009a42:	4603      	mov	r3, r0
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d004      	beq.n	8009a52 <PID_Compute+0x1aa>
		{
			output = uPID->OutMin;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8009a4e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		}
		else { }

		*uPID->MyOutput = output;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8009a56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009a5a:	e9c1 2300 	strd	r2, r3, [r1]

		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 8009a5e:	6879      	ldr	r1, [r7, #4]
 8009a60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009a64:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		uPID->LastTime = now;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a6c:	605a      	str	r2, [r3, #4]

		return _TRUE;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	e000      	b.n	8009a74 <PID_Compute+0x1cc>

	}
	else
	{
		return _FALSE;
 8009a72:	2300      	movs	r3, #0
	}

}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3730      	adds	r7, #48	@ 0x30
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bdb0      	pop	{r4, r5, r7, pc}

08009a7c <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b084      	sub	sp, #16
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	460b      	mov	r3, r1
 8009a86:	70fb      	strb	r3, [r7, #3]

	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8009a88:	78fb      	ldrb	r3, [r7, #3]
 8009a8a:	2b01      	cmp	r3, #1
 8009a8c:	bf0c      	ite	eq
 8009a8e:	2301      	moveq	r3, #1
 8009a90:	2300      	movne	r3, #0
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	73fb      	strb	r3, [r7, #15]

	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8009a96:	7bfb      	ldrb	r3, [r7, #15]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d006      	beq.n	8009aaa <PID_SetMode+0x2e>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	785b      	ldrb	r3, [r3, #1]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d102      	bne.n	8009aaa <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f7ff fe79 	bl	800979c <PID_Init>
	}

	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	7bfa      	ldrb	r2, [r7, #15]
 8009aae:	705a      	strb	r2, [r3, #1]

}
 8009ab0:	bf00      	nop
 8009ab2:	3710      	adds	r7, #16
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}

08009ab8 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b086      	sub	sp, #24
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6178      	str	r0, [r7, #20]
 8009ac0:	ed87 0b02 	vstr	d0, [r7, #8]
 8009ac4:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8009ac8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009acc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009ad0:	f7f7 f810 	bl	8000af4 <__aeabi_dcmpge>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d158      	bne.n	8009b8c <PID_SetOutputLimits+0xd4>
	{
		return;
	}

	uPID->OutMin = Min;
 8009ada:	6979      	ldr	r1, [r7, #20]
 8009adc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009ae0:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	uPID->OutMax = Max;
 8009ae4:	6979      	ldr	r1, [r7, #20]
 8009ae6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009aea:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68

	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	785b      	ldrb	r3, [r3, #1]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d04b      	beq.n	8009b8e <PID_SetOutputLimits+0xd6>
	{

		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009afa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8009b04:	f7f7 f800 	bl	8000b08 <__aeabi_dcmpgt>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d007      	beq.n	8009b1e <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8009b18:	e9c1 2300 	strd	r2, r3, [r1]
 8009b1c:	e012      	b.n	8009b44 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8009b2c:	f7f6 ffce 	bl	8000acc <__aeabi_dcmplt>
 8009b30:	4603      	mov	r3, r0
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d006      	beq.n	8009b44 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8009b40:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }

		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8009b50:	f7f6 ffda 	bl	8000b08 <__aeabi_dcmpgt>
 8009b54:	4603      	mov	r3, r0
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d006      	beq.n	8009b68 <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8009b60:	6979      	ldr	r1, [r7, #20]
 8009b62:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8009b66:	e012      	b.n	8009b8e <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8009b74:	f7f6 ffaa 	bl	8000acc <__aeabi_dcmplt>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d007      	beq.n	8009b8e <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8009b84:	6979      	ldr	r1, [r7, #20]
 8009b86:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8009b8a:	e000      	b.n	8009b8e <PID_SetOutputLimits+0xd6>
		return;
 8009b8c:	bf00      	nop
		}
		else { }

	}

}
 8009b8e:	3718      	adds	r7, #24
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b08a      	sub	sp, #40	@ 0x28
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	61f8      	str	r0, [r7, #28]
 8009b9c:	ed87 0b04 	vstr	d0, [r7, #16]
 8009ba0:	ed87 1b02 	vstr	d1, [r7, #8]
 8009ba4:	ed87 2b00 	vstr	d2, [r7]
 8009ba8:	460b      	mov	r3, r1
 8009baa:	76fb      	strb	r3, [r7, #27]

	double SampleTimeInSec;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8009bac:	f04f 0200 	mov.w	r2, #0
 8009bb0:	f04f 0300 	mov.w	r3, #0
 8009bb4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009bb8:	f7f6 ff88 	bl	8000acc <__aeabi_dcmplt>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	f040 8089 	bne.w	8009cd6 <PID_SetTunings2+0x142>
 8009bc4:	f04f 0200 	mov.w	r2, #0
 8009bc8:	f04f 0300 	mov.w	r3, #0
 8009bcc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009bd0:	f7f6 ff7c 	bl	8000acc <__aeabi_dcmplt>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d17d      	bne.n	8009cd6 <PID_SetTunings2+0x142>
 8009bda:	f04f 0200 	mov.w	r2, #0
 8009bde:	f04f 0300 	mov.w	r3, #0
 8009be2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009be6:	f7f6 ff71 	bl	8000acc <__aeabi_dcmplt>
 8009bea:	4603      	mov	r3, r0
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d172      	bne.n	8009cd6 <PID_SetTunings2+0x142>
	{
		return;
	}

	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8009bf0:	69fb      	ldr	r3, [r7, #28]
 8009bf2:	7efa      	ldrb	r2, [r7, #27]
 8009bf4:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8009bf6:	7efb      	ldrb	r3, [r7, #27]
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	bf0c      	ite	eq
 8009bfc:	2301      	moveq	r3, #1
 8009bfe:	2300      	movne	r3, #0
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	461a      	mov	r2, r3
 8009c04:	69fb      	ldr	r3, [r7, #28]
 8009c06:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8009c08:	69f9      	ldr	r1, [r7, #28]
 8009c0a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009c0e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8009c12:	69f9      	ldr	r1, [r7, #28]
 8009c14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009c18:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8009c1c:	69f9      	ldr	r1, [r7, #28]
 8009c1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c22:	e9c1 2308 	strd	r2, r3, [r1, #32]

	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8009c26:	69fb      	ldr	r3, [r7, #28]
 8009c28:	689b      	ldr	r3, [r3, #8]
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f7f6 fc62 	bl	80004f4 <__aeabi_ui2d>
 8009c30:	f04f 0200 	mov.w	r2, #0
 8009c34:	4b2a      	ldr	r3, [pc, #168]	@ (8009ce0 <PID_SetTunings2+0x14c>)
 8009c36:	f7f6 fe01 	bl	800083c <__aeabi_ddiv>
 8009c3a:	4602      	mov	r2, r0
 8009c3c:	460b      	mov	r3, r1
 8009c3e:	e9c7 2308 	strd	r2, r3, [r7, #32]

	uPID->Kp = Kp;
 8009c42:	69f9      	ldr	r1, [r7, #28]
 8009c44:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009c48:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8009c4c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009c50:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009c54:	f7f6 fcc8 	bl	80005e8 <__aeabi_dmul>
 8009c58:	4602      	mov	r2, r0
 8009c5a:	460b      	mov	r3, r1
 8009c5c:	69f9      	ldr	r1, [r7, #28]
 8009c5e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8009c62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009c66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009c6a:	f7f6 fde7 	bl	800083c <__aeabi_ddiv>
 8009c6e:	4602      	mov	r2, r0
 8009c70:	460b      	mov	r3, r1
 8009c72:	69f9      	ldr	r1, [r7, #28]
 8009c74:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8009c78:	69fb      	ldr	r3, [r7, #28]
 8009c7a:	78db      	ldrb	r3, [r3, #3]
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d12b      	bne.n	8009cd8 <PID_SetTunings2+0x144>
	{

		uPID->Kp = (0 - uPID->Kp);
 8009c80:	69fb      	ldr	r3, [r7, #28]
 8009c82:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8009c86:	f04f 0000 	mov.w	r0, #0
 8009c8a:	f04f 0100 	mov.w	r1, #0
 8009c8e:	f7f6 faf3 	bl	8000278 <__aeabi_dsub>
 8009c92:	4602      	mov	r2, r0
 8009c94:	460b      	mov	r3, r1
 8009c96:	69f9      	ldr	r1, [r7, #28]
 8009c98:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		uPID->Ki = (0 - uPID->Ki);
 8009c9c:	69fb      	ldr	r3, [r7, #28]
 8009c9e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8009ca2:	f04f 0000 	mov.w	r0, #0
 8009ca6:	f04f 0100 	mov.w	r1, #0
 8009caa:	f7f6 fae5 	bl	8000278 <__aeabi_dsub>
 8009cae:	4602      	mov	r2, r0
 8009cb0:	460b      	mov	r3, r1
 8009cb2:	69f9      	ldr	r1, [r7, #28]
 8009cb4:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd = (0 - uPID->Kd);
 8009cb8:	69fb      	ldr	r3, [r7, #28]
 8009cba:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8009cbe:	f04f 0000 	mov.w	r0, #0
 8009cc2:	f04f 0100 	mov.w	r1, #0
 8009cc6:	f7f6 fad7 	bl	8000278 <__aeabi_dsub>
 8009cca:	4602      	mov	r2, r0
 8009ccc:	460b      	mov	r3, r1
 8009cce:	69f9      	ldr	r1, [r7, #28]
 8009cd0:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
 8009cd4:	e000      	b.n	8009cd8 <PID_SetTunings2+0x144>
		return;
 8009cd6:	bf00      	nop

	}

}
 8009cd8:	3728      	adds	r7, #40	@ 0x28
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}
 8009cde:	bf00      	nop
 8009ce0:	408f4000 	.word	0x408f4000

08009ce4 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b082      	sub	sp, #8
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	460b      	mov	r3, r1
 8009cee:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	785b      	ldrb	r3, [r3, #1]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d02e      	beq.n	8009d56 <PID_SetControllerDirection+0x72>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	78db      	ldrb	r3, [r3, #3]
 8009cfc:	78fa      	ldrb	r2, [r7, #3]
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d029      	beq.n	8009d56 <PID_SetControllerDirection+0x72>
	{

		uPID->Kp = (0 - uPID->Kp);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8009d08:	f04f 0000 	mov.w	r0, #0
 8009d0c:	f04f 0100 	mov.w	r1, #0
 8009d10:	f7f6 fab2 	bl	8000278 <__aeabi_dsub>
 8009d14:	4602      	mov	r2, r0
 8009d16:	460b      	mov	r3, r1
 8009d18:	6879      	ldr	r1, [r7, #4]
 8009d1a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		uPID->Ki = (0 - uPID->Ki);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8009d24:	f04f 0000 	mov.w	r0, #0
 8009d28:	f04f 0100 	mov.w	r1, #0
 8009d2c:	f7f6 faa4 	bl	8000278 <__aeabi_dsub>
 8009d30:	4602      	mov	r2, r0
 8009d32:	460b      	mov	r3, r1
 8009d34:	6879      	ldr	r1, [r7, #4]
 8009d36:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd = (0 - uPID->Kd);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8009d40:	f04f 0000 	mov.w	r0, #0
 8009d44:	f04f 0100 	mov.w	r1, #0
 8009d48:	f7f6 fa96 	bl	8000278 <__aeabi_dsub>
 8009d4c:	4602      	mov	r2, r0
 8009d4e:	460b      	mov	r3, r1
 8009d50:	6879      	ldr	r1, [r7, #4]
 8009d52:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

	}

	uPID->ControllerDirection = Direction;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	78fa      	ldrb	r2, [r7, #3]
 8009d5a:	70da      	strb	r2, [r3, #3]

}
 8009d5c:	bf00      	nop
 8009d5e:	3708      	adds	r7, #8
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8009d64:	b5b0      	push	{r4, r5, r7, lr}
 8009d66:	b084      	sub	sp, #16
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]

	double ratio;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	dd2e      	ble.n	8009dd2 <PID_SetSampleTime+0x6e>
	{

		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8009d74:	6838      	ldr	r0, [r7, #0]
 8009d76:	f7f6 fbcd 	bl	8000514 <__aeabi_i2d>
 8009d7a:	4604      	mov	r4, r0
 8009d7c:	460d      	mov	r5, r1
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	689b      	ldr	r3, [r3, #8]
 8009d82:	4618      	mov	r0, r3
 8009d84:	f7f6 fbb6 	bl	80004f4 <__aeabi_ui2d>
 8009d88:	4602      	mov	r2, r0
 8009d8a:	460b      	mov	r3, r1
 8009d8c:	4620      	mov	r0, r4
 8009d8e:	4629      	mov	r1, r5
 8009d90:	f7f6 fd54 	bl	800083c <__aeabi_ddiv>
 8009d94:	4602      	mov	r2, r0
 8009d96:	460b      	mov	r3, r1
 8009d98:	e9c7 2302 	strd	r2, r3, [r7, #8]

		uPID->Ki *= ratio;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8009da2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009da6:	f7f6 fc1f 	bl	80005e8 <__aeabi_dmul>
 8009daa:	4602      	mov	r2, r0
 8009dac:	460b      	mov	r3, r1
 8009dae:	6879      	ldr	r1, [r7, #4]
 8009db0:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd /= ratio;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8009dba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009dbe:	f7f6 fd3d 	bl	800083c <__aeabi_ddiv>
 8009dc2:	4602      	mov	r2, r0
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	6879      	ldr	r1, [r7, #4]
 8009dc8:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8009dcc:	683a      	ldr	r2, [r7, #0]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	609a      	str	r2, [r3, #8]

	}

}
 8009dd2:	bf00      	nop
 8009dd4:	3710      	adds	r7, #16
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009ddc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b082      	sub	sp, #8
 8009de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009de2:	2300      	movs	r3, #0
 8009de4:	607b      	str	r3, [r7, #4]
 8009de6:	4b12      	ldr	r3, [pc, #72]	@ (8009e30 <HAL_MspInit+0x54>)
 8009de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009dea:	4a11      	ldr	r2, [pc, #68]	@ (8009e30 <HAL_MspInit+0x54>)
 8009dec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009df0:	6453      	str	r3, [r2, #68]	@ 0x44
 8009df2:	4b0f      	ldr	r3, [pc, #60]	@ (8009e30 <HAL_MspInit+0x54>)
 8009df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009df6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009dfa:	607b      	str	r3, [r7, #4]
 8009dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009dfe:	2300      	movs	r3, #0
 8009e00:	603b      	str	r3, [r7, #0]
 8009e02:	4b0b      	ldr	r3, [pc, #44]	@ (8009e30 <HAL_MspInit+0x54>)
 8009e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e06:	4a0a      	ldr	r2, [pc, #40]	@ (8009e30 <HAL_MspInit+0x54>)
 8009e08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009e0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8009e0e:	4b08      	ldr	r3, [pc, #32]	@ (8009e30 <HAL_MspInit+0x54>)
 8009e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e16:	603b      	str	r3, [r7, #0]
 8009e18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	210f      	movs	r1, #15
 8009e1e:	f06f 0001 	mvn.w	r0, #1
 8009e22:	f001 f957 	bl	800b0d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009e26:	bf00      	nop
 8009e28:	3708      	adds	r7, #8
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}
 8009e2e:	bf00      	nop
 8009e30:	40023800 	.word	0x40023800

08009e34 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b08e      	sub	sp, #56	@ 0x38
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009e40:	2200      	movs	r2, #0
 8009e42:	601a      	str	r2, [r3, #0]
 8009e44:	605a      	str	r2, [r3, #4]
 8009e46:	609a      	str	r2, [r3, #8]
 8009e48:	60da      	str	r2, [r3, #12]
 8009e4a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4a45      	ldr	r2, [pc, #276]	@ (8009f68 <HAL_ADC_MspInit+0x134>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d128      	bne.n	8009ea8 <HAL_ADC_MspInit+0x74>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8009e56:	2300      	movs	r3, #0
 8009e58:	623b      	str	r3, [r7, #32]
 8009e5a:	4b44      	ldr	r3, [pc, #272]	@ (8009f6c <HAL_ADC_MspInit+0x138>)
 8009e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e5e:	4a43      	ldr	r2, [pc, #268]	@ (8009f6c <HAL_ADC_MspInit+0x138>)
 8009e60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009e64:	6453      	str	r3, [r2, #68]	@ 0x44
 8009e66:	4b41      	ldr	r3, [pc, #260]	@ (8009f6c <HAL_ADC_MspInit+0x138>)
 8009e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e6e:	623b      	str	r3, [r7, #32]
 8009e70:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009e72:	2300      	movs	r3, #0
 8009e74:	61fb      	str	r3, [r7, #28]
 8009e76:	4b3d      	ldr	r3, [pc, #244]	@ (8009f6c <HAL_ADC_MspInit+0x138>)
 8009e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e7a:	4a3c      	ldr	r2, [pc, #240]	@ (8009f6c <HAL_ADC_MspInit+0x138>)
 8009e7c:	f043 0302 	orr.w	r3, r3, #2
 8009e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8009e82:	4b3a      	ldr	r3, [pc, #232]	@ (8009f6c <HAL_ADC_MspInit+0x138>)
 8009e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e86:	f003 0302 	and.w	r3, r3, #2
 8009e8a:	61fb      	str	r3, [r7, #28]
 8009e8c:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8009e8e:	2302      	movs	r3, #2
 8009e90:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009e92:	2303      	movs	r3, #3
 8009e94:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e96:	2300      	movs	r3, #0
 8009e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009e9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	4833      	ldr	r0, [pc, #204]	@ (8009f70 <HAL_ADC_MspInit+0x13c>)
 8009ea2:	f001 fd43 	bl	800b92c <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC3_MspInit 1 */

    /* USER CODE END ADC3_MspInit 1 */
  }

}
 8009ea6:	e05a      	b.n	8009f5e <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4a31      	ldr	r2, [pc, #196]	@ (8009f74 <HAL_ADC_MspInit+0x140>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d128      	bne.n	8009f04 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	61bb      	str	r3, [r7, #24]
 8009eb6:	4b2d      	ldr	r3, [pc, #180]	@ (8009f6c <HAL_ADC_MspInit+0x138>)
 8009eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009eba:	4a2c      	ldr	r2, [pc, #176]	@ (8009f6c <HAL_ADC_MspInit+0x138>)
 8009ebc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009ec0:	6453      	str	r3, [r2, #68]	@ 0x44
 8009ec2:	4b2a      	ldr	r3, [pc, #168]	@ (8009f6c <HAL_ADC_MspInit+0x138>)
 8009ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ec6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009eca:	61bb      	str	r3, [r7, #24]
 8009ecc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ece:	2300      	movs	r3, #0
 8009ed0:	617b      	str	r3, [r7, #20]
 8009ed2:	4b26      	ldr	r3, [pc, #152]	@ (8009f6c <HAL_ADC_MspInit+0x138>)
 8009ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ed6:	4a25      	ldr	r2, [pc, #148]	@ (8009f6c <HAL_ADC_MspInit+0x138>)
 8009ed8:	f043 0301 	orr.w	r3, r3, #1
 8009edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8009ede:	4b23      	ldr	r3, [pc, #140]	@ (8009f6c <HAL_ADC_MspInit+0x138>)
 8009ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ee2:	f003 0301 	and.w	r3, r3, #1
 8009ee6:	617b      	str	r3, [r7, #20]
 8009ee8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8009eea:	2301      	movs	r3, #1
 8009eec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009eee:	2303      	movs	r3, #3
 8009ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ef6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009efa:	4619      	mov	r1, r3
 8009efc:	481e      	ldr	r0, [pc, #120]	@ (8009f78 <HAL_ADC_MspInit+0x144>)
 8009efe:	f001 fd15 	bl	800b92c <HAL_GPIO_Init>
}
 8009f02:	e02c      	b.n	8009f5e <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4a1c      	ldr	r2, [pc, #112]	@ (8009f7c <HAL_ADC_MspInit+0x148>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d127      	bne.n	8009f5e <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8009f0e:	2300      	movs	r3, #0
 8009f10:	613b      	str	r3, [r7, #16]
 8009f12:	4b16      	ldr	r3, [pc, #88]	@ (8009f6c <HAL_ADC_MspInit+0x138>)
 8009f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f16:	4a15      	ldr	r2, [pc, #84]	@ (8009f6c <HAL_ADC_MspInit+0x138>)
 8009f18:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009f1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8009f1e:	4b13      	ldr	r3, [pc, #76]	@ (8009f6c <HAL_ADC_MspInit+0x138>)
 8009f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009f26:	613b      	str	r3, [r7, #16]
 8009f28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	60fb      	str	r3, [r7, #12]
 8009f2e:	4b0f      	ldr	r3, [pc, #60]	@ (8009f6c <HAL_ADC_MspInit+0x138>)
 8009f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f32:	4a0e      	ldr	r2, [pc, #56]	@ (8009f6c <HAL_ADC_MspInit+0x138>)
 8009f34:	f043 0301 	orr.w	r3, r3, #1
 8009f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8009f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8009f6c <HAL_ADC_MspInit+0x138>)
 8009f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f3e:	f003 0301 	and.w	r3, r3, #1
 8009f42:	60fb      	str	r3, [r7, #12]
 8009f44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8009f46:	2302      	movs	r3, #2
 8009f48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009f4a:	2303      	movs	r3, #3
 8009f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009f56:	4619      	mov	r1, r3
 8009f58:	4807      	ldr	r0, [pc, #28]	@ (8009f78 <HAL_ADC_MspInit+0x144>)
 8009f5a:	f001 fce7 	bl	800b92c <HAL_GPIO_Init>
}
 8009f5e:	bf00      	nop
 8009f60:	3738      	adds	r7, #56	@ 0x38
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	40012000 	.word	0x40012000
 8009f6c:	40023800 	.word	0x40023800
 8009f70:	40020400 	.word	0x40020400
 8009f74:	40012100 	.word	0x40012100
 8009f78:	40020000 	.word	0x40020000
 8009f7c:	40012200 	.word	0x40012200

08009f80 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b086      	sub	sp, #24
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009f88:	f107 0308 	add.w	r3, r7, #8
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	601a      	str	r2, [r3, #0]
 8009f90:	605a      	str	r2, [r3, #4]
 8009f92:	609a      	str	r2, [r3, #8]
 8009f94:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4a10      	ldr	r2, [pc, #64]	@ (8009fdc <HAL_RTC_MspInit+0x5c>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d119      	bne.n	8009fd4 <HAL_RTC_MspInit+0x54>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8009fa0:	2302      	movs	r3, #2
 8009fa2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8009fa4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009fa8:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009faa:	f107 0308 	add.w	r3, r7, #8
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f002 fb54 	bl	800c65c <HAL_RCCEx_PeriphCLKConfig>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d001      	beq.n	8009fbe <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8009fba:	f7ff fbe9 	bl	8009790 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8009fbe:	4b08      	ldr	r3, [pc, #32]	@ (8009fe0 <HAL_RTC_MspInit+0x60>)
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	2105      	movs	r1, #5
 8009fc8:	2029      	movs	r0, #41	@ 0x29
 8009fca:	f001 f883 	bl	800b0d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8009fce:	2029      	movs	r0, #41	@ 0x29
 8009fd0:	f001 f89c 	bl	800b10c <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8009fd4:	bf00      	nop
 8009fd6:	3718      	adds	r7, #24
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}
 8009fdc:	40002800 	.word	0x40002800
 8009fe0:	42470e3c 	.word	0x42470e3c

08009fe4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b08c      	sub	sp, #48	@ 0x30
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009fec:	f107 031c 	add.w	r3, r7, #28
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	601a      	str	r2, [r3, #0]
 8009ff4:	605a      	str	r2, [r3, #4]
 8009ff6:	609a      	str	r2, [r3, #8]
 8009ff8:	60da      	str	r2, [r3, #12]
 8009ffa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4a32      	ldr	r2, [pc, #200]	@ (800a0cc <HAL_SPI_MspInit+0xe8>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d12c      	bne.n	800a060 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800a006:	2300      	movs	r3, #0
 800a008:	61bb      	str	r3, [r7, #24]
 800a00a:	4b31      	ldr	r3, [pc, #196]	@ (800a0d0 <HAL_SPI_MspInit+0xec>)
 800a00c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a00e:	4a30      	ldr	r2, [pc, #192]	@ (800a0d0 <HAL_SPI_MspInit+0xec>)
 800a010:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a014:	6453      	str	r3, [r2, #68]	@ 0x44
 800a016:	4b2e      	ldr	r3, [pc, #184]	@ (800a0d0 <HAL_SPI_MspInit+0xec>)
 800a018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a01a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a01e:	61bb      	str	r3, [r7, #24]
 800a020:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a022:	2300      	movs	r3, #0
 800a024:	617b      	str	r3, [r7, #20]
 800a026:	4b2a      	ldr	r3, [pc, #168]	@ (800a0d0 <HAL_SPI_MspInit+0xec>)
 800a028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a02a:	4a29      	ldr	r2, [pc, #164]	@ (800a0d0 <HAL_SPI_MspInit+0xec>)
 800a02c:	f043 0302 	orr.w	r3, r3, #2
 800a030:	6313      	str	r3, [r2, #48]	@ 0x30
 800a032:	4b27      	ldr	r3, [pc, #156]	@ (800a0d0 <HAL_SPI_MspInit+0xec>)
 800a034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a036:	f003 0302 	and.w	r3, r3, #2
 800a03a:	617b      	str	r3, [r7, #20]
 800a03c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800a03e:	2338      	movs	r3, #56	@ 0x38
 800a040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a042:	2302      	movs	r3, #2
 800a044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a046:	2300      	movs	r3, #0
 800a048:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a04a:	2303      	movs	r3, #3
 800a04c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800a04e:	2305      	movs	r3, #5
 800a050:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a052:	f107 031c 	add.w	r3, r7, #28
 800a056:	4619      	mov	r1, r3
 800a058:	481e      	ldr	r0, [pc, #120]	@ (800a0d4 <HAL_SPI_MspInit+0xf0>)
 800a05a:	f001 fc67 	bl	800b92c <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 800a05e:	e031      	b.n	800a0c4 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI3)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a1c      	ldr	r2, [pc, #112]	@ (800a0d8 <HAL_SPI_MspInit+0xf4>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d12c      	bne.n	800a0c4 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800a06a:	2300      	movs	r3, #0
 800a06c:	613b      	str	r3, [r7, #16]
 800a06e:	4b18      	ldr	r3, [pc, #96]	@ (800a0d0 <HAL_SPI_MspInit+0xec>)
 800a070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a072:	4a17      	ldr	r2, [pc, #92]	@ (800a0d0 <HAL_SPI_MspInit+0xec>)
 800a074:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a078:	6413      	str	r3, [r2, #64]	@ 0x40
 800a07a:	4b15      	ldr	r3, [pc, #84]	@ (800a0d0 <HAL_SPI_MspInit+0xec>)
 800a07c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a07e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a082:	613b      	str	r3, [r7, #16]
 800a084:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a086:	2300      	movs	r3, #0
 800a088:	60fb      	str	r3, [r7, #12]
 800a08a:	4b11      	ldr	r3, [pc, #68]	@ (800a0d0 <HAL_SPI_MspInit+0xec>)
 800a08c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a08e:	4a10      	ldr	r2, [pc, #64]	@ (800a0d0 <HAL_SPI_MspInit+0xec>)
 800a090:	f043 0304 	orr.w	r3, r3, #4
 800a094:	6313      	str	r3, [r2, #48]	@ 0x30
 800a096:	4b0e      	ldr	r3, [pc, #56]	@ (800a0d0 <HAL_SPI_MspInit+0xec>)
 800a098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a09a:	f003 0304 	and.w	r3, r3, #4
 800a09e:	60fb      	str	r3, [r7, #12]
 800a0a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800a0a2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800a0a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0a8:	2302      	movs	r3, #2
 800a0aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a0b0:	2303      	movs	r3, #3
 800a0b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800a0b4:	2306      	movs	r3, #6
 800a0b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a0b8:	f107 031c 	add.w	r3, r7, #28
 800a0bc:	4619      	mov	r1, r3
 800a0be:	4807      	ldr	r0, [pc, #28]	@ (800a0dc <HAL_SPI_MspInit+0xf8>)
 800a0c0:	f001 fc34 	bl	800b92c <HAL_GPIO_Init>
}
 800a0c4:	bf00      	nop
 800a0c6:	3730      	adds	r7, #48	@ 0x30
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}
 800a0cc:	40013000 	.word	0x40013000
 800a0d0:	40023800 	.word	0x40023800
 800a0d4:	40020400 	.word	0x40020400
 800a0d8:	40003c00 	.word	0x40003c00
 800a0dc:	40020800 	.word	0x40020800

0800a0e0 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b085      	sub	sp, #20
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	4a0b      	ldr	r2, [pc, #44]	@ (800a11c <HAL_TIM_PWM_MspInit+0x3c>)
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d10d      	bne.n	800a10e <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	60fb      	str	r3, [r7, #12]
 800a0f6:	4b0a      	ldr	r3, [pc, #40]	@ (800a120 <HAL_TIM_PWM_MspInit+0x40>)
 800a0f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0fa:	4a09      	ldr	r2, [pc, #36]	@ (800a120 <HAL_TIM_PWM_MspInit+0x40>)
 800a0fc:	f043 0301 	orr.w	r3, r3, #1
 800a100:	6453      	str	r3, [r2, #68]	@ 0x44
 800a102:	4b07      	ldr	r3, [pc, #28]	@ (800a120 <HAL_TIM_PWM_MspInit+0x40>)
 800a104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a106:	f003 0301 	and.w	r3, r3, #1
 800a10a:	60fb      	str	r3, [r7, #12]
 800a10c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800a10e:	bf00      	nop
 800a110:	3714      	adds	r7, #20
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr
 800a11a:	bf00      	nop
 800a11c:	40010000 	.word	0x40010000
 800a120:	40023800 	.word	0x40023800

0800a124 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a124:	b480      	push	{r7}
 800a126:	b085      	sub	sp, #20
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4a0b      	ldr	r2, [pc, #44]	@ (800a160 <HAL_TIM_Base_MspInit+0x3c>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d10d      	bne.n	800a152 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800a136:	2300      	movs	r3, #0
 800a138:	60fb      	str	r3, [r7, #12]
 800a13a:	4b0a      	ldr	r3, [pc, #40]	@ (800a164 <HAL_TIM_Base_MspInit+0x40>)
 800a13c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a13e:	4a09      	ldr	r2, [pc, #36]	@ (800a164 <HAL_TIM_Base_MspInit+0x40>)
 800a140:	f043 0304 	orr.w	r3, r3, #4
 800a144:	6413      	str	r3, [r2, #64]	@ 0x40
 800a146:	4b07      	ldr	r3, [pc, #28]	@ (800a164 <HAL_TIM_Base_MspInit+0x40>)
 800a148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a14a:	f003 0304 	and.w	r3, r3, #4
 800a14e:	60fb      	str	r3, [r7, #12]
 800a150:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 800a152:	bf00      	nop
 800a154:	3714      	adds	r7, #20
 800a156:	46bd      	mov	sp, r7
 800a158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15c:	4770      	bx	lr
 800a15e:	bf00      	nop
 800a160:	40000800 	.word	0x40000800
 800a164:	40023800 	.word	0x40023800

0800a168 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b08a      	sub	sp, #40	@ 0x28
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a170:	f107 0314 	add.w	r3, r7, #20
 800a174:	2200      	movs	r2, #0
 800a176:	601a      	str	r2, [r3, #0]
 800a178:	605a      	str	r2, [r3, #4]
 800a17a:	609a      	str	r2, [r3, #8]
 800a17c:	60da      	str	r2, [r3, #12]
 800a17e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	4a25      	ldr	r2, [pc, #148]	@ (800a21c <HAL_TIM_MspPostInit+0xb4>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d11f      	bne.n	800a1ca <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a18a:	2300      	movs	r3, #0
 800a18c:	613b      	str	r3, [r7, #16]
 800a18e:	4b24      	ldr	r3, [pc, #144]	@ (800a220 <HAL_TIM_MspPostInit+0xb8>)
 800a190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a192:	4a23      	ldr	r2, [pc, #140]	@ (800a220 <HAL_TIM_MspPostInit+0xb8>)
 800a194:	f043 0310 	orr.w	r3, r3, #16
 800a198:	6313      	str	r3, [r2, #48]	@ 0x30
 800a19a:	4b21      	ldr	r3, [pc, #132]	@ (800a220 <HAL_TIM_MspPostInit+0xb8>)
 800a19c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a19e:	f003 0310 	and.w	r3, r3, #16
 800a1a2:	613b      	str	r3, [r7, #16]
 800a1a4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800a1a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a1aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1ac:	2302      	movs	r3, #2
 800a1ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a1bc:	f107 0314 	add.w	r3, r7, #20
 800a1c0:	4619      	mov	r1, r3
 800a1c2:	4818      	ldr	r0, [pc, #96]	@ (800a224 <HAL_TIM_MspPostInit+0xbc>)
 800a1c4:	f001 fbb2 	bl	800b92c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800a1c8:	e023      	b.n	800a212 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM4)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4a16      	ldr	r2, [pc, #88]	@ (800a228 <HAL_TIM_MspPostInit+0xc0>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d11e      	bne.n	800a212 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	60fb      	str	r3, [r7, #12]
 800a1d8:	4b11      	ldr	r3, [pc, #68]	@ (800a220 <HAL_TIM_MspPostInit+0xb8>)
 800a1da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1dc:	4a10      	ldr	r2, [pc, #64]	@ (800a220 <HAL_TIM_MspPostInit+0xb8>)
 800a1de:	f043 0308 	orr.w	r3, r3, #8
 800a1e2:	6313      	str	r3, [r2, #48]	@ 0x30
 800a1e4:	4b0e      	ldr	r3, [pc, #56]	@ (800a220 <HAL_TIM_MspPostInit+0xb8>)
 800a1e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1e8:	f003 0308 	and.w	r3, r3, #8
 800a1ec:	60fb      	str	r3, [r7, #12]
 800a1ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800a1f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a1f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1f6:	2302      	movs	r3, #2
 800a1f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a1fe:	2300      	movs	r3, #0
 800a200:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800a202:	2302      	movs	r3, #2
 800a204:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a206:	f107 0314 	add.w	r3, r7, #20
 800a20a:	4619      	mov	r1, r3
 800a20c:	4807      	ldr	r0, [pc, #28]	@ (800a22c <HAL_TIM_MspPostInit+0xc4>)
 800a20e:	f001 fb8d 	bl	800b92c <HAL_GPIO_Init>
}
 800a212:	bf00      	nop
 800a214:	3728      	adds	r7, #40	@ 0x28
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}
 800a21a:	bf00      	nop
 800a21c:	40010000 	.word	0x40010000
 800a220:	40023800 	.word	0x40023800
 800a224:	40021000 	.word	0x40021000
 800a228:	40000800 	.word	0x40000800
 800a22c:	40020c00 	.word	0x40020c00

0800a230 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b08c      	sub	sp, #48	@ 0x30
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a238:	f107 031c 	add.w	r3, r7, #28
 800a23c:	2200      	movs	r2, #0
 800a23e:	601a      	str	r2, [r3, #0]
 800a240:	605a      	str	r2, [r3, #4]
 800a242:	609a      	str	r2, [r3, #8]
 800a244:	60da      	str	r2, [r3, #12]
 800a246:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4a69      	ldr	r2, [pc, #420]	@ (800a3f4 <HAL_UART_MspInit+0x1c4>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d164      	bne.n	800a31c <HAL_UART_MspInit+0xec>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a252:	2300      	movs	r3, #0
 800a254:	61bb      	str	r3, [r7, #24]
 800a256:	4b68      	ldr	r3, [pc, #416]	@ (800a3f8 <HAL_UART_MspInit+0x1c8>)
 800a258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a25a:	4a67      	ldr	r2, [pc, #412]	@ (800a3f8 <HAL_UART_MspInit+0x1c8>)
 800a25c:	f043 0310 	orr.w	r3, r3, #16
 800a260:	6453      	str	r3, [r2, #68]	@ 0x44
 800a262:	4b65      	ldr	r3, [pc, #404]	@ (800a3f8 <HAL_UART_MspInit+0x1c8>)
 800a264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a266:	f003 0310 	and.w	r3, r3, #16
 800a26a:	61bb      	str	r3, [r7, #24]
 800a26c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a26e:	2300      	movs	r3, #0
 800a270:	617b      	str	r3, [r7, #20]
 800a272:	4b61      	ldr	r3, [pc, #388]	@ (800a3f8 <HAL_UART_MspInit+0x1c8>)
 800a274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a276:	4a60      	ldr	r2, [pc, #384]	@ (800a3f8 <HAL_UART_MspInit+0x1c8>)
 800a278:	f043 0301 	orr.w	r3, r3, #1
 800a27c:	6313      	str	r3, [r2, #48]	@ 0x30
 800a27e:	4b5e      	ldr	r3, [pc, #376]	@ (800a3f8 <HAL_UART_MspInit+0x1c8>)
 800a280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a282:	f003 0301 	and.w	r3, r3, #1
 800a286:	617b      	str	r3, [r7, #20]
 800a288:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800a28a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800a28e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a290:	2302      	movs	r3, #2
 800a292:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a294:	2300      	movs	r3, #0
 800a296:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a298:	2303      	movs	r3, #3
 800a29a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a29c:	2307      	movs	r3, #7
 800a29e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a2a0:	f107 031c 	add.w	r3, r7, #28
 800a2a4:	4619      	mov	r1, r3
 800a2a6:	4855      	ldr	r0, [pc, #340]	@ (800a3fc <HAL_UART_MspInit+0x1cc>)
 800a2a8:	f001 fb40 	bl	800b92c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800a2ac:	4b54      	ldr	r3, [pc, #336]	@ (800a400 <HAL_UART_MspInit+0x1d0>)
 800a2ae:	4a55      	ldr	r2, [pc, #340]	@ (800a404 <HAL_UART_MspInit+0x1d4>)
 800a2b0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800a2b2:	4b53      	ldr	r3, [pc, #332]	@ (800a400 <HAL_UART_MspInit+0x1d0>)
 800a2b4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800a2b8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a2ba:	4b51      	ldr	r3, [pc, #324]	@ (800a400 <HAL_UART_MspInit+0x1d0>)
 800a2bc:	2200      	movs	r2, #0
 800a2be:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a2c0:	4b4f      	ldr	r3, [pc, #316]	@ (800a400 <HAL_UART_MspInit+0x1d0>)
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a2c6:	4b4e      	ldr	r3, [pc, #312]	@ (800a400 <HAL_UART_MspInit+0x1d0>)
 800a2c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a2cc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a2ce:	4b4c      	ldr	r3, [pc, #304]	@ (800a400 <HAL_UART_MspInit+0x1d0>)
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a2d4:	4b4a      	ldr	r3, [pc, #296]	@ (800a400 <HAL_UART_MspInit+0x1d0>)
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800a2da:	4b49      	ldr	r3, [pc, #292]	@ (800a400 <HAL_UART_MspInit+0x1d0>)
 800a2dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a2e0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a2e2:	4b47      	ldr	r3, [pc, #284]	@ (800a400 <HAL_UART_MspInit+0x1d0>)
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a2e8:	4b45      	ldr	r3, [pc, #276]	@ (800a400 <HAL_UART_MspInit+0x1d0>)
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800a2ee:	4844      	ldr	r0, [pc, #272]	@ (800a400 <HAL_UART_MspInit+0x1d0>)
 800a2f0:	f000 ff1a 	bl	800b128 <HAL_DMA_Init>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d001      	beq.n	800a2fe <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800a2fa:	f7ff fa49 	bl	8009790 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	4a3f      	ldr	r2, [pc, #252]	@ (800a400 <HAL_UART_MspInit+0x1d0>)
 800a302:	63da      	str	r2, [r3, #60]	@ 0x3c
 800a304:	4a3e      	ldr	r2, [pc, #248]	@ (800a400 <HAL_UART_MspInit+0x1d0>)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800a30a:	2200      	movs	r2, #0
 800a30c:	2105      	movs	r1, #5
 800a30e:	2025      	movs	r0, #37	@ 0x25
 800a310:	f000 fee0 	bl	800b0d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800a314:	2025      	movs	r0, #37	@ 0x25
 800a316:	f000 fef9 	bl	800b10c <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 800a31a:	e067      	b.n	800a3ec <HAL_UART_MspInit+0x1bc>
  else if(huart->Instance==USART2)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4a39      	ldr	r2, [pc, #228]	@ (800a408 <HAL_UART_MspInit+0x1d8>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d162      	bne.n	800a3ec <HAL_UART_MspInit+0x1bc>
    __HAL_RCC_USART2_CLK_ENABLE();
 800a326:	2300      	movs	r3, #0
 800a328:	613b      	str	r3, [r7, #16]
 800a32a:	4b33      	ldr	r3, [pc, #204]	@ (800a3f8 <HAL_UART_MspInit+0x1c8>)
 800a32c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a32e:	4a32      	ldr	r2, [pc, #200]	@ (800a3f8 <HAL_UART_MspInit+0x1c8>)
 800a330:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a334:	6413      	str	r3, [r2, #64]	@ 0x40
 800a336:	4b30      	ldr	r3, [pc, #192]	@ (800a3f8 <HAL_UART_MspInit+0x1c8>)
 800a338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a33a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a33e:	613b      	str	r3, [r7, #16]
 800a340:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a342:	2300      	movs	r3, #0
 800a344:	60fb      	str	r3, [r7, #12]
 800a346:	4b2c      	ldr	r3, [pc, #176]	@ (800a3f8 <HAL_UART_MspInit+0x1c8>)
 800a348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a34a:	4a2b      	ldr	r2, [pc, #172]	@ (800a3f8 <HAL_UART_MspInit+0x1c8>)
 800a34c:	f043 0301 	orr.w	r3, r3, #1
 800a350:	6313      	str	r3, [r2, #48]	@ 0x30
 800a352:	4b29      	ldr	r3, [pc, #164]	@ (800a3f8 <HAL_UART_MspInit+0x1c8>)
 800a354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a356:	f003 0301 	and.w	r3, r3, #1
 800a35a:	60fb      	str	r3, [r7, #12]
 800a35c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800a35e:	230c      	movs	r3, #12
 800a360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a362:	2302      	movs	r3, #2
 800a364:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a366:	2300      	movs	r3, #0
 800a368:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a36a:	2303      	movs	r3, #3
 800a36c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a36e:	2307      	movs	r3, #7
 800a370:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a372:	f107 031c 	add.w	r3, r7, #28
 800a376:	4619      	mov	r1, r3
 800a378:	4820      	ldr	r0, [pc, #128]	@ (800a3fc <HAL_UART_MspInit+0x1cc>)
 800a37a:	f001 fad7 	bl	800b92c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800a37e:	4b23      	ldr	r3, [pc, #140]	@ (800a40c <HAL_UART_MspInit+0x1dc>)
 800a380:	4a23      	ldr	r2, [pc, #140]	@ (800a410 <HAL_UART_MspInit+0x1e0>)
 800a382:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800a384:	4b21      	ldr	r3, [pc, #132]	@ (800a40c <HAL_UART_MspInit+0x1dc>)
 800a386:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800a38a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a38c:	4b1f      	ldr	r3, [pc, #124]	@ (800a40c <HAL_UART_MspInit+0x1dc>)
 800a38e:	2200      	movs	r2, #0
 800a390:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a392:	4b1e      	ldr	r3, [pc, #120]	@ (800a40c <HAL_UART_MspInit+0x1dc>)
 800a394:	2200      	movs	r2, #0
 800a396:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a398:	4b1c      	ldr	r3, [pc, #112]	@ (800a40c <HAL_UART_MspInit+0x1dc>)
 800a39a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a39e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a3a0:	4b1a      	ldr	r3, [pc, #104]	@ (800a40c <HAL_UART_MspInit+0x1dc>)
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a3a6:	4b19      	ldr	r3, [pc, #100]	@ (800a40c <HAL_UART_MspInit+0x1dc>)
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800a3ac:	4b17      	ldr	r3, [pc, #92]	@ (800a40c <HAL_UART_MspInit+0x1dc>)
 800a3ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a3b2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a3b4:	4b15      	ldr	r3, [pc, #84]	@ (800a40c <HAL_UART_MspInit+0x1dc>)
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a3ba:	4b14      	ldr	r3, [pc, #80]	@ (800a40c <HAL_UART_MspInit+0x1dc>)
 800a3bc:	2200      	movs	r2, #0
 800a3be:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800a3c0:	4812      	ldr	r0, [pc, #72]	@ (800a40c <HAL_UART_MspInit+0x1dc>)
 800a3c2:	f000 feb1 	bl	800b128 <HAL_DMA_Init>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d001      	beq.n	800a3d0 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 800a3cc:	f7ff f9e0 	bl	8009790 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	4a0e      	ldr	r2, [pc, #56]	@ (800a40c <HAL_UART_MspInit+0x1dc>)
 800a3d4:	63da      	str	r2, [r3, #60]	@ 0x3c
 800a3d6:	4a0d      	ldr	r2, [pc, #52]	@ (800a40c <HAL_UART_MspInit+0x1dc>)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800a3dc:	2200      	movs	r2, #0
 800a3de:	2105      	movs	r1, #5
 800a3e0:	2026      	movs	r0, #38	@ 0x26
 800a3e2:	f000 fe77 	bl	800b0d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800a3e6:	2026      	movs	r0, #38	@ 0x26
 800a3e8:	f000 fe90 	bl	800b10c <HAL_NVIC_EnableIRQ>
}
 800a3ec:	bf00      	nop
 800a3ee:	3730      	adds	r7, #48	@ 0x30
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}
 800a3f4:	40011000 	.word	0x40011000
 800a3f8:	40023800 	.word	0x40023800
 800a3fc:	40020000 	.word	0x40020000
 800a400:	20001050 	.word	0x20001050
 800a404:	40026440 	.word	0x40026440
 800a408:	40004400 	.word	0x40004400
 800a40c:	200010b0 	.word	0x200010b0
 800a410:	40026088 	.word	0x40026088

0800a414 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b08e      	sub	sp, #56	@ 0x38
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800a41c:	2300      	movs	r3, #0
 800a41e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800a420:	2300      	movs	r3, #0
 800a422:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800a424:	2300      	movs	r3, #0
 800a426:	60fb      	str	r3, [r7, #12]
 800a428:	4b33      	ldr	r3, [pc, #204]	@ (800a4f8 <HAL_InitTick+0xe4>)
 800a42a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a42c:	4a32      	ldr	r2, [pc, #200]	@ (800a4f8 <HAL_InitTick+0xe4>)
 800a42e:	f043 0310 	orr.w	r3, r3, #16
 800a432:	6413      	str	r3, [r2, #64]	@ 0x40
 800a434:	4b30      	ldr	r3, [pc, #192]	@ (800a4f8 <HAL_InitTick+0xe4>)
 800a436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a438:	f003 0310 	and.w	r3, r3, #16
 800a43c:	60fb      	str	r3, [r7, #12]
 800a43e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800a440:	f107 0210 	add.w	r2, r7, #16
 800a444:	f107 0314 	add.w	r3, r7, #20
 800a448:	4611      	mov	r1, r2
 800a44a:	4618      	mov	r0, r3
 800a44c:	f002 f8d4 	bl	800c5f8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800a450:	6a3b      	ldr	r3, [r7, #32]
 800a452:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800a454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a456:	2b00      	cmp	r3, #0
 800a458:	d103      	bne.n	800a462 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800a45a:	f002 f8a5 	bl	800c5a8 <HAL_RCC_GetPCLK1Freq>
 800a45e:	6378      	str	r0, [r7, #52]	@ 0x34
 800a460:	e004      	b.n	800a46c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800a462:	f002 f8a1 	bl	800c5a8 <HAL_RCC_GetPCLK1Freq>
 800a466:	4603      	mov	r3, r0
 800a468:	005b      	lsls	r3, r3, #1
 800a46a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800a46c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a46e:	4a23      	ldr	r2, [pc, #140]	@ (800a4fc <HAL_InitTick+0xe8>)
 800a470:	fba2 2303 	umull	r2, r3, r2, r3
 800a474:	0c9b      	lsrs	r3, r3, #18
 800a476:	3b01      	subs	r3, #1
 800a478:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800a47a:	4b21      	ldr	r3, [pc, #132]	@ (800a500 <HAL_InitTick+0xec>)
 800a47c:	4a21      	ldr	r2, [pc, #132]	@ (800a504 <HAL_InitTick+0xf0>)
 800a47e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800a480:	4b1f      	ldr	r3, [pc, #124]	@ (800a500 <HAL_InitTick+0xec>)
 800a482:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800a486:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800a488:	4a1d      	ldr	r2, [pc, #116]	@ (800a500 <HAL_InitTick+0xec>)
 800a48a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a48c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800a48e:	4b1c      	ldr	r3, [pc, #112]	@ (800a500 <HAL_InitTick+0xec>)
 800a490:	2200      	movs	r2, #0
 800a492:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a494:	4b1a      	ldr	r3, [pc, #104]	@ (800a500 <HAL_InitTick+0xec>)
 800a496:	2200      	movs	r2, #0
 800a498:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a49a:	4b19      	ldr	r3, [pc, #100]	@ (800a500 <HAL_InitTick+0xec>)
 800a49c:	2200      	movs	r2, #0
 800a49e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800a4a0:	4817      	ldr	r0, [pc, #92]	@ (800a500 <HAL_InitTick+0xec>)
 800a4a2:	f003 fb6f 	bl	800db84 <HAL_TIM_Base_Init>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800a4ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d11b      	bne.n	800a4ec <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800a4b4:	4812      	ldr	r0, [pc, #72]	@ (800a500 <HAL_InitTick+0xec>)
 800a4b6:	f003 fbb5 	bl	800dc24 <HAL_TIM_Base_Start_IT>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800a4c0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d111      	bne.n	800a4ec <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800a4c8:	2036      	movs	r0, #54	@ 0x36
 800a4ca:	f000 fe1f 	bl	800b10c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2b0f      	cmp	r3, #15
 800a4d2:	d808      	bhi.n	800a4e6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	6879      	ldr	r1, [r7, #4]
 800a4d8:	2036      	movs	r0, #54	@ 0x36
 800a4da:	f000 fdfb 	bl	800b0d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800a4de:	4a0a      	ldr	r2, [pc, #40]	@ (800a508 <HAL_InitTick+0xf4>)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6013      	str	r3, [r2, #0]
 800a4e4:	e002      	b.n	800a4ec <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800a4ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3738      	adds	r7, #56	@ 0x38
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}
 800a4f8:	40023800 	.word	0x40023800
 800a4fc:	431bde83 	.word	0x431bde83
 800a500:	200017c8 	.word	0x200017c8
 800a504:	40001000 	.word	0x40001000
 800a508:	20000158 	.word	0x20000158

0800a50c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a50c:	b480      	push	{r7}
 800a50e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 800a510:	bf00      	nop
 800a512:	e7fd      	b.n	800a510 <NMI_Handler+0x4>

0800a514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a514:	b480      	push	{r7}
 800a516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a518:	bf00      	nop
 800a51a:	e7fd      	b.n	800a518 <MemManage_Handler+0x4>

0800a51c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a51c:	b480      	push	{r7}
 800a51e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a520:	bf00      	nop
 800a522:	e7fd      	b.n	800a520 <BusFault_Handler+0x4>

0800a524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a524:	b480      	push	{r7}
 800a526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a528:	bf00      	nop
 800a52a:	e7fd      	b.n	800a528 <UsageFault_Handler+0x4>

0800a52c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a52c:	b480      	push	{r7}
 800a52e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a530:	bf00      	nop
 800a532:	46bd      	mov	sp, r7
 800a534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a538:	4770      	bx	lr
	...

0800a53c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800a540:	4802      	ldr	r0, [pc, #8]	@ (800a54c <DMA1_Stream5_IRQHandler+0x10>)
 800a542:	f000 ff89 	bl	800b458 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800a546:	bf00      	nop
 800a548:	bd80      	pop	{r7, pc}
 800a54a:	bf00      	nop
 800a54c:	200010b0 	.word	0x200010b0

0800a550 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800a554:	4802      	ldr	r0, [pc, #8]	@ (800a560 <USART1_IRQHandler+0x10>)
 800a556:	f004 fd65 	bl	800f024 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800a55a:	bf00      	nop
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	bf00      	nop
 800a560:	20000fc0 	.word	0x20000fc0

0800a564 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800a568:	4802      	ldr	r0, [pc, #8]	@ (800a574 <USART2_IRQHandler+0x10>)
 800a56a:	f004 fd5b 	bl	800f024 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800a56e:	bf00      	nop
 800a570:	bd80      	pop	{r7, pc}
 800a572:	bf00      	nop
 800a574:	20001008 	.word	0x20001008

0800a578 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800a57c:	4802      	ldr	r0, [pc, #8]	@ (800a588 <RTC_Alarm_IRQHandler+0x10>)
 800a57e:	f002 fc35 	bl	800cdec <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800a582:	bf00      	nop
 800a584:	bd80      	pop	{r7, pc}
 800a586:	bf00      	nop
 800a588:	20000e60 	.word	0x20000e60

0800a58c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800a590:	4802      	ldr	r0, [pc, #8]	@ (800a59c <TIM6_DAC_IRQHandler+0x10>)
 800a592:	f003 fccf 	bl	800df34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800a596:	bf00      	nop
 800a598:	bd80      	pop	{r7, pc}
 800a59a:	bf00      	nop
 800a59c:	200017c8 	.word	0x200017c8

0800a5a0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800a5a4:	4802      	ldr	r0, [pc, #8]	@ (800a5b0 <DMA2_Stream2_IRQHandler+0x10>)
 800a5a6:	f000 ff57 	bl	800b458 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800a5aa:	bf00      	nop
 800a5ac:	bd80      	pop	{r7, pc}
 800a5ae:	bf00      	nop
 800a5b0:	20001050 	.word	0x20001050

0800a5b4 <_sbrk>:
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b086      	sub	sp, #24
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	4a14      	ldr	r2, [pc, #80]	@ (800a610 <_sbrk+0x5c>)
 800a5be:	4b15      	ldr	r3, [pc, #84]	@ (800a614 <_sbrk+0x60>)
 800a5c0:	1ad3      	subs	r3, r2, r3
 800a5c2:	617b      	str	r3, [r7, #20]
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	613b      	str	r3, [r7, #16]
 800a5c8:	4b13      	ldr	r3, [pc, #76]	@ (800a618 <_sbrk+0x64>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d102      	bne.n	800a5d6 <_sbrk+0x22>
 800a5d0:	4b11      	ldr	r3, [pc, #68]	@ (800a618 <_sbrk+0x64>)
 800a5d2:	4a12      	ldr	r2, [pc, #72]	@ (800a61c <_sbrk+0x68>)
 800a5d4:	601a      	str	r2, [r3, #0]
 800a5d6:	4b10      	ldr	r3, [pc, #64]	@ (800a618 <_sbrk+0x64>)
 800a5d8:	681a      	ldr	r2, [r3, #0]
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	4413      	add	r3, r2
 800a5de:	693a      	ldr	r2, [r7, #16]
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	d207      	bcs.n	800a5f4 <_sbrk+0x40>
 800a5e4:	f009 f83a 	bl	801365c <__errno>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	220c      	movs	r2, #12
 800a5ec:	601a      	str	r2, [r3, #0]
 800a5ee:	f04f 33ff 	mov.w	r3, #4294967295
 800a5f2:	e009      	b.n	800a608 <_sbrk+0x54>
 800a5f4:	4b08      	ldr	r3, [pc, #32]	@ (800a618 <_sbrk+0x64>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	60fb      	str	r3, [r7, #12]
 800a5fa:	4b07      	ldr	r3, [pc, #28]	@ (800a618 <_sbrk+0x64>)
 800a5fc:	681a      	ldr	r2, [r3, #0]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	4413      	add	r3, r2
 800a602:	4a05      	ldr	r2, [pc, #20]	@ (800a618 <_sbrk+0x64>)
 800a604:	6013      	str	r3, [r2, #0]
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	4618      	mov	r0, r3
 800a60a:	3718      	adds	r7, #24
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}
 800a610:	20020000 	.word	0x20020000
 800a614:	00000400 	.word	0x00000400
 800a618:	20001810 	.word	0x20001810
 800a61c:	200057f0 	.word	0x200057f0

0800a620 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a620:	b480      	push	{r7}
 800a622:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a624:	4b06      	ldr	r3, [pc, #24]	@ (800a640 <SystemInit+0x20>)
 800a626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a62a:	4a05      	ldr	r2, [pc, #20]	@ (800a640 <SystemInit+0x20>)
 800a62c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a630:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800a634:	bf00      	nop
 800a636:	46bd      	mov	sp, r7
 800a638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63c:	4770      	bx	lr
 800a63e:	bf00      	nop
 800a640:	e000ed00 	.word	0xe000ed00

0800a644 <Reset_Handler>:
 800a644:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800a67c <LoopFillZerobss+0xe>
 800a648:	f7ff ffea 	bl	800a620 <SystemInit>
 800a64c:	480c      	ldr	r0, [pc, #48]	@ (800a680 <LoopFillZerobss+0x12>)
 800a64e:	490d      	ldr	r1, [pc, #52]	@ (800a684 <LoopFillZerobss+0x16>)
 800a650:	4a0d      	ldr	r2, [pc, #52]	@ (800a688 <LoopFillZerobss+0x1a>)
 800a652:	2300      	movs	r3, #0
 800a654:	e002      	b.n	800a65c <LoopCopyDataInit>

0800a656 <CopyDataInit>:
 800a656:	58d4      	ldr	r4, [r2, r3]
 800a658:	50c4      	str	r4, [r0, r3]
 800a65a:	3304      	adds	r3, #4

0800a65c <LoopCopyDataInit>:
 800a65c:	18c4      	adds	r4, r0, r3
 800a65e:	428c      	cmp	r4, r1
 800a660:	d3f9      	bcc.n	800a656 <CopyDataInit>
 800a662:	4a0a      	ldr	r2, [pc, #40]	@ (800a68c <LoopFillZerobss+0x1e>)
 800a664:	4c0a      	ldr	r4, [pc, #40]	@ (800a690 <LoopFillZerobss+0x22>)
 800a666:	2300      	movs	r3, #0
 800a668:	e001      	b.n	800a66e <LoopFillZerobss>

0800a66a <FillZerobss>:
 800a66a:	6013      	str	r3, [r2, #0]
 800a66c:	3204      	adds	r2, #4

0800a66e <LoopFillZerobss>:
 800a66e:	42a2      	cmp	r2, r4
 800a670:	d3fb      	bcc.n	800a66a <FillZerobss>
 800a672:	f008 fff9 	bl	8013668 <__libc_init_array>
 800a676:	f7f6 fce3 	bl	8001040 <main>
 800a67a:	4770      	bx	lr
 800a67c:	20020000 	.word	0x20020000
 800a680:	20000000 	.word	0x20000000
 800a684:	200001b4 	.word	0x200001b4
 800a688:	08014340 	.word	0x08014340
 800a68c:	200001b8 	.word	0x200001b8
 800a690:	200057f0 	.word	0x200057f0

0800a694 <ADC_IRQHandler>:
 800a694:	e7fe      	b.n	800a694 <ADC_IRQHandler>
	...

0800a698 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a69c:	4b0e      	ldr	r3, [pc, #56]	@ (800a6d8 <HAL_Init+0x40>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4a0d      	ldr	r2, [pc, #52]	@ (800a6d8 <HAL_Init+0x40>)
 800a6a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a6a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800a6a8:	4b0b      	ldr	r3, [pc, #44]	@ (800a6d8 <HAL_Init+0x40>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	4a0a      	ldr	r2, [pc, #40]	@ (800a6d8 <HAL_Init+0x40>)
 800a6ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a6b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a6b4:	4b08      	ldr	r3, [pc, #32]	@ (800a6d8 <HAL_Init+0x40>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4a07      	ldr	r2, [pc, #28]	@ (800a6d8 <HAL_Init+0x40>)
 800a6ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a6be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a6c0:	2003      	movs	r0, #3
 800a6c2:	f000 fcfc 	bl	800b0be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a6c6:	2000      	movs	r0, #0
 800a6c8:	f7ff fea4 	bl	800a414 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a6cc:	f7ff fb86 	bl	8009ddc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a6d0:	2300      	movs	r3, #0
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	bd80      	pop	{r7, pc}
 800a6d6:	bf00      	nop
 800a6d8:	40023c00 	.word	0x40023c00

0800a6dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a6e0:	4b06      	ldr	r3, [pc, #24]	@ (800a6fc <HAL_IncTick+0x20>)
 800a6e2:	781b      	ldrb	r3, [r3, #0]
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	4b06      	ldr	r3, [pc, #24]	@ (800a700 <HAL_IncTick+0x24>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4413      	add	r3, r2
 800a6ec:	4a04      	ldr	r2, [pc, #16]	@ (800a700 <HAL_IncTick+0x24>)
 800a6ee:	6013      	str	r3, [r2, #0]
}
 800a6f0:	bf00      	nop
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f8:	4770      	bx	lr
 800a6fa:	bf00      	nop
 800a6fc:	2000015c 	.word	0x2000015c
 800a700:	20001814 	.word	0x20001814

0800a704 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a704:	b480      	push	{r7}
 800a706:	af00      	add	r7, sp, #0
  return uwTick;
 800a708:	4b03      	ldr	r3, [pc, #12]	@ (800a718 <HAL_GetTick+0x14>)
 800a70a:	681b      	ldr	r3, [r3, #0]
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	46bd      	mov	sp, r7
 800a710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a714:	4770      	bx	lr
 800a716:	bf00      	nop
 800a718:	20001814 	.word	0x20001814

0800a71c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b084      	sub	sp, #16
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a724:	f7ff ffee 	bl	800a704 <HAL_GetTick>
 800a728:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a734:	d005      	beq.n	800a742 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a736:	4b0a      	ldr	r3, [pc, #40]	@ (800a760 <HAL_Delay+0x44>)
 800a738:	781b      	ldrb	r3, [r3, #0]
 800a73a:	461a      	mov	r2, r3
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	4413      	add	r3, r2
 800a740:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800a742:	bf00      	nop
 800a744:	f7ff ffde 	bl	800a704 <HAL_GetTick>
 800a748:	4602      	mov	r2, r0
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	1ad3      	subs	r3, r2, r3
 800a74e:	68fa      	ldr	r2, [r7, #12]
 800a750:	429a      	cmp	r2, r3
 800a752:	d8f7      	bhi.n	800a744 <HAL_Delay+0x28>
  {
  }
}
 800a754:	bf00      	nop
 800a756:	bf00      	nop
 800a758:	3710      	adds	r7, #16
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}
 800a75e:	bf00      	nop
 800a760:	2000015c 	.word	0x2000015c

0800a764 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b084      	sub	sp, #16
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a76c:	2300      	movs	r3, #0
 800a76e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d101      	bne.n	800a77a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800a776:	2301      	movs	r3, #1
 800a778:	e033      	b.n	800a7e2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d109      	bne.n	800a796 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f7ff fb56 	bl	8009e34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2200      	movs	r2, #0
 800a78c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2200      	movs	r2, #0
 800a792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a79a:	f003 0310 	and.w	r3, r3, #16
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d118      	bne.n	800a7d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7a6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800a7aa:	f023 0302 	bic.w	r3, r3, #2
 800a7ae:	f043 0202 	orr.w	r2, r3, #2
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f000 fad8 	bl	800ad6c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7c6:	f023 0303 	bic.w	r3, r3, #3
 800a7ca:	f043 0201 	orr.w	r2, r3, #1
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	641a      	str	r2, [r3, #64]	@ 0x40
 800a7d2:	e001      	b.n	800a7d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800a7e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3710      	adds	r7, #16
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}
	...

0800a7ec <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b085      	sub	sp, #20
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	d101      	bne.n	800a806 <HAL_ADC_Start+0x1a>
 800a802:	2302      	movs	r3, #2
 800a804:	e0b2      	b.n	800a96c <HAL_ADC_Start+0x180>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2201      	movs	r2, #1
 800a80a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	689b      	ldr	r3, [r3, #8]
 800a814:	f003 0301 	and.w	r3, r3, #1
 800a818:	2b01      	cmp	r3, #1
 800a81a:	d018      	beq.n	800a84e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	689a      	ldr	r2, [r3, #8]
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f042 0201 	orr.w	r2, r2, #1
 800a82a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800a82c:	4b52      	ldr	r3, [pc, #328]	@ (800a978 <HAL_ADC_Start+0x18c>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4a52      	ldr	r2, [pc, #328]	@ (800a97c <HAL_ADC_Start+0x190>)
 800a832:	fba2 2303 	umull	r2, r3, r2, r3
 800a836:	0c9a      	lsrs	r2, r3, #18
 800a838:	4613      	mov	r3, r2
 800a83a:	005b      	lsls	r3, r3, #1
 800a83c:	4413      	add	r3, r2
 800a83e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800a840:	e002      	b.n	800a848 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	3b01      	subs	r3, #1
 800a846:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d1f9      	bne.n	800a842 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	689b      	ldr	r3, [r3, #8]
 800a854:	f003 0301 	and.w	r3, r3, #1
 800a858:	2b01      	cmp	r3, #1
 800a85a:	d17a      	bne.n	800a952 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a860:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800a864:	f023 0301 	bic.w	r3, r3, #1
 800a868:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	685b      	ldr	r3, [r3, #4]
 800a876:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d007      	beq.n	800a88e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a882:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800a886:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a892:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a896:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a89a:	d106      	bne.n	800a8aa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8a0:	f023 0206 	bic.w	r2, r3, #6
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	645a      	str	r2, [r3, #68]	@ 0x44
 800a8a8:	e002      	b.n	800a8b0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a8b8:	4b31      	ldr	r3, [pc, #196]	@ (800a980 <HAL_ADC_Start+0x194>)
 800a8ba:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800a8c4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	685b      	ldr	r3, [r3, #4]
 800a8ca:	f003 031f 	and.w	r3, r3, #31
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d12a      	bne.n	800a928 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	4a2b      	ldr	r2, [pc, #172]	@ (800a984 <HAL_ADC_Start+0x198>)
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	d015      	beq.n	800a908 <HAL_ADC_Start+0x11c>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	4a29      	ldr	r2, [pc, #164]	@ (800a988 <HAL_ADC_Start+0x19c>)
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	d105      	bne.n	800a8f2 <HAL_ADC_Start+0x106>
 800a8e6:	4b26      	ldr	r3, [pc, #152]	@ (800a980 <HAL_ADC_Start+0x194>)
 800a8e8:	685b      	ldr	r3, [r3, #4]
 800a8ea:	f003 031f 	and.w	r3, r3, #31
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d00a      	beq.n	800a908 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	4a25      	ldr	r2, [pc, #148]	@ (800a98c <HAL_ADC_Start+0x1a0>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d136      	bne.n	800a96a <HAL_ADC_Start+0x17e>
 800a8fc:	4b20      	ldr	r3, [pc, #128]	@ (800a980 <HAL_ADC_Start+0x194>)
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	f003 0310 	and.w	r3, r3, #16
 800a904:	2b00      	cmp	r3, #0
 800a906:	d130      	bne.n	800a96a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	689b      	ldr	r3, [r3, #8]
 800a90e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a912:	2b00      	cmp	r3, #0
 800a914:	d129      	bne.n	800a96a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	689a      	ldr	r2, [r3, #8]
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800a924:	609a      	str	r2, [r3, #8]
 800a926:	e020      	b.n	800a96a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	4a15      	ldr	r2, [pc, #84]	@ (800a984 <HAL_ADC_Start+0x198>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d11b      	bne.n	800a96a <HAL_ADC_Start+0x17e>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	689b      	ldr	r3, [r3, #8]
 800a938:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d114      	bne.n	800a96a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	689a      	ldr	r2, [r3, #8]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800a94e:	609a      	str	r2, [r3, #8]
 800a950:	e00b      	b.n	800a96a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a956:	f043 0210 	orr.w	r2, r3, #16
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a962:	f043 0201 	orr.w	r2, r3, #1
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800a96a:	2300      	movs	r3, #0
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	3714      	adds	r7, #20
 800a970:	46bd      	mov	sp, r7
 800a972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a976:	4770      	bx	lr
 800a978:	20000154 	.word	0x20000154
 800a97c:	431bde83 	.word	0x431bde83
 800a980:	40012300 	.word	0x40012300
 800a984:	40012000 	.word	0x40012000
 800a988:	40012100 	.word	0x40012100
 800a98c:	40012200 	.word	0x40012200

0800a990 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800a990:	b480      	push	{r7}
 800a992:	b083      	sub	sp, #12
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	d101      	bne.n	800a9a6 <HAL_ADC_Stop+0x16>
 800a9a2:	2302      	movs	r3, #2
 800a9a4:	e021      	b.n	800a9ea <HAL_ADC_Stop+0x5a>
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	689a      	ldr	r2, [r3, #8]
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f022 0201 	bic.w	r2, r2, #1
 800a9bc:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	689b      	ldr	r3, [r3, #8]
 800a9c4:	f003 0301 	and.w	r3, r3, #1
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d109      	bne.n	800a9e0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9d0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800a9d4:	f023 0301 	bic.w	r3, r3, #1
 800a9d8:	f043 0201 	orr.w	r2, r3, #1
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800a9e8:	2300      	movs	r3, #0
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	370c      	adds	r7, #12
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f4:	4770      	bx	lr

0800a9f6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800a9f6:	b580      	push	{r7, lr}
 800a9f8:	b084      	sub	sp, #16
 800a9fa:	af00      	add	r7, sp, #0
 800a9fc:	6078      	str	r0, [r7, #4]
 800a9fe:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800aa00:	2300      	movs	r3, #0
 800aa02:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	689b      	ldr	r3, [r3, #8]
 800aa0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aa0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa12:	d113      	bne.n	800aa3c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	689b      	ldr	r3, [r3, #8]
 800aa1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800aa1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa22:	d10b      	bne.n	800aa3c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa28:	f043 0220 	orr.w	r2, r3, #32
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2200      	movs	r2, #0
 800aa34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800aa38:	2301      	movs	r3, #1
 800aa3a:	e063      	b.n	800ab04 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800aa3c:	f7ff fe62 	bl	800a704 <HAL_GetTick>
 800aa40:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800aa42:	e021      	b.n	800aa88 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa4a:	d01d      	beq.n	800aa88 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d007      	beq.n	800aa62 <HAL_ADC_PollForConversion+0x6c>
 800aa52:	f7ff fe57 	bl	800a704 <HAL_GetTick>
 800aa56:	4602      	mov	r2, r0
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	1ad3      	subs	r3, r2, r3
 800aa5c:	683a      	ldr	r2, [r7, #0]
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d212      	bcs.n	800aa88 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f003 0302 	and.w	r3, r3, #2
 800aa6c:	2b02      	cmp	r3, #2
 800aa6e:	d00b      	beq.n	800aa88 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa74:	f043 0204 	orr.w	r2, r3, #4
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800aa84:	2303      	movs	r3, #3
 800aa86:	e03d      	b.n	800ab04 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f003 0302 	and.w	r3, r3, #2
 800aa92:	2b02      	cmp	r3, #2
 800aa94:	d1d6      	bne.n	800aa44 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f06f 0212 	mvn.w	r2, #18
 800aa9e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aaa4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	689b      	ldr	r3, [r3, #8]
 800aab2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d123      	bne.n	800ab02 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d11f      	bne.n	800ab02 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aac8:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d006      	beq.n	800aade <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	689b      	ldr	r3, [r3, #8]
 800aad6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d111      	bne.n	800ab02 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aae2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aaee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d105      	bne.n	800ab02 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aafa:	f043 0201 	orr.w	r2, r3, #1
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800ab02:	2300      	movs	r3, #0
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3710      	adds	r7, #16
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b083      	sub	sp, #12
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	370c      	adds	r7, #12
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab24:	4770      	bx	lr
	...

0800ab28 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b085      	sub	sp, #20
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800ab32:	2300      	movs	r3, #0
 800ab34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	d101      	bne.n	800ab44 <HAL_ADC_ConfigChannel+0x1c>
 800ab40:	2302      	movs	r3, #2
 800ab42:	e105      	b.n	800ad50 <HAL_ADC_ConfigChannel+0x228>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2201      	movs	r2, #1
 800ab48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	2b09      	cmp	r3, #9
 800ab52:	d925      	bls.n	800aba0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	68d9      	ldr	r1, [r3, #12]
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	b29b      	uxth	r3, r3
 800ab60:	461a      	mov	r2, r3
 800ab62:	4613      	mov	r3, r2
 800ab64:	005b      	lsls	r3, r3, #1
 800ab66:	4413      	add	r3, r2
 800ab68:	3b1e      	subs	r3, #30
 800ab6a:	2207      	movs	r2, #7
 800ab6c:	fa02 f303 	lsl.w	r3, r2, r3
 800ab70:	43da      	mvns	r2, r3
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	400a      	ands	r2, r1
 800ab78:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	68d9      	ldr	r1, [r3, #12]
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	689a      	ldr	r2, [r3, #8]
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	b29b      	uxth	r3, r3
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	005b      	lsls	r3, r3, #1
 800ab90:	4403      	add	r3, r0
 800ab92:	3b1e      	subs	r3, #30
 800ab94:	409a      	lsls	r2, r3
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	430a      	orrs	r2, r1
 800ab9c:	60da      	str	r2, [r3, #12]
 800ab9e:	e022      	b.n	800abe6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	6919      	ldr	r1, [r3, #16]
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	b29b      	uxth	r3, r3
 800abac:	461a      	mov	r2, r3
 800abae:	4613      	mov	r3, r2
 800abb0:	005b      	lsls	r3, r3, #1
 800abb2:	4413      	add	r3, r2
 800abb4:	2207      	movs	r2, #7
 800abb6:	fa02 f303 	lsl.w	r3, r2, r3
 800abba:	43da      	mvns	r2, r3
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	400a      	ands	r2, r1
 800abc2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	6919      	ldr	r1, [r3, #16]
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	689a      	ldr	r2, [r3, #8]
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	b29b      	uxth	r3, r3
 800abd4:	4618      	mov	r0, r3
 800abd6:	4603      	mov	r3, r0
 800abd8:	005b      	lsls	r3, r3, #1
 800abda:	4403      	add	r3, r0
 800abdc:	409a      	lsls	r2, r3
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	430a      	orrs	r2, r1
 800abe4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	685b      	ldr	r3, [r3, #4]
 800abea:	2b06      	cmp	r3, #6
 800abec:	d824      	bhi.n	800ac38 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	685a      	ldr	r2, [r3, #4]
 800abf8:	4613      	mov	r3, r2
 800abfa:	009b      	lsls	r3, r3, #2
 800abfc:	4413      	add	r3, r2
 800abfe:	3b05      	subs	r3, #5
 800ac00:	221f      	movs	r2, #31
 800ac02:	fa02 f303 	lsl.w	r3, r2, r3
 800ac06:	43da      	mvns	r2, r3
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	400a      	ands	r2, r1
 800ac0e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	b29b      	uxth	r3, r3
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	685a      	ldr	r2, [r3, #4]
 800ac22:	4613      	mov	r3, r2
 800ac24:	009b      	lsls	r3, r3, #2
 800ac26:	4413      	add	r3, r2
 800ac28:	3b05      	subs	r3, #5
 800ac2a:	fa00 f203 	lsl.w	r2, r0, r3
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	430a      	orrs	r2, r1
 800ac34:	635a      	str	r2, [r3, #52]	@ 0x34
 800ac36:	e04c      	b.n	800acd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	2b0c      	cmp	r3, #12
 800ac3e:	d824      	bhi.n	800ac8a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	685a      	ldr	r2, [r3, #4]
 800ac4a:	4613      	mov	r3, r2
 800ac4c:	009b      	lsls	r3, r3, #2
 800ac4e:	4413      	add	r3, r2
 800ac50:	3b23      	subs	r3, #35	@ 0x23
 800ac52:	221f      	movs	r2, #31
 800ac54:	fa02 f303 	lsl.w	r3, r2, r3
 800ac58:	43da      	mvns	r2, r3
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	400a      	ands	r2, r1
 800ac60:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	b29b      	uxth	r3, r3
 800ac6e:	4618      	mov	r0, r3
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	685a      	ldr	r2, [r3, #4]
 800ac74:	4613      	mov	r3, r2
 800ac76:	009b      	lsls	r3, r3, #2
 800ac78:	4413      	add	r3, r2
 800ac7a:	3b23      	subs	r3, #35	@ 0x23
 800ac7c:	fa00 f203 	lsl.w	r2, r0, r3
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	430a      	orrs	r2, r1
 800ac86:	631a      	str	r2, [r3, #48]	@ 0x30
 800ac88:	e023      	b.n	800acd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	685a      	ldr	r2, [r3, #4]
 800ac94:	4613      	mov	r3, r2
 800ac96:	009b      	lsls	r3, r3, #2
 800ac98:	4413      	add	r3, r2
 800ac9a:	3b41      	subs	r3, #65	@ 0x41
 800ac9c:	221f      	movs	r2, #31
 800ac9e:	fa02 f303 	lsl.w	r3, r2, r3
 800aca2:	43da      	mvns	r2, r3
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	400a      	ands	r2, r1
 800acaa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	b29b      	uxth	r3, r3
 800acb8:	4618      	mov	r0, r3
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	685a      	ldr	r2, [r3, #4]
 800acbe:	4613      	mov	r3, r2
 800acc0:	009b      	lsls	r3, r3, #2
 800acc2:	4413      	add	r3, r2
 800acc4:	3b41      	subs	r3, #65	@ 0x41
 800acc6:	fa00 f203 	lsl.w	r2, r0, r3
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	430a      	orrs	r2, r1
 800acd0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800acd2:	4b22      	ldr	r3, [pc, #136]	@ (800ad5c <HAL_ADC_ConfigChannel+0x234>)
 800acd4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	4a21      	ldr	r2, [pc, #132]	@ (800ad60 <HAL_ADC_ConfigChannel+0x238>)
 800acdc:	4293      	cmp	r3, r2
 800acde:	d109      	bne.n	800acf4 <HAL_ADC_ConfigChannel+0x1cc>
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	2b12      	cmp	r3, #18
 800ace6:	d105      	bne.n	800acf4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	685b      	ldr	r3, [r3, #4]
 800acec:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	4a19      	ldr	r2, [pc, #100]	@ (800ad60 <HAL_ADC_ConfigChannel+0x238>)
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d123      	bne.n	800ad46 <HAL_ADC_ConfigChannel+0x21e>
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	2b10      	cmp	r3, #16
 800ad04:	d003      	beq.n	800ad0e <HAL_ADC_ConfigChannel+0x1e6>
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	2b11      	cmp	r3, #17
 800ad0c:	d11b      	bne.n	800ad46 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	685b      	ldr	r3, [r3, #4]
 800ad12:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	2b10      	cmp	r3, #16
 800ad20:	d111      	bne.n	800ad46 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800ad22:	4b10      	ldr	r3, [pc, #64]	@ (800ad64 <HAL_ADC_ConfigChannel+0x23c>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	4a10      	ldr	r2, [pc, #64]	@ (800ad68 <HAL_ADC_ConfigChannel+0x240>)
 800ad28:	fba2 2303 	umull	r2, r3, r2, r3
 800ad2c:	0c9a      	lsrs	r2, r3, #18
 800ad2e:	4613      	mov	r3, r2
 800ad30:	009b      	lsls	r3, r3, #2
 800ad32:	4413      	add	r3, r2
 800ad34:	005b      	lsls	r3, r3, #1
 800ad36:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800ad38:	e002      	b.n	800ad40 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	3b01      	subs	r3, #1
 800ad3e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d1f9      	bne.n	800ad3a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800ad4e:	2300      	movs	r3, #0
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	3714      	adds	r7, #20
 800ad54:	46bd      	mov	sp, r7
 800ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5a:	4770      	bx	lr
 800ad5c:	40012300 	.word	0x40012300
 800ad60:	40012000 	.word	0x40012000
 800ad64:	20000154 	.word	0x20000154
 800ad68:	431bde83 	.word	0x431bde83

0800ad6c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b085      	sub	sp, #20
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800ad74:	4b79      	ldr	r3, [pc, #484]	@ (800af5c <ADC_Init+0x1f0>)
 800ad76:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	685a      	ldr	r2, [r3, #4]
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	431a      	orrs	r2, r3
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	685a      	ldr	r2, [r3, #4]
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ada0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	6859      	ldr	r1, [r3, #4]
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	691b      	ldr	r3, [r3, #16]
 800adac:	021a      	lsls	r2, r3, #8
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	430a      	orrs	r2, r1
 800adb4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	685a      	ldr	r2, [r3, #4]
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800adc4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	6859      	ldr	r1, [r3, #4]
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	689a      	ldr	r2, [r3, #8]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	430a      	orrs	r2, r1
 800add6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	689a      	ldr	r2, [r3, #8]
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ade6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	6899      	ldr	r1, [r3, #8]
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	68da      	ldr	r2, [r3, #12]
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	430a      	orrs	r2, r1
 800adf8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adfe:	4a58      	ldr	r2, [pc, #352]	@ (800af60 <ADC_Init+0x1f4>)
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d022      	beq.n	800ae4a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	689a      	ldr	r2, [r3, #8]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800ae12:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	6899      	ldr	r1, [r3, #8]
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	430a      	orrs	r2, r1
 800ae24:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	689a      	ldr	r2, [r3, #8]
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800ae34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	6899      	ldr	r1, [r3, #8]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	430a      	orrs	r2, r1
 800ae46:	609a      	str	r2, [r3, #8]
 800ae48:	e00f      	b.n	800ae6a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	689a      	ldr	r2, [r3, #8]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800ae58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	689a      	ldr	r2, [r3, #8]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800ae68:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	689a      	ldr	r2, [r3, #8]
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f022 0202 	bic.w	r2, r2, #2
 800ae78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	6899      	ldr	r1, [r3, #8]
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	7e1b      	ldrb	r3, [r3, #24]
 800ae84:	005a      	lsls	r2, r3, #1
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	430a      	orrs	r2, r1
 800ae8c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d01b      	beq.n	800aed0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	685a      	ldr	r2, [r3, #4]
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800aea6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	685a      	ldr	r2, [r3, #4]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800aeb6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	6859      	ldr	r1, [r3, #4]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aec2:	3b01      	subs	r3, #1
 800aec4:	035a      	lsls	r2, r3, #13
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	430a      	orrs	r2, r1
 800aecc:	605a      	str	r2, [r3, #4]
 800aece:	e007      	b.n	800aee0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	685a      	ldr	r2, [r3, #4]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800aede:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800aeee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	69db      	ldr	r3, [r3, #28]
 800aefa:	3b01      	subs	r3, #1
 800aefc:	051a      	lsls	r2, r3, #20
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	430a      	orrs	r2, r1
 800af04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	689a      	ldr	r2, [r3, #8]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800af14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	6899      	ldr	r1, [r3, #8]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800af22:	025a      	lsls	r2, r3, #9
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	430a      	orrs	r2, r1
 800af2a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	689a      	ldr	r2, [r3, #8]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800af3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	6899      	ldr	r1, [r3, #8]
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	695b      	ldr	r3, [r3, #20]
 800af46:	029a      	lsls	r2, r3, #10
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	430a      	orrs	r2, r1
 800af4e:	609a      	str	r2, [r3, #8]
}
 800af50:	bf00      	nop
 800af52:	3714      	adds	r7, #20
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr
 800af5c:	40012300 	.word	0x40012300
 800af60:	0f000001 	.word	0x0f000001

0800af64 <__NVIC_SetPriorityGrouping>:
{
 800af64:	b480      	push	{r7}
 800af66:	b085      	sub	sp, #20
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f003 0307 	and.w	r3, r3, #7
 800af72:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800af74:	4b0c      	ldr	r3, [pc, #48]	@ (800afa8 <__NVIC_SetPriorityGrouping+0x44>)
 800af76:	68db      	ldr	r3, [r3, #12]
 800af78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800af7a:	68ba      	ldr	r2, [r7, #8]
 800af7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800af80:	4013      	ands	r3, r2
 800af82:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800af8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800af90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800af94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800af96:	4a04      	ldr	r2, [pc, #16]	@ (800afa8 <__NVIC_SetPriorityGrouping+0x44>)
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	60d3      	str	r3, [r2, #12]
}
 800af9c:	bf00      	nop
 800af9e:	3714      	adds	r7, #20
 800afa0:	46bd      	mov	sp, r7
 800afa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa6:	4770      	bx	lr
 800afa8:	e000ed00 	.word	0xe000ed00

0800afac <__NVIC_GetPriorityGrouping>:
{
 800afac:	b480      	push	{r7}
 800afae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800afb0:	4b04      	ldr	r3, [pc, #16]	@ (800afc4 <__NVIC_GetPriorityGrouping+0x18>)
 800afb2:	68db      	ldr	r3, [r3, #12]
 800afb4:	0a1b      	lsrs	r3, r3, #8
 800afb6:	f003 0307 	and.w	r3, r3, #7
}
 800afba:	4618      	mov	r0, r3
 800afbc:	46bd      	mov	sp, r7
 800afbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc2:	4770      	bx	lr
 800afc4:	e000ed00 	.word	0xe000ed00

0800afc8 <__NVIC_EnableIRQ>:
{
 800afc8:	b480      	push	{r7}
 800afca:	b083      	sub	sp, #12
 800afcc:	af00      	add	r7, sp, #0
 800afce:	4603      	mov	r3, r0
 800afd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800afd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	db0b      	blt.n	800aff2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800afda:	79fb      	ldrb	r3, [r7, #7]
 800afdc:	f003 021f 	and.w	r2, r3, #31
 800afe0:	4907      	ldr	r1, [pc, #28]	@ (800b000 <__NVIC_EnableIRQ+0x38>)
 800afe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800afe6:	095b      	lsrs	r3, r3, #5
 800afe8:	2001      	movs	r0, #1
 800afea:	fa00 f202 	lsl.w	r2, r0, r2
 800afee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800aff2:	bf00      	nop
 800aff4:	370c      	adds	r7, #12
 800aff6:	46bd      	mov	sp, r7
 800aff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affc:	4770      	bx	lr
 800affe:	bf00      	nop
 800b000:	e000e100 	.word	0xe000e100

0800b004 <__NVIC_SetPriority>:
{
 800b004:	b480      	push	{r7}
 800b006:	b083      	sub	sp, #12
 800b008:	af00      	add	r7, sp, #0
 800b00a:	4603      	mov	r3, r0
 800b00c:	6039      	str	r1, [r7, #0]
 800b00e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b014:	2b00      	cmp	r3, #0
 800b016:	db0a      	blt.n	800b02e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	b2da      	uxtb	r2, r3
 800b01c:	490c      	ldr	r1, [pc, #48]	@ (800b050 <__NVIC_SetPriority+0x4c>)
 800b01e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b022:	0112      	lsls	r2, r2, #4
 800b024:	b2d2      	uxtb	r2, r2
 800b026:	440b      	add	r3, r1
 800b028:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b02c:	e00a      	b.n	800b044 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	b2da      	uxtb	r2, r3
 800b032:	4908      	ldr	r1, [pc, #32]	@ (800b054 <__NVIC_SetPriority+0x50>)
 800b034:	79fb      	ldrb	r3, [r7, #7]
 800b036:	f003 030f 	and.w	r3, r3, #15
 800b03a:	3b04      	subs	r3, #4
 800b03c:	0112      	lsls	r2, r2, #4
 800b03e:	b2d2      	uxtb	r2, r2
 800b040:	440b      	add	r3, r1
 800b042:	761a      	strb	r2, [r3, #24]
}
 800b044:	bf00      	nop
 800b046:	370c      	adds	r7, #12
 800b048:	46bd      	mov	sp, r7
 800b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04e:	4770      	bx	lr
 800b050:	e000e100 	.word	0xe000e100
 800b054:	e000ed00 	.word	0xe000ed00

0800b058 <NVIC_EncodePriority>:
{
 800b058:	b480      	push	{r7}
 800b05a:	b089      	sub	sp, #36	@ 0x24
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	60f8      	str	r0, [r7, #12]
 800b060:	60b9      	str	r1, [r7, #8]
 800b062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f003 0307 	and.w	r3, r3, #7
 800b06a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b06c:	69fb      	ldr	r3, [r7, #28]
 800b06e:	f1c3 0307 	rsb	r3, r3, #7
 800b072:	2b04      	cmp	r3, #4
 800b074:	bf28      	it	cs
 800b076:	2304      	movcs	r3, #4
 800b078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b07a:	69fb      	ldr	r3, [r7, #28]
 800b07c:	3304      	adds	r3, #4
 800b07e:	2b06      	cmp	r3, #6
 800b080:	d902      	bls.n	800b088 <NVIC_EncodePriority+0x30>
 800b082:	69fb      	ldr	r3, [r7, #28]
 800b084:	3b03      	subs	r3, #3
 800b086:	e000      	b.n	800b08a <NVIC_EncodePriority+0x32>
 800b088:	2300      	movs	r3, #0
 800b08a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b08c:	f04f 32ff 	mov.w	r2, #4294967295
 800b090:	69bb      	ldr	r3, [r7, #24]
 800b092:	fa02 f303 	lsl.w	r3, r2, r3
 800b096:	43da      	mvns	r2, r3
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	401a      	ands	r2, r3
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b0a0:	f04f 31ff 	mov.w	r1, #4294967295
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	fa01 f303 	lsl.w	r3, r1, r3
 800b0aa:	43d9      	mvns	r1, r3
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b0b0:	4313      	orrs	r3, r2
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3724      	adds	r7, #36	@ 0x24
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0bc:	4770      	bx	lr

0800b0be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b0be:	b580      	push	{r7, lr}
 800b0c0:	b082      	sub	sp, #8
 800b0c2:	af00      	add	r7, sp, #0
 800b0c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f7ff ff4c 	bl	800af64 <__NVIC_SetPriorityGrouping>
}
 800b0cc:	bf00      	nop
 800b0ce:	3708      	adds	r7, #8
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b086      	sub	sp, #24
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	4603      	mov	r3, r0
 800b0dc:	60b9      	str	r1, [r7, #8]
 800b0de:	607a      	str	r2, [r7, #4]
 800b0e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b0e6:	f7ff ff61 	bl	800afac <__NVIC_GetPriorityGrouping>
 800b0ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b0ec:	687a      	ldr	r2, [r7, #4]
 800b0ee:	68b9      	ldr	r1, [r7, #8]
 800b0f0:	6978      	ldr	r0, [r7, #20]
 800b0f2:	f7ff ffb1 	bl	800b058 <NVIC_EncodePriority>
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0fc:	4611      	mov	r1, r2
 800b0fe:	4618      	mov	r0, r3
 800b100:	f7ff ff80 	bl	800b004 <__NVIC_SetPriority>
}
 800b104:	bf00      	nop
 800b106:	3718      	adds	r7, #24
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}

0800b10c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b082      	sub	sp, #8
 800b110:	af00      	add	r7, sp, #0
 800b112:	4603      	mov	r3, r0
 800b114:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b11a:	4618      	mov	r0, r3
 800b11c:	f7ff ff54 	bl	800afc8 <__NVIC_EnableIRQ>
}
 800b120:	bf00      	nop
 800b122:	3708      	adds	r7, #8
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}

0800b128 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b086      	sub	sp, #24
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b130:	2300      	movs	r3, #0
 800b132:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b134:	f7ff fae6 	bl	800a704 <HAL_GetTick>
 800b138:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d101      	bne.n	800b144 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b140:	2301      	movs	r3, #1
 800b142:	e099      	b.n	800b278 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2202      	movs	r2, #2
 800b148:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2200      	movs	r2, #0
 800b150:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	681a      	ldr	r2, [r3, #0]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	f022 0201 	bic.w	r2, r2, #1
 800b162:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b164:	e00f      	b.n	800b186 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b166:	f7ff facd 	bl	800a704 <HAL_GetTick>
 800b16a:	4602      	mov	r2, r0
 800b16c:	693b      	ldr	r3, [r7, #16]
 800b16e:	1ad3      	subs	r3, r2, r3
 800b170:	2b05      	cmp	r3, #5
 800b172:	d908      	bls.n	800b186 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2220      	movs	r2, #32
 800b178:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2203      	movs	r2, #3
 800b17e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800b182:	2303      	movs	r3, #3
 800b184:	e078      	b.n	800b278 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	f003 0301 	and.w	r3, r3, #1
 800b190:	2b00      	cmp	r3, #0
 800b192:	d1e8      	bne.n	800b166 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b19c:	697a      	ldr	r2, [r7, #20]
 800b19e:	4b38      	ldr	r3, [pc, #224]	@ (800b280 <HAL_DMA_Init+0x158>)
 800b1a0:	4013      	ands	r3, r2
 800b1a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	685a      	ldr	r2, [r3, #4]
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	689b      	ldr	r3, [r3, #8]
 800b1ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b1b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	691b      	ldr	r3, [r3, #16]
 800b1b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b1be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	699b      	ldr	r3, [r3, #24]
 800b1c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b1ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6a1b      	ldr	r3, [r3, #32]
 800b1d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b1d2:	697a      	ldr	r2, [r7, #20]
 800b1d4:	4313      	orrs	r3, r2
 800b1d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1dc:	2b04      	cmp	r3, #4
 800b1de:	d107      	bne.n	800b1f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1e8:	4313      	orrs	r3, r2
 800b1ea:	697a      	ldr	r2, [r7, #20]
 800b1ec:	4313      	orrs	r3, r2
 800b1ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	697a      	ldr	r2, [r7, #20]
 800b1f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	695b      	ldr	r3, [r3, #20]
 800b1fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	f023 0307 	bic.w	r3, r3, #7
 800b206:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b20c:	697a      	ldr	r2, [r7, #20]
 800b20e:	4313      	orrs	r3, r2
 800b210:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b216:	2b04      	cmp	r3, #4
 800b218:	d117      	bne.n	800b24a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b21e:	697a      	ldr	r2, [r7, #20]
 800b220:	4313      	orrs	r3, r2
 800b222:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d00e      	beq.n	800b24a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f000 fb01 	bl	800b834 <DMA_CheckFifoParam>
 800b232:	4603      	mov	r3, r0
 800b234:	2b00      	cmp	r3, #0
 800b236:	d008      	beq.n	800b24a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2240      	movs	r2, #64	@ 0x40
 800b23c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2201      	movs	r2, #1
 800b242:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800b246:	2301      	movs	r3, #1
 800b248:	e016      	b.n	800b278 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	697a      	ldr	r2, [r7, #20]
 800b250:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f000 fab8 	bl	800b7c8 <DMA_CalcBaseAndBitshift>
 800b258:	4603      	mov	r3, r0
 800b25a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b260:	223f      	movs	r2, #63	@ 0x3f
 800b262:	409a      	lsls	r2, r3
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2200      	movs	r2, #0
 800b26c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2201      	movs	r2, #1
 800b272:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800b276:	2300      	movs	r3, #0
}
 800b278:	4618      	mov	r0, r3
 800b27a:	3718      	adds	r7, #24
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}
 800b280:	f010803f 	.word	0xf010803f

0800b284 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b086      	sub	sp, #24
 800b288:	af00      	add	r7, sp, #0
 800b28a:	60f8      	str	r0, [r7, #12]
 800b28c:	60b9      	str	r1, [r7, #8]
 800b28e:	607a      	str	r2, [r7, #4]
 800b290:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b292:	2300      	movs	r3, #0
 800b294:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b29a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b2a2:	2b01      	cmp	r3, #1
 800b2a4:	d101      	bne.n	800b2aa <HAL_DMA_Start_IT+0x26>
 800b2a6:	2302      	movs	r3, #2
 800b2a8:	e040      	b.n	800b32c <HAL_DMA_Start_IT+0xa8>
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	2201      	movs	r2, #1
 800b2ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b2b8:	b2db      	uxtb	r3, r3
 800b2ba:	2b01      	cmp	r3, #1
 800b2bc:	d12f      	bne.n	800b31e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	2202      	movs	r2, #2
 800b2c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	687a      	ldr	r2, [r7, #4]
 800b2d0:	68b9      	ldr	r1, [r7, #8]
 800b2d2:	68f8      	ldr	r0, [r7, #12]
 800b2d4:	f000 fa4a 	bl	800b76c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b2dc:	223f      	movs	r2, #63	@ 0x3f
 800b2de:	409a      	lsls	r2, r3
 800b2e0:	693b      	ldr	r3, [r7, #16]
 800b2e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	681a      	ldr	r2, [r3, #0]
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f042 0216 	orr.w	r2, r2, #22
 800b2f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d007      	beq.n	800b30c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	681a      	ldr	r2, [r3, #0]
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f042 0208 	orr.w	r2, r2, #8
 800b30a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	681a      	ldr	r2, [r3, #0]
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f042 0201 	orr.w	r2, r2, #1
 800b31a:	601a      	str	r2, [r3, #0]
 800b31c:	e005      	b.n	800b32a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	2200      	movs	r2, #0
 800b322:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800b326:	2302      	movs	r3, #2
 800b328:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800b32a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3718      	adds	r7, #24
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}

0800b334 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b084      	sub	sp, #16
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b340:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800b342:	f7ff f9df 	bl	800a704 <HAL_GetTick>
 800b346:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b34e:	b2db      	uxtb	r3, r3
 800b350:	2b02      	cmp	r3, #2
 800b352:	d008      	beq.n	800b366 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2280      	movs	r2, #128	@ 0x80
 800b358:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2200      	movs	r2, #0
 800b35e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800b362:	2301      	movs	r3, #1
 800b364:	e052      	b.n	800b40c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	681a      	ldr	r2, [r3, #0]
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f022 0216 	bic.w	r2, r2, #22
 800b374:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	695a      	ldr	r2, [r3, #20]
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b384:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d103      	bne.n	800b396 <HAL_DMA_Abort+0x62>
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b392:	2b00      	cmp	r3, #0
 800b394:	d007      	beq.n	800b3a6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	681a      	ldr	r2, [r3, #0]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f022 0208 	bic.w	r2, r2, #8
 800b3a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	681a      	ldr	r2, [r3, #0]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f022 0201 	bic.w	r2, r2, #1
 800b3b4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b3b6:	e013      	b.n	800b3e0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b3b8:	f7ff f9a4 	bl	800a704 <HAL_GetTick>
 800b3bc:	4602      	mov	r2, r0
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	1ad3      	subs	r3, r2, r3
 800b3c2:	2b05      	cmp	r3, #5
 800b3c4:	d90c      	bls.n	800b3e0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2220      	movs	r2, #32
 800b3ca:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2203      	movs	r2, #3
 800b3d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800b3dc:	2303      	movs	r3, #3
 800b3de:	e015      	b.n	800b40c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f003 0301 	and.w	r3, r3, #1
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d1e4      	bne.n	800b3b8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b3f2:	223f      	movs	r2, #63	@ 0x3f
 800b3f4:	409a      	lsls	r2, r3
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2201      	movs	r2, #1
 800b3fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2200      	movs	r2, #0
 800b406:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800b40a:	2300      	movs	r3, #0
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3710      	adds	r7, #16
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}

0800b414 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b414:	b480      	push	{r7}
 800b416:	b083      	sub	sp, #12
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b422:	b2db      	uxtb	r3, r3
 800b424:	2b02      	cmp	r3, #2
 800b426:	d004      	beq.n	800b432 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2280      	movs	r2, #128	@ 0x80
 800b42c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800b42e:	2301      	movs	r3, #1
 800b430:	e00c      	b.n	800b44c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2205      	movs	r2, #5
 800b436:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	681a      	ldr	r2, [r3, #0]
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f022 0201 	bic.w	r2, r2, #1
 800b448:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800b44a:	2300      	movs	r3, #0
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	370c      	adds	r7, #12
 800b450:	46bd      	mov	sp, r7
 800b452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b456:	4770      	bx	lr

0800b458 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b086      	sub	sp, #24
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800b460:	2300      	movs	r3, #0
 800b462:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800b464:	4b8e      	ldr	r3, [pc, #568]	@ (800b6a0 <HAL_DMA_IRQHandler+0x248>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	4a8e      	ldr	r2, [pc, #568]	@ (800b6a4 <HAL_DMA_IRQHandler+0x24c>)
 800b46a:	fba2 2303 	umull	r2, r3, r2, r3
 800b46e:	0a9b      	lsrs	r3, r3, #10
 800b470:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b476:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b482:	2208      	movs	r2, #8
 800b484:	409a      	lsls	r2, r3
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	4013      	ands	r3, r2
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d01a      	beq.n	800b4c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	f003 0304 	and.w	r3, r3, #4
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d013      	beq.n	800b4c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	681a      	ldr	r2, [r3, #0]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f022 0204 	bic.w	r2, r2, #4
 800b4aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b4b0:	2208      	movs	r2, #8
 800b4b2:	409a      	lsls	r2, r3
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4bc:	f043 0201 	orr.w	r2, r3, #1
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b4c8:	2201      	movs	r2, #1
 800b4ca:	409a      	lsls	r2, r3
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	4013      	ands	r3, r2
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d012      	beq.n	800b4fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	695b      	ldr	r3, [r3, #20]
 800b4da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d00b      	beq.n	800b4fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	409a      	lsls	r2, r3
 800b4ea:	693b      	ldr	r3, [r7, #16]
 800b4ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4f2:	f043 0202 	orr.w	r2, r3, #2
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b4fe:	2204      	movs	r2, #4
 800b500:	409a      	lsls	r2, r3
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	4013      	ands	r3, r2
 800b506:	2b00      	cmp	r3, #0
 800b508:	d012      	beq.n	800b530 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f003 0302 	and.w	r3, r3, #2
 800b514:	2b00      	cmp	r3, #0
 800b516:	d00b      	beq.n	800b530 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b51c:	2204      	movs	r2, #4
 800b51e:	409a      	lsls	r2, r3
 800b520:	693b      	ldr	r3, [r7, #16]
 800b522:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b528:	f043 0204 	orr.w	r2, r3, #4
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b534:	2210      	movs	r2, #16
 800b536:	409a      	lsls	r2, r3
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	4013      	ands	r3, r2
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d043      	beq.n	800b5c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	f003 0308 	and.w	r3, r3, #8
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d03c      	beq.n	800b5c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b552:	2210      	movs	r2, #16
 800b554:	409a      	lsls	r2, r3
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b564:	2b00      	cmp	r3, #0
 800b566:	d018      	beq.n	800b59a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b572:	2b00      	cmp	r3, #0
 800b574:	d108      	bne.n	800b588 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d024      	beq.n	800b5c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	4798      	blx	r3
 800b586:	e01f      	b.n	800b5c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d01b      	beq.n	800b5c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	4798      	blx	r3
 800b598:	e016      	b.n	800b5c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d107      	bne.n	800b5b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	681a      	ldr	r2, [r3, #0]
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f022 0208 	bic.w	r2, r2, #8
 800b5b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d003      	beq.n	800b5c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b5cc:	2220      	movs	r2, #32
 800b5ce:	409a      	lsls	r2, r3
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	4013      	ands	r3, r2
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	f000 808f 	beq.w	800b6f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	f003 0310 	and.w	r3, r3, #16
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	f000 8087 	beq.w	800b6f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b5ee:	2220      	movs	r2, #32
 800b5f0:	409a      	lsls	r2, r3
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	2b05      	cmp	r3, #5
 800b600:	d136      	bne.n	800b670 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	681a      	ldr	r2, [r3, #0]
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	f022 0216 	bic.w	r2, r2, #22
 800b610:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	695a      	ldr	r2, [r3, #20]
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b620:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b626:	2b00      	cmp	r3, #0
 800b628:	d103      	bne.n	800b632 <HAL_DMA_IRQHandler+0x1da>
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d007      	beq.n	800b642 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	681a      	ldr	r2, [r3, #0]
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f022 0208 	bic.w	r2, r2, #8
 800b640:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b646:	223f      	movs	r2, #63	@ 0x3f
 800b648:	409a      	lsls	r2, r3
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2201      	movs	r2, #1
 800b652:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2200      	movs	r2, #0
 800b65a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b662:	2b00      	cmp	r3, #0
 800b664:	d07e      	beq.n	800b764 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	4798      	blx	r3
        }
        return;
 800b66e:	e079      	b.n	800b764 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d01d      	beq.n	800b6ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d10d      	bne.n	800b6a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b690:	2b00      	cmp	r3, #0
 800b692:	d031      	beq.n	800b6f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	4798      	blx	r3
 800b69c:	e02c      	b.n	800b6f8 <HAL_DMA_IRQHandler+0x2a0>
 800b69e:	bf00      	nop
 800b6a0:	20000154 	.word	0x20000154
 800b6a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d023      	beq.n	800b6f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	4798      	blx	r3
 800b6b8:	e01e      	b.n	800b6f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d10f      	bne.n	800b6e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	681a      	ldr	r2, [r3, #0]
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	f022 0210 	bic.w	r2, r2, #16
 800b6d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2201      	movs	r2, #1
 800b6dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d003      	beq.n	800b6f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d032      	beq.n	800b766 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b704:	f003 0301 	and.w	r3, r3, #1
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d022      	beq.n	800b752 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2205      	movs	r2, #5
 800b710:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	681a      	ldr	r2, [r3, #0]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f022 0201 	bic.w	r2, r2, #1
 800b722:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	3301      	adds	r3, #1
 800b728:	60bb      	str	r3, [r7, #8]
 800b72a:	697a      	ldr	r2, [r7, #20]
 800b72c:	429a      	cmp	r2, r3
 800b72e:	d307      	bcc.n	800b740 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f003 0301 	and.w	r3, r3, #1
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d1f2      	bne.n	800b724 <HAL_DMA_IRQHandler+0x2cc>
 800b73e:	e000      	b.n	800b742 <HAL_DMA_IRQHandler+0x2ea>
          break;
 800b740:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2201      	movs	r2, #1
 800b746:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2200      	movs	r2, #0
 800b74e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b756:	2b00      	cmp	r3, #0
 800b758:	d005      	beq.n	800b766 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	4798      	blx	r3
 800b762:	e000      	b.n	800b766 <HAL_DMA_IRQHandler+0x30e>
        return;
 800b764:	bf00      	nop
    }
  }
}
 800b766:	3718      	adds	r7, #24
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}

0800b76c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b76c:	b480      	push	{r7}
 800b76e:	b085      	sub	sp, #20
 800b770:	af00      	add	r7, sp, #0
 800b772:	60f8      	str	r0, [r7, #12]
 800b774:	60b9      	str	r1, [r7, #8]
 800b776:	607a      	str	r2, [r7, #4]
 800b778:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	681a      	ldr	r2, [r3, #0]
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800b788:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	683a      	ldr	r2, [r7, #0]
 800b790:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	689b      	ldr	r3, [r3, #8]
 800b796:	2b40      	cmp	r3, #64	@ 0x40
 800b798:	d108      	bne.n	800b7ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	687a      	ldr	r2, [r7, #4]
 800b7a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	68ba      	ldr	r2, [r7, #8]
 800b7a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800b7aa:	e007      	b.n	800b7bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	68ba      	ldr	r2, [r7, #8]
 800b7b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	687a      	ldr	r2, [r7, #4]
 800b7ba:	60da      	str	r2, [r3, #12]
}
 800b7bc:	bf00      	nop
 800b7be:	3714      	adds	r7, #20
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c6:	4770      	bx	lr

0800b7c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b085      	sub	sp, #20
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	b2db      	uxtb	r3, r3
 800b7d6:	3b10      	subs	r3, #16
 800b7d8:	4a14      	ldr	r2, [pc, #80]	@ (800b82c <DMA_CalcBaseAndBitshift+0x64>)
 800b7da:	fba2 2303 	umull	r2, r3, r2, r3
 800b7de:	091b      	lsrs	r3, r3, #4
 800b7e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800b7e2:	4a13      	ldr	r2, [pc, #76]	@ (800b830 <DMA_CalcBaseAndBitshift+0x68>)
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	4413      	add	r3, r2
 800b7e8:	781b      	ldrb	r3, [r3, #0]
 800b7ea:	461a      	mov	r2, r3
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2b03      	cmp	r3, #3
 800b7f4:	d909      	bls.n	800b80a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800b7fe:	f023 0303 	bic.w	r3, r3, #3
 800b802:	1d1a      	adds	r2, r3, #4
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	659a      	str	r2, [r3, #88]	@ 0x58
 800b808:	e007      	b.n	800b81a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800b812:	f023 0303 	bic.w	r3, r3, #3
 800b816:	687a      	ldr	r2, [r7, #4]
 800b818:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800b81e:	4618      	mov	r0, r3
 800b820:	3714      	adds	r7, #20
 800b822:	46bd      	mov	sp, r7
 800b824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b828:	4770      	bx	lr
 800b82a:	bf00      	nop
 800b82c:	aaaaaaab 	.word	0xaaaaaaab
 800b830:	080141e4 	.word	0x080141e4

0800b834 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b834:	b480      	push	{r7}
 800b836:	b085      	sub	sp, #20
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b83c:	2300      	movs	r3, #0
 800b83e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b844:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	699b      	ldr	r3, [r3, #24]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d11f      	bne.n	800b88e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	2b03      	cmp	r3, #3
 800b852:	d856      	bhi.n	800b902 <DMA_CheckFifoParam+0xce>
 800b854:	a201      	add	r2, pc, #4	@ (adr r2, 800b85c <DMA_CheckFifoParam+0x28>)
 800b856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b85a:	bf00      	nop
 800b85c:	0800b86d 	.word	0x0800b86d
 800b860:	0800b87f 	.word	0x0800b87f
 800b864:	0800b86d 	.word	0x0800b86d
 800b868:	0800b903 	.word	0x0800b903
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b870:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b874:	2b00      	cmp	r3, #0
 800b876:	d046      	beq.n	800b906 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800b878:	2301      	movs	r3, #1
 800b87a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b87c:	e043      	b.n	800b906 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b882:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800b886:	d140      	bne.n	800b90a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800b888:	2301      	movs	r3, #1
 800b88a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b88c:	e03d      	b.n	800b90a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	699b      	ldr	r3, [r3, #24]
 800b892:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b896:	d121      	bne.n	800b8dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	2b03      	cmp	r3, #3
 800b89c:	d837      	bhi.n	800b90e <DMA_CheckFifoParam+0xda>
 800b89e:	a201      	add	r2, pc, #4	@ (adr r2, 800b8a4 <DMA_CheckFifoParam+0x70>)
 800b8a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8a4:	0800b8b5 	.word	0x0800b8b5
 800b8a8:	0800b8bb 	.word	0x0800b8bb
 800b8ac:	0800b8b5 	.word	0x0800b8b5
 800b8b0:	0800b8cd 	.word	0x0800b8cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	73fb      	strb	r3, [r7, #15]
      break;
 800b8b8:	e030      	b.n	800b91c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d025      	beq.n	800b912 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b8ca:	e022      	b.n	800b912 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8d0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800b8d4:	d11f      	bne.n	800b916 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800b8da:	e01c      	b.n	800b916 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	2b02      	cmp	r3, #2
 800b8e0:	d903      	bls.n	800b8ea <DMA_CheckFifoParam+0xb6>
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	2b03      	cmp	r3, #3
 800b8e6:	d003      	beq.n	800b8f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800b8e8:	e018      	b.n	800b91c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	73fb      	strb	r3, [r7, #15]
      break;
 800b8ee:	e015      	b.n	800b91c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d00e      	beq.n	800b91a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	73fb      	strb	r3, [r7, #15]
      break;
 800b900:	e00b      	b.n	800b91a <DMA_CheckFifoParam+0xe6>
      break;
 800b902:	bf00      	nop
 800b904:	e00a      	b.n	800b91c <DMA_CheckFifoParam+0xe8>
      break;
 800b906:	bf00      	nop
 800b908:	e008      	b.n	800b91c <DMA_CheckFifoParam+0xe8>
      break;
 800b90a:	bf00      	nop
 800b90c:	e006      	b.n	800b91c <DMA_CheckFifoParam+0xe8>
      break;
 800b90e:	bf00      	nop
 800b910:	e004      	b.n	800b91c <DMA_CheckFifoParam+0xe8>
      break;
 800b912:	bf00      	nop
 800b914:	e002      	b.n	800b91c <DMA_CheckFifoParam+0xe8>
      break;   
 800b916:	bf00      	nop
 800b918:	e000      	b.n	800b91c <DMA_CheckFifoParam+0xe8>
      break;
 800b91a:	bf00      	nop
    }
  } 
  
  return status; 
 800b91c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3714      	adds	r7, #20
 800b922:	46bd      	mov	sp, r7
 800b924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b928:	4770      	bx	lr
 800b92a:	bf00      	nop

0800b92c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b92c:	b480      	push	{r7}
 800b92e:	b089      	sub	sp, #36	@ 0x24
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
 800b934:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b936:	2300      	movs	r3, #0
 800b938:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b93a:	2300      	movs	r3, #0
 800b93c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b93e:	2300      	movs	r3, #0
 800b940:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b942:	2300      	movs	r3, #0
 800b944:	61fb      	str	r3, [r7, #28]
 800b946:	e16b      	b.n	800bc20 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b948:	2201      	movs	r2, #1
 800b94a:	69fb      	ldr	r3, [r7, #28]
 800b94c:	fa02 f303 	lsl.w	r3, r2, r3
 800b950:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	697a      	ldr	r2, [r7, #20]
 800b958:	4013      	ands	r3, r2
 800b95a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b95c:	693a      	ldr	r2, [r7, #16]
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	429a      	cmp	r2, r3
 800b962:	f040 815a 	bne.w	800bc1a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	685b      	ldr	r3, [r3, #4]
 800b96a:	f003 0303 	and.w	r3, r3, #3
 800b96e:	2b01      	cmp	r3, #1
 800b970:	d005      	beq.n	800b97e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	685b      	ldr	r3, [r3, #4]
 800b976:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b97a:	2b02      	cmp	r3, #2
 800b97c:	d130      	bne.n	800b9e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	689b      	ldr	r3, [r3, #8]
 800b982:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b984:	69fb      	ldr	r3, [r7, #28]
 800b986:	005b      	lsls	r3, r3, #1
 800b988:	2203      	movs	r2, #3
 800b98a:	fa02 f303 	lsl.w	r3, r2, r3
 800b98e:	43db      	mvns	r3, r3
 800b990:	69ba      	ldr	r2, [r7, #24]
 800b992:	4013      	ands	r3, r2
 800b994:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	68da      	ldr	r2, [r3, #12]
 800b99a:	69fb      	ldr	r3, [r7, #28]
 800b99c:	005b      	lsls	r3, r3, #1
 800b99e:	fa02 f303 	lsl.w	r3, r2, r3
 800b9a2:	69ba      	ldr	r2, [r7, #24]
 800b9a4:	4313      	orrs	r3, r2
 800b9a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	69ba      	ldr	r2, [r7, #24]
 800b9ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	685b      	ldr	r3, [r3, #4]
 800b9b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b9b4:	2201      	movs	r2, #1
 800b9b6:	69fb      	ldr	r3, [r7, #28]
 800b9b8:	fa02 f303 	lsl.w	r3, r2, r3
 800b9bc:	43db      	mvns	r3, r3
 800b9be:	69ba      	ldr	r2, [r7, #24]
 800b9c0:	4013      	ands	r3, r2
 800b9c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	685b      	ldr	r3, [r3, #4]
 800b9c8:	091b      	lsrs	r3, r3, #4
 800b9ca:	f003 0201 	and.w	r2, r3, #1
 800b9ce:	69fb      	ldr	r3, [r7, #28]
 800b9d0:	fa02 f303 	lsl.w	r3, r2, r3
 800b9d4:	69ba      	ldr	r2, [r7, #24]
 800b9d6:	4313      	orrs	r3, r2
 800b9d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	69ba      	ldr	r2, [r7, #24]
 800b9de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	685b      	ldr	r3, [r3, #4]
 800b9e4:	f003 0303 	and.w	r3, r3, #3
 800b9e8:	2b03      	cmp	r3, #3
 800b9ea:	d017      	beq.n	800ba1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	68db      	ldr	r3, [r3, #12]
 800b9f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b9f2:	69fb      	ldr	r3, [r7, #28]
 800b9f4:	005b      	lsls	r3, r3, #1
 800b9f6:	2203      	movs	r2, #3
 800b9f8:	fa02 f303 	lsl.w	r3, r2, r3
 800b9fc:	43db      	mvns	r3, r3
 800b9fe:	69ba      	ldr	r2, [r7, #24]
 800ba00:	4013      	ands	r3, r2
 800ba02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	689a      	ldr	r2, [r3, #8]
 800ba08:	69fb      	ldr	r3, [r7, #28]
 800ba0a:	005b      	lsls	r3, r3, #1
 800ba0c:	fa02 f303 	lsl.w	r3, r2, r3
 800ba10:	69ba      	ldr	r2, [r7, #24]
 800ba12:	4313      	orrs	r3, r2
 800ba14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	69ba      	ldr	r2, [r7, #24]
 800ba1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	685b      	ldr	r3, [r3, #4]
 800ba20:	f003 0303 	and.w	r3, r3, #3
 800ba24:	2b02      	cmp	r3, #2
 800ba26:	d123      	bne.n	800ba70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ba28:	69fb      	ldr	r3, [r7, #28]
 800ba2a:	08da      	lsrs	r2, r3, #3
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	3208      	adds	r2, #8
 800ba30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800ba36:	69fb      	ldr	r3, [r7, #28]
 800ba38:	f003 0307 	and.w	r3, r3, #7
 800ba3c:	009b      	lsls	r3, r3, #2
 800ba3e:	220f      	movs	r2, #15
 800ba40:	fa02 f303 	lsl.w	r3, r2, r3
 800ba44:	43db      	mvns	r3, r3
 800ba46:	69ba      	ldr	r2, [r7, #24]
 800ba48:	4013      	ands	r3, r2
 800ba4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	691a      	ldr	r2, [r3, #16]
 800ba50:	69fb      	ldr	r3, [r7, #28]
 800ba52:	f003 0307 	and.w	r3, r3, #7
 800ba56:	009b      	lsls	r3, r3, #2
 800ba58:	fa02 f303 	lsl.w	r3, r2, r3
 800ba5c:	69ba      	ldr	r2, [r7, #24]
 800ba5e:	4313      	orrs	r3, r2
 800ba60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ba62:	69fb      	ldr	r3, [r7, #28]
 800ba64:	08da      	lsrs	r2, r3, #3
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	3208      	adds	r2, #8
 800ba6a:	69b9      	ldr	r1, [r7, #24]
 800ba6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ba76:	69fb      	ldr	r3, [r7, #28]
 800ba78:	005b      	lsls	r3, r3, #1
 800ba7a:	2203      	movs	r2, #3
 800ba7c:	fa02 f303 	lsl.w	r3, r2, r3
 800ba80:	43db      	mvns	r3, r3
 800ba82:	69ba      	ldr	r2, [r7, #24]
 800ba84:	4013      	ands	r3, r2
 800ba86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	685b      	ldr	r3, [r3, #4]
 800ba8c:	f003 0203 	and.w	r2, r3, #3
 800ba90:	69fb      	ldr	r3, [r7, #28]
 800ba92:	005b      	lsls	r3, r3, #1
 800ba94:	fa02 f303 	lsl.w	r3, r2, r3
 800ba98:	69ba      	ldr	r2, [r7, #24]
 800ba9a:	4313      	orrs	r3, r2
 800ba9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	69ba      	ldr	r2, [r7, #24]
 800baa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	685b      	ldr	r3, [r3, #4]
 800baa8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800baac:	2b00      	cmp	r3, #0
 800baae:	f000 80b4 	beq.w	800bc1a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bab2:	2300      	movs	r3, #0
 800bab4:	60fb      	str	r3, [r7, #12]
 800bab6:	4b60      	ldr	r3, [pc, #384]	@ (800bc38 <HAL_GPIO_Init+0x30c>)
 800bab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800baba:	4a5f      	ldr	r2, [pc, #380]	@ (800bc38 <HAL_GPIO_Init+0x30c>)
 800babc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bac0:	6453      	str	r3, [r2, #68]	@ 0x44
 800bac2:	4b5d      	ldr	r3, [pc, #372]	@ (800bc38 <HAL_GPIO_Init+0x30c>)
 800bac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bac6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800baca:	60fb      	str	r3, [r7, #12]
 800bacc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800bace:	4a5b      	ldr	r2, [pc, #364]	@ (800bc3c <HAL_GPIO_Init+0x310>)
 800bad0:	69fb      	ldr	r3, [r7, #28]
 800bad2:	089b      	lsrs	r3, r3, #2
 800bad4:	3302      	adds	r3, #2
 800bad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bada:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800badc:	69fb      	ldr	r3, [r7, #28]
 800bade:	f003 0303 	and.w	r3, r3, #3
 800bae2:	009b      	lsls	r3, r3, #2
 800bae4:	220f      	movs	r2, #15
 800bae6:	fa02 f303 	lsl.w	r3, r2, r3
 800baea:	43db      	mvns	r3, r3
 800baec:	69ba      	ldr	r2, [r7, #24]
 800baee:	4013      	ands	r3, r2
 800baf0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	4a52      	ldr	r2, [pc, #328]	@ (800bc40 <HAL_GPIO_Init+0x314>)
 800baf6:	4293      	cmp	r3, r2
 800baf8:	d02b      	beq.n	800bb52 <HAL_GPIO_Init+0x226>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	4a51      	ldr	r2, [pc, #324]	@ (800bc44 <HAL_GPIO_Init+0x318>)
 800bafe:	4293      	cmp	r3, r2
 800bb00:	d025      	beq.n	800bb4e <HAL_GPIO_Init+0x222>
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	4a50      	ldr	r2, [pc, #320]	@ (800bc48 <HAL_GPIO_Init+0x31c>)
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d01f      	beq.n	800bb4a <HAL_GPIO_Init+0x21e>
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	4a4f      	ldr	r2, [pc, #316]	@ (800bc4c <HAL_GPIO_Init+0x320>)
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	d019      	beq.n	800bb46 <HAL_GPIO_Init+0x21a>
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	4a4e      	ldr	r2, [pc, #312]	@ (800bc50 <HAL_GPIO_Init+0x324>)
 800bb16:	4293      	cmp	r3, r2
 800bb18:	d013      	beq.n	800bb42 <HAL_GPIO_Init+0x216>
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	4a4d      	ldr	r2, [pc, #308]	@ (800bc54 <HAL_GPIO_Init+0x328>)
 800bb1e:	4293      	cmp	r3, r2
 800bb20:	d00d      	beq.n	800bb3e <HAL_GPIO_Init+0x212>
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	4a4c      	ldr	r2, [pc, #304]	@ (800bc58 <HAL_GPIO_Init+0x32c>)
 800bb26:	4293      	cmp	r3, r2
 800bb28:	d007      	beq.n	800bb3a <HAL_GPIO_Init+0x20e>
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	4a4b      	ldr	r2, [pc, #300]	@ (800bc5c <HAL_GPIO_Init+0x330>)
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	d101      	bne.n	800bb36 <HAL_GPIO_Init+0x20a>
 800bb32:	2307      	movs	r3, #7
 800bb34:	e00e      	b.n	800bb54 <HAL_GPIO_Init+0x228>
 800bb36:	2308      	movs	r3, #8
 800bb38:	e00c      	b.n	800bb54 <HAL_GPIO_Init+0x228>
 800bb3a:	2306      	movs	r3, #6
 800bb3c:	e00a      	b.n	800bb54 <HAL_GPIO_Init+0x228>
 800bb3e:	2305      	movs	r3, #5
 800bb40:	e008      	b.n	800bb54 <HAL_GPIO_Init+0x228>
 800bb42:	2304      	movs	r3, #4
 800bb44:	e006      	b.n	800bb54 <HAL_GPIO_Init+0x228>
 800bb46:	2303      	movs	r3, #3
 800bb48:	e004      	b.n	800bb54 <HAL_GPIO_Init+0x228>
 800bb4a:	2302      	movs	r3, #2
 800bb4c:	e002      	b.n	800bb54 <HAL_GPIO_Init+0x228>
 800bb4e:	2301      	movs	r3, #1
 800bb50:	e000      	b.n	800bb54 <HAL_GPIO_Init+0x228>
 800bb52:	2300      	movs	r3, #0
 800bb54:	69fa      	ldr	r2, [r7, #28]
 800bb56:	f002 0203 	and.w	r2, r2, #3
 800bb5a:	0092      	lsls	r2, r2, #2
 800bb5c:	4093      	lsls	r3, r2
 800bb5e:	69ba      	ldr	r2, [r7, #24]
 800bb60:	4313      	orrs	r3, r2
 800bb62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800bb64:	4935      	ldr	r1, [pc, #212]	@ (800bc3c <HAL_GPIO_Init+0x310>)
 800bb66:	69fb      	ldr	r3, [r7, #28]
 800bb68:	089b      	lsrs	r3, r3, #2
 800bb6a:	3302      	adds	r3, #2
 800bb6c:	69ba      	ldr	r2, [r7, #24]
 800bb6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800bb72:	4b3b      	ldr	r3, [pc, #236]	@ (800bc60 <HAL_GPIO_Init+0x334>)
 800bb74:	689b      	ldr	r3, [r3, #8]
 800bb76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	43db      	mvns	r3, r3
 800bb7c:	69ba      	ldr	r2, [r7, #24]
 800bb7e:	4013      	ands	r3, r2
 800bb80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	685b      	ldr	r3, [r3, #4]
 800bb86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d003      	beq.n	800bb96 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800bb8e:	69ba      	ldr	r2, [r7, #24]
 800bb90:	693b      	ldr	r3, [r7, #16]
 800bb92:	4313      	orrs	r3, r2
 800bb94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800bb96:	4a32      	ldr	r2, [pc, #200]	@ (800bc60 <HAL_GPIO_Init+0x334>)
 800bb98:	69bb      	ldr	r3, [r7, #24]
 800bb9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800bb9c:	4b30      	ldr	r3, [pc, #192]	@ (800bc60 <HAL_GPIO_Init+0x334>)
 800bb9e:	68db      	ldr	r3, [r3, #12]
 800bba0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	43db      	mvns	r3, r3
 800bba6:	69ba      	ldr	r2, [r7, #24]
 800bba8:	4013      	ands	r3, r2
 800bbaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	685b      	ldr	r3, [r3, #4]
 800bbb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d003      	beq.n	800bbc0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800bbb8:	69ba      	ldr	r2, [r7, #24]
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	4313      	orrs	r3, r2
 800bbbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800bbc0:	4a27      	ldr	r2, [pc, #156]	@ (800bc60 <HAL_GPIO_Init+0x334>)
 800bbc2:	69bb      	ldr	r3, [r7, #24]
 800bbc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800bbc6:	4b26      	ldr	r3, [pc, #152]	@ (800bc60 <HAL_GPIO_Init+0x334>)
 800bbc8:	685b      	ldr	r3, [r3, #4]
 800bbca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	43db      	mvns	r3, r3
 800bbd0:	69ba      	ldr	r2, [r7, #24]
 800bbd2:	4013      	ands	r3, r2
 800bbd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	685b      	ldr	r3, [r3, #4]
 800bbda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d003      	beq.n	800bbea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800bbe2:	69ba      	ldr	r2, [r7, #24]
 800bbe4:	693b      	ldr	r3, [r7, #16]
 800bbe6:	4313      	orrs	r3, r2
 800bbe8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800bbea:	4a1d      	ldr	r2, [pc, #116]	@ (800bc60 <HAL_GPIO_Init+0x334>)
 800bbec:	69bb      	ldr	r3, [r7, #24]
 800bbee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800bbf0:	4b1b      	ldr	r3, [pc, #108]	@ (800bc60 <HAL_GPIO_Init+0x334>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	43db      	mvns	r3, r3
 800bbfa:	69ba      	ldr	r2, [r7, #24]
 800bbfc:	4013      	ands	r3, r2
 800bbfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	685b      	ldr	r3, [r3, #4]
 800bc04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d003      	beq.n	800bc14 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800bc0c:	69ba      	ldr	r2, [r7, #24]
 800bc0e:	693b      	ldr	r3, [r7, #16]
 800bc10:	4313      	orrs	r3, r2
 800bc12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800bc14:	4a12      	ldr	r2, [pc, #72]	@ (800bc60 <HAL_GPIO_Init+0x334>)
 800bc16:	69bb      	ldr	r3, [r7, #24]
 800bc18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800bc1a:	69fb      	ldr	r3, [r7, #28]
 800bc1c:	3301      	adds	r3, #1
 800bc1e:	61fb      	str	r3, [r7, #28]
 800bc20:	69fb      	ldr	r3, [r7, #28]
 800bc22:	2b0f      	cmp	r3, #15
 800bc24:	f67f ae90 	bls.w	800b948 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800bc28:	bf00      	nop
 800bc2a:	bf00      	nop
 800bc2c:	3724      	adds	r7, #36	@ 0x24
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc34:	4770      	bx	lr
 800bc36:	bf00      	nop
 800bc38:	40023800 	.word	0x40023800
 800bc3c:	40013800 	.word	0x40013800
 800bc40:	40020000 	.word	0x40020000
 800bc44:	40020400 	.word	0x40020400
 800bc48:	40020800 	.word	0x40020800
 800bc4c:	40020c00 	.word	0x40020c00
 800bc50:	40021000 	.word	0x40021000
 800bc54:	40021400 	.word	0x40021400
 800bc58:	40021800 	.word	0x40021800
 800bc5c:	40021c00 	.word	0x40021c00
 800bc60:	40013c00 	.word	0x40013c00

0800bc64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800bc64:	b480      	push	{r7}
 800bc66:	b085      	sub	sp, #20
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
 800bc6c:	460b      	mov	r3, r1
 800bc6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	691a      	ldr	r2, [r3, #16]
 800bc74:	887b      	ldrh	r3, [r7, #2]
 800bc76:	4013      	ands	r3, r2
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d002      	beq.n	800bc82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800bc7c:	2301      	movs	r3, #1
 800bc7e:	73fb      	strb	r3, [r7, #15]
 800bc80:	e001      	b.n	800bc86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800bc82:	2300      	movs	r3, #0
 800bc84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800bc86:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	3714      	adds	r7, #20
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc92:	4770      	bx	lr

0800bc94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800bc94:	b480      	push	{r7}
 800bc96:	b083      	sub	sp, #12
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
 800bc9c:	460b      	mov	r3, r1
 800bc9e:	807b      	strh	r3, [r7, #2]
 800bca0:	4613      	mov	r3, r2
 800bca2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800bca4:	787b      	ldrb	r3, [r7, #1]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d003      	beq.n	800bcb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800bcaa:	887a      	ldrh	r2, [r7, #2]
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800bcb0:	e003      	b.n	800bcba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800bcb2:	887b      	ldrh	r3, [r7, #2]
 800bcb4:	041a      	lsls	r2, r3, #16
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	619a      	str	r2, [r3, #24]
}
 800bcba:	bf00      	nop
 800bcbc:	370c      	adds	r7, #12
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc4:	4770      	bx	lr
	...

0800bcc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b086      	sub	sp, #24
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d101      	bne.n	800bcda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	e267      	b.n	800c1aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	f003 0301 	and.w	r3, r3, #1
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d075      	beq.n	800bdd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800bce6:	4b88      	ldr	r3, [pc, #544]	@ (800bf08 <HAL_RCC_OscConfig+0x240>)
 800bce8:	689b      	ldr	r3, [r3, #8]
 800bcea:	f003 030c 	and.w	r3, r3, #12
 800bcee:	2b04      	cmp	r3, #4
 800bcf0:	d00c      	beq.n	800bd0c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bcf2:	4b85      	ldr	r3, [pc, #532]	@ (800bf08 <HAL_RCC_OscConfig+0x240>)
 800bcf4:	689b      	ldr	r3, [r3, #8]
 800bcf6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800bcfa:	2b08      	cmp	r3, #8
 800bcfc:	d112      	bne.n	800bd24 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bcfe:	4b82      	ldr	r3, [pc, #520]	@ (800bf08 <HAL_RCC_OscConfig+0x240>)
 800bd00:	685b      	ldr	r3, [r3, #4]
 800bd02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bd06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bd0a:	d10b      	bne.n	800bd24 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bd0c:	4b7e      	ldr	r3, [pc, #504]	@ (800bf08 <HAL_RCC_OscConfig+0x240>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d05b      	beq.n	800bdd0 <HAL_RCC_OscConfig+0x108>
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	685b      	ldr	r3, [r3, #4]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d157      	bne.n	800bdd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800bd20:	2301      	movs	r3, #1
 800bd22:	e242      	b.n	800c1aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	685b      	ldr	r3, [r3, #4]
 800bd28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd2c:	d106      	bne.n	800bd3c <HAL_RCC_OscConfig+0x74>
 800bd2e:	4b76      	ldr	r3, [pc, #472]	@ (800bf08 <HAL_RCC_OscConfig+0x240>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	4a75      	ldr	r2, [pc, #468]	@ (800bf08 <HAL_RCC_OscConfig+0x240>)
 800bd34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bd38:	6013      	str	r3, [r2, #0]
 800bd3a:	e01d      	b.n	800bd78 <HAL_RCC_OscConfig+0xb0>
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	685b      	ldr	r3, [r3, #4]
 800bd40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bd44:	d10c      	bne.n	800bd60 <HAL_RCC_OscConfig+0x98>
 800bd46:	4b70      	ldr	r3, [pc, #448]	@ (800bf08 <HAL_RCC_OscConfig+0x240>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	4a6f      	ldr	r2, [pc, #444]	@ (800bf08 <HAL_RCC_OscConfig+0x240>)
 800bd4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800bd50:	6013      	str	r3, [r2, #0]
 800bd52:	4b6d      	ldr	r3, [pc, #436]	@ (800bf08 <HAL_RCC_OscConfig+0x240>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	4a6c      	ldr	r2, [pc, #432]	@ (800bf08 <HAL_RCC_OscConfig+0x240>)
 800bd58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bd5c:	6013      	str	r3, [r2, #0]
 800bd5e:	e00b      	b.n	800bd78 <HAL_RCC_OscConfig+0xb0>
 800bd60:	4b69      	ldr	r3, [pc, #420]	@ (800bf08 <HAL_RCC_OscConfig+0x240>)
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	4a68      	ldr	r2, [pc, #416]	@ (800bf08 <HAL_RCC_OscConfig+0x240>)
 800bd66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bd6a:	6013      	str	r3, [r2, #0]
 800bd6c:	4b66      	ldr	r3, [pc, #408]	@ (800bf08 <HAL_RCC_OscConfig+0x240>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	4a65      	ldr	r2, [pc, #404]	@ (800bf08 <HAL_RCC_OscConfig+0x240>)
 800bd72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bd76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	685b      	ldr	r3, [r3, #4]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d013      	beq.n	800bda8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bd80:	f7fe fcc0 	bl	800a704 <HAL_GetTick>
 800bd84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bd86:	e008      	b.n	800bd9a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bd88:	f7fe fcbc 	bl	800a704 <HAL_GetTick>
 800bd8c:	4602      	mov	r2, r0
 800bd8e:	693b      	ldr	r3, [r7, #16]
 800bd90:	1ad3      	subs	r3, r2, r3
 800bd92:	2b64      	cmp	r3, #100	@ 0x64
 800bd94:	d901      	bls.n	800bd9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800bd96:	2303      	movs	r3, #3
 800bd98:	e207      	b.n	800c1aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bd9a:	4b5b      	ldr	r3, [pc, #364]	@ (800bf08 <HAL_RCC_OscConfig+0x240>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d0f0      	beq.n	800bd88 <HAL_RCC_OscConfig+0xc0>
 800bda6:	e014      	b.n	800bdd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bda8:	f7fe fcac 	bl	800a704 <HAL_GetTick>
 800bdac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bdae:	e008      	b.n	800bdc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bdb0:	f7fe fca8 	bl	800a704 <HAL_GetTick>
 800bdb4:	4602      	mov	r2, r0
 800bdb6:	693b      	ldr	r3, [r7, #16]
 800bdb8:	1ad3      	subs	r3, r2, r3
 800bdba:	2b64      	cmp	r3, #100	@ 0x64
 800bdbc:	d901      	bls.n	800bdc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800bdbe:	2303      	movs	r3, #3
 800bdc0:	e1f3      	b.n	800c1aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bdc2:	4b51      	ldr	r3, [pc, #324]	@ (800bf08 <HAL_RCC_OscConfig+0x240>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d1f0      	bne.n	800bdb0 <HAL_RCC_OscConfig+0xe8>
 800bdce:	e000      	b.n	800bdd2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bdd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	f003 0302 	and.w	r3, r3, #2
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d063      	beq.n	800bea6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800bdde:	4b4a      	ldr	r3, [pc, #296]	@ (800bf08 <HAL_RCC_OscConfig+0x240>)
 800bde0:	689b      	ldr	r3, [r3, #8]
 800bde2:	f003 030c 	and.w	r3, r3, #12
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d00b      	beq.n	800be02 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bdea:	4b47      	ldr	r3, [pc, #284]	@ (800bf08 <HAL_RCC_OscConfig+0x240>)
 800bdec:	689b      	ldr	r3, [r3, #8]
 800bdee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800bdf2:	2b08      	cmp	r3, #8
 800bdf4:	d11c      	bne.n	800be30 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bdf6:	4b44      	ldr	r3, [pc, #272]	@ (800bf08 <HAL_RCC_OscConfig+0x240>)
 800bdf8:	685b      	ldr	r3, [r3, #4]
 800bdfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d116      	bne.n	800be30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800be02:	4b41      	ldr	r3, [pc, #260]	@ (800bf08 <HAL_RCC_OscConfig+0x240>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f003 0302 	and.w	r3, r3, #2
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d005      	beq.n	800be1a <HAL_RCC_OscConfig+0x152>
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	68db      	ldr	r3, [r3, #12]
 800be12:	2b01      	cmp	r3, #1
 800be14:	d001      	beq.n	800be1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800be16:	2301      	movs	r3, #1
 800be18:	e1c7      	b.n	800c1aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800be1a:	4b3b      	ldr	r3, [pc, #236]	@ (800bf08 <HAL_RCC_OscConfig+0x240>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	691b      	ldr	r3, [r3, #16]
 800be26:	00db      	lsls	r3, r3, #3
 800be28:	4937      	ldr	r1, [pc, #220]	@ (800bf08 <HAL_RCC_OscConfig+0x240>)
 800be2a:	4313      	orrs	r3, r2
 800be2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800be2e:	e03a      	b.n	800bea6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	68db      	ldr	r3, [r3, #12]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d020      	beq.n	800be7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800be38:	4b34      	ldr	r3, [pc, #208]	@ (800bf0c <HAL_RCC_OscConfig+0x244>)
 800be3a:	2201      	movs	r2, #1
 800be3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be3e:	f7fe fc61 	bl	800a704 <HAL_GetTick>
 800be42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800be44:	e008      	b.n	800be58 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800be46:	f7fe fc5d 	bl	800a704 <HAL_GetTick>
 800be4a:	4602      	mov	r2, r0
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	1ad3      	subs	r3, r2, r3
 800be50:	2b02      	cmp	r3, #2
 800be52:	d901      	bls.n	800be58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800be54:	2303      	movs	r3, #3
 800be56:	e1a8      	b.n	800c1aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800be58:	4b2b      	ldr	r3, [pc, #172]	@ (800bf08 <HAL_RCC_OscConfig+0x240>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	f003 0302 	and.w	r3, r3, #2
 800be60:	2b00      	cmp	r3, #0
 800be62:	d0f0      	beq.n	800be46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800be64:	4b28      	ldr	r3, [pc, #160]	@ (800bf08 <HAL_RCC_OscConfig+0x240>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	691b      	ldr	r3, [r3, #16]
 800be70:	00db      	lsls	r3, r3, #3
 800be72:	4925      	ldr	r1, [pc, #148]	@ (800bf08 <HAL_RCC_OscConfig+0x240>)
 800be74:	4313      	orrs	r3, r2
 800be76:	600b      	str	r3, [r1, #0]
 800be78:	e015      	b.n	800bea6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800be7a:	4b24      	ldr	r3, [pc, #144]	@ (800bf0c <HAL_RCC_OscConfig+0x244>)
 800be7c:	2200      	movs	r2, #0
 800be7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be80:	f7fe fc40 	bl	800a704 <HAL_GetTick>
 800be84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800be86:	e008      	b.n	800be9a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800be88:	f7fe fc3c 	bl	800a704 <HAL_GetTick>
 800be8c:	4602      	mov	r2, r0
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	1ad3      	subs	r3, r2, r3
 800be92:	2b02      	cmp	r3, #2
 800be94:	d901      	bls.n	800be9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800be96:	2303      	movs	r3, #3
 800be98:	e187      	b.n	800c1aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800be9a:	4b1b      	ldr	r3, [pc, #108]	@ (800bf08 <HAL_RCC_OscConfig+0x240>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	f003 0302 	and.w	r3, r3, #2
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d1f0      	bne.n	800be88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f003 0308 	and.w	r3, r3, #8
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d036      	beq.n	800bf20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	695b      	ldr	r3, [r3, #20]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d016      	beq.n	800bee8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800beba:	4b15      	ldr	r3, [pc, #84]	@ (800bf10 <HAL_RCC_OscConfig+0x248>)
 800bebc:	2201      	movs	r2, #1
 800bebe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bec0:	f7fe fc20 	bl	800a704 <HAL_GetTick>
 800bec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bec6:	e008      	b.n	800beda <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bec8:	f7fe fc1c 	bl	800a704 <HAL_GetTick>
 800becc:	4602      	mov	r2, r0
 800bece:	693b      	ldr	r3, [r7, #16]
 800bed0:	1ad3      	subs	r3, r2, r3
 800bed2:	2b02      	cmp	r3, #2
 800bed4:	d901      	bls.n	800beda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800bed6:	2303      	movs	r3, #3
 800bed8:	e167      	b.n	800c1aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800beda:	4b0b      	ldr	r3, [pc, #44]	@ (800bf08 <HAL_RCC_OscConfig+0x240>)
 800bedc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bede:	f003 0302 	and.w	r3, r3, #2
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d0f0      	beq.n	800bec8 <HAL_RCC_OscConfig+0x200>
 800bee6:	e01b      	b.n	800bf20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bee8:	4b09      	ldr	r3, [pc, #36]	@ (800bf10 <HAL_RCC_OscConfig+0x248>)
 800beea:	2200      	movs	r2, #0
 800beec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800beee:	f7fe fc09 	bl	800a704 <HAL_GetTick>
 800bef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bef4:	e00e      	b.n	800bf14 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bef6:	f7fe fc05 	bl	800a704 <HAL_GetTick>
 800befa:	4602      	mov	r2, r0
 800befc:	693b      	ldr	r3, [r7, #16]
 800befe:	1ad3      	subs	r3, r2, r3
 800bf00:	2b02      	cmp	r3, #2
 800bf02:	d907      	bls.n	800bf14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800bf04:	2303      	movs	r3, #3
 800bf06:	e150      	b.n	800c1aa <HAL_RCC_OscConfig+0x4e2>
 800bf08:	40023800 	.word	0x40023800
 800bf0c:	42470000 	.word	0x42470000
 800bf10:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bf14:	4b88      	ldr	r3, [pc, #544]	@ (800c138 <HAL_RCC_OscConfig+0x470>)
 800bf16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf18:	f003 0302 	and.w	r3, r3, #2
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d1ea      	bne.n	800bef6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	f003 0304 	and.w	r3, r3, #4
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	f000 8097 	beq.w	800c05c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bf32:	4b81      	ldr	r3, [pc, #516]	@ (800c138 <HAL_RCC_OscConfig+0x470>)
 800bf34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d10f      	bne.n	800bf5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bf3e:	2300      	movs	r3, #0
 800bf40:	60bb      	str	r3, [r7, #8]
 800bf42:	4b7d      	ldr	r3, [pc, #500]	@ (800c138 <HAL_RCC_OscConfig+0x470>)
 800bf44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf46:	4a7c      	ldr	r2, [pc, #496]	@ (800c138 <HAL_RCC_OscConfig+0x470>)
 800bf48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bf4c:	6413      	str	r3, [r2, #64]	@ 0x40
 800bf4e:	4b7a      	ldr	r3, [pc, #488]	@ (800c138 <HAL_RCC_OscConfig+0x470>)
 800bf50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bf56:	60bb      	str	r3, [r7, #8]
 800bf58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bf5e:	4b77      	ldr	r3, [pc, #476]	@ (800c13c <HAL_RCC_OscConfig+0x474>)
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d118      	bne.n	800bf9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800bf6a:	4b74      	ldr	r3, [pc, #464]	@ (800c13c <HAL_RCC_OscConfig+0x474>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	4a73      	ldr	r2, [pc, #460]	@ (800c13c <HAL_RCC_OscConfig+0x474>)
 800bf70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bf74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bf76:	f7fe fbc5 	bl	800a704 <HAL_GetTick>
 800bf7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bf7c:	e008      	b.n	800bf90 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bf7e:	f7fe fbc1 	bl	800a704 <HAL_GetTick>
 800bf82:	4602      	mov	r2, r0
 800bf84:	693b      	ldr	r3, [r7, #16]
 800bf86:	1ad3      	subs	r3, r2, r3
 800bf88:	2b02      	cmp	r3, #2
 800bf8a:	d901      	bls.n	800bf90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800bf8c:	2303      	movs	r3, #3
 800bf8e:	e10c      	b.n	800c1aa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bf90:	4b6a      	ldr	r3, [pc, #424]	@ (800c13c <HAL_RCC_OscConfig+0x474>)
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d0f0      	beq.n	800bf7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	689b      	ldr	r3, [r3, #8]
 800bfa0:	2b01      	cmp	r3, #1
 800bfa2:	d106      	bne.n	800bfb2 <HAL_RCC_OscConfig+0x2ea>
 800bfa4:	4b64      	ldr	r3, [pc, #400]	@ (800c138 <HAL_RCC_OscConfig+0x470>)
 800bfa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bfa8:	4a63      	ldr	r2, [pc, #396]	@ (800c138 <HAL_RCC_OscConfig+0x470>)
 800bfaa:	f043 0301 	orr.w	r3, r3, #1
 800bfae:	6713      	str	r3, [r2, #112]	@ 0x70
 800bfb0:	e01c      	b.n	800bfec <HAL_RCC_OscConfig+0x324>
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	689b      	ldr	r3, [r3, #8]
 800bfb6:	2b05      	cmp	r3, #5
 800bfb8:	d10c      	bne.n	800bfd4 <HAL_RCC_OscConfig+0x30c>
 800bfba:	4b5f      	ldr	r3, [pc, #380]	@ (800c138 <HAL_RCC_OscConfig+0x470>)
 800bfbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bfbe:	4a5e      	ldr	r2, [pc, #376]	@ (800c138 <HAL_RCC_OscConfig+0x470>)
 800bfc0:	f043 0304 	orr.w	r3, r3, #4
 800bfc4:	6713      	str	r3, [r2, #112]	@ 0x70
 800bfc6:	4b5c      	ldr	r3, [pc, #368]	@ (800c138 <HAL_RCC_OscConfig+0x470>)
 800bfc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bfca:	4a5b      	ldr	r2, [pc, #364]	@ (800c138 <HAL_RCC_OscConfig+0x470>)
 800bfcc:	f043 0301 	orr.w	r3, r3, #1
 800bfd0:	6713      	str	r3, [r2, #112]	@ 0x70
 800bfd2:	e00b      	b.n	800bfec <HAL_RCC_OscConfig+0x324>
 800bfd4:	4b58      	ldr	r3, [pc, #352]	@ (800c138 <HAL_RCC_OscConfig+0x470>)
 800bfd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bfd8:	4a57      	ldr	r2, [pc, #348]	@ (800c138 <HAL_RCC_OscConfig+0x470>)
 800bfda:	f023 0301 	bic.w	r3, r3, #1
 800bfde:	6713      	str	r3, [r2, #112]	@ 0x70
 800bfe0:	4b55      	ldr	r3, [pc, #340]	@ (800c138 <HAL_RCC_OscConfig+0x470>)
 800bfe2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bfe4:	4a54      	ldr	r2, [pc, #336]	@ (800c138 <HAL_RCC_OscConfig+0x470>)
 800bfe6:	f023 0304 	bic.w	r3, r3, #4
 800bfea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	689b      	ldr	r3, [r3, #8]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d015      	beq.n	800c020 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bff4:	f7fe fb86 	bl	800a704 <HAL_GetTick>
 800bff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bffa:	e00a      	b.n	800c012 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bffc:	f7fe fb82 	bl	800a704 <HAL_GetTick>
 800c000:	4602      	mov	r2, r0
 800c002:	693b      	ldr	r3, [r7, #16]
 800c004:	1ad3      	subs	r3, r2, r3
 800c006:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c00a:	4293      	cmp	r3, r2
 800c00c:	d901      	bls.n	800c012 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800c00e:	2303      	movs	r3, #3
 800c010:	e0cb      	b.n	800c1aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c012:	4b49      	ldr	r3, [pc, #292]	@ (800c138 <HAL_RCC_OscConfig+0x470>)
 800c014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c016:	f003 0302 	and.w	r3, r3, #2
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d0ee      	beq.n	800bffc <HAL_RCC_OscConfig+0x334>
 800c01e:	e014      	b.n	800c04a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c020:	f7fe fb70 	bl	800a704 <HAL_GetTick>
 800c024:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c026:	e00a      	b.n	800c03e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c028:	f7fe fb6c 	bl	800a704 <HAL_GetTick>
 800c02c:	4602      	mov	r2, r0
 800c02e:	693b      	ldr	r3, [r7, #16]
 800c030:	1ad3      	subs	r3, r2, r3
 800c032:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c036:	4293      	cmp	r3, r2
 800c038:	d901      	bls.n	800c03e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800c03a:	2303      	movs	r3, #3
 800c03c:	e0b5      	b.n	800c1aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c03e:	4b3e      	ldr	r3, [pc, #248]	@ (800c138 <HAL_RCC_OscConfig+0x470>)
 800c040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c042:	f003 0302 	and.w	r3, r3, #2
 800c046:	2b00      	cmp	r3, #0
 800c048:	d1ee      	bne.n	800c028 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c04a:	7dfb      	ldrb	r3, [r7, #23]
 800c04c:	2b01      	cmp	r3, #1
 800c04e:	d105      	bne.n	800c05c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c050:	4b39      	ldr	r3, [pc, #228]	@ (800c138 <HAL_RCC_OscConfig+0x470>)
 800c052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c054:	4a38      	ldr	r2, [pc, #224]	@ (800c138 <HAL_RCC_OscConfig+0x470>)
 800c056:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c05a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	699b      	ldr	r3, [r3, #24]
 800c060:	2b00      	cmp	r3, #0
 800c062:	f000 80a1 	beq.w	800c1a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c066:	4b34      	ldr	r3, [pc, #208]	@ (800c138 <HAL_RCC_OscConfig+0x470>)
 800c068:	689b      	ldr	r3, [r3, #8]
 800c06a:	f003 030c 	and.w	r3, r3, #12
 800c06e:	2b08      	cmp	r3, #8
 800c070:	d05c      	beq.n	800c12c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	699b      	ldr	r3, [r3, #24]
 800c076:	2b02      	cmp	r3, #2
 800c078:	d141      	bne.n	800c0fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c07a:	4b31      	ldr	r3, [pc, #196]	@ (800c140 <HAL_RCC_OscConfig+0x478>)
 800c07c:	2200      	movs	r2, #0
 800c07e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c080:	f7fe fb40 	bl	800a704 <HAL_GetTick>
 800c084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c086:	e008      	b.n	800c09a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c088:	f7fe fb3c 	bl	800a704 <HAL_GetTick>
 800c08c:	4602      	mov	r2, r0
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	1ad3      	subs	r3, r2, r3
 800c092:	2b02      	cmp	r3, #2
 800c094:	d901      	bls.n	800c09a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800c096:	2303      	movs	r3, #3
 800c098:	e087      	b.n	800c1aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c09a:	4b27      	ldr	r3, [pc, #156]	@ (800c138 <HAL_RCC_OscConfig+0x470>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d1f0      	bne.n	800c088 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	69da      	ldr	r2, [r3, #28]
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6a1b      	ldr	r3, [r3, #32]
 800c0ae:	431a      	orrs	r2, r3
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0b4:	019b      	lsls	r3, r3, #6
 800c0b6:	431a      	orrs	r2, r3
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0bc:	085b      	lsrs	r3, r3, #1
 800c0be:	3b01      	subs	r3, #1
 800c0c0:	041b      	lsls	r3, r3, #16
 800c0c2:	431a      	orrs	r2, r3
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0c8:	061b      	lsls	r3, r3, #24
 800c0ca:	491b      	ldr	r1, [pc, #108]	@ (800c138 <HAL_RCC_OscConfig+0x470>)
 800c0cc:	4313      	orrs	r3, r2
 800c0ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c0d0:	4b1b      	ldr	r3, [pc, #108]	@ (800c140 <HAL_RCC_OscConfig+0x478>)
 800c0d2:	2201      	movs	r2, #1
 800c0d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c0d6:	f7fe fb15 	bl	800a704 <HAL_GetTick>
 800c0da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c0dc:	e008      	b.n	800c0f0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c0de:	f7fe fb11 	bl	800a704 <HAL_GetTick>
 800c0e2:	4602      	mov	r2, r0
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	1ad3      	subs	r3, r2, r3
 800c0e8:	2b02      	cmp	r3, #2
 800c0ea:	d901      	bls.n	800c0f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800c0ec:	2303      	movs	r3, #3
 800c0ee:	e05c      	b.n	800c1aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c0f0:	4b11      	ldr	r3, [pc, #68]	@ (800c138 <HAL_RCC_OscConfig+0x470>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d0f0      	beq.n	800c0de <HAL_RCC_OscConfig+0x416>
 800c0fc:	e054      	b.n	800c1a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c0fe:	4b10      	ldr	r3, [pc, #64]	@ (800c140 <HAL_RCC_OscConfig+0x478>)
 800c100:	2200      	movs	r2, #0
 800c102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c104:	f7fe fafe 	bl	800a704 <HAL_GetTick>
 800c108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c10a:	e008      	b.n	800c11e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c10c:	f7fe fafa 	bl	800a704 <HAL_GetTick>
 800c110:	4602      	mov	r2, r0
 800c112:	693b      	ldr	r3, [r7, #16]
 800c114:	1ad3      	subs	r3, r2, r3
 800c116:	2b02      	cmp	r3, #2
 800c118:	d901      	bls.n	800c11e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800c11a:	2303      	movs	r3, #3
 800c11c:	e045      	b.n	800c1aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c11e:	4b06      	ldr	r3, [pc, #24]	@ (800c138 <HAL_RCC_OscConfig+0x470>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c126:	2b00      	cmp	r3, #0
 800c128:	d1f0      	bne.n	800c10c <HAL_RCC_OscConfig+0x444>
 800c12a:	e03d      	b.n	800c1a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	699b      	ldr	r3, [r3, #24]
 800c130:	2b01      	cmp	r3, #1
 800c132:	d107      	bne.n	800c144 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800c134:	2301      	movs	r3, #1
 800c136:	e038      	b.n	800c1aa <HAL_RCC_OscConfig+0x4e2>
 800c138:	40023800 	.word	0x40023800
 800c13c:	40007000 	.word	0x40007000
 800c140:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c144:	4b1b      	ldr	r3, [pc, #108]	@ (800c1b4 <HAL_RCC_OscConfig+0x4ec>)
 800c146:	685b      	ldr	r3, [r3, #4]
 800c148:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	699b      	ldr	r3, [r3, #24]
 800c14e:	2b01      	cmp	r3, #1
 800c150:	d028      	beq.n	800c1a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c15c:	429a      	cmp	r2, r3
 800c15e:	d121      	bne.n	800c1a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c16a:	429a      	cmp	r2, r3
 800c16c:	d11a      	bne.n	800c1a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c16e:	68fa      	ldr	r2, [r7, #12]
 800c170:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800c174:	4013      	ands	r3, r2
 800c176:	687a      	ldr	r2, [r7, #4]
 800c178:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800c17a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c17c:	4293      	cmp	r3, r2
 800c17e:	d111      	bne.n	800c1a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c18a:	085b      	lsrs	r3, r3, #1
 800c18c:	3b01      	subs	r3, #1
 800c18e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c190:	429a      	cmp	r2, r3
 800c192:	d107      	bne.n	800c1a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c19e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	d001      	beq.n	800c1a8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	e000      	b.n	800c1aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800c1a8:	2300      	movs	r3, #0
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3718      	adds	r7, #24
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}
 800c1b2:	bf00      	nop
 800c1b4:	40023800 	.word	0x40023800

0800c1b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b084      	sub	sp, #16
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
 800c1c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d101      	bne.n	800c1cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	e0cc      	b.n	800c366 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c1cc:	4b68      	ldr	r3, [pc, #416]	@ (800c370 <HAL_RCC_ClockConfig+0x1b8>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	f003 0307 	and.w	r3, r3, #7
 800c1d4:	683a      	ldr	r2, [r7, #0]
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	d90c      	bls.n	800c1f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c1da:	4b65      	ldr	r3, [pc, #404]	@ (800c370 <HAL_RCC_ClockConfig+0x1b8>)
 800c1dc:	683a      	ldr	r2, [r7, #0]
 800c1de:	b2d2      	uxtb	r2, r2
 800c1e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c1e2:	4b63      	ldr	r3, [pc, #396]	@ (800c370 <HAL_RCC_ClockConfig+0x1b8>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f003 0307 	and.w	r3, r3, #7
 800c1ea:	683a      	ldr	r2, [r7, #0]
 800c1ec:	429a      	cmp	r2, r3
 800c1ee:	d001      	beq.n	800c1f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	e0b8      	b.n	800c366 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	f003 0302 	and.w	r3, r3, #2
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d020      	beq.n	800c242 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	f003 0304 	and.w	r3, r3, #4
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d005      	beq.n	800c218 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c20c:	4b59      	ldr	r3, [pc, #356]	@ (800c374 <HAL_RCC_ClockConfig+0x1bc>)
 800c20e:	689b      	ldr	r3, [r3, #8]
 800c210:	4a58      	ldr	r2, [pc, #352]	@ (800c374 <HAL_RCC_ClockConfig+0x1bc>)
 800c212:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800c216:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	f003 0308 	and.w	r3, r3, #8
 800c220:	2b00      	cmp	r3, #0
 800c222:	d005      	beq.n	800c230 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c224:	4b53      	ldr	r3, [pc, #332]	@ (800c374 <HAL_RCC_ClockConfig+0x1bc>)
 800c226:	689b      	ldr	r3, [r3, #8]
 800c228:	4a52      	ldr	r2, [pc, #328]	@ (800c374 <HAL_RCC_ClockConfig+0x1bc>)
 800c22a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800c22e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c230:	4b50      	ldr	r3, [pc, #320]	@ (800c374 <HAL_RCC_ClockConfig+0x1bc>)
 800c232:	689b      	ldr	r3, [r3, #8]
 800c234:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	689b      	ldr	r3, [r3, #8]
 800c23c:	494d      	ldr	r1, [pc, #308]	@ (800c374 <HAL_RCC_ClockConfig+0x1bc>)
 800c23e:	4313      	orrs	r3, r2
 800c240:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f003 0301 	and.w	r3, r3, #1
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d044      	beq.n	800c2d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	685b      	ldr	r3, [r3, #4]
 800c252:	2b01      	cmp	r3, #1
 800c254:	d107      	bne.n	800c266 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c256:	4b47      	ldr	r3, [pc, #284]	@ (800c374 <HAL_RCC_ClockConfig+0x1bc>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d119      	bne.n	800c296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c262:	2301      	movs	r3, #1
 800c264:	e07f      	b.n	800c366 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	685b      	ldr	r3, [r3, #4]
 800c26a:	2b02      	cmp	r3, #2
 800c26c:	d003      	beq.n	800c276 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c272:	2b03      	cmp	r3, #3
 800c274:	d107      	bne.n	800c286 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c276:	4b3f      	ldr	r3, [pc, #252]	@ (800c374 <HAL_RCC_ClockConfig+0x1bc>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d109      	bne.n	800c296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c282:	2301      	movs	r3, #1
 800c284:	e06f      	b.n	800c366 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c286:	4b3b      	ldr	r3, [pc, #236]	@ (800c374 <HAL_RCC_ClockConfig+0x1bc>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	f003 0302 	and.w	r3, r3, #2
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d101      	bne.n	800c296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c292:	2301      	movs	r3, #1
 800c294:	e067      	b.n	800c366 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c296:	4b37      	ldr	r3, [pc, #220]	@ (800c374 <HAL_RCC_ClockConfig+0x1bc>)
 800c298:	689b      	ldr	r3, [r3, #8]
 800c29a:	f023 0203 	bic.w	r2, r3, #3
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	685b      	ldr	r3, [r3, #4]
 800c2a2:	4934      	ldr	r1, [pc, #208]	@ (800c374 <HAL_RCC_ClockConfig+0x1bc>)
 800c2a4:	4313      	orrs	r3, r2
 800c2a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c2a8:	f7fe fa2c 	bl	800a704 <HAL_GetTick>
 800c2ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c2ae:	e00a      	b.n	800c2c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c2b0:	f7fe fa28 	bl	800a704 <HAL_GetTick>
 800c2b4:	4602      	mov	r2, r0
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	1ad3      	subs	r3, r2, r3
 800c2ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c2be:	4293      	cmp	r3, r2
 800c2c0:	d901      	bls.n	800c2c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c2c2:	2303      	movs	r3, #3
 800c2c4:	e04f      	b.n	800c366 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c2c6:	4b2b      	ldr	r3, [pc, #172]	@ (800c374 <HAL_RCC_ClockConfig+0x1bc>)
 800c2c8:	689b      	ldr	r3, [r3, #8]
 800c2ca:	f003 020c 	and.w	r2, r3, #12
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	685b      	ldr	r3, [r3, #4]
 800c2d2:	009b      	lsls	r3, r3, #2
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	d1eb      	bne.n	800c2b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c2d8:	4b25      	ldr	r3, [pc, #148]	@ (800c370 <HAL_RCC_ClockConfig+0x1b8>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	f003 0307 	and.w	r3, r3, #7
 800c2e0:	683a      	ldr	r2, [r7, #0]
 800c2e2:	429a      	cmp	r2, r3
 800c2e4:	d20c      	bcs.n	800c300 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c2e6:	4b22      	ldr	r3, [pc, #136]	@ (800c370 <HAL_RCC_ClockConfig+0x1b8>)
 800c2e8:	683a      	ldr	r2, [r7, #0]
 800c2ea:	b2d2      	uxtb	r2, r2
 800c2ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c2ee:	4b20      	ldr	r3, [pc, #128]	@ (800c370 <HAL_RCC_ClockConfig+0x1b8>)
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	f003 0307 	and.w	r3, r3, #7
 800c2f6:	683a      	ldr	r2, [r7, #0]
 800c2f8:	429a      	cmp	r2, r3
 800c2fa:	d001      	beq.n	800c300 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	e032      	b.n	800c366 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	f003 0304 	and.w	r3, r3, #4
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d008      	beq.n	800c31e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c30c:	4b19      	ldr	r3, [pc, #100]	@ (800c374 <HAL_RCC_ClockConfig+0x1bc>)
 800c30e:	689b      	ldr	r3, [r3, #8]
 800c310:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	68db      	ldr	r3, [r3, #12]
 800c318:	4916      	ldr	r1, [pc, #88]	@ (800c374 <HAL_RCC_ClockConfig+0x1bc>)
 800c31a:	4313      	orrs	r3, r2
 800c31c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f003 0308 	and.w	r3, r3, #8
 800c326:	2b00      	cmp	r3, #0
 800c328:	d009      	beq.n	800c33e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c32a:	4b12      	ldr	r3, [pc, #72]	@ (800c374 <HAL_RCC_ClockConfig+0x1bc>)
 800c32c:	689b      	ldr	r3, [r3, #8]
 800c32e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	691b      	ldr	r3, [r3, #16]
 800c336:	00db      	lsls	r3, r3, #3
 800c338:	490e      	ldr	r1, [pc, #56]	@ (800c374 <HAL_RCC_ClockConfig+0x1bc>)
 800c33a:	4313      	orrs	r3, r2
 800c33c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c33e:	f000 f821 	bl	800c384 <HAL_RCC_GetSysClockFreq>
 800c342:	4602      	mov	r2, r0
 800c344:	4b0b      	ldr	r3, [pc, #44]	@ (800c374 <HAL_RCC_ClockConfig+0x1bc>)
 800c346:	689b      	ldr	r3, [r3, #8]
 800c348:	091b      	lsrs	r3, r3, #4
 800c34a:	f003 030f 	and.w	r3, r3, #15
 800c34e:	490a      	ldr	r1, [pc, #40]	@ (800c378 <HAL_RCC_ClockConfig+0x1c0>)
 800c350:	5ccb      	ldrb	r3, [r1, r3]
 800c352:	fa22 f303 	lsr.w	r3, r2, r3
 800c356:	4a09      	ldr	r2, [pc, #36]	@ (800c37c <HAL_RCC_ClockConfig+0x1c4>)
 800c358:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800c35a:	4b09      	ldr	r3, [pc, #36]	@ (800c380 <HAL_RCC_ClockConfig+0x1c8>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	4618      	mov	r0, r3
 800c360:	f7fe f858 	bl	800a414 <HAL_InitTick>

  return HAL_OK;
 800c364:	2300      	movs	r3, #0
}
 800c366:	4618      	mov	r0, r3
 800c368:	3710      	adds	r7, #16
 800c36a:	46bd      	mov	sp, r7
 800c36c:	bd80      	pop	{r7, pc}
 800c36e:	bf00      	nop
 800c370:	40023c00 	.word	0x40023c00
 800c374:	40023800 	.word	0x40023800
 800c378:	080141cc 	.word	0x080141cc
 800c37c:	20000154 	.word	0x20000154
 800c380:	20000158 	.word	0x20000158

0800c384 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c384:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c388:	b094      	sub	sp, #80	@ 0x50
 800c38a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800c38c:	2300      	movs	r3, #0
 800c38e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800c390:	2300      	movs	r3, #0
 800c392:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800c394:	2300      	movs	r3, #0
 800c396:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800c398:	2300      	movs	r3, #0
 800c39a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c39c:	4b79      	ldr	r3, [pc, #484]	@ (800c584 <HAL_RCC_GetSysClockFreq+0x200>)
 800c39e:	689b      	ldr	r3, [r3, #8]
 800c3a0:	f003 030c 	and.w	r3, r3, #12
 800c3a4:	2b08      	cmp	r3, #8
 800c3a6:	d00d      	beq.n	800c3c4 <HAL_RCC_GetSysClockFreq+0x40>
 800c3a8:	2b08      	cmp	r3, #8
 800c3aa:	f200 80e1 	bhi.w	800c570 <HAL_RCC_GetSysClockFreq+0x1ec>
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d002      	beq.n	800c3b8 <HAL_RCC_GetSysClockFreq+0x34>
 800c3b2:	2b04      	cmp	r3, #4
 800c3b4:	d003      	beq.n	800c3be <HAL_RCC_GetSysClockFreq+0x3a>
 800c3b6:	e0db      	b.n	800c570 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c3b8:	4b73      	ldr	r3, [pc, #460]	@ (800c588 <HAL_RCC_GetSysClockFreq+0x204>)
 800c3ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800c3bc:	e0db      	b.n	800c576 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c3be:	4b73      	ldr	r3, [pc, #460]	@ (800c58c <HAL_RCC_GetSysClockFreq+0x208>)
 800c3c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800c3c2:	e0d8      	b.n	800c576 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c3c4:	4b6f      	ldr	r3, [pc, #444]	@ (800c584 <HAL_RCC_GetSysClockFreq+0x200>)
 800c3c6:	685b      	ldr	r3, [r3, #4]
 800c3c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c3cc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c3ce:	4b6d      	ldr	r3, [pc, #436]	@ (800c584 <HAL_RCC_GetSysClockFreq+0x200>)
 800c3d0:	685b      	ldr	r3, [r3, #4]
 800c3d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d063      	beq.n	800c4a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c3da:	4b6a      	ldr	r3, [pc, #424]	@ (800c584 <HAL_RCC_GetSysClockFreq+0x200>)
 800c3dc:	685b      	ldr	r3, [r3, #4]
 800c3de:	099b      	lsrs	r3, r3, #6
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c3e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800c3e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3ec:	633b      	str	r3, [r7, #48]	@ 0x30
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c3f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800c3f6:	4622      	mov	r2, r4
 800c3f8:	462b      	mov	r3, r5
 800c3fa:	f04f 0000 	mov.w	r0, #0
 800c3fe:	f04f 0100 	mov.w	r1, #0
 800c402:	0159      	lsls	r1, r3, #5
 800c404:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c408:	0150      	lsls	r0, r2, #5
 800c40a:	4602      	mov	r2, r0
 800c40c:	460b      	mov	r3, r1
 800c40e:	4621      	mov	r1, r4
 800c410:	1a51      	subs	r1, r2, r1
 800c412:	6139      	str	r1, [r7, #16]
 800c414:	4629      	mov	r1, r5
 800c416:	eb63 0301 	sbc.w	r3, r3, r1
 800c41a:	617b      	str	r3, [r7, #20]
 800c41c:	f04f 0200 	mov.w	r2, #0
 800c420:	f04f 0300 	mov.w	r3, #0
 800c424:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c428:	4659      	mov	r1, fp
 800c42a:	018b      	lsls	r3, r1, #6
 800c42c:	4651      	mov	r1, sl
 800c42e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c432:	4651      	mov	r1, sl
 800c434:	018a      	lsls	r2, r1, #6
 800c436:	4651      	mov	r1, sl
 800c438:	ebb2 0801 	subs.w	r8, r2, r1
 800c43c:	4659      	mov	r1, fp
 800c43e:	eb63 0901 	sbc.w	r9, r3, r1
 800c442:	f04f 0200 	mov.w	r2, #0
 800c446:	f04f 0300 	mov.w	r3, #0
 800c44a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c44e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c452:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c456:	4690      	mov	r8, r2
 800c458:	4699      	mov	r9, r3
 800c45a:	4623      	mov	r3, r4
 800c45c:	eb18 0303 	adds.w	r3, r8, r3
 800c460:	60bb      	str	r3, [r7, #8]
 800c462:	462b      	mov	r3, r5
 800c464:	eb49 0303 	adc.w	r3, r9, r3
 800c468:	60fb      	str	r3, [r7, #12]
 800c46a:	f04f 0200 	mov.w	r2, #0
 800c46e:	f04f 0300 	mov.w	r3, #0
 800c472:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800c476:	4629      	mov	r1, r5
 800c478:	024b      	lsls	r3, r1, #9
 800c47a:	4621      	mov	r1, r4
 800c47c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800c480:	4621      	mov	r1, r4
 800c482:	024a      	lsls	r2, r1, #9
 800c484:	4610      	mov	r0, r2
 800c486:	4619      	mov	r1, r3
 800c488:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c48a:	2200      	movs	r2, #0
 800c48c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c48e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c490:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800c494:	f7f4 fbf0 	bl	8000c78 <__aeabi_uldivmod>
 800c498:	4602      	mov	r2, r0
 800c49a:	460b      	mov	r3, r1
 800c49c:	4613      	mov	r3, r2
 800c49e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c4a0:	e058      	b.n	800c554 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c4a2:	4b38      	ldr	r3, [pc, #224]	@ (800c584 <HAL_RCC_GetSysClockFreq+0x200>)
 800c4a4:	685b      	ldr	r3, [r3, #4]
 800c4a6:	099b      	lsrs	r3, r3, #6
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	4611      	mov	r1, r2
 800c4ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800c4b2:	623b      	str	r3, [r7, #32]
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	627b      	str	r3, [r7, #36]	@ 0x24
 800c4b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800c4bc:	4642      	mov	r2, r8
 800c4be:	464b      	mov	r3, r9
 800c4c0:	f04f 0000 	mov.w	r0, #0
 800c4c4:	f04f 0100 	mov.w	r1, #0
 800c4c8:	0159      	lsls	r1, r3, #5
 800c4ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c4ce:	0150      	lsls	r0, r2, #5
 800c4d0:	4602      	mov	r2, r0
 800c4d2:	460b      	mov	r3, r1
 800c4d4:	4641      	mov	r1, r8
 800c4d6:	ebb2 0a01 	subs.w	sl, r2, r1
 800c4da:	4649      	mov	r1, r9
 800c4dc:	eb63 0b01 	sbc.w	fp, r3, r1
 800c4e0:	f04f 0200 	mov.w	r2, #0
 800c4e4:	f04f 0300 	mov.w	r3, #0
 800c4e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800c4ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800c4f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800c4f4:	ebb2 040a 	subs.w	r4, r2, sl
 800c4f8:	eb63 050b 	sbc.w	r5, r3, fp
 800c4fc:	f04f 0200 	mov.w	r2, #0
 800c500:	f04f 0300 	mov.w	r3, #0
 800c504:	00eb      	lsls	r3, r5, #3
 800c506:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c50a:	00e2      	lsls	r2, r4, #3
 800c50c:	4614      	mov	r4, r2
 800c50e:	461d      	mov	r5, r3
 800c510:	4643      	mov	r3, r8
 800c512:	18e3      	adds	r3, r4, r3
 800c514:	603b      	str	r3, [r7, #0]
 800c516:	464b      	mov	r3, r9
 800c518:	eb45 0303 	adc.w	r3, r5, r3
 800c51c:	607b      	str	r3, [r7, #4]
 800c51e:	f04f 0200 	mov.w	r2, #0
 800c522:	f04f 0300 	mov.w	r3, #0
 800c526:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c52a:	4629      	mov	r1, r5
 800c52c:	028b      	lsls	r3, r1, #10
 800c52e:	4621      	mov	r1, r4
 800c530:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c534:	4621      	mov	r1, r4
 800c536:	028a      	lsls	r2, r1, #10
 800c538:	4610      	mov	r0, r2
 800c53a:	4619      	mov	r1, r3
 800c53c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c53e:	2200      	movs	r2, #0
 800c540:	61bb      	str	r3, [r7, #24]
 800c542:	61fa      	str	r2, [r7, #28]
 800c544:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c548:	f7f4 fb96 	bl	8000c78 <__aeabi_uldivmod>
 800c54c:	4602      	mov	r2, r0
 800c54e:	460b      	mov	r3, r1
 800c550:	4613      	mov	r3, r2
 800c552:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800c554:	4b0b      	ldr	r3, [pc, #44]	@ (800c584 <HAL_RCC_GetSysClockFreq+0x200>)
 800c556:	685b      	ldr	r3, [r3, #4]
 800c558:	0c1b      	lsrs	r3, r3, #16
 800c55a:	f003 0303 	and.w	r3, r3, #3
 800c55e:	3301      	adds	r3, #1
 800c560:	005b      	lsls	r3, r3, #1
 800c562:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800c564:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c566:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c568:	fbb2 f3f3 	udiv	r3, r2, r3
 800c56c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800c56e:	e002      	b.n	800c576 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c570:	4b05      	ldr	r3, [pc, #20]	@ (800c588 <HAL_RCC_GetSysClockFreq+0x204>)
 800c572:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800c574:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c576:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800c578:	4618      	mov	r0, r3
 800c57a:	3750      	adds	r7, #80	@ 0x50
 800c57c:	46bd      	mov	sp, r7
 800c57e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c582:	bf00      	nop
 800c584:	40023800 	.word	0x40023800
 800c588:	00f42400 	.word	0x00f42400
 800c58c:	007a1200 	.word	0x007a1200

0800c590 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c590:	b480      	push	{r7}
 800c592:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c594:	4b03      	ldr	r3, [pc, #12]	@ (800c5a4 <HAL_RCC_GetHCLKFreq+0x14>)
 800c596:	681b      	ldr	r3, [r3, #0]
}
 800c598:	4618      	mov	r0, r3
 800c59a:	46bd      	mov	sp, r7
 800c59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a0:	4770      	bx	lr
 800c5a2:	bf00      	nop
 800c5a4:	20000154 	.word	0x20000154

0800c5a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c5ac:	f7ff fff0 	bl	800c590 <HAL_RCC_GetHCLKFreq>
 800c5b0:	4602      	mov	r2, r0
 800c5b2:	4b05      	ldr	r3, [pc, #20]	@ (800c5c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c5b4:	689b      	ldr	r3, [r3, #8]
 800c5b6:	0a9b      	lsrs	r3, r3, #10
 800c5b8:	f003 0307 	and.w	r3, r3, #7
 800c5bc:	4903      	ldr	r1, [pc, #12]	@ (800c5cc <HAL_RCC_GetPCLK1Freq+0x24>)
 800c5be:	5ccb      	ldrb	r3, [r1, r3]
 800c5c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	bd80      	pop	{r7, pc}
 800c5c8:	40023800 	.word	0x40023800
 800c5cc:	080141dc 	.word	0x080141dc

0800c5d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c5d4:	f7ff ffdc 	bl	800c590 <HAL_RCC_GetHCLKFreq>
 800c5d8:	4602      	mov	r2, r0
 800c5da:	4b05      	ldr	r3, [pc, #20]	@ (800c5f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c5dc:	689b      	ldr	r3, [r3, #8]
 800c5de:	0b5b      	lsrs	r3, r3, #13
 800c5e0:	f003 0307 	and.w	r3, r3, #7
 800c5e4:	4903      	ldr	r1, [pc, #12]	@ (800c5f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c5e6:	5ccb      	ldrb	r3, [r1, r3]
 800c5e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	bd80      	pop	{r7, pc}
 800c5f0:	40023800 	.word	0x40023800
 800c5f4:	080141dc 	.word	0x080141dc

0800c5f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800c5f8:	b480      	push	{r7}
 800c5fa:	b083      	sub	sp, #12
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
 800c600:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	220f      	movs	r2, #15
 800c606:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800c608:	4b12      	ldr	r3, [pc, #72]	@ (800c654 <HAL_RCC_GetClockConfig+0x5c>)
 800c60a:	689b      	ldr	r3, [r3, #8]
 800c60c:	f003 0203 	and.w	r2, r3, #3
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800c614:	4b0f      	ldr	r3, [pc, #60]	@ (800c654 <HAL_RCC_GetClockConfig+0x5c>)
 800c616:	689b      	ldr	r3, [r3, #8]
 800c618:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800c620:	4b0c      	ldr	r3, [pc, #48]	@ (800c654 <HAL_RCC_GetClockConfig+0x5c>)
 800c622:	689b      	ldr	r3, [r3, #8]
 800c624:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800c62c:	4b09      	ldr	r3, [pc, #36]	@ (800c654 <HAL_RCC_GetClockConfig+0x5c>)
 800c62e:	689b      	ldr	r3, [r3, #8]
 800c630:	08db      	lsrs	r3, r3, #3
 800c632:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800c63a:	4b07      	ldr	r3, [pc, #28]	@ (800c658 <HAL_RCC_GetClockConfig+0x60>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	f003 0207 	and.w	r2, r3, #7
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	601a      	str	r2, [r3, #0]
}
 800c646:	bf00      	nop
 800c648:	370c      	adds	r7, #12
 800c64a:	46bd      	mov	sp, r7
 800c64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c650:	4770      	bx	lr
 800c652:	bf00      	nop
 800c654:	40023800 	.word	0x40023800
 800c658:	40023c00 	.word	0x40023c00

0800c65c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b086      	sub	sp, #24
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c664:	2300      	movs	r3, #0
 800c666:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800c668:	2300      	movs	r3, #0
 800c66a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	f003 0301 	and.w	r3, r3, #1
 800c674:	2b00      	cmp	r3, #0
 800c676:	d105      	bne.n	800c684 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c680:	2b00      	cmp	r3, #0
 800c682:	d035      	beq.n	800c6f0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c684:	4b62      	ldr	r3, [pc, #392]	@ (800c810 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800c686:	2200      	movs	r2, #0
 800c688:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c68a:	f7fe f83b 	bl	800a704 <HAL_GetTick>
 800c68e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c690:	e008      	b.n	800c6a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c692:	f7fe f837 	bl	800a704 <HAL_GetTick>
 800c696:	4602      	mov	r2, r0
 800c698:	697b      	ldr	r3, [r7, #20]
 800c69a:	1ad3      	subs	r3, r2, r3
 800c69c:	2b02      	cmp	r3, #2
 800c69e:	d901      	bls.n	800c6a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c6a0:	2303      	movs	r3, #3
 800c6a2:	e0b0      	b.n	800c806 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c6a4:	4b5b      	ldr	r3, [pc, #364]	@ (800c814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d1f0      	bne.n	800c692 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	685b      	ldr	r3, [r3, #4]
 800c6b4:	019a      	lsls	r2, r3, #6
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	689b      	ldr	r3, [r3, #8]
 800c6ba:	071b      	lsls	r3, r3, #28
 800c6bc:	4955      	ldr	r1, [pc, #340]	@ (800c814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c6be:	4313      	orrs	r3, r2
 800c6c0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c6c4:	4b52      	ldr	r3, [pc, #328]	@ (800c810 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800c6c6:	2201      	movs	r2, #1
 800c6c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c6ca:	f7fe f81b 	bl	800a704 <HAL_GetTick>
 800c6ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c6d0:	e008      	b.n	800c6e4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c6d2:	f7fe f817 	bl	800a704 <HAL_GetTick>
 800c6d6:	4602      	mov	r2, r0
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	1ad3      	subs	r3, r2, r3
 800c6dc:	2b02      	cmp	r3, #2
 800c6de:	d901      	bls.n	800c6e4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c6e0:	2303      	movs	r3, #3
 800c6e2:	e090      	b.n	800c806 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c6e4:	4b4b      	ldr	r3, [pc, #300]	@ (800c814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d0f0      	beq.n	800c6d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	f003 0302 	and.w	r3, r3, #2
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	f000 8083 	beq.w	800c804 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c6fe:	2300      	movs	r3, #0
 800c700:	60fb      	str	r3, [r7, #12]
 800c702:	4b44      	ldr	r3, [pc, #272]	@ (800c814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c706:	4a43      	ldr	r2, [pc, #268]	@ (800c814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c708:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c70c:	6413      	str	r3, [r2, #64]	@ 0x40
 800c70e:	4b41      	ldr	r3, [pc, #260]	@ (800c814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c712:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c716:	60fb      	str	r3, [r7, #12]
 800c718:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800c71a:	4b3f      	ldr	r3, [pc, #252]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	4a3e      	ldr	r2, [pc, #248]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800c720:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c724:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c726:	f7fd ffed 	bl	800a704 <HAL_GetTick>
 800c72a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800c72c:	e008      	b.n	800c740 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c72e:	f7fd ffe9 	bl	800a704 <HAL_GetTick>
 800c732:	4602      	mov	r2, r0
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	1ad3      	subs	r3, r2, r3
 800c738:	2b02      	cmp	r3, #2
 800c73a:	d901      	bls.n	800c740 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800c73c:	2303      	movs	r3, #3
 800c73e:	e062      	b.n	800c806 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800c740:	4b35      	ldr	r3, [pc, #212]	@ (800c818 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d0f0      	beq.n	800c72e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c74c:	4b31      	ldr	r3, [pc, #196]	@ (800c814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c74e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c750:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c754:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c756:	693b      	ldr	r3, [r7, #16]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d02f      	beq.n	800c7bc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	68db      	ldr	r3, [r3, #12]
 800c760:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c764:	693a      	ldr	r2, [r7, #16]
 800c766:	429a      	cmp	r2, r3
 800c768:	d028      	beq.n	800c7bc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c76a:	4b2a      	ldr	r3, [pc, #168]	@ (800c814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c76c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c76e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c772:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c774:	4b29      	ldr	r3, [pc, #164]	@ (800c81c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800c776:	2201      	movs	r2, #1
 800c778:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c77a:	4b28      	ldr	r3, [pc, #160]	@ (800c81c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800c77c:	2200      	movs	r2, #0
 800c77e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800c780:	4a24      	ldr	r2, [pc, #144]	@ (800c814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c782:	693b      	ldr	r3, [r7, #16]
 800c784:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c786:	4b23      	ldr	r3, [pc, #140]	@ (800c814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c78a:	f003 0301 	and.w	r3, r3, #1
 800c78e:	2b01      	cmp	r3, #1
 800c790:	d114      	bne.n	800c7bc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800c792:	f7fd ffb7 	bl	800a704 <HAL_GetTick>
 800c796:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c798:	e00a      	b.n	800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c79a:	f7fd ffb3 	bl	800a704 <HAL_GetTick>
 800c79e:	4602      	mov	r2, r0
 800c7a0:	697b      	ldr	r3, [r7, #20]
 800c7a2:	1ad3      	subs	r3, r2, r3
 800c7a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c7a8:	4293      	cmp	r3, r2
 800c7aa:	d901      	bls.n	800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800c7ac:	2303      	movs	r3, #3
 800c7ae:	e02a      	b.n	800c806 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c7b0:	4b18      	ldr	r3, [pc, #96]	@ (800c814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c7b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c7b4:	f003 0302 	and.w	r3, r3, #2
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d0ee      	beq.n	800c79a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	68db      	ldr	r3, [r3, #12]
 800c7c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c7c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c7c8:	d10d      	bne.n	800c7e6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800c7ca:	4b12      	ldr	r3, [pc, #72]	@ (800c814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c7cc:	689b      	ldr	r3, [r3, #8]
 800c7ce:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	68db      	ldr	r3, [r3, #12]
 800c7d6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800c7da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c7de:	490d      	ldr	r1, [pc, #52]	@ (800c814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c7e0:	4313      	orrs	r3, r2
 800c7e2:	608b      	str	r3, [r1, #8]
 800c7e4:	e005      	b.n	800c7f2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800c7e6:	4b0b      	ldr	r3, [pc, #44]	@ (800c814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c7e8:	689b      	ldr	r3, [r3, #8]
 800c7ea:	4a0a      	ldr	r2, [pc, #40]	@ (800c814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c7ec:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800c7f0:	6093      	str	r3, [r2, #8]
 800c7f2:	4b08      	ldr	r3, [pc, #32]	@ (800c814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c7f4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	68db      	ldr	r3, [r3, #12]
 800c7fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c7fe:	4905      	ldr	r1, [pc, #20]	@ (800c814 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c800:	4313      	orrs	r3, r2
 800c802:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800c804:	2300      	movs	r3, #0
}
 800c806:	4618      	mov	r0, r3
 800c808:	3718      	adds	r7, #24
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}
 800c80e:	bf00      	nop
 800c810:	42470068 	.word	0x42470068
 800c814:	40023800 	.word	0x40023800
 800c818:	40007000 	.word	0x40007000
 800c81c:	42470e40 	.word	0x42470e40

0800c820 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b084      	sub	sp, #16
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c828:	2301      	movs	r3, #1
 800c82a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d101      	bne.n	800c836 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800c832:	2301      	movs	r3, #1
 800c834:	e073      	b.n	800c91e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	7f5b      	ldrb	r3, [r3, #29]
 800c83a:	b2db      	uxtb	r3, r3
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d105      	bne.n	800c84c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2200      	movs	r2, #0
 800c844:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f7fd fb9a 	bl	8009f80 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2202      	movs	r2, #2
 800c850:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	68db      	ldr	r3, [r3, #12]
 800c858:	f003 0310 	and.w	r3, r3, #16
 800c85c:	2b10      	cmp	r3, #16
 800c85e:	d055      	beq.n	800c90c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	22ca      	movs	r2, #202	@ 0xca
 800c866:	625a      	str	r2, [r3, #36]	@ 0x24
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	2253      	movs	r2, #83	@ 0x53
 800c86e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800c870:	6878      	ldr	r0, [r7, #4]
 800c872:	f000 fb31 	bl	800ced8 <RTC_EnterInitMode>
 800c876:	4603      	mov	r3, r0
 800c878:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800c87a:	7bfb      	ldrb	r3, [r7, #15]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d12c      	bne.n	800c8da <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	689b      	ldr	r3, [r3, #8]
 800c886:	687a      	ldr	r2, [r7, #4]
 800c888:	6812      	ldr	r2, [r2, #0]
 800c88a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c88e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c892:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	6899      	ldr	r1, [r3, #8]
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	685a      	ldr	r2, [r3, #4]
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	691b      	ldr	r3, [r3, #16]
 800c8a2:	431a      	orrs	r2, r3
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	695b      	ldr	r3, [r3, #20]
 800c8a8:	431a      	orrs	r2, r3
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	430a      	orrs	r2, r1
 800c8b0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	687a      	ldr	r2, [r7, #4]
 800c8b8:	68d2      	ldr	r2, [r2, #12]
 800c8ba:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	6919      	ldr	r1, [r3, #16]
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	689b      	ldr	r3, [r3, #8]
 800c8c6:	041a      	lsls	r2, r3, #16
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	430a      	orrs	r2, r1
 800c8ce:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800c8d0:	6878      	ldr	r0, [r7, #4]
 800c8d2:	f000 fb38 	bl	800cf46 <RTC_ExitInitMode>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800c8da:	7bfb      	ldrb	r3, [r7, #15]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d110      	bne.n	800c902 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800c8ee:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	699a      	ldr	r2, [r3, #24]
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	430a      	orrs	r2, r1
 800c900:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	22ff      	movs	r2, #255	@ 0xff
 800c908:	625a      	str	r2, [r3, #36]	@ 0x24
 800c90a:	e001      	b.n	800c910 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800c90c:	2300      	movs	r3, #0
 800c90e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800c910:	7bfb      	ldrb	r3, [r7, #15]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d102      	bne.n	800c91c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2201      	movs	r2, #1
 800c91a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800c91c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c91e:	4618      	mov	r0, r3
 800c920:	3710      	adds	r7, #16
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}

0800c926 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c926:	b590      	push	{r4, r7, lr}
 800c928:	b087      	sub	sp, #28
 800c92a:	af00      	add	r7, sp, #0
 800c92c:	60f8      	str	r0, [r7, #12]
 800c92e:	60b9      	str	r1, [r7, #8]
 800c930:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800c932:	2300      	movs	r3, #0
 800c934:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	7f1b      	ldrb	r3, [r3, #28]
 800c93a:	2b01      	cmp	r3, #1
 800c93c:	d101      	bne.n	800c942 <HAL_RTC_SetTime+0x1c>
 800c93e:	2302      	movs	r3, #2
 800c940:	e087      	b.n	800ca52 <HAL_RTC_SetTime+0x12c>
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	2201      	movs	r2, #1
 800c946:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	2202      	movs	r2, #2
 800c94c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d126      	bne.n	800c9a2 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	689b      	ldr	r3, [r3, #8]
 800c95a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d102      	bne.n	800c968 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c962:	68bb      	ldr	r3, [r7, #8]
 800c964:	2200      	movs	r2, #0
 800c966:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c968:	68bb      	ldr	r3, [r7, #8]
 800c96a:	781b      	ldrb	r3, [r3, #0]
 800c96c:	4618      	mov	r0, r3
 800c96e:	f000 fb0f 	bl	800cf90 <RTC_ByteToBcd2>
 800c972:	4603      	mov	r3, r0
 800c974:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c976:	68bb      	ldr	r3, [r7, #8]
 800c978:	785b      	ldrb	r3, [r3, #1]
 800c97a:	4618      	mov	r0, r3
 800c97c:	f000 fb08 	bl	800cf90 <RTC_ByteToBcd2>
 800c980:	4603      	mov	r3, r0
 800c982:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c984:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	789b      	ldrb	r3, [r3, #2]
 800c98a:	4618      	mov	r0, r3
 800c98c:	f000 fb00 	bl	800cf90 <RTC_ByteToBcd2>
 800c990:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c992:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	78db      	ldrb	r3, [r3, #3]
 800c99a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c99c:	4313      	orrs	r3, r2
 800c99e:	617b      	str	r3, [r7, #20]
 800c9a0:	e018      	b.n	800c9d4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	689b      	ldr	r3, [r3, #8]
 800c9a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d102      	bne.n	800c9b6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800c9b6:	68bb      	ldr	r3, [r7, #8]
 800c9b8:	781b      	ldrb	r3, [r3, #0]
 800c9ba:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	785b      	ldrb	r3, [r3, #1]
 800c9c0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800c9c2:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800c9c4:	68ba      	ldr	r2, [r7, #8]
 800c9c6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800c9c8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c9ca:	68bb      	ldr	r3, [r7, #8]
 800c9cc:	78db      	ldrb	r3, [r3, #3]
 800c9ce:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800c9d0:	4313      	orrs	r3, r2
 800c9d2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	22ca      	movs	r2, #202	@ 0xca
 800c9da:	625a      	str	r2, [r3, #36]	@ 0x24
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	2253      	movs	r2, #83	@ 0x53
 800c9e2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c9e4:	68f8      	ldr	r0, [r7, #12]
 800c9e6:	f000 fa77 	bl	800ced8 <RTC_EnterInitMode>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800c9ee:	7cfb      	ldrb	r3, [r7, #19]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d120      	bne.n	800ca36 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	681a      	ldr	r2, [r3, #0]
 800c9f8:	697b      	ldr	r3, [r7, #20]
 800c9fa:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800c9fe:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800ca02:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	689a      	ldr	r2, [r3, #8]
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800ca12:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	6899      	ldr	r1, [r3, #8]
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	68da      	ldr	r2, [r3, #12]
 800ca1e:	68bb      	ldr	r3, [r7, #8]
 800ca20:	691b      	ldr	r3, [r3, #16]
 800ca22:	431a      	orrs	r2, r3
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	430a      	orrs	r2, r1
 800ca2a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ca2c:	68f8      	ldr	r0, [r7, #12]
 800ca2e:	f000 fa8a 	bl	800cf46 <RTC_ExitInitMode>
 800ca32:	4603      	mov	r3, r0
 800ca34:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800ca36:	7cfb      	ldrb	r3, [r7, #19]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d102      	bne.n	800ca42 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	2201      	movs	r2, #1
 800ca40:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	22ff      	movs	r2, #255	@ 0xff
 800ca48:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	771a      	strb	r2, [r3, #28]

  return status;
 800ca50:	7cfb      	ldrb	r3, [r7, #19]
}
 800ca52:	4618      	mov	r0, r3
 800ca54:	371c      	adds	r7, #28
 800ca56:	46bd      	mov	sp, r7
 800ca58:	bd90      	pop	{r4, r7, pc}

0800ca5a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ca5a:	b590      	push	{r4, r7, lr}
 800ca5c:	b087      	sub	sp, #28
 800ca5e:	af00      	add	r7, sp, #0
 800ca60:	60f8      	str	r0, [r7, #12]
 800ca62:	60b9      	str	r1, [r7, #8]
 800ca64:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800ca66:	2300      	movs	r3, #0
 800ca68:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	7f1b      	ldrb	r3, [r3, #28]
 800ca6e:	2b01      	cmp	r3, #1
 800ca70:	d101      	bne.n	800ca76 <HAL_RTC_SetDate+0x1c>
 800ca72:	2302      	movs	r3, #2
 800ca74:	e071      	b.n	800cb5a <HAL_RTC_SetDate+0x100>
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	2201      	movs	r2, #1
 800ca7a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	2202      	movs	r2, #2
 800ca80:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d10e      	bne.n	800caa6 <HAL_RTC_SetDate+0x4c>
 800ca88:	68bb      	ldr	r3, [r7, #8]
 800ca8a:	785b      	ldrb	r3, [r3, #1]
 800ca8c:	f003 0310 	and.w	r3, r3, #16
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d008      	beq.n	800caa6 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	785b      	ldrb	r3, [r3, #1]
 800ca98:	f023 0310 	bic.w	r3, r3, #16
 800ca9c:	b2db      	uxtb	r3, r3
 800ca9e:	330a      	adds	r3, #10
 800caa0:	b2da      	uxtb	r2, r3
 800caa2:	68bb      	ldr	r3, [r7, #8]
 800caa4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d11c      	bne.n	800cae6 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	78db      	ldrb	r3, [r3, #3]
 800cab0:	4618      	mov	r0, r3
 800cab2:	f000 fa6d 	bl	800cf90 <RTC_ByteToBcd2>
 800cab6:	4603      	mov	r3, r0
 800cab8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800caba:	68bb      	ldr	r3, [r7, #8]
 800cabc:	785b      	ldrb	r3, [r3, #1]
 800cabe:	4618      	mov	r0, r3
 800cac0:	f000 fa66 	bl	800cf90 <RTC_ByteToBcd2>
 800cac4:	4603      	mov	r3, r0
 800cac6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800cac8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800caca:	68bb      	ldr	r3, [r7, #8]
 800cacc:	789b      	ldrb	r3, [r3, #2]
 800cace:	4618      	mov	r0, r3
 800cad0:	f000 fa5e 	bl	800cf90 <RTC_ByteToBcd2>
 800cad4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800cad6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800cada:	68bb      	ldr	r3, [r7, #8]
 800cadc:	781b      	ldrb	r3, [r3, #0]
 800cade:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800cae0:	4313      	orrs	r3, r2
 800cae2:	617b      	str	r3, [r7, #20]
 800cae4:	e00e      	b.n	800cb04 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800cae6:	68bb      	ldr	r3, [r7, #8]
 800cae8:	78db      	ldrb	r3, [r3, #3]
 800caea:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800caec:	68bb      	ldr	r3, [r7, #8]
 800caee:	785b      	ldrb	r3, [r3, #1]
 800caf0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800caf2:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800caf4:	68ba      	ldr	r2, [r7, #8]
 800caf6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800caf8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800cafa:	68bb      	ldr	r3, [r7, #8]
 800cafc:	781b      	ldrb	r3, [r3, #0]
 800cafe:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800cb00:	4313      	orrs	r3, r2
 800cb02:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	22ca      	movs	r2, #202	@ 0xca
 800cb0a:	625a      	str	r2, [r3, #36]	@ 0x24
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	2253      	movs	r2, #83	@ 0x53
 800cb12:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800cb14:	68f8      	ldr	r0, [r7, #12]
 800cb16:	f000 f9df 	bl	800ced8 <RTC_EnterInitMode>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800cb1e:	7cfb      	ldrb	r3, [r7, #19]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d10c      	bne.n	800cb3e <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	681a      	ldr	r2, [r3, #0]
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800cb2e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800cb32:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800cb34:	68f8      	ldr	r0, [r7, #12]
 800cb36:	f000 fa06 	bl	800cf46 <RTC_ExitInitMode>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800cb3e:	7cfb      	ldrb	r3, [r7, #19]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d102      	bne.n	800cb4a <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	2201      	movs	r2, #1
 800cb48:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	22ff      	movs	r2, #255	@ 0xff
 800cb50:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	2200      	movs	r2, #0
 800cb56:	771a      	strb	r2, [r3, #28]

  return status;
 800cb58:	7cfb      	ldrb	r3, [r7, #19]
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	371c      	adds	r7, #28
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd90      	pop	{r4, r7, pc}
	...

0800cb64 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800cb64:	b590      	push	{r4, r7, lr}
 800cb66:	b089      	sub	sp, #36	@ 0x24
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	60f8      	str	r0, [r7, #12]
 800cb6c:	60b9      	str	r1, [r7, #8]
 800cb6e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800cb70:	4b9b      	ldr	r3, [pc, #620]	@ (800cde0 <HAL_RTC_SetAlarm_IT+0x27c>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	4a9b      	ldr	r2, [pc, #620]	@ (800cde4 <HAL_RTC_SetAlarm_IT+0x280>)
 800cb76:	fba2 2303 	umull	r2, r3, r2, r3
 800cb7a:	0adb      	lsrs	r3, r3, #11
 800cb7c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800cb80:	fb02 f303 	mul.w	r3, r2, r3
 800cb84:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 800cb86:	2300      	movs	r3, #0
 800cb88:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	7f1b      	ldrb	r3, [r3, #28]
 800cb92:	2b01      	cmp	r3, #1
 800cb94:	d101      	bne.n	800cb9a <HAL_RTC_SetAlarm_IT+0x36>
 800cb96:	2302      	movs	r3, #2
 800cb98:	e11e      	b.n	800cdd8 <HAL_RTC_SetAlarm_IT+0x274>
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	2201      	movs	r2, #1
 800cb9e:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	2202      	movs	r2, #2
 800cba4:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d137      	bne.n	800cc1c <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	689b      	ldr	r3, [r3, #8]
 800cbb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d102      	bne.n	800cbc0 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800cbba:	68bb      	ldr	r3, [r7, #8]
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	781b      	ldrb	r3, [r3, #0]
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f000 f9e3 	bl	800cf90 <RTC_ByteToBcd2>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800cbce:	68bb      	ldr	r3, [r7, #8]
 800cbd0:	785b      	ldrb	r3, [r3, #1]
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f000 f9dc 	bl	800cf90 <RTC_ByteToBcd2>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800cbdc:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800cbde:	68bb      	ldr	r3, [r7, #8]
 800cbe0:	789b      	ldrb	r3, [r3, #2]
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f000 f9d4 	bl	800cf90 <RTC_ByteToBcd2>
 800cbe8:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800cbea:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	78db      	ldrb	r3, [r3, #3]
 800cbf2:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800cbf4:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800cbf8:	68bb      	ldr	r3, [r7, #8]
 800cbfa:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f000 f9c6 	bl	800cf90 <RTC_ByteToBcd2>
 800cc04:	4603      	mov	r3, r0
 800cc06:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800cc08:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800cc0c:	68bb      	ldr	r3, [r7, #8]
 800cc0e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800cc10:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800cc12:	68bb      	ldr	r3, [r7, #8]
 800cc14:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800cc16:	4313      	orrs	r3, r2
 800cc18:	61fb      	str	r3, [r7, #28]
 800cc1a:	e023      	b.n	800cc64 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	689b      	ldr	r3, [r3, #8]
 800cc22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d102      	bne.n	800cc30 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800cc2a:	68bb      	ldr	r3, [r7, #8]
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800cc30:	68bb      	ldr	r3, [r7, #8]
 800cc32:	781b      	ldrb	r3, [r3, #0]
 800cc34:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800cc36:	68bb      	ldr	r3, [r7, #8]
 800cc38:	785b      	ldrb	r3, [r3, #1]
 800cc3a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800cc3c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800cc3e:	68ba      	ldr	r2, [r7, #8]
 800cc40:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800cc42:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	78db      	ldrb	r3, [r3, #3]
 800cc48:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800cc4a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800cc4c:	68bb      	ldr	r3, [r7, #8]
 800cc4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cc52:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800cc54:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800cc56:	68bb      	ldr	r3, [r7, #8]
 800cc58:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800cc5a:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800cc5c:	68bb      	ldr	r3, [r7, #8]
 800cc5e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800cc60:	4313      	orrs	r3, r2
 800cc62:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800cc68:	68bb      	ldr	r3, [r7, #8]
 800cc6a:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800cc6c:	4313      	orrs	r3, r2
 800cc6e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	22ca      	movs	r2, #202	@ 0xca
 800cc76:	625a      	str	r2, [r3, #36]	@ 0x24
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	2253      	movs	r2, #83	@ 0x53
 800cc7e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cc88:	d142      	bne.n	800cd10 <HAL_RTC_SetAlarm_IT+0x1ac>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	689a      	ldr	r2, [r3, #8]
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cc98:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	68db      	ldr	r3, [r3, #12]
 800cca0:	b2da      	uxtb	r2, r3
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800ccaa:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 800ccac:	697b      	ldr	r3, [r7, #20]
 800ccae:	3b01      	subs	r3, #1
 800ccb0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800ccb2:	697b      	ldr	r3, [r7, #20]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d10b      	bne.n	800ccd0 <HAL_RTC_SetAlarm_IT+0x16c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	22ff      	movs	r2, #255	@ 0xff
 800ccbe:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	2203      	movs	r2, #3
 800ccc4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	2200      	movs	r2, #0
 800ccca:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800cccc:	2303      	movs	r3, #3
 800ccce:	e083      	b.n	800cdd8 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	68db      	ldr	r3, [r3, #12]
 800ccd6:	f003 0301 	and.w	r3, r3, #1
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d0e6      	beq.n	800ccac <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	69fa      	ldr	r2, [r7, #28]
 800cce4:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	69ba      	ldr	r2, [r7, #24]
 800ccec:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	689a      	ldr	r2, [r3, #8]
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ccfc:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	689a      	ldr	r2, [r3, #8]
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800cd0c:	609a      	str	r2, [r3, #8]
 800cd0e:	e04c      	b.n	800cdaa <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	689a      	ldr	r2, [r3, #8]
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800cd1e:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	68db      	ldr	r3, [r3, #12]
 800cd26:	b2da      	uxtb	r2, r3
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800cd30:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800cd32:	4b2b      	ldr	r3, [pc, #172]	@ (800cde0 <HAL_RTC_SetAlarm_IT+0x27c>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	4a2b      	ldr	r2, [pc, #172]	@ (800cde4 <HAL_RTC_SetAlarm_IT+0x280>)
 800cd38:	fba2 2303 	umull	r2, r3, r2, r3
 800cd3c:	0adb      	lsrs	r3, r3, #11
 800cd3e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800cd42:	fb02 f303 	mul.w	r3, r2, r3
 800cd46:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 800cd48:	697b      	ldr	r3, [r7, #20]
 800cd4a:	3b01      	subs	r3, #1
 800cd4c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800cd4e:	697b      	ldr	r3, [r7, #20]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d10b      	bne.n	800cd6c <HAL_RTC_SetAlarm_IT+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	22ff      	movs	r2, #255	@ 0xff
 800cd5a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	2203      	movs	r2, #3
 800cd60:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	2200      	movs	r2, #0
 800cd66:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800cd68:	2303      	movs	r3, #3
 800cd6a:	e035      	b.n	800cdd8 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	68db      	ldr	r3, [r3, #12]
 800cd72:	f003 0302 	and.w	r3, r3, #2
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d0e6      	beq.n	800cd48 <HAL_RTC_SetAlarm_IT+0x1e4>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	69fa      	ldr	r2, [r7, #28]
 800cd80:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	69ba      	ldr	r2, [r7, #24]
 800cd88:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	689a      	ldr	r2, [r3, #8]
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cd98:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	689a      	ldr	r2, [r3, #8]
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800cda8:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800cdaa:	4b0f      	ldr	r3, [pc, #60]	@ (800cde8 <HAL_RTC_SetAlarm_IT+0x284>)
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	4a0e      	ldr	r2, [pc, #56]	@ (800cde8 <HAL_RTC_SetAlarm_IT+0x284>)
 800cdb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cdb4:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800cdb6:	4b0c      	ldr	r3, [pc, #48]	@ (800cde8 <HAL_RTC_SetAlarm_IT+0x284>)
 800cdb8:	689b      	ldr	r3, [r3, #8]
 800cdba:	4a0b      	ldr	r2, [pc, #44]	@ (800cde8 <HAL_RTC_SetAlarm_IT+0x284>)
 800cdbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cdc0:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	22ff      	movs	r2, #255	@ 0xff
 800cdc8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	2201      	movs	r2, #1
 800cdce:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800cdd6:	2300      	movs	r3, #0
}
 800cdd8:	4618      	mov	r0, r3
 800cdda:	3724      	adds	r7, #36	@ 0x24
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd90      	pop	{r4, r7, pc}
 800cde0:	20000154 	.word	0x20000154
 800cde4:	10624dd3 	.word	0x10624dd3
 800cde8:	40013c00 	.word	0x40013c00

0800cdec <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b082      	sub	sp, #8
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800cdf4:	4b1f      	ldr	r3, [pc, #124]	@ (800ce74 <HAL_RTC_AlarmIRQHandler+0x88>)
 800cdf6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800cdfa:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	689b      	ldr	r3, [r3, #8]
 800ce02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d012      	beq.n	800ce30 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	68db      	ldr	r3, [r3, #12]
 800ce10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d00b      	beq.n	800ce30 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	68db      	ldr	r3, [r3, #12]
 800ce1e:	b2da      	uxtb	r2, r3
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800ce28:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800ce2a:	6878      	ldr	r0, [r7, #4]
 800ce2c:	f000 f824 	bl	800ce78 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	689b      	ldr	r3, [r3, #8]
 800ce36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d012      	beq.n	800ce64 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	68db      	ldr	r3, [r3, #12]
 800ce44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d00b      	beq.n	800ce64 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	68db      	ldr	r3, [r3, #12]
 800ce52:	b2da      	uxtb	r2, r3
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800ce5c:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	f000 f8b4 	bl	800cfcc <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2201      	movs	r2, #1
 800ce68:	775a      	strb	r2, [r3, #29]
}
 800ce6a:	bf00      	nop
 800ce6c:	3708      	adds	r7, #8
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}
 800ce72:	bf00      	nop
 800ce74:	40013c00 	.word	0x40013c00

0800ce78 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800ce78:	b480      	push	{r7}
 800ce7a:	b083      	sub	sp, #12
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 800ce80:	bf00      	nop
 800ce82:	370c      	adds	r7, #12
 800ce84:	46bd      	mov	sp, r7
 800ce86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8a:	4770      	bx	lr

0800ce8c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b084      	sub	sp, #16
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ce94:	2300      	movs	r3, #0
 800ce96:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	4a0d      	ldr	r2, [pc, #52]	@ (800ced4 <HAL_RTC_WaitForSynchro+0x48>)
 800ce9e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800cea0:	f7fd fc30 	bl	800a704 <HAL_GetTick>
 800cea4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cea6:	e009      	b.n	800cebc <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cea8:	f7fd fc2c 	bl	800a704 <HAL_GetTick>
 800ceac:	4602      	mov	r2, r0
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	1ad3      	subs	r3, r2, r3
 800ceb2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ceb6:	d901      	bls.n	800cebc <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800ceb8:	2303      	movs	r3, #3
 800ceba:	e007      	b.n	800cecc <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	68db      	ldr	r3, [r3, #12]
 800cec2:	f003 0320 	and.w	r3, r3, #32
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d0ee      	beq.n	800cea8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800ceca:	2300      	movs	r3, #0
}
 800cecc:	4618      	mov	r0, r3
 800cece:	3710      	adds	r7, #16
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}
 800ced4:	00017f5f 	.word	0x00017f5f

0800ced8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b084      	sub	sp, #16
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cee0:	2300      	movs	r3, #0
 800cee2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800cee4:	2300      	movs	r3, #0
 800cee6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	68db      	ldr	r3, [r3, #12]
 800ceee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d122      	bne.n	800cf3c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	68da      	ldr	r2, [r3, #12]
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800cf04:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cf06:	f7fd fbfd 	bl	800a704 <HAL_GetTick>
 800cf0a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800cf0c:	e00c      	b.n	800cf28 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cf0e:	f7fd fbf9 	bl	800a704 <HAL_GetTick>
 800cf12:	4602      	mov	r2, r0
 800cf14:	68bb      	ldr	r3, [r7, #8]
 800cf16:	1ad3      	subs	r3, r2, r3
 800cf18:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cf1c:	d904      	bls.n	800cf28 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2204      	movs	r2, #4
 800cf22:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800cf24:	2301      	movs	r3, #1
 800cf26:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	68db      	ldr	r3, [r3, #12]
 800cf2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d102      	bne.n	800cf3c <RTC_EnterInitMode+0x64>
 800cf36:	7bfb      	ldrb	r3, [r7, #15]
 800cf38:	2b01      	cmp	r3, #1
 800cf3a:	d1e8      	bne.n	800cf0e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800cf3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	3710      	adds	r7, #16
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}

0800cf46 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800cf46:	b580      	push	{r7, lr}
 800cf48:	b084      	sub	sp, #16
 800cf4a:	af00      	add	r7, sp, #0
 800cf4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	68da      	ldr	r2, [r3, #12]
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cf60:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	689b      	ldr	r3, [r3, #8]
 800cf68:	f003 0320 	and.w	r3, r3, #32
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d10a      	bne.n	800cf86 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cf70:	6878      	ldr	r0, [r7, #4]
 800cf72:	f7ff ff8b 	bl	800ce8c <HAL_RTC_WaitForSynchro>
 800cf76:	4603      	mov	r3, r0
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d004      	beq.n	800cf86 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	2204      	movs	r2, #4
 800cf80:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800cf82:	2301      	movs	r3, #1
 800cf84:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800cf86:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3710      	adds	r7, #16
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}

0800cf90 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800cf90:	b480      	push	{r7}
 800cf92:	b085      	sub	sp, #20
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	4603      	mov	r3, r0
 800cf98:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800cf9e:	e005      	b.n	800cfac <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	3301      	adds	r3, #1
 800cfa4:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800cfa6:	79fb      	ldrb	r3, [r7, #7]
 800cfa8:	3b0a      	subs	r3, #10
 800cfaa:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800cfac:	79fb      	ldrb	r3, [r7, #7]
 800cfae:	2b09      	cmp	r3, #9
 800cfb0:	d8f6      	bhi.n	800cfa0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	b2db      	uxtb	r3, r3
 800cfb6:	011b      	lsls	r3, r3, #4
 800cfb8:	b2da      	uxtb	r2, r3
 800cfba:	79fb      	ldrb	r3, [r7, #7]
 800cfbc:	4313      	orrs	r3, r2
 800cfbe:	b2db      	uxtb	r3, r3
}
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	3714      	adds	r7, #20
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfca:	4770      	bx	lr

0800cfcc <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800cfcc:	b480      	push	{r7}
 800cfce:	b083      	sub	sp, #12
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800cfd4:	bf00      	nop
 800cfd6:	370c      	adds	r7, #12
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfde:	4770      	bx	lr

0800cfe0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b082      	sub	sp, #8
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d101      	bne.n	800cff2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cfee:	2301      	movs	r3, #1
 800cff0:	e07b      	b.n	800d0ea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d108      	bne.n	800d00c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	685b      	ldr	r3, [r3, #4]
 800cffe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d002:	d009      	beq.n	800d018 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2200      	movs	r2, #0
 800d008:	61da      	str	r2, [r3, #28]
 800d00a:	e005      	b.n	800d018 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2200      	movs	r2, #0
 800d010:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	2200      	movs	r2, #0
 800d016:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2200      	movs	r2, #0
 800d01c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800d024:	b2db      	uxtb	r3, r3
 800d026:	2b00      	cmp	r3, #0
 800d028:	d106      	bne.n	800d038 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	2200      	movs	r2, #0
 800d02e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d032:	6878      	ldr	r0, [r7, #4]
 800d034:	f7fc ffd6 	bl	8009fe4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2202      	movs	r2, #2
 800d03c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	681a      	ldr	r2, [r3, #0]
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d04e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	685b      	ldr	r3, [r3, #4]
 800d054:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	689b      	ldr	r3, [r3, #8]
 800d05c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800d060:	431a      	orrs	r2, r3
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	68db      	ldr	r3, [r3, #12]
 800d066:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d06a:	431a      	orrs	r2, r3
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	691b      	ldr	r3, [r3, #16]
 800d070:	f003 0302 	and.w	r3, r3, #2
 800d074:	431a      	orrs	r2, r3
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	695b      	ldr	r3, [r3, #20]
 800d07a:	f003 0301 	and.w	r3, r3, #1
 800d07e:	431a      	orrs	r2, r3
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	699b      	ldr	r3, [r3, #24]
 800d084:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d088:	431a      	orrs	r2, r3
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	69db      	ldr	r3, [r3, #28]
 800d08e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d092:	431a      	orrs	r2, r3
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	6a1b      	ldr	r3, [r3, #32]
 800d098:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d09c:	ea42 0103 	orr.w	r1, r2, r3
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0a4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	430a      	orrs	r2, r1
 800d0ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	699b      	ldr	r3, [r3, #24]
 800d0b4:	0c1b      	lsrs	r3, r3, #16
 800d0b6:	f003 0104 	and.w	r1, r3, #4
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0be:	f003 0210 	and.w	r2, r3, #16
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	430a      	orrs	r2, r1
 800d0c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	69da      	ldr	r2, [r3, #28]
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d0d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	2200      	movs	r2, #0
 800d0de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2201      	movs	r2, #1
 800d0e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800d0e8:	2300      	movs	r3, #0
}
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	3708      	adds	r7, #8
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}

0800d0f2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d0f2:	b580      	push	{r7, lr}
 800d0f4:	b088      	sub	sp, #32
 800d0f6:	af00      	add	r7, sp, #0
 800d0f8:	60f8      	str	r0, [r7, #12]
 800d0fa:	60b9      	str	r1, [r7, #8]
 800d0fc:	603b      	str	r3, [r7, #0]
 800d0fe:	4613      	mov	r3, r2
 800d100:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d102:	f7fd faff 	bl	800a704 <HAL_GetTick>
 800d106:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800d108:	88fb      	ldrh	r3, [r7, #6]
 800d10a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800d112:	b2db      	uxtb	r3, r3
 800d114:	2b01      	cmp	r3, #1
 800d116:	d001      	beq.n	800d11c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800d118:	2302      	movs	r3, #2
 800d11a:	e12a      	b.n	800d372 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800d11c:	68bb      	ldr	r3, [r7, #8]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d002      	beq.n	800d128 <HAL_SPI_Transmit+0x36>
 800d122:	88fb      	ldrh	r3, [r7, #6]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d101      	bne.n	800d12c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800d128:	2301      	movs	r3, #1
 800d12a:	e122      	b.n	800d372 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800d132:	2b01      	cmp	r3, #1
 800d134:	d101      	bne.n	800d13a <HAL_SPI_Transmit+0x48>
 800d136:	2302      	movs	r3, #2
 800d138:	e11b      	b.n	800d372 <HAL_SPI_Transmit+0x280>
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	2201      	movs	r2, #1
 800d13e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	2203      	movs	r2, #3
 800d146:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	2200      	movs	r2, #0
 800d14e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	68ba      	ldr	r2, [r7, #8]
 800d154:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	88fa      	ldrh	r2, [r7, #6]
 800d15a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	88fa      	ldrh	r2, [r7, #6]
 800d160:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	2200      	movs	r2, #0
 800d166:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	2200      	movs	r2, #0
 800d16c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	2200      	movs	r2, #0
 800d172:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	2200      	movs	r2, #0
 800d178:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	2200      	movs	r2, #0
 800d17e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	689b      	ldr	r3, [r3, #8]
 800d184:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d188:	d10f      	bne.n	800d1aa <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	681a      	ldr	r2, [r3, #0]
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d198:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	681a      	ldr	r2, [r3, #0]
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d1a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1b4:	2b40      	cmp	r3, #64	@ 0x40
 800d1b6:	d007      	beq.n	800d1c8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	681a      	ldr	r2, [r3, #0]
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d1c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	68db      	ldr	r3, [r3, #12]
 800d1cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d1d0:	d152      	bne.n	800d278 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	685b      	ldr	r3, [r3, #4]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d002      	beq.n	800d1e0 <HAL_SPI_Transmit+0xee>
 800d1da:	8b7b      	ldrh	r3, [r7, #26]
 800d1dc:	2b01      	cmp	r3, #1
 800d1de:	d145      	bne.n	800d26c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1e4:	881a      	ldrh	r2, [r3, #0]
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1f0:	1c9a      	adds	r2, r3, #2
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d1fa:	b29b      	uxth	r3, r3
 800d1fc:	3b01      	subs	r3, #1
 800d1fe:	b29a      	uxth	r2, r3
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d204:	e032      	b.n	800d26c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	689b      	ldr	r3, [r3, #8]
 800d20c:	f003 0302 	and.w	r3, r3, #2
 800d210:	2b02      	cmp	r3, #2
 800d212:	d112      	bne.n	800d23a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d218:	881a      	ldrh	r2, [r3, #0]
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d224:	1c9a      	adds	r2, r3, #2
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d22e:	b29b      	uxth	r3, r3
 800d230:	3b01      	subs	r3, #1
 800d232:	b29a      	uxth	r2, r3
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	86da      	strh	r2, [r3, #54]	@ 0x36
 800d238:	e018      	b.n	800d26c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d23a:	f7fd fa63 	bl	800a704 <HAL_GetTick>
 800d23e:	4602      	mov	r2, r0
 800d240:	69fb      	ldr	r3, [r7, #28]
 800d242:	1ad3      	subs	r3, r2, r3
 800d244:	683a      	ldr	r2, [r7, #0]
 800d246:	429a      	cmp	r2, r3
 800d248:	d803      	bhi.n	800d252 <HAL_SPI_Transmit+0x160>
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d250:	d102      	bne.n	800d258 <HAL_SPI_Transmit+0x166>
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d109      	bne.n	800d26c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	2201      	movs	r2, #1
 800d25c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	2200      	movs	r2, #0
 800d264:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800d268:	2303      	movs	r3, #3
 800d26a:	e082      	b.n	800d372 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d270:	b29b      	uxth	r3, r3
 800d272:	2b00      	cmp	r3, #0
 800d274:	d1c7      	bne.n	800d206 <HAL_SPI_Transmit+0x114>
 800d276:	e053      	b.n	800d320 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	685b      	ldr	r3, [r3, #4]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d002      	beq.n	800d286 <HAL_SPI_Transmit+0x194>
 800d280:	8b7b      	ldrh	r3, [r7, #26]
 800d282:	2b01      	cmp	r3, #1
 800d284:	d147      	bne.n	800d316 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	330c      	adds	r3, #12
 800d290:	7812      	ldrb	r2, [r2, #0]
 800d292:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d298:	1c5a      	adds	r2, r3, #1
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d2a2:	b29b      	uxth	r3, r3
 800d2a4:	3b01      	subs	r3, #1
 800d2a6:	b29a      	uxth	r2, r3
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800d2ac:	e033      	b.n	800d316 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	689b      	ldr	r3, [r3, #8]
 800d2b4:	f003 0302 	and.w	r3, r3, #2
 800d2b8:	2b02      	cmp	r3, #2
 800d2ba:	d113      	bne.n	800d2e4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	330c      	adds	r3, #12
 800d2c6:	7812      	ldrb	r2, [r2, #0]
 800d2c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d2ce:	1c5a      	adds	r2, r3, #1
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d2d8:	b29b      	uxth	r3, r3
 800d2da:	3b01      	subs	r3, #1
 800d2dc:	b29a      	uxth	r2, r3
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	86da      	strh	r2, [r3, #54]	@ 0x36
 800d2e2:	e018      	b.n	800d316 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d2e4:	f7fd fa0e 	bl	800a704 <HAL_GetTick>
 800d2e8:	4602      	mov	r2, r0
 800d2ea:	69fb      	ldr	r3, [r7, #28]
 800d2ec:	1ad3      	subs	r3, r2, r3
 800d2ee:	683a      	ldr	r2, [r7, #0]
 800d2f0:	429a      	cmp	r2, r3
 800d2f2:	d803      	bhi.n	800d2fc <HAL_SPI_Transmit+0x20a>
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2fa:	d102      	bne.n	800d302 <HAL_SPI_Transmit+0x210>
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d109      	bne.n	800d316 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	2201      	movs	r2, #1
 800d306:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	2200      	movs	r2, #0
 800d30e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800d312:	2303      	movs	r3, #3
 800d314:	e02d      	b.n	800d372 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d31a:	b29b      	uxth	r3, r3
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d1c6      	bne.n	800d2ae <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d320:	69fa      	ldr	r2, [r7, #28]
 800d322:	6839      	ldr	r1, [r7, #0]
 800d324:	68f8      	ldr	r0, [r7, #12]
 800d326:	f000 fbd9 	bl	800dadc <SPI_EndRxTxTransaction>
 800d32a:	4603      	mov	r3, r0
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d002      	beq.n	800d336 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	2220      	movs	r2, #32
 800d334:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	689b      	ldr	r3, [r3, #8]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d10a      	bne.n	800d354 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d33e:	2300      	movs	r3, #0
 800d340:	617b      	str	r3, [r7, #20]
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	68db      	ldr	r3, [r3, #12]
 800d348:	617b      	str	r3, [r7, #20]
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	689b      	ldr	r3, [r3, #8]
 800d350:	617b      	str	r3, [r7, #20]
 800d352:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	2201      	movs	r2, #1
 800d358:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	2200      	movs	r2, #0
 800d360:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d001      	beq.n	800d370 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800d36c:	2301      	movs	r3, #1
 800d36e:	e000      	b.n	800d372 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800d370:	2300      	movs	r3, #0
  }
}
 800d372:	4618      	mov	r0, r3
 800d374:	3720      	adds	r7, #32
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}

0800d37a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d37a:	b580      	push	{r7, lr}
 800d37c:	b088      	sub	sp, #32
 800d37e:	af02      	add	r7, sp, #8
 800d380:	60f8      	str	r0, [r7, #12]
 800d382:	60b9      	str	r1, [r7, #8]
 800d384:	603b      	str	r3, [r7, #0]
 800d386:	4613      	mov	r3, r2
 800d388:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800d390:	b2db      	uxtb	r3, r3
 800d392:	2b01      	cmp	r3, #1
 800d394:	d001      	beq.n	800d39a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800d396:	2302      	movs	r3, #2
 800d398:	e104      	b.n	800d5a4 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	685b      	ldr	r3, [r3, #4]
 800d39e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d3a2:	d112      	bne.n	800d3ca <HAL_SPI_Receive+0x50>
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	689b      	ldr	r3, [r3, #8]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d10e      	bne.n	800d3ca <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	2204      	movs	r2, #4
 800d3b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800d3b4:	88fa      	ldrh	r2, [r7, #6]
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	9300      	str	r3, [sp, #0]
 800d3ba:	4613      	mov	r3, r2
 800d3bc:	68ba      	ldr	r2, [r7, #8]
 800d3be:	68b9      	ldr	r1, [r7, #8]
 800d3c0:	68f8      	ldr	r0, [r7, #12]
 800d3c2:	f000 f8f3 	bl	800d5ac <HAL_SPI_TransmitReceive>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	e0ec      	b.n	800d5a4 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d3ca:	f7fd f99b 	bl	800a704 <HAL_GetTick>
 800d3ce:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d002      	beq.n	800d3dc <HAL_SPI_Receive+0x62>
 800d3d6:	88fb      	ldrh	r3, [r7, #6]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d101      	bne.n	800d3e0 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800d3dc:	2301      	movs	r3, #1
 800d3de:	e0e1      	b.n	800d5a4 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800d3e6:	2b01      	cmp	r3, #1
 800d3e8:	d101      	bne.n	800d3ee <HAL_SPI_Receive+0x74>
 800d3ea:	2302      	movs	r3, #2
 800d3ec:	e0da      	b.n	800d5a4 <HAL_SPI_Receive+0x22a>
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	2201      	movs	r2, #1
 800d3f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	2204      	movs	r2, #4
 800d3fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	2200      	movs	r2, #0
 800d402:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	68ba      	ldr	r2, [r7, #8]
 800d408:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	88fa      	ldrh	r2, [r7, #6]
 800d40e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	88fa      	ldrh	r2, [r7, #6]
 800d414:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	2200      	movs	r2, #0
 800d41a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	2200      	movs	r2, #0
 800d420:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	2200      	movs	r2, #0
 800d426:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	2200      	movs	r2, #0
 800d42c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	2200      	movs	r2, #0
 800d432:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	689b      	ldr	r3, [r3, #8]
 800d438:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d43c:	d10f      	bne.n	800d45e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	681a      	ldr	r2, [r3, #0]
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d44c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	681a      	ldr	r2, [r3, #0]
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800d45c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d468:	2b40      	cmp	r3, #64	@ 0x40
 800d46a:	d007      	beq.n	800d47c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	681a      	ldr	r2, [r3, #0]
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d47a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	68db      	ldr	r3, [r3, #12]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d170      	bne.n	800d566 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800d484:	e035      	b.n	800d4f2 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	689b      	ldr	r3, [r3, #8]
 800d48c:	f003 0301 	and.w	r3, r3, #1
 800d490:	2b01      	cmp	r3, #1
 800d492:	d115      	bne.n	800d4c0 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	f103 020c 	add.w	r2, r3, #12
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4a0:	7812      	ldrb	r2, [r2, #0]
 800d4a2:	b2d2      	uxtb	r2, r2
 800d4a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4aa:	1c5a      	adds	r2, r3, #1
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d4b4:	b29b      	uxth	r3, r3
 800d4b6:	3b01      	subs	r3, #1
 800d4b8:	b29a      	uxth	r2, r3
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d4be:	e018      	b.n	800d4f2 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d4c0:	f7fd f920 	bl	800a704 <HAL_GetTick>
 800d4c4:	4602      	mov	r2, r0
 800d4c6:	697b      	ldr	r3, [r7, #20]
 800d4c8:	1ad3      	subs	r3, r2, r3
 800d4ca:	683a      	ldr	r2, [r7, #0]
 800d4cc:	429a      	cmp	r2, r3
 800d4ce:	d803      	bhi.n	800d4d8 <HAL_SPI_Receive+0x15e>
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4d6:	d102      	bne.n	800d4de <HAL_SPI_Receive+0x164>
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d109      	bne.n	800d4f2 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	2201      	movs	r2, #1
 800d4e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800d4ee:	2303      	movs	r3, #3
 800d4f0:	e058      	b.n	800d5a4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d4f6:	b29b      	uxth	r3, r3
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d1c4      	bne.n	800d486 <HAL_SPI_Receive+0x10c>
 800d4fc:	e038      	b.n	800d570 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	689b      	ldr	r3, [r3, #8]
 800d504:	f003 0301 	and.w	r3, r3, #1
 800d508:	2b01      	cmp	r3, #1
 800d50a:	d113      	bne.n	800d534 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	68da      	ldr	r2, [r3, #12]
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d516:	b292      	uxth	r2, r2
 800d518:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d51e:	1c9a      	adds	r2, r3, #2
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d528:	b29b      	uxth	r3, r3
 800d52a:	3b01      	subs	r3, #1
 800d52c:	b29a      	uxth	r2, r3
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d532:	e018      	b.n	800d566 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d534:	f7fd f8e6 	bl	800a704 <HAL_GetTick>
 800d538:	4602      	mov	r2, r0
 800d53a:	697b      	ldr	r3, [r7, #20]
 800d53c:	1ad3      	subs	r3, r2, r3
 800d53e:	683a      	ldr	r2, [r7, #0]
 800d540:	429a      	cmp	r2, r3
 800d542:	d803      	bhi.n	800d54c <HAL_SPI_Receive+0x1d2>
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d54a:	d102      	bne.n	800d552 <HAL_SPI_Receive+0x1d8>
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d109      	bne.n	800d566 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	2201      	movs	r2, #1
 800d556:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	2200      	movs	r2, #0
 800d55e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800d562:	2303      	movs	r3, #3
 800d564:	e01e      	b.n	800d5a4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d56a:	b29b      	uxth	r3, r3
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d1c6      	bne.n	800d4fe <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d570:	697a      	ldr	r2, [r7, #20]
 800d572:	6839      	ldr	r1, [r7, #0]
 800d574:	68f8      	ldr	r0, [r7, #12]
 800d576:	f000 fa4b 	bl	800da10 <SPI_EndRxTransaction>
 800d57a:	4603      	mov	r3, r0
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d002      	beq.n	800d586 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	2220      	movs	r2, #32
 800d584:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	2201      	movs	r2, #1
 800d58a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	2200      	movs	r2, #0
 800d592:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d001      	beq.n	800d5a2 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800d59e:	2301      	movs	r3, #1
 800d5a0:	e000      	b.n	800d5a4 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800d5a2:	2300      	movs	r3, #0
  }
}
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	3718      	adds	r7, #24
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	bd80      	pop	{r7, pc}

0800d5ac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b08a      	sub	sp, #40	@ 0x28
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	60f8      	str	r0, [r7, #12]
 800d5b4:	60b9      	str	r1, [r7, #8]
 800d5b6:	607a      	str	r2, [r7, #4]
 800d5b8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800d5ba:	2301      	movs	r3, #1
 800d5bc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d5be:	f7fd f8a1 	bl	800a704 <HAL_GetTick>
 800d5c2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800d5ca:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	685b      	ldr	r3, [r3, #4]
 800d5d0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800d5d2:	887b      	ldrh	r3, [r7, #2]
 800d5d4:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d5d6:	7ffb      	ldrb	r3, [r7, #31]
 800d5d8:	2b01      	cmp	r3, #1
 800d5da:	d00c      	beq.n	800d5f6 <HAL_SPI_TransmitReceive+0x4a>
 800d5dc:	69bb      	ldr	r3, [r7, #24]
 800d5de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d5e2:	d106      	bne.n	800d5f2 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	689b      	ldr	r3, [r3, #8]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d102      	bne.n	800d5f2 <HAL_SPI_TransmitReceive+0x46>
 800d5ec:	7ffb      	ldrb	r3, [r7, #31]
 800d5ee:	2b04      	cmp	r3, #4
 800d5f0:	d001      	beq.n	800d5f6 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800d5f2:	2302      	movs	r3, #2
 800d5f4:	e17f      	b.n	800d8f6 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d5f6:	68bb      	ldr	r3, [r7, #8]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d005      	beq.n	800d608 <HAL_SPI_TransmitReceive+0x5c>
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d002      	beq.n	800d608 <HAL_SPI_TransmitReceive+0x5c>
 800d602:	887b      	ldrh	r3, [r7, #2]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d101      	bne.n	800d60c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800d608:	2301      	movs	r3, #1
 800d60a:	e174      	b.n	800d8f6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800d612:	2b01      	cmp	r3, #1
 800d614:	d101      	bne.n	800d61a <HAL_SPI_TransmitReceive+0x6e>
 800d616:	2302      	movs	r3, #2
 800d618:	e16d      	b.n	800d8f6 <HAL_SPI_TransmitReceive+0x34a>
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	2201      	movs	r2, #1
 800d61e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800d628:	b2db      	uxtb	r3, r3
 800d62a:	2b04      	cmp	r3, #4
 800d62c:	d003      	beq.n	800d636 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	2205      	movs	r2, #5
 800d632:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	2200      	movs	r2, #0
 800d63a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	687a      	ldr	r2, [r7, #4]
 800d640:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	887a      	ldrh	r2, [r7, #2]
 800d646:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	887a      	ldrh	r2, [r7, #2]
 800d64c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	68ba      	ldr	r2, [r7, #8]
 800d652:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	887a      	ldrh	r2, [r7, #2]
 800d658:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	887a      	ldrh	r2, [r7, #2]
 800d65e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	2200      	movs	r2, #0
 800d664:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	2200      	movs	r2, #0
 800d66a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d676:	2b40      	cmp	r3, #64	@ 0x40
 800d678:	d007      	beq.n	800d68a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	681a      	ldr	r2, [r3, #0]
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d688:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	68db      	ldr	r3, [r3, #12]
 800d68e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d692:	d17e      	bne.n	800d792 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	685b      	ldr	r3, [r3, #4]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d002      	beq.n	800d6a2 <HAL_SPI_TransmitReceive+0xf6>
 800d69c:	8afb      	ldrh	r3, [r7, #22]
 800d69e:	2b01      	cmp	r3, #1
 800d6a0:	d16c      	bne.n	800d77c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d6a6:	881a      	ldrh	r2, [r3, #0]
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d6b2:	1c9a      	adds	r2, r3, #2
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d6bc:	b29b      	uxth	r3, r3
 800d6be:	3b01      	subs	r3, #1
 800d6c0:	b29a      	uxth	r2, r3
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d6c6:	e059      	b.n	800d77c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	689b      	ldr	r3, [r3, #8]
 800d6ce:	f003 0302 	and.w	r3, r3, #2
 800d6d2:	2b02      	cmp	r3, #2
 800d6d4:	d11b      	bne.n	800d70e <HAL_SPI_TransmitReceive+0x162>
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d6da:	b29b      	uxth	r3, r3
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d016      	beq.n	800d70e <HAL_SPI_TransmitReceive+0x162>
 800d6e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6e2:	2b01      	cmp	r3, #1
 800d6e4:	d113      	bne.n	800d70e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d6ea:	881a      	ldrh	r2, [r3, #0]
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d6f6:	1c9a      	adds	r2, r3, #2
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d700:	b29b      	uxth	r3, r3
 800d702:	3b01      	subs	r3, #1
 800d704:	b29a      	uxth	r2, r3
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d70a:	2300      	movs	r3, #0
 800d70c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	689b      	ldr	r3, [r3, #8]
 800d714:	f003 0301 	and.w	r3, r3, #1
 800d718:	2b01      	cmp	r3, #1
 800d71a:	d119      	bne.n	800d750 <HAL_SPI_TransmitReceive+0x1a4>
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d720:	b29b      	uxth	r3, r3
 800d722:	2b00      	cmp	r3, #0
 800d724:	d014      	beq.n	800d750 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	68da      	ldr	r2, [r3, #12]
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d730:	b292      	uxth	r2, r2
 800d732:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d738:	1c9a      	adds	r2, r3, #2
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d742:	b29b      	uxth	r3, r3
 800d744:	3b01      	subs	r3, #1
 800d746:	b29a      	uxth	r2, r3
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d74c:	2301      	movs	r3, #1
 800d74e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800d750:	f7fc ffd8 	bl	800a704 <HAL_GetTick>
 800d754:	4602      	mov	r2, r0
 800d756:	6a3b      	ldr	r3, [r7, #32]
 800d758:	1ad3      	subs	r3, r2, r3
 800d75a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d75c:	429a      	cmp	r2, r3
 800d75e:	d80d      	bhi.n	800d77c <HAL_SPI_TransmitReceive+0x1d0>
 800d760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d762:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d766:	d009      	beq.n	800d77c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	2201      	movs	r2, #1
 800d76c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	2200      	movs	r2, #0
 800d774:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800d778:	2303      	movs	r3, #3
 800d77a:	e0bc      	b.n	800d8f6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d780:	b29b      	uxth	r3, r3
 800d782:	2b00      	cmp	r3, #0
 800d784:	d1a0      	bne.n	800d6c8 <HAL_SPI_TransmitReceive+0x11c>
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d78a:	b29b      	uxth	r3, r3
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d19b      	bne.n	800d6c8 <HAL_SPI_TransmitReceive+0x11c>
 800d790:	e082      	b.n	800d898 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	685b      	ldr	r3, [r3, #4]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d002      	beq.n	800d7a0 <HAL_SPI_TransmitReceive+0x1f4>
 800d79a:	8afb      	ldrh	r3, [r7, #22]
 800d79c:	2b01      	cmp	r3, #1
 800d79e:	d171      	bne.n	800d884 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	330c      	adds	r3, #12
 800d7aa:	7812      	ldrb	r2, [r2, #0]
 800d7ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7b2:	1c5a      	adds	r2, r3, #1
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d7bc:	b29b      	uxth	r3, r3
 800d7be:	3b01      	subs	r3, #1
 800d7c0:	b29a      	uxth	r2, r3
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d7c6:	e05d      	b.n	800d884 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	689b      	ldr	r3, [r3, #8]
 800d7ce:	f003 0302 	and.w	r3, r3, #2
 800d7d2:	2b02      	cmp	r3, #2
 800d7d4:	d11c      	bne.n	800d810 <HAL_SPI_TransmitReceive+0x264>
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d7da:	b29b      	uxth	r3, r3
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d017      	beq.n	800d810 <HAL_SPI_TransmitReceive+0x264>
 800d7e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7e2:	2b01      	cmp	r3, #1
 800d7e4:	d114      	bne.n	800d810 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	330c      	adds	r3, #12
 800d7f0:	7812      	ldrb	r2, [r2, #0]
 800d7f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7f8:	1c5a      	adds	r2, r3, #1
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d802:	b29b      	uxth	r3, r3
 800d804:	3b01      	subs	r3, #1
 800d806:	b29a      	uxth	r2, r3
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d80c:	2300      	movs	r3, #0
 800d80e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	689b      	ldr	r3, [r3, #8]
 800d816:	f003 0301 	and.w	r3, r3, #1
 800d81a:	2b01      	cmp	r3, #1
 800d81c:	d119      	bne.n	800d852 <HAL_SPI_TransmitReceive+0x2a6>
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d822:	b29b      	uxth	r3, r3
 800d824:	2b00      	cmp	r3, #0
 800d826:	d014      	beq.n	800d852 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	68da      	ldr	r2, [r3, #12]
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d832:	b2d2      	uxtb	r2, r2
 800d834:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d83a:	1c5a      	adds	r2, r3, #1
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d844:	b29b      	uxth	r3, r3
 800d846:	3b01      	subs	r3, #1
 800d848:	b29a      	uxth	r2, r3
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d84e:	2301      	movs	r3, #1
 800d850:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800d852:	f7fc ff57 	bl	800a704 <HAL_GetTick>
 800d856:	4602      	mov	r2, r0
 800d858:	6a3b      	ldr	r3, [r7, #32]
 800d85a:	1ad3      	subs	r3, r2, r3
 800d85c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d85e:	429a      	cmp	r2, r3
 800d860:	d803      	bhi.n	800d86a <HAL_SPI_TransmitReceive+0x2be>
 800d862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d864:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d868:	d102      	bne.n	800d870 <HAL_SPI_TransmitReceive+0x2c4>
 800d86a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d109      	bne.n	800d884 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	2201      	movs	r2, #1
 800d874:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	2200      	movs	r2, #0
 800d87c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800d880:	2303      	movs	r3, #3
 800d882:	e038      	b.n	800d8f6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d888:	b29b      	uxth	r3, r3
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d19c      	bne.n	800d7c8 <HAL_SPI_TransmitReceive+0x21c>
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d892:	b29b      	uxth	r3, r3
 800d894:	2b00      	cmp	r3, #0
 800d896:	d197      	bne.n	800d7c8 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d898:	6a3a      	ldr	r2, [r7, #32]
 800d89a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d89c:	68f8      	ldr	r0, [r7, #12]
 800d89e:	f000 f91d 	bl	800dadc <SPI_EndRxTxTransaction>
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d008      	beq.n	800d8ba <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	2220      	movs	r2, #32
 800d8ac:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800d8b6:	2301      	movs	r3, #1
 800d8b8:	e01d      	b.n	800d8f6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	689b      	ldr	r3, [r3, #8]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d10a      	bne.n	800d8d8 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	613b      	str	r3, [r7, #16]
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	68db      	ldr	r3, [r3, #12]
 800d8cc:	613b      	str	r3, [r7, #16]
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	689b      	ldr	r3, [r3, #8]
 800d8d4:	613b      	str	r3, [r7, #16]
 800d8d6:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	2201      	movs	r2, #1
 800d8dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d001      	beq.n	800d8f4 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800d8f0:	2301      	movs	r3, #1
 800d8f2:	e000      	b.n	800d8f6 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800d8f4:	2300      	movs	r3, #0
  }
}
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	3728      	adds	r7, #40	@ 0x28
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd80      	pop	{r7, pc}
	...

0800d900 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b088      	sub	sp, #32
 800d904:	af00      	add	r7, sp, #0
 800d906:	60f8      	str	r0, [r7, #12]
 800d908:	60b9      	str	r1, [r7, #8]
 800d90a:	603b      	str	r3, [r7, #0]
 800d90c:	4613      	mov	r3, r2
 800d90e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800d910:	f7fc fef8 	bl	800a704 <HAL_GetTick>
 800d914:	4602      	mov	r2, r0
 800d916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d918:	1a9b      	subs	r3, r3, r2
 800d91a:	683a      	ldr	r2, [r7, #0]
 800d91c:	4413      	add	r3, r2
 800d91e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800d920:	f7fc fef0 	bl	800a704 <HAL_GetTick>
 800d924:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d926:	4b39      	ldr	r3, [pc, #228]	@ (800da0c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	015b      	lsls	r3, r3, #5
 800d92c:	0d1b      	lsrs	r3, r3, #20
 800d92e:	69fa      	ldr	r2, [r7, #28]
 800d930:	fb02 f303 	mul.w	r3, r2, r3
 800d934:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d936:	e054      	b.n	800d9e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d93e:	d050      	beq.n	800d9e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d940:	f7fc fee0 	bl	800a704 <HAL_GetTick>
 800d944:	4602      	mov	r2, r0
 800d946:	69bb      	ldr	r3, [r7, #24]
 800d948:	1ad3      	subs	r3, r2, r3
 800d94a:	69fa      	ldr	r2, [r7, #28]
 800d94c:	429a      	cmp	r2, r3
 800d94e:	d902      	bls.n	800d956 <SPI_WaitFlagStateUntilTimeout+0x56>
 800d950:	69fb      	ldr	r3, [r7, #28]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d13d      	bne.n	800d9d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	685a      	ldr	r2, [r3, #4]
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800d964:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	685b      	ldr	r3, [r3, #4]
 800d96a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d96e:	d111      	bne.n	800d994 <SPI_WaitFlagStateUntilTimeout+0x94>
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	689b      	ldr	r3, [r3, #8]
 800d974:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d978:	d004      	beq.n	800d984 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	689b      	ldr	r3, [r3, #8]
 800d97e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d982:	d107      	bne.n	800d994 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	681a      	ldr	r2, [r3, #0]
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d992:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d998:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d99c:	d10f      	bne.n	800d9be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	681a      	ldr	r2, [r3, #0]
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d9ac:	601a      	str	r2, [r3, #0]
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	681a      	ldr	r2, [r3, #0]
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d9bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	2201      	movs	r2, #1
 800d9c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800d9ce:	2303      	movs	r3, #3
 800d9d0:	e017      	b.n	800da02 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d9d2:	697b      	ldr	r3, [r7, #20]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d101      	bne.n	800d9dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800d9d8:	2300      	movs	r3, #0
 800d9da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800d9dc:	697b      	ldr	r3, [r7, #20]
 800d9de:	3b01      	subs	r3, #1
 800d9e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	689a      	ldr	r2, [r3, #8]
 800d9e8:	68bb      	ldr	r3, [r7, #8]
 800d9ea:	4013      	ands	r3, r2
 800d9ec:	68ba      	ldr	r2, [r7, #8]
 800d9ee:	429a      	cmp	r2, r3
 800d9f0:	bf0c      	ite	eq
 800d9f2:	2301      	moveq	r3, #1
 800d9f4:	2300      	movne	r3, #0
 800d9f6:	b2db      	uxtb	r3, r3
 800d9f8:	461a      	mov	r2, r3
 800d9fa:	79fb      	ldrb	r3, [r7, #7]
 800d9fc:	429a      	cmp	r2, r3
 800d9fe:	d19b      	bne.n	800d938 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800da00:	2300      	movs	r3, #0
}
 800da02:	4618      	mov	r0, r3
 800da04:	3720      	adds	r7, #32
 800da06:	46bd      	mov	sp, r7
 800da08:	bd80      	pop	{r7, pc}
 800da0a:	bf00      	nop
 800da0c:	20000154 	.word	0x20000154

0800da10 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b086      	sub	sp, #24
 800da14:	af02      	add	r7, sp, #8
 800da16:	60f8      	str	r0, [r7, #12]
 800da18:	60b9      	str	r1, [r7, #8]
 800da1a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	685b      	ldr	r3, [r3, #4]
 800da20:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800da24:	d111      	bne.n	800da4a <SPI_EndRxTransaction+0x3a>
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	689b      	ldr	r3, [r3, #8]
 800da2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800da2e:	d004      	beq.n	800da3a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	689b      	ldr	r3, [r3, #8]
 800da34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800da38:	d107      	bne.n	800da4a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	681a      	ldr	r2, [r3, #0]
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800da48:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	685b      	ldr	r3, [r3, #4]
 800da4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800da52:	d12a      	bne.n	800daaa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	689b      	ldr	r3, [r3, #8]
 800da58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800da5c:	d012      	beq.n	800da84 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	9300      	str	r3, [sp, #0]
 800da62:	68bb      	ldr	r3, [r7, #8]
 800da64:	2200      	movs	r2, #0
 800da66:	2180      	movs	r1, #128	@ 0x80
 800da68:	68f8      	ldr	r0, [r7, #12]
 800da6a:	f7ff ff49 	bl	800d900 <SPI_WaitFlagStateUntilTimeout>
 800da6e:	4603      	mov	r3, r0
 800da70:	2b00      	cmp	r3, #0
 800da72:	d02d      	beq.n	800dad0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da78:	f043 0220 	orr.w	r2, r3, #32
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800da80:	2303      	movs	r3, #3
 800da82:	e026      	b.n	800dad2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	9300      	str	r3, [sp, #0]
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	2200      	movs	r2, #0
 800da8c:	2101      	movs	r1, #1
 800da8e:	68f8      	ldr	r0, [r7, #12]
 800da90:	f7ff ff36 	bl	800d900 <SPI_WaitFlagStateUntilTimeout>
 800da94:	4603      	mov	r3, r0
 800da96:	2b00      	cmp	r3, #0
 800da98:	d01a      	beq.n	800dad0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da9e:	f043 0220 	orr.w	r2, r3, #32
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800daa6:	2303      	movs	r3, #3
 800daa8:	e013      	b.n	800dad2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	9300      	str	r3, [sp, #0]
 800daae:	68bb      	ldr	r3, [r7, #8]
 800dab0:	2200      	movs	r2, #0
 800dab2:	2101      	movs	r1, #1
 800dab4:	68f8      	ldr	r0, [r7, #12]
 800dab6:	f7ff ff23 	bl	800d900 <SPI_WaitFlagStateUntilTimeout>
 800daba:	4603      	mov	r3, r0
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d007      	beq.n	800dad0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dac4:	f043 0220 	orr.w	r2, r3, #32
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800dacc:	2303      	movs	r3, #3
 800dace:	e000      	b.n	800dad2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800dad0:	2300      	movs	r3, #0
}
 800dad2:	4618      	mov	r0, r3
 800dad4:	3710      	adds	r7, #16
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}
	...

0800dadc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b088      	sub	sp, #32
 800dae0:	af02      	add	r7, sp, #8
 800dae2:	60f8      	str	r0, [r7, #12]
 800dae4:	60b9      	str	r1, [r7, #8]
 800dae6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	9300      	str	r3, [sp, #0]
 800daec:	68bb      	ldr	r3, [r7, #8]
 800daee:	2201      	movs	r2, #1
 800daf0:	2102      	movs	r1, #2
 800daf2:	68f8      	ldr	r0, [r7, #12]
 800daf4:	f7ff ff04 	bl	800d900 <SPI_WaitFlagStateUntilTimeout>
 800daf8:	4603      	mov	r3, r0
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d007      	beq.n	800db0e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800db02:	f043 0220 	orr.w	r2, r3, #32
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800db0a:	2303      	movs	r3, #3
 800db0c:	e032      	b.n	800db74 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800db0e:	4b1b      	ldr	r3, [pc, #108]	@ (800db7c <SPI_EndRxTxTransaction+0xa0>)
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	4a1b      	ldr	r2, [pc, #108]	@ (800db80 <SPI_EndRxTxTransaction+0xa4>)
 800db14:	fba2 2303 	umull	r2, r3, r2, r3
 800db18:	0d5b      	lsrs	r3, r3, #21
 800db1a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800db1e:	fb02 f303 	mul.w	r3, r2, r3
 800db22:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	685b      	ldr	r3, [r3, #4]
 800db28:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800db2c:	d112      	bne.n	800db54 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	9300      	str	r3, [sp, #0]
 800db32:	68bb      	ldr	r3, [r7, #8]
 800db34:	2200      	movs	r2, #0
 800db36:	2180      	movs	r1, #128	@ 0x80
 800db38:	68f8      	ldr	r0, [r7, #12]
 800db3a:	f7ff fee1 	bl	800d900 <SPI_WaitFlagStateUntilTimeout>
 800db3e:	4603      	mov	r3, r0
 800db40:	2b00      	cmp	r3, #0
 800db42:	d016      	beq.n	800db72 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800db48:	f043 0220 	orr.w	r2, r3, #32
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800db50:	2303      	movs	r3, #3
 800db52:	e00f      	b.n	800db74 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800db54:	697b      	ldr	r3, [r7, #20]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d00a      	beq.n	800db70 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800db5a:	697b      	ldr	r3, [r7, #20]
 800db5c:	3b01      	subs	r3, #1
 800db5e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	689b      	ldr	r3, [r3, #8]
 800db66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800db6a:	2b80      	cmp	r3, #128	@ 0x80
 800db6c:	d0f2      	beq.n	800db54 <SPI_EndRxTxTransaction+0x78>
 800db6e:	e000      	b.n	800db72 <SPI_EndRxTxTransaction+0x96>
        break;
 800db70:	bf00      	nop
  }

  return HAL_OK;
 800db72:	2300      	movs	r3, #0
}
 800db74:	4618      	mov	r0, r3
 800db76:	3718      	adds	r7, #24
 800db78:	46bd      	mov	sp, r7
 800db7a:	bd80      	pop	{r7, pc}
 800db7c:	20000154 	.word	0x20000154
 800db80:	165e9f81 	.word	0x165e9f81

0800db84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b082      	sub	sp, #8
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d101      	bne.n	800db96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800db92:	2301      	movs	r3, #1
 800db94:	e041      	b.n	800dc1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800db9c:	b2db      	uxtb	r3, r3
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d106      	bne.n	800dbb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	2200      	movs	r2, #0
 800dba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800dbaa:	6878      	ldr	r0, [r7, #4]
 800dbac:	f7fc faba 	bl	800a124 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2202      	movs	r2, #2
 800dbb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	681a      	ldr	r2, [r3, #0]
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	3304      	adds	r3, #4
 800dbc0:	4619      	mov	r1, r3
 800dbc2:	4610      	mov	r0, r2
 800dbc4:	f000 fc58 	bl	800e478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2201      	movs	r2, #1
 800dbcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2201      	movs	r2, #1
 800dbd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	2201      	movs	r2, #1
 800dbdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2201      	movs	r2, #1
 800dbe4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2201      	movs	r2, #1
 800dbec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2201      	movs	r2, #1
 800dbf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	2201      	movs	r2, #1
 800dbfc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2201      	movs	r2, #1
 800dc04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2201      	movs	r2, #1
 800dc0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2201      	movs	r2, #1
 800dc14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800dc18:	2300      	movs	r3, #0
}
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	3708      	adds	r7, #8
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	bd80      	pop	{r7, pc}
	...

0800dc24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800dc24:	b480      	push	{r7}
 800dc26:	b085      	sub	sp, #20
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dc32:	b2db      	uxtb	r3, r3
 800dc34:	2b01      	cmp	r3, #1
 800dc36:	d001      	beq.n	800dc3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800dc38:	2301      	movs	r3, #1
 800dc3a:	e04e      	b.n	800dcda <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2202      	movs	r2, #2
 800dc40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	68da      	ldr	r2, [r3, #12]
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	f042 0201 	orr.w	r2, r2, #1
 800dc52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	4a23      	ldr	r2, [pc, #140]	@ (800dce8 <HAL_TIM_Base_Start_IT+0xc4>)
 800dc5a:	4293      	cmp	r3, r2
 800dc5c:	d022      	beq.n	800dca4 <HAL_TIM_Base_Start_IT+0x80>
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dc66:	d01d      	beq.n	800dca4 <HAL_TIM_Base_Start_IT+0x80>
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	4a1f      	ldr	r2, [pc, #124]	@ (800dcec <HAL_TIM_Base_Start_IT+0xc8>)
 800dc6e:	4293      	cmp	r3, r2
 800dc70:	d018      	beq.n	800dca4 <HAL_TIM_Base_Start_IT+0x80>
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	4a1e      	ldr	r2, [pc, #120]	@ (800dcf0 <HAL_TIM_Base_Start_IT+0xcc>)
 800dc78:	4293      	cmp	r3, r2
 800dc7a:	d013      	beq.n	800dca4 <HAL_TIM_Base_Start_IT+0x80>
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	4a1c      	ldr	r2, [pc, #112]	@ (800dcf4 <HAL_TIM_Base_Start_IT+0xd0>)
 800dc82:	4293      	cmp	r3, r2
 800dc84:	d00e      	beq.n	800dca4 <HAL_TIM_Base_Start_IT+0x80>
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	4a1b      	ldr	r2, [pc, #108]	@ (800dcf8 <HAL_TIM_Base_Start_IT+0xd4>)
 800dc8c:	4293      	cmp	r3, r2
 800dc8e:	d009      	beq.n	800dca4 <HAL_TIM_Base_Start_IT+0x80>
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	4a19      	ldr	r2, [pc, #100]	@ (800dcfc <HAL_TIM_Base_Start_IT+0xd8>)
 800dc96:	4293      	cmp	r3, r2
 800dc98:	d004      	beq.n	800dca4 <HAL_TIM_Base_Start_IT+0x80>
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	4a18      	ldr	r2, [pc, #96]	@ (800dd00 <HAL_TIM_Base_Start_IT+0xdc>)
 800dca0:	4293      	cmp	r3, r2
 800dca2:	d111      	bne.n	800dcc8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	689b      	ldr	r3, [r3, #8]
 800dcaa:	f003 0307 	and.w	r3, r3, #7
 800dcae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	2b06      	cmp	r3, #6
 800dcb4:	d010      	beq.n	800dcd8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	681a      	ldr	r2, [r3, #0]
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	f042 0201 	orr.w	r2, r2, #1
 800dcc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dcc6:	e007      	b.n	800dcd8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	681a      	ldr	r2, [r3, #0]
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	f042 0201 	orr.w	r2, r2, #1
 800dcd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800dcd8:	2300      	movs	r3, #0
}
 800dcda:	4618      	mov	r0, r3
 800dcdc:	3714      	adds	r7, #20
 800dcde:	46bd      	mov	sp, r7
 800dce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce4:	4770      	bx	lr
 800dce6:	bf00      	nop
 800dce8:	40010000 	.word	0x40010000
 800dcec:	40000400 	.word	0x40000400
 800dcf0:	40000800 	.word	0x40000800
 800dcf4:	40000c00 	.word	0x40000c00
 800dcf8:	40010400 	.word	0x40010400
 800dcfc:	40014000 	.word	0x40014000
 800dd00:	40001800 	.word	0x40001800

0800dd04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b082      	sub	sp, #8
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d101      	bne.n	800dd16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800dd12:	2301      	movs	r3, #1
 800dd14:	e041      	b.n	800dd9a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dd1c:	b2db      	uxtb	r3, r3
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d106      	bne.n	800dd30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	2200      	movs	r2, #0
 800dd26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800dd2a:	6878      	ldr	r0, [r7, #4]
 800dd2c:	f7fc f9d8 	bl	800a0e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	2202      	movs	r2, #2
 800dd34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681a      	ldr	r2, [r3, #0]
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	3304      	adds	r3, #4
 800dd40:	4619      	mov	r1, r3
 800dd42:	4610      	mov	r0, r2
 800dd44:	f000 fb98 	bl	800e478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	2201      	movs	r2, #1
 800dd4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	2201      	movs	r2, #1
 800dd54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	2201      	movs	r2, #1
 800dd5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2201      	movs	r2, #1
 800dd64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	2201      	movs	r2, #1
 800dd6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2201      	movs	r2, #1
 800dd74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2201      	movs	r2, #1
 800dd7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2201      	movs	r2, #1
 800dd84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	2201      	movs	r2, #1
 800dd8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	2201      	movs	r2, #1
 800dd94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800dd98:	2300      	movs	r3, #0
}
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	3708      	adds	r7, #8
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}
	...

0800dda4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b084      	sub	sp, #16
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
 800ddac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d109      	bne.n	800ddc8 <HAL_TIM_PWM_Start+0x24>
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ddba:	b2db      	uxtb	r3, r3
 800ddbc:	2b01      	cmp	r3, #1
 800ddbe:	bf14      	ite	ne
 800ddc0:	2301      	movne	r3, #1
 800ddc2:	2300      	moveq	r3, #0
 800ddc4:	b2db      	uxtb	r3, r3
 800ddc6:	e022      	b.n	800de0e <HAL_TIM_PWM_Start+0x6a>
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	2b04      	cmp	r3, #4
 800ddcc:	d109      	bne.n	800dde2 <HAL_TIM_PWM_Start+0x3e>
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ddd4:	b2db      	uxtb	r3, r3
 800ddd6:	2b01      	cmp	r3, #1
 800ddd8:	bf14      	ite	ne
 800ddda:	2301      	movne	r3, #1
 800dddc:	2300      	moveq	r3, #0
 800ddde:	b2db      	uxtb	r3, r3
 800dde0:	e015      	b.n	800de0e <HAL_TIM_PWM_Start+0x6a>
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	2b08      	cmp	r3, #8
 800dde6:	d109      	bne.n	800ddfc <HAL_TIM_PWM_Start+0x58>
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ddee:	b2db      	uxtb	r3, r3
 800ddf0:	2b01      	cmp	r3, #1
 800ddf2:	bf14      	ite	ne
 800ddf4:	2301      	movne	r3, #1
 800ddf6:	2300      	moveq	r3, #0
 800ddf8:	b2db      	uxtb	r3, r3
 800ddfa:	e008      	b.n	800de0e <HAL_TIM_PWM_Start+0x6a>
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800de02:	b2db      	uxtb	r3, r3
 800de04:	2b01      	cmp	r3, #1
 800de06:	bf14      	ite	ne
 800de08:	2301      	movne	r3, #1
 800de0a:	2300      	moveq	r3, #0
 800de0c:	b2db      	uxtb	r3, r3
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d001      	beq.n	800de16 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800de12:	2301      	movs	r3, #1
 800de14:	e07c      	b.n	800df10 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800de16:	683b      	ldr	r3, [r7, #0]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d104      	bne.n	800de26 <HAL_TIM_PWM_Start+0x82>
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2202      	movs	r2, #2
 800de20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800de24:	e013      	b.n	800de4e <HAL_TIM_PWM_Start+0xaa>
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	2b04      	cmp	r3, #4
 800de2a:	d104      	bne.n	800de36 <HAL_TIM_PWM_Start+0x92>
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	2202      	movs	r2, #2
 800de30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800de34:	e00b      	b.n	800de4e <HAL_TIM_PWM_Start+0xaa>
 800de36:	683b      	ldr	r3, [r7, #0]
 800de38:	2b08      	cmp	r3, #8
 800de3a:	d104      	bne.n	800de46 <HAL_TIM_PWM_Start+0xa2>
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2202      	movs	r2, #2
 800de40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800de44:	e003      	b.n	800de4e <HAL_TIM_PWM_Start+0xaa>
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	2202      	movs	r2, #2
 800de4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	2201      	movs	r2, #1
 800de54:	6839      	ldr	r1, [r7, #0]
 800de56:	4618      	mov	r0, r3
 800de58:	f000 fe04 	bl	800ea64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	4a2d      	ldr	r2, [pc, #180]	@ (800df18 <HAL_TIM_PWM_Start+0x174>)
 800de62:	4293      	cmp	r3, r2
 800de64:	d004      	beq.n	800de70 <HAL_TIM_PWM_Start+0xcc>
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	4a2c      	ldr	r2, [pc, #176]	@ (800df1c <HAL_TIM_PWM_Start+0x178>)
 800de6c:	4293      	cmp	r3, r2
 800de6e:	d101      	bne.n	800de74 <HAL_TIM_PWM_Start+0xd0>
 800de70:	2301      	movs	r3, #1
 800de72:	e000      	b.n	800de76 <HAL_TIM_PWM_Start+0xd2>
 800de74:	2300      	movs	r3, #0
 800de76:	2b00      	cmp	r3, #0
 800de78:	d007      	beq.n	800de8a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800de88:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	4a22      	ldr	r2, [pc, #136]	@ (800df18 <HAL_TIM_PWM_Start+0x174>)
 800de90:	4293      	cmp	r3, r2
 800de92:	d022      	beq.n	800deda <HAL_TIM_PWM_Start+0x136>
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800de9c:	d01d      	beq.n	800deda <HAL_TIM_PWM_Start+0x136>
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	4a1f      	ldr	r2, [pc, #124]	@ (800df20 <HAL_TIM_PWM_Start+0x17c>)
 800dea4:	4293      	cmp	r3, r2
 800dea6:	d018      	beq.n	800deda <HAL_TIM_PWM_Start+0x136>
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	4a1d      	ldr	r2, [pc, #116]	@ (800df24 <HAL_TIM_PWM_Start+0x180>)
 800deae:	4293      	cmp	r3, r2
 800deb0:	d013      	beq.n	800deda <HAL_TIM_PWM_Start+0x136>
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	4a1c      	ldr	r2, [pc, #112]	@ (800df28 <HAL_TIM_PWM_Start+0x184>)
 800deb8:	4293      	cmp	r3, r2
 800deba:	d00e      	beq.n	800deda <HAL_TIM_PWM_Start+0x136>
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	4a16      	ldr	r2, [pc, #88]	@ (800df1c <HAL_TIM_PWM_Start+0x178>)
 800dec2:	4293      	cmp	r3, r2
 800dec4:	d009      	beq.n	800deda <HAL_TIM_PWM_Start+0x136>
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	4a18      	ldr	r2, [pc, #96]	@ (800df2c <HAL_TIM_PWM_Start+0x188>)
 800decc:	4293      	cmp	r3, r2
 800dece:	d004      	beq.n	800deda <HAL_TIM_PWM_Start+0x136>
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	4a16      	ldr	r2, [pc, #88]	@ (800df30 <HAL_TIM_PWM_Start+0x18c>)
 800ded6:	4293      	cmp	r3, r2
 800ded8:	d111      	bne.n	800defe <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	689b      	ldr	r3, [r3, #8]
 800dee0:	f003 0307 	and.w	r3, r3, #7
 800dee4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	2b06      	cmp	r3, #6
 800deea:	d010      	beq.n	800df0e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	681a      	ldr	r2, [r3, #0]
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	f042 0201 	orr.w	r2, r2, #1
 800defa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800defc:	e007      	b.n	800df0e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	681a      	ldr	r2, [r3, #0]
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	f042 0201 	orr.w	r2, r2, #1
 800df0c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800df0e:	2300      	movs	r3, #0
}
 800df10:	4618      	mov	r0, r3
 800df12:	3710      	adds	r7, #16
 800df14:	46bd      	mov	sp, r7
 800df16:	bd80      	pop	{r7, pc}
 800df18:	40010000 	.word	0x40010000
 800df1c:	40010400 	.word	0x40010400
 800df20:	40000400 	.word	0x40000400
 800df24:	40000800 	.word	0x40000800
 800df28:	40000c00 	.word	0x40000c00
 800df2c:	40014000 	.word	0x40014000
 800df30:	40001800 	.word	0x40001800

0800df34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b084      	sub	sp, #16
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	68db      	ldr	r3, [r3, #12]
 800df42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	691b      	ldr	r3, [r3, #16]
 800df4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800df4c:	68bb      	ldr	r3, [r7, #8]
 800df4e:	f003 0302 	and.w	r3, r3, #2
 800df52:	2b00      	cmp	r3, #0
 800df54:	d020      	beq.n	800df98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	f003 0302 	and.w	r3, r3, #2
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d01b      	beq.n	800df98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	f06f 0202 	mvn.w	r2, #2
 800df68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	2201      	movs	r2, #1
 800df6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	699b      	ldr	r3, [r3, #24]
 800df76:	f003 0303 	and.w	r3, r3, #3
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d003      	beq.n	800df86 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800df7e:	6878      	ldr	r0, [r7, #4]
 800df80:	f000 fa5b 	bl	800e43a <HAL_TIM_IC_CaptureCallback>
 800df84:	e005      	b.n	800df92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800df86:	6878      	ldr	r0, [r7, #4]
 800df88:	f000 fa4d 	bl	800e426 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800df8c:	6878      	ldr	r0, [r7, #4]
 800df8e:	f000 fa5e 	bl	800e44e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	2200      	movs	r2, #0
 800df96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800df98:	68bb      	ldr	r3, [r7, #8]
 800df9a:	f003 0304 	and.w	r3, r3, #4
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d020      	beq.n	800dfe4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	f003 0304 	and.w	r3, r3, #4
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d01b      	beq.n	800dfe4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	f06f 0204 	mvn.w	r2, #4
 800dfb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2202      	movs	r2, #2
 800dfba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	699b      	ldr	r3, [r3, #24]
 800dfc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d003      	beq.n	800dfd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dfca:	6878      	ldr	r0, [r7, #4]
 800dfcc:	f000 fa35 	bl	800e43a <HAL_TIM_IC_CaptureCallback>
 800dfd0:	e005      	b.n	800dfde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dfd2:	6878      	ldr	r0, [r7, #4]
 800dfd4:	f000 fa27 	bl	800e426 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dfd8:	6878      	ldr	r0, [r7, #4]
 800dfda:	f000 fa38 	bl	800e44e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	2200      	movs	r2, #0
 800dfe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800dfe4:	68bb      	ldr	r3, [r7, #8]
 800dfe6:	f003 0308 	and.w	r3, r3, #8
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d020      	beq.n	800e030 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	f003 0308 	and.w	r3, r3, #8
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d01b      	beq.n	800e030 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	f06f 0208 	mvn.w	r2, #8
 800e000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	2204      	movs	r2, #4
 800e006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	69db      	ldr	r3, [r3, #28]
 800e00e:	f003 0303 	and.w	r3, r3, #3
 800e012:	2b00      	cmp	r3, #0
 800e014:	d003      	beq.n	800e01e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e016:	6878      	ldr	r0, [r7, #4]
 800e018:	f000 fa0f 	bl	800e43a <HAL_TIM_IC_CaptureCallback>
 800e01c:	e005      	b.n	800e02a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e01e:	6878      	ldr	r0, [r7, #4]
 800e020:	f000 fa01 	bl	800e426 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e024:	6878      	ldr	r0, [r7, #4]
 800e026:	f000 fa12 	bl	800e44e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	2200      	movs	r2, #0
 800e02e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e030:	68bb      	ldr	r3, [r7, #8]
 800e032:	f003 0310 	and.w	r3, r3, #16
 800e036:	2b00      	cmp	r3, #0
 800e038:	d020      	beq.n	800e07c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	f003 0310 	and.w	r3, r3, #16
 800e040:	2b00      	cmp	r3, #0
 800e042:	d01b      	beq.n	800e07c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	f06f 0210 	mvn.w	r2, #16
 800e04c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	2208      	movs	r2, #8
 800e052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	69db      	ldr	r3, [r3, #28]
 800e05a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d003      	beq.n	800e06a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e062:	6878      	ldr	r0, [r7, #4]
 800e064:	f000 f9e9 	bl	800e43a <HAL_TIM_IC_CaptureCallback>
 800e068:	e005      	b.n	800e076 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e06a:	6878      	ldr	r0, [r7, #4]
 800e06c:	f000 f9db 	bl	800e426 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e070:	6878      	ldr	r0, [r7, #4]
 800e072:	f000 f9ec 	bl	800e44e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	2200      	movs	r2, #0
 800e07a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	f003 0301 	and.w	r3, r3, #1
 800e082:	2b00      	cmp	r3, #0
 800e084:	d00c      	beq.n	800e0a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	f003 0301 	and.w	r3, r3, #1
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d007      	beq.n	800e0a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	f06f 0201 	mvn.w	r2, #1
 800e098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e09a:	6878      	ldr	r0, [r7, #4]
 800e09c:	f7fb fb66 	bl	800976c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800e0a0:	68bb      	ldr	r3, [r7, #8]
 800e0a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d00c      	beq.n	800e0c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d007      	beq.n	800e0c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800e0bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e0be:	6878      	ldr	r0, [r7, #4]
 800e0c0:	f000 fdce 	bl	800ec60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d00c      	beq.n	800e0e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d007      	beq.n	800e0e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e0e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e0e2:	6878      	ldr	r0, [r7, #4]
 800e0e4:	f000 f9bd 	bl	800e462 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e0e8:	68bb      	ldr	r3, [r7, #8]
 800e0ea:	f003 0320 	and.w	r3, r3, #32
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d00c      	beq.n	800e10c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	f003 0320 	and.w	r3, r3, #32
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d007      	beq.n	800e10c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	f06f 0220 	mvn.w	r2, #32
 800e104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e106:	6878      	ldr	r0, [r7, #4]
 800e108:	f000 fda0 	bl	800ec4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e10c:	bf00      	nop
 800e10e:	3710      	adds	r7, #16
 800e110:	46bd      	mov	sp, r7
 800e112:	bd80      	pop	{r7, pc}

0800e114 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b086      	sub	sp, #24
 800e118:	af00      	add	r7, sp, #0
 800e11a:	60f8      	str	r0, [r7, #12]
 800e11c:	60b9      	str	r1, [r7, #8]
 800e11e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e120:	2300      	movs	r3, #0
 800e122:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e12a:	2b01      	cmp	r3, #1
 800e12c:	d101      	bne.n	800e132 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e12e:	2302      	movs	r3, #2
 800e130:	e0ae      	b.n	800e290 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	2201      	movs	r2, #1
 800e136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	2b0c      	cmp	r3, #12
 800e13e:	f200 809f 	bhi.w	800e280 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800e142:	a201      	add	r2, pc, #4	@ (adr r2, 800e148 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e148:	0800e17d 	.word	0x0800e17d
 800e14c:	0800e281 	.word	0x0800e281
 800e150:	0800e281 	.word	0x0800e281
 800e154:	0800e281 	.word	0x0800e281
 800e158:	0800e1bd 	.word	0x0800e1bd
 800e15c:	0800e281 	.word	0x0800e281
 800e160:	0800e281 	.word	0x0800e281
 800e164:	0800e281 	.word	0x0800e281
 800e168:	0800e1ff 	.word	0x0800e1ff
 800e16c:	0800e281 	.word	0x0800e281
 800e170:	0800e281 	.word	0x0800e281
 800e174:	0800e281 	.word	0x0800e281
 800e178:	0800e23f 	.word	0x0800e23f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	68b9      	ldr	r1, [r7, #8]
 800e182:	4618      	mov	r0, r3
 800e184:	f000 fa24 	bl	800e5d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	699a      	ldr	r2, [r3, #24]
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	f042 0208 	orr.w	r2, r2, #8
 800e196:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	699a      	ldr	r2, [r3, #24]
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	f022 0204 	bic.w	r2, r2, #4
 800e1a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	6999      	ldr	r1, [r3, #24]
 800e1ae:	68bb      	ldr	r3, [r7, #8]
 800e1b0:	691a      	ldr	r2, [r3, #16]
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	430a      	orrs	r2, r1
 800e1b8:	619a      	str	r2, [r3, #24]
      break;
 800e1ba:	e064      	b.n	800e286 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	68b9      	ldr	r1, [r7, #8]
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	f000 fa74 	bl	800e6b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	699a      	ldr	r2, [r3, #24]
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e1d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	699a      	ldr	r2, [r3, #24]
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e1e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	6999      	ldr	r1, [r3, #24]
 800e1ee:	68bb      	ldr	r3, [r7, #8]
 800e1f0:	691b      	ldr	r3, [r3, #16]
 800e1f2:	021a      	lsls	r2, r3, #8
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	430a      	orrs	r2, r1
 800e1fa:	619a      	str	r2, [r3, #24]
      break;
 800e1fc:	e043      	b.n	800e286 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	68b9      	ldr	r1, [r7, #8]
 800e204:	4618      	mov	r0, r3
 800e206:	f000 fac9 	bl	800e79c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	69da      	ldr	r2, [r3, #28]
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	f042 0208 	orr.w	r2, r2, #8
 800e218:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	69da      	ldr	r2, [r3, #28]
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	f022 0204 	bic.w	r2, r2, #4
 800e228:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	69d9      	ldr	r1, [r3, #28]
 800e230:	68bb      	ldr	r3, [r7, #8]
 800e232:	691a      	ldr	r2, [r3, #16]
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	430a      	orrs	r2, r1
 800e23a:	61da      	str	r2, [r3, #28]
      break;
 800e23c:	e023      	b.n	800e286 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	68b9      	ldr	r1, [r7, #8]
 800e244:	4618      	mov	r0, r3
 800e246:	f000 fb1d 	bl	800e884 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	69da      	ldr	r2, [r3, #28]
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e258:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	69da      	ldr	r2, [r3, #28]
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e268:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	69d9      	ldr	r1, [r3, #28]
 800e270:	68bb      	ldr	r3, [r7, #8]
 800e272:	691b      	ldr	r3, [r3, #16]
 800e274:	021a      	lsls	r2, r3, #8
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	430a      	orrs	r2, r1
 800e27c:	61da      	str	r2, [r3, #28]
      break;
 800e27e:	e002      	b.n	800e286 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800e280:	2301      	movs	r3, #1
 800e282:	75fb      	strb	r3, [r7, #23]
      break;
 800e284:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	2200      	movs	r2, #0
 800e28a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e28e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e290:	4618      	mov	r0, r3
 800e292:	3718      	adds	r7, #24
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}

0800e298 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b084      	sub	sp, #16
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
 800e2a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e2ac:	2b01      	cmp	r3, #1
 800e2ae:	d101      	bne.n	800e2b4 <HAL_TIM_ConfigClockSource+0x1c>
 800e2b0:	2302      	movs	r3, #2
 800e2b2:	e0b4      	b.n	800e41e <HAL_TIM_ConfigClockSource+0x186>
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	2201      	movs	r2, #1
 800e2b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	2202      	movs	r2, #2
 800e2c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	689b      	ldr	r3, [r3, #8]
 800e2ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e2cc:	68bb      	ldr	r3, [r7, #8]
 800e2ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800e2d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e2d4:	68bb      	ldr	r3, [r7, #8]
 800e2d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e2da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	68ba      	ldr	r2, [r7, #8]
 800e2e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e2ec:	d03e      	beq.n	800e36c <HAL_TIM_ConfigClockSource+0xd4>
 800e2ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e2f2:	f200 8087 	bhi.w	800e404 <HAL_TIM_ConfigClockSource+0x16c>
 800e2f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e2fa:	f000 8086 	beq.w	800e40a <HAL_TIM_ConfigClockSource+0x172>
 800e2fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e302:	d87f      	bhi.n	800e404 <HAL_TIM_ConfigClockSource+0x16c>
 800e304:	2b70      	cmp	r3, #112	@ 0x70
 800e306:	d01a      	beq.n	800e33e <HAL_TIM_ConfigClockSource+0xa6>
 800e308:	2b70      	cmp	r3, #112	@ 0x70
 800e30a:	d87b      	bhi.n	800e404 <HAL_TIM_ConfigClockSource+0x16c>
 800e30c:	2b60      	cmp	r3, #96	@ 0x60
 800e30e:	d050      	beq.n	800e3b2 <HAL_TIM_ConfigClockSource+0x11a>
 800e310:	2b60      	cmp	r3, #96	@ 0x60
 800e312:	d877      	bhi.n	800e404 <HAL_TIM_ConfigClockSource+0x16c>
 800e314:	2b50      	cmp	r3, #80	@ 0x50
 800e316:	d03c      	beq.n	800e392 <HAL_TIM_ConfigClockSource+0xfa>
 800e318:	2b50      	cmp	r3, #80	@ 0x50
 800e31a:	d873      	bhi.n	800e404 <HAL_TIM_ConfigClockSource+0x16c>
 800e31c:	2b40      	cmp	r3, #64	@ 0x40
 800e31e:	d058      	beq.n	800e3d2 <HAL_TIM_ConfigClockSource+0x13a>
 800e320:	2b40      	cmp	r3, #64	@ 0x40
 800e322:	d86f      	bhi.n	800e404 <HAL_TIM_ConfigClockSource+0x16c>
 800e324:	2b30      	cmp	r3, #48	@ 0x30
 800e326:	d064      	beq.n	800e3f2 <HAL_TIM_ConfigClockSource+0x15a>
 800e328:	2b30      	cmp	r3, #48	@ 0x30
 800e32a:	d86b      	bhi.n	800e404 <HAL_TIM_ConfigClockSource+0x16c>
 800e32c:	2b20      	cmp	r3, #32
 800e32e:	d060      	beq.n	800e3f2 <HAL_TIM_ConfigClockSource+0x15a>
 800e330:	2b20      	cmp	r3, #32
 800e332:	d867      	bhi.n	800e404 <HAL_TIM_ConfigClockSource+0x16c>
 800e334:	2b00      	cmp	r3, #0
 800e336:	d05c      	beq.n	800e3f2 <HAL_TIM_ConfigClockSource+0x15a>
 800e338:	2b10      	cmp	r3, #16
 800e33a:	d05a      	beq.n	800e3f2 <HAL_TIM_ConfigClockSource+0x15a>
 800e33c:	e062      	b.n	800e404 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e342:	683b      	ldr	r3, [r7, #0]
 800e344:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e346:	683b      	ldr	r3, [r7, #0]
 800e348:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e34a:	683b      	ldr	r3, [r7, #0]
 800e34c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e34e:	f000 fb69 	bl	800ea24 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	689b      	ldr	r3, [r3, #8]
 800e358:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e35a:	68bb      	ldr	r3, [r7, #8]
 800e35c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800e360:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	68ba      	ldr	r2, [r7, #8]
 800e368:	609a      	str	r2, [r3, #8]
      break;
 800e36a:	e04f      	b.n	800e40c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e370:	683b      	ldr	r3, [r7, #0]
 800e372:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e374:	683b      	ldr	r3, [r7, #0]
 800e376:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e378:	683b      	ldr	r3, [r7, #0]
 800e37a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e37c:	f000 fb52 	bl	800ea24 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	689a      	ldr	r2, [r3, #8]
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e38e:	609a      	str	r2, [r3, #8]
      break;
 800e390:	e03c      	b.n	800e40c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e396:	683b      	ldr	r3, [r7, #0]
 800e398:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e39a:	683b      	ldr	r3, [r7, #0]
 800e39c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e39e:	461a      	mov	r2, r3
 800e3a0:	f000 fac6 	bl	800e930 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	2150      	movs	r1, #80	@ 0x50
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	f000 fb1f 	bl	800e9ee <TIM_ITRx_SetConfig>
      break;
 800e3b0:	e02c      	b.n	800e40c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e3be:	461a      	mov	r2, r3
 800e3c0:	f000 fae5 	bl	800e98e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	2160      	movs	r1, #96	@ 0x60
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f000 fb0f 	bl	800e9ee <TIM_ITRx_SetConfig>
      break;
 800e3d0:	e01c      	b.n	800e40c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e3d6:	683b      	ldr	r3, [r7, #0]
 800e3d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e3da:	683b      	ldr	r3, [r7, #0]
 800e3dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e3de:	461a      	mov	r2, r3
 800e3e0:	f000 faa6 	bl	800e930 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	2140      	movs	r1, #64	@ 0x40
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	f000 faff 	bl	800e9ee <TIM_ITRx_SetConfig>
      break;
 800e3f0:	e00c      	b.n	800e40c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681a      	ldr	r2, [r3, #0]
 800e3f6:	683b      	ldr	r3, [r7, #0]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	4619      	mov	r1, r3
 800e3fc:	4610      	mov	r0, r2
 800e3fe:	f000 faf6 	bl	800e9ee <TIM_ITRx_SetConfig>
      break;
 800e402:	e003      	b.n	800e40c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800e404:	2301      	movs	r3, #1
 800e406:	73fb      	strb	r3, [r7, #15]
      break;
 800e408:	e000      	b.n	800e40c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800e40a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	2201      	movs	r2, #1
 800e410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	2200      	movs	r2, #0
 800e418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e41c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e41e:	4618      	mov	r0, r3
 800e420:	3710      	adds	r7, #16
 800e422:	46bd      	mov	sp, r7
 800e424:	bd80      	pop	{r7, pc}

0800e426 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e426:	b480      	push	{r7}
 800e428:	b083      	sub	sp, #12
 800e42a:	af00      	add	r7, sp, #0
 800e42c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e42e:	bf00      	nop
 800e430:	370c      	adds	r7, #12
 800e432:	46bd      	mov	sp, r7
 800e434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e438:	4770      	bx	lr

0800e43a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e43a:	b480      	push	{r7}
 800e43c:	b083      	sub	sp, #12
 800e43e:	af00      	add	r7, sp, #0
 800e440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e442:	bf00      	nop
 800e444:	370c      	adds	r7, #12
 800e446:	46bd      	mov	sp, r7
 800e448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44c:	4770      	bx	lr

0800e44e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e44e:	b480      	push	{r7}
 800e450:	b083      	sub	sp, #12
 800e452:	af00      	add	r7, sp, #0
 800e454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e456:	bf00      	nop
 800e458:	370c      	adds	r7, #12
 800e45a:	46bd      	mov	sp, r7
 800e45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e460:	4770      	bx	lr

0800e462 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e462:	b480      	push	{r7}
 800e464:	b083      	sub	sp, #12
 800e466:	af00      	add	r7, sp, #0
 800e468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e46a:	bf00      	nop
 800e46c:	370c      	adds	r7, #12
 800e46e:	46bd      	mov	sp, r7
 800e470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e474:	4770      	bx	lr
	...

0800e478 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e478:	b480      	push	{r7}
 800e47a:	b085      	sub	sp, #20
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
 800e480:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	4a46      	ldr	r2, [pc, #280]	@ (800e5a4 <TIM_Base_SetConfig+0x12c>)
 800e48c:	4293      	cmp	r3, r2
 800e48e:	d013      	beq.n	800e4b8 <TIM_Base_SetConfig+0x40>
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e496:	d00f      	beq.n	800e4b8 <TIM_Base_SetConfig+0x40>
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	4a43      	ldr	r2, [pc, #268]	@ (800e5a8 <TIM_Base_SetConfig+0x130>)
 800e49c:	4293      	cmp	r3, r2
 800e49e:	d00b      	beq.n	800e4b8 <TIM_Base_SetConfig+0x40>
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	4a42      	ldr	r2, [pc, #264]	@ (800e5ac <TIM_Base_SetConfig+0x134>)
 800e4a4:	4293      	cmp	r3, r2
 800e4a6:	d007      	beq.n	800e4b8 <TIM_Base_SetConfig+0x40>
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	4a41      	ldr	r2, [pc, #260]	@ (800e5b0 <TIM_Base_SetConfig+0x138>)
 800e4ac:	4293      	cmp	r3, r2
 800e4ae:	d003      	beq.n	800e4b8 <TIM_Base_SetConfig+0x40>
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	4a40      	ldr	r2, [pc, #256]	@ (800e5b4 <TIM_Base_SetConfig+0x13c>)
 800e4b4:	4293      	cmp	r3, r2
 800e4b6:	d108      	bne.n	800e4ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e4be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e4c0:	683b      	ldr	r3, [r7, #0]
 800e4c2:	685b      	ldr	r3, [r3, #4]
 800e4c4:	68fa      	ldr	r2, [r7, #12]
 800e4c6:	4313      	orrs	r3, r2
 800e4c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	4a35      	ldr	r2, [pc, #212]	@ (800e5a4 <TIM_Base_SetConfig+0x12c>)
 800e4ce:	4293      	cmp	r3, r2
 800e4d0:	d02b      	beq.n	800e52a <TIM_Base_SetConfig+0xb2>
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e4d8:	d027      	beq.n	800e52a <TIM_Base_SetConfig+0xb2>
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	4a32      	ldr	r2, [pc, #200]	@ (800e5a8 <TIM_Base_SetConfig+0x130>)
 800e4de:	4293      	cmp	r3, r2
 800e4e0:	d023      	beq.n	800e52a <TIM_Base_SetConfig+0xb2>
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	4a31      	ldr	r2, [pc, #196]	@ (800e5ac <TIM_Base_SetConfig+0x134>)
 800e4e6:	4293      	cmp	r3, r2
 800e4e8:	d01f      	beq.n	800e52a <TIM_Base_SetConfig+0xb2>
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	4a30      	ldr	r2, [pc, #192]	@ (800e5b0 <TIM_Base_SetConfig+0x138>)
 800e4ee:	4293      	cmp	r3, r2
 800e4f0:	d01b      	beq.n	800e52a <TIM_Base_SetConfig+0xb2>
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	4a2f      	ldr	r2, [pc, #188]	@ (800e5b4 <TIM_Base_SetConfig+0x13c>)
 800e4f6:	4293      	cmp	r3, r2
 800e4f8:	d017      	beq.n	800e52a <TIM_Base_SetConfig+0xb2>
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	4a2e      	ldr	r2, [pc, #184]	@ (800e5b8 <TIM_Base_SetConfig+0x140>)
 800e4fe:	4293      	cmp	r3, r2
 800e500:	d013      	beq.n	800e52a <TIM_Base_SetConfig+0xb2>
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	4a2d      	ldr	r2, [pc, #180]	@ (800e5bc <TIM_Base_SetConfig+0x144>)
 800e506:	4293      	cmp	r3, r2
 800e508:	d00f      	beq.n	800e52a <TIM_Base_SetConfig+0xb2>
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	4a2c      	ldr	r2, [pc, #176]	@ (800e5c0 <TIM_Base_SetConfig+0x148>)
 800e50e:	4293      	cmp	r3, r2
 800e510:	d00b      	beq.n	800e52a <TIM_Base_SetConfig+0xb2>
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	4a2b      	ldr	r2, [pc, #172]	@ (800e5c4 <TIM_Base_SetConfig+0x14c>)
 800e516:	4293      	cmp	r3, r2
 800e518:	d007      	beq.n	800e52a <TIM_Base_SetConfig+0xb2>
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	4a2a      	ldr	r2, [pc, #168]	@ (800e5c8 <TIM_Base_SetConfig+0x150>)
 800e51e:	4293      	cmp	r3, r2
 800e520:	d003      	beq.n	800e52a <TIM_Base_SetConfig+0xb2>
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	4a29      	ldr	r2, [pc, #164]	@ (800e5cc <TIM_Base_SetConfig+0x154>)
 800e526:	4293      	cmp	r3, r2
 800e528:	d108      	bne.n	800e53c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e530:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e532:	683b      	ldr	r3, [r7, #0]
 800e534:	68db      	ldr	r3, [r3, #12]
 800e536:	68fa      	ldr	r2, [r7, #12]
 800e538:	4313      	orrs	r3, r2
 800e53a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e542:	683b      	ldr	r3, [r7, #0]
 800e544:	695b      	ldr	r3, [r3, #20]
 800e546:	4313      	orrs	r3, r2
 800e548:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	68fa      	ldr	r2, [r7, #12]
 800e54e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e550:	683b      	ldr	r3, [r7, #0]
 800e552:	689a      	ldr	r2, [r3, #8]
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e558:	683b      	ldr	r3, [r7, #0]
 800e55a:	681a      	ldr	r2, [r3, #0]
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	4a10      	ldr	r2, [pc, #64]	@ (800e5a4 <TIM_Base_SetConfig+0x12c>)
 800e564:	4293      	cmp	r3, r2
 800e566:	d003      	beq.n	800e570 <TIM_Base_SetConfig+0xf8>
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	4a12      	ldr	r2, [pc, #72]	@ (800e5b4 <TIM_Base_SetConfig+0x13c>)
 800e56c:	4293      	cmp	r3, r2
 800e56e:	d103      	bne.n	800e578 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e570:	683b      	ldr	r3, [r7, #0]
 800e572:	691a      	ldr	r2, [r3, #16]
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	2201      	movs	r2, #1
 800e57c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	691b      	ldr	r3, [r3, #16]
 800e582:	f003 0301 	and.w	r3, r3, #1
 800e586:	2b01      	cmp	r3, #1
 800e588:	d105      	bne.n	800e596 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	691b      	ldr	r3, [r3, #16]
 800e58e:	f023 0201 	bic.w	r2, r3, #1
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	611a      	str	r2, [r3, #16]
  }
}
 800e596:	bf00      	nop
 800e598:	3714      	adds	r7, #20
 800e59a:	46bd      	mov	sp, r7
 800e59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a0:	4770      	bx	lr
 800e5a2:	bf00      	nop
 800e5a4:	40010000 	.word	0x40010000
 800e5a8:	40000400 	.word	0x40000400
 800e5ac:	40000800 	.word	0x40000800
 800e5b0:	40000c00 	.word	0x40000c00
 800e5b4:	40010400 	.word	0x40010400
 800e5b8:	40014000 	.word	0x40014000
 800e5bc:	40014400 	.word	0x40014400
 800e5c0:	40014800 	.word	0x40014800
 800e5c4:	40001800 	.word	0x40001800
 800e5c8:	40001c00 	.word	0x40001c00
 800e5cc:	40002000 	.word	0x40002000

0800e5d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e5d0:	b480      	push	{r7}
 800e5d2:	b087      	sub	sp, #28
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	6078      	str	r0, [r7, #4]
 800e5d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	6a1b      	ldr	r3, [r3, #32]
 800e5de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	6a1b      	ldr	r3, [r3, #32]
 800e5e4:	f023 0201 	bic.w	r2, r3, #1
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	685b      	ldr	r3, [r3, #4]
 800e5f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	699b      	ldr	r3, [r3, #24]
 800e5f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e5fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	f023 0303 	bic.w	r3, r3, #3
 800e606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e608:	683b      	ldr	r3, [r7, #0]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	68fa      	ldr	r2, [r7, #12]
 800e60e:	4313      	orrs	r3, r2
 800e610:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e612:	697b      	ldr	r3, [r7, #20]
 800e614:	f023 0302 	bic.w	r3, r3, #2
 800e618:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e61a:	683b      	ldr	r3, [r7, #0]
 800e61c:	689b      	ldr	r3, [r3, #8]
 800e61e:	697a      	ldr	r2, [r7, #20]
 800e620:	4313      	orrs	r3, r2
 800e622:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	4a20      	ldr	r2, [pc, #128]	@ (800e6a8 <TIM_OC1_SetConfig+0xd8>)
 800e628:	4293      	cmp	r3, r2
 800e62a:	d003      	beq.n	800e634 <TIM_OC1_SetConfig+0x64>
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	4a1f      	ldr	r2, [pc, #124]	@ (800e6ac <TIM_OC1_SetConfig+0xdc>)
 800e630:	4293      	cmp	r3, r2
 800e632:	d10c      	bne.n	800e64e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e634:	697b      	ldr	r3, [r7, #20]
 800e636:	f023 0308 	bic.w	r3, r3, #8
 800e63a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e63c:	683b      	ldr	r3, [r7, #0]
 800e63e:	68db      	ldr	r3, [r3, #12]
 800e640:	697a      	ldr	r2, [r7, #20]
 800e642:	4313      	orrs	r3, r2
 800e644:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e646:	697b      	ldr	r3, [r7, #20]
 800e648:	f023 0304 	bic.w	r3, r3, #4
 800e64c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	4a15      	ldr	r2, [pc, #84]	@ (800e6a8 <TIM_OC1_SetConfig+0xd8>)
 800e652:	4293      	cmp	r3, r2
 800e654:	d003      	beq.n	800e65e <TIM_OC1_SetConfig+0x8e>
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	4a14      	ldr	r2, [pc, #80]	@ (800e6ac <TIM_OC1_SetConfig+0xdc>)
 800e65a:	4293      	cmp	r3, r2
 800e65c:	d111      	bne.n	800e682 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e65e:	693b      	ldr	r3, [r7, #16]
 800e660:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e664:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e666:	693b      	ldr	r3, [r7, #16]
 800e668:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e66c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e66e:	683b      	ldr	r3, [r7, #0]
 800e670:	695b      	ldr	r3, [r3, #20]
 800e672:	693a      	ldr	r2, [r7, #16]
 800e674:	4313      	orrs	r3, r2
 800e676:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e678:	683b      	ldr	r3, [r7, #0]
 800e67a:	699b      	ldr	r3, [r3, #24]
 800e67c:	693a      	ldr	r2, [r7, #16]
 800e67e:	4313      	orrs	r3, r2
 800e680:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	693a      	ldr	r2, [r7, #16]
 800e686:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	68fa      	ldr	r2, [r7, #12]
 800e68c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e68e:	683b      	ldr	r3, [r7, #0]
 800e690:	685a      	ldr	r2, [r3, #4]
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	697a      	ldr	r2, [r7, #20]
 800e69a:	621a      	str	r2, [r3, #32]
}
 800e69c:	bf00      	nop
 800e69e:	371c      	adds	r7, #28
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a6:	4770      	bx	lr
 800e6a8:	40010000 	.word	0x40010000
 800e6ac:	40010400 	.word	0x40010400

0800e6b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e6b0:	b480      	push	{r7}
 800e6b2:	b087      	sub	sp, #28
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]
 800e6b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	6a1b      	ldr	r3, [r3, #32]
 800e6be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	6a1b      	ldr	r3, [r3, #32]
 800e6c4:	f023 0210 	bic.w	r2, r3, #16
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	685b      	ldr	r3, [r3, #4]
 800e6d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	699b      	ldr	r3, [r3, #24]
 800e6d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e6de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e6e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e6e8:	683b      	ldr	r3, [r7, #0]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	021b      	lsls	r3, r3, #8
 800e6ee:	68fa      	ldr	r2, [r7, #12]
 800e6f0:	4313      	orrs	r3, r2
 800e6f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e6f4:	697b      	ldr	r3, [r7, #20]
 800e6f6:	f023 0320 	bic.w	r3, r3, #32
 800e6fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e6fc:	683b      	ldr	r3, [r7, #0]
 800e6fe:	689b      	ldr	r3, [r3, #8]
 800e700:	011b      	lsls	r3, r3, #4
 800e702:	697a      	ldr	r2, [r7, #20]
 800e704:	4313      	orrs	r3, r2
 800e706:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	4a22      	ldr	r2, [pc, #136]	@ (800e794 <TIM_OC2_SetConfig+0xe4>)
 800e70c:	4293      	cmp	r3, r2
 800e70e:	d003      	beq.n	800e718 <TIM_OC2_SetConfig+0x68>
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	4a21      	ldr	r2, [pc, #132]	@ (800e798 <TIM_OC2_SetConfig+0xe8>)
 800e714:	4293      	cmp	r3, r2
 800e716:	d10d      	bne.n	800e734 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e718:	697b      	ldr	r3, [r7, #20]
 800e71a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e71e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	68db      	ldr	r3, [r3, #12]
 800e724:	011b      	lsls	r3, r3, #4
 800e726:	697a      	ldr	r2, [r7, #20]
 800e728:	4313      	orrs	r3, r2
 800e72a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e72c:	697b      	ldr	r3, [r7, #20]
 800e72e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e732:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	4a17      	ldr	r2, [pc, #92]	@ (800e794 <TIM_OC2_SetConfig+0xe4>)
 800e738:	4293      	cmp	r3, r2
 800e73a:	d003      	beq.n	800e744 <TIM_OC2_SetConfig+0x94>
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	4a16      	ldr	r2, [pc, #88]	@ (800e798 <TIM_OC2_SetConfig+0xe8>)
 800e740:	4293      	cmp	r3, r2
 800e742:	d113      	bne.n	800e76c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e744:	693b      	ldr	r3, [r7, #16]
 800e746:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e74a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e74c:	693b      	ldr	r3, [r7, #16]
 800e74e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e752:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e754:	683b      	ldr	r3, [r7, #0]
 800e756:	695b      	ldr	r3, [r3, #20]
 800e758:	009b      	lsls	r3, r3, #2
 800e75a:	693a      	ldr	r2, [r7, #16]
 800e75c:	4313      	orrs	r3, r2
 800e75e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e760:	683b      	ldr	r3, [r7, #0]
 800e762:	699b      	ldr	r3, [r3, #24]
 800e764:	009b      	lsls	r3, r3, #2
 800e766:	693a      	ldr	r2, [r7, #16]
 800e768:	4313      	orrs	r3, r2
 800e76a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	693a      	ldr	r2, [r7, #16]
 800e770:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	68fa      	ldr	r2, [r7, #12]
 800e776:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	685a      	ldr	r2, [r3, #4]
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	697a      	ldr	r2, [r7, #20]
 800e784:	621a      	str	r2, [r3, #32]
}
 800e786:	bf00      	nop
 800e788:	371c      	adds	r7, #28
 800e78a:	46bd      	mov	sp, r7
 800e78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e790:	4770      	bx	lr
 800e792:	bf00      	nop
 800e794:	40010000 	.word	0x40010000
 800e798:	40010400 	.word	0x40010400

0800e79c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e79c:	b480      	push	{r7}
 800e79e:	b087      	sub	sp, #28
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
 800e7a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	6a1b      	ldr	r3, [r3, #32]
 800e7aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	6a1b      	ldr	r3, [r3, #32]
 800e7b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	685b      	ldr	r3, [r3, #4]
 800e7bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	69db      	ldr	r3, [r3, #28]
 800e7c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e7ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	f023 0303 	bic.w	r3, r3, #3
 800e7d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e7d4:	683b      	ldr	r3, [r7, #0]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	68fa      	ldr	r2, [r7, #12]
 800e7da:	4313      	orrs	r3, r2
 800e7dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e7de:	697b      	ldr	r3, [r7, #20]
 800e7e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e7e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e7e6:	683b      	ldr	r3, [r7, #0]
 800e7e8:	689b      	ldr	r3, [r3, #8]
 800e7ea:	021b      	lsls	r3, r3, #8
 800e7ec:	697a      	ldr	r2, [r7, #20]
 800e7ee:	4313      	orrs	r3, r2
 800e7f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	4a21      	ldr	r2, [pc, #132]	@ (800e87c <TIM_OC3_SetConfig+0xe0>)
 800e7f6:	4293      	cmp	r3, r2
 800e7f8:	d003      	beq.n	800e802 <TIM_OC3_SetConfig+0x66>
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	4a20      	ldr	r2, [pc, #128]	@ (800e880 <TIM_OC3_SetConfig+0xe4>)
 800e7fe:	4293      	cmp	r3, r2
 800e800:	d10d      	bne.n	800e81e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e802:	697b      	ldr	r3, [r7, #20]
 800e804:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e808:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e80a:	683b      	ldr	r3, [r7, #0]
 800e80c:	68db      	ldr	r3, [r3, #12]
 800e80e:	021b      	lsls	r3, r3, #8
 800e810:	697a      	ldr	r2, [r7, #20]
 800e812:	4313      	orrs	r3, r2
 800e814:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e816:	697b      	ldr	r3, [r7, #20]
 800e818:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e81c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	4a16      	ldr	r2, [pc, #88]	@ (800e87c <TIM_OC3_SetConfig+0xe0>)
 800e822:	4293      	cmp	r3, r2
 800e824:	d003      	beq.n	800e82e <TIM_OC3_SetConfig+0x92>
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	4a15      	ldr	r2, [pc, #84]	@ (800e880 <TIM_OC3_SetConfig+0xe4>)
 800e82a:	4293      	cmp	r3, r2
 800e82c:	d113      	bne.n	800e856 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e82e:	693b      	ldr	r3, [r7, #16]
 800e830:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e834:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e836:	693b      	ldr	r3, [r7, #16]
 800e838:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e83c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e83e:	683b      	ldr	r3, [r7, #0]
 800e840:	695b      	ldr	r3, [r3, #20]
 800e842:	011b      	lsls	r3, r3, #4
 800e844:	693a      	ldr	r2, [r7, #16]
 800e846:	4313      	orrs	r3, r2
 800e848:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e84a:	683b      	ldr	r3, [r7, #0]
 800e84c:	699b      	ldr	r3, [r3, #24]
 800e84e:	011b      	lsls	r3, r3, #4
 800e850:	693a      	ldr	r2, [r7, #16]
 800e852:	4313      	orrs	r3, r2
 800e854:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	693a      	ldr	r2, [r7, #16]
 800e85a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	68fa      	ldr	r2, [r7, #12]
 800e860:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e862:	683b      	ldr	r3, [r7, #0]
 800e864:	685a      	ldr	r2, [r3, #4]
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	697a      	ldr	r2, [r7, #20]
 800e86e:	621a      	str	r2, [r3, #32]
}
 800e870:	bf00      	nop
 800e872:	371c      	adds	r7, #28
 800e874:	46bd      	mov	sp, r7
 800e876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87a:	4770      	bx	lr
 800e87c:	40010000 	.word	0x40010000
 800e880:	40010400 	.word	0x40010400

0800e884 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e884:	b480      	push	{r7}
 800e886:	b087      	sub	sp, #28
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
 800e88c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	6a1b      	ldr	r3, [r3, #32]
 800e892:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	6a1b      	ldr	r3, [r3, #32]
 800e898:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	685b      	ldr	r3, [r3, #4]
 800e8a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	69db      	ldr	r3, [r3, #28]
 800e8aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e8b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e8ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e8bc:	683b      	ldr	r3, [r7, #0]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	021b      	lsls	r3, r3, #8
 800e8c2:	68fa      	ldr	r2, [r7, #12]
 800e8c4:	4313      	orrs	r3, r2
 800e8c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e8c8:	693b      	ldr	r3, [r7, #16]
 800e8ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e8ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	689b      	ldr	r3, [r3, #8]
 800e8d4:	031b      	lsls	r3, r3, #12
 800e8d6:	693a      	ldr	r2, [r7, #16]
 800e8d8:	4313      	orrs	r3, r2
 800e8da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	4a12      	ldr	r2, [pc, #72]	@ (800e928 <TIM_OC4_SetConfig+0xa4>)
 800e8e0:	4293      	cmp	r3, r2
 800e8e2:	d003      	beq.n	800e8ec <TIM_OC4_SetConfig+0x68>
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	4a11      	ldr	r2, [pc, #68]	@ (800e92c <TIM_OC4_SetConfig+0xa8>)
 800e8e8:	4293      	cmp	r3, r2
 800e8ea:	d109      	bne.n	800e900 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e8ec:	697b      	ldr	r3, [r7, #20]
 800e8ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e8f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e8f4:	683b      	ldr	r3, [r7, #0]
 800e8f6:	695b      	ldr	r3, [r3, #20]
 800e8f8:	019b      	lsls	r3, r3, #6
 800e8fa:	697a      	ldr	r2, [r7, #20]
 800e8fc:	4313      	orrs	r3, r2
 800e8fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	697a      	ldr	r2, [r7, #20]
 800e904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	68fa      	ldr	r2, [r7, #12]
 800e90a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	685a      	ldr	r2, [r3, #4]
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	693a      	ldr	r2, [r7, #16]
 800e918:	621a      	str	r2, [r3, #32]
}
 800e91a:	bf00      	nop
 800e91c:	371c      	adds	r7, #28
 800e91e:	46bd      	mov	sp, r7
 800e920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e924:	4770      	bx	lr
 800e926:	bf00      	nop
 800e928:	40010000 	.word	0x40010000
 800e92c:	40010400 	.word	0x40010400

0800e930 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e930:	b480      	push	{r7}
 800e932:	b087      	sub	sp, #28
 800e934:	af00      	add	r7, sp, #0
 800e936:	60f8      	str	r0, [r7, #12]
 800e938:	60b9      	str	r1, [r7, #8]
 800e93a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	6a1b      	ldr	r3, [r3, #32]
 800e940:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	6a1b      	ldr	r3, [r3, #32]
 800e946:	f023 0201 	bic.w	r2, r3, #1
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	699b      	ldr	r3, [r3, #24]
 800e952:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e954:	693b      	ldr	r3, [r7, #16]
 800e956:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e95a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	011b      	lsls	r3, r3, #4
 800e960:	693a      	ldr	r2, [r7, #16]
 800e962:	4313      	orrs	r3, r2
 800e964:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e966:	697b      	ldr	r3, [r7, #20]
 800e968:	f023 030a 	bic.w	r3, r3, #10
 800e96c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e96e:	697a      	ldr	r2, [r7, #20]
 800e970:	68bb      	ldr	r3, [r7, #8]
 800e972:	4313      	orrs	r3, r2
 800e974:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	693a      	ldr	r2, [r7, #16]
 800e97a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	697a      	ldr	r2, [r7, #20]
 800e980:	621a      	str	r2, [r3, #32]
}
 800e982:	bf00      	nop
 800e984:	371c      	adds	r7, #28
 800e986:	46bd      	mov	sp, r7
 800e988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98c:	4770      	bx	lr

0800e98e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e98e:	b480      	push	{r7}
 800e990:	b087      	sub	sp, #28
 800e992:	af00      	add	r7, sp, #0
 800e994:	60f8      	str	r0, [r7, #12]
 800e996:	60b9      	str	r1, [r7, #8]
 800e998:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	6a1b      	ldr	r3, [r3, #32]
 800e99e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	6a1b      	ldr	r3, [r3, #32]
 800e9a4:	f023 0210 	bic.w	r2, r3, #16
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	699b      	ldr	r3, [r3, #24]
 800e9b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e9b2:	693b      	ldr	r3, [r7, #16]
 800e9b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e9b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	031b      	lsls	r3, r3, #12
 800e9be:	693a      	ldr	r2, [r7, #16]
 800e9c0:	4313      	orrs	r3, r2
 800e9c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e9c4:	697b      	ldr	r3, [r7, #20]
 800e9c6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e9ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e9cc:	68bb      	ldr	r3, [r7, #8]
 800e9ce:	011b      	lsls	r3, r3, #4
 800e9d0:	697a      	ldr	r2, [r7, #20]
 800e9d2:	4313      	orrs	r3, r2
 800e9d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	693a      	ldr	r2, [r7, #16]
 800e9da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	697a      	ldr	r2, [r7, #20]
 800e9e0:	621a      	str	r2, [r3, #32]
}
 800e9e2:	bf00      	nop
 800e9e4:	371c      	adds	r7, #28
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ec:	4770      	bx	lr

0800e9ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e9ee:	b480      	push	{r7}
 800e9f0:	b085      	sub	sp, #20
 800e9f2:	af00      	add	r7, sp, #0
 800e9f4:	6078      	str	r0, [r7, #4]
 800e9f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	689b      	ldr	r3, [r3, #8]
 800e9fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ea04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ea06:	683a      	ldr	r2, [r7, #0]
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	4313      	orrs	r3, r2
 800ea0c:	f043 0307 	orr.w	r3, r3, #7
 800ea10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	68fa      	ldr	r2, [r7, #12]
 800ea16:	609a      	str	r2, [r3, #8]
}
 800ea18:	bf00      	nop
 800ea1a:	3714      	adds	r7, #20
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea22:	4770      	bx	lr

0800ea24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ea24:	b480      	push	{r7}
 800ea26:	b087      	sub	sp, #28
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	60f8      	str	r0, [r7, #12]
 800ea2c:	60b9      	str	r1, [r7, #8]
 800ea2e:	607a      	str	r2, [r7, #4]
 800ea30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	689b      	ldr	r3, [r3, #8]
 800ea36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ea38:	697b      	ldr	r3, [r7, #20]
 800ea3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ea3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	021a      	lsls	r2, r3, #8
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	431a      	orrs	r2, r3
 800ea48:	68bb      	ldr	r3, [r7, #8]
 800ea4a:	4313      	orrs	r3, r2
 800ea4c:	697a      	ldr	r2, [r7, #20]
 800ea4e:	4313      	orrs	r3, r2
 800ea50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	697a      	ldr	r2, [r7, #20]
 800ea56:	609a      	str	r2, [r3, #8]
}
 800ea58:	bf00      	nop
 800ea5a:	371c      	adds	r7, #28
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea62:	4770      	bx	lr

0800ea64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ea64:	b480      	push	{r7}
 800ea66:	b087      	sub	sp, #28
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	60f8      	str	r0, [r7, #12]
 800ea6c:	60b9      	str	r1, [r7, #8]
 800ea6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ea70:	68bb      	ldr	r3, [r7, #8]
 800ea72:	f003 031f 	and.w	r3, r3, #31
 800ea76:	2201      	movs	r2, #1
 800ea78:	fa02 f303 	lsl.w	r3, r2, r3
 800ea7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	6a1a      	ldr	r2, [r3, #32]
 800ea82:	697b      	ldr	r3, [r7, #20]
 800ea84:	43db      	mvns	r3, r3
 800ea86:	401a      	ands	r2, r3
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	6a1a      	ldr	r2, [r3, #32]
 800ea90:	68bb      	ldr	r3, [r7, #8]
 800ea92:	f003 031f 	and.w	r3, r3, #31
 800ea96:	6879      	ldr	r1, [r7, #4]
 800ea98:	fa01 f303 	lsl.w	r3, r1, r3
 800ea9c:	431a      	orrs	r2, r3
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	621a      	str	r2, [r3, #32]
}
 800eaa2:	bf00      	nop
 800eaa4:	371c      	adds	r7, #28
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaac:	4770      	bx	lr
	...

0800eab0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800eab0:	b480      	push	{r7}
 800eab2:	b085      	sub	sp, #20
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
 800eab8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800eac0:	2b01      	cmp	r3, #1
 800eac2:	d101      	bne.n	800eac8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800eac4:	2302      	movs	r3, #2
 800eac6:	e05a      	b.n	800eb7e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	2201      	movs	r2, #1
 800eacc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	2202      	movs	r2, #2
 800ead4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	685b      	ldr	r3, [r3, #4]
 800eade:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	689b      	ldr	r3, [r3, #8]
 800eae6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eaee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800eaf0:	683b      	ldr	r3, [r7, #0]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	68fa      	ldr	r2, [r7, #12]
 800eaf6:	4313      	orrs	r3, r2
 800eaf8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	68fa      	ldr	r2, [r7, #12]
 800eb00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	4a21      	ldr	r2, [pc, #132]	@ (800eb8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800eb08:	4293      	cmp	r3, r2
 800eb0a:	d022      	beq.n	800eb52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eb14:	d01d      	beq.n	800eb52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	4a1d      	ldr	r2, [pc, #116]	@ (800eb90 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800eb1c:	4293      	cmp	r3, r2
 800eb1e:	d018      	beq.n	800eb52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	4a1b      	ldr	r2, [pc, #108]	@ (800eb94 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800eb26:	4293      	cmp	r3, r2
 800eb28:	d013      	beq.n	800eb52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	4a1a      	ldr	r2, [pc, #104]	@ (800eb98 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800eb30:	4293      	cmp	r3, r2
 800eb32:	d00e      	beq.n	800eb52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	4a18      	ldr	r2, [pc, #96]	@ (800eb9c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800eb3a:	4293      	cmp	r3, r2
 800eb3c:	d009      	beq.n	800eb52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	4a17      	ldr	r2, [pc, #92]	@ (800eba0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800eb44:	4293      	cmp	r3, r2
 800eb46:	d004      	beq.n	800eb52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	4a15      	ldr	r2, [pc, #84]	@ (800eba4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800eb4e:	4293      	cmp	r3, r2
 800eb50:	d10c      	bne.n	800eb6c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800eb52:	68bb      	ldr	r3, [r7, #8]
 800eb54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800eb58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800eb5a:	683b      	ldr	r3, [r7, #0]
 800eb5c:	685b      	ldr	r3, [r3, #4]
 800eb5e:	68ba      	ldr	r2, [r7, #8]
 800eb60:	4313      	orrs	r3, r2
 800eb62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	68ba      	ldr	r2, [r7, #8]
 800eb6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	2201      	movs	r2, #1
 800eb70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	2200      	movs	r2, #0
 800eb78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800eb7c:	2300      	movs	r3, #0
}
 800eb7e:	4618      	mov	r0, r3
 800eb80:	3714      	adds	r7, #20
 800eb82:	46bd      	mov	sp, r7
 800eb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb88:	4770      	bx	lr
 800eb8a:	bf00      	nop
 800eb8c:	40010000 	.word	0x40010000
 800eb90:	40000400 	.word	0x40000400
 800eb94:	40000800 	.word	0x40000800
 800eb98:	40000c00 	.word	0x40000c00
 800eb9c:	40010400 	.word	0x40010400
 800eba0:	40014000 	.word	0x40014000
 800eba4:	40001800 	.word	0x40001800

0800eba8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800eba8:	b480      	push	{r7}
 800ebaa:	b085      	sub	sp, #20
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
 800ebb0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ebbc:	2b01      	cmp	r3, #1
 800ebbe:	d101      	bne.n	800ebc4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ebc0:	2302      	movs	r3, #2
 800ebc2:	e03d      	b.n	800ec40 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2201      	movs	r2, #1
 800ebc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ebd2:	683b      	ldr	r3, [r7, #0]
 800ebd4:	68db      	ldr	r3, [r3, #12]
 800ebd6:	4313      	orrs	r3, r2
 800ebd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ebe0:	683b      	ldr	r3, [r7, #0]
 800ebe2:	689b      	ldr	r3, [r3, #8]
 800ebe4:	4313      	orrs	r3, r2
 800ebe6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800ebee:	683b      	ldr	r3, [r7, #0]
 800ebf0:	685b      	ldr	r3, [r3, #4]
 800ebf2:	4313      	orrs	r3, r2
 800ebf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800ebfc:	683b      	ldr	r3, [r7, #0]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	4313      	orrs	r3, r2
 800ec02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	691b      	ldr	r3, [r3, #16]
 800ec0e:	4313      	orrs	r3, r2
 800ec10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800ec18:	683b      	ldr	r3, [r7, #0]
 800ec1a:	695b      	ldr	r3, [r3, #20]
 800ec1c:	4313      	orrs	r3, r2
 800ec1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800ec26:	683b      	ldr	r3, [r7, #0]
 800ec28:	69db      	ldr	r3, [r3, #28]
 800ec2a:	4313      	orrs	r3, r2
 800ec2c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	68fa      	ldr	r2, [r7, #12]
 800ec34:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	2200      	movs	r2, #0
 800ec3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ec3e:	2300      	movs	r3, #0
}
 800ec40:	4618      	mov	r0, r3
 800ec42:	3714      	adds	r7, #20
 800ec44:	46bd      	mov	sp, r7
 800ec46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4a:	4770      	bx	lr

0800ec4c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ec4c:	b480      	push	{r7}
 800ec4e:	b083      	sub	sp, #12
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ec54:	bf00      	nop
 800ec56:	370c      	adds	r7, #12
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5e:	4770      	bx	lr

0800ec60 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ec60:	b480      	push	{r7}
 800ec62:	b083      	sub	sp, #12
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ec68:	bf00      	nop
 800ec6a:	370c      	adds	r7, #12
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec72:	4770      	bx	lr

0800ec74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b082      	sub	sp, #8
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d101      	bne.n	800ec86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ec82:	2301      	movs	r3, #1
 800ec84:	e042      	b.n	800ed0c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ec8c:	b2db      	uxtb	r3, r3
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d106      	bne.n	800eca0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	2200      	movs	r2, #0
 800ec96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ec9a:	6878      	ldr	r0, [r7, #4]
 800ec9c:	f7fb fac8 	bl	800a230 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	2224      	movs	r2, #36	@ 0x24
 800eca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	68da      	ldr	r2, [r3, #12]
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ecb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ecb8:	6878      	ldr	r0, [r7, #4]
 800ecba:	f001 f88d 	bl	800fdd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	691a      	ldr	r2, [r3, #16]
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800eccc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	695a      	ldr	r2, [r3, #20]
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ecdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	68da      	ldr	r2, [r3, #12]
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ecec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	2220      	movs	r2, #32
 800ecf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	2220      	movs	r2, #32
 800ed00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2200      	movs	r2, #0
 800ed08:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800ed0a:	2300      	movs	r3, #0
}
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	3708      	adds	r7, #8
 800ed10:	46bd      	mov	sp, r7
 800ed12:	bd80      	pop	{r7, pc}

0800ed14 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b08a      	sub	sp, #40	@ 0x28
 800ed18:	af02      	add	r7, sp, #8
 800ed1a:	60f8      	str	r0, [r7, #12]
 800ed1c:	60b9      	str	r1, [r7, #8]
 800ed1e:	603b      	str	r3, [r7, #0]
 800ed20:	4613      	mov	r3, r2
 800ed22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ed24:	2300      	movs	r3, #0
 800ed26:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ed2e:	b2db      	uxtb	r3, r3
 800ed30:	2b20      	cmp	r3, #32
 800ed32:	d175      	bne.n	800ee20 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800ed34:	68bb      	ldr	r3, [r7, #8]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d002      	beq.n	800ed40 <HAL_UART_Transmit+0x2c>
 800ed3a:	88fb      	ldrh	r3, [r7, #6]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d101      	bne.n	800ed44 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800ed40:	2301      	movs	r3, #1
 800ed42:	e06e      	b.n	800ee22 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	2200      	movs	r2, #0
 800ed48:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	2221      	movs	r2, #33	@ 0x21
 800ed4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ed52:	f7fb fcd7 	bl	800a704 <HAL_GetTick>
 800ed56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	88fa      	ldrh	r2, [r7, #6]
 800ed5c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	88fa      	ldrh	r2, [r7, #6]
 800ed62:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	689b      	ldr	r3, [r3, #8]
 800ed68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ed6c:	d108      	bne.n	800ed80 <HAL_UART_Transmit+0x6c>
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	691b      	ldr	r3, [r3, #16]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d104      	bne.n	800ed80 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ed76:	2300      	movs	r3, #0
 800ed78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ed7a:	68bb      	ldr	r3, [r7, #8]
 800ed7c:	61bb      	str	r3, [r7, #24]
 800ed7e:	e003      	b.n	800ed88 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ed80:	68bb      	ldr	r3, [r7, #8]
 800ed82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ed84:	2300      	movs	r3, #0
 800ed86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ed88:	e02e      	b.n	800ede8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ed8a:	683b      	ldr	r3, [r7, #0]
 800ed8c:	9300      	str	r3, [sp, #0]
 800ed8e:	697b      	ldr	r3, [r7, #20]
 800ed90:	2200      	movs	r2, #0
 800ed92:	2180      	movs	r1, #128	@ 0x80
 800ed94:	68f8      	ldr	r0, [r7, #12]
 800ed96:	f000 fd13 	bl	800f7c0 <UART_WaitOnFlagUntilTimeout>
 800ed9a:	4603      	mov	r3, r0
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d005      	beq.n	800edac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	2220      	movs	r2, #32
 800eda4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800eda8:	2303      	movs	r3, #3
 800edaa:	e03a      	b.n	800ee22 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800edac:	69fb      	ldr	r3, [r7, #28]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d10b      	bne.n	800edca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800edb2:	69bb      	ldr	r3, [r7, #24]
 800edb4:	881b      	ldrh	r3, [r3, #0]
 800edb6:	461a      	mov	r2, r3
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800edc0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800edc2:	69bb      	ldr	r3, [r7, #24]
 800edc4:	3302      	adds	r3, #2
 800edc6:	61bb      	str	r3, [r7, #24]
 800edc8:	e007      	b.n	800edda <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800edca:	69fb      	ldr	r3, [r7, #28]
 800edcc:	781a      	ldrb	r2, [r3, #0]
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800edd4:	69fb      	ldr	r3, [r7, #28]
 800edd6:	3301      	adds	r3, #1
 800edd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800edde:	b29b      	uxth	r3, r3
 800ede0:	3b01      	subs	r3, #1
 800ede2:	b29a      	uxth	r2, r3
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800edec:	b29b      	uxth	r3, r3
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d1cb      	bne.n	800ed8a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	9300      	str	r3, [sp, #0]
 800edf6:	697b      	ldr	r3, [r7, #20]
 800edf8:	2200      	movs	r2, #0
 800edfa:	2140      	movs	r1, #64	@ 0x40
 800edfc:	68f8      	ldr	r0, [r7, #12]
 800edfe:	f000 fcdf 	bl	800f7c0 <UART_WaitOnFlagUntilTimeout>
 800ee02:	4603      	mov	r3, r0
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d005      	beq.n	800ee14 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	2220      	movs	r2, #32
 800ee0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800ee10:	2303      	movs	r3, #3
 800ee12:	e006      	b.n	800ee22 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	2220      	movs	r2, #32
 800ee18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	e000      	b.n	800ee22 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800ee20:	2302      	movs	r3, #2
  }
}
 800ee22:	4618      	mov	r0, r3
 800ee24:	3720      	adds	r7, #32
 800ee26:	46bd      	mov	sp, r7
 800ee28:	bd80      	pop	{r7, pc}

0800ee2a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ee2a:	b580      	push	{r7, lr}
 800ee2c:	b084      	sub	sp, #16
 800ee2e:	af00      	add	r7, sp, #0
 800ee30:	60f8      	str	r0, [r7, #12]
 800ee32:	60b9      	str	r1, [r7, #8]
 800ee34:	4613      	mov	r3, r2
 800ee36:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ee3e:	b2db      	uxtb	r3, r3
 800ee40:	2b20      	cmp	r3, #32
 800ee42:	d112      	bne.n	800ee6a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800ee44:	68bb      	ldr	r3, [r7, #8]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d002      	beq.n	800ee50 <HAL_UART_Receive_IT+0x26>
 800ee4a:	88fb      	ldrh	r3, [r7, #6]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d101      	bne.n	800ee54 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800ee50:	2301      	movs	r3, #1
 800ee52:	e00b      	b.n	800ee6c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	2200      	movs	r2, #0
 800ee58:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ee5a:	88fb      	ldrh	r3, [r7, #6]
 800ee5c:	461a      	mov	r2, r3
 800ee5e:	68b9      	ldr	r1, [r7, #8]
 800ee60:	68f8      	ldr	r0, [r7, #12]
 800ee62:	f000 fd06 	bl	800f872 <UART_Start_Receive_IT>
 800ee66:	4603      	mov	r3, r0
 800ee68:	e000      	b.n	800ee6c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800ee6a:	2302      	movs	r3, #2
  }
}
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	3710      	adds	r7, #16
 800ee70:	46bd      	mov	sp, r7
 800ee72:	bd80      	pop	{r7, pc}

0800ee74 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b084      	sub	sp, #16
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	60f8      	str	r0, [r7, #12]
 800ee7c:	60b9      	str	r1, [r7, #8]
 800ee7e:	4613      	mov	r3, r2
 800ee80:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ee88:	b2db      	uxtb	r3, r3
 800ee8a:	2b20      	cmp	r3, #32
 800ee8c:	d112      	bne.n	800eeb4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800ee8e:	68bb      	ldr	r3, [r7, #8]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d002      	beq.n	800ee9a <HAL_UART_Receive_DMA+0x26>
 800ee94:	88fb      	ldrh	r3, [r7, #6]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d101      	bne.n	800ee9e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800ee9a:	2301      	movs	r3, #1
 800ee9c:	e00b      	b.n	800eeb6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	2200      	movs	r2, #0
 800eea2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800eea4:	88fb      	ldrh	r3, [r7, #6]
 800eea6:	461a      	mov	r2, r3
 800eea8:	68b9      	ldr	r1, [r7, #8]
 800eeaa:	68f8      	ldr	r0, [r7, #12]
 800eeac:	f000 fd1c 	bl	800f8e8 <UART_Start_Receive_DMA>
 800eeb0:	4603      	mov	r3, r0
 800eeb2:	e000      	b.n	800eeb6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800eeb4:	2302      	movs	r3, #2
  }
}
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	3710      	adds	r7, #16
 800eeba:	46bd      	mov	sp, r7
 800eebc:	bd80      	pop	{r7, pc}
	...

0800eec0 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800eec0:	b580      	push	{r7, lr}
 800eec2:	b09a      	sub	sp, #104	@ 0x68
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	330c      	adds	r3, #12
 800eece:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eed0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eed2:	e853 3f00 	ldrex	r3, [r3]
 800eed6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800eed8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eeda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800eede:	667b      	str	r3, [r7, #100]	@ 0x64
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	330c      	adds	r3, #12
 800eee6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800eee8:	657a      	str	r2, [r7, #84]	@ 0x54
 800eeea:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eeec:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800eeee:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800eef0:	e841 2300 	strex	r3, r2, [r1]
 800eef4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800eef6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d1e5      	bne.n	800eec8 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	3314      	adds	r3, #20
 800ef02:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef06:	e853 3f00 	ldrex	r3, [r3]
 800ef0a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ef0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef0e:	f023 0301 	bic.w	r3, r3, #1
 800ef12:	663b      	str	r3, [r7, #96]	@ 0x60
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	3314      	adds	r3, #20
 800ef1a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ef1c:	643a      	str	r2, [r7, #64]	@ 0x40
 800ef1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef20:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ef22:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ef24:	e841 2300 	strex	r3, r2, [r1]
 800ef28:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ef2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d1e5      	bne.n	800eefc <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ef34:	2b01      	cmp	r3, #1
 800ef36:	d119      	bne.n	800ef6c <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	330c      	adds	r3, #12
 800ef3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef40:	6a3b      	ldr	r3, [r7, #32]
 800ef42:	e853 3f00 	ldrex	r3, [r3]
 800ef46:	61fb      	str	r3, [r7, #28]
   return(result);
 800ef48:	69fb      	ldr	r3, [r7, #28]
 800ef4a:	f023 0310 	bic.w	r3, r3, #16
 800ef4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	330c      	adds	r3, #12
 800ef56:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ef58:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ef5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ef5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ef60:	e841 2300 	strex	r3, r2, [r1]
 800ef64:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ef66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d1e5      	bne.n	800ef38 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	695b      	ldr	r3, [r3, #20]
 800ef72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ef76:	2b40      	cmp	r3, #64	@ 0x40
 800ef78:	d13f      	bne.n	800effa <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	3314      	adds	r3, #20
 800ef80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	e853 3f00 	ldrex	r3, [r3]
 800ef88:	60bb      	str	r3, [r7, #8]
   return(result);
 800ef8a:	68bb      	ldr	r3, [r7, #8]
 800ef8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ef90:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	3314      	adds	r3, #20
 800ef98:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ef9a:	61ba      	str	r2, [r7, #24]
 800ef9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef9e:	6979      	ldr	r1, [r7, #20]
 800efa0:	69ba      	ldr	r2, [r7, #24]
 800efa2:	e841 2300 	strex	r3, r2, [r1]
 800efa6:	613b      	str	r3, [r7, #16]
   return(result);
 800efa8:	693b      	ldr	r3, [r7, #16]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d1e5      	bne.n	800ef7a <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d013      	beq.n	800efde <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800efba:	4a19      	ldr	r2, [pc, #100]	@ (800f020 <HAL_UART_AbortReceive_IT+0x160>)
 800efbc:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800efc2:	4618      	mov	r0, r3
 800efc4:	f7fc fa26 	bl	800b414 <HAL_DMA_Abort_IT>
 800efc8:	4603      	mov	r3, r0
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d022      	beq.n	800f014 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800efd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800efd4:	687a      	ldr	r2, [r7, #4]
 800efd6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800efd8:	4610      	mov	r0, r2
 800efda:	4798      	blx	r3
 800efdc:	e01a      	b.n	800f014 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	2200      	movs	r2, #0
 800efe2:	85da      	strh	r2, [r3, #46]	@ 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	2220      	movs	r2, #32
 800efe8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	2200      	movs	r2, #0
 800eff0:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800eff2:	6878      	ldr	r0, [r7, #4]
 800eff4:	f000 fad0 	bl	800f598 <HAL_UART_AbortReceiveCpltCallback>
 800eff8:	e00c      	b.n	800f014 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	2200      	movs	r2, #0
 800effe:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	2220      	movs	r2, #32
 800f004:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	2200      	movs	r2, #0
 800f00c:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800f00e:	6878      	ldr	r0, [r7, #4]
 800f010:	f000 fac2 	bl	800f598 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800f014:	2300      	movs	r3, #0
}
 800f016:	4618      	mov	r0, r3
 800f018:	3768      	adds	r7, #104	@ 0x68
 800f01a:	46bd      	mov	sp, r7
 800f01c:	bd80      	pop	{r7, pc}
 800f01e:	bf00      	nop
 800f020:	0800fb5b 	.word	0x0800fb5b

0800f024 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f024:	b580      	push	{r7, lr}
 800f026:	b0ba      	sub	sp, #232	@ 0xe8
 800f028:	af00      	add	r7, sp, #0
 800f02a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	68db      	ldr	r3, [r3, #12]
 800f03c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	695b      	ldr	r3, [r3, #20]
 800f046:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800f04a:	2300      	movs	r3, #0
 800f04c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800f050:	2300      	movs	r3, #0
 800f052:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800f056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f05a:	f003 030f 	and.w	r3, r3, #15
 800f05e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800f062:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f066:	2b00      	cmp	r3, #0
 800f068:	d10f      	bne.n	800f08a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f06a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f06e:	f003 0320 	and.w	r3, r3, #32
 800f072:	2b00      	cmp	r3, #0
 800f074:	d009      	beq.n	800f08a <HAL_UART_IRQHandler+0x66>
 800f076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f07a:	f003 0320 	and.w	r3, r3, #32
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d003      	beq.n	800f08a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800f082:	6878      	ldr	r0, [r7, #4]
 800f084:	f000 fde9 	bl	800fc5a <UART_Receive_IT>
      return;
 800f088:	e25b      	b.n	800f542 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800f08a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f08e:	2b00      	cmp	r3, #0
 800f090:	f000 80de 	beq.w	800f250 <HAL_UART_IRQHandler+0x22c>
 800f094:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f098:	f003 0301 	and.w	r3, r3, #1
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d106      	bne.n	800f0ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800f0a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f0a4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	f000 80d1 	beq.w	800f250 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800f0ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f0b2:	f003 0301 	and.w	r3, r3, #1
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d00b      	beq.n	800f0d2 <HAL_UART_IRQHandler+0xae>
 800f0ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f0be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d005      	beq.n	800f0d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f0ca:	f043 0201 	orr.w	r2, r3, #1
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f0d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f0d6:	f003 0304 	and.w	r3, r3, #4
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d00b      	beq.n	800f0f6 <HAL_UART_IRQHandler+0xd2>
 800f0de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f0e2:	f003 0301 	and.w	r3, r3, #1
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d005      	beq.n	800f0f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f0ee:	f043 0202 	orr.w	r2, r3, #2
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f0f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f0fa:	f003 0302 	and.w	r3, r3, #2
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d00b      	beq.n	800f11a <HAL_UART_IRQHandler+0xf6>
 800f102:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f106:	f003 0301 	and.w	r3, r3, #1
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d005      	beq.n	800f11a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f112:	f043 0204 	orr.w	r2, r3, #4
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800f11a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f11e:	f003 0308 	and.w	r3, r3, #8
 800f122:	2b00      	cmp	r3, #0
 800f124:	d011      	beq.n	800f14a <HAL_UART_IRQHandler+0x126>
 800f126:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f12a:	f003 0320 	and.w	r3, r3, #32
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d105      	bne.n	800f13e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800f132:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f136:	f003 0301 	and.w	r3, r3, #1
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d005      	beq.n	800f14a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f142:	f043 0208 	orr.w	r2, r3, #8
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f14e:	2b00      	cmp	r3, #0
 800f150:	f000 81f2 	beq.w	800f538 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f158:	f003 0320 	and.w	r3, r3, #32
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d008      	beq.n	800f172 <HAL_UART_IRQHandler+0x14e>
 800f160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f164:	f003 0320 	and.w	r3, r3, #32
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d002      	beq.n	800f172 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800f16c:	6878      	ldr	r0, [r7, #4]
 800f16e:	f000 fd74 	bl	800fc5a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	695b      	ldr	r3, [r3, #20]
 800f178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f17c:	2b40      	cmp	r3, #64	@ 0x40
 800f17e:	bf0c      	ite	eq
 800f180:	2301      	moveq	r3, #1
 800f182:	2300      	movne	r3, #0
 800f184:	b2db      	uxtb	r3, r3
 800f186:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f18e:	f003 0308 	and.w	r3, r3, #8
 800f192:	2b00      	cmp	r3, #0
 800f194:	d103      	bne.n	800f19e <HAL_UART_IRQHandler+0x17a>
 800f196:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d04f      	beq.n	800f23e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f19e:	6878      	ldr	r0, [r7, #4]
 800f1a0:	f000 fc64 	bl	800fa6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	695b      	ldr	r3, [r3, #20]
 800f1aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f1ae:	2b40      	cmp	r3, #64	@ 0x40
 800f1b0:	d141      	bne.n	800f236 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	3314      	adds	r3, #20
 800f1b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f1c0:	e853 3f00 	ldrex	r3, [r3]
 800f1c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800f1c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f1cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f1d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	3314      	adds	r3, #20
 800f1da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800f1de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800f1e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800f1ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800f1ee:	e841 2300 	strex	r3, r2, [r1]
 800f1f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800f1f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d1d9      	bne.n	800f1b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f202:	2b00      	cmp	r3, #0
 800f204:	d013      	beq.n	800f22e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f20a:	4a7e      	ldr	r2, [pc, #504]	@ (800f404 <HAL_UART_IRQHandler+0x3e0>)
 800f20c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f212:	4618      	mov	r0, r3
 800f214:	f7fc f8fe 	bl	800b414 <HAL_DMA_Abort_IT>
 800f218:	4603      	mov	r3, r0
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d016      	beq.n	800f24c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f224:	687a      	ldr	r2, [r7, #4]
 800f226:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800f228:	4610      	mov	r0, r2
 800f22a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f22c:	e00e      	b.n	800f24c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f22e:	6878      	ldr	r0, [r7, #4]
 800f230:	f000 f9a8 	bl	800f584 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f234:	e00a      	b.n	800f24c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f236:	6878      	ldr	r0, [r7, #4]
 800f238:	f000 f9a4 	bl	800f584 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f23c:	e006      	b.n	800f24c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f23e:	6878      	ldr	r0, [r7, #4]
 800f240:	f000 f9a0 	bl	800f584 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	2200      	movs	r2, #0
 800f248:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800f24a:	e175      	b.n	800f538 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f24c:	bf00      	nop
    return;
 800f24e:	e173      	b.n	800f538 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f254:	2b01      	cmp	r3, #1
 800f256:	f040 814f 	bne.w	800f4f8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800f25a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f25e:	f003 0310 	and.w	r3, r3, #16
 800f262:	2b00      	cmp	r3, #0
 800f264:	f000 8148 	beq.w	800f4f8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800f268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f26c:	f003 0310 	and.w	r3, r3, #16
 800f270:	2b00      	cmp	r3, #0
 800f272:	f000 8141 	beq.w	800f4f8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800f276:	2300      	movs	r3, #0
 800f278:	60bb      	str	r3, [r7, #8]
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	60bb      	str	r3, [r7, #8]
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	685b      	ldr	r3, [r3, #4]
 800f288:	60bb      	str	r3, [r7, #8]
 800f28a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	695b      	ldr	r3, [r3, #20]
 800f292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f296:	2b40      	cmp	r3, #64	@ 0x40
 800f298:	f040 80b6 	bne.w	800f408 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	685b      	ldr	r3, [r3, #4]
 800f2a4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f2a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	f000 8145 	beq.w	800f53c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800f2b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f2ba:	429a      	cmp	r2, r3
 800f2bc:	f080 813e 	bcs.w	800f53c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f2c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f2cc:	69db      	ldr	r3, [r3, #28]
 800f2ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f2d2:	f000 8088 	beq.w	800f3e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	330c      	adds	r3, #12
 800f2dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f2e4:	e853 3f00 	ldrex	r3, [r3]
 800f2e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800f2ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f2f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f2f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	330c      	adds	r3, #12
 800f2fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800f302:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800f306:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f30a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800f30e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f312:	e841 2300 	strex	r3, r2, [r1]
 800f316:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800f31a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d1d9      	bne.n	800f2d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	3314      	adds	r3, #20
 800f328:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f32a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f32c:	e853 3f00 	ldrex	r3, [r3]
 800f330:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f332:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f334:	f023 0301 	bic.w	r3, r3, #1
 800f338:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	3314      	adds	r3, #20
 800f342:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800f346:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800f34a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f34c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f34e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f352:	e841 2300 	strex	r3, r2, [r1]
 800f356:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f358:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d1e1      	bne.n	800f322 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	3314      	adds	r3, #20
 800f364:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f366:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f368:	e853 3f00 	ldrex	r3, [r3]
 800f36c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f36e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f370:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f374:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	3314      	adds	r3, #20
 800f37e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800f382:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f384:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f386:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f388:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f38a:	e841 2300 	strex	r3, r2, [r1]
 800f38e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f390:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f392:	2b00      	cmp	r3, #0
 800f394:	d1e3      	bne.n	800f35e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	2220      	movs	r2, #32
 800f39a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	2200      	movs	r2, #0
 800f3a2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	330c      	adds	r3, #12
 800f3aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f3ae:	e853 3f00 	ldrex	r3, [r3]
 800f3b2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f3b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f3b6:	f023 0310 	bic.w	r3, r3, #16
 800f3ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	330c      	adds	r3, #12
 800f3c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800f3c8:	65ba      	str	r2, [r7, #88]	@ 0x58
 800f3ca:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f3ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f3d0:	e841 2300 	strex	r3, r2, [r1]
 800f3d4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f3d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d1e3      	bne.n	800f3a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	f7fb ffa7 	bl	800b334 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	2202      	movs	r2, #2
 800f3ea:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800f3f4:	b29b      	uxth	r3, r3
 800f3f6:	1ad3      	subs	r3, r2, r3
 800f3f8:	b29b      	uxth	r3, r3
 800f3fa:	4619      	mov	r1, r3
 800f3fc:	6878      	ldr	r0, [r7, #4]
 800f3fe:	f000 f8d5 	bl	800f5ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800f402:	e09b      	b.n	800f53c <HAL_UART_IRQHandler+0x518>
 800f404:	0800fb33 	.word	0x0800fb33
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800f410:	b29b      	uxth	r3, r3
 800f412:	1ad3      	subs	r3, r2, r3
 800f414:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800f41c:	b29b      	uxth	r3, r3
 800f41e:	2b00      	cmp	r3, #0
 800f420:	f000 808e 	beq.w	800f540 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800f424:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f428:	2b00      	cmp	r3, #0
 800f42a:	f000 8089 	beq.w	800f540 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	330c      	adds	r3, #12
 800f434:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f438:	e853 3f00 	ldrex	r3, [r3]
 800f43c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f43e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f440:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f444:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	330c      	adds	r3, #12
 800f44e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800f452:	647a      	str	r2, [r7, #68]	@ 0x44
 800f454:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f456:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f458:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f45a:	e841 2300 	strex	r3, r2, [r1]
 800f45e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f460:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f462:	2b00      	cmp	r3, #0
 800f464:	d1e3      	bne.n	800f42e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	3314      	adds	r3, #20
 800f46c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f46e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f470:	e853 3f00 	ldrex	r3, [r3]
 800f474:	623b      	str	r3, [r7, #32]
   return(result);
 800f476:	6a3b      	ldr	r3, [r7, #32]
 800f478:	f023 0301 	bic.w	r3, r3, #1
 800f47c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	3314      	adds	r3, #20
 800f486:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800f48a:	633a      	str	r2, [r7, #48]	@ 0x30
 800f48c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f48e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f490:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f492:	e841 2300 	strex	r3, r2, [r1]
 800f496:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d1e3      	bne.n	800f466 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	2220      	movs	r2, #32
 800f4a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	2200      	movs	r2, #0
 800f4aa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	330c      	adds	r3, #12
 800f4b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4b4:	693b      	ldr	r3, [r7, #16]
 800f4b6:	e853 3f00 	ldrex	r3, [r3]
 800f4ba:	60fb      	str	r3, [r7, #12]
   return(result);
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	f023 0310 	bic.w	r3, r3, #16
 800f4c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	330c      	adds	r3, #12
 800f4cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800f4d0:	61fa      	str	r2, [r7, #28]
 800f4d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4d4:	69b9      	ldr	r1, [r7, #24]
 800f4d6:	69fa      	ldr	r2, [r7, #28]
 800f4d8:	e841 2300 	strex	r3, r2, [r1]
 800f4dc:	617b      	str	r3, [r7, #20]
   return(result);
 800f4de:	697b      	ldr	r3, [r7, #20]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d1e3      	bne.n	800f4ac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	2202      	movs	r2, #2
 800f4e8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f4ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f4ee:	4619      	mov	r1, r3
 800f4f0:	6878      	ldr	r0, [r7, #4]
 800f4f2:	f000 f85b 	bl	800f5ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800f4f6:	e023      	b.n	800f540 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800f4f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f4fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f500:	2b00      	cmp	r3, #0
 800f502:	d009      	beq.n	800f518 <HAL_UART_IRQHandler+0x4f4>
 800f504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f508:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d003      	beq.n	800f518 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800f510:	6878      	ldr	r0, [r7, #4]
 800f512:	f000 fb3a 	bl	800fb8a <UART_Transmit_IT>
    return;
 800f516:	e014      	b.n	800f542 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800f518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f51c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f520:	2b00      	cmp	r3, #0
 800f522:	d00e      	beq.n	800f542 <HAL_UART_IRQHandler+0x51e>
 800f524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d008      	beq.n	800f542 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800f530:	6878      	ldr	r0, [r7, #4]
 800f532:	f000 fb7a 	bl	800fc2a <UART_EndTransmit_IT>
    return;
 800f536:	e004      	b.n	800f542 <HAL_UART_IRQHandler+0x51e>
    return;
 800f538:	bf00      	nop
 800f53a:	e002      	b.n	800f542 <HAL_UART_IRQHandler+0x51e>
      return;
 800f53c:	bf00      	nop
 800f53e:	e000      	b.n	800f542 <HAL_UART_IRQHandler+0x51e>
      return;
 800f540:	bf00      	nop
  }
}
 800f542:	37e8      	adds	r7, #232	@ 0xe8
 800f544:	46bd      	mov	sp, r7
 800f546:	bd80      	pop	{r7, pc}

0800f548 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f548:	b480      	push	{r7}
 800f54a:	b083      	sub	sp, #12
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800f550:	bf00      	nop
 800f552:	370c      	adds	r7, #12
 800f554:	46bd      	mov	sp, r7
 800f556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55a:	4770      	bx	lr

0800f55c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800f55c:	b480      	push	{r7}
 800f55e:	b083      	sub	sp, #12
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800f564:	bf00      	nop
 800f566:	370c      	adds	r7, #12
 800f568:	46bd      	mov	sp, r7
 800f56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56e:	4770      	bx	lr

0800f570 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f570:	b480      	push	{r7}
 800f572:	b083      	sub	sp, #12
 800f574:	af00      	add	r7, sp, #0
 800f576:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800f578:	bf00      	nop
 800f57a:	370c      	adds	r7, #12
 800f57c:	46bd      	mov	sp, r7
 800f57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f582:	4770      	bx	lr

0800f584 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f584:	b480      	push	{r7}
 800f586:	b083      	sub	sp, #12
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800f58c:	bf00      	nop
 800f58e:	370c      	adds	r7, #12
 800f590:	46bd      	mov	sp, r7
 800f592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f596:	4770      	bx	lr

0800f598 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800f598:	b480      	push	{r7}
 800f59a:	b083      	sub	sp, #12
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800f5a0:	bf00      	nop
 800f5a2:	370c      	adds	r7, #12
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5aa:	4770      	bx	lr

0800f5ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f5ac:	b480      	push	{r7}
 800f5ae:	b083      	sub	sp, #12
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	6078      	str	r0, [r7, #4]
 800f5b4:	460b      	mov	r3, r1
 800f5b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f5b8:	bf00      	nop
 800f5ba:	370c      	adds	r7, #12
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c2:	4770      	bx	lr

0800f5c4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	b09c      	sub	sp, #112	@ 0x70
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5d0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d172      	bne.n	800f6c6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800f5e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f5e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	330c      	adds	r3, #12
 800f5ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f5f0:	e853 3f00 	ldrex	r3, [r3]
 800f5f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f5f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f5f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f5fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f5fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	330c      	adds	r3, #12
 800f604:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f606:	65ba      	str	r2, [r7, #88]	@ 0x58
 800f608:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f60a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f60c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f60e:	e841 2300 	strex	r3, r2, [r1]
 800f612:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f614:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f616:	2b00      	cmp	r3, #0
 800f618:	d1e5      	bne.n	800f5e6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f61a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	3314      	adds	r3, #20
 800f620:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f624:	e853 3f00 	ldrex	r3, [r3]
 800f628:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f62a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f62c:	f023 0301 	bic.w	r3, r3, #1
 800f630:	667b      	str	r3, [r7, #100]	@ 0x64
 800f632:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	3314      	adds	r3, #20
 800f638:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f63a:	647a      	str	r2, [r7, #68]	@ 0x44
 800f63c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f63e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f640:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f642:	e841 2300 	strex	r3, r2, [r1]
 800f646:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f648:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d1e5      	bne.n	800f61a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f64e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	3314      	adds	r3, #20
 800f654:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f658:	e853 3f00 	ldrex	r3, [r3]
 800f65c:	623b      	str	r3, [r7, #32]
   return(result);
 800f65e:	6a3b      	ldr	r3, [r7, #32]
 800f660:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f664:	663b      	str	r3, [r7, #96]	@ 0x60
 800f666:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	3314      	adds	r3, #20
 800f66c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f66e:	633a      	str	r2, [r7, #48]	@ 0x30
 800f670:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f672:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f674:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f676:	e841 2300 	strex	r3, r2, [r1]
 800f67a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f67c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d1e5      	bne.n	800f64e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f682:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f684:	2220      	movs	r2, #32
 800f686:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f68a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f68c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f68e:	2b01      	cmp	r3, #1
 800f690:	d119      	bne.n	800f6c6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f692:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	330c      	adds	r3, #12
 800f698:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f69a:	693b      	ldr	r3, [r7, #16]
 800f69c:	e853 3f00 	ldrex	r3, [r3]
 800f6a0:	60fb      	str	r3, [r7, #12]
   return(result);
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	f023 0310 	bic.w	r3, r3, #16
 800f6a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f6aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	330c      	adds	r3, #12
 800f6b0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f6b2:	61fa      	str	r2, [r7, #28]
 800f6b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6b6:	69b9      	ldr	r1, [r7, #24]
 800f6b8:	69fa      	ldr	r2, [r7, #28]
 800f6ba:	e841 2300 	strex	r3, r2, [r1]
 800f6be:	617b      	str	r3, [r7, #20]
   return(result);
 800f6c0:	697b      	ldr	r3, [r7, #20]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d1e5      	bne.n	800f692 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f6c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f6cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f6ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f6d0:	2b01      	cmp	r3, #1
 800f6d2:	d106      	bne.n	800f6e2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f6d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f6d6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800f6d8:	4619      	mov	r1, r3
 800f6da:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f6dc:	f7ff ff66 	bl	800f5ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f6e0:	e002      	b.n	800f6e8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800f6e2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f6e4:	f7ff ff3a 	bl	800f55c <HAL_UART_RxCpltCallback>
}
 800f6e8:	bf00      	nop
 800f6ea:	3770      	adds	r7, #112	@ 0x70
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	bd80      	pop	{r7, pc}

0800f6f0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b084      	sub	sp, #16
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6fc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	2201      	movs	r2, #1
 800f702:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f708:	2b01      	cmp	r3, #1
 800f70a:	d108      	bne.n	800f71e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800f710:	085b      	lsrs	r3, r3, #1
 800f712:	b29b      	uxth	r3, r3
 800f714:	4619      	mov	r1, r3
 800f716:	68f8      	ldr	r0, [r7, #12]
 800f718:	f7ff ff48 	bl	800f5ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f71c:	e002      	b.n	800f724 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800f71e:	68f8      	ldr	r0, [r7, #12]
 800f720:	f7ff ff26 	bl	800f570 <HAL_UART_RxHalfCpltCallback>
}
 800f724:	bf00      	nop
 800f726:	3710      	adds	r7, #16
 800f728:	46bd      	mov	sp, r7
 800f72a:	bd80      	pop	{r7, pc}

0800f72c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b084      	sub	sp, #16
 800f730:	af00      	add	r7, sp, #0
 800f732:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800f734:	2300      	movs	r3, #0
 800f736:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f73c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800f73e:	68bb      	ldr	r3, [r7, #8]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	695b      	ldr	r3, [r3, #20]
 800f744:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f748:	2b80      	cmp	r3, #128	@ 0x80
 800f74a:	bf0c      	ite	eq
 800f74c:	2301      	moveq	r3, #1
 800f74e:	2300      	movne	r3, #0
 800f750:	b2db      	uxtb	r3, r3
 800f752:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800f754:	68bb      	ldr	r3, [r7, #8]
 800f756:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f75a:	b2db      	uxtb	r3, r3
 800f75c:	2b21      	cmp	r3, #33	@ 0x21
 800f75e:	d108      	bne.n	800f772 <UART_DMAError+0x46>
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	2b00      	cmp	r3, #0
 800f764:	d005      	beq.n	800f772 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800f766:	68bb      	ldr	r3, [r7, #8]
 800f768:	2200      	movs	r2, #0
 800f76a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800f76c:	68b8      	ldr	r0, [r7, #8]
 800f76e:	f000 f955 	bl	800fa1c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800f772:	68bb      	ldr	r3, [r7, #8]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	695b      	ldr	r3, [r3, #20]
 800f778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f77c:	2b40      	cmp	r3, #64	@ 0x40
 800f77e:	bf0c      	ite	eq
 800f780:	2301      	moveq	r3, #1
 800f782:	2300      	movne	r3, #0
 800f784:	b2db      	uxtb	r3, r3
 800f786:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800f788:	68bb      	ldr	r3, [r7, #8]
 800f78a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f78e:	b2db      	uxtb	r3, r3
 800f790:	2b22      	cmp	r3, #34	@ 0x22
 800f792:	d108      	bne.n	800f7a6 <UART_DMAError+0x7a>
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d005      	beq.n	800f7a6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800f79a:	68bb      	ldr	r3, [r7, #8]
 800f79c:	2200      	movs	r2, #0
 800f79e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800f7a0:	68b8      	ldr	r0, [r7, #8]
 800f7a2:	f000 f963 	bl	800fa6c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f7a6:	68bb      	ldr	r3, [r7, #8]
 800f7a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f7aa:	f043 0210 	orr.w	r2, r3, #16
 800f7ae:	68bb      	ldr	r3, [r7, #8]
 800f7b0:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f7b2:	68b8      	ldr	r0, [r7, #8]
 800f7b4:	f7ff fee6 	bl	800f584 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f7b8:	bf00      	nop
 800f7ba:	3710      	adds	r7, #16
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	bd80      	pop	{r7, pc}

0800f7c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b086      	sub	sp, #24
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	60f8      	str	r0, [r7, #12]
 800f7c8:	60b9      	str	r1, [r7, #8]
 800f7ca:	603b      	str	r3, [r7, #0]
 800f7cc:	4613      	mov	r3, r2
 800f7ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f7d0:	e03b      	b.n	800f84a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f7d2:	6a3b      	ldr	r3, [r7, #32]
 800f7d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7d8:	d037      	beq.n	800f84a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f7da:	f7fa ff93 	bl	800a704 <HAL_GetTick>
 800f7de:	4602      	mov	r2, r0
 800f7e0:	683b      	ldr	r3, [r7, #0]
 800f7e2:	1ad3      	subs	r3, r2, r3
 800f7e4:	6a3a      	ldr	r2, [r7, #32]
 800f7e6:	429a      	cmp	r2, r3
 800f7e8:	d302      	bcc.n	800f7f0 <UART_WaitOnFlagUntilTimeout+0x30>
 800f7ea:	6a3b      	ldr	r3, [r7, #32]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d101      	bne.n	800f7f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f7f0:	2303      	movs	r3, #3
 800f7f2:	e03a      	b.n	800f86a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	68db      	ldr	r3, [r3, #12]
 800f7fa:	f003 0304 	and.w	r3, r3, #4
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d023      	beq.n	800f84a <UART_WaitOnFlagUntilTimeout+0x8a>
 800f802:	68bb      	ldr	r3, [r7, #8]
 800f804:	2b80      	cmp	r3, #128	@ 0x80
 800f806:	d020      	beq.n	800f84a <UART_WaitOnFlagUntilTimeout+0x8a>
 800f808:	68bb      	ldr	r3, [r7, #8]
 800f80a:	2b40      	cmp	r3, #64	@ 0x40
 800f80c:	d01d      	beq.n	800f84a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	f003 0308 	and.w	r3, r3, #8
 800f818:	2b08      	cmp	r3, #8
 800f81a:	d116      	bne.n	800f84a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800f81c:	2300      	movs	r3, #0
 800f81e:	617b      	str	r3, [r7, #20]
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	617b      	str	r3, [r7, #20]
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	685b      	ldr	r3, [r3, #4]
 800f82e:	617b      	str	r3, [r7, #20]
 800f830:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f832:	68f8      	ldr	r0, [r7, #12]
 800f834:	f000 f91a 	bl	800fa6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	2208      	movs	r2, #8
 800f83c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	2200      	movs	r2, #0
 800f842:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800f846:	2301      	movs	r3, #1
 800f848:	e00f      	b.n	800f86a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	681a      	ldr	r2, [r3, #0]
 800f850:	68bb      	ldr	r3, [r7, #8]
 800f852:	4013      	ands	r3, r2
 800f854:	68ba      	ldr	r2, [r7, #8]
 800f856:	429a      	cmp	r2, r3
 800f858:	bf0c      	ite	eq
 800f85a:	2301      	moveq	r3, #1
 800f85c:	2300      	movne	r3, #0
 800f85e:	b2db      	uxtb	r3, r3
 800f860:	461a      	mov	r2, r3
 800f862:	79fb      	ldrb	r3, [r7, #7]
 800f864:	429a      	cmp	r2, r3
 800f866:	d0b4      	beq.n	800f7d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f868:	2300      	movs	r3, #0
}
 800f86a:	4618      	mov	r0, r3
 800f86c:	3718      	adds	r7, #24
 800f86e:	46bd      	mov	sp, r7
 800f870:	bd80      	pop	{r7, pc}

0800f872 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f872:	b480      	push	{r7}
 800f874:	b085      	sub	sp, #20
 800f876:	af00      	add	r7, sp, #0
 800f878:	60f8      	str	r0, [r7, #12]
 800f87a:	60b9      	str	r1, [r7, #8]
 800f87c:	4613      	mov	r3, r2
 800f87e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	68ba      	ldr	r2, [r7, #8]
 800f884:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	88fa      	ldrh	r2, [r7, #6]
 800f88a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	88fa      	ldrh	r2, [r7, #6]
 800f890:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	2200      	movs	r2, #0
 800f896:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	2222      	movs	r2, #34	@ 0x22
 800f89c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	691b      	ldr	r3, [r3, #16]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d007      	beq.n	800f8b8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	68da      	ldr	r2, [r3, #12]
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800f8b6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	695a      	ldr	r2, [r3, #20]
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	f042 0201 	orr.w	r2, r2, #1
 800f8c6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	68da      	ldr	r2, [r3, #12]
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	f042 0220 	orr.w	r2, r2, #32
 800f8d6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f8d8:	2300      	movs	r3, #0
}
 800f8da:	4618      	mov	r0, r3
 800f8dc:	3714      	adds	r7, #20
 800f8de:	46bd      	mov	sp, r7
 800f8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e4:	4770      	bx	lr
	...

0800f8e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b098      	sub	sp, #96	@ 0x60
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	60f8      	str	r0, [r7, #12]
 800f8f0:	60b9      	str	r1, [r7, #8]
 800f8f2:	4613      	mov	r3, r2
 800f8f4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800f8f6:	68ba      	ldr	r2, [r7, #8]
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	88fa      	ldrh	r2, [r7, #6]
 800f900:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	2200      	movs	r2, #0
 800f906:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	2222      	movs	r2, #34	@ 0x22
 800f90c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f914:	4a3e      	ldr	r2, [pc, #248]	@ (800fa10 <UART_Start_Receive_DMA+0x128>)
 800f916:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f91c:	4a3d      	ldr	r2, [pc, #244]	@ (800fa14 <UART_Start_Receive_DMA+0x12c>)
 800f91e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f924:	4a3c      	ldr	r2, [pc, #240]	@ (800fa18 <UART_Start_Receive_DMA+0x130>)
 800f926:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f92c:	2200      	movs	r2, #0
 800f92e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800f930:	f107 0308 	add.w	r3, r7, #8
 800f934:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	3304      	adds	r3, #4
 800f940:	4619      	mov	r1, r3
 800f942:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f944:	681a      	ldr	r2, [r3, #0]
 800f946:	88fb      	ldrh	r3, [r7, #6]
 800f948:	f7fb fc9c 	bl	800b284 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800f94c:	2300      	movs	r3, #0
 800f94e:	613b      	str	r3, [r7, #16]
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	613b      	str	r3, [r7, #16]
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	685b      	ldr	r3, [r3, #4]
 800f95e:	613b      	str	r3, [r7, #16]
 800f960:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	691b      	ldr	r3, [r3, #16]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d019      	beq.n	800f99e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	330c      	adds	r3, #12
 800f970:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f972:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f974:	e853 3f00 	ldrex	r3, [r3]
 800f978:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f97a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f97c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f980:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	330c      	adds	r3, #12
 800f988:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f98a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800f98c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f98e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800f990:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f992:	e841 2300 	strex	r3, r2, [r1]
 800f996:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800f998:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d1e5      	bne.n	800f96a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	3314      	adds	r3, #20
 800f9a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9a8:	e853 3f00 	ldrex	r3, [r3]
 800f9ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f9ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9b0:	f043 0301 	orr.w	r3, r3, #1
 800f9b4:	657b      	str	r3, [r7, #84]	@ 0x54
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	3314      	adds	r3, #20
 800f9bc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f9be:	63ba      	str	r2, [r7, #56]	@ 0x38
 800f9c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9c2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800f9c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f9c6:	e841 2300 	strex	r3, r2, [r1]
 800f9ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f9cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d1e5      	bne.n	800f99e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	3314      	adds	r3, #20
 800f9d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9da:	69bb      	ldr	r3, [r7, #24]
 800f9dc:	e853 3f00 	ldrex	r3, [r3]
 800f9e0:	617b      	str	r3, [r7, #20]
   return(result);
 800f9e2:	697b      	ldr	r3, [r7, #20]
 800f9e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f9e8:	653b      	str	r3, [r7, #80]	@ 0x50
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	3314      	adds	r3, #20
 800f9f0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f9f2:	627a      	str	r2, [r7, #36]	@ 0x24
 800f9f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9f6:	6a39      	ldr	r1, [r7, #32]
 800f9f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f9fa:	e841 2300 	strex	r3, r2, [r1]
 800f9fe:	61fb      	str	r3, [r7, #28]
   return(result);
 800fa00:	69fb      	ldr	r3, [r7, #28]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d1e5      	bne.n	800f9d2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800fa06:	2300      	movs	r3, #0
}
 800fa08:	4618      	mov	r0, r3
 800fa0a:	3760      	adds	r7, #96	@ 0x60
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	bd80      	pop	{r7, pc}
 800fa10:	0800f5c5 	.word	0x0800f5c5
 800fa14:	0800f6f1 	.word	0x0800f6f1
 800fa18:	0800f72d 	.word	0x0800f72d

0800fa1c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800fa1c:	b480      	push	{r7}
 800fa1e:	b089      	sub	sp, #36	@ 0x24
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	330c      	adds	r3, #12
 800fa2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	e853 3f00 	ldrex	r3, [r3]
 800fa32:	60bb      	str	r3, [r7, #8]
   return(result);
 800fa34:	68bb      	ldr	r3, [r7, #8]
 800fa36:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800fa3a:	61fb      	str	r3, [r7, #28]
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	330c      	adds	r3, #12
 800fa42:	69fa      	ldr	r2, [r7, #28]
 800fa44:	61ba      	str	r2, [r7, #24]
 800fa46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa48:	6979      	ldr	r1, [r7, #20]
 800fa4a:	69ba      	ldr	r2, [r7, #24]
 800fa4c:	e841 2300 	strex	r3, r2, [r1]
 800fa50:	613b      	str	r3, [r7, #16]
   return(result);
 800fa52:	693b      	ldr	r3, [r7, #16]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d1e5      	bne.n	800fa24 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	2220      	movs	r2, #32
 800fa5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800fa60:	bf00      	nop
 800fa62:	3724      	adds	r7, #36	@ 0x24
 800fa64:	46bd      	mov	sp, r7
 800fa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6a:	4770      	bx	lr

0800fa6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fa6c:	b480      	push	{r7}
 800fa6e:	b095      	sub	sp, #84	@ 0x54
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	330c      	adds	r3, #12
 800fa7a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa7e:	e853 3f00 	ldrex	r3, [r3]
 800fa82:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fa84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fa8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	330c      	adds	r3, #12
 800fa92:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800fa94:	643a      	str	r2, [r7, #64]	@ 0x40
 800fa96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa98:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fa9a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fa9c:	e841 2300 	strex	r3, r2, [r1]
 800faa0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800faa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d1e5      	bne.n	800fa74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	3314      	adds	r3, #20
 800faae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fab0:	6a3b      	ldr	r3, [r7, #32]
 800fab2:	e853 3f00 	ldrex	r3, [r3]
 800fab6:	61fb      	str	r3, [r7, #28]
   return(result);
 800fab8:	69fb      	ldr	r3, [r7, #28]
 800faba:	f023 0301 	bic.w	r3, r3, #1
 800fabe:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	3314      	adds	r3, #20
 800fac6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fac8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800faca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800facc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800face:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fad0:	e841 2300 	strex	r3, r2, [r1]
 800fad4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d1e5      	bne.n	800faa8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fae0:	2b01      	cmp	r3, #1
 800fae2:	d119      	bne.n	800fb18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	330c      	adds	r3, #12
 800faea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	e853 3f00 	ldrex	r3, [r3]
 800faf2:	60bb      	str	r3, [r7, #8]
   return(result);
 800faf4:	68bb      	ldr	r3, [r7, #8]
 800faf6:	f023 0310 	bic.w	r3, r3, #16
 800fafa:	647b      	str	r3, [r7, #68]	@ 0x44
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	330c      	adds	r3, #12
 800fb02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fb04:	61ba      	str	r2, [r7, #24]
 800fb06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb08:	6979      	ldr	r1, [r7, #20]
 800fb0a:	69ba      	ldr	r2, [r7, #24]
 800fb0c:	e841 2300 	strex	r3, r2, [r1]
 800fb10:	613b      	str	r3, [r7, #16]
   return(result);
 800fb12:	693b      	ldr	r3, [r7, #16]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d1e5      	bne.n	800fae4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	2220      	movs	r2, #32
 800fb1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	2200      	movs	r2, #0
 800fb24:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800fb26:	bf00      	nop
 800fb28:	3754      	adds	r7, #84	@ 0x54
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb30:	4770      	bx	lr

0800fb32 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fb32:	b580      	push	{r7, lr}
 800fb34:	b084      	sub	sp, #16
 800fb36:	af00      	add	r7, sp, #0
 800fb38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	2200      	movs	r2, #0
 800fb44:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	2200      	movs	r2, #0
 800fb4a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fb4c:	68f8      	ldr	r0, [r7, #12]
 800fb4e:	f7ff fd19 	bl	800f584 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fb52:	bf00      	nop
 800fb54:	3710      	adds	r7, #16
 800fb56:	46bd      	mov	sp, r7
 800fb58:	bd80      	pop	{r7, pc}

0800fb5a <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800fb5a:	b580      	push	{r7, lr}
 800fb5c:	b084      	sub	sp, #16
 800fb5e:	af00      	add	r7, sp, #0
 800fb60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb66:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	2200      	movs	r2, #0
 800fb6c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	2220      	movs	r2, #32
 800fb72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	2200      	movs	r2, #0
 800fb7a:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800fb7c:	68f8      	ldr	r0, [r7, #12]
 800fb7e:	f7ff fd0b 	bl	800f598 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fb82:	bf00      	nop
 800fb84:	3710      	adds	r7, #16
 800fb86:	46bd      	mov	sp, r7
 800fb88:	bd80      	pop	{r7, pc}

0800fb8a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800fb8a:	b480      	push	{r7}
 800fb8c:	b085      	sub	sp, #20
 800fb8e:	af00      	add	r7, sp, #0
 800fb90:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fb98:	b2db      	uxtb	r3, r3
 800fb9a:	2b21      	cmp	r3, #33	@ 0x21
 800fb9c:	d13e      	bne.n	800fc1c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	689b      	ldr	r3, [r3, #8]
 800fba2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fba6:	d114      	bne.n	800fbd2 <UART_Transmit_IT+0x48>
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	691b      	ldr	r3, [r3, #16]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d110      	bne.n	800fbd2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	6a1b      	ldr	r3, [r3, #32]
 800fbb4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	881b      	ldrh	r3, [r3, #0]
 800fbba:	461a      	mov	r2, r3
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fbc4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	6a1b      	ldr	r3, [r3, #32]
 800fbca:	1c9a      	adds	r2, r3, #2
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	621a      	str	r2, [r3, #32]
 800fbd0:	e008      	b.n	800fbe4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	6a1b      	ldr	r3, [r3, #32]
 800fbd6:	1c59      	adds	r1, r3, #1
 800fbd8:	687a      	ldr	r2, [r7, #4]
 800fbda:	6211      	str	r1, [r2, #32]
 800fbdc:	781a      	ldrb	r2, [r3, #0]
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800fbe8:	b29b      	uxth	r3, r3
 800fbea:	3b01      	subs	r3, #1
 800fbec:	b29b      	uxth	r3, r3
 800fbee:	687a      	ldr	r2, [r7, #4]
 800fbf0:	4619      	mov	r1, r3
 800fbf2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d10f      	bne.n	800fc18 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	68da      	ldr	r2, [r3, #12]
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800fc06:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	68da      	ldr	r2, [r3, #12]
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fc16:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800fc18:	2300      	movs	r3, #0
 800fc1a:	e000      	b.n	800fc1e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800fc1c:	2302      	movs	r3, #2
  }
}
 800fc1e:	4618      	mov	r0, r3
 800fc20:	3714      	adds	r7, #20
 800fc22:	46bd      	mov	sp, r7
 800fc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc28:	4770      	bx	lr

0800fc2a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fc2a:	b580      	push	{r7, lr}
 800fc2c:	b082      	sub	sp, #8
 800fc2e:	af00      	add	r7, sp, #0
 800fc30:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	68da      	ldr	r2, [r3, #12]
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800fc40:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	2220      	movs	r2, #32
 800fc46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fc4a:	6878      	ldr	r0, [r7, #4]
 800fc4c:	f7ff fc7c 	bl	800f548 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800fc50:	2300      	movs	r3, #0
}
 800fc52:	4618      	mov	r0, r3
 800fc54:	3708      	adds	r7, #8
 800fc56:	46bd      	mov	sp, r7
 800fc58:	bd80      	pop	{r7, pc}

0800fc5a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800fc5a:	b580      	push	{r7, lr}
 800fc5c:	b08c      	sub	sp, #48	@ 0x30
 800fc5e:	af00      	add	r7, sp, #0
 800fc60:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fc68:	b2db      	uxtb	r3, r3
 800fc6a:	2b22      	cmp	r3, #34	@ 0x22
 800fc6c:	f040 80ae 	bne.w	800fdcc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	689b      	ldr	r3, [r3, #8]
 800fc74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fc78:	d117      	bne.n	800fcaa <UART_Receive_IT+0x50>
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	691b      	ldr	r3, [r3, #16]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d113      	bne.n	800fcaa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800fc82:	2300      	movs	r3, #0
 800fc84:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc8a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	685b      	ldr	r3, [r3, #4]
 800fc92:	b29b      	uxth	r3, r3
 800fc94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc98:	b29a      	uxth	r2, r3
 800fc9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc9c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fca2:	1c9a      	adds	r2, r3, #2
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	629a      	str	r2, [r3, #40]	@ 0x28
 800fca8:	e026      	b.n	800fcf8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fcae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	689b      	ldr	r3, [r3, #8]
 800fcb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fcbc:	d007      	beq.n	800fcce <UART_Receive_IT+0x74>
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	689b      	ldr	r3, [r3, #8]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d10a      	bne.n	800fcdc <UART_Receive_IT+0x82>
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	691b      	ldr	r3, [r3, #16]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d106      	bne.n	800fcdc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	685b      	ldr	r3, [r3, #4]
 800fcd4:	b2da      	uxtb	r2, r3
 800fcd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcd8:	701a      	strb	r2, [r3, #0]
 800fcda:	e008      	b.n	800fcee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	685b      	ldr	r3, [r3, #4]
 800fce2:	b2db      	uxtb	r3, r3
 800fce4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fce8:	b2da      	uxtb	r2, r3
 800fcea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fcf2:	1c5a      	adds	r2, r3, #1
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800fcfc:	b29b      	uxth	r3, r3
 800fcfe:	3b01      	subs	r3, #1
 800fd00:	b29b      	uxth	r3, r3
 800fd02:	687a      	ldr	r2, [r7, #4]
 800fd04:	4619      	mov	r1, r3
 800fd06:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d15d      	bne.n	800fdc8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	68da      	ldr	r2, [r3, #12]
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	f022 0220 	bic.w	r2, r2, #32
 800fd1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	68da      	ldr	r2, [r3, #12]
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800fd2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	695a      	ldr	r2, [r3, #20]
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	f022 0201 	bic.w	r2, r2, #1
 800fd3a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	2220      	movs	r2, #32
 800fd40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	2200      	movs	r2, #0
 800fd48:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd4e:	2b01      	cmp	r3, #1
 800fd50:	d135      	bne.n	800fdbe <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	2200      	movs	r2, #0
 800fd56:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	330c      	adds	r3, #12
 800fd5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd60:	697b      	ldr	r3, [r7, #20]
 800fd62:	e853 3f00 	ldrex	r3, [r3]
 800fd66:	613b      	str	r3, [r7, #16]
   return(result);
 800fd68:	693b      	ldr	r3, [r7, #16]
 800fd6a:	f023 0310 	bic.w	r3, r3, #16
 800fd6e:	627b      	str	r3, [r7, #36]	@ 0x24
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	330c      	adds	r3, #12
 800fd76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fd78:	623a      	str	r2, [r7, #32]
 800fd7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd7c:	69f9      	ldr	r1, [r7, #28]
 800fd7e:	6a3a      	ldr	r2, [r7, #32]
 800fd80:	e841 2300 	strex	r3, r2, [r1]
 800fd84:	61bb      	str	r3, [r7, #24]
   return(result);
 800fd86:	69bb      	ldr	r3, [r7, #24]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d1e5      	bne.n	800fd58 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	f003 0310 	and.w	r3, r3, #16
 800fd96:	2b10      	cmp	r3, #16
 800fd98:	d10a      	bne.n	800fdb0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	60fb      	str	r3, [r7, #12]
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	60fb      	str	r3, [r7, #12]
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	685b      	ldr	r3, [r3, #4]
 800fdac:	60fb      	str	r3, [r7, #12]
 800fdae:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800fdb4:	4619      	mov	r1, r3
 800fdb6:	6878      	ldr	r0, [r7, #4]
 800fdb8:	f7ff fbf8 	bl	800f5ac <HAL_UARTEx_RxEventCallback>
 800fdbc:	e002      	b.n	800fdc4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800fdbe:	6878      	ldr	r0, [r7, #4]
 800fdc0:	f7ff fbcc 	bl	800f55c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	e002      	b.n	800fdce <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800fdc8:	2300      	movs	r3, #0
 800fdca:	e000      	b.n	800fdce <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800fdcc:	2302      	movs	r3, #2
  }
}
 800fdce:	4618      	mov	r0, r3
 800fdd0:	3730      	adds	r7, #48	@ 0x30
 800fdd2:	46bd      	mov	sp, r7
 800fdd4:	bd80      	pop	{r7, pc}
	...

0800fdd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fdd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fddc:	b0c0      	sub	sp, #256	@ 0x100
 800fdde:	af00      	add	r7, sp, #0
 800fde0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fde4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	691b      	ldr	r3, [r3, #16]
 800fdec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800fdf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fdf4:	68d9      	ldr	r1, [r3, #12]
 800fdf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fdfa:	681a      	ldr	r2, [r3, #0]
 800fdfc:	ea40 0301 	orr.w	r3, r0, r1
 800fe00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800fe02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fe06:	689a      	ldr	r2, [r3, #8]
 800fe08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fe0c:	691b      	ldr	r3, [r3, #16]
 800fe0e:	431a      	orrs	r2, r3
 800fe10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fe14:	695b      	ldr	r3, [r3, #20]
 800fe16:	431a      	orrs	r2, r3
 800fe18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fe1c:	69db      	ldr	r3, [r3, #28]
 800fe1e:	4313      	orrs	r3, r2
 800fe20:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800fe24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	68db      	ldr	r3, [r3, #12]
 800fe2c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800fe30:	f021 010c 	bic.w	r1, r1, #12
 800fe34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fe38:	681a      	ldr	r2, [r3, #0]
 800fe3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800fe3e:	430b      	orrs	r3, r1
 800fe40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800fe42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	695b      	ldr	r3, [r3, #20]
 800fe4a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800fe4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fe52:	6999      	ldr	r1, [r3, #24]
 800fe54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fe58:	681a      	ldr	r2, [r3, #0]
 800fe5a:	ea40 0301 	orr.w	r3, r0, r1
 800fe5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800fe60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fe64:	681a      	ldr	r2, [r3, #0]
 800fe66:	4b8f      	ldr	r3, [pc, #572]	@ (80100a4 <UART_SetConfig+0x2cc>)
 800fe68:	429a      	cmp	r2, r3
 800fe6a:	d005      	beq.n	800fe78 <UART_SetConfig+0xa0>
 800fe6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fe70:	681a      	ldr	r2, [r3, #0]
 800fe72:	4b8d      	ldr	r3, [pc, #564]	@ (80100a8 <UART_SetConfig+0x2d0>)
 800fe74:	429a      	cmp	r2, r3
 800fe76:	d104      	bne.n	800fe82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800fe78:	f7fc fbaa 	bl	800c5d0 <HAL_RCC_GetPCLK2Freq>
 800fe7c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800fe80:	e003      	b.n	800fe8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800fe82:	f7fc fb91 	bl	800c5a8 <HAL_RCC_GetPCLK1Freq>
 800fe86:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fe8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fe8e:	69db      	ldr	r3, [r3, #28]
 800fe90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fe94:	f040 810c 	bne.w	80100b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800fe98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800fe9c:	2200      	movs	r2, #0
 800fe9e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800fea2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800fea6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800feaa:	4622      	mov	r2, r4
 800feac:	462b      	mov	r3, r5
 800feae:	1891      	adds	r1, r2, r2
 800feb0:	65b9      	str	r1, [r7, #88]	@ 0x58
 800feb2:	415b      	adcs	r3, r3
 800feb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800feb6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800feba:	4621      	mov	r1, r4
 800febc:	eb12 0801 	adds.w	r8, r2, r1
 800fec0:	4629      	mov	r1, r5
 800fec2:	eb43 0901 	adc.w	r9, r3, r1
 800fec6:	f04f 0200 	mov.w	r2, #0
 800feca:	f04f 0300 	mov.w	r3, #0
 800fece:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800fed2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800fed6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800feda:	4690      	mov	r8, r2
 800fedc:	4699      	mov	r9, r3
 800fede:	4623      	mov	r3, r4
 800fee0:	eb18 0303 	adds.w	r3, r8, r3
 800fee4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800fee8:	462b      	mov	r3, r5
 800feea:	eb49 0303 	adc.w	r3, r9, r3
 800feee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800fef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fef6:	685b      	ldr	r3, [r3, #4]
 800fef8:	2200      	movs	r2, #0
 800fefa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800fefe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800ff02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800ff06:	460b      	mov	r3, r1
 800ff08:	18db      	adds	r3, r3, r3
 800ff0a:	653b      	str	r3, [r7, #80]	@ 0x50
 800ff0c:	4613      	mov	r3, r2
 800ff0e:	eb42 0303 	adc.w	r3, r2, r3
 800ff12:	657b      	str	r3, [r7, #84]	@ 0x54
 800ff14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800ff18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800ff1c:	f7f0 feac 	bl	8000c78 <__aeabi_uldivmod>
 800ff20:	4602      	mov	r2, r0
 800ff22:	460b      	mov	r3, r1
 800ff24:	4b61      	ldr	r3, [pc, #388]	@ (80100ac <UART_SetConfig+0x2d4>)
 800ff26:	fba3 2302 	umull	r2, r3, r3, r2
 800ff2a:	095b      	lsrs	r3, r3, #5
 800ff2c:	011c      	lsls	r4, r3, #4
 800ff2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ff32:	2200      	movs	r2, #0
 800ff34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ff38:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800ff3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800ff40:	4642      	mov	r2, r8
 800ff42:	464b      	mov	r3, r9
 800ff44:	1891      	adds	r1, r2, r2
 800ff46:	64b9      	str	r1, [r7, #72]	@ 0x48
 800ff48:	415b      	adcs	r3, r3
 800ff4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ff4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800ff50:	4641      	mov	r1, r8
 800ff52:	eb12 0a01 	adds.w	sl, r2, r1
 800ff56:	4649      	mov	r1, r9
 800ff58:	eb43 0b01 	adc.w	fp, r3, r1
 800ff5c:	f04f 0200 	mov.w	r2, #0
 800ff60:	f04f 0300 	mov.w	r3, #0
 800ff64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ff68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ff6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ff70:	4692      	mov	sl, r2
 800ff72:	469b      	mov	fp, r3
 800ff74:	4643      	mov	r3, r8
 800ff76:	eb1a 0303 	adds.w	r3, sl, r3
 800ff7a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ff7e:	464b      	mov	r3, r9
 800ff80:	eb4b 0303 	adc.w	r3, fp, r3
 800ff84:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ff88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ff8c:	685b      	ldr	r3, [r3, #4]
 800ff8e:	2200      	movs	r2, #0
 800ff90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ff94:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800ff98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ff9c:	460b      	mov	r3, r1
 800ff9e:	18db      	adds	r3, r3, r3
 800ffa0:	643b      	str	r3, [r7, #64]	@ 0x40
 800ffa2:	4613      	mov	r3, r2
 800ffa4:	eb42 0303 	adc.w	r3, r2, r3
 800ffa8:	647b      	str	r3, [r7, #68]	@ 0x44
 800ffaa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800ffae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800ffb2:	f7f0 fe61 	bl	8000c78 <__aeabi_uldivmod>
 800ffb6:	4602      	mov	r2, r0
 800ffb8:	460b      	mov	r3, r1
 800ffba:	4611      	mov	r1, r2
 800ffbc:	4b3b      	ldr	r3, [pc, #236]	@ (80100ac <UART_SetConfig+0x2d4>)
 800ffbe:	fba3 2301 	umull	r2, r3, r3, r1
 800ffc2:	095b      	lsrs	r3, r3, #5
 800ffc4:	2264      	movs	r2, #100	@ 0x64
 800ffc6:	fb02 f303 	mul.w	r3, r2, r3
 800ffca:	1acb      	subs	r3, r1, r3
 800ffcc:	00db      	lsls	r3, r3, #3
 800ffce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800ffd2:	4b36      	ldr	r3, [pc, #216]	@ (80100ac <UART_SetConfig+0x2d4>)
 800ffd4:	fba3 2302 	umull	r2, r3, r3, r2
 800ffd8:	095b      	lsrs	r3, r3, #5
 800ffda:	005b      	lsls	r3, r3, #1
 800ffdc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800ffe0:	441c      	add	r4, r3
 800ffe2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ffe6:	2200      	movs	r2, #0
 800ffe8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ffec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800fff0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800fff4:	4642      	mov	r2, r8
 800fff6:	464b      	mov	r3, r9
 800fff8:	1891      	adds	r1, r2, r2
 800fffa:	63b9      	str	r1, [r7, #56]	@ 0x38
 800fffc:	415b      	adcs	r3, r3
 800fffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010000:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8010004:	4641      	mov	r1, r8
 8010006:	1851      	adds	r1, r2, r1
 8010008:	6339      	str	r1, [r7, #48]	@ 0x30
 801000a:	4649      	mov	r1, r9
 801000c:	414b      	adcs	r3, r1
 801000e:	637b      	str	r3, [r7, #52]	@ 0x34
 8010010:	f04f 0200 	mov.w	r2, #0
 8010014:	f04f 0300 	mov.w	r3, #0
 8010018:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 801001c:	4659      	mov	r1, fp
 801001e:	00cb      	lsls	r3, r1, #3
 8010020:	4651      	mov	r1, sl
 8010022:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010026:	4651      	mov	r1, sl
 8010028:	00ca      	lsls	r2, r1, #3
 801002a:	4610      	mov	r0, r2
 801002c:	4619      	mov	r1, r3
 801002e:	4603      	mov	r3, r0
 8010030:	4642      	mov	r2, r8
 8010032:	189b      	adds	r3, r3, r2
 8010034:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010038:	464b      	mov	r3, r9
 801003a:	460a      	mov	r2, r1
 801003c:	eb42 0303 	adc.w	r3, r2, r3
 8010040:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8010044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010048:	685b      	ldr	r3, [r3, #4]
 801004a:	2200      	movs	r2, #0
 801004c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8010050:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8010054:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8010058:	460b      	mov	r3, r1
 801005a:	18db      	adds	r3, r3, r3
 801005c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801005e:	4613      	mov	r3, r2
 8010060:	eb42 0303 	adc.w	r3, r2, r3
 8010064:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010066:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 801006a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 801006e:	f7f0 fe03 	bl	8000c78 <__aeabi_uldivmod>
 8010072:	4602      	mov	r2, r0
 8010074:	460b      	mov	r3, r1
 8010076:	4b0d      	ldr	r3, [pc, #52]	@ (80100ac <UART_SetConfig+0x2d4>)
 8010078:	fba3 1302 	umull	r1, r3, r3, r2
 801007c:	095b      	lsrs	r3, r3, #5
 801007e:	2164      	movs	r1, #100	@ 0x64
 8010080:	fb01 f303 	mul.w	r3, r1, r3
 8010084:	1ad3      	subs	r3, r2, r3
 8010086:	00db      	lsls	r3, r3, #3
 8010088:	3332      	adds	r3, #50	@ 0x32
 801008a:	4a08      	ldr	r2, [pc, #32]	@ (80100ac <UART_SetConfig+0x2d4>)
 801008c:	fba2 2303 	umull	r2, r3, r2, r3
 8010090:	095b      	lsrs	r3, r3, #5
 8010092:	f003 0207 	and.w	r2, r3, #7
 8010096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	4422      	add	r2, r4
 801009e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80100a0:	e106      	b.n	80102b0 <UART_SetConfig+0x4d8>
 80100a2:	bf00      	nop
 80100a4:	40011000 	.word	0x40011000
 80100a8:	40011400 	.word	0x40011400
 80100ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80100b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80100b4:	2200      	movs	r2, #0
 80100b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80100ba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80100be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80100c2:	4642      	mov	r2, r8
 80100c4:	464b      	mov	r3, r9
 80100c6:	1891      	adds	r1, r2, r2
 80100c8:	6239      	str	r1, [r7, #32]
 80100ca:	415b      	adcs	r3, r3
 80100cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80100ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80100d2:	4641      	mov	r1, r8
 80100d4:	1854      	adds	r4, r2, r1
 80100d6:	4649      	mov	r1, r9
 80100d8:	eb43 0501 	adc.w	r5, r3, r1
 80100dc:	f04f 0200 	mov.w	r2, #0
 80100e0:	f04f 0300 	mov.w	r3, #0
 80100e4:	00eb      	lsls	r3, r5, #3
 80100e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80100ea:	00e2      	lsls	r2, r4, #3
 80100ec:	4614      	mov	r4, r2
 80100ee:	461d      	mov	r5, r3
 80100f0:	4643      	mov	r3, r8
 80100f2:	18e3      	adds	r3, r4, r3
 80100f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80100f8:	464b      	mov	r3, r9
 80100fa:	eb45 0303 	adc.w	r3, r5, r3
 80100fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8010102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010106:	685b      	ldr	r3, [r3, #4]
 8010108:	2200      	movs	r2, #0
 801010a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801010e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8010112:	f04f 0200 	mov.w	r2, #0
 8010116:	f04f 0300 	mov.w	r3, #0
 801011a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 801011e:	4629      	mov	r1, r5
 8010120:	008b      	lsls	r3, r1, #2
 8010122:	4621      	mov	r1, r4
 8010124:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010128:	4621      	mov	r1, r4
 801012a:	008a      	lsls	r2, r1, #2
 801012c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8010130:	f7f0 fda2 	bl	8000c78 <__aeabi_uldivmod>
 8010134:	4602      	mov	r2, r0
 8010136:	460b      	mov	r3, r1
 8010138:	4b60      	ldr	r3, [pc, #384]	@ (80102bc <UART_SetConfig+0x4e4>)
 801013a:	fba3 2302 	umull	r2, r3, r3, r2
 801013e:	095b      	lsrs	r3, r3, #5
 8010140:	011c      	lsls	r4, r3, #4
 8010142:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010146:	2200      	movs	r2, #0
 8010148:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801014c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8010150:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8010154:	4642      	mov	r2, r8
 8010156:	464b      	mov	r3, r9
 8010158:	1891      	adds	r1, r2, r2
 801015a:	61b9      	str	r1, [r7, #24]
 801015c:	415b      	adcs	r3, r3
 801015e:	61fb      	str	r3, [r7, #28]
 8010160:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010164:	4641      	mov	r1, r8
 8010166:	1851      	adds	r1, r2, r1
 8010168:	6139      	str	r1, [r7, #16]
 801016a:	4649      	mov	r1, r9
 801016c:	414b      	adcs	r3, r1
 801016e:	617b      	str	r3, [r7, #20]
 8010170:	f04f 0200 	mov.w	r2, #0
 8010174:	f04f 0300 	mov.w	r3, #0
 8010178:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801017c:	4659      	mov	r1, fp
 801017e:	00cb      	lsls	r3, r1, #3
 8010180:	4651      	mov	r1, sl
 8010182:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010186:	4651      	mov	r1, sl
 8010188:	00ca      	lsls	r2, r1, #3
 801018a:	4610      	mov	r0, r2
 801018c:	4619      	mov	r1, r3
 801018e:	4603      	mov	r3, r0
 8010190:	4642      	mov	r2, r8
 8010192:	189b      	adds	r3, r3, r2
 8010194:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010198:	464b      	mov	r3, r9
 801019a:	460a      	mov	r2, r1
 801019c:	eb42 0303 	adc.w	r3, r2, r3
 80101a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80101a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80101a8:	685b      	ldr	r3, [r3, #4]
 80101aa:	2200      	movs	r2, #0
 80101ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80101ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80101b0:	f04f 0200 	mov.w	r2, #0
 80101b4:	f04f 0300 	mov.w	r3, #0
 80101b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80101bc:	4649      	mov	r1, r9
 80101be:	008b      	lsls	r3, r1, #2
 80101c0:	4641      	mov	r1, r8
 80101c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80101c6:	4641      	mov	r1, r8
 80101c8:	008a      	lsls	r2, r1, #2
 80101ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80101ce:	f7f0 fd53 	bl	8000c78 <__aeabi_uldivmod>
 80101d2:	4602      	mov	r2, r0
 80101d4:	460b      	mov	r3, r1
 80101d6:	4611      	mov	r1, r2
 80101d8:	4b38      	ldr	r3, [pc, #224]	@ (80102bc <UART_SetConfig+0x4e4>)
 80101da:	fba3 2301 	umull	r2, r3, r3, r1
 80101de:	095b      	lsrs	r3, r3, #5
 80101e0:	2264      	movs	r2, #100	@ 0x64
 80101e2:	fb02 f303 	mul.w	r3, r2, r3
 80101e6:	1acb      	subs	r3, r1, r3
 80101e8:	011b      	lsls	r3, r3, #4
 80101ea:	3332      	adds	r3, #50	@ 0x32
 80101ec:	4a33      	ldr	r2, [pc, #204]	@ (80102bc <UART_SetConfig+0x4e4>)
 80101ee:	fba2 2303 	umull	r2, r3, r2, r3
 80101f2:	095b      	lsrs	r3, r3, #5
 80101f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80101f8:	441c      	add	r4, r3
 80101fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80101fe:	2200      	movs	r2, #0
 8010200:	673b      	str	r3, [r7, #112]	@ 0x70
 8010202:	677a      	str	r2, [r7, #116]	@ 0x74
 8010204:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8010208:	4642      	mov	r2, r8
 801020a:	464b      	mov	r3, r9
 801020c:	1891      	adds	r1, r2, r2
 801020e:	60b9      	str	r1, [r7, #8]
 8010210:	415b      	adcs	r3, r3
 8010212:	60fb      	str	r3, [r7, #12]
 8010214:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010218:	4641      	mov	r1, r8
 801021a:	1851      	adds	r1, r2, r1
 801021c:	6039      	str	r1, [r7, #0]
 801021e:	4649      	mov	r1, r9
 8010220:	414b      	adcs	r3, r1
 8010222:	607b      	str	r3, [r7, #4]
 8010224:	f04f 0200 	mov.w	r2, #0
 8010228:	f04f 0300 	mov.w	r3, #0
 801022c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8010230:	4659      	mov	r1, fp
 8010232:	00cb      	lsls	r3, r1, #3
 8010234:	4651      	mov	r1, sl
 8010236:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801023a:	4651      	mov	r1, sl
 801023c:	00ca      	lsls	r2, r1, #3
 801023e:	4610      	mov	r0, r2
 8010240:	4619      	mov	r1, r3
 8010242:	4603      	mov	r3, r0
 8010244:	4642      	mov	r2, r8
 8010246:	189b      	adds	r3, r3, r2
 8010248:	66bb      	str	r3, [r7, #104]	@ 0x68
 801024a:	464b      	mov	r3, r9
 801024c:	460a      	mov	r2, r1
 801024e:	eb42 0303 	adc.w	r3, r2, r3
 8010252:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8010254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010258:	685b      	ldr	r3, [r3, #4]
 801025a:	2200      	movs	r2, #0
 801025c:	663b      	str	r3, [r7, #96]	@ 0x60
 801025e:	667a      	str	r2, [r7, #100]	@ 0x64
 8010260:	f04f 0200 	mov.w	r2, #0
 8010264:	f04f 0300 	mov.w	r3, #0
 8010268:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 801026c:	4649      	mov	r1, r9
 801026e:	008b      	lsls	r3, r1, #2
 8010270:	4641      	mov	r1, r8
 8010272:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010276:	4641      	mov	r1, r8
 8010278:	008a      	lsls	r2, r1, #2
 801027a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 801027e:	f7f0 fcfb 	bl	8000c78 <__aeabi_uldivmod>
 8010282:	4602      	mov	r2, r0
 8010284:	460b      	mov	r3, r1
 8010286:	4b0d      	ldr	r3, [pc, #52]	@ (80102bc <UART_SetConfig+0x4e4>)
 8010288:	fba3 1302 	umull	r1, r3, r3, r2
 801028c:	095b      	lsrs	r3, r3, #5
 801028e:	2164      	movs	r1, #100	@ 0x64
 8010290:	fb01 f303 	mul.w	r3, r1, r3
 8010294:	1ad3      	subs	r3, r2, r3
 8010296:	011b      	lsls	r3, r3, #4
 8010298:	3332      	adds	r3, #50	@ 0x32
 801029a:	4a08      	ldr	r2, [pc, #32]	@ (80102bc <UART_SetConfig+0x4e4>)
 801029c:	fba2 2303 	umull	r2, r3, r2, r3
 80102a0:	095b      	lsrs	r3, r3, #5
 80102a2:	f003 020f 	and.w	r2, r3, #15
 80102a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	4422      	add	r2, r4
 80102ae:	609a      	str	r2, [r3, #8]
}
 80102b0:	bf00      	nop
 80102b2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80102b6:	46bd      	mov	sp, r7
 80102b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80102bc:	51eb851f 	.word	0x51eb851f

080102c0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80102c0:	b480      	push	{r7}
 80102c2:	b085      	sub	sp, #20
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	4603      	mov	r3, r0
 80102c8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80102ca:	2300      	movs	r3, #0
 80102cc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80102ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80102d2:	2b84      	cmp	r3, #132	@ 0x84
 80102d4:	d005      	beq.n	80102e2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80102d6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	4413      	add	r3, r2
 80102de:	3303      	adds	r3, #3
 80102e0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80102e2:	68fb      	ldr	r3, [r7, #12]
}
 80102e4:	4618      	mov	r0, r3
 80102e6:	3714      	adds	r7, #20
 80102e8:	46bd      	mov	sp, r7
 80102ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ee:	4770      	bx	lr

080102f0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80102f0:	b480      	push	{r7}
 80102f2:	b083      	sub	sp, #12
 80102f4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80102f6:	f3ef 8305 	mrs	r3, IPSR
 80102fa:	607b      	str	r3, [r7, #4]
  return(result);
 80102fc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80102fe:	2b00      	cmp	r3, #0
 8010300:	bf14      	ite	ne
 8010302:	2301      	movne	r3, #1
 8010304:	2300      	moveq	r3, #0
 8010306:	b2db      	uxtb	r3, r3
}
 8010308:	4618      	mov	r0, r3
 801030a:	370c      	adds	r7, #12
 801030c:	46bd      	mov	sp, r7
 801030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010312:	4770      	bx	lr

08010314 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8010314:	b580      	push	{r7, lr}
 8010316:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8010318:	f001 fa3a 	bl	8011790 <vTaskStartScheduler>
  
  return osOK;
 801031c:	2300      	movs	r3, #0
}
 801031e:	4618      	mov	r0, r3
 8010320:	bd80      	pop	{r7, pc}

08010322 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8010322:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010324:	b089      	sub	sp, #36	@ 0x24
 8010326:	af04      	add	r7, sp, #16
 8010328:	6078      	str	r0, [r7, #4]
 801032a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	695b      	ldr	r3, [r3, #20]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d020      	beq.n	8010376 <osThreadCreate+0x54>
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	699b      	ldr	r3, [r3, #24]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d01c      	beq.n	8010376 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	685c      	ldr	r4, [r3, #4]
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	691e      	ldr	r6, [r3, #16]
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801034e:	4618      	mov	r0, r3
 8010350:	f7ff ffb6 	bl	80102c0 <makeFreeRtosPriority>
 8010354:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	695b      	ldr	r3, [r3, #20]
 801035a:	687a      	ldr	r2, [r7, #4]
 801035c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801035e:	9202      	str	r2, [sp, #8]
 8010360:	9301      	str	r3, [sp, #4]
 8010362:	9100      	str	r1, [sp, #0]
 8010364:	683b      	ldr	r3, [r7, #0]
 8010366:	4632      	mov	r2, r6
 8010368:	4629      	mov	r1, r5
 801036a:	4620      	mov	r0, r4
 801036c:	f000 ff06 	bl	801117c <xTaskCreateStatic>
 8010370:	4603      	mov	r3, r0
 8010372:	60fb      	str	r3, [r7, #12]
 8010374:	e01c      	b.n	80103b0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	685c      	ldr	r4, [r3, #4]
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010382:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801038a:	4618      	mov	r0, r3
 801038c:	f7ff ff98 	bl	80102c0 <makeFreeRtosPriority>
 8010390:	4602      	mov	r2, r0
 8010392:	f107 030c 	add.w	r3, r7, #12
 8010396:	9301      	str	r3, [sp, #4]
 8010398:	9200      	str	r2, [sp, #0]
 801039a:	683b      	ldr	r3, [r7, #0]
 801039c:	4632      	mov	r2, r6
 801039e:	4629      	mov	r1, r5
 80103a0:	4620      	mov	r0, r4
 80103a2:	f000 ff4b 	bl	801123c <xTaskCreate>
 80103a6:	4603      	mov	r3, r0
 80103a8:	2b01      	cmp	r3, #1
 80103aa:	d001      	beq.n	80103b0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80103ac:	2300      	movs	r3, #0
 80103ae:	e000      	b.n	80103b2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80103b0:	68fb      	ldr	r3, [r7, #12]
}
 80103b2:	4618      	mov	r0, r3
 80103b4:	3714      	adds	r7, #20
 80103b6:	46bd      	mov	sp, r7
 80103b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080103ba <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80103ba:	b580      	push	{r7, lr}
 80103bc:	b084      	sub	sp, #16
 80103be:	af00      	add	r7, sp, #0
 80103c0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d001      	beq.n	80103d0 <osDelay+0x16>
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	e000      	b.n	80103d2 <osDelay+0x18>
 80103d0:	2301      	movs	r3, #1
 80103d2:	4618      	mov	r0, r3
 80103d4:	f001 f882 	bl	80114dc <vTaskDelay>
  
  return osOK;
 80103d8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80103da:	4618      	mov	r0, r3
 80103dc:	3710      	adds	r7, #16
 80103de:	46bd      	mov	sp, r7
 80103e0:	bd80      	pop	{r7, pc}
	...

080103e4 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b086      	sub	sp, #24
 80103e8:	af02      	add	r7, sp, #8
 80103ea:	60f8      	str	r0, [r7, #12]
 80103ec:	460b      	mov	r3, r1
 80103ee:	607a      	str	r2, [r7, #4]
 80103f0:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	685b      	ldr	r3, [r3, #4]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d013      	beq.n	8010422 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 80103fa:	7afb      	ldrb	r3, [r7, #11]
 80103fc:	2b01      	cmp	r3, #1
 80103fe:	d101      	bne.n	8010404 <osTimerCreate+0x20>
 8010400:	2101      	movs	r1, #1
 8010402:	e000      	b.n	8010406 <osTimerCreate+0x22>
 8010404:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 801040a:	68fa      	ldr	r2, [r7, #12]
 801040c:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 801040e:	9201      	str	r2, [sp, #4]
 8010410:	9300      	str	r3, [sp, #0]
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	460a      	mov	r2, r1
 8010416:	2101      	movs	r1, #1
 8010418:	480b      	ldr	r0, [pc, #44]	@ (8010448 <osTimerCreate+0x64>)
 801041a:	f001 ff92 	bl	8012342 <xTimerCreateStatic>
 801041e:	4603      	mov	r3, r0
 8010420:	e00e      	b.n	8010440 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8010422:	7afb      	ldrb	r3, [r7, #11]
 8010424:	2b01      	cmp	r3, #1
 8010426:	d101      	bne.n	801042c <osTimerCreate+0x48>
 8010428:	2201      	movs	r2, #1
 801042a:	e000      	b.n	801042e <osTimerCreate+0x4a>
 801042c:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8010432:	9300      	str	r3, [sp, #0]
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	2101      	movs	r1, #1
 8010438:	4803      	ldr	r0, [pc, #12]	@ (8010448 <osTimerCreate+0x64>)
 801043a:	f001 ff61 	bl	8012300 <xTimerCreate>
 801043e:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8010440:	4618      	mov	r0, r3
 8010442:	3710      	adds	r7, #16
 8010444:	46bd      	mov	sp, r7
 8010446:	bd80      	pop	{r7, pc}
 8010448:	080141b0 	.word	0x080141b0

0801044c <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 801044c:	b580      	push	{r7, lr}
 801044e:	b088      	sub	sp, #32
 8010450:	af02      	add	r7, sp, #8
 8010452:	6078      	str	r0, [r7, #4]
 8010454:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8010456:	2300      	movs	r3, #0
 8010458:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 801045a:	2300      	movs	r3, #0
 801045c:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 801045e:	683b      	ldr	r3, [r7, #0]
 8010460:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8010462:	693b      	ldr	r3, [r7, #16]
 8010464:	2b00      	cmp	r3, #0
 8010466:	d101      	bne.n	801046c <osTimerStart+0x20>
    ticks = 1;
 8010468:	2301      	movs	r3, #1
 801046a:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 801046c:	f7ff ff40 	bl	80102f0 <inHandlerMode>
 8010470:	4603      	mov	r3, r0
 8010472:	2b00      	cmp	r3, #0
 8010474:	d01a      	beq.n	80104ac <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8010476:	f107 030c 	add.w	r3, r7, #12
 801047a:	2200      	movs	r2, #0
 801047c:	9200      	str	r2, [sp, #0]
 801047e:	693a      	ldr	r2, [r7, #16]
 8010480:	2109      	movs	r1, #9
 8010482:	6878      	ldr	r0, [r7, #4]
 8010484:	f001 ffda 	bl	801243c <xTimerGenericCommand>
 8010488:	4603      	mov	r3, r0
 801048a:	2b01      	cmp	r3, #1
 801048c:	d002      	beq.n	8010494 <osTimerStart+0x48>
    {
      result = osErrorOS;
 801048e:	23ff      	movs	r3, #255	@ 0xff
 8010490:	617b      	str	r3, [r7, #20]
 8010492:	e018      	b.n	80104c6 <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d015      	beq.n	80104c6 <osTimerStart+0x7a>
 801049a:	4b0d      	ldr	r3, [pc, #52]	@ (80104d0 <osTimerStart+0x84>)
 801049c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80104a0:	601a      	str	r2, [r3, #0]
 80104a2:	f3bf 8f4f 	dsb	sy
 80104a6:	f3bf 8f6f 	isb	sy
 80104aa:	e00c      	b.n	80104c6 <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 80104ac:	2300      	movs	r3, #0
 80104ae:	9300      	str	r3, [sp, #0]
 80104b0:	2300      	movs	r3, #0
 80104b2:	693a      	ldr	r2, [r7, #16]
 80104b4:	2104      	movs	r1, #4
 80104b6:	6878      	ldr	r0, [r7, #4]
 80104b8:	f001 ffc0 	bl	801243c <xTimerGenericCommand>
 80104bc:	4603      	mov	r3, r0
 80104be:	2b01      	cmp	r3, #1
 80104c0:	d001      	beq.n	80104c6 <osTimerStart+0x7a>
      result = osErrorOS;
 80104c2:	23ff      	movs	r3, #255	@ 0xff
 80104c4:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 80104c6:	697b      	ldr	r3, [r7, #20]
}
 80104c8:	4618      	mov	r0, r3
 80104ca:	3718      	adds	r7, #24
 80104cc:	46bd      	mov	sp, r7
 80104ce:	bd80      	pop	{r7, pc}
 80104d0:	e000ed04 	.word	0xe000ed04

080104d4 <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 80104d4:	b580      	push	{r7, lr}
 80104d6:	b086      	sub	sp, #24
 80104d8:	af02      	add	r7, sp, #8
 80104da:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80104dc:	2300      	movs	r3, #0
 80104de:	60fb      	str	r3, [r7, #12]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 80104e0:	2300      	movs	r3, #0
 80104e2:	60bb      	str	r3, [r7, #8]

  if (inHandlerMode()) {
 80104e4:	f7ff ff04 	bl	80102f0 <inHandlerMode>
 80104e8:	4603      	mov	r3, r0
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d019      	beq.n	8010522 <osTimerStop+0x4e>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 80104ee:	f107 0308 	add.w	r3, r7, #8
 80104f2:	2200      	movs	r2, #0
 80104f4:	9200      	str	r2, [sp, #0]
 80104f6:	2200      	movs	r2, #0
 80104f8:	2108      	movs	r1, #8
 80104fa:	6878      	ldr	r0, [r7, #4]
 80104fc:	f001 ff9e 	bl	801243c <xTimerGenericCommand>
 8010500:	4603      	mov	r3, r0
 8010502:	2b01      	cmp	r3, #1
 8010504:	d001      	beq.n	801050a <osTimerStop+0x36>
      return osErrorOS;
 8010506:	23ff      	movs	r3, #255	@ 0xff
 8010508:	e019      	b.n	801053e <osTimerStop+0x6a>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801050a:	68bb      	ldr	r3, [r7, #8]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d015      	beq.n	801053c <osTimerStop+0x68>
 8010510:	4b0d      	ldr	r3, [pc, #52]	@ (8010548 <osTimerStop+0x74>)
 8010512:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010516:	601a      	str	r2, [r3, #0]
 8010518:	f3bf 8f4f 	dsb	sy
 801051c:	f3bf 8f6f 	isb	sy
 8010520:	e00c      	b.n	801053c <osTimerStop+0x68>
  }
  else {
    if (xTimerStop(timer_id, 0) != pdPASS) {
 8010522:	2300      	movs	r3, #0
 8010524:	9300      	str	r3, [sp, #0]
 8010526:	2300      	movs	r3, #0
 8010528:	2200      	movs	r2, #0
 801052a:	2103      	movs	r1, #3
 801052c:	6878      	ldr	r0, [r7, #4]
 801052e:	f001 ff85 	bl	801243c <xTimerGenericCommand>
 8010532:	4603      	mov	r3, r0
 8010534:	2b01      	cmp	r3, #1
 8010536:	d001      	beq.n	801053c <osTimerStop+0x68>
      result = osErrorOS;
 8010538:	23ff      	movs	r3, #255	@ 0xff
 801053a:	60fb      	str	r3, [r7, #12]
    }
  }
#else 
  result = osErrorOS;
#endif 
  return result;
 801053c:	68fb      	ldr	r3, [r7, #12]
}
 801053e:	4618      	mov	r0, r3
 8010540:	3710      	adds	r7, #16
 8010542:	46bd      	mov	sp, r7
 8010544:	bd80      	pop	{r7, pc}
 8010546:	bf00      	nop
 8010548:	e000ed04 	.word	0xe000ed04

0801054c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 801054c:	b580      	push	{r7, lr}
 801054e:	b086      	sub	sp, #24
 8010550:	af02      	add	r7, sp, #8
 8010552:	6078      	str	r0, [r7, #4]
 8010554:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	685b      	ldr	r3, [r3, #4]
 801055a:	2b00      	cmp	r3, #0
 801055c:	d00f      	beq.n	801057e <osSemaphoreCreate+0x32>
    if (count == 1) {
 801055e:	683b      	ldr	r3, [r7, #0]
 8010560:	2b01      	cmp	r3, #1
 8010562:	d10a      	bne.n	801057a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	685b      	ldr	r3, [r3, #4]
 8010568:	2203      	movs	r2, #3
 801056a:	9200      	str	r2, [sp, #0]
 801056c:	2200      	movs	r2, #0
 801056e:	2100      	movs	r1, #0
 8010570:	2001      	movs	r0, #1
 8010572:	f000 f93b 	bl	80107ec <xQueueGenericCreateStatic>
 8010576:	4603      	mov	r3, r0
 8010578:	e016      	b.n	80105a8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 801057a:	2300      	movs	r3, #0
 801057c:	e014      	b.n	80105a8 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 801057e:	683b      	ldr	r3, [r7, #0]
 8010580:	2b01      	cmp	r3, #1
 8010582:	d110      	bne.n	80105a6 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8010584:	2203      	movs	r2, #3
 8010586:	2100      	movs	r1, #0
 8010588:	2001      	movs	r0, #1
 801058a:	f000 f9ac 	bl	80108e6 <xQueueGenericCreate>
 801058e:	60f8      	str	r0, [r7, #12]
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	2b00      	cmp	r3, #0
 8010594:	d005      	beq.n	80105a2 <osSemaphoreCreate+0x56>
 8010596:	2300      	movs	r3, #0
 8010598:	2200      	movs	r2, #0
 801059a:	2100      	movs	r1, #0
 801059c:	68f8      	ldr	r0, [r7, #12]
 801059e:	f000 f9fd 	bl	801099c <xQueueGenericSend>
      return sema;
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	e000      	b.n	80105a8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80105a6:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80105a8:	4618      	mov	r0, r3
 80105aa:	3710      	adds	r7, #16
 80105ac:	46bd      	mov	sp, r7
 80105ae:	bd80      	pop	{r7, pc}

080105b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80105b0:	b480      	push	{r7}
 80105b2:	b083      	sub	sp, #12
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	f103 0208 	add.w	r2, r3, #8
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	f04f 32ff 	mov.w	r2, #4294967295
 80105c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	f103 0208 	add.w	r2, r3, #8
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	f103 0208 	add.w	r2, r3, #8
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	2200      	movs	r2, #0
 80105e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80105e4:	bf00      	nop
 80105e6:	370c      	adds	r7, #12
 80105e8:	46bd      	mov	sp, r7
 80105ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ee:	4770      	bx	lr

080105f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80105f0:	b480      	push	{r7}
 80105f2:	b083      	sub	sp, #12
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	2200      	movs	r2, #0
 80105fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80105fe:	bf00      	nop
 8010600:	370c      	adds	r7, #12
 8010602:	46bd      	mov	sp, r7
 8010604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010608:	4770      	bx	lr

0801060a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801060a:	b480      	push	{r7}
 801060c:	b085      	sub	sp, #20
 801060e:	af00      	add	r7, sp, #0
 8010610:	6078      	str	r0, [r7, #4]
 8010612:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	685b      	ldr	r3, [r3, #4]
 8010618:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801061a:	683b      	ldr	r3, [r7, #0]
 801061c:	68fa      	ldr	r2, [r7, #12]
 801061e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	689a      	ldr	r2, [r3, #8]
 8010624:	683b      	ldr	r3, [r7, #0]
 8010626:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	689b      	ldr	r3, [r3, #8]
 801062c:	683a      	ldr	r2, [r7, #0]
 801062e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	683a      	ldr	r2, [r7, #0]
 8010634:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010636:	683b      	ldr	r3, [r7, #0]
 8010638:	687a      	ldr	r2, [r7, #4]
 801063a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	1c5a      	adds	r2, r3, #1
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	601a      	str	r2, [r3, #0]
}
 8010646:	bf00      	nop
 8010648:	3714      	adds	r7, #20
 801064a:	46bd      	mov	sp, r7
 801064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010650:	4770      	bx	lr

08010652 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010652:	b480      	push	{r7}
 8010654:	b085      	sub	sp, #20
 8010656:	af00      	add	r7, sp, #0
 8010658:	6078      	str	r0, [r7, #4]
 801065a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801065c:	683b      	ldr	r3, [r7, #0]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010662:	68bb      	ldr	r3, [r7, #8]
 8010664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010668:	d103      	bne.n	8010672 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	691b      	ldr	r3, [r3, #16]
 801066e:	60fb      	str	r3, [r7, #12]
 8010670:	e00c      	b.n	801068c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	3308      	adds	r3, #8
 8010676:	60fb      	str	r3, [r7, #12]
 8010678:	e002      	b.n	8010680 <vListInsert+0x2e>
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	685b      	ldr	r3, [r3, #4]
 801067e:	60fb      	str	r3, [r7, #12]
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	685b      	ldr	r3, [r3, #4]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	68ba      	ldr	r2, [r7, #8]
 8010688:	429a      	cmp	r2, r3
 801068a:	d2f6      	bcs.n	801067a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	685a      	ldr	r2, [r3, #4]
 8010690:	683b      	ldr	r3, [r7, #0]
 8010692:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010694:	683b      	ldr	r3, [r7, #0]
 8010696:	685b      	ldr	r3, [r3, #4]
 8010698:	683a      	ldr	r2, [r7, #0]
 801069a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801069c:	683b      	ldr	r3, [r7, #0]
 801069e:	68fa      	ldr	r2, [r7, #12]
 80106a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	683a      	ldr	r2, [r7, #0]
 80106a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80106a8:	683b      	ldr	r3, [r7, #0]
 80106aa:	687a      	ldr	r2, [r7, #4]
 80106ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	1c5a      	adds	r2, r3, #1
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	601a      	str	r2, [r3, #0]
}
 80106b8:	bf00      	nop
 80106ba:	3714      	adds	r7, #20
 80106bc:	46bd      	mov	sp, r7
 80106be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c2:	4770      	bx	lr

080106c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80106c4:	b480      	push	{r7}
 80106c6:	b085      	sub	sp, #20
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	691b      	ldr	r3, [r3, #16]
 80106d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	685b      	ldr	r3, [r3, #4]
 80106d6:	687a      	ldr	r2, [r7, #4]
 80106d8:	6892      	ldr	r2, [r2, #8]
 80106da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	689b      	ldr	r3, [r3, #8]
 80106e0:	687a      	ldr	r2, [r7, #4]
 80106e2:	6852      	ldr	r2, [r2, #4]
 80106e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	685b      	ldr	r3, [r3, #4]
 80106ea:	687a      	ldr	r2, [r7, #4]
 80106ec:	429a      	cmp	r2, r3
 80106ee:	d103      	bne.n	80106f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	689a      	ldr	r2, [r3, #8]
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	2200      	movs	r2, #0
 80106fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	1e5a      	subs	r2, r3, #1
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	681b      	ldr	r3, [r3, #0]
}
 801070c:	4618      	mov	r0, r3
 801070e:	3714      	adds	r7, #20
 8010710:	46bd      	mov	sp, r7
 8010712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010716:	4770      	bx	lr

08010718 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010718:	b580      	push	{r7, lr}
 801071a:	b084      	sub	sp, #16
 801071c:	af00      	add	r7, sp, #0
 801071e:	6078      	str	r0, [r7, #4]
 8010720:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d10b      	bne.n	8010744 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801072c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010730:	f383 8811 	msr	BASEPRI, r3
 8010734:	f3bf 8f6f 	isb	sy
 8010738:	f3bf 8f4f 	dsb	sy
 801073c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801073e:	bf00      	nop
 8010740:	bf00      	nop
 8010742:	e7fd      	b.n	8010740 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8010744:	f002 faa0 	bl	8012c88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	681a      	ldr	r2, [r3, #0]
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010750:	68f9      	ldr	r1, [r7, #12]
 8010752:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8010754:	fb01 f303 	mul.w	r3, r1, r3
 8010758:	441a      	add	r2, r3
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	2200      	movs	r2, #0
 8010762:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	681a      	ldr	r2, [r3, #0]
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	681a      	ldr	r2, [r3, #0]
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010774:	3b01      	subs	r3, #1
 8010776:	68f9      	ldr	r1, [r7, #12]
 8010778:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801077a:	fb01 f303 	mul.w	r3, r1, r3
 801077e:	441a      	add	r2, r3
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	22ff      	movs	r2, #255	@ 0xff
 8010788:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	22ff      	movs	r2, #255	@ 0xff
 8010790:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8010794:	683b      	ldr	r3, [r7, #0]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d114      	bne.n	80107c4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	691b      	ldr	r3, [r3, #16]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d01a      	beq.n	80107d8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	3310      	adds	r3, #16
 80107a6:	4618      	mov	r0, r3
 80107a8:	f001 fa8e 	bl	8011cc8 <xTaskRemoveFromEventList>
 80107ac:	4603      	mov	r3, r0
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d012      	beq.n	80107d8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80107b2:	4b0d      	ldr	r3, [pc, #52]	@ (80107e8 <xQueueGenericReset+0xd0>)
 80107b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80107b8:	601a      	str	r2, [r3, #0]
 80107ba:	f3bf 8f4f 	dsb	sy
 80107be:	f3bf 8f6f 	isb	sy
 80107c2:	e009      	b.n	80107d8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	3310      	adds	r3, #16
 80107c8:	4618      	mov	r0, r3
 80107ca:	f7ff fef1 	bl	80105b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	3324      	adds	r3, #36	@ 0x24
 80107d2:	4618      	mov	r0, r3
 80107d4:	f7ff feec 	bl	80105b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80107d8:	f002 fa88 	bl	8012cec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80107dc:	2301      	movs	r3, #1
}
 80107de:	4618      	mov	r0, r3
 80107e0:	3710      	adds	r7, #16
 80107e2:	46bd      	mov	sp, r7
 80107e4:	bd80      	pop	{r7, pc}
 80107e6:	bf00      	nop
 80107e8:	e000ed04 	.word	0xe000ed04

080107ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80107ec:	b580      	push	{r7, lr}
 80107ee:	b08e      	sub	sp, #56	@ 0x38
 80107f0:	af02      	add	r7, sp, #8
 80107f2:	60f8      	str	r0, [r7, #12]
 80107f4:	60b9      	str	r1, [r7, #8]
 80107f6:	607a      	str	r2, [r7, #4]
 80107f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d10b      	bne.n	8010818 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8010800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010804:	f383 8811 	msr	BASEPRI, r3
 8010808:	f3bf 8f6f 	isb	sy
 801080c:	f3bf 8f4f 	dsb	sy
 8010810:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8010812:	bf00      	nop
 8010814:	bf00      	nop
 8010816:	e7fd      	b.n	8010814 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010818:	683b      	ldr	r3, [r7, #0]
 801081a:	2b00      	cmp	r3, #0
 801081c:	d10b      	bne.n	8010836 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 801081e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010822:	f383 8811 	msr	BASEPRI, r3
 8010826:	f3bf 8f6f 	isb	sy
 801082a:	f3bf 8f4f 	dsb	sy
 801082e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010830:	bf00      	nop
 8010832:	bf00      	nop
 8010834:	e7fd      	b.n	8010832 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	2b00      	cmp	r3, #0
 801083a:	d002      	beq.n	8010842 <xQueueGenericCreateStatic+0x56>
 801083c:	68bb      	ldr	r3, [r7, #8]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d001      	beq.n	8010846 <xQueueGenericCreateStatic+0x5a>
 8010842:	2301      	movs	r3, #1
 8010844:	e000      	b.n	8010848 <xQueueGenericCreateStatic+0x5c>
 8010846:	2300      	movs	r3, #0
 8010848:	2b00      	cmp	r3, #0
 801084a:	d10b      	bne.n	8010864 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 801084c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010850:	f383 8811 	msr	BASEPRI, r3
 8010854:	f3bf 8f6f 	isb	sy
 8010858:	f3bf 8f4f 	dsb	sy
 801085c:	623b      	str	r3, [r7, #32]
}
 801085e:	bf00      	nop
 8010860:	bf00      	nop
 8010862:	e7fd      	b.n	8010860 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d102      	bne.n	8010870 <xQueueGenericCreateStatic+0x84>
 801086a:	68bb      	ldr	r3, [r7, #8]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d101      	bne.n	8010874 <xQueueGenericCreateStatic+0x88>
 8010870:	2301      	movs	r3, #1
 8010872:	e000      	b.n	8010876 <xQueueGenericCreateStatic+0x8a>
 8010874:	2300      	movs	r3, #0
 8010876:	2b00      	cmp	r3, #0
 8010878:	d10b      	bne.n	8010892 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 801087a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801087e:	f383 8811 	msr	BASEPRI, r3
 8010882:	f3bf 8f6f 	isb	sy
 8010886:	f3bf 8f4f 	dsb	sy
 801088a:	61fb      	str	r3, [r7, #28]
}
 801088c:	bf00      	nop
 801088e:	bf00      	nop
 8010890:	e7fd      	b.n	801088e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010892:	2348      	movs	r3, #72	@ 0x48
 8010894:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010896:	697b      	ldr	r3, [r7, #20]
 8010898:	2b48      	cmp	r3, #72	@ 0x48
 801089a:	d00b      	beq.n	80108b4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 801089c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108a0:	f383 8811 	msr	BASEPRI, r3
 80108a4:	f3bf 8f6f 	isb	sy
 80108a8:	f3bf 8f4f 	dsb	sy
 80108ac:	61bb      	str	r3, [r7, #24]
}
 80108ae:	bf00      	nop
 80108b0:	bf00      	nop
 80108b2:	e7fd      	b.n	80108b0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80108b4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80108b6:	683b      	ldr	r3, [r7, #0]
 80108b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80108ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d00d      	beq.n	80108dc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80108c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108c2:	2201      	movs	r2, #1
 80108c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80108c8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80108cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108ce:	9300      	str	r3, [sp, #0]
 80108d0:	4613      	mov	r3, r2
 80108d2:	687a      	ldr	r2, [r7, #4]
 80108d4:	68b9      	ldr	r1, [r7, #8]
 80108d6:	68f8      	ldr	r0, [r7, #12]
 80108d8:	f000 f840 	bl	801095c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80108dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80108de:	4618      	mov	r0, r3
 80108e0:	3730      	adds	r7, #48	@ 0x30
 80108e2:	46bd      	mov	sp, r7
 80108e4:	bd80      	pop	{r7, pc}

080108e6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80108e6:	b580      	push	{r7, lr}
 80108e8:	b08a      	sub	sp, #40	@ 0x28
 80108ea:	af02      	add	r7, sp, #8
 80108ec:	60f8      	str	r0, [r7, #12]
 80108ee:	60b9      	str	r1, [r7, #8]
 80108f0:	4613      	mov	r3, r2
 80108f2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d10b      	bne.n	8010912 <xQueueGenericCreate+0x2c>
	__asm volatile
 80108fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108fe:	f383 8811 	msr	BASEPRI, r3
 8010902:	f3bf 8f6f 	isb	sy
 8010906:	f3bf 8f4f 	dsb	sy
 801090a:	613b      	str	r3, [r7, #16]
}
 801090c:	bf00      	nop
 801090e:	bf00      	nop
 8010910:	e7fd      	b.n	801090e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	68ba      	ldr	r2, [r7, #8]
 8010916:	fb02 f303 	mul.w	r3, r2, r3
 801091a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801091c:	69fb      	ldr	r3, [r7, #28]
 801091e:	3348      	adds	r3, #72	@ 0x48
 8010920:	4618      	mov	r0, r3
 8010922:	f002 fad3 	bl	8012ecc <pvPortMalloc>
 8010926:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010928:	69bb      	ldr	r3, [r7, #24]
 801092a:	2b00      	cmp	r3, #0
 801092c:	d011      	beq.n	8010952 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801092e:	69bb      	ldr	r3, [r7, #24]
 8010930:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010932:	697b      	ldr	r3, [r7, #20]
 8010934:	3348      	adds	r3, #72	@ 0x48
 8010936:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010938:	69bb      	ldr	r3, [r7, #24]
 801093a:	2200      	movs	r2, #0
 801093c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010940:	79fa      	ldrb	r2, [r7, #7]
 8010942:	69bb      	ldr	r3, [r7, #24]
 8010944:	9300      	str	r3, [sp, #0]
 8010946:	4613      	mov	r3, r2
 8010948:	697a      	ldr	r2, [r7, #20]
 801094a:	68b9      	ldr	r1, [r7, #8]
 801094c:	68f8      	ldr	r0, [r7, #12]
 801094e:	f000 f805 	bl	801095c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010952:	69bb      	ldr	r3, [r7, #24]
	}
 8010954:	4618      	mov	r0, r3
 8010956:	3720      	adds	r7, #32
 8010958:	46bd      	mov	sp, r7
 801095a:	bd80      	pop	{r7, pc}

0801095c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801095c:	b580      	push	{r7, lr}
 801095e:	b084      	sub	sp, #16
 8010960:	af00      	add	r7, sp, #0
 8010962:	60f8      	str	r0, [r7, #12]
 8010964:	60b9      	str	r1, [r7, #8]
 8010966:	607a      	str	r2, [r7, #4]
 8010968:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801096a:	68bb      	ldr	r3, [r7, #8]
 801096c:	2b00      	cmp	r3, #0
 801096e:	d103      	bne.n	8010978 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010970:	69bb      	ldr	r3, [r7, #24]
 8010972:	69ba      	ldr	r2, [r7, #24]
 8010974:	601a      	str	r2, [r3, #0]
 8010976:	e002      	b.n	801097e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010978:	69bb      	ldr	r3, [r7, #24]
 801097a:	687a      	ldr	r2, [r7, #4]
 801097c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801097e:	69bb      	ldr	r3, [r7, #24]
 8010980:	68fa      	ldr	r2, [r7, #12]
 8010982:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010984:	69bb      	ldr	r3, [r7, #24]
 8010986:	68ba      	ldr	r2, [r7, #8]
 8010988:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801098a:	2101      	movs	r1, #1
 801098c:	69b8      	ldr	r0, [r7, #24]
 801098e:	f7ff fec3 	bl	8010718 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010992:	bf00      	nop
 8010994:	3710      	adds	r7, #16
 8010996:	46bd      	mov	sp, r7
 8010998:	bd80      	pop	{r7, pc}
	...

0801099c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801099c:	b580      	push	{r7, lr}
 801099e:	b08e      	sub	sp, #56	@ 0x38
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	60f8      	str	r0, [r7, #12]
 80109a4:	60b9      	str	r1, [r7, #8]
 80109a6:	607a      	str	r2, [r7, #4]
 80109a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80109aa:	2300      	movs	r3, #0
 80109ac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80109b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d10b      	bne.n	80109d0 <xQueueGenericSend+0x34>
	__asm volatile
 80109b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109bc:	f383 8811 	msr	BASEPRI, r3
 80109c0:	f3bf 8f6f 	isb	sy
 80109c4:	f3bf 8f4f 	dsb	sy
 80109c8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80109ca:	bf00      	nop
 80109cc:	bf00      	nop
 80109ce:	e7fd      	b.n	80109cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80109d0:	68bb      	ldr	r3, [r7, #8]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d103      	bne.n	80109de <xQueueGenericSend+0x42>
 80109d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d101      	bne.n	80109e2 <xQueueGenericSend+0x46>
 80109de:	2301      	movs	r3, #1
 80109e0:	e000      	b.n	80109e4 <xQueueGenericSend+0x48>
 80109e2:	2300      	movs	r3, #0
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d10b      	bne.n	8010a00 <xQueueGenericSend+0x64>
	__asm volatile
 80109e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109ec:	f383 8811 	msr	BASEPRI, r3
 80109f0:	f3bf 8f6f 	isb	sy
 80109f4:	f3bf 8f4f 	dsb	sy
 80109f8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80109fa:	bf00      	nop
 80109fc:	bf00      	nop
 80109fe:	e7fd      	b.n	80109fc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010a00:	683b      	ldr	r3, [r7, #0]
 8010a02:	2b02      	cmp	r3, #2
 8010a04:	d103      	bne.n	8010a0e <xQueueGenericSend+0x72>
 8010a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a0a:	2b01      	cmp	r3, #1
 8010a0c:	d101      	bne.n	8010a12 <xQueueGenericSend+0x76>
 8010a0e:	2301      	movs	r3, #1
 8010a10:	e000      	b.n	8010a14 <xQueueGenericSend+0x78>
 8010a12:	2300      	movs	r3, #0
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d10b      	bne.n	8010a30 <xQueueGenericSend+0x94>
	__asm volatile
 8010a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a1c:	f383 8811 	msr	BASEPRI, r3
 8010a20:	f3bf 8f6f 	isb	sy
 8010a24:	f3bf 8f4f 	dsb	sy
 8010a28:	623b      	str	r3, [r7, #32]
}
 8010a2a:	bf00      	nop
 8010a2c:	bf00      	nop
 8010a2e:	e7fd      	b.n	8010a2c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010a30:	f001 fb10 	bl	8012054 <xTaskGetSchedulerState>
 8010a34:	4603      	mov	r3, r0
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d102      	bne.n	8010a40 <xQueueGenericSend+0xa4>
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d101      	bne.n	8010a44 <xQueueGenericSend+0xa8>
 8010a40:	2301      	movs	r3, #1
 8010a42:	e000      	b.n	8010a46 <xQueueGenericSend+0xaa>
 8010a44:	2300      	movs	r3, #0
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d10b      	bne.n	8010a62 <xQueueGenericSend+0xc6>
	__asm volatile
 8010a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a4e:	f383 8811 	msr	BASEPRI, r3
 8010a52:	f3bf 8f6f 	isb	sy
 8010a56:	f3bf 8f4f 	dsb	sy
 8010a5a:	61fb      	str	r3, [r7, #28]
}
 8010a5c:	bf00      	nop
 8010a5e:	bf00      	nop
 8010a60:	e7fd      	b.n	8010a5e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010a62:	f002 f911 	bl	8012c88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a6e:	429a      	cmp	r2, r3
 8010a70:	d302      	bcc.n	8010a78 <xQueueGenericSend+0xdc>
 8010a72:	683b      	ldr	r3, [r7, #0]
 8010a74:	2b02      	cmp	r3, #2
 8010a76:	d129      	bne.n	8010acc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010a78:	683a      	ldr	r2, [r7, #0]
 8010a7a:	68b9      	ldr	r1, [r7, #8]
 8010a7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010a7e:	f000 fa0f 	bl	8010ea0 <prvCopyDataToQueue>
 8010a82:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d010      	beq.n	8010aae <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a8e:	3324      	adds	r3, #36	@ 0x24
 8010a90:	4618      	mov	r0, r3
 8010a92:	f001 f919 	bl	8011cc8 <xTaskRemoveFromEventList>
 8010a96:	4603      	mov	r3, r0
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d013      	beq.n	8010ac4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010a9c:	4b3f      	ldr	r3, [pc, #252]	@ (8010b9c <xQueueGenericSend+0x200>)
 8010a9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010aa2:	601a      	str	r2, [r3, #0]
 8010aa4:	f3bf 8f4f 	dsb	sy
 8010aa8:	f3bf 8f6f 	isb	sy
 8010aac:	e00a      	b.n	8010ac4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d007      	beq.n	8010ac4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010ab4:	4b39      	ldr	r3, [pc, #228]	@ (8010b9c <xQueueGenericSend+0x200>)
 8010ab6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010aba:	601a      	str	r2, [r3, #0]
 8010abc:	f3bf 8f4f 	dsb	sy
 8010ac0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010ac4:	f002 f912 	bl	8012cec <vPortExitCritical>
				return pdPASS;
 8010ac8:	2301      	movs	r3, #1
 8010aca:	e063      	b.n	8010b94 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d103      	bne.n	8010ada <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010ad2:	f002 f90b 	bl	8012cec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	e05c      	b.n	8010b94 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d106      	bne.n	8010aee <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010ae0:	f107 0314 	add.w	r3, r7, #20
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	f001 f953 	bl	8011d90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010aea:	2301      	movs	r3, #1
 8010aec:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010aee:	f002 f8fd 	bl	8012cec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010af2:	f000 febd 	bl	8011870 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010af6:	f002 f8c7 	bl	8012c88 <vPortEnterCritical>
 8010afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010afc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010b00:	b25b      	sxtb	r3, r3
 8010b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b06:	d103      	bne.n	8010b10 <xQueueGenericSend+0x174>
 8010b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b0a:	2200      	movs	r2, #0
 8010b0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b12:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010b16:	b25b      	sxtb	r3, r3
 8010b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b1c:	d103      	bne.n	8010b26 <xQueueGenericSend+0x18a>
 8010b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b20:	2200      	movs	r2, #0
 8010b22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010b26:	f002 f8e1 	bl	8012cec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010b2a:	1d3a      	adds	r2, r7, #4
 8010b2c:	f107 0314 	add.w	r3, r7, #20
 8010b30:	4611      	mov	r1, r2
 8010b32:	4618      	mov	r0, r3
 8010b34:	f001 f942 	bl	8011dbc <xTaskCheckForTimeOut>
 8010b38:	4603      	mov	r3, r0
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d124      	bne.n	8010b88 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010b3e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010b40:	f000 faa6 	bl	8011090 <prvIsQueueFull>
 8010b44:	4603      	mov	r3, r0
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d018      	beq.n	8010b7c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b4c:	3310      	adds	r3, #16
 8010b4e:	687a      	ldr	r2, [r7, #4]
 8010b50:	4611      	mov	r1, r2
 8010b52:	4618      	mov	r0, r3
 8010b54:	f001 f866 	bl	8011c24 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010b58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010b5a:	f000 fa31 	bl	8010fc0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010b5e:	f000 fe95 	bl	801188c <xTaskResumeAll>
 8010b62:	4603      	mov	r3, r0
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	f47f af7c 	bne.w	8010a62 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8010b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8010b9c <xQueueGenericSend+0x200>)
 8010b6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010b70:	601a      	str	r2, [r3, #0]
 8010b72:	f3bf 8f4f 	dsb	sy
 8010b76:	f3bf 8f6f 	isb	sy
 8010b7a:	e772      	b.n	8010a62 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010b7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010b7e:	f000 fa1f 	bl	8010fc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010b82:	f000 fe83 	bl	801188c <xTaskResumeAll>
 8010b86:	e76c      	b.n	8010a62 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010b88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010b8a:	f000 fa19 	bl	8010fc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010b8e:	f000 fe7d 	bl	801188c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010b92:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010b94:	4618      	mov	r0, r3
 8010b96:	3738      	adds	r7, #56	@ 0x38
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	bd80      	pop	{r7, pc}
 8010b9c:	e000ed04 	.word	0xe000ed04

08010ba0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b090      	sub	sp, #64	@ 0x40
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	60f8      	str	r0, [r7, #12]
 8010ba8:	60b9      	str	r1, [r7, #8]
 8010baa:	607a      	str	r2, [r7, #4]
 8010bac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8010bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d10b      	bne.n	8010bd0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8010bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bbc:	f383 8811 	msr	BASEPRI, r3
 8010bc0:	f3bf 8f6f 	isb	sy
 8010bc4:	f3bf 8f4f 	dsb	sy
 8010bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8010bca:	bf00      	nop
 8010bcc:	bf00      	nop
 8010bce:	e7fd      	b.n	8010bcc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010bd0:	68bb      	ldr	r3, [r7, #8]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d103      	bne.n	8010bde <xQueueGenericSendFromISR+0x3e>
 8010bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d101      	bne.n	8010be2 <xQueueGenericSendFromISR+0x42>
 8010bde:	2301      	movs	r3, #1
 8010be0:	e000      	b.n	8010be4 <xQueueGenericSendFromISR+0x44>
 8010be2:	2300      	movs	r3, #0
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d10b      	bne.n	8010c00 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8010be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bec:	f383 8811 	msr	BASEPRI, r3
 8010bf0:	f3bf 8f6f 	isb	sy
 8010bf4:	f3bf 8f4f 	dsb	sy
 8010bf8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010bfa:	bf00      	nop
 8010bfc:	bf00      	nop
 8010bfe:	e7fd      	b.n	8010bfc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010c00:	683b      	ldr	r3, [r7, #0]
 8010c02:	2b02      	cmp	r3, #2
 8010c04:	d103      	bne.n	8010c0e <xQueueGenericSendFromISR+0x6e>
 8010c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010c0a:	2b01      	cmp	r3, #1
 8010c0c:	d101      	bne.n	8010c12 <xQueueGenericSendFromISR+0x72>
 8010c0e:	2301      	movs	r3, #1
 8010c10:	e000      	b.n	8010c14 <xQueueGenericSendFromISR+0x74>
 8010c12:	2300      	movs	r3, #0
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d10b      	bne.n	8010c30 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8010c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c1c:	f383 8811 	msr	BASEPRI, r3
 8010c20:	f3bf 8f6f 	isb	sy
 8010c24:	f3bf 8f4f 	dsb	sy
 8010c28:	623b      	str	r3, [r7, #32]
}
 8010c2a:	bf00      	nop
 8010c2c:	bf00      	nop
 8010c2e:	e7fd      	b.n	8010c2c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010c30:	f002 f90a 	bl	8012e48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010c34:	f3ef 8211 	mrs	r2, BASEPRI
 8010c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c3c:	f383 8811 	msr	BASEPRI, r3
 8010c40:	f3bf 8f6f 	isb	sy
 8010c44:	f3bf 8f4f 	dsb	sy
 8010c48:	61fa      	str	r2, [r7, #28]
 8010c4a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010c4c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010c4e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010c58:	429a      	cmp	r2, r3
 8010c5a:	d302      	bcc.n	8010c62 <xQueueGenericSendFromISR+0xc2>
 8010c5c:	683b      	ldr	r3, [r7, #0]
 8010c5e:	2b02      	cmp	r3, #2
 8010c60:	d12f      	bne.n	8010cc2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c64:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010c68:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010c72:	683a      	ldr	r2, [r7, #0]
 8010c74:	68b9      	ldr	r1, [r7, #8]
 8010c76:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010c78:	f000 f912 	bl	8010ea0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010c7c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8010c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c84:	d112      	bne.n	8010cac <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d016      	beq.n	8010cbc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c90:	3324      	adds	r3, #36	@ 0x24
 8010c92:	4618      	mov	r0, r3
 8010c94:	f001 f818 	bl	8011cc8 <xTaskRemoveFromEventList>
 8010c98:	4603      	mov	r3, r0
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d00e      	beq.n	8010cbc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d00b      	beq.n	8010cbc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	2201      	movs	r2, #1
 8010ca8:	601a      	str	r2, [r3, #0]
 8010caa:	e007      	b.n	8010cbc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010cac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8010cb0:	3301      	adds	r3, #1
 8010cb2:	b2db      	uxtb	r3, r3
 8010cb4:	b25a      	sxtb	r2, r3
 8010cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8010cbc:	2301      	movs	r3, #1
 8010cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8010cc0:	e001      	b.n	8010cc6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010cc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010cc8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010cca:	697b      	ldr	r3, [r7, #20]
 8010ccc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010cd0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010cd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	3740      	adds	r7, #64	@ 0x40
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	bd80      	pop	{r7, pc}

08010cdc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b08c      	sub	sp, #48	@ 0x30
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	60f8      	str	r0, [r7, #12]
 8010ce4:	60b9      	str	r1, [r7, #8]
 8010ce6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010ce8:	2300      	movs	r3, #0
 8010cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d10b      	bne.n	8010d0e <xQueueReceive+0x32>
	__asm volatile
 8010cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010cfa:	f383 8811 	msr	BASEPRI, r3
 8010cfe:	f3bf 8f6f 	isb	sy
 8010d02:	f3bf 8f4f 	dsb	sy
 8010d06:	623b      	str	r3, [r7, #32]
}
 8010d08:	bf00      	nop
 8010d0a:	bf00      	nop
 8010d0c:	e7fd      	b.n	8010d0a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010d0e:	68bb      	ldr	r3, [r7, #8]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d103      	bne.n	8010d1c <xQueueReceive+0x40>
 8010d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d101      	bne.n	8010d20 <xQueueReceive+0x44>
 8010d1c:	2301      	movs	r3, #1
 8010d1e:	e000      	b.n	8010d22 <xQueueReceive+0x46>
 8010d20:	2300      	movs	r3, #0
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d10b      	bne.n	8010d3e <xQueueReceive+0x62>
	__asm volatile
 8010d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d2a:	f383 8811 	msr	BASEPRI, r3
 8010d2e:	f3bf 8f6f 	isb	sy
 8010d32:	f3bf 8f4f 	dsb	sy
 8010d36:	61fb      	str	r3, [r7, #28]
}
 8010d38:	bf00      	nop
 8010d3a:	bf00      	nop
 8010d3c:	e7fd      	b.n	8010d3a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010d3e:	f001 f989 	bl	8012054 <xTaskGetSchedulerState>
 8010d42:	4603      	mov	r3, r0
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d102      	bne.n	8010d4e <xQueueReceive+0x72>
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d101      	bne.n	8010d52 <xQueueReceive+0x76>
 8010d4e:	2301      	movs	r3, #1
 8010d50:	e000      	b.n	8010d54 <xQueueReceive+0x78>
 8010d52:	2300      	movs	r3, #0
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d10b      	bne.n	8010d70 <xQueueReceive+0x94>
	__asm volatile
 8010d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d5c:	f383 8811 	msr	BASEPRI, r3
 8010d60:	f3bf 8f6f 	isb	sy
 8010d64:	f3bf 8f4f 	dsb	sy
 8010d68:	61bb      	str	r3, [r7, #24]
}
 8010d6a:	bf00      	nop
 8010d6c:	bf00      	nop
 8010d6e:	e7fd      	b.n	8010d6c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010d70:	f001 ff8a 	bl	8012c88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010d78:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d01f      	beq.n	8010dc0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010d80:	68b9      	ldr	r1, [r7, #8]
 8010d82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010d84:	f000 f8f6 	bl	8010f74 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d8a:	1e5a      	subs	r2, r3, #1
 8010d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d8e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d92:	691b      	ldr	r3, [r3, #16]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d00f      	beq.n	8010db8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d9a:	3310      	adds	r3, #16
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	f000 ff93 	bl	8011cc8 <xTaskRemoveFromEventList>
 8010da2:	4603      	mov	r3, r0
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d007      	beq.n	8010db8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010da8:	4b3c      	ldr	r3, [pc, #240]	@ (8010e9c <xQueueReceive+0x1c0>)
 8010daa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010dae:	601a      	str	r2, [r3, #0]
 8010db0:	f3bf 8f4f 	dsb	sy
 8010db4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010db8:	f001 ff98 	bl	8012cec <vPortExitCritical>
				return pdPASS;
 8010dbc:	2301      	movs	r3, #1
 8010dbe:	e069      	b.n	8010e94 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d103      	bne.n	8010dce <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010dc6:	f001 ff91 	bl	8012cec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010dca:	2300      	movs	r3, #0
 8010dcc:	e062      	b.n	8010e94 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d106      	bne.n	8010de2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010dd4:	f107 0310 	add.w	r3, r7, #16
 8010dd8:	4618      	mov	r0, r3
 8010dda:	f000 ffd9 	bl	8011d90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010dde:	2301      	movs	r3, #1
 8010de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010de2:	f001 ff83 	bl	8012cec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010de6:	f000 fd43 	bl	8011870 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010dea:	f001 ff4d 	bl	8012c88 <vPortEnterCritical>
 8010dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010df0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010df4:	b25b      	sxtb	r3, r3
 8010df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dfa:	d103      	bne.n	8010e04 <xQueueReceive+0x128>
 8010dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010dfe:	2200      	movs	r2, #0
 8010e00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010e0a:	b25b      	sxtb	r3, r3
 8010e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e10:	d103      	bne.n	8010e1a <xQueueReceive+0x13e>
 8010e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e14:	2200      	movs	r2, #0
 8010e16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010e1a:	f001 ff67 	bl	8012cec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010e1e:	1d3a      	adds	r2, r7, #4
 8010e20:	f107 0310 	add.w	r3, r7, #16
 8010e24:	4611      	mov	r1, r2
 8010e26:	4618      	mov	r0, r3
 8010e28:	f000 ffc8 	bl	8011dbc <xTaskCheckForTimeOut>
 8010e2c:	4603      	mov	r3, r0
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d123      	bne.n	8010e7a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010e32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010e34:	f000 f916 	bl	8011064 <prvIsQueueEmpty>
 8010e38:	4603      	mov	r3, r0
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d017      	beq.n	8010e6e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e40:	3324      	adds	r3, #36	@ 0x24
 8010e42:	687a      	ldr	r2, [r7, #4]
 8010e44:	4611      	mov	r1, r2
 8010e46:	4618      	mov	r0, r3
 8010e48:	f000 feec 	bl	8011c24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010e4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010e4e:	f000 f8b7 	bl	8010fc0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010e52:	f000 fd1b 	bl	801188c <xTaskResumeAll>
 8010e56:	4603      	mov	r3, r0
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d189      	bne.n	8010d70 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8010e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8010e9c <xQueueReceive+0x1c0>)
 8010e5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010e62:	601a      	str	r2, [r3, #0]
 8010e64:	f3bf 8f4f 	dsb	sy
 8010e68:	f3bf 8f6f 	isb	sy
 8010e6c:	e780      	b.n	8010d70 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010e6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010e70:	f000 f8a6 	bl	8010fc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010e74:	f000 fd0a 	bl	801188c <xTaskResumeAll>
 8010e78:	e77a      	b.n	8010d70 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010e7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010e7c:	f000 f8a0 	bl	8010fc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010e80:	f000 fd04 	bl	801188c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010e84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010e86:	f000 f8ed 	bl	8011064 <prvIsQueueEmpty>
 8010e8a:	4603      	mov	r3, r0
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	f43f af6f 	beq.w	8010d70 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010e92:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010e94:	4618      	mov	r0, r3
 8010e96:	3730      	adds	r7, #48	@ 0x30
 8010e98:	46bd      	mov	sp, r7
 8010e9a:	bd80      	pop	{r7, pc}
 8010e9c:	e000ed04 	.word	0xe000ed04

08010ea0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010ea0:	b580      	push	{r7, lr}
 8010ea2:	b086      	sub	sp, #24
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	60f8      	str	r0, [r7, #12]
 8010ea8:	60b9      	str	r1, [r7, #8]
 8010eaa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010eac:	2300      	movs	r3, #0
 8010eae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010eb4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d10d      	bne.n	8010eda <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d14d      	bne.n	8010f62 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	689b      	ldr	r3, [r3, #8]
 8010eca:	4618      	mov	r0, r3
 8010ecc:	f001 f8e0 	bl	8012090 <xTaskPriorityDisinherit>
 8010ed0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	2200      	movs	r2, #0
 8010ed6:	609a      	str	r2, [r3, #8]
 8010ed8:	e043      	b.n	8010f62 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d119      	bne.n	8010f14 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	6858      	ldr	r0, [r3, #4]
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010ee8:	461a      	mov	r2, r3
 8010eea:	68b9      	ldr	r1, [r7, #8]
 8010eec:	f002 fbe2 	bl	80136b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	685a      	ldr	r2, [r3, #4]
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010ef8:	441a      	add	r2, r3
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	685a      	ldr	r2, [r3, #4]
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	689b      	ldr	r3, [r3, #8]
 8010f06:	429a      	cmp	r2, r3
 8010f08:	d32b      	bcc.n	8010f62 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	681a      	ldr	r2, [r3, #0]
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	605a      	str	r2, [r3, #4]
 8010f12:	e026      	b.n	8010f62 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	68d8      	ldr	r0, [r3, #12]
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010f1c:	461a      	mov	r2, r3
 8010f1e:	68b9      	ldr	r1, [r7, #8]
 8010f20:	f002 fbc8 	bl	80136b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	68da      	ldr	r2, [r3, #12]
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010f2c:	425b      	negs	r3, r3
 8010f2e:	441a      	add	r2, r3
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	68da      	ldr	r2, [r3, #12]
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	429a      	cmp	r2, r3
 8010f3e:	d207      	bcs.n	8010f50 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	689a      	ldr	r2, [r3, #8]
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010f48:	425b      	negs	r3, r3
 8010f4a:	441a      	add	r2, r3
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	2b02      	cmp	r3, #2
 8010f54:	d105      	bne.n	8010f62 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010f56:	693b      	ldr	r3, [r7, #16]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d002      	beq.n	8010f62 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010f5c:	693b      	ldr	r3, [r7, #16]
 8010f5e:	3b01      	subs	r3, #1
 8010f60:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010f62:	693b      	ldr	r3, [r7, #16]
 8010f64:	1c5a      	adds	r2, r3, #1
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8010f6a:	697b      	ldr	r3, [r7, #20]
}
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	3718      	adds	r7, #24
 8010f70:	46bd      	mov	sp, r7
 8010f72:	bd80      	pop	{r7, pc}

08010f74 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010f74:	b580      	push	{r7, lr}
 8010f76:	b082      	sub	sp, #8
 8010f78:	af00      	add	r7, sp, #0
 8010f7a:	6078      	str	r0, [r7, #4]
 8010f7c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d018      	beq.n	8010fb8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	68da      	ldr	r2, [r3, #12]
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010f8e:	441a      	add	r2, r3
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	68da      	ldr	r2, [r3, #12]
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	689b      	ldr	r3, [r3, #8]
 8010f9c:	429a      	cmp	r2, r3
 8010f9e:	d303      	bcc.n	8010fa8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	681a      	ldr	r2, [r3, #0]
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	68d9      	ldr	r1, [r3, #12]
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010fb0:	461a      	mov	r2, r3
 8010fb2:	6838      	ldr	r0, [r7, #0]
 8010fb4:	f002 fb7e 	bl	80136b4 <memcpy>
	}
}
 8010fb8:	bf00      	nop
 8010fba:	3708      	adds	r7, #8
 8010fbc:	46bd      	mov	sp, r7
 8010fbe:	bd80      	pop	{r7, pc}

08010fc0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010fc0:	b580      	push	{r7, lr}
 8010fc2:	b084      	sub	sp, #16
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010fc8:	f001 fe5e 	bl	8012c88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010fd2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010fd4:	e011      	b.n	8010ffa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d012      	beq.n	8011004 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	3324      	adds	r3, #36	@ 0x24
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	f000 fe70 	bl	8011cc8 <xTaskRemoveFromEventList>
 8010fe8:	4603      	mov	r3, r0
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d001      	beq.n	8010ff2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010fee:	f000 ff49 	bl	8011e84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010ff2:	7bfb      	ldrb	r3, [r7, #15]
 8010ff4:	3b01      	subs	r3, #1
 8010ff6:	b2db      	uxtb	r3, r3
 8010ff8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	dce9      	bgt.n	8010fd6 <prvUnlockQueue+0x16>
 8011002:	e000      	b.n	8011006 <prvUnlockQueue+0x46>
					break;
 8011004:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	22ff      	movs	r2, #255	@ 0xff
 801100a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 801100e:	f001 fe6d 	bl	8012cec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011012:	f001 fe39 	bl	8012c88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801101c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801101e:	e011      	b.n	8011044 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	691b      	ldr	r3, [r3, #16]
 8011024:	2b00      	cmp	r3, #0
 8011026:	d012      	beq.n	801104e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	3310      	adds	r3, #16
 801102c:	4618      	mov	r0, r3
 801102e:	f000 fe4b 	bl	8011cc8 <xTaskRemoveFromEventList>
 8011032:	4603      	mov	r3, r0
 8011034:	2b00      	cmp	r3, #0
 8011036:	d001      	beq.n	801103c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011038:	f000 ff24 	bl	8011e84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801103c:	7bbb      	ldrb	r3, [r7, #14]
 801103e:	3b01      	subs	r3, #1
 8011040:	b2db      	uxtb	r3, r3
 8011042:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011044:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011048:	2b00      	cmp	r3, #0
 801104a:	dce9      	bgt.n	8011020 <prvUnlockQueue+0x60>
 801104c:	e000      	b.n	8011050 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801104e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	22ff      	movs	r2, #255	@ 0xff
 8011054:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8011058:	f001 fe48 	bl	8012cec <vPortExitCritical>
}
 801105c:	bf00      	nop
 801105e:	3710      	adds	r7, #16
 8011060:	46bd      	mov	sp, r7
 8011062:	bd80      	pop	{r7, pc}

08011064 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011064:	b580      	push	{r7, lr}
 8011066:	b084      	sub	sp, #16
 8011068:	af00      	add	r7, sp, #0
 801106a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801106c:	f001 fe0c 	bl	8012c88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011074:	2b00      	cmp	r3, #0
 8011076:	d102      	bne.n	801107e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011078:	2301      	movs	r3, #1
 801107a:	60fb      	str	r3, [r7, #12]
 801107c:	e001      	b.n	8011082 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801107e:	2300      	movs	r3, #0
 8011080:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011082:	f001 fe33 	bl	8012cec <vPortExitCritical>

	return xReturn;
 8011086:	68fb      	ldr	r3, [r7, #12]
}
 8011088:	4618      	mov	r0, r3
 801108a:	3710      	adds	r7, #16
 801108c:	46bd      	mov	sp, r7
 801108e:	bd80      	pop	{r7, pc}

08011090 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011090:	b580      	push	{r7, lr}
 8011092:	b084      	sub	sp, #16
 8011094:	af00      	add	r7, sp, #0
 8011096:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011098:	f001 fdf6 	bl	8012c88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80110a4:	429a      	cmp	r2, r3
 80110a6:	d102      	bne.n	80110ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80110a8:	2301      	movs	r3, #1
 80110aa:	60fb      	str	r3, [r7, #12]
 80110ac:	e001      	b.n	80110b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80110ae:	2300      	movs	r3, #0
 80110b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80110b2:	f001 fe1b 	bl	8012cec <vPortExitCritical>

	return xReturn;
 80110b6:	68fb      	ldr	r3, [r7, #12]
}
 80110b8:	4618      	mov	r0, r3
 80110ba:	3710      	adds	r7, #16
 80110bc:	46bd      	mov	sp, r7
 80110be:	bd80      	pop	{r7, pc}

080110c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80110c0:	b480      	push	{r7}
 80110c2:	b085      	sub	sp, #20
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	6078      	str	r0, [r7, #4]
 80110c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80110ca:	2300      	movs	r3, #0
 80110cc:	60fb      	str	r3, [r7, #12]
 80110ce:	e014      	b.n	80110fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80110d0:	4a0f      	ldr	r2, [pc, #60]	@ (8011110 <vQueueAddToRegistry+0x50>)
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d10b      	bne.n	80110f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80110dc:	490c      	ldr	r1, [pc, #48]	@ (8011110 <vQueueAddToRegistry+0x50>)
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	683a      	ldr	r2, [r7, #0]
 80110e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80110e6:	4a0a      	ldr	r2, [pc, #40]	@ (8011110 <vQueueAddToRegistry+0x50>)
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	00db      	lsls	r3, r3, #3
 80110ec:	4413      	add	r3, r2
 80110ee:	687a      	ldr	r2, [r7, #4]
 80110f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80110f2:	e006      	b.n	8011102 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	3301      	adds	r3, #1
 80110f8:	60fb      	str	r3, [r7, #12]
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	2b07      	cmp	r3, #7
 80110fe:	d9e7      	bls.n	80110d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011100:	bf00      	nop
 8011102:	bf00      	nop
 8011104:	3714      	adds	r7, #20
 8011106:	46bd      	mov	sp, r7
 8011108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801110c:	4770      	bx	lr
 801110e:	bf00      	nop
 8011110:	20001818 	.word	0x20001818

08011114 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011114:	b580      	push	{r7, lr}
 8011116:	b086      	sub	sp, #24
 8011118:	af00      	add	r7, sp, #0
 801111a:	60f8      	str	r0, [r7, #12]
 801111c:	60b9      	str	r1, [r7, #8]
 801111e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011124:	f001 fdb0 	bl	8012c88 <vPortEnterCritical>
 8011128:	697b      	ldr	r3, [r7, #20]
 801112a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801112e:	b25b      	sxtb	r3, r3
 8011130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011134:	d103      	bne.n	801113e <vQueueWaitForMessageRestricted+0x2a>
 8011136:	697b      	ldr	r3, [r7, #20]
 8011138:	2200      	movs	r2, #0
 801113a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801113e:	697b      	ldr	r3, [r7, #20]
 8011140:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011144:	b25b      	sxtb	r3, r3
 8011146:	f1b3 3fff 	cmp.w	r3, #4294967295
 801114a:	d103      	bne.n	8011154 <vQueueWaitForMessageRestricted+0x40>
 801114c:	697b      	ldr	r3, [r7, #20]
 801114e:	2200      	movs	r2, #0
 8011150:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011154:	f001 fdca 	bl	8012cec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011158:	697b      	ldr	r3, [r7, #20]
 801115a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801115c:	2b00      	cmp	r3, #0
 801115e:	d106      	bne.n	801116e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8011160:	697b      	ldr	r3, [r7, #20]
 8011162:	3324      	adds	r3, #36	@ 0x24
 8011164:	687a      	ldr	r2, [r7, #4]
 8011166:	68b9      	ldr	r1, [r7, #8]
 8011168:	4618      	mov	r0, r3
 801116a:	f000 fd81 	bl	8011c70 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801116e:	6978      	ldr	r0, [r7, #20]
 8011170:	f7ff ff26 	bl	8010fc0 <prvUnlockQueue>
	}
 8011174:	bf00      	nop
 8011176:	3718      	adds	r7, #24
 8011178:	46bd      	mov	sp, r7
 801117a:	bd80      	pop	{r7, pc}

0801117c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801117c:	b580      	push	{r7, lr}
 801117e:	b08e      	sub	sp, #56	@ 0x38
 8011180:	af04      	add	r7, sp, #16
 8011182:	60f8      	str	r0, [r7, #12]
 8011184:	60b9      	str	r1, [r7, #8]
 8011186:	607a      	str	r2, [r7, #4]
 8011188:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801118a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801118c:	2b00      	cmp	r3, #0
 801118e:	d10b      	bne.n	80111a8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8011190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011194:	f383 8811 	msr	BASEPRI, r3
 8011198:	f3bf 8f6f 	isb	sy
 801119c:	f3bf 8f4f 	dsb	sy
 80111a0:	623b      	str	r3, [r7, #32]
}
 80111a2:	bf00      	nop
 80111a4:	bf00      	nop
 80111a6:	e7fd      	b.n	80111a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80111a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d10b      	bne.n	80111c6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80111ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111b2:	f383 8811 	msr	BASEPRI, r3
 80111b6:	f3bf 8f6f 	isb	sy
 80111ba:	f3bf 8f4f 	dsb	sy
 80111be:	61fb      	str	r3, [r7, #28]
}
 80111c0:	bf00      	nop
 80111c2:	bf00      	nop
 80111c4:	e7fd      	b.n	80111c2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80111c6:	23a0      	movs	r3, #160	@ 0xa0
 80111c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80111ca:	693b      	ldr	r3, [r7, #16]
 80111cc:	2ba0      	cmp	r3, #160	@ 0xa0
 80111ce:	d00b      	beq.n	80111e8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80111d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111d4:	f383 8811 	msr	BASEPRI, r3
 80111d8:	f3bf 8f6f 	isb	sy
 80111dc:	f3bf 8f4f 	dsb	sy
 80111e0:	61bb      	str	r3, [r7, #24]
}
 80111e2:	bf00      	nop
 80111e4:	bf00      	nop
 80111e6:	e7fd      	b.n	80111e4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80111e8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80111ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d01e      	beq.n	801122e <xTaskCreateStatic+0xb2>
 80111f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d01b      	beq.n	801122e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80111f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111f8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80111fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80111fe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011202:	2202      	movs	r2, #2
 8011204:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011208:	2300      	movs	r3, #0
 801120a:	9303      	str	r3, [sp, #12]
 801120c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801120e:	9302      	str	r3, [sp, #8]
 8011210:	f107 0314 	add.w	r3, r7, #20
 8011214:	9301      	str	r3, [sp, #4]
 8011216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011218:	9300      	str	r3, [sp, #0]
 801121a:	683b      	ldr	r3, [r7, #0]
 801121c:	687a      	ldr	r2, [r7, #4]
 801121e:	68b9      	ldr	r1, [r7, #8]
 8011220:	68f8      	ldr	r0, [r7, #12]
 8011222:	f000 f851 	bl	80112c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011226:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011228:	f000 f8ee 	bl	8011408 <prvAddNewTaskToReadyList>
 801122c:	e001      	b.n	8011232 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 801122e:	2300      	movs	r3, #0
 8011230:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011232:	697b      	ldr	r3, [r7, #20]
	}
 8011234:	4618      	mov	r0, r3
 8011236:	3728      	adds	r7, #40	@ 0x28
 8011238:	46bd      	mov	sp, r7
 801123a:	bd80      	pop	{r7, pc}

0801123c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801123c:	b580      	push	{r7, lr}
 801123e:	b08c      	sub	sp, #48	@ 0x30
 8011240:	af04      	add	r7, sp, #16
 8011242:	60f8      	str	r0, [r7, #12]
 8011244:	60b9      	str	r1, [r7, #8]
 8011246:	603b      	str	r3, [r7, #0]
 8011248:	4613      	mov	r3, r2
 801124a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801124c:	88fb      	ldrh	r3, [r7, #6]
 801124e:	009b      	lsls	r3, r3, #2
 8011250:	4618      	mov	r0, r3
 8011252:	f001 fe3b 	bl	8012ecc <pvPortMalloc>
 8011256:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011258:	697b      	ldr	r3, [r7, #20]
 801125a:	2b00      	cmp	r3, #0
 801125c:	d00e      	beq.n	801127c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801125e:	20a0      	movs	r0, #160	@ 0xa0
 8011260:	f001 fe34 	bl	8012ecc <pvPortMalloc>
 8011264:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011266:	69fb      	ldr	r3, [r7, #28]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d003      	beq.n	8011274 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801126c:	69fb      	ldr	r3, [r7, #28]
 801126e:	697a      	ldr	r2, [r7, #20]
 8011270:	631a      	str	r2, [r3, #48]	@ 0x30
 8011272:	e005      	b.n	8011280 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011274:	6978      	ldr	r0, [r7, #20]
 8011276:	f001 fef7 	bl	8013068 <vPortFree>
 801127a:	e001      	b.n	8011280 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801127c:	2300      	movs	r3, #0
 801127e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011280:	69fb      	ldr	r3, [r7, #28]
 8011282:	2b00      	cmp	r3, #0
 8011284:	d017      	beq.n	80112b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011286:	69fb      	ldr	r3, [r7, #28]
 8011288:	2200      	movs	r2, #0
 801128a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801128e:	88fa      	ldrh	r2, [r7, #6]
 8011290:	2300      	movs	r3, #0
 8011292:	9303      	str	r3, [sp, #12]
 8011294:	69fb      	ldr	r3, [r7, #28]
 8011296:	9302      	str	r3, [sp, #8]
 8011298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801129a:	9301      	str	r3, [sp, #4]
 801129c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801129e:	9300      	str	r3, [sp, #0]
 80112a0:	683b      	ldr	r3, [r7, #0]
 80112a2:	68b9      	ldr	r1, [r7, #8]
 80112a4:	68f8      	ldr	r0, [r7, #12]
 80112a6:	f000 f80f 	bl	80112c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80112aa:	69f8      	ldr	r0, [r7, #28]
 80112ac:	f000 f8ac 	bl	8011408 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80112b0:	2301      	movs	r3, #1
 80112b2:	61bb      	str	r3, [r7, #24]
 80112b4:	e002      	b.n	80112bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80112b6:	f04f 33ff 	mov.w	r3, #4294967295
 80112ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80112bc:	69bb      	ldr	r3, [r7, #24]
	}
 80112be:	4618      	mov	r0, r3
 80112c0:	3720      	adds	r7, #32
 80112c2:	46bd      	mov	sp, r7
 80112c4:	bd80      	pop	{r7, pc}
	...

080112c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80112c8:	b580      	push	{r7, lr}
 80112ca:	b088      	sub	sp, #32
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	60f8      	str	r0, [r7, #12]
 80112d0:	60b9      	str	r1, [r7, #8]
 80112d2:	607a      	str	r2, [r7, #4]
 80112d4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80112d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80112d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80112e0:	3b01      	subs	r3, #1
 80112e2:	009b      	lsls	r3, r3, #2
 80112e4:	4413      	add	r3, r2
 80112e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80112e8:	69bb      	ldr	r3, [r7, #24]
 80112ea:	f023 0307 	bic.w	r3, r3, #7
 80112ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80112f0:	69bb      	ldr	r3, [r7, #24]
 80112f2:	f003 0307 	and.w	r3, r3, #7
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d00b      	beq.n	8011312 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80112fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112fe:	f383 8811 	msr	BASEPRI, r3
 8011302:	f3bf 8f6f 	isb	sy
 8011306:	f3bf 8f4f 	dsb	sy
 801130a:	617b      	str	r3, [r7, #20]
}
 801130c:	bf00      	nop
 801130e:	bf00      	nop
 8011310:	e7fd      	b.n	801130e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011312:	68bb      	ldr	r3, [r7, #8]
 8011314:	2b00      	cmp	r3, #0
 8011316:	d01f      	beq.n	8011358 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011318:	2300      	movs	r3, #0
 801131a:	61fb      	str	r3, [r7, #28]
 801131c:	e012      	b.n	8011344 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801131e:	68ba      	ldr	r2, [r7, #8]
 8011320:	69fb      	ldr	r3, [r7, #28]
 8011322:	4413      	add	r3, r2
 8011324:	7819      	ldrb	r1, [r3, #0]
 8011326:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011328:	69fb      	ldr	r3, [r7, #28]
 801132a:	4413      	add	r3, r2
 801132c:	3334      	adds	r3, #52	@ 0x34
 801132e:	460a      	mov	r2, r1
 8011330:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011332:	68ba      	ldr	r2, [r7, #8]
 8011334:	69fb      	ldr	r3, [r7, #28]
 8011336:	4413      	add	r3, r2
 8011338:	781b      	ldrb	r3, [r3, #0]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d006      	beq.n	801134c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801133e:	69fb      	ldr	r3, [r7, #28]
 8011340:	3301      	adds	r3, #1
 8011342:	61fb      	str	r3, [r7, #28]
 8011344:	69fb      	ldr	r3, [r7, #28]
 8011346:	2b0f      	cmp	r3, #15
 8011348:	d9e9      	bls.n	801131e <prvInitialiseNewTask+0x56>
 801134a:	e000      	b.n	801134e <prvInitialiseNewTask+0x86>
			{
				break;
 801134c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801134e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011350:	2200      	movs	r2, #0
 8011352:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8011356:	e003      	b.n	8011360 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801135a:	2200      	movs	r2, #0
 801135c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011362:	2b06      	cmp	r3, #6
 8011364:	d901      	bls.n	801136a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011366:	2306      	movs	r3, #6
 8011368:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801136a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801136c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801136e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011372:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011374:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8011376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011378:	2200      	movs	r2, #0
 801137a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801137c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801137e:	3304      	adds	r3, #4
 8011380:	4618      	mov	r0, r3
 8011382:	f7ff f935 	bl	80105f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011388:	3318      	adds	r3, #24
 801138a:	4618      	mov	r0, r3
 801138c:	f7ff f930 	bl	80105f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011392:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011394:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011398:	f1c3 0207 	rsb	r2, r3, #7
 801139c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801139e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80113a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80113a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80113a4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80113a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80113a8:	2200      	movs	r2, #0
 80113aa:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80113ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80113b0:	2200      	movs	r2, #0
 80113b2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80113b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80113b8:	334c      	adds	r3, #76	@ 0x4c
 80113ba:	224c      	movs	r2, #76	@ 0x4c
 80113bc:	2100      	movs	r1, #0
 80113be:	4618      	mov	r0, r3
 80113c0:	f002 f8d6 	bl	8013570 <memset>
 80113c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80113c6:	4a0d      	ldr	r2, [pc, #52]	@ (80113fc <prvInitialiseNewTask+0x134>)
 80113c8:	651a      	str	r2, [r3, #80]	@ 0x50
 80113ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80113cc:	4a0c      	ldr	r2, [pc, #48]	@ (8011400 <prvInitialiseNewTask+0x138>)
 80113ce:	655a      	str	r2, [r3, #84]	@ 0x54
 80113d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80113d2:	4a0c      	ldr	r2, [pc, #48]	@ (8011404 <prvInitialiseNewTask+0x13c>)
 80113d4:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80113d6:	683a      	ldr	r2, [r7, #0]
 80113d8:	68f9      	ldr	r1, [r7, #12]
 80113da:	69b8      	ldr	r0, [r7, #24]
 80113dc:	f001 fb22 	bl	8012a24 <pxPortInitialiseStack>
 80113e0:	4602      	mov	r2, r0
 80113e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80113e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80113e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d002      	beq.n	80113f2 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80113ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80113f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80113f2:	bf00      	nop
 80113f4:	3720      	adds	r7, #32
 80113f6:	46bd      	mov	sp, r7
 80113f8:	bd80      	pop	{r7, pc}
 80113fa:	bf00      	nop
 80113fc:	200056b0 	.word	0x200056b0
 8011400:	20005718 	.word	0x20005718
 8011404:	20005780 	.word	0x20005780

08011408 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011408:	b580      	push	{r7, lr}
 801140a:	b082      	sub	sp, #8
 801140c:	af00      	add	r7, sp, #0
 801140e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011410:	f001 fc3a 	bl	8012c88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011414:	4b2a      	ldr	r3, [pc, #168]	@ (80114c0 <prvAddNewTaskToReadyList+0xb8>)
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	3301      	adds	r3, #1
 801141a:	4a29      	ldr	r2, [pc, #164]	@ (80114c0 <prvAddNewTaskToReadyList+0xb8>)
 801141c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801141e:	4b29      	ldr	r3, [pc, #164]	@ (80114c4 <prvAddNewTaskToReadyList+0xbc>)
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	2b00      	cmp	r3, #0
 8011424:	d109      	bne.n	801143a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011426:	4a27      	ldr	r2, [pc, #156]	@ (80114c4 <prvAddNewTaskToReadyList+0xbc>)
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801142c:	4b24      	ldr	r3, [pc, #144]	@ (80114c0 <prvAddNewTaskToReadyList+0xb8>)
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	2b01      	cmp	r3, #1
 8011432:	d110      	bne.n	8011456 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011434:	f000 fd4a 	bl	8011ecc <prvInitialiseTaskLists>
 8011438:	e00d      	b.n	8011456 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801143a:	4b23      	ldr	r3, [pc, #140]	@ (80114c8 <prvAddNewTaskToReadyList+0xc0>)
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d109      	bne.n	8011456 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011442:	4b20      	ldr	r3, [pc, #128]	@ (80114c4 <prvAddNewTaskToReadyList+0xbc>)
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801144c:	429a      	cmp	r2, r3
 801144e:	d802      	bhi.n	8011456 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011450:	4a1c      	ldr	r2, [pc, #112]	@ (80114c4 <prvAddNewTaskToReadyList+0xbc>)
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011456:	4b1d      	ldr	r3, [pc, #116]	@ (80114cc <prvAddNewTaskToReadyList+0xc4>)
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	3301      	adds	r3, #1
 801145c:	4a1b      	ldr	r2, [pc, #108]	@ (80114cc <prvAddNewTaskToReadyList+0xc4>)
 801145e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011464:	2201      	movs	r2, #1
 8011466:	409a      	lsls	r2, r3
 8011468:	4b19      	ldr	r3, [pc, #100]	@ (80114d0 <prvAddNewTaskToReadyList+0xc8>)
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	4313      	orrs	r3, r2
 801146e:	4a18      	ldr	r2, [pc, #96]	@ (80114d0 <prvAddNewTaskToReadyList+0xc8>)
 8011470:	6013      	str	r3, [r2, #0]
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011476:	4613      	mov	r3, r2
 8011478:	009b      	lsls	r3, r3, #2
 801147a:	4413      	add	r3, r2
 801147c:	009b      	lsls	r3, r3, #2
 801147e:	4a15      	ldr	r2, [pc, #84]	@ (80114d4 <prvAddNewTaskToReadyList+0xcc>)
 8011480:	441a      	add	r2, r3
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	3304      	adds	r3, #4
 8011486:	4619      	mov	r1, r3
 8011488:	4610      	mov	r0, r2
 801148a:	f7ff f8be 	bl	801060a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801148e:	f001 fc2d 	bl	8012cec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011492:	4b0d      	ldr	r3, [pc, #52]	@ (80114c8 <prvAddNewTaskToReadyList+0xc0>)
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	2b00      	cmp	r3, #0
 8011498:	d00e      	beq.n	80114b8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801149a:	4b0a      	ldr	r3, [pc, #40]	@ (80114c4 <prvAddNewTaskToReadyList+0xbc>)
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114a4:	429a      	cmp	r2, r3
 80114a6:	d207      	bcs.n	80114b8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80114a8:	4b0b      	ldr	r3, [pc, #44]	@ (80114d8 <prvAddNewTaskToReadyList+0xd0>)
 80114aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80114ae:	601a      	str	r2, [r3, #0]
 80114b0:	f3bf 8f4f 	dsb	sy
 80114b4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80114b8:	bf00      	nop
 80114ba:	3708      	adds	r7, #8
 80114bc:	46bd      	mov	sp, r7
 80114be:	bd80      	pop	{r7, pc}
 80114c0:	20001958 	.word	0x20001958
 80114c4:	20001858 	.word	0x20001858
 80114c8:	20001964 	.word	0x20001964
 80114cc:	20001974 	.word	0x20001974
 80114d0:	20001960 	.word	0x20001960
 80114d4:	2000185c 	.word	0x2000185c
 80114d8:	e000ed04 	.word	0xe000ed04

080114dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80114dc:	b580      	push	{r7, lr}
 80114de:	b084      	sub	sp, #16
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80114e4:	2300      	movs	r3, #0
 80114e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d018      	beq.n	8011520 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80114ee:	4b14      	ldr	r3, [pc, #80]	@ (8011540 <vTaskDelay+0x64>)
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d00b      	beq.n	801150e <vTaskDelay+0x32>
	__asm volatile
 80114f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114fa:	f383 8811 	msr	BASEPRI, r3
 80114fe:	f3bf 8f6f 	isb	sy
 8011502:	f3bf 8f4f 	dsb	sy
 8011506:	60bb      	str	r3, [r7, #8]
}
 8011508:	bf00      	nop
 801150a:	bf00      	nop
 801150c:	e7fd      	b.n	801150a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801150e:	f000 f9af 	bl	8011870 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011512:	2100      	movs	r1, #0
 8011514:	6878      	ldr	r0, [r7, #4]
 8011516:	f000 fe43 	bl	80121a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801151a:	f000 f9b7 	bl	801188c <xTaskResumeAll>
 801151e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	2b00      	cmp	r3, #0
 8011524:	d107      	bne.n	8011536 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8011526:	4b07      	ldr	r3, [pc, #28]	@ (8011544 <vTaskDelay+0x68>)
 8011528:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801152c:	601a      	str	r2, [r3, #0]
 801152e:	f3bf 8f4f 	dsb	sy
 8011532:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011536:	bf00      	nop
 8011538:	3710      	adds	r7, #16
 801153a:	46bd      	mov	sp, r7
 801153c:	bd80      	pop	{r7, pc}
 801153e:	bf00      	nop
 8011540:	20001980 	.word	0x20001980
 8011544:	e000ed04 	.word	0xe000ed04

08011548 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8011548:	b580      	push	{r7, lr}
 801154a:	b084      	sub	sp, #16
 801154c:	af00      	add	r7, sp, #0
 801154e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8011550:	f001 fb9a 	bl	8012c88 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	2b00      	cmp	r3, #0
 8011558:	d102      	bne.n	8011560 <vTaskSuspend+0x18>
 801155a:	4b3d      	ldr	r3, [pc, #244]	@ (8011650 <vTaskSuspend+0x108>)
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	e000      	b.n	8011562 <vTaskSuspend+0x1a>
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	3304      	adds	r3, #4
 8011568:	4618      	mov	r0, r3
 801156a:	f7ff f8ab 	bl	80106c4 <uxListRemove>
 801156e:	4603      	mov	r3, r0
 8011570:	2b00      	cmp	r3, #0
 8011572:	d115      	bne.n	80115a0 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011578:	4936      	ldr	r1, [pc, #216]	@ (8011654 <vTaskSuspend+0x10c>)
 801157a:	4613      	mov	r3, r2
 801157c:	009b      	lsls	r3, r3, #2
 801157e:	4413      	add	r3, r2
 8011580:	009b      	lsls	r3, r3, #2
 8011582:	440b      	add	r3, r1
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	2b00      	cmp	r3, #0
 8011588:	d10a      	bne.n	80115a0 <vTaskSuspend+0x58>
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801158e:	2201      	movs	r2, #1
 8011590:	fa02 f303 	lsl.w	r3, r2, r3
 8011594:	43da      	mvns	r2, r3
 8011596:	4b30      	ldr	r3, [pc, #192]	@ (8011658 <vTaskSuspend+0x110>)
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	4013      	ands	r3, r2
 801159c:	4a2e      	ldr	r2, [pc, #184]	@ (8011658 <vTaskSuspend+0x110>)
 801159e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d004      	beq.n	80115b2 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	3318      	adds	r3, #24
 80115ac:	4618      	mov	r0, r3
 80115ae:	f7ff f889 	bl	80106c4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	3304      	adds	r3, #4
 80115b6:	4619      	mov	r1, r3
 80115b8:	4828      	ldr	r0, [pc, #160]	@ (801165c <vTaskSuspend+0x114>)
 80115ba:	f7ff f826 	bl	801060a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80115c4:	b2db      	uxtb	r3, r3
 80115c6:	2b01      	cmp	r3, #1
 80115c8:	d103      	bne.n	80115d2 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	2200      	movs	r2, #0
 80115ce:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80115d2:	f001 fb8b 	bl	8012cec <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80115d6:	4b22      	ldr	r3, [pc, #136]	@ (8011660 <vTaskSuspend+0x118>)
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d005      	beq.n	80115ea <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80115de:	f001 fb53 	bl	8012c88 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80115e2:	f000 fd17 	bl	8012014 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80115e6:	f001 fb81 	bl	8012cec <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80115ea:	4b19      	ldr	r3, [pc, #100]	@ (8011650 <vTaskSuspend+0x108>)
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	68fa      	ldr	r2, [r7, #12]
 80115f0:	429a      	cmp	r2, r3
 80115f2:	d128      	bne.n	8011646 <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 80115f4:	4b1a      	ldr	r3, [pc, #104]	@ (8011660 <vTaskSuspend+0x118>)
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d018      	beq.n	801162e <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80115fc:	4b19      	ldr	r3, [pc, #100]	@ (8011664 <vTaskSuspend+0x11c>)
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	2b00      	cmp	r3, #0
 8011602:	d00b      	beq.n	801161c <vTaskSuspend+0xd4>
	__asm volatile
 8011604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011608:	f383 8811 	msr	BASEPRI, r3
 801160c:	f3bf 8f6f 	isb	sy
 8011610:	f3bf 8f4f 	dsb	sy
 8011614:	60bb      	str	r3, [r7, #8]
}
 8011616:	bf00      	nop
 8011618:	bf00      	nop
 801161a:	e7fd      	b.n	8011618 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 801161c:	4b12      	ldr	r3, [pc, #72]	@ (8011668 <vTaskSuspend+0x120>)
 801161e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011622:	601a      	str	r2, [r3, #0]
 8011624:	f3bf 8f4f 	dsb	sy
 8011628:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801162c:	e00b      	b.n	8011646 <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 801162e:	4b0b      	ldr	r3, [pc, #44]	@ (801165c <vTaskSuspend+0x114>)
 8011630:	681a      	ldr	r2, [r3, #0]
 8011632:	4b0e      	ldr	r3, [pc, #56]	@ (801166c <vTaskSuspend+0x124>)
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	429a      	cmp	r2, r3
 8011638:	d103      	bne.n	8011642 <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 801163a:	4b05      	ldr	r3, [pc, #20]	@ (8011650 <vTaskSuspend+0x108>)
 801163c:	2200      	movs	r2, #0
 801163e:	601a      	str	r2, [r3, #0]
	}
 8011640:	e001      	b.n	8011646 <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 8011642:	f000 fa8b 	bl	8011b5c <vTaskSwitchContext>
	}
 8011646:	bf00      	nop
 8011648:	3710      	adds	r7, #16
 801164a:	46bd      	mov	sp, r7
 801164c:	bd80      	pop	{r7, pc}
 801164e:	bf00      	nop
 8011650:	20001858 	.word	0x20001858
 8011654:	2000185c 	.word	0x2000185c
 8011658:	20001960 	.word	0x20001960
 801165c:	20001944 	.word	0x20001944
 8011660:	20001964 	.word	0x20001964
 8011664:	20001980 	.word	0x20001980
 8011668:	e000ed04 	.word	0xe000ed04
 801166c:	20001958 	.word	0x20001958

08011670 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8011670:	b480      	push	{r7}
 8011672:	b087      	sub	sp, #28
 8011674:	af00      	add	r7, sp, #0
 8011676:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8011678:	2300      	movs	r3, #0
 801167a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d10b      	bne.n	801169e <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 8011686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801168a:	f383 8811 	msr	BASEPRI, r3
 801168e:	f3bf 8f6f 	isb	sy
 8011692:	f3bf 8f4f 	dsb	sy
 8011696:	60fb      	str	r3, [r7, #12]
}
 8011698:	bf00      	nop
 801169a:	bf00      	nop
 801169c:	e7fd      	b.n	801169a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 801169e:	693b      	ldr	r3, [r7, #16]
 80116a0:	695b      	ldr	r3, [r3, #20]
 80116a2:	4a0a      	ldr	r2, [pc, #40]	@ (80116cc <prvTaskIsTaskSuspended+0x5c>)
 80116a4:	4293      	cmp	r3, r2
 80116a6:	d10a      	bne.n	80116be <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80116a8:	693b      	ldr	r3, [r7, #16]
 80116aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80116ac:	4a08      	ldr	r2, [pc, #32]	@ (80116d0 <prvTaskIsTaskSuspended+0x60>)
 80116ae:	4293      	cmp	r3, r2
 80116b0:	d005      	beq.n	80116be <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80116b2:	693b      	ldr	r3, [r7, #16]
 80116b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d101      	bne.n	80116be <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 80116ba:	2301      	movs	r3, #1
 80116bc:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80116be:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80116c0:	4618      	mov	r0, r3
 80116c2:	371c      	adds	r7, #28
 80116c4:	46bd      	mov	sp, r7
 80116c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ca:	4770      	bx	lr
 80116cc:	20001944 	.word	0x20001944
 80116d0:	20001918 	.word	0x20001918

080116d4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80116d4:	b580      	push	{r7, lr}
 80116d6:	b084      	sub	sp, #16
 80116d8:	af00      	add	r7, sp, #0
 80116da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d10b      	bne.n	80116fe <vTaskResume+0x2a>
	__asm volatile
 80116e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116ea:	f383 8811 	msr	BASEPRI, r3
 80116ee:	f3bf 8f6f 	isb	sy
 80116f2:	f3bf 8f4f 	dsb	sy
 80116f6:	60bb      	str	r3, [r7, #8]
}
 80116f8:	bf00      	nop
 80116fa:	bf00      	nop
 80116fc:	e7fd      	b.n	80116fa <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80116fe:	4b20      	ldr	r3, [pc, #128]	@ (8011780 <vTaskResume+0xac>)
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	68fa      	ldr	r2, [r7, #12]
 8011704:	429a      	cmp	r2, r3
 8011706:	d037      	beq.n	8011778 <vTaskResume+0xa4>
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d034      	beq.n	8011778 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 801170e:	f001 fabb 	bl	8012c88 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8011712:	68f8      	ldr	r0, [r7, #12]
 8011714:	f7ff ffac 	bl	8011670 <prvTaskIsTaskSuspended>
 8011718:	4603      	mov	r3, r0
 801171a:	2b00      	cmp	r3, #0
 801171c:	d02a      	beq.n	8011774 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	3304      	adds	r3, #4
 8011722:	4618      	mov	r0, r3
 8011724:	f7fe ffce 	bl	80106c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801172c:	2201      	movs	r2, #1
 801172e:	409a      	lsls	r2, r3
 8011730:	4b14      	ldr	r3, [pc, #80]	@ (8011784 <vTaskResume+0xb0>)
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	4313      	orrs	r3, r2
 8011736:	4a13      	ldr	r2, [pc, #76]	@ (8011784 <vTaskResume+0xb0>)
 8011738:	6013      	str	r3, [r2, #0]
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801173e:	4613      	mov	r3, r2
 8011740:	009b      	lsls	r3, r3, #2
 8011742:	4413      	add	r3, r2
 8011744:	009b      	lsls	r3, r3, #2
 8011746:	4a10      	ldr	r2, [pc, #64]	@ (8011788 <vTaskResume+0xb4>)
 8011748:	441a      	add	r2, r3
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	3304      	adds	r3, #4
 801174e:	4619      	mov	r1, r3
 8011750:	4610      	mov	r0, r2
 8011752:	f7fe ff5a 	bl	801060a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801175a:	4b09      	ldr	r3, [pc, #36]	@ (8011780 <vTaskResume+0xac>)
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011760:	429a      	cmp	r2, r3
 8011762:	d307      	bcc.n	8011774 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8011764:	4b09      	ldr	r3, [pc, #36]	@ (801178c <vTaskResume+0xb8>)
 8011766:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801176a:	601a      	str	r2, [r3, #0]
 801176c:	f3bf 8f4f 	dsb	sy
 8011770:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8011774:	f001 faba 	bl	8012cec <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011778:	bf00      	nop
 801177a:	3710      	adds	r7, #16
 801177c:	46bd      	mov	sp, r7
 801177e:	bd80      	pop	{r7, pc}
 8011780:	20001858 	.word	0x20001858
 8011784:	20001960 	.word	0x20001960
 8011788:	2000185c 	.word	0x2000185c
 801178c:	e000ed04 	.word	0xe000ed04

08011790 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011790:	b580      	push	{r7, lr}
 8011792:	b08a      	sub	sp, #40	@ 0x28
 8011794:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011796:	2300      	movs	r3, #0
 8011798:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801179a:	2300      	movs	r3, #0
 801179c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801179e:	463a      	mov	r2, r7
 80117a0:	1d39      	adds	r1, r7, #4
 80117a2:	f107 0308 	add.w	r3, r7, #8
 80117a6:	4618      	mov	r0, r3
 80117a8:	f7ef fbfc 	bl	8000fa4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80117ac:	6839      	ldr	r1, [r7, #0]
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	68ba      	ldr	r2, [r7, #8]
 80117b2:	9202      	str	r2, [sp, #8]
 80117b4:	9301      	str	r3, [sp, #4]
 80117b6:	2300      	movs	r3, #0
 80117b8:	9300      	str	r3, [sp, #0]
 80117ba:	2300      	movs	r3, #0
 80117bc:	460a      	mov	r2, r1
 80117be:	4924      	ldr	r1, [pc, #144]	@ (8011850 <vTaskStartScheduler+0xc0>)
 80117c0:	4824      	ldr	r0, [pc, #144]	@ (8011854 <vTaskStartScheduler+0xc4>)
 80117c2:	f7ff fcdb 	bl	801117c <xTaskCreateStatic>
 80117c6:	4603      	mov	r3, r0
 80117c8:	4a23      	ldr	r2, [pc, #140]	@ (8011858 <vTaskStartScheduler+0xc8>)
 80117ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80117cc:	4b22      	ldr	r3, [pc, #136]	@ (8011858 <vTaskStartScheduler+0xc8>)
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d002      	beq.n	80117da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80117d4:	2301      	movs	r3, #1
 80117d6:	617b      	str	r3, [r7, #20]
 80117d8:	e001      	b.n	80117de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80117da:	2300      	movs	r3, #0
 80117dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80117de:	697b      	ldr	r3, [r7, #20]
 80117e0:	2b01      	cmp	r3, #1
 80117e2:	d102      	bne.n	80117ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80117e4:	f000 fd42 	bl	801226c <xTimerCreateTimerTask>
 80117e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80117ea:	697b      	ldr	r3, [r7, #20]
 80117ec:	2b01      	cmp	r3, #1
 80117ee:	d11b      	bne.n	8011828 <vTaskStartScheduler+0x98>
	__asm volatile
 80117f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117f4:	f383 8811 	msr	BASEPRI, r3
 80117f8:	f3bf 8f6f 	isb	sy
 80117fc:	f3bf 8f4f 	dsb	sy
 8011800:	613b      	str	r3, [r7, #16]
}
 8011802:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011804:	4b15      	ldr	r3, [pc, #84]	@ (801185c <vTaskStartScheduler+0xcc>)
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	334c      	adds	r3, #76	@ 0x4c
 801180a:	4a15      	ldr	r2, [pc, #84]	@ (8011860 <vTaskStartScheduler+0xd0>)
 801180c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801180e:	4b15      	ldr	r3, [pc, #84]	@ (8011864 <vTaskStartScheduler+0xd4>)
 8011810:	f04f 32ff 	mov.w	r2, #4294967295
 8011814:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011816:	4b14      	ldr	r3, [pc, #80]	@ (8011868 <vTaskStartScheduler+0xd8>)
 8011818:	2201      	movs	r2, #1
 801181a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801181c:	4b13      	ldr	r3, [pc, #76]	@ (801186c <vTaskStartScheduler+0xdc>)
 801181e:	2200      	movs	r2, #0
 8011820:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011822:	f001 f98d 	bl	8012b40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011826:	e00f      	b.n	8011848 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011828:	697b      	ldr	r3, [r7, #20]
 801182a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801182e:	d10b      	bne.n	8011848 <vTaskStartScheduler+0xb8>
	__asm volatile
 8011830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011834:	f383 8811 	msr	BASEPRI, r3
 8011838:	f3bf 8f6f 	isb	sy
 801183c:	f3bf 8f4f 	dsb	sy
 8011840:	60fb      	str	r3, [r7, #12]
}
 8011842:	bf00      	nop
 8011844:	bf00      	nop
 8011846:	e7fd      	b.n	8011844 <vTaskStartScheduler+0xb4>
}
 8011848:	bf00      	nop
 801184a:	3718      	adds	r7, #24
 801184c:	46bd      	mov	sp, r7
 801184e:	bd80      	pop	{r7, pc}
 8011850:	080141b4 	.word	0x080141b4
 8011854:	08011e9d 	.word	0x08011e9d
 8011858:	2000197c 	.word	0x2000197c
 801185c:	20001858 	.word	0x20001858
 8011860:	20000164 	.word	0x20000164
 8011864:	20001978 	.word	0x20001978
 8011868:	20001964 	.word	0x20001964
 801186c:	2000195c 	.word	0x2000195c

08011870 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011870:	b480      	push	{r7}
 8011872:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011874:	4b04      	ldr	r3, [pc, #16]	@ (8011888 <vTaskSuspendAll+0x18>)
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	3301      	adds	r3, #1
 801187a:	4a03      	ldr	r2, [pc, #12]	@ (8011888 <vTaskSuspendAll+0x18>)
 801187c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801187e:	bf00      	nop
 8011880:	46bd      	mov	sp, r7
 8011882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011886:	4770      	bx	lr
 8011888:	20001980 	.word	0x20001980

0801188c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801188c:	b580      	push	{r7, lr}
 801188e:	b084      	sub	sp, #16
 8011890:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011892:	2300      	movs	r3, #0
 8011894:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011896:	2300      	movs	r3, #0
 8011898:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801189a:	4b42      	ldr	r3, [pc, #264]	@ (80119a4 <xTaskResumeAll+0x118>)
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d10b      	bne.n	80118ba <xTaskResumeAll+0x2e>
	__asm volatile
 80118a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80118a6:	f383 8811 	msr	BASEPRI, r3
 80118aa:	f3bf 8f6f 	isb	sy
 80118ae:	f3bf 8f4f 	dsb	sy
 80118b2:	603b      	str	r3, [r7, #0]
}
 80118b4:	bf00      	nop
 80118b6:	bf00      	nop
 80118b8:	e7fd      	b.n	80118b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80118ba:	f001 f9e5 	bl	8012c88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80118be:	4b39      	ldr	r3, [pc, #228]	@ (80119a4 <xTaskResumeAll+0x118>)
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	3b01      	subs	r3, #1
 80118c4:	4a37      	ldr	r2, [pc, #220]	@ (80119a4 <xTaskResumeAll+0x118>)
 80118c6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80118c8:	4b36      	ldr	r3, [pc, #216]	@ (80119a4 <xTaskResumeAll+0x118>)
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d161      	bne.n	8011994 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80118d0:	4b35      	ldr	r3, [pc, #212]	@ (80119a8 <xTaskResumeAll+0x11c>)
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d05d      	beq.n	8011994 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80118d8:	e02e      	b.n	8011938 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80118da:	4b34      	ldr	r3, [pc, #208]	@ (80119ac <xTaskResumeAll+0x120>)
 80118dc:	68db      	ldr	r3, [r3, #12]
 80118de:	68db      	ldr	r3, [r3, #12]
 80118e0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	3318      	adds	r3, #24
 80118e6:	4618      	mov	r0, r3
 80118e8:	f7fe feec 	bl	80106c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	3304      	adds	r3, #4
 80118f0:	4618      	mov	r0, r3
 80118f2:	f7fe fee7 	bl	80106c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118fa:	2201      	movs	r2, #1
 80118fc:	409a      	lsls	r2, r3
 80118fe:	4b2c      	ldr	r3, [pc, #176]	@ (80119b0 <xTaskResumeAll+0x124>)
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	4313      	orrs	r3, r2
 8011904:	4a2a      	ldr	r2, [pc, #168]	@ (80119b0 <xTaskResumeAll+0x124>)
 8011906:	6013      	str	r3, [r2, #0]
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801190c:	4613      	mov	r3, r2
 801190e:	009b      	lsls	r3, r3, #2
 8011910:	4413      	add	r3, r2
 8011912:	009b      	lsls	r3, r3, #2
 8011914:	4a27      	ldr	r2, [pc, #156]	@ (80119b4 <xTaskResumeAll+0x128>)
 8011916:	441a      	add	r2, r3
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	3304      	adds	r3, #4
 801191c:	4619      	mov	r1, r3
 801191e:	4610      	mov	r0, r2
 8011920:	f7fe fe73 	bl	801060a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011928:	4b23      	ldr	r3, [pc, #140]	@ (80119b8 <xTaskResumeAll+0x12c>)
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801192e:	429a      	cmp	r2, r3
 8011930:	d302      	bcc.n	8011938 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8011932:	4b22      	ldr	r3, [pc, #136]	@ (80119bc <xTaskResumeAll+0x130>)
 8011934:	2201      	movs	r2, #1
 8011936:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011938:	4b1c      	ldr	r3, [pc, #112]	@ (80119ac <xTaskResumeAll+0x120>)
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	2b00      	cmp	r3, #0
 801193e:	d1cc      	bne.n	80118da <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	2b00      	cmp	r3, #0
 8011944:	d001      	beq.n	801194a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011946:	f000 fb65 	bl	8012014 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801194a:	4b1d      	ldr	r3, [pc, #116]	@ (80119c0 <xTaskResumeAll+0x134>)
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	2b00      	cmp	r3, #0
 8011954:	d010      	beq.n	8011978 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011956:	f000 f847 	bl	80119e8 <xTaskIncrementTick>
 801195a:	4603      	mov	r3, r0
 801195c:	2b00      	cmp	r3, #0
 801195e:	d002      	beq.n	8011966 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8011960:	4b16      	ldr	r3, [pc, #88]	@ (80119bc <xTaskResumeAll+0x130>)
 8011962:	2201      	movs	r2, #1
 8011964:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	3b01      	subs	r3, #1
 801196a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	2b00      	cmp	r3, #0
 8011970:	d1f1      	bne.n	8011956 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8011972:	4b13      	ldr	r3, [pc, #76]	@ (80119c0 <xTaskResumeAll+0x134>)
 8011974:	2200      	movs	r2, #0
 8011976:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011978:	4b10      	ldr	r3, [pc, #64]	@ (80119bc <xTaskResumeAll+0x130>)
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	2b00      	cmp	r3, #0
 801197e:	d009      	beq.n	8011994 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011980:	2301      	movs	r3, #1
 8011982:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011984:	4b0f      	ldr	r3, [pc, #60]	@ (80119c4 <xTaskResumeAll+0x138>)
 8011986:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801198a:	601a      	str	r2, [r3, #0]
 801198c:	f3bf 8f4f 	dsb	sy
 8011990:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011994:	f001 f9aa 	bl	8012cec <vPortExitCritical>

	return xAlreadyYielded;
 8011998:	68bb      	ldr	r3, [r7, #8]
}
 801199a:	4618      	mov	r0, r3
 801199c:	3710      	adds	r7, #16
 801199e:	46bd      	mov	sp, r7
 80119a0:	bd80      	pop	{r7, pc}
 80119a2:	bf00      	nop
 80119a4:	20001980 	.word	0x20001980
 80119a8:	20001958 	.word	0x20001958
 80119ac:	20001918 	.word	0x20001918
 80119b0:	20001960 	.word	0x20001960
 80119b4:	2000185c 	.word	0x2000185c
 80119b8:	20001858 	.word	0x20001858
 80119bc:	2000196c 	.word	0x2000196c
 80119c0:	20001968 	.word	0x20001968
 80119c4:	e000ed04 	.word	0xe000ed04

080119c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80119c8:	b480      	push	{r7}
 80119ca:	b083      	sub	sp, #12
 80119cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80119ce:	4b05      	ldr	r3, [pc, #20]	@ (80119e4 <xTaskGetTickCount+0x1c>)
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80119d4:	687b      	ldr	r3, [r7, #4]
}
 80119d6:	4618      	mov	r0, r3
 80119d8:	370c      	adds	r7, #12
 80119da:	46bd      	mov	sp, r7
 80119dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119e0:	4770      	bx	lr
 80119e2:	bf00      	nop
 80119e4:	2000195c 	.word	0x2000195c

080119e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80119e8:	b580      	push	{r7, lr}
 80119ea:	b086      	sub	sp, #24
 80119ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80119ee:	2300      	movs	r3, #0
 80119f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80119f2:	4b4f      	ldr	r3, [pc, #316]	@ (8011b30 <xTaskIncrementTick+0x148>)
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	f040 808f 	bne.w	8011b1a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80119fc:	4b4d      	ldr	r3, [pc, #308]	@ (8011b34 <xTaskIncrementTick+0x14c>)
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	3301      	adds	r3, #1
 8011a02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011a04:	4a4b      	ldr	r2, [pc, #300]	@ (8011b34 <xTaskIncrementTick+0x14c>)
 8011a06:	693b      	ldr	r3, [r7, #16]
 8011a08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011a0a:	693b      	ldr	r3, [r7, #16]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d121      	bne.n	8011a54 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8011a10:	4b49      	ldr	r3, [pc, #292]	@ (8011b38 <xTaskIncrementTick+0x150>)
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d00b      	beq.n	8011a32 <xTaskIncrementTick+0x4a>
	__asm volatile
 8011a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a1e:	f383 8811 	msr	BASEPRI, r3
 8011a22:	f3bf 8f6f 	isb	sy
 8011a26:	f3bf 8f4f 	dsb	sy
 8011a2a:	603b      	str	r3, [r7, #0]
}
 8011a2c:	bf00      	nop
 8011a2e:	bf00      	nop
 8011a30:	e7fd      	b.n	8011a2e <xTaskIncrementTick+0x46>
 8011a32:	4b41      	ldr	r3, [pc, #260]	@ (8011b38 <xTaskIncrementTick+0x150>)
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	60fb      	str	r3, [r7, #12]
 8011a38:	4b40      	ldr	r3, [pc, #256]	@ (8011b3c <xTaskIncrementTick+0x154>)
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	4a3e      	ldr	r2, [pc, #248]	@ (8011b38 <xTaskIncrementTick+0x150>)
 8011a3e:	6013      	str	r3, [r2, #0]
 8011a40:	4a3e      	ldr	r2, [pc, #248]	@ (8011b3c <xTaskIncrementTick+0x154>)
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	6013      	str	r3, [r2, #0]
 8011a46:	4b3e      	ldr	r3, [pc, #248]	@ (8011b40 <xTaskIncrementTick+0x158>)
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	3301      	adds	r3, #1
 8011a4c:	4a3c      	ldr	r2, [pc, #240]	@ (8011b40 <xTaskIncrementTick+0x158>)
 8011a4e:	6013      	str	r3, [r2, #0]
 8011a50:	f000 fae0 	bl	8012014 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011a54:	4b3b      	ldr	r3, [pc, #236]	@ (8011b44 <xTaskIncrementTick+0x15c>)
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	693a      	ldr	r2, [r7, #16]
 8011a5a:	429a      	cmp	r2, r3
 8011a5c:	d348      	bcc.n	8011af0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011a5e:	4b36      	ldr	r3, [pc, #216]	@ (8011b38 <xTaskIncrementTick+0x150>)
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d104      	bne.n	8011a72 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011a68:	4b36      	ldr	r3, [pc, #216]	@ (8011b44 <xTaskIncrementTick+0x15c>)
 8011a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8011a6e:	601a      	str	r2, [r3, #0]
					break;
 8011a70:	e03e      	b.n	8011af0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011a72:	4b31      	ldr	r3, [pc, #196]	@ (8011b38 <xTaskIncrementTick+0x150>)
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	68db      	ldr	r3, [r3, #12]
 8011a78:	68db      	ldr	r3, [r3, #12]
 8011a7a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011a7c:	68bb      	ldr	r3, [r7, #8]
 8011a7e:	685b      	ldr	r3, [r3, #4]
 8011a80:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011a82:	693a      	ldr	r2, [r7, #16]
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	429a      	cmp	r2, r3
 8011a88:	d203      	bcs.n	8011a92 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011a8a:	4a2e      	ldr	r2, [pc, #184]	@ (8011b44 <xTaskIncrementTick+0x15c>)
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011a90:	e02e      	b.n	8011af0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011a92:	68bb      	ldr	r3, [r7, #8]
 8011a94:	3304      	adds	r3, #4
 8011a96:	4618      	mov	r0, r3
 8011a98:	f7fe fe14 	bl	80106c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011a9c:	68bb      	ldr	r3, [r7, #8]
 8011a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d004      	beq.n	8011aae <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011aa4:	68bb      	ldr	r3, [r7, #8]
 8011aa6:	3318      	adds	r3, #24
 8011aa8:	4618      	mov	r0, r3
 8011aaa:	f7fe fe0b 	bl	80106c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011aae:	68bb      	ldr	r3, [r7, #8]
 8011ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ab2:	2201      	movs	r2, #1
 8011ab4:	409a      	lsls	r2, r3
 8011ab6:	4b24      	ldr	r3, [pc, #144]	@ (8011b48 <xTaskIncrementTick+0x160>)
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	4313      	orrs	r3, r2
 8011abc:	4a22      	ldr	r2, [pc, #136]	@ (8011b48 <xTaskIncrementTick+0x160>)
 8011abe:	6013      	str	r3, [r2, #0]
 8011ac0:	68bb      	ldr	r3, [r7, #8]
 8011ac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011ac4:	4613      	mov	r3, r2
 8011ac6:	009b      	lsls	r3, r3, #2
 8011ac8:	4413      	add	r3, r2
 8011aca:	009b      	lsls	r3, r3, #2
 8011acc:	4a1f      	ldr	r2, [pc, #124]	@ (8011b4c <xTaskIncrementTick+0x164>)
 8011ace:	441a      	add	r2, r3
 8011ad0:	68bb      	ldr	r3, [r7, #8]
 8011ad2:	3304      	adds	r3, #4
 8011ad4:	4619      	mov	r1, r3
 8011ad6:	4610      	mov	r0, r2
 8011ad8:	f7fe fd97 	bl	801060a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011adc:	68bb      	ldr	r3, [r7, #8]
 8011ade:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8011b50 <xTaskIncrementTick+0x168>)
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ae6:	429a      	cmp	r2, r3
 8011ae8:	d3b9      	bcc.n	8011a5e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8011aea:	2301      	movs	r3, #1
 8011aec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011aee:	e7b6      	b.n	8011a5e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011af0:	4b17      	ldr	r3, [pc, #92]	@ (8011b50 <xTaskIncrementTick+0x168>)
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011af6:	4915      	ldr	r1, [pc, #84]	@ (8011b4c <xTaskIncrementTick+0x164>)
 8011af8:	4613      	mov	r3, r2
 8011afa:	009b      	lsls	r3, r3, #2
 8011afc:	4413      	add	r3, r2
 8011afe:	009b      	lsls	r3, r3, #2
 8011b00:	440b      	add	r3, r1
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	2b01      	cmp	r3, #1
 8011b06:	d901      	bls.n	8011b0c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8011b08:	2301      	movs	r3, #1
 8011b0a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011b0c:	4b11      	ldr	r3, [pc, #68]	@ (8011b54 <xTaskIncrementTick+0x16c>)
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d007      	beq.n	8011b24 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8011b14:	2301      	movs	r3, #1
 8011b16:	617b      	str	r3, [r7, #20]
 8011b18:	e004      	b.n	8011b24 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8011b1a:	4b0f      	ldr	r3, [pc, #60]	@ (8011b58 <xTaskIncrementTick+0x170>)
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	3301      	adds	r3, #1
 8011b20:	4a0d      	ldr	r2, [pc, #52]	@ (8011b58 <xTaskIncrementTick+0x170>)
 8011b22:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011b24:	697b      	ldr	r3, [r7, #20]
}
 8011b26:	4618      	mov	r0, r3
 8011b28:	3718      	adds	r7, #24
 8011b2a:	46bd      	mov	sp, r7
 8011b2c:	bd80      	pop	{r7, pc}
 8011b2e:	bf00      	nop
 8011b30:	20001980 	.word	0x20001980
 8011b34:	2000195c 	.word	0x2000195c
 8011b38:	20001910 	.word	0x20001910
 8011b3c:	20001914 	.word	0x20001914
 8011b40:	20001970 	.word	0x20001970
 8011b44:	20001978 	.word	0x20001978
 8011b48:	20001960 	.word	0x20001960
 8011b4c:	2000185c 	.word	0x2000185c
 8011b50:	20001858 	.word	0x20001858
 8011b54:	2000196c 	.word	0x2000196c
 8011b58:	20001968 	.word	0x20001968

08011b5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011b5c:	b480      	push	{r7}
 8011b5e:	b087      	sub	sp, #28
 8011b60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011b62:	4b2a      	ldr	r3, [pc, #168]	@ (8011c0c <vTaskSwitchContext+0xb0>)
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d003      	beq.n	8011b72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011b6a:	4b29      	ldr	r3, [pc, #164]	@ (8011c10 <vTaskSwitchContext+0xb4>)
 8011b6c:	2201      	movs	r2, #1
 8011b6e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011b70:	e045      	b.n	8011bfe <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8011b72:	4b27      	ldr	r3, [pc, #156]	@ (8011c10 <vTaskSwitchContext+0xb4>)
 8011b74:	2200      	movs	r2, #0
 8011b76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011b78:	4b26      	ldr	r3, [pc, #152]	@ (8011c14 <vTaskSwitchContext+0xb8>)
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	fab3 f383 	clz	r3, r3
 8011b84:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8011b86:	7afb      	ldrb	r3, [r7, #11]
 8011b88:	f1c3 031f 	rsb	r3, r3, #31
 8011b8c:	617b      	str	r3, [r7, #20]
 8011b8e:	4922      	ldr	r1, [pc, #136]	@ (8011c18 <vTaskSwitchContext+0xbc>)
 8011b90:	697a      	ldr	r2, [r7, #20]
 8011b92:	4613      	mov	r3, r2
 8011b94:	009b      	lsls	r3, r3, #2
 8011b96:	4413      	add	r3, r2
 8011b98:	009b      	lsls	r3, r3, #2
 8011b9a:	440b      	add	r3, r1
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d10b      	bne.n	8011bba <vTaskSwitchContext+0x5e>
	__asm volatile
 8011ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ba6:	f383 8811 	msr	BASEPRI, r3
 8011baa:	f3bf 8f6f 	isb	sy
 8011bae:	f3bf 8f4f 	dsb	sy
 8011bb2:	607b      	str	r3, [r7, #4]
}
 8011bb4:	bf00      	nop
 8011bb6:	bf00      	nop
 8011bb8:	e7fd      	b.n	8011bb6 <vTaskSwitchContext+0x5a>
 8011bba:	697a      	ldr	r2, [r7, #20]
 8011bbc:	4613      	mov	r3, r2
 8011bbe:	009b      	lsls	r3, r3, #2
 8011bc0:	4413      	add	r3, r2
 8011bc2:	009b      	lsls	r3, r3, #2
 8011bc4:	4a14      	ldr	r2, [pc, #80]	@ (8011c18 <vTaskSwitchContext+0xbc>)
 8011bc6:	4413      	add	r3, r2
 8011bc8:	613b      	str	r3, [r7, #16]
 8011bca:	693b      	ldr	r3, [r7, #16]
 8011bcc:	685b      	ldr	r3, [r3, #4]
 8011bce:	685a      	ldr	r2, [r3, #4]
 8011bd0:	693b      	ldr	r3, [r7, #16]
 8011bd2:	605a      	str	r2, [r3, #4]
 8011bd4:	693b      	ldr	r3, [r7, #16]
 8011bd6:	685a      	ldr	r2, [r3, #4]
 8011bd8:	693b      	ldr	r3, [r7, #16]
 8011bda:	3308      	adds	r3, #8
 8011bdc:	429a      	cmp	r2, r3
 8011bde:	d104      	bne.n	8011bea <vTaskSwitchContext+0x8e>
 8011be0:	693b      	ldr	r3, [r7, #16]
 8011be2:	685b      	ldr	r3, [r3, #4]
 8011be4:	685a      	ldr	r2, [r3, #4]
 8011be6:	693b      	ldr	r3, [r7, #16]
 8011be8:	605a      	str	r2, [r3, #4]
 8011bea:	693b      	ldr	r3, [r7, #16]
 8011bec:	685b      	ldr	r3, [r3, #4]
 8011bee:	68db      	ldr	r3, [r3, #12]
 8011bf0:	4a0a      	ldr	r2, [pc, #40]	@ (8011c1c <vTaskSwitchContext+0xc0>)
 8011bf2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011bf4:	4b09      	ldr	r3, [pc, #36]	@ (8011c1c <vTaskSwitchContext+0xc0>)
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	334c      	adds	r3, #76	@ 0x4c
 8011bfa:	4a09      	ldr	r2, [pc, #36]	@ (8011c20 <vTaskSwitchContext+0xc4>)
 8011bfc:	6013      	str	r3, [r2, #0]
}
 8011bfe:	bf00      	nop
 8011c00:	371c      	adds	r7, #28
 8011c02:	46bd      	mov	sp, r7
 8011c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c08:	4770      	bx	lr
 8011c0a:	bf00      	nop
 8011c0c:	20001980 	.word	0x20001980
 8011c10:	2000196c 	.word	0x2000196c
 8011c14:	20001960 	.word	0x20001960
 8011c18:	2000185c 	.word	0x2000185c
 8011c1c:	20001858 	.word	0x20001858
 8011c20:	20000164 	.word	0x20000164

08011c24 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011c24:	b580      	push	{r7, lr}
 8011c26:	b084      	sub	sp, #16
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
 8011c2c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d10b      	bne.n	8011c4c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8011c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c38:	f383 8811 	msr	BASEPRI, r3
 8011c3c:	f3bf 8f6f 	isb	sy
 8011c40:	f3bf 8f4f 	dsb	sy
 8011c44:	60fb      	str	r3, [r7, #12]
}
 8011c46:	bf00      	nop
 8011c48:	bf00      	nop
 8011c4a:	e7fd      	b.n	8011c48 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011c4c:	4b07      	ldr	r3, [pc, #28]	@ (8011c6c <vTaskPlaceOnEventList+0x48>)
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	3318      	adds	r3, #24
 8011c52:	4619      	mov	r1, r3
 8011c54:	6878      	ldr	r0, [r7, #4]
 8011c56:	f7fe fcfc 	bl	8010652 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011c5a:	2101      	movs	r1, #1
 8011c5c:	6838      	ldr	r0, [r7, #0]
 8011c5e:	f000 fa9f 	bl	80121a0 <prvAddCurrentTaskToDelayedList>
}
 8011c62:	bf00      	nop
 8011c64:	3710      	adds	r7, #16
 8011c66:	46bd      	mov	sp, r7
 8011c68:	bd80      	pop	{r7, pc}
 8011c6a:	bf00      	nop
 8011c6c:	20001858 	.word	0x20001858

08011c70 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011c70:	b580      	push	{r7, lr}
 8011c72:	b086      	sub	sp, #24
 8011c74:	af00      	add	r7, sp, #0
 8011c76:	60f8      	str	r0, [r7, #12]
 8011c78:	60b9      	str	r1, [r7, #8]
 8011c7a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d10b      	bne.n	8011c9a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8011c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c86:	f383 8811 	msr	BASEPRI, r3
 8011c8a:	f3bf 8f6f 	isb	sy
 8011c8e:	f3bf 8f4f 	dsb	sy
 8011c92:	617b      	str	r3, [r7, #20]
}
 8011c94:	bf00      	nop
 8011c96:	bf00      	nop
 8011c98:	e7fd      	b.n	8011c96 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8011cc4 <vTaskPlaceOnEventListRestricted+0x54>)
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	3318      	adds	r3, #24
 8011ca0:	4619      	mov	r1, r3
 8011ca2:	68f8      	ldr	r0, [r7, #12]
 8011ca4:	f7fe fcb1 	bl	801060a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d002      	beq.n	8011cb4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8011cae:	f04f 33ff 	mov.w	r3, #4294967295
 8011cb2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011cb4:	6879      	ldr	r1, [r7, #4]
 8011cb6:	68b8      	ldr	r0, [r7, #8]
 8011cb8:	f000 fa72 	bl	80121a0 <prvAddCurrentTaskToDelayedList>
	}
 8011cbc:	bf00      	nop
 8011cbe:	3718      	adds	r7, #24
 8011cc0:	46bd      	mov	sp, r7
 8011cc2:	bd80      	pop	{r7, pc}
 8011cc4:	20001858 	.word	0x20001858

08011cc8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011cc8:	b580      	push	{r7, lr}
 8011cca:	b086      	sub	sp, #24
 8011ccc:	af00      	add	r7, sp, #0
 8011cce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	68db      	ldr	r3, [r3, #12]
 8011cd4:	68db      	ldr	r3, [r3, #12]
 8011cd6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011cd8:	693b      	ldr	r3, [r7, #16]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d10b      	bne.n	8011cf6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8011cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ce2:	f383 8811 	msr	BASEPRI, r3
 8011ce6:	f3bf 8f6f 	isb	sy
 8011cea:	f3bf 8f4f 	dsb	sy
 8011cee:	60fb      	str	r3, [r7, #12]
}
 8011cf0:	bf00      	nop
 8011cf2:	bf00      	nop
 8011cf4:	e7fd      	b.n	8011cf2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011cf6:	693b      	ldr	r3, [r7, #16]
 8011cf8:	3318      	adds	r3, #24
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	f7fe fce2 	bl	80106c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011d00:	4b1d      	ldr	r3, [pc, #116]	@ (8011d78 <xTaskRemoveFromEventList+0xb0>)
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d11c      	bne.n	8011d42 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011d08:	693b      	ldr	r3, [r7, #16]
 8011d0a:	3304      	adds	r3, #4
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	f7fe fcd9 	bl	80106c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011d12:	693b      	ldr	r3, [r7, #16]
 8011d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d16:	2201      	movs	r2, #1
 8011d18:	409a      	lsls	r2, r3
 8011d1a:	4b18      	ldr	r3, [pc, #96]	@ (8011d7c <xTaskRemoveFromEventList+0xb4>)
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	4313      	orrs	r3, r2
 8011d20:	4a16      	ldr	r2, [pc, #88]	@ (8011d7c <xTaskRemoveFromEventList+0xb4>)
 8011d22:	6013      	str	r3, [r2, #0]
 8011d24:	693b      	ldr	r3, [r7, #16]
 8011d26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011d28:	4613      	mov	r3, r2
 8011d2a:	009b      	lsls	r3, r3, #2
 8011d2c:	4413      	add	r3, r2
 8011d2e:	009b      	lsls	r3, r3, #2
 8011d30:	4a13      	ldr	r2, [pc, #76]	@ (8011d80 <xTaskRemoveFromEventList+0xb8>)
 8011d32:	441a      	add	r2, r3
 8011d34:	693b      	ldr	r3, [r7, #16]
 8011d36:	3304      	adds	r3, #4
 8011d38:	4619      	mov	r1, r3
 8011d3a:	4610      	mov	r0, r2
 8011d3c:	f7fe fc65 	bl	801060a <vListInsertEnd>
 8011d40:	e005      	b.n	8011d4e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011d42:	693b      	ldr	r3, [r7, #16]
 8011d44:	3318      	adds	r3, #24
 8011d46:	4619      	mov	r1, r3
 8011d48:	480e      	ldr	r0, [pc, #56]	@ (8011d84 <xTaskRemoveFromEventList+0xbc>)
 8011d4a:	f7fe fc5e 	bl	801060a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011d4e:	693b      	ldr	r3, [r7, #16]
 8011d50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011d52:	4b0d      	ldr	r3, [pc, #52]	@ (8011d88 <xTaskRemoveFromEventList+0xc0>)
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d58:	429a      	cmp	r2, r3
 8011d5a:	d905      	bls.n	8011d68 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011d5c:	2301      	movs	r3, #1
 8011d5e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011d60:	4b0a      	ldr	r3, [pc, #40]	@ (8011d8c <xTaskRemoveFromEventList+0xc4>)
 8011d62:	2201      	movs	r2, #1
 8011d64:	601a      	str	r2, [r3, #0]
 8011d66:	e001      	b.n	8011d6c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8011d68:	2300      	movs	r3, #0
 8011d6a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011d6c:	697b      	ldr	r3, [r7, #20]
}
 8011d6e:	4618      	mov	r0, r3
 8011d70:	3718      	adds	r7, #24
 8011d72:	46bd      	mov	sp, r7
 8011d74:	bd80      	pop	{r7, pc}
 8011d76:	bf00      	nop
 8011d78:	20001980 	.word	0x20001980
 8011d7c:	20001960 	.word	0x20001960
 8011d80:	2000185c 	.word	0x2000185c
 8011d84:	20001918 	.word	0x20001918
 8011d88:	20001858 	.word	0x20001858
 8011d8c:	2000196c 	.word	0x2000196c

08011d90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011d90:	b480      	push	{r7}
 8011d92:	b083      	sub	sp, #12
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011d98:	4b06      	ldr	r3, [pc, #24]	@ (8011db4 <vTaskInternalSetTimeOutState+0x24>)
 8011d9a:	681a      	ldr	r2, [r3, #0]
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011da0:	4b05      	ldr	r3, [pc, #20]	@ (8011db8 <vTaskInternalSetTimeOutState+0x28>)
 8011da2:	681a      	ldr	r2, [r3, #0]
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	605a      	str	r2, [r3, #4]
}
 8011da8:	bf00      	nop
 8011daa:	370c      	adds	r7, #12
 8011dac:	46bd      	mov	sp, r7
 8011dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db2:	4770      	bx	lr
 8011db4:	20001970 	.word	0x20001970
 8011db8:	2000195c 	.word	0x2000195c

08011dbc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011dbc:	b580      	push	{r7, lr}
 8011dbe:	b088      	sub	sp, #32
 8011dc0:	af00      	add	r7, sp, #0
 8011dc2:	6078      	str	r0, [r7, #4]
 8011dc4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d10b      	bne.n	8011de4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8011dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011dd0:	f383 8811 	msr	BASEPRI, r3
 8011dd4:	f3bf 8f6f 	isb	sy
 8011dd8:	f3bf 8f4f 	dsb	sy
 8011ddc:	613b      	str	r3, [r7, #16]
}
 8011dde:	bf00      	nop
 8011de0:	bf00      	nop
 8011de2:	e7fd      	b.n	8011de0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011de4:	683b      	ldr	r3, [r7, #0]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d10b      	bne.n	8011e02 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8011dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011dee:	f383 8811 	msr	BASEPRI, r3
 8011df2:	f3bf 8f6f 	isb	sy
 8011df6:	f3bf 8f4f 	dsb	sy
 8011dfa:	60fb      	str	r3, [r7, #12]
}
 8011dfc:	bf00      	nop
 8011dfe:	bf00      	nop
 8011e00:	e7fd      	b.n	8011dfe <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8011e02:	f000 ff41 	bl	8012c88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011e06:	4b1d      	ldr	r3, [pc, #116]	@ (8011e7c <xTaskCheckForTimeOut+0xc0>)
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	685b      	ldr	r3, [r3, #4]
 8011e10:	69ba      	ldr	r2, [r7, #24]
 8011e12:	1ad3      	subs	r3, r2, r3
 8011e14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011e16:	683b      	ldr	r3, [r7, #0]
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e1e:	d102      	bne.n	8011e26 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011e20:	2300      	movs	r3, #0
 8011e22:	61fb      	str	r3, [r7, #28]
 8011e24:	e023      	b.n	8011e6e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	681a      	ldr	r2, [r3, #0]
 8011e2a:	4b15      	ldr	r3, [pc, #84]	@ (8011e80 <xTaskCheckForTimeOut+0xc4>)
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	429a      	cmp	r2, r3
 8011e30:	d007      	beq.n	8011e42 <xTaskCheckForTimeOut+0x86>
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	685b      	ldr	r3, [r3, #4]
 8011e36:	69ba      	ldr	r2, [r7, #24]
 8011e38:	429a      	cmp	r2, r3
 8011e3a:	d302      	bcc.n	8011e42 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011e3c:	2301      	movs	r3, #1
 8011e3e:	61fb      	str	r3, [r7, #28]
 8011e40:	e015      	b.n	8011e6e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011e42:	683b      	ldr	r3, [r7, #0]
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	697a      	ldr	r2, [r7, #20]
 8011e48:	429a      	cmp	r2, r3
 8011e4a:	d20b      	bcs.n	8011e64 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011e4c:	683b      	ldr	r3, [r7, #0]
 8011e4e:	681a      	ldr	r2, [r3, #0]
 8011e50:	697b      	ldr	r3, [r7, #20]
 8011e52:	1ad2      	subs	r2, r2, r3
 8011e54:	683b      	ldr	r3, [r7, #0]
 8011e56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011e58:	6878      	ldr	r0, [r7, #4]
 8011e5a:	f7ff ff99 	bl	8011d90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011e5e:	2300      	movs	r3, #0
 8011e60:	61fb      	str	r3, [r7, #28]
 8011e62:	e004      	b.n	8011e6e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8011e64:	683b      	ldr	r3, [r7, #0]
 8011e66:	2200      	movs	r2, #0
 8011e68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011e6a:	2301      	movs	r3, #1
 8011e6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011e6e:	f000 ff3d 	bl	8012cec <vPortExitCritical>

	return xReturn;
 8011e72:	69fb      	ldr	r3, [r7, #28]
}
 8011e74:	4618      	mov	r0, r3
 8011e76:	3720      	adds	r7, #32
 8011e78:	46bd      	mov	sp, r7
 8011e7a:	bd80      	pop	{r7, pc}
 8011e7c:	2000195c 	.word	0x2000195c
 8011e80:	20001970 	.word	0x20001970

08011e84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011e84:	b480      	push	{r7}
 8011e86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011e88:	4b03      	ldr	r3, [pc, #12]	@ (8011e98 <vTaskMissedYield+0x14>)
 8011e8a:	2201      	movs	r2, #1
 8011e8c:	601a      	str	r2, [r3, #0]
}
 8011e8e:	bf00      	nop
 8011e90:	46bd      	mov	sp, r7
 8011e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e96:	4770      	bx	lr
 8011e98:	2000196c 	.word	0x2000196c

08011e9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011e9c:	b580      	push	{r7, lr}
 8011e9e:	b082      	sub	sp, #8
 8011ea0:	af00      	add	r7, sp, #0
 8011ea2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011ea4:	f000 f852 	bl	8011f4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011ea8:	4b06      	ldr	r3, [pc, #24]	@ (8011ec4 <prvIdleTask+0x28>)
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	2b01      	cmp	r3, #1
 8011eae:	d9f9      	bls.n	8011ea4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011eb0:	4b05      	ldr	r3, [pc, #20]	@ (8011ec8 <prvIdleTask+0x2c>)
 8011eb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011eb6:	601a      	str	r2, [r3, #0]
 8011eb8:	f3bf 8f4f 	dsb	sy
 8011ebc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011ec0:	e7f0      	b.n	8011ea4 <prvIdleTask+0x8>
 8011ec2:	bf00      	nop
 8011ec4:	2000185c 	.word	0x2000185c
 8011ec8:	e000ed04 	.word	0xe000ed04

08011ecc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011ecc:	b580      	push	{r7, lr}
 8011ece:	b082      	sub	sp, #8
 8011ed0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011ed2:	2300      	movs	r3, #0
 8011ed4:	607b      	str	r3, [r7, #4]
 8011ed6:	e00c      	b.n	8011ef2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011ed8:	687a      	ldr	r2, [r7, #4]
 8011eda:	4613      	mov	r3, r2
 8011edc:	009b      	lsls	r3, r3, #2
 8011ede:	4413      	add	r3, r2
 8011ee0:	009b      	lsls	r3, r3, #2
 8011ee2:	4a12      	ldr	r2, [pc, #72]	@ (8011f2c <prvInitialiseTaskLists+0x60>)
 8011ee4:	4413      	add	r3, r2
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	f7fe fb62 	bl	80105b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	3301      	adds	r3, #1
 8011ef0:	607b      	str	r3, [r7, #4]
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	2b06      	cmp	r3, #6
 8011ef6:	d9ef      	bls.n	8011ed8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011ef8:	480d      	ldr	r0, [pc, #52]	@ (8011f30 <prvInitialiseTaskLists+0x64>)
 8011efa:	f7fe fb59 	bl	80105b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011efe:	480d      	ldr	r0, [pc, #52]	@ (8011f34 <prvInitialiseTaskLists+0x68>)
 8011f00:	f7fe fb56 	bl	80105b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011f04:	480c      	ldr	r0, [pc, #48]	@ (8011f38 <prvInitialiseTaskLists+0x6c>)
 8011f06:	f7fe fb53 	bl	80105b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011f0a:	480c      	ldr	r0, [pc, #48]	@ (8011f3c <prvInitialiseTaskLists+0x70>)
 8011f0c:	f7fe fb50 	bl	80105b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011f10:	480b      	ldr	r0, [pc, #44]	@ (8011f40 <prvInitialiseTaskLists+0x74>)
 8011f12:	f7fe fb4d 	bl	80105b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011f16:	4b0b      	ldr	r3, [pc, #44]	@ (8011f44 <prvInitialiseTaskLists+0x78>)
 8011f18:	4a05      	ldr	r2, [pc, #20]	@ (8011f30 <prvInitialiseTaskLists+0x64>)
 8011f1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8011f48 <prvInitialiseTaskLists+0x7c>)
 8011f1e:	4a05      	ldr	r2, [pc, #20]	@ (8011f34 <prvInitialiseTaskLists+0x68>)
 8011f20:	601a      	str	r2, [r3, #0]
}
 8011f22:	bf00      	nop
 8011f24:	3708      	adds	r7, #8
 8011f26:	46bd      	mov	sp, r7
 8011f28:	bd80      	pop	{r7, pc}
 8011f2a:	bf00      	nop
 8011f2c:	2000185c 	.word	0x2000185c
 8011f30:	200018e8 	.word	0x200018e8
 8011f34:	200018fc 	.word	0x200018fc
 8011f38:	20001918 	.word	0x20001918
 8011f3c:	2000192c 	.word	0x2000192c
 8011f40:	20001944 	.word	0x20001944
 8011f44:	20001910 	.word	0x20001910
 8011f48:	20001914 	.word	0x20001914

08011f4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011f4c:	b580      	push	{r7, lr}
 8011f4e:	b082      	sub	sp, #8
 8011f50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011f52:	e019      	b.n	8011f88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011f54:	f000 fe98 	bl	8012c88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011f58:	4b10      	ldr	r3, [pc, #64]	@ (8011f9c <prvCheckTasksWaitingTermination+0x50>)
 8011f5a:	68db      	ldr	r3, [r3, #12]
 8011f5c:	68db      	ldr	r3, [r3, #12]
 8011f5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	3304      	adds	r3, #4
 8011f64:	4618      	mov	r0, r3
 8011f66:	f7fe fbad 	bl	80106c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8011fa0 <prvCheckTasksWaitingTermination+0x54>)
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	3b01      	subs	r3, #1
 8011f70:	4a0b      	ldr	r2, [pc, #44]	@ (8011fa0 <prvCheckTasksWaitingTermination+0x54>)
 8011f72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011f74:	4b0b      	ldr	r3, [pc, #44]	@ (8011fa4 <prvCheckTasksWaitingTermination+0x58>)
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	3b01      	subs	r3, #1
 8011f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8011fa4 <prvCheckTasksWaitingTermination+0x58>)
 8011f7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011f7e:	f000 feb5 	bl	8012cec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011f82:	6878      	ldr	r0, [r7, #4]
 8011f84:	f000 f810 	bl	8011fa8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011f88:	4b06      	ldr	r3, [pc, #24]	@ (8011fa4 <prvCheckTasksWaitingTermination+0x58>)
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d1e1      	bne.n	8011f54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011f90:	bf00      	nop
 8011f92:	bf00      	nop
 8011f94:	3708      	adds	r7, #8
 8011f96:	46bd      	mov	sp, r7
 8011f98:	bd80      	pop	{r7, pc}
 8011f9a:	bf00      	nop
 8011f9c:	2000192c 	.word	0x2000192c
 8011fa0:	20001958 	.word	0x20001958
 8011fa4:	20001940 	.word	0x20001940

08011fa8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011fa8:	b580      	push	{r7, lr}
 8011faa:	b084      	sub	sp, #16
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	334c      	adds	r3, #76	@ 0x4c
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	f001 fae3 	bl	8013580 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d108      	bne.n	8011fd6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011fc8:	4618      	mov	r0, r3
 8011fca:	f001 f84d 	bl	8013068 <vPortFree>
				vPortFree( pxTCB );
 8011fce:	6878      	ldr	r0, [r7, #4]
 8011fd0:	f001 f84a 	bl	8013068 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011fd4:	e019      	b.n	801200a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8011fdc:	2b01      	cmp	r3, #1
 8011fde:	d103      	bne.n	8011fe8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8011fe0:	6878      	ldr	r0, [r7, #4]
 8011fe2:	f001 f841 	bl	8013068 <vPortFree>
	}
 8011fe6:	e010      	b.n	801200a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8011fee:	2b02      	cmp	r3, #2
 8011ff0:	d00b      	beq.n	801200a <prvDeleteTCB+0x62>
	__asm volatile
 8011ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ff6:	f383 8811 	msr	BASEPRI, r3
 8011ffa:	f3bf 8f6f 	isb	sy
 8011ffe:	f3bf 8f4f 	dsb	sy
 8012002:	60fb      	str	r3, [r7, #12]
}
 8012004:	bf00      	nop
 8012006:	bf00      	nop
 8012008:	e7fd      	b.n	8012006 <prvDeleteTCB+0x5e>
	}
 801200a:	bf00      	nop
 801200c:	3710      	adds	r7, #16
 801200e:	46bd      	mov	sp, r7
 8012010:	bd80      	pop	{r7, pc}
	...

08012014 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012014:	b480      	push	{r7}
 8012016:	b083      	sub	sp, #12
 8012018:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801201a:	4b0c      	ldr	r3, [pc, #48]	@ (801204c <prvResetNextTaskUnblockTime+0x38>)
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	2b00      	cmp	r3, #0
 8012022:	d104      	bne.n	801202e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012024:	4b0a      	ldr	r3, [pc, #40]	@ (8012050 <prvResetNextTaskUnblockTime+0x3c>)
 8012026:	f04f 32ff 	mov.w	r2, #4294967295
 801202a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801202c:	e008      	b.n	8012040 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801202e:	4b07      	ldr	r3, [pc, #28]	@ (801204c <prvResetNextTaskUnblockTime+0x38>)
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	68db      	ldr	r3, [r3, #12]
 8012034:	68db      	ldr	r3, [r3, #12]
 8012036:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	685b      	ldr	r3, [r3, #4]
 801203c:	4a04      	ldr	r2, [pc, #16]	@ (8012050 <prvResetNextTaskUnblockTime+0x3c>)
 801203e:	6013      	str	r3, [r2, #0]
}
 8012040:	bf00      	nop
 8012042:	370c      	adds	r7, #12
 8012044:	46bd      	mov	sp, r7
 8012046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801204a:	4770      	bx	lr
 801204c:	20001910 	.word	0x20001910
 8012050:	20001978 	.word	0x20001978

08012054 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012054:	b480      	push	{r7}
 8012056:	b083      	sub	sp, #12
 8012058:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801205a:	4b0b      	ldr	r3, [pc, #44]	@ (8012088 <xTaskGetSchedulerState+0x34>)
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	2b00      	cmp	r3, #0
 8012060:	d102      	bne.n	8012068 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012062:	2301      	movs	r3, #1
 8012064:	607b      	str	r3, [r7, #4]
 8012066:	e008      	b.n	801207a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012068:	4b08      	ldr	r3, [pc, #32]	@ (801208c <xTaskGetSchedulerState+0x38>)
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d102      	bne.n	8012076 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012070:	2302      	movs	r3, #2
 8012072:	607b      	str	r3, [r7, #4]
 8012074:	e001      	b.n	801207a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012076:	2300      	movs	r3, #0
 8012078:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801207a:	687b      	ldr	r3, [r7, #4]
	}
 801207c:	4618      	mov	r0, r3
 801207e:	370c      	adds	r7, #12
 8012080:	46bd      	mov	sp, r7
 8012082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012086:	4770      	bx	lr
 8012088:	20001964 	.word	0x20001964
 801208c:	20001980 	.word	0x20001980

08012090 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012090:	b580      	push	{r7, lr}
 8012092:	b086      	sub	sp, #24
 8012094:	af00      	add	r7, sp, #0
 8012096:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801209c:	2300      	movs	r3, #0
 801209e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d070      	beq.n	8012188 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80120a6:	4b3b      	ldr	r3, [pc, #236]	@ (8012194 <xTaskPriorityDisinherit+0x104>)
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	693a      	ldr	r2, [r7, #16]
 80120ac:	429a      	cmp	r2, r3
 80120ae:	d00b      	beq.n	80120c8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80120b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120b4:	f383 8811 	msr	BASEPRI, r3
 80120b8:	f3bf 8f6f 	isb	sy
 80120bc:	f3bf 8f4f 	dsb	sy
 80120c0:	60fb      	str	r3, [r7, #12]
}
 80120c2:	bf00      	nop
 80120c4:	bf00      	nop
 80120c6:	e7fd      	b.n	80120c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80120c8:	693b      	ldr	r3, [r7, #16]
 80120ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d10b      	bne.n	80120e8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80120d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120d4:	f383 8811 	msr	BASEPRI, r3
 80120d8:	f3bf 8f6f 	isb	sy
 80120dc:	f3bf 8f4f 	dsb	sy
 80120e0:	60bb      	str	r3, [r7, #8]
}
 80120e2:	bf00      	nop
 80120e4:	bf00      	nop
 80120e6:	e7fd      	b.n	80120e4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80120e8:	693b      	ldr	r3, [r7, #16]
 80120ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80120ec:	1e5a      	subs	r2, r3, #1
 80120ee:	693b      	ldr	r3, [r7, #16]
 80120f0:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80120f2:	693b      	ldr	r3, [r7, #16]
 80120f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80120f6:	693b      	ldr	r3, [r7, #16]
 80120f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80120fa:	429a      	cmp	r2, r3
 80120fc:	d044      	beq.n	8012188 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80120fe:	693b      	ldr	r3, [r7, #16]
 8012100:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012102:	2b00      	cmp	r3, #0
 8012104:	d140      	bne.n	8012188 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012106:	693b      	ldr	r3, [r7, #16]
 8012108:	3304      	adds	r3, #4
 801210a:	4618      	mov	r0, r3
 801210c:	f7fe fada 	bl	80106c4 <uxListRemove>
 8012110:	4603      	mov	r3, r0
 8012112:	2b00      	cmp	r3, #0
 8012114:	d115      	bne.n	8012142 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012116:	693b      	ldr	r3, [r7, #16]
 8012118:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801211a:	491f      	ldr	r1, [pc, #124]	@ (8012198 <xTaskPriorityDisinherit+0x108>)
 801211c:	4613      	mov	r3, r2
 801211e:	009b      	lsls	r3, r3, #2
 8012120:	4413      	add	r3, r2
 8012122:	009b      	lsls	r3, r3, #2
 8012124:	440b      	add	r3, r1
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	2b00      	cmp	r3, #0
 801212a:	d10a      	bne.n	8012142 <xTaskPriorityDisinherit+0xb2>
 801212c:	693b      	ldr	r3, [r7, #16]
 801212e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012130:	2201      	movs	r2, #1
 8012132:	fa02 f303 	lsl.w	r3, r2, r3
 8012136:	43da      	mvns	r2, r3
 8012138:	4b18      	ldr	r3, [pc, #96]	@ (801219c <xTaskPriorityDisinherit+0x10c>)
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	4013      	ands	r3, r2
 801213e:	4a17      	ldr	r2, [pc, #92]	@ (801219c <xTaskPriorityDisinherit+0x10c>)
 8012140:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012142:	693b      	ldr	r3, [r7, #16]
 8012144:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012146:	693b      	ldr	r3, [r7, #16]
 8012148:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801214a:	693b      	ldr	r3, [r7, #16]
 801214c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801214e:	f1c3 0207 	rsb	r2, r3, #7
 8012152:	693b      	ldr	r3, [r7, #16]
 8012154:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012156:	693b      	ldr	r3, [r7, #16]
 8012158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801215a:	2201      	movs	r2, #1
 801215c:	409a      	lsls	r2, r3
 801215e:	4b0f      	ldr	r3, [pc, #60]	@ (801219c <xTaskPriorityDisinherit+0x10c>)
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	4313      	orrs	r3, r2
 8012164:	4a0d      	ldr	r2, [pc, #52]	@ (801219c <xTaskPriorityDisinherit+0x10c>)
 8012166:	6013      	str	r3, [r2, #0]
 8012168:	693b      	ldr	r3, [r7, #16]
 801216a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801216c:	4613      	mov	r3, r2
 801216e:	009b      	lsls	r3, r3, #2
 8012170:	4413      	add	r3, r2
 8012172:	009b      	lsls	r3, r3, #2
 8012174:	4a08      	ldr	r2, [pc, #32]	@ (8012198 <xTaskPriorityDisinherit+0x108>)
 8012176:	441a      	add	r2, r3
 8012178:	693b      	ldr	r3, [r7, #16]
 801217a:	3304      	adds	r3, #4
 801217c:	4619      	mov	r1, r3
 801217e:	4610      	mov	r0, r2
 8012180:	f7fe fa43 	bl	801060a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012184:	2301      	movs	r3, #1
 8012186:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012188:	697b      	ldr	r3, [r7, #20]
	}
 801218a:	4618      	mov	r0, r3
 801218c:	3718      	adds	r7, #24
 801218e:	46bd      	mov	sp, r7
 8012190:	bd80      	pop	{r7, pc}
 8012192:	bf00      	nop
 8012194:	20001858 	.word	0x20001858
 8012198:	2000185c 	.word	0x2000185c
 801219c:	20001960 	.word	0x20001960

080121a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80121a0:	b580      	push	{r7, lr}
 80121a2:	b084      	sub	sp, #16
 80121a4:	af00      	add	r7, sp, #0
 80121a6:	6078      	str	r0, [r7, #4]
 80121a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80121aa:	4b29      	ldr	r3, [pc, #164]	@ (8012250 <prvAddCurrentTaskToDelayedList+0xb0>)
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80121b0:	4b28      	ldr	r3, [pc, #160]	@ (8012254 <prvAddCurrentTaskToDelayedList+0xb4>)
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	3304      	adds	r3, #4
 80121b6:	4618      	mov	r0, r3
 80121b8:	f7fe fa84 	bl	80106c4 <uxListRemove>
 80121bc:	4603      	mov	r3, r0
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d10b      	bne.n	80121da <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80121c2:	4b24      	ldr	r3, [pc, #144]	@ (8012254 <prvAddCurrentTaskToDelayedList+0xb4>)
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80121c8:	2201      	movs	r2, #1
 80121ca:	fa02 f303 	lsl.w	r3, r2, r3
 80121ce:	43da      	mvns	r2, r3
 80121d0:	4b21      	ldr	r3, [pc, #132]	@ (8012258 <prvAddCurrentTaskToDelayedList+0xb8>)
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	4013      	ands	r3, r2
 80121d6:	4a20      	ldr	r2, [pc, #128]	@ (8012258 <prvAddCurrentTaskToDelayedList+0xb8>)
 80121d8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121e0:	d10a      	bne.n	80121f8 <prvAddCurrentTaskToDelayedList+0x58>
 80121e2:	683b      	ldr	r3, [r7, #0]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d007      	beq.n	80121f8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80121e8:	4b1a      	ldr	r3, [pc, #104]	@ (8012254 <prvAddCurrentTaskToDelayedList+0xb4>)
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	3304      	adds	r3, #4
 80121ee:	4619      	mov	r1, r3
 80121f0:	481a      	ldr	r0, [pc, #104]	@ (801225c <prvAddCurrentTaskToDelayedList+0xbc>)
 80121f2:	f7fe fa0a 	bl	801060a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80121f6:	e026      	b.n	8012246 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80121f8:	68fa      	ldr	r2, [r7, #12]
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	4413      	add	r3, r2
 80121fe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012200:	4b14      	ldr	r3, [pc, #80]	@ (8012254 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	68ba      	ldr	r2, [r7, #8]
 8012206:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012208:	68ba      	ldr	r2, [r7, #8]
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	429a      	cmp	r2, r3
 801220e:	d209      	bcs.n	8012224 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012210:	4b13      	ldr	r3, [pc, #76]	@ (8012260 <prvAddCurrentTaskToDelayedList+0xc0>)
 8012212:	681a      	ldr	r2, [r3, #0]
 8012214:	4b0f      	ldr	r3, [pc, #60]	@ (8012254 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	3304      	adds	r3, #4
 801221a:	4619      	mov	r1, r3
 801221c:	4610      	mov	r0, r2
 801221e:	f7fe fa18 	bl	8010652 <vListInsert>
}
 8012222:	e010      	b.n	8012246 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012224:	4b0f      	ldr	r3, [pc, #60]	@ (8012264 <prvAddCurrentTaskToDelayedList+0xc4>)
 8012226:	681a      	ldr	r2, [r3, #0]
 8012228:	4b0a      	ldr	r3, [pc, #40]	@ (8012254 <prvAddCurrentTaskToDelayedList+0xb4>)
 801222a:	681b      	ldr	r3, [r3, #0]
 801222c:	3304      	adds	r3, #4
 801222e:	4619      	mov	r1, r3
 8012230:	4610      	mov	r0, r2
 8012232:	f7fe fa0e 	bl	8010652 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012236:	4b0c      	ldr	r3, [pc, #48]	@ (8012268 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	68ba      	ldr	r2, [r7, #8]
 801223c:	429a      	cmp	r2, r3
 801223e:	d202      	bcs.n	8012246 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8012240:	4a09      	ldr	r2, [pc, #36]	@ (8012268 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012242:	68bb      	ldr	r3, [r7, #8]
 8012244:	6013      	str	r3, [r2, #0]
}
 8012246:	bf00      	nop
 8012248:	3710      	adds	r7, #16
 801224a:	46bd      	mov	sp, r7
 801224c:	bd80      	pop	{r7, pc}
 801224e:	bf00      	nop
 8012250:	2000195c 	.word	0x2000195c
 8012254:	20001858 	.word	0x20001858
 8012258:	20001960 	.word	0x20001960
 801225c:	20001944 	.word	0x20001944
 8012260:	20001914 	.word	0x20001914
 8012264:	20001910 	.word	0x20001910
 8012268:	20001978 	.word	0x20001978

0801226c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801226c:	b580      	push	{r7, lr}
 801226e:	b08a      	sub	sp, #40	@ 0x28
 8012270:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8012272:	2300      	movs	r3, #0
 8012274:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8012276:	f000 fb95 	bl	80129a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801227a:	4b1d      	ldr	r3, [pc, #116]	@ (80122f0 <xTimerCreateTimerTask+0x84>)
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	2b00      	cmp	r3, #0
 8012280:	d021      	beq.n	80122c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8012282:	2300      	movs	r3, #0
 8012284:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8012286:	2300      	movs	r3, #0
 8012288:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801228a:	1d3a      	adds	r2, r7, #4
 801228c:	f107 0108 	add.w	r1, r7, #8
 8012290:	f107 030c 	add.w	r3, r7, #12
 8012294:	4618      	mov	r0, r3
 8012296:	f7ee fe9f 	bl	8000fd8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801229a:	6879      	ldr	r1, [r7, #4]
 801229c:	68bb      	ldr	r3, [r7, #8]
 801229e:	68fa      	ldr	r2, [r7, #12]
 80122a0:	9202      	str	r2, [sp, #8]
 80122a2:	9301      	str	r3, [sp, #4]
 80122a4:	2306      	movs	r3, #6
 80122a6:	9300      	str	r3, [sp, #0]
 80122a8:	2300      	movs	r3, #0
 80122aa:	460a      	mov	r2, r1
 80122ac:	4911      	ldr	r1, [pc, #68]	@ (80122f4 <xTimerCreateTimerTask+0x88>)
 80122ae:	4812      	ldr	r0, [pc, #72]	@ (80122f8 <xTimerCreateTimerTask+0x8c>)
 80122b0:	f7fe ff64 	bl	801117c <xTaskCreateStatic>
 80122b4:	4603      	mov	r3, r0
 80122b6:	4a11      	ldr	r2, [pc, #68]	@ (80122fc <xTimerCreateTimerTask+0x90>)
 80122b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80122ba:	4b10      	ldr	r3, [pc, #64]	@ (80122fc <xTimerCreateTimerTask+0x90>)
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d001      	beq.n	80122c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80122c2:	2301      	movs	r3, #1
 80122c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80122c6:	697b      	ldr	r3, [r7, #20]
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d10b      	bne.n	80122e4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80122cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122d0:	f383 8811 	msr	BASEPRI, r3
 80122d4:	f3bf 8f6f 	isb	sy
 80122d8:	f3bf 8f4f 	dsb	sy
 80122dc:	613b      	str	r3, [r7, #16]
}
 80122de:	bf00      	nop
 80122e0:	bf00      	nop
 80122e2:	e7fd      	b.n	80122e0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80122e4:	697b      	ldr	r3, [r7, #20]
}
 80122e6:	4618      	mov	r0, r3
 80122e8:	3718      	adds	r7, #24
 80122ea:	46bd      	mov	sp, r7
 80122ec:	bd80      	pop	{r7, pc}
 80122ee:	bf00      	nop
 80122f0:	200019b4 	.word	0x200019b4
 80122f4:	080141bc 	.word	0x080141bc
 80122f8:	08012575 	.word	0x08012575
 80122fc:	200019b8 	.word	0x200019b8

08012300 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8012300:	b580      	push	{r7, lr}
 8012302:	b088      	sub	sp, #32
 8012304:	af02      	add	r7, sp, #8
 8012306:	60f8      	str	r0, [r7, #12]
 8012308:	60b9      	str	r1, [r7, #8]
 801230a:	607a      	str	r2, [r7, #4]
 801230c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 801230e:	2028      	movs	r0, #40	@ 0x28
 8012310:	f000 fddc 	bl	8012ecc <pvPortMalloc>
 8012314:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8012316:	697b      	ldr	r3, [r7, #20]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d00d      	beq.n	8012338 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 801231c:	697b      	ldr	r3, [r7, #20]
 801231e:	2200      	movs	r2, #0
 8012320:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8012324:	697b      	ldr	r3, [r7, #20]
 8012326:	9301      	str	r3, [sp, #4]
 8012328:	6a3b      	ldr	r3, [r7, #32]
 801232a:	9300      	str	r3, [sp, #0]
 801232c:	683b      	ldr	r3, [r7, #0]
 801232e:	687a      	ldr	r2, [r7, #4]
 8012330:	68b9      	ldr	r1, [r7, #8]
 8012332:	68f8      	ldr	r0, [r7, #12]
 8012334:	f000 f845 	bl	80123c2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8012338:	697b      	ldr	r3, [r7, #20]
	}
 801233a:	4618      	mov	r0, r3
 801233c:	3718      	adds	r7, #24
 801233e:	46bd      	mov	sp, r7
 8012340:	bd80      	pop	{r7, pc}

08012342 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8012342:	b580      	push	{r7, lr}
 8012344:	b08a      	sub	sp, #40	@ 0x28
 8012346:	af02      	add	r7, sp, #8
 8012348:	60f8      	str	r0, [r7, #12]
 801234a:	60b9      	str	r1, [r7, #8]
 801234c:	607a      	str	r2, [r7, #4]
 801234e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8012350:	2328      	movs	r3, #40	@ 0x28
 8012352:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8012354:	693b      	ldr	r3, [r7, #16]
 8012356:	2b28      	cmp	r3, #40	@ 0x28
 8012358:	d00b      	beq.n	8012372 <xTimerCreateStatic+0x30>
	__asm volatile
 801235a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801235e:	f383 8811 	msr	BASEPRI, r3
 8012362:	f3bf 8f6f 	isb	sy
 8012366:	f3bf 8f4f 	dsb	sy
 801236a:	61bb      	str	r3, [r7, #24]
}
 801236c:	bf00      	nop
 801236e:	bf00      	nop
 8012370:	e7fd      	b.n	801236e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012372:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8012374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012376:	2b00      	cmp	r3, #0
 8012378:	d10b      	bne.n	8012392 <xTimerCreateStatic+0x50>
	__asm volatile
 801237a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801237e:	f383 8811 	msr	BASEPRI, r3
 8012382:	f3bf 8f6f 	isb	sy
 8012386:	f3bf 8f4f 	dsb	sy
 801238a:	617b      	str	r3, [r7, #20]
}
 801238c:	bf00      	nop
 801238e:	bf00      	nop
 8012390:	e7fd      	b.n	801238e <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8012392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012394:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8012396:	69fb      	ldr	r3, [r7, #28]
 8012398:	2b00      	cmp	r3, #0
 801239a:	d00d      	beq.n	80123b8 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 801239c:	69fb      	ldr	r3, [r7, #28]
 801239e:	2202      	movs	r2, #2
 80123a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80123a4:	69fb      	ldr	r3, [r7, #28]
 80123a6:	9301      	str	r3, [sp, #4]
 80123a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123aa:	9300      	str	r3, [sp, #0]
 80123ac:	683b      	ldr	r3, [r7, #0]
 80123ae:	687a      	ldr	r2, [r7, #4]
 80123b0:	68b9      	ldr	r1, [r7, #8]
 80123b2:	68f8      	ldr	r0, [r7, #12]
 80123b4:	f000 f805 	bl	80123c2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80123b8:	69fb      	ldr	r3, [r7, #28]
	}
 80123ba:	4618      	mov	r0, r3
 80123bc:	3720      	adds	r7, #32
 80123be:	46bd      	mov	sp, r7
 80123c0:	bd80      	pop	{r7, pc}

080123c2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80123c2:	b580      	push	{r7, lr}
 80123c4:	b086      	sub	sp, #24
 80123c6:	af00      	add	r7, sp, #0
 80123c8:	60f8      	str	r0, [r7, #12]
 80123ca:	60b9      	str	r1, [r7, #8]
 80123cc:	607a      	str	r2, [r7, #4]
 80123ce:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80123d0:	68bb      	ldr	r3, [r7, #8]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d10b      	bne.n	80123ee <prvInitialiseNewTimer+0x2c>
	__asm volatile
 80123d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80123da:	f383 8811 	msr	BASEPRI, r3
 80123de:	f3bf 8f6f 	isb	sy
 80123e2:	f3bf 8f4f 	dsb	sy
 80123e6:	617b      	str	r3, [r7, #20]
}
 80123e8:	bf00      	nop
 80123ea:	bf00      	nop
 80123ec:	e7fd      	b.n	80123ea <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80123ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d01e      	beq.n	8012432 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80123f4:	f000 fad6 	bl	80129a4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80123f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123fa:	68fa      	ldr	r2, [r7, #12]
 80123fc:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80123fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012400:	68ba      	ldr	r2, [r7, #8]
 8012402:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8012404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012406:	683a      	ldr	r2, [r7, #0]
 8012408:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 801240a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801240c:	6a3a      	ldr	r2, [r7, #32]
 801240e:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8012410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012412:	3304      	adds	r3, #4
 8012414:	4618      	mov	r0, r3
 8012416:	f7fe f8eb 	bl	80105f0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	2b00      	cmp	r3, #0
 801241e:	d008      	beq.n	8012432 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8012420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012422:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8012426:	f043 0304 	orr.w	r3, r3, #4
 801242a:	b2da      	uxtb	r2, r3
 801242c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801242e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8012432:	bf00      	nop
 8012434:	3718      	adds	r7, #24
 8012436:	46bd      	mov	sp, r7
 8012438:	bd80      	pop	{r7, pc}
	...

0801243c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801243c:	b580      	push	{r7, lr}
 801243e:	b08a      	sub	sp, #40	@ 0x28
 8012440:	af00      	add	r7, sp, #0
 8012442:	60f8      	str	r0, [r7, #12]
 8012444:	60b9      	str	r1, [r7, #8]
 8012446:	607a      	str	r2, [r7, #4]
 8012448:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801244a:	2300      	movs	r3, #0
 801244c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	2b00      	cmp	r3, #0
 8012452:	d10b      	bne.n	801246c <xTimerGenericCommand+0x30>
	__asm volatile
 8012454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012458:	f383 8811 	msr	BASEPRI, r3
 801245c:	f3bf 8f6f 	isb	sy
 8012460:	f3bf 8f4f 	dsb	sy
 8012464:	623b      	str	r3, [r7, #32]
}
 8012466:	bf00      	nop
 8012468:	bf00      	nop
 801246a:	e7fd      	b.n	8012468 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801246c:	4b19      	ldr	r3, [pc, #100]	@ (80124d4 <xTimerGenericCommand+0x98>)
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	2b00      	cmp	r3, #0
 8012472:	d02a      	beq.n	80124ca <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8012474:	68bb      	ldr	r3, [r7, #8]
 8012476:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012480:	68bb      	ldr	r3, [r7, #8]
 8012482:	2b05      	cmp	r3, #5
 8012484:	dc18      	bgt.n	80124b8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012486:	f7ff fde5 	bl	8012054 <xTaskGetSchedulerState>
 801248a:	4603      	mov	r3, r0
 801248c:	2b02      	cmp	r3, #2
 801248e:	d109      	bne.n	80124a4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012490:	4b10      	ldr	r3, [pc, #64]	@ (80124d4 <xTimerGenericCommand+0x98>)
 8012492:	6818      	ldr	r0, [r3, #0]
 8012494:	f107 0114 	add.w	r1, r7, #20
 8012498:	2300      	movs	r3, #0
 801249a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801249c:	f7fe fa7e 	bl	801099c <xQueueGenericSend>
 80124a0:	6278      	str	r0, [r7, #36]	@ 0x24
 80124a2:	e012      	b.n	80124ca <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80124a4:	4b0b      	ldr	r3, [pc, #44]	@ (80124d4 <xTimerGenericCommand+0x98>)
 80124a6:	6818      	ldr	r0, [r3, #0]
 80124a8:	f107 0114 	add.w	r1, r7, #20
 80124ac:	2300      	movs	r3, #0
 80124ae:	2200      	movs	r2, #0
 80124b0:	f7fe fa74 	bl	801099c <xQueueGenericSend>
 80124b4:	6278      	str	r0, [r7, #36]	@ 0x24
 80124b6:	e008      	b.n	80124ca <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80124b8:	4b06      	ldr	r3, [pc, #24]	@ (80124d4 <xTimerGenericCommand+0x98>)
 80124ba:	6818      	ldr	r0, [r3, #0]
 80124bc:	f107 0114 	add.w	r1, r7, #20
 80124c0:	2300      	movs	r3, #0
 80124c2:	683a      	ldr	r2, [r7, #0]
 80124c4:	f7fe fb6c 	bl	8010ba0 <xQueueGenericSendFromISR>
 80124c8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80124ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80124cc:	4618      	mov	r0, r3
 80124ce:	3728      	adds	r7, #40	@ 0x28
 80124d0:	46bd      	mov	sp, r7
 80124d2:	bd80      	pop	{r7, pc}
 80124d4:	200019b4 	.word	0x200019b4

080124d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80124d8:	b580      	push	{r7, lr}
 80124da:	b088      	sub	sp, #32
 80124dc:	af02      	add	r7, sp, #8
 80124de:	6078      	str	r0, [r7, #4]
 80124e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80124e2:	4b23      	ldr	r3, [pc, #140]	@ (8012570 <prvProcessExpiredTimer+0x98>)
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	68db      	ldr	r3, [r3, #12]
 80124e8:	68db      	ldr	r3, [r3, #12]
 80124ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80124ec:	697b      	ldr	r3, [r7, #20]
 80124ee:	3304      	adds	r3, #4
 80124f0:	4618      	mov	r0, r3
 80124f2:	f7fe f8e7 	bl	80106c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80124f6:	697b      	ldr	r3, [r7, #20]
 80124f8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80124fc:	f003 0304 	and.w	r3, r3, #4
 8012500:	2b00      	cmp	r3, #0
 8012502:	d023      	beq.n	801254c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012504:	697b      	ldr	r3, [r7, #20]
 8012506:	699a      	ldr	r2, [r3, #24]
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	18d1      	adds	r1, r2, r3
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	683a      	ldr	r2, [r7, #0]
 8012510:	6978      	ldr	r0, [r7, #20]
 8012512:	f000 f8d5 	bl	80126c0 <prvInsertTimerInActiveList>
 8012516:	4603      	mov	r3, r0
 8012518:	2b00      	cmp	r3, #0
 801251a:	d020      	beq.n	801255e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801251c:	2300      	movs	r3, #0
 801251e:	9300      	str	r3, [sp, #0]
 8012520:	2300      	movs	r3, #0
 8012522:	687a      	ldr	r2, [r7, #4]
 8012524:	2100      	movs	r1, #0
 8012526:	6978      	ldr	r0, [r7, #20]
 8012528:	f7ff ff88 	bl	801243c <xTimerGenericCommand>
 801252c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801252e:	693b      	ldr	r3, [r7, #16]
 8012530:	2b00      	cmp	r3, #0
 8012532:	d114      	bne.n	801255e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8012534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012538:	f383 8811 	msr	BASEPRI, r3
 801253c:	f3bf 8f6f 	isb	sy
 8012540:	f3bf 8f4f 	dsb	sy
 8012544:	60fb      	str	r3, [r7, #12]
}
 8012546:	bf00      	nop
 8012548:	bf00      	nop
 801254a:	e7fd      	b.n	8012548 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801254c:	697b      	ldr	r3, [r7, #20]
 801254e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8012552:	f023 0301 	bic.w	r3, r3, #1
 8012556:	b2da      	uxtb	r2, r3
 8012558:	697b      	ldr	r3, [r7, #20]
 801255a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801255e:	697b      	ldr	r3, [r7, #20]
 8012560:	6a1b      	ldr	r3, [r3, #32]
 8012562:	6978      	ldr	r0, [r7, #20]
 8012564:	4798      	blx	r3
}
 8012566:	bf00      	nop
 8012568:	3718      	adds	r7, #24
 801256a:	46bd      	mov	sp, r7
 801256c:	bd80      	pop	{r7, pc}
 801256e:	bf00      	nop
 8012570:	200019ac 	.word	0x200019ac

08012574 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8012574:	b580      	push	{r7, lr}
 8012576:	b084      	sub	sp, #16
 8012578:	af00      	add	r7, sp, #0
 801257a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801257c:	f107 0308 	add.w	r3, r7, #8
 8012580:	4618      	mov	r0, r3
 8012582:	f000 f859 	bl	8012638 <prvGetNextExpireTime>
 8012586:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012588:	68bb      	ldr	r3, [r7, #8]
 801258a:	4619      	mov	r1, r3
 801258c:	68f8      	ldr	r0, [r7, #12]
 801258e:	f000 f805 	bl	801259c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8012592:	f000 f8d7 	bl	8012744 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012596:	bf00      	nop
 8012598:	e7f0      	b.n	801257c <prvTimerTask+0x8>
	...

0801259c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801259c:	b580      	push	{r7, lr}
 801259e:	b084      	sub	sp, #16
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	6078      	str	r0, [r7, #4]
 80125a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80125a6:	f7ff f963 	bl	8011870 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80125aa:	f107 0308 	add.w	r3, r7, #8
 80125ae:	4618      	mov	r0, r3
 80125b0:	f000 f866 	bl	8012680 <prvSampleTimeNow>
 80125b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80125b6:	68bb      	ldr	r3, [r7, #8]
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d130      	bne.n	801261e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80125bc:	683b      	ldr	r3, [r7, #0]
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d10a      	bne.n	80125d8 <prvProcessTimerOrBlockTask+0x3c>
 80125c2:	687a      	ldr	r2, [r7, #4]
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	429a      	cmp	r2, r3
 80125c8:	d806      	bhi.n	80125d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80125ca:	f7ff f95f 	bl	801188c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80125ce:	68f9      	ldr	r1, [r7, #12]
 80125d0:	6878      	ldr	r0, [r7, #4]
 80125d2:	f7ff ff81 	bl	80124d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80125d6:	e024      	b.n	8012622 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80125d8:	683b      	ldr	r3, [r7, #0]
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d008      	beq.n	80125f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80125de:	4b13      	ldr	r3, [pc, #76]	@ (801262c <prvProcessTimerOrBlockTask+0x90>)
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d101      	bne.n	80125ec <prvProcessTimerOrBlockTask+0x50>
 80125e8:	2301      	movs	r3, #1
 80125ea:	e000      	b.n	80125ee <prvProcessTimerOrBlockTask+0x52>
 80125ec:	2300      	movs	r3, #0
 80125ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80125f0:	4b0f      	ldr	r3, [pc, #60]	@ (8012630 <prvProcessTimerOrBlockTask+0x94>)
 80125f2:	6818      	ldr	r0, [r3, #0]
 80125f4:	687a      	ldr	r2, [r7, #4]
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	1ad3      	subs	r3, r2, r3
 80125fa:	683a      	ldr	r2, [r7, #0]
 80125fc:	4619      	mov	r1, r3
 80125fe:	f7fe fd89 	bl	8011114 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8012602:	f7ff f943 	bl	801188c <xTaskResumeAll>
 8012606:	4603      	mov	r3, r0
 8012608:	2b00      	cmp	r3, #0
 801260a:	d10a      	bne.n	8012622 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801260c:	4b09      	ldr	r3, [pc, #36]	@ (8012634 <prvProcessTimerOrBlockTask+0x98>)
 801260e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012612:	601a      	str	r2, [r3, #0]
 8012614:	f3bf 8f4f 	dsb	sy
 8012618:	f3bf 8f6f 	isb	sy
}
 801261c:	e001      	b.n	8012622 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801261e:	f7ff f935 	bl	801188c <xTaskResumeAll>
}
 8012622:	bf00      	nop
 8012624:	3710      	adds	r7, #16
 8012626:	46bd      	mov	sp, r7
 8012628:	bd80      	pop	{r7, pc}
 801262a:	bf00      	nop
 801262c:	200019b0 	.word	0x200019b0
 8012630:	200019b4 	.word	0x200019b4
 8012634:	e000ed04 	.word	0xe000ed04

08012638 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012638:	b480      	push	{r7}
 801263a:	b085      	sub	sp, #20
 801263c:	af00      	add	r7, sp, #0
 801263e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012640:	4b0e      	ldr	r3, [pc, #56]	@ (801267c <prvGetNextExpireTime+0x44>)
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	2b00      	cmp	r3, #0
 8012648:	d101      	bne.n	801264e <prvGetNextExpireTime+0x16>
 801264a:	2201      	movs	r2, #1
 801264c:	e000      	b.n	8012650 <prvGetNextExpireTime+0x18>
 801264e:	2200      	movs	r2, #0
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	2b00      	cmp	r3, #0
 801265a:	d105      	bne.n	8012668 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801265c:	4b07      	ldr	r3, [pc, #28]	@ (801267c <prvGetNextExpireTime+0x44>)
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	68db      	ldr	r3, [r3, #12]
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	60fb      	str	r3, [r7, #12]
 8012666:	e001      	b.n	801266c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012668:	2300      	movs	r3, #0
 801266a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801266c:	68fb      	ldr	r3, [r7, #12]
}
 801266e:	4618      	mov	r0, r3
 8012670:	3714      	adds	r7, #20
 8012672:	46bd      	mov	sp, r7
 8012674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012678:	4770      	bx	lr
 801267a:	bf00      	nop
 801267c:	200019ac 	.word	0x200019ac

08012680 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012680:	b580      	push	{r7, lr}
 8012682:	b084      	sub	sp, #16
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012688:	f7ff f99e 	bl	80119c8 <xTaskGetTickCount>
 801268c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801268e:	4b0b      	ldr	r3, [pc, #44]	@ (80126bc <prvSampleTimeNow+0x3c>)
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	68fa      	ldr	r2, [r7, #12]
 8012694:	429a      	cmp	r2, r3
 8012696:	d205      	bcs.n	80126a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012698:	f000 f91e 	bl	80128d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	2201      	movs	r2, #1
 80126a0:	601a      	str	r2, [r3, #0]
 80126a2:	e002      	b.n	80126aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	2200      	movs	r2, #0
 80126a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80126aa:	4a04      	ldr	r2, [pc, #16]	@ (80126bc <prvSampleTimeNow+0x3c>)
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80126b0:	68fb      	ldr	r3, [r7, #12]
}
 80126b2:	4618      	mov	r0, r3
 80126b4:	3710      	adds	r7, #16
 80126b6:	46bd      	mov	sp, r7
 80126b8:	bd80      	pop	{r7, pc}
 80126ba:	bf00      	nop
 80126bc:	200019bc 	.word	0x200019bc

080126c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80126c0:	b580      	push	{r7, lr}
 80126c2:	b086      	sub	sp, #24
 80126c4:	af00      	add	r7, sp, #0
 80126c6:	60f8      	str	r0, [r7, #12]
 80126c8:	60b9      	str	r1, [r7, #8]
 80126ca:	607a      	str	r2, [r7, #4]
 80126cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80126ce:	2300      	movs	r3, #0
 80126d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	68ba      	ldr	r2, [r7, #8]
 80126d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	68fa      	ldr	r2, [r7, #12]
 80126dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80126de:	68ba      	ldr	r2, [r7, #8]
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	429a      	cmp	r2, r3
 80126e4:	d812      	bhi.n	801270c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80126e6:	687a      	ldr	r2, [r7, #4]
 80126e8:	683b      	ldr	r3, [r7, #0]
 80126ea:	1ad2      	subs	r2, r2, r3
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	699b      	ldr	r3, [r3, #24]
 80126f0:	429a      	cmp	r2, r3
 80126f2:	d302      	bcc.n	80126fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80126f4:	2301      	movs	r3, #1
 80126f6:	617b      	str	r3, [r7, #20]
 80126f8:	e01b      	b.n	8012732 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80126fa:	4b10      	ldr	r3, [pc, #64]	@ (801273c <prvInsertTimerInActiveList+0x7c>)
 80126fc:	681a      	ldr	r2, [r3, #0]
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	3304      	adds	r3, #4
 8012702:	4619      	mov	r1, r3
 8012704:	4610      	mov	r0, r2
 8012706:	f7fd ffa4 	bl	8010652 <vListInsert>
 801270a:	e012      	b.n	8012732 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801270c:	687a      	ldr	r2, [r7, #4]
 801270e:	683b      	ldr	r3, [r7, #0]
 8012710:	429a      	cmp	r2, r3
 8012712:	d206      	bcs.n	8012722 <prvInsertTimerInActiveList+0x62>
 8012714:	68ba      	ldr	r2, [r7, #8]
 8012716:	683b      	ldr	r3, [r7, #0]
 8012718:	429a      	cmp	r2, r3
 801271a:	d302      	bcc.n	8012722 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801271c:	2301      	movs	r3, #1
 801271e:	617b      	str	r3, [r7, #20]
 8012720:	e007      	b.n	8012732 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012722:	4b07      	ldr	r3, [pc, #28]	@ (8012740 <prvInsertTimerInActiveList+0x80>)
 8012724:	681a      	ldr	r2, [r3, #0]
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	3304      	adds	r3, #4
 801272a:	4619      	mov	r1, r3
 801272c:	4610      	mov	r0, r2
 801272e:	f7fd ff90 	bl	8010652 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8012732:	697b      	ldr	r3, [r7, #20]
}
 8012734:	4618      	mov	r0, r3
 8012736:	3718      	adds	r7, #24
 8012738:	46bd      	mov	sp, r7
 801273a:	bd80      	pop	{r7, pc}
 801273c:	200019b0 	.word	0x200019b0
 8012740:	200019ac 	.word	0x200019ac

08012744 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8012744:	b580      	push	{r7, lr}
 8012746:	b08c      	sub	sp, #48	@ 0x30
 8012748:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801274a:	e0b2      	b.n	80128b2 <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801274c:	68bb      	ldr	r3, [r7, #8]
 801274e:	2b00      	cmp	r3, #0
 8012750:	f2c0 80af 	blt.w	80128b2 <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012754:	693b      	ldr	r3, [r7, #16]
 8012756:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8012758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801275a:	695b      	ldr	r3, [r3, #20]
 801275c:	2b00      	cmp	r3, #0
 801275e:	d004      	beq.n	801276a <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012762:	3304      	adds	r3, #4
 8012764:	4618      	mov	r0, r3
 8012766:	f7fd ffad 	bl	80106c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801276a:	1d3b      	adds	r3, r7, #4
 801276c:	4618      	mov	r0, r3
 801276e:	f7ff ff87 	bl	8012680 <prvSampleTimeNow>
 8012772:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8012774:	68bb      	ldr	r3, [r7, #8]
 8012776:	2b09      	cmp	r3, #9
 8012778:	f200 8098 	bhi.w	80128ac <prvProcessReceivedCommands+0x168>
 801277c:	a201      	add	r2, pc, #4	@ (adr r2, 8012784 <prvProcessReceivedCommands+0x40>)
 801277e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012782:	bf00      	nop
 8012784:	080127ad 	.word	0x080127ad
 8012788:	080127ad 	.word	0x080127ad
 801278c:	080127ad 	.word	0x080127ad
 8012790:	08012823 	.word	0x08012823
 8012794:	08012837 	.word	0x08012837
 8012798:	08012883 	.word	0x08012883
 801279c:	080127ad 	.word	0x080127ad
 80127a0:	080127ad 	.word	0x080127ad
 80127a4:	08012823 	.word	0x08012823
 80127a8:	08012837 	.word	0x08012837
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80127ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127ae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80127b2:	f043 0301 	orr.w	r3, r3, #1
 80127b6:	b2da      	uxtb	r2, r3
 80127b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80127be:	68fa      	ldr	r2, [r7, #12]
 80127c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127c2:	699b      	ldr	r3, [r3, #24]
 80127c4:	18d1      	adds	r1, r2, r3
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	6a3a      	ldr	r2, [r7, #32]
 80127ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80127cc:	f7ff ff78 	bl	80126c0 <prvInsertTimerInActiveList>
 80127d0:	4603      	mov	r3, r0
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d06c      	beq.n	80128b0 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80127d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127d8:	6a1b      	ldr	r3, [r3, #32]
 80127da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80127dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80127de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127e0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80127e4:	f003 0304 	and.w	r3, r3, #4
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d061      	beq.n	80128b0 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80127ec:	68fa      	ldr	r2, [r7, #12]
 80127ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127f0:	699b      	ldr	r3, [r3, #24]
 80127f2:	441a      	add	r2, r3
 80127f4:	2300      	movs	r3, #0
 80127f6:	9300      	str	r3, [sp, #0]
 80127f8:	2300      	movs	r3, #0
 80127fa:	2100      	movs	r1, #0
 80127fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80127fe:	f7ff fe1d 	bl	801243c <xTimerGenericCommand>
 8012802:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8012804:	69fb      	ldr	r3, [r7, #28]
 8012806:	2b00      	cmp	r3, #0
 8012808:	d152      	bne.n	80128b0 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 801280a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801280e:	f383 8811 	msr	BASEPRI, r3
 8012812:	f3bf 8f6f 	isb	sy
 8012816:	f3bf 8f4f 	dsb	sy
 801281a:	61bb      	str	r3, [r7, #24]
}
 801281c:	bf00      	nop
 801281e:	bf00      	nop
 8012820:	e7fd      	b.n	801281e <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012824:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8012828:	f023 0301 	bic.w	r3, r3, #1
 801282c:	b2da      	uxtb	r2, r3
 801282e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012830:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8012834:	e03d      	b.n	80128b2 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012838:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801283c:	f043 0301 	orr.w	r3, r3, #1
 8012840:	b2da      	uxtb	r2, r3
 8012842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012844:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012848:	68fa      	ldr	r2, [r7, #12]
 801284a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801284c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801284e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012850:	699b      	ldr	r3, [r3, #24]
 8012852:	2b00      	cmp	r3, #0
 8012854:	d10b      	bne.n	801286e <prvProcessReceivedCommands+0x12a>
	__asm volatile
 8012856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801285a:	f383 8811 	msr	BASEPRI, r3
 801285e:	f3bf 8f6f 	isb	sy
 8012862:	f3bf 8f4f 	dsb	sy
 8012866:	617b      	str	r3, [r7, #20]
}
 8012868:	bf00      	nop
 801286a:	bf00      	nop
 801286c:	e7fd      	b.n	801286a <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801286e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012870:	699a      	ldr	r2, [r3, #24]
 8012872:	6a3b      	ldr	r3, [r7, #32]
 8012874:	18d1      	adds	r1, r2, r3
 8012876:	6a3b      	ldr	r3, [r7, #32]
 8012878:	6a3a      	ldr	r2, [r7, #32]
 801287a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801287c:	f7ff ff20 	bl	80126c0 <prvInsertTimerInActiveList>
					break;
 8012880:	e017      	b.n	80128b2 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8012882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012884:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8012888:	f003 0302 	and.w	r3, r3, #2
 801288c:	2b00      	cmp	r3, #0
 801288e:	d103      	bne.n	8012898 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 8012890:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012892:	f000 fbe9 	bl	8013068 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8012896:	e00c      	b.n	80128b2 <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801289a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801289e:	f023 0301 	bic.w	r3, r3, #1
 80128a2:	b2da      	uxtb	r2, r3
 80128a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 80128aa:	e002      	b.n	80128b2 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 80128ac:	bf00      	nop
 80128ae:	e000      	b.n	80128b2 <prvProcessReceivedCommands+0x16e>
					break;
 80128b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80128b2:	4b08      	ldr	r3, [pc, #32]	@ (80128d4 <prvProcessReceivedCommands+0x190>)
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	f107 0108 	add.w	r1, r7, #8
 80128ba:	2200      	movs	r2, #0
 80128bc:	4618      	mov	r0, r3
 80128be:	f7fe fa0d 	bl	8010cdc <xQueueReceive>
 80128c2:	4603      	mov	r3, r0
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	f47f af41 	bne.w	801274c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80128ca:	bf00      	nop
 80128cc:	bf00      	nop
 80128ce:	3728      	adds	r7, #40	@ 0x28
 80128d0:	46bd      	mov	sp, r7
 80128d2:	bd80      	pop	{r7, pc}
 80128d4:	200019b4 	.word	0x200019b4

080128d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80128d8:	b580      	push	{r7, lr}
 80128da:	b088      	sub	sp, #32
 80128dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80128de:	e049      	b.n	8012974 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80128e0:	4b2e      	ldr	r3, [pc, #184]	@ (801299c <prvSwitchTimerLists+0xc4>)
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	68db      	ldr	r3, [r3, #12]
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80128ea:	4b2c      	ldr	r3, [pc, #176]	@ (801299c <prvSwitchTimerLists+0xc4>)
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	68db      	ldr	r3, [r3, #12]
 80128f0:	68db      	ldr	r3, [r3, #12]
 80128f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	3304      	adds	r3, #4
 80128f8:	4618      	mov	r0, r3
 80128fa:	f7fd fee3 	bl	80106c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80128fe:	68fb      	ldr	r3, [r7, #12]
 8012900:	6a1b      	ldr	r3, [r3, #32]
 8012902:	68f8      	ldr	r0, [r7, #12]
 8012904:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012906:	68fb      	ldr	r3, [r7, #12]
 8012908:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801290c:	f003 0304 	and.w	r3, r3, #4
 8012910:	2b00      	cmp	r3, #0
 8012912:	d02f      	beq.n	8012974 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	699b      	ldr	r3, [r3, #24]
 8012918:	693a      	ldr	r2, [r7, #16]
 801291a:	4413      	add	r3, r2
 801291c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801291e:	68ba      	ldr	r2, [r7, #8]
 8012920:	693b      	ldr	r3, [r7, #16]
 8012922:	429a      	cmp	r2, r3
 8012924:	d90e      	bls.n	8012944 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	68ba      	ldr	r2, [r7, #8]
 801292a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	68fa      	ldr	r2, [r7, #12]
 8012930:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012932:	4b1a      	ldr	r3, [pc, #104]	@ (801299c <prvSwitchTimerLists+0xc4>)
 8012934:	681a      	ldr	r2, [r3, #0]
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	3304      	adds	r3, #4
 801293a:	4619      	mov	r1, r3
 801293c:	4610      	mov	r0, r2
 801293e:	f7fd fe88 	bl	8010652 <vListInsert>
 8012942:	e017      	b.n	8012974 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012944:	2300      	movs	r3, #0
 8012946:	9300      	str	r3, [sp, #0]
 8012948:	2300      	movs	r3, #0
 801294a:	693a      	ldr	r2, [r7, #16]
 801294c:	2100      	movs	r1, #0
 801294e:	68f8      	ldr	r0, [r7, #12]
 8012950:	f7ff fd74 	bl	801243c <xTimerGenericCommand>
 8012954:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	2b00      	cmp	r3, #0
 801295a:	d10b      	bne.n	8012974 <prvSwitchTimerLists+0x9c>
	__asm volatile
 801295c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012960:	f383 8811 	msr	BASEPRI, r3
 8012964:	f3bf 8f6f 	isb	sy
 8012968:	f3bf 8f4f 	dsb	sy
 801296c:	603b      	str	r3, [r7, #0]
}
 801296e:	bf00      	nop
 8012970:	bf00      	nop
 8012972:	e7fd      	b.n	8012970 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012974:	4b09      	ldr	r3, [pc, #36]	@ (801299c <prvSwitchTimerLists+0xc4>)
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	2b00      	cmp	r3, #0
 801297c:	d1b0      	bne.n	80128e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801297e:	4b07      	ldr	r3, [pc, #28]	@ (801299c <prvSwitchTimerLists+0xc4>)
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8012984:	4b06      	ldr	r3, [pc, #24]	@ (80129a0 <prvSwitchTimerLists+0xc8>)
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	4a04      	ldr	r2, [pc, #16]	@ (801299c <prvSwitchTimerLists+0xc4>)
 801298a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801298c:	4a04      	ldr	r2, [pc, #16]	@ (80129a0 <prvSwitchTimerLists+0xc8>)
 801298e:	697b      	ldr	r3, [r7, #20]
 8012990:	6013      	str	r3, [r2, #0]
}
 8012992:	bf00      	nop
 8012994:	3718      	adds	r7, #24
 8012996:	46bd      	mov	sp, r7
 8012998:	bd80      	pop	{r7, pc}
 801299a:	bf00      	nop
 801299c:	200019ac 	.word	0x200019ac
 80129a0:	200019b0 	.word	0x200019b0

080129a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80129a4:	b580      	push	{r7, lr}
 80129a6:	b082      	sub	sp, #8
 80129a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80129aa:	f000 f96d 	bl	8012c88 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80129ae:	4b15      	ldr	r3, [pc, #84]	@ (8012a04 <prvCheckForValidListAndQueue+0x60>)
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d120      	bne.n	80129f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80129b6:	4814      	ldr	r0, [pc, #80]	@ (8012a08 <prvCheckForValidListAndQueue+0x64>)
 80129b8:	f7fd fdfa 	bl	80105b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80129bc:	4813      	ldr	r0, [pc, #76]	@ (8012a0c <prvCheckForValidListAndQueue+0x68>)
 80129be:	f7fd fdf7 	bl	80105b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80129c2:	4b13      	ldr	r3, [pc, #76]	@ (8012a10 <prvCheckForValidListAndQueue+0x6c>)
 80129c4:	4a10      	ldr	r2, [pc, #64]	@ (8012a08 <prvCheckForValidListAndQueue+0x64>)
 80129c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80129c8:	4b12      	ldr	r3, [pc, #72]	@ (8012a14 <prvCheckForValidListAndQueue+0x70>)
 80129ca:	4a10      	ldr	r2, [pc, #64]	@ (8012a0c <prvCheckForValidListAndQueue+0x68>)
 80129cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80129ce:	2300      	movs	r3, #0
 80129d0:	9300      	str	r3, [sp, #0]
 80129d2:	4b11      	ldr	r3, [pc, #68]	@ (8012a18 <prvCheckForValidListAndQueue+0x74>)
 80129d4:	4a11      	ldr	r2, [pc, #68]	@ (8012a1c <prvCheckForValidListAndQueue+0x78>)
 80129d6:	210c      	movs	r1, #12
 80129d8:	200a      	movs	r0, #10
 80129da:	f7fd ff07 	bl	80107ec <xQueueGenericCreateStatic>
 80129de:	4603      	mov	r3, r0
 80129e0:	4a08      	ldr	r2, [pc, #32]	@ (8012a04 <prvCheckForValidListAndQueue+0x60>)
 80129e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80129e4:	4b07      	ldr	r3, [pc, #28]	@ (8012a04 <prvCheckForValidListAndQueue+0x60>)
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d005      	beq.n	80129f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80129ec:	4b05      	ldr	r3, [pc, #20]	@ (8012a04 <prvCheckForValidListAndQueue+0x60>)
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	490b      	ldr	r1, [pc, #44]	@ (8012a20 <prvCheckForValidListAndQueue+0x7c>)
 80129f2:	4618      	mov	r0, r3
 80129f4:	f7fe fb64 	bl	80110c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80129f8:	f000 f978 	bl	8012cec <vPortExitCritical>
}
 80129fc:	bf00      	nop
 80129fe:	46bd      	mov	sp, r7
 8012a00:	bd80      	pop	{r7, pc}
 8012a02:	bf00      	nop
 8012a04:	200019b4 	.word	0x200019b4
 8012a08:	20001984 	.word	0x20001984
 8012a0c:	20001998 	.word	0x20001998
 8012a10:	200019ac 	.word	0x200019ac
 8012a14:	200019b0 	.word	0x200019b0
 8012a18:	20001a38 	.word	0x20001a38
 8012a1c:	200019c0 	.word	0x200019c0
 8012a20:	080141c4 	.word	0x080141c4

08012a24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012a24:	b480      	push	{r7}
 8012a26:	b085      	sub	sp, #20
 8012a28:	af00      	add	r7, sp, #0
 8012a2a:	60f8      	str	r0, [r7, #12]
 8012a2c:	60b9      	str	r1, [r7, #8]
 8012a2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	3b04      	subs	r3, #4
 8012a34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8012a3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	3b04      	subs	r3, #4
 8012a42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012a44:	68bb      	ldr	r3, [r7, #8]
 8012a46:	f023 0201 	bic.w	r2, r3, #1
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	3b04      	subs	r3, #4
 8012a52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012a54:	4a0c      	ldr	r2, [pc, #48]	@ (8012a88 <pxPortInitialiseStack+0x64>)
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	3b14      	subs	r3, #20
 8012a5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012a60:	687a      	ldr	r2, [r7, #4]
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	3b04      	subs	r3, #4
 8012a6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	f06f 0202 	mvn.w	r2, #2
 8012a72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	3b20      	subs	r3, #32
 8012a78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012a7a:	68fb      	ldr	r3, [r7, #12]
}
 8012a7c:	4618      	mov	r0, r3
 8012a7e:	3714      	adds	r7, #20
 8012a80:	46bd      	mov	sp, r7
 8012a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a86:	4770      	bx	lr
 8012a88:	08012a8d 	.word	0x08012a8d

08012a8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012a8c:	b480      	push	{r7}
 8012a8e:	b085      	sub	sp, #20
 8012a90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012a92:	2300      	movs	r3, #0
 8012a94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012a96:	4b13      	ldr	r3, [pc, #76]	@ (8012ae4 <prvTaskExitError+0x58>)
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a9e:	d00b      	beq.n	8012ab8 <prvTaskExitError+0x2c>
	__asm volatile
 8012aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012aa4:	f383 8811 	msr	BASEPRI, r3
 8012aa8:	f3bf 8f6f 	isb	sy
 8012aac:	f3bf 8f4f 	dsb	sy
 8012ab0:	60fb      	str	r3, [r7, #12]
}
 8012ab2:	bf00      	nop
 8012ab4:	bf00      	nop
 8012ab6:	e7fd      	b.n	8012ab4 <prvTaskExitError+0x28>
	__asm volatile
 8012ab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012abc:	f383 8811 	msr	BASEPRI, r3
 8012ac0:	f3bf 8f6f 	isb	sy
 8012ac4:	f3bf 8f4f 	dsb	sy
 8012ac8:	60bb      	str	r3, [r7, #8]
}
 8012aca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012acc:	bf00      	nop
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d0fc      	beq.n	8012ace <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012ad4:	bf00      	nop
 8012ad6:	bf00      	nop
 8012ad8:	3714      	adds	r7, #20
 8012ada:	46bd      	mov	sp, r7
 8012adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ae0:	4770      	bx	lr
 8012ae2:	bf00      	nop
 8012ae4:	20000160 	.word	0x20000160
	...

08012af0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012af0:	4b07      	ldr	r3, [pc, #28]	@ (8012b10 <pxCurrentTCBConst2>)
 8012af2:	6819      	ldr	r1, [r3, #0]
 8012af4:	6808      	ldr	r0, [r1, #0]
 8012af6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012afa:	f380 8809 	msr	PSP, r0
 8012afe:	f3bf 8f6f 	isb	sy
 8012b02:	f04f 0000 	mov.w	r0, #0
 8012b06:	f380 8811 	msr	BASEPRI, r0
 8012b0a:	4770      	bx	lr
 8012b0c:	f3af 8000 	nop.w

08012b10 <pxCurrentTCBConst2>:
 8012b10:	20001858 	.word	0x20001858
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012b14:	bf00      	nop
 8012b16:	bf00      	nop

08012b18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012b18:	4808      	ldr	r0, [pc, #32]	@ (8012b3c <prvPortStartFirstTask+0x24>)
 8012b1a:	6800      	ldr	r0, [r0, #0]
 8012b1c:	6800      	ldr	r0, [r0, #0]
 8012b1e:	f380 8808 	msr	MSP, r0
 8012b22:	f04f 0000 	mov.w	r0, #0
 8012b26:	f380 8814 	msr	CONTROL, r0
 8012b2a:	b662      	cpsie	i
 8012b2c:	b661      	cpsie	f
 8012b2e:	f3bf 8f4f 	dsb	sy
 8012b32:	f3bf 8f6f 	isb	sy
 8012b36:	df00      	svc	0
 8012b38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8012b3a:	bf00      	nop
 8012b3c:	e000ed08 	.word	0xe000ed08

08012b40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012b40:	b580      	push	{r7, lr}
 8012b42:	b086      	sub	sp, #24
 8012b44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012b46:	4b47      	ldr	r3, [pc, #284]	@ (8012c64 <xPortStartScheduler+0x124>)
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	4a47      	ldr	r2, [pc, #284]	@ (8012c68 <xPortStartScheduler+0x128>)
 8012b4c:	4293      	cmp	r3, r2
 8012b4e:	d10b      	bne.n	8012b68 <xPortStartScheduler+0x28>
	__asm volatile
 8012b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b54:	f383 8811 	msr	BASEPRI, r3
 8012b58:	f3bf 8f6f 	isb	sy
 8012b5c:	f3bf 8f4f 	dsb	sy
 8012b60:	60fb      	str	r3, [r7, #12]
}
 8012b62:	bf00      	nop
 8012b64:	bf00      	nop
 8012b66:	e7fd      	b.n	8012b64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012b68:	4b3e      	ldr	r3, [pc, #248]	@ (8012c64 <xPortStartScheduler+0x124>)
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	4a3f      	ldr	r2, [pc, #252]	@ (8012c6c <xPortStartScheduler+0x12c>)
 8012b6e:	4293      	cmp	r3, r2
 8012b70:	d10b      	bne.n	8012b8a <xPortStartScheduler+0x4a>
	__asm volatile
 8012b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b76:	f383 8811 	msr	BASEPRI, r3
 8012b7a:	f3bf 8f6f 	isb	sy
 8012b7e:	f3bf 8f4f 	dsb	sy
 8012b82:	613b      	str	r3, [r7, #16]
}
 8012b84:	bf00      	nop
 8012b86:	bf00      	nop
 8012b88:	e7fd      	b.n	8012b86 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012b8a:	4b39      	ldr	r3, [pc, #228]	@ (8012c70 <xPortStartScheduler+0x130>)
 8012b8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012b8e:	697b      	ldr	r3, [r7, #20]
 8012b90:	781b      	ldrb	r3, [r3, #0]
 8012b92:	b2db      	uxtb	r3, r3
 8012b94:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012b96:	697b      	ldr	r3, [r7, #20]
 8012b98:	22ff      	movs	r2, #255	@ 0xff
 8012b9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012b9c:	697b      	ldr	r3, [r7, #20]
 8012b9e:	781b      	ldrb	r3, [r3, #0]
 8012ba0:	b2db      	uxtb	r3, r3
 8012ba2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012ba4:	78fb      	ldrb	r3, [r7, #3]
 8012ba6:	b2db      	uxtb	r3, r3
 8012ba8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8012bac:	b2da      	uxtb	r2, r3
 8012bae:	4b31      	ldr	r3, [pc, #196]	@ (8012c74 <xPortStartScheduler+0x134>)
 8012bb0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012bb2:	4b31      	ldr	r3, [pc, #196]	@ (8012c78 <xPortStartScheduler+0x138>)
 8012bb4:	2207      	movs	r2, #7
 8012bb6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012bb8:	e009      	b.n	8012bce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8012bba:	4b2f      	ldr	r3, [pc, #188]	@ (8012c78 <xPortStartScheduler+0x138>)
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	3b01      	subs	r3, #1
 8012bc0:	4a2d      	ldr	r2, [pc, #180]	@ (8012c78 <xPortStartScheduler+0x138>)
 8012bc2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012bc4:	78fb      	ldrb	r3, [r7, #3]
 8012bc6:	b2db      	uxtb	r3, r3
 8012bc8:	005b      	lsls	r3, r3, #1
 8012bca:	b2db      	uxtb	r3, r3
 8012bcc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012bce:	78fb      	ldrb	r3, [r7, #3]
 8012bd0:	b2db      	uxtb	r3, r3
 8012bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012bd6:	2b80      	cmp	r3, #128	@ 0x80
 8012bd8:	d0ef      	beq.n	8012bba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012bda:	4b27      	ldr	r3, [pc, #156]	@ (8012c78 <xPortStartScheduler+0x138>)
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	f1c3 0307 	rsb	r3, r3, #7
 8012be2:	2b04      	cmp	r3, #4
 8012be4:	d00b      	beq.n	8012bfe <xPortStartScheduler+0xbe>
	__asm volatile
 8012be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012bea:	f383 8811 	msr	BASEPRI, r3
 8012bee:	f3bf 8f6f 	isb	sy
 8012bf2:	f3bf 8f4f 	dsb	sy
 8012bf6:	60bb      	str	r3, [r7, #8]
}
 8012bf8:	bf00      	nop
 8012bfa:	bf00      	nop
 8012bfc:	e7fd      	b.n	8012bfa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8012c78 <xPortStartScheduler+0x138>)
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	021b      	lsls	r3, r3, #8
 8012c04:	4a1c      	ldr	r2, [pc, #112]	@ (8012c78 <xPortStartScheduler+0x138>)
 8012c06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012c08:	4b1b      	ldr	r3, [pc, #108]	@ (8012c78 <xPortStartScheduler+0x138>)
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8012c10:	4a19      	ldr	r2, [pc, #100]	@ (8012c78 <xPortStartScheduler+0x138>)
 8012c12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	b2da      	uxtb	r2, r3
 8012c18:	697b      	ldr	r3, [r7, #20]
 8012c1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012c1c:	4b17      	ldr	r3, [pc, #92]	@ (8012c7c <xPortStartScheduler+0x13c>)
 8012c1e:	681b      	ldr	r3, [r3, #0]
 8012c20:	4a16      	ldr	r2, [pc, #88]	@ (8012c7c <xPortStartScheduler+0x13c>)
 8012c22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8012c26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012c28:	4b14      	ldr	r3, [pc, #80]	@ (8012c7c <xPortStartScheduler+0x13c>)
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	4a13      	ldr	r2, [pc, #76]	@ (8012c7c <xPortStartScheduler+0x13c>)
 8012c2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8012c32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012c34:	f000 f8da 	bl	8012dec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012c38:	4b11      	ldr	r3, [pc, #68]	@ (8012c80 <xPortStartScheduler+0x140>)
 8012c3a:	2200      	movs	r2, #0
 8012c3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012c3e:	f000 f8f9 	bl	8012e34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012c42:	4b10      	ldr	r3, [pc, #64]	@ (8012c84 <xPortStartScheduler+0x144>)
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	4a0f      	ldr	r2, [pc, #60]	@ (8012c84 <xPortStartScheduler+0x144>)
 8012c48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8012c4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012c4e:	f7ff ff63 	bl	8012b18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012c52:	f7fe ff83 	bl	8011b5c <vTaskSwitchContext>
	prvTaskExitError();
 8012c56:	f7ff ff19 	bl	8012a8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012c5a:	2300      	movs	r3, #0
}
 8012c5c:	4618      	mov	r0, r3
 8012c5e:	3718      	adds	r7, #24
 8012c60:	46bd      	mov	sp, r7
 8012c62:	bd80      	pop	{r7, pc}
 8012c64:	e000ed00 	.word	0xe000ed00
 8012c68:	410fc271 	.word	0x410fc271
 8012c6c:	410fc270 	.word	0x410fc270
 8012c70:	e000e400 	.word	0xe000e400
 8012c74:	20001a80 	.word	0x20001a80
 8012c78:	20001a84 	.word	0x20001a84
 8012c7c:	e000ed20 	.word	0xe000ed20
 8012c80:	20000160 	.word	0x20000160
 8012c84:	e000ef34 	.word	0xe000ef34

08012c88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012c88:	b480      	push	{r7}
 8012c8a:	b083      	sub	sp, #12
 8012c8c:	af00      	add	r7, sp, #0
	__asm volatile
 8012c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c92:	f383 8811 	msr	BASEPRI, r3
 8012c96:	f3bf 8f6f 	isb	sy
 8012c9a:	f3bf 8f4f 	dsb	sy
 8012c9e:	607b      	str	r3, [r7, #4]
}
 8012ca0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012ca2:	4b10      	ldr	r3, [pc, #64]	@ (8012ce4 <vPortEnterCritical+0x5c>)
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	3301      	adds	r3, #1
 8012ca8:	4a0e      	ldr	r2, [pc, #56]	@ (8012ce4 <vPortEnterCritical+0x5c>)
 8012caa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012cac:	4b0d      	ldr	r3, [pc, #52]	@ (8012ce4 <vPortEnterCritical+0x5c>)
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	2b01      	cmp	r3, #1
 8012cb2:	d110      	bne.n	8012cd6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8012ce8 <vPortEnterCritical+0x60>)
 8012cb6:	681b      	ldr	r3, [r3, #0]
 8012cb8:	b2db      	uxtb	r3, r3
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d00b      	beq.n	8012cd6 <vPortEnterCritical+0x4e>
	__asm volatile
 8012cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012cc2:	f383 8811 	msr	BASEPRI, r3
 8012cc6:	f3bf 8f6f 	isb	sy
 8012cca:	f3bf 8f4f 	dsb	sy
 8012cce:	603b      	str	r3, [r7, #0]
}
 8012cd0:	bf00      	nop
 8012cd2:	bf00      	nop
 8012cd4:	e7fd      	b.n	8012cd2 <vPortEnterCritical+0x4a>
	}
}
 8012cd6:	bf00      	nop
 8012cd8:	370c      	adds	r7, #12
 8012cda:	46bd      	mov	sp, r7
 8012cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ce0:	4770      	bx	lr
 8012ce2:	bf00      	nop
 8012ce4:	20000160 	.word	0x20000160
 8012ce8:	e000ed04 	.word	0xe000ed04

08012cec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012cec:	b480      	push	{r7}
 8012cee:	b083      	sub	sp, #12
 8012cf0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012cf2:	4b12      	ldr	r3, [pc, #72]	@ (8012d3c <vPortExitCritical+0x50>)
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d10b      	bne.n	8012d12 <vPortExitCritical+0x26>
	__asm volatile
 8012cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012cfe:	f383 8811 	msr	BASEPRI, r3
 8012d02:	f3bf 8f6f 	isb	sy
 8012d06:	f3bf 8f4f 	dsb	sy
 8012d0a:	607b      	str	r3, [r7, #4]
}
 8012d0c:	bf00      	nop
 8012d0e:	bf00      	nop
 8012d10:	e7fd      	b.n	8012d0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012d12:	4b0a      	ldr	r3, [pc, #40]	@ (8012d3c <vPortExitCritical+0x50>)
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	3b01      	subs	r3, #1
 8012d18:	4a08      	ldr	r2, [pc, #32]	@ (8012d3c <vPortExitCritical+0x50>)
 8012d1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012d1c:	4b07      	ldr	r3, [pc, #28]	@ (8012d3c <vPortExitCritical+0x50>)
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d105      	bne.n	8012d30 <vPortExitCritical+0x44>
 8012d24:	2300      	movs	r3, #0
 8012d26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012d28:	683b      	ldr	r3, [r7, #0]
 8012d2a:	f383 8811 	msr	BASEPRI, r3
}
 8012d2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012d30:	bf00      	nop
 8012d32:	370c      	adds	r7, #12
 8012d34:	46bd      	mov	sp, r7
 8012d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d3a:	4770      	bx	lr
 8012d3c:	20000160 	.word	0x20000160

08012d40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012d40:	f3ef 8009 	mrs	r0, PSP
 8012d44:	f3bf 8f6f 	isb	sy
 8012d48:	4b15      	ldr	r3, [pc, #84]	@ (8012da0 <pxCurrentTCBConst>)
 8012d4a:	681a      	ldr	r2, [r3, #0]
 8012d4c:	f01e 0f10 	tst.w	lr, #16
 8012d50:	bf08      	it	eq
 8012d52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012d56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d5a:	6010      	str	r0, [r2, #0]
 8012d5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012d60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8012d64:	f380 8811 	msr	BASEPRI, r0
 8012d68:	f3bf 8f4f 	dsb	sy
 8012d6c:	f3bf 8f6f 	isb	sy
 8012d70:	f7fe fef4 	bl	8011b5c <vTaskSwitchContext>
 8012d74:	f04f 0000 	mov.w	r0, #0
 8012d78:	f380 8811 	msr	BASEPRI, r0
 8012d7c:	bc09      	pop	{r0, r3}
 8012d7e:	6819      	ldr	r1, [r3, #0]
 8012d80:	6808      	ldr	r0, [r1, #0]
 8012d82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d86:	f01e 0f10 	tst.w	lr, #16
 8012d8a:	bf08      	it	eq
 8012d8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012d90:	f380 8809 	msr	PSP, r0
 8012d94:	f3bf 8f6f 	isb	sy
 8012d98:	4770      	bx	lr
 8012d9a:	bf00      	nop
 8012d9c:	f3af 8000 	nop.w

08012da0 <pxCurrentTCBConst>:
 8012da0:	20001858 	.word	0x20001858
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012da4:	bf00      	nop
 8012da6:	bf00      	nop

08012da8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012da8:	b580      	push	{r7, lr}
 8012daa:	b082      	sub	sp, #8
 8012dac:	af00      	add	r7, sp, #0
	__asm volatile
 8012dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012db2:	f383 8811 	msr	BASEPRI, r3
 8012db6:	f3bf 8f6f 	isb	sy
 8012dba:	f3bf 8f4f 	dsb	sy
 8012dbe:	607b      	str	r3, [r7, #4]
}
 8012dc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012dc2:	f7fe fe11 	bl	80119e8 <xTaskIncrementTick>
 8012dc6:	4603      	mov	r3, r0
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d003      	beq.n	8012dd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012dcc:	4b06      	ldr	r3, [pc, #24]	@ (8012de8 <SysTick_Handler+0x40>)
 8012dce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012dd2:	601a      	str	r2, [r3, #0]
 8012dd4:	2300      	movs	r3, #0
 8012dd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012dd8:	683b      	ldr	r3, [r7, #0]
 8012dda:	f383 8811 	msr	BASEPRI, r3
}
 8012dde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012de0:	bf00      	nop
 8012de2:	3708      	adds	r7, #8
 8012de4:	46bd      	mov	sp, r7
 8012de6:	bd80      	pop	{r7, pc}
 8012de8:	e000ed04 	.word	0xe000ed04

08012dec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012dec:	b480      	push	{r7}
 8012dee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012df0:	4b0b      	ldr	r3, [pc, #44]	@ (8012e20 <vPortSetupTimerInterrupt+0x34>)
 8012df2:	2200      	movs	r2, #0
 8012df4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012df6:	4b0b      	ldr	r3, [pc, #44]	@ (8012e24 <vPortSetupTimerInterrupt+0x38>)
 8012df8:	2200      	movs	r2, #0
 8012dfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8012e28 <vPortSetupTimerInterrupt+0x3c>)
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	4a0a      	ldr	r2, [pc, #40]	@ (8012e2c <vPortSetupTimerInterrupt+0x40>)
 8012e02:	fba2 2303 	umull	r2, r3, r2, r3
 8012e06:	099b      	lsrs	r3, r3, #6
 8012e08:	4a09      	ldr	r2, [pc, #36]	@ (8012e30 <vPortSetupTimerInterrupt+0x44>)
 8012e0a:	3b01      	subs	r3, #1
 8012e0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012e0e:	4b04      	ldr	r3, [pc, #16]	@ (8012e20 <vPortSetupTimerInterrupt+0x34>)
 8012e10:	2207      	movs	r2, #7
 8012e12:	601a      	str	r2, [r3, #0]
}
 8012e14:	bf00      	nop
 8012e16:	46bd      	mov	sp, r7
 8012e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e1c:	4770      	bx	lr
 8012e1e:	bf00      	nop
 8012e20:	e000e010 	.word	0xe000e010
 8012e24:	e000e018 	.word	0xe000e018
 8012e28:	20000154 	.word	0x20000154
 8012e2c:	10624dd3 	.word	0x10624dd3
 8012e30:	e000e014 	.word	0xe000e014

08012e34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012e34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8012e44 <vPortEnableVFP+0x10>
 8012e38:	6801      	ldr	r1, [r0, #0]
 8012e3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8012e3e:	6001      	str	r1, [r0, #0]
 8012e40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012e42:	bf00      	nop
 8012e44:	e000ed88 	.word	0xe000ed88

08012e48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012e48:	b480      	push	{r7}
 8012e4a:	b085      	sub	sp, #20
 8012e4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012e4e:	f3ef 8305 	mrs	r3, IPSR
 8012e52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	2b0f      	cmp	r3, #15
 8012e58:	d915      	bls.n	8012e86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012e5a:	4a18      	ldr	r2, [pc, #96]	@ (8012ebc <vPortValidateInterruptPriority+0x74>)
 8012e5c:	68fb      	ldr	r3, [r7, #12]
 8012e5e:	4413      	add	r3, r2
 8012e60:	781b      	ldrb	r3, [r3, #0]
 8012e62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012e64:	4b16      	ldr	r3, [pc, #88]	@ (8012ec0 <vPortValidateInterruptPriority+0x78>)
 8012e66:	781b      	ldrb	r3, [r3, #0]
 8012e68:	7afa      	ldrb	r2, [r7, #11]
 8012e6a:	429a      	cmp	r2, r3
 8012e6c:	d20b      	bcs.n	8012e86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8012e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e72:	f383 8811 	msr	BASEPRI, r3
 8012e76:	f3bf 8f6f 	isb	sy
 8012e7a:	f3bf 8f4f 	dsb	sy
 8012e7e:	607b      	str	r3, [r7, #4]
}
 8012e80:	bf00      	nop
 8012e82:	bf00      	nop
 8012e84:	e7fd      	b.n	8012e82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012e86:	4b0f      	ldr	r3, [pc, #60]	@ (8012ec4 <vPortValidateInterruptPriority+0x7c>)
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8012e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8012ec8 <vPortValidateInterruptPriority+0x80>)
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	429a      	cmp	r2, r3
 8012e94:	d90b      	bls.n	8012eae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8012e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e9a:	f383 8811 	msr	BASEPRI, r3
 8012e9e:	f3bf 8f6f 	isb	sy
 8012ea2:	f3bf 8f4f 	dsb	sy
 8012ea6:	603b      	str	r3, [r7, #0]
}
 8012ea8:	bf00      	nop
 8012eaa:	bf00      	nop
 8012eac:	e7fd      	b.n	8012eaa <vPortValidateInterruptPriority+0x62>
	}
 8012eae:	bf00      	nop
 8012eb0:	3714      	adds	r7, #20
 8012eb2:	46bd      	mov	sp, r7
 8012eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb8:	4770      	bx	lr
 8012eba:	bf00      	nop
 8012ebc:	e000e3f0 	.word	0xe000e3f0
 8012ec0:	20001a80 	.word	0x20001a80
 8012ec4:	e000ed0c 	.word	0xe000ed0c
 8012ec8:	20001a84 	.word	0x20001a84

08012ecc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012ecc:	b580      	push	{r7, lr}
 8012ece:	b08a      	sub	sp, #40	@ 0x28
 8012ed0:	af00      	add	r7, sp, #0
 8012ed2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012ed4:	2300      	movs	r3, #0
 8012ed6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012ed8:	f7fe fcca 	bl	8011870 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012edc:	4b5c      	ldr	r3, [pc, #368]	@ (8013050 <pvPortMalloc+0x184>)
 8012ede:	681b      	ldr	r3, [r3, #0]
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d101      	bne.n	8012ee8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012ee4:	f000 f924 	bl	8013130 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012ee8:	4b5a      	ldr	r3, [pc, #360]	@ (8013054 <pvPortMalloc+0x188>)
 8012eea:	681a      	ldr	r2, [r3, #0]
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	4013      	ands	r3, r2
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	f040 8095 	bne.w	8013020 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d01e      	beq.n	8012f3a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8012efc:	2208      	movs	r2, #8
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	4413      	add	r3, r2
 8012f02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	f003 0307 	and.w	r3, r3, #7
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d015      	beq.n	8012f3a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	f023 0307 	bic.w	r3, r3, #7
 8012f14:	3308      	adds	r3, #8
 8012f16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	f003 0307 	and.w	r3, r3, #7
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d00b      	beq.n	8012f3a <pvPortMalloc+0x6e>
	__asm volatile
 8012f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f26:	f383 8811 	msr	BASEPRI, r3
 8012f2a:	f3bf 8f6f 	isb	sy
 8012f2e:	f3bf 8f4f 	dsb	sy
 8012f32:	617b      	str	r3, [r7, #20]
}
 8012f34:	bf00      	nop
 8012f36:	bf00      	nop
 8012f38:	e7fd      	b.n	8012f36 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d06f      	beq.n	8013020 <pvPortMalloc+0x154>
 8012f40:	4b45      	ldr	r3, [pc, #276]	@ (8013058 <pvPortMalloc+0x18c>)
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	687a      	ldr	r2, [r7, #4]
 8012f46:	429a      	cmp	r2, r3
 8012f48:	d86a      	bhi.n	8013020 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012f4a:	4b44      	ldr	r3, [pc, #272]	@ (801305c <pvPortMalloc+0x190>)
 8012f4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012f4e:	4b43      	ldr	r3, [pc, #268]	@ (801305c <pvPortMalloc+0x190>)
 8012f50:	681b      	ldr	r3, [r3, #0]
 8012f52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012f54:	e004      	b.n	8012f60 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8012f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f62:	685b      	ldr	r3, [r3, #4]
 8012f64:	687a      	ldr	r2, [r7, #4]
 8012f66:	429a      	cmp	r2, r3
 8012f68:	d903      	bls.n	8012f72 <pvPortMalloc+0xa6>
 8012f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d1f1      	bne.n	8012f56 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012f72:	4b37      	ldr	r3, [pc, #220]	@ (8013050 <pvPortMalloc+0x184>)
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012f78:	429a      	cmp	r2, r3
 8012f7a:	d051      	beq.n	8013020 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012f7c:	6a3b      	ldr	r3, [r7, #32]
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	2208      	movs	r2, #8
 8012f82:	4413      	add	r3, r2
 8012f84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f88:	681a      	ldr	r2, [r3, #0]
 8012f8a:	6a3b      	ldr	r3, [r7, #32]
 8012f8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f90:	685a      	ldr	r2, [r3, #4]
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	1ad2      	subs	r2, r2, r3
 8012f96:	2308      	movs	r3, #8
 8012f98:	005b      	lsls	r3, r3, #1
 8012f9a:	429a      	cmp	r2, r3
 8012f9c:	d920      	bls.n	8012fe0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012f9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	4413      	add	r3, r2
 8012fa4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012fa6:	69bb      	ldr	r3, [r7, #24]
 8012fa8:	f003 0307 	and.w	r3, r3, #7
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d00b      	beq.n	8012fc8 <pvPortMalloc+0xfc>
	__asm volatile
 8012fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012fb4:	f383 8811 	msr	BASEPRI, r3
 8012fb8:	f3bf 8f6f 	isb	sy
 8012fbc:	f3bf 8f4f 	dsb	sy
 8012fc0:	613b      	str	r3, [r7, #16]
}
 8012fc2:	bf00      	nop
 8012fc4:	bf00      	nop
 8012fc6:	e7fd      	b.n	8012fc4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012fca:	685a      	ldr	r2, [r3, #4]
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	1ad2      	subs	r2, r2, r3
 8012fd0:	69bb      	ldr	r3, [r7, #24]
 8012fd2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012fd6:	687a      	ldr	r2, [r7, #4]
 8012fd8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012fda:	69b8      	ldr	r0, [r7, #24]
 8012fdc:	f000 f90a 	bl	80131f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012fe0:	4b1d      	ldr	r3, [pc, #116]	@ (8013058 <pvPortMalloc+0x18c>)
 8012fe2:	681a      	ldr	r2, [r3, #0]
 8012fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012fe6:	685b      	ldr	r3, [r3, #4]
 8012fe8:	1ad3      	subs	r3, r2, r3
 8012fea:	4a1b      	ldr	r2, [pc, #108]	@ (8013058 <pvPortMalloc+0x18c>)
 8012fec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012fee:	4b1a      	ldr	r3, [pc, #104]	@ (8013058 <pvPortMalloc+0x18c>)
 8012ff0:	681a      	ldr	r2, [r3, #0]
 8012ff2:	4b1b      	ldr	r3, [pc, #108]	@ (8013060 <pvPortMalloc+0x194>)
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	429a      	cmp	r2, r3
 8012ff8:	d203      	bcs.n	8013002 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012ffa:	4b17      	ldr	r3, [pc, #92]	@ (8013058 <pvPortMalloc+0x18c>)
 8012ffc:	681b      	ldr	r3, [r3, #0]
 8012ffe:	4a18      	ldr	r2, [pc, #96]	@ (8013060 <pvPortMalloc+0x194>)
 8013000:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013004:	685a      	ldr	r2, [r3, #4]
 8013006:	4b13      	ldr	r3, [pc, #76]	@ (8013054 <pvPortMalloc+0x188>)
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	431a      	orrs	r2, r3
 801300c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801300e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013012:	2200      	movs	r2, #0
 8013014:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8013016:	4b13      	ldr	r3, [pc, #76]	@ (8013064 <pvPortMalloc+0x198>)
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	3301      	adds	r3, #1
 801301c:	4a11      	ldr	r2, [pc, #68]	@ (8013064 <pvPortMalloc+0x198>)
 801301e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013020:	f7fe fc34 	bl	801188c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013024:	69fb      	ldr	r3, [r7, #28]
 8013026:	f003 0307 	and.w	r3, r3, #7
 801302a:	2b00      	cmp	r3, #0
 801302c:	d00b      	beq.n	8013046 <pvPortMalloc+0x17a>
	__asm volatile
 801302e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013032:	f383 8811 	msr	BASEPRI, r3
 8013036:	f3bf 8f6f 	isb	sy
 801303a:	f3bf 8f4f 	dsb	sy
 801303e:	60fb      	str	r3, [r7, #12]
}
 8013040:	bf00      	nop
 8013042:	bf00      	nop
 8013044:	e7fd      	b.n	8013042 <pvPortMalloc+0x176>
	return pvReturn;
 8013046:	69fb      	ldr	r3, [r7, #28]
}
 8013048:	4618      	mov	r0, r3
 801304a:	3728      	adds	r7, #40	@ 0x28
 801304c:	46bd      	mov	sp, r7
 801304e:	bd80      	pop	{r7, pc}
 8013050:	20005690 	.word	0x20005690
 8013054:	200056a4 	.word	0x200056a4
 8013058:	20005694 	.word	0x20005694
 801305c:	20005688 	.word	0x20005688
 8013060:	20005698 	.word	0x20005698
 8013064:	2000569c 	.word	0x2000569c

08013068 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013068:	b580      	push	{r7, lr}
 801306a:	b086      	sub	sp, #24
 801306c:	af00      	add	r7, sp, #0
 801306e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	2b00      	cmp	r3, #0
 8013078:	d04f      	beq.n	801311a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801307a:	2308      	movs	r3, #8
 801307c:	425b      	negs	r3, r3
 801307e:	697a      	ldr	r2, [r7, #20]
 8013080:	4413      	add	r3, r2
 8013082:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013084:	697b      	ldr	r3, [r7, #20]
 8013086:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013088:	693b      	ldr	r3, [r7, #16]
 801308a:	685a      	ldr	r2, [r3, #4]
 801308c:	4b25      	ldr	r3, [pc, #148]	@ (8013124 <vPortFree+0xbc>)
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	4013      	ands	r3, r2
 8013092:	2b00      	cmp	r3, #0
 8013094:	d10b      	bne.n	80130ae <vPortFree+0x46>
	__asm volatile
 8013096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801309a:	f383 8811 	msr	BASEPRI, r3
 801309e:	f3bf 8f6f 	isb	sy
 80130a2:	f3bf 8f4f 	dsb	sy
 80130a6:	60fb      	str	r3, [r7, #12]
}
 80130a8:	bf00      	nop
 80130aa:	bf00      	nop
 80130ac:	e7fd      	b.n	80130aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80130ae:	693b      	ldr	r3, [r7, #16]
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d00b      	beq.n	80130ce <vPortFree+0x66>
	__asm volatile
 80130b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80130ba:	f383 8811 	msr	BASEPRI, r3
 80130be:	f3bf 8f6f 	isb	sy
 80130c2:	f3bf 8f4f 	dsb	sy
 80130c6:	60bb      	str	r3, [r7, #8]
}
 80130c8:	bf00      	nop
 80130ca:	bf00      	nop
 80130cc:	e7fd      	b.n	80130ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80130ce:	693b      	ldr	r3, [r7, #16]
 80130d0:	685a      	ldr	r2, [r3, #4]
 80130d2:	4b14      	ldr	r3, [pc, #80]	@ (8013124 <vPortFree+0xbc>)
 80130d4:	681b      	ldr	r3, [r3, #0]
 80130d6:	4013      	ands	r3, r2
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d01e      	beq.n	801311a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80130dc:	693b      	ldr	r3, [r7, #16]
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d11a      	bne.n	801311a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80130e4:	693b      	ldr	r3, [r7, #16]
 80130e6:	685a      	ldr	r2, [r3, #4]
 80130e8:	4b0e      	ldr	r3, [pc, #56]	@ (8013124 <vPortFree+0xbc>)
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	43db      	mvns	r3, r3
 80130ee:	401a      	ands	r2, r3
 80130f0:	693b      	ldr	r3, [r7, #16]
 80130f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80130f4:	f7fe fbbc 	bl	8011870 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80130f8:	693b      	ldr	r3, [r7, #16]
 80130fa:	685a      	ldr	r2, [r3, #4]
 80130fc:	4b0a      	ldr	r3, [pc, #40]	@ (8013128 <vPortFree+0xc0>)
 80130fe:	681b      	ldr	r3, [r3, #0]
 8013100:	4413      	add	r3, r2
 8013102:	4a09      	ldr	r2, [pc, #36]	@ (8013128 <vPortFree+0xc0>)
 8013104:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013106:	6938      	ldr	r0, [r7, #16]
 8013108:	f000 f874 	bl	80131f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801310c:	4b07      	ldr	r3, [pc, #28]	@ (801312c <vPortFree+0xc4>)
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	3301      	adds	r3, #1
 8013112:	4a06      	ldr	r2, [pc, #24]	@ (801312c <vPortFree+0xc4>)
 8013114:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8013116:	f7fe fbb9 	bl	801188c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801311a:	bf00      	nop
 801311c:	3718      	adds	r7, #24
 801311e:	46bd      	mov	sp, r7
 8013120:	bd80      	pop	{r7, pc}
 8013122:	bf00      	nop
 8013124:	200056a4 	.word	0x200056a4
 8013128:	20005694 	.word	0x20005694
 801312c:	200056a0 	.word	0x200056a0

08013130 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013130:	b480      	push	{r7}
 8013132:	b085      	sub	sp, #20
 8013134:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8013136:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 801313a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801313c:	4b27      	ldr	r3, [pc, #156]	@ (80131dc <prvHeapInit+0xac>)
 801313e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	f003 0307 	and.w	r3, r3, #7
 8013146:	2b00      	cmp	r3, #0
 8013148:	d00c      	beq.n	8013164 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	3307      	adds	r3, #7
 801314e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	f023 0307 	bic.w	r3, r3, #7
 8013156:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013158:	68ba      	ldr	r2, [r7, #8]
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	1ad3      	subs	r3, r2, r3
 801315e:	4a1f      	ldr	r2, [pc, #124]	@ (80131dc <prvHeapInit+0xac>)
 8013160:	4413      	add	r3, r2
 8013162:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013168:	4a1d      	ldr	r2, [pc, #116]	@ (80131e0 <prvHeapInit+0xb0>)
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801316e:	4b1c      	ldr	r3, [pc, #112]	@ (80131e0 <prvHeapInit+0xb0>)
 8013170:	2200      	movs	r2, #0
 8013172:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	68ba      	ldr	r2, [r7, #8]
 8013178:	4413      	add	r3, r2
 801317a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801317c:	2208      	movs	r2, #8
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	1a9b      	subs	r3, r3, r2
 8013182:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	f023 0307 	bic.w	r3, r3, #7
 801318a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	4a15      	ldr	r2, [pc, #84]	@ (80131e4 <prvHeapInit+0xb4>)
 8013190:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013192:	4b14      	ldr	r3, [pc, #80]	@ (80131e4 <prvHeapInit+0xb4>)
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	2200      	movs	r2, #0
 8013198:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801319a:	4b12      	ldr	r3, [pc, #72]	@ (80131e4 <prvHeapInit+0xb4>)
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	2200      	movs	r2, #0
 80131a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80131a6:	683b      	ldr	r3, [r7, #0]
 80131a8:	68fa      	ldr	r2, [r7, #12]
 80131aa:	1ad2      	subs	r2, r2, r3
 80131ac:	683b      	ldr	r3, [r7, #0]
 80131ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80131b0:	4b0c      	ldr	r3, [pc, #48]	@ (80131e4 <prvHeapInit+0xb4>)
 80131b2:	681a      	ldr	r2, [r3, #0]
 80131b4:	683b      	ldr	r3, [r7, #0]
 80131b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80131b8:	683b      	ldr	r3, [r7, #0]
 80131ba:	685b      	ldr	r3, [r3, #4]
 80131bc:	4a0a      	ldr	r2, [pc, #40]	@ (80131e8 <prvHeapInit+0xb8>)
 80131be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80131c0:	683b      	ldr	r3, [r7, #0]
 80131c2:	685b      	ldr	r3, [r3, #4]
 80131c4:	4a09      	ldr	r2, [pc, #36]	@ (80131ec <prvHeapInit+0xbc>)
 80131c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80131c8:	4b09      	ldr	r3, [pc, #36]	@ (80131f0 <prvHeapInit+0xc0>)
 80131ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80131ce:	601a      	str	r2, [r3, #0]
}
 80131d0:	bf00      	nop
 80131d2:	3714      	adds	r7, #20
 80131d4:	46bd      	mov	sp, r7
 80131d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131da:	4770      	bx	lr
 80131dc:	20001a88 	.word	0x20001a88
 80131e0:	20005688 	.word	0x20005688
 80131e4:	20005690 	.word	0x20005690
 80131e8:	20005698 	.word	0x20005698
 80131ec:	20005694 	.word	0x20005694
 80131f0:	200056a4 	.word	0x200056a4

080131f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80131f4:	b480      	push	{r7}
 80131f6:	b085      	sub	sp, #20
 80131f8:	af00      	add	r7, sp, #0
 80131fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80131fc:	4b28      	ldr	r3, [pc, #160]	@ (80132a0 <prvInsertBlockIntoFreeList+0xac>)
 80131fe:	60fb      	str	r3, [r7, #12]
 8013200:	e002      	b.n	8013208 <prvInsertBlockIntoFreeList+0x14>
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	60fb      	str	r3, [r7, #12]
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	687a      	ldr	r2, [r7, #4]
 801320e:	429a      	cmp	r2, r3
 8013210:	d8f7      	bhi.n	8013202 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	685b      	ldr	r3, [r3, #4]
 801321a:	68ba      	ldr	r2, [r7, #8]
 801321c:	4413      	add	r3, r2
 801321e:	687a      	ldr	r2, [r7, #4]
 8013220:	429a      	cmp	r2, r3
 8013222:	d108      	bne.n	8013236 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	685a      	ldr	r2, [r3, #4]
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	685b      	ldr	r3, [r3, #4]
 801322c:	441a      	add	r2, r3
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	685b      	ldr	r3, [r3, #4]
 801323e:	68ba      	ldr	r2, [r7, #8]
 8013240:	441a      	add	r2, r3
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	429a      	cmp	r2, r3
 8013248:	d118      	bne.n	801327c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	681a      	ldr	r2, [r3, #0]
 801324e:	4b15      	ldr	r3, [pc, #84]	@ (80132a4 <prvInsertBlockIntoFreeList+0xb0>)
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	429a      	cmp	r2, r3
 8013254:	d00d      	beq.n	8013272 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	685a      	ldr	r2, [r3, #4]
 801325a:	68fb      	ldr	r3, [r7, #12]
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	685b      	ldr	r3, [r3, #4]
 8013260:	441a      	add	r2, r3
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	681a      	ldr	r2, [r3, #0]
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	601a      	str	r2, [r3, #0]
 8013270:	e008      	b.n	8013284 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013272:	4b0c      	ldr	r3, [pc, #48]	@ (80132a4 <prvInsertBlockIntoFreeList+0xb0>)
 8013274:	681a      	ldr	r2, [r3, #0]
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	601a      	str	r2, [r3, #0]
 801327a:	e003      	b.n	8013284 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	681a      	ldr	r2, [r3, #0]
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013284:	68fa      	ldr	r2, [r7, #12]
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	429a      	cmp	r2, r3
 801328a:	d002      	beq.n	8013292 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	687a      	ldr	r2, [r7, #4]
 8013290:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013292:	bf00      	nop
 8013294:	3714      	adds	r7, #20
 8013296:	46bd      	mov	sp, r7
 8013298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801329c:	4770      	bx	lr
 801329e:	bf00      	nop
 80132a0:	20005688 	.word	0x20005688
 80132a4:	20005690 	.word	0x20005690

080132a8 <malloc>:
 80132a8:	4b02      	ldr	r3, [pc, #8]	@ (80132b4 <malloc+0xc>)
 80132aa:	4601      	mov	r1, r0
 80132ac:	6818      	ldr	r0, [r3, #0]
 80132ae:	f000 b82d 	b.w	801330c <_malloc_r>
 80132b2:	bf00      	nop
 80132b4:	20000164 	.word	0x20000164

080132b8 <free>:
 80132b8:	4b02      	ldr	r3, [pc, #8]	@ (80132c4 <free+0xc>)
 80132ba:	4601      	mov	r1, r0
 80132bc:	6818      	ldr	r0, [r3, #0]
 80132be:	f000 ba07 	b.w	80136d0 <_free_r>
 80132c2:	bf00      	nop
 80132c4:	20000164 	.word	0x20000164

080132c8 <sbrk_aligned>:
 80132c8:	b570      	push	{r4, r5, r6, lr}
 80132ca:	4e0f      	ldr	r6, [pc, #60]	@ (8013308 <sbrk_aligned+0x40>)
 80132cc:	460c      	mov	r4, r1
 80132ce:	6831      	ldr	r1, [r6, #0]
 80132d0:	4605      	mov	r5, r0
 80132d2:	b911      	cbnz	r1, 80132da <sbrk_aligned+0x12>
 80132d4:	f000 f9b2 	bl	801363c <_sbrk_r>
 80132d8:	6030      	str	r0, [r6, #0]
 80132da:	4621      	mov	r1, r4
 80132dc:	4628      	mov	r0, r5
 80132de:	f000 f9ad 	bl	801363c <_sbrk_r>
 80132e2:	1c43      	adds	r3, r0, #1
 80132e4:	d103      	bne.n	80132ee <sbrk_aligned+0x26>
 80132e6:	f04f 34ff 	mov.w	r4, #4294967295
 80132ea:	4620      	mov	r0, r4
 80132ec:	bd70      	pop	{r4, r5, r6, pc}
 80132ee:	1cc4      	adds	r4, r0, #3
 80132f0:	f024 0403 	bic.w	r4, r4, #3
 80132f4:	42a0      	cmp	r0, r4
 80132f6:	d0f8      	beq.n	80132ea <sbrk_aligned+0x22>
 80132f8:	1a21      	subs	r1, r4, r0
 80132fa:	4628      	mov	r0, r5
 80132fc:	f000 f99e 	bl	801363c <_sbrk_r>
 8013300:	3001      	adds	r0, #1
 8013302:	d1f2      	bne.n	80132ea <sbrk_aligned+0x22>
 8013304:	e7ef      	b.n	80132e6 <sbrk_aligned+0x1e>
 8013306:	bf00      	nop
 8013308:	200056a8 	.word	0x200056a8

0801330c <_malloc_r>:
 801330c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013310:	1ccd      	adds	r5, r1, #3
 8013312:	f025 0503 	bic.w	r5, r5, #3
 8013316:	3508      	adds	r5, #8
 8013318:	2d0c      	cmp	r5, #12
 801331a:	bf38      	it	cc
 801331c:	250c      	movcc	r5, #12
 801331e:	2d00      	cmp	r5, #0
 8013320:	4606      	mov	r6, r0
 8013322:	db01      	blt.n	8013328 <_malloc_r+0x1c>
 8013324:	42a9      	cmp	r1, r5
 8013326:	d904      	bls.n	8013332 <_malloc_r+0x26>
 8013328:	230c      	movs	r3, #12
 801332a:	6033      	str	r3, [r6, #0]
 801332c:	2000      	movs	r0, #0
 801332e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013332:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013408 <_malloc_r+0xfc>
 8013336:	f000 f869 	bl	801340c <__malloc_lock>
 801333a:	f8d8 3000 	ldr.w	r3, [r8]
 801333e:	461c      	mov	r4, r3
 8013340:	bb44      	cbnz	r4, 8013394 <_malloc_r+0x88>
 8013342:	4629      	mov	r1, r5
 8013344:	4630      	mov	r0, r6
 8013346:	f7ff ffbf 	bl	80132c8 <sbrk_aligned>
 801334a:	1c43      	adds	r3, r0, #1
 801334c:	4604      	mov	r4, r0
 801334e:	d158      	bne.n	8013402 <_malloc_r+0xf6>
 8013350:	f8d8 4000 	ldr.w	r4, [r8]
 8013354:	4627      	mov	r7, r4
 8013356:	2f00      	cmp	r7, #0
 8013358:	d143      	bne.n	80133e2 <_malloc_r+0xd6>
 801335a:	2c00      	cmp	r4, #0
 801335c:	d04b      	beq.n	80133f6 <_malloc_r+0xea>
 801335e:	6823      	ldr	r3, [r4, #0]
 8013360:	4639      	mov	r1, r7
 8013362:	4630      	mov	r0, r6
 8013364:	eb04 0903 	add.w	r9, r4, r3
 8013368:	f000 f968 	bl	801363c <_sbrk_r>
 801336c:	4581      	cmp	r9, r0
 801336e:	d142      	bne.n	80133f6 <_malloc_r+0xea>
 8013370:	6821      	ldr	r1, [r4, #0]
 8013372:	1a6d      	subs	r5, r5, r1
 8013374:	4629      	mov	r1, r5
 8013376:	4630      	mov	r0, r6
 8013378:	f7ff ffa6 	bl	80132c8 <sbrk_aligned>
 801337c:	3001      	adds	r0, #1
 801337e:	d03a      	beq.n	80133f6 <_malloc_r+0xea>
 8013380:	6823      	ldr	r3, [r4, #0]
 8013382:	442b      	add	r3, r5
 8013384:	6023      	str	r3, [r4, #0]
 8013386:	f8d8 3000 	ldr.w	r3, [r8]
 801338a:	685a      	ldr	r2, [r3, #4]
 801338c:	bb62      	cbnz	r2, 80133e8 <_malloc_r+0xdc>
 801338e:	f8c8 7000 	str.w	r7, [r8]
 8013392:	e00f      	b.n	80133b4 <_malloc_r+0xa8>
 8013394:	6822      	ldr	r2, [r4, #0]
 8013396:	1b52      	subs	r2, r2, r5
 8013398:	d420      	bmi.n	80133dc <_malloc_r+0xd0>
 801339a:	2a0b      	cmp	r2, #11
 801339c:	d917      	bls.n	80133ce <_malloc_r+0xc2>
 801339e:	1961      	adds	r1, r4, r5
 80133a0:	42a3      	cmp	r3, r4
 80133a2:	6025      	str	r5, [r4, #0]
 80133a4:	bf18      	it	ne
 80133a6:	6059      	strne	r1, [r3, #4]
 80133a8:	6863      	ldr	r3, [r4, #4]
 80133aa:	bf08      	it	eq
 80133ac:	f8c8 1000 	streq.w	r1, [r8]
 80133b0:	5162      	str	r2, [r4, r5]
 80133b2:	604b      	str	r3, [r1, #4]
 80133b4:	4630      	mov	r0, r6
 80133b6:	f000 f82f 	bl	8013418 <__malloc_unlock>
 80133ba:	f104 000b 	add.w	r0, r4, #11
 80133be:	1d23      	adds	r3, r4, #4
 80133c0:	f020 0007 	bic.w	r0, r0, #7
 80133c4:	1ac2      	subs	r2, r0, r3
 80133c6:	bf1c      	itt	ne
 80133c8:	1a1b      	subne	r3, r3, r0
 80133ca:	50a3      	strne	r3, [r4, r2]
 80133cc:	e7af      	b.n	801332e <_malloc_r+0x22>
 80133ce:	6862      	ldr	r2, [r4, #4]
 80133d0:	42a3      	cmp	r3, r4
 80133d2:	bf0c      	ite	eq
 80133d4:	f8c8 2000 	streq.w	r2, [r8]
 80133d8:	605a      	strne	r2, [r3, #4]
 80133da:	e7eb      	b.n	80133b4 <_malloc_r+0xa8>
 80133dc:	4623      	mov	r3, r4
 80133de:	6864      	ldr	r4, [r4, #4]
 80133e0:	e7ae      	b.n	8013340 <_malloc_r+0x34>
 80133e2:	463c      	mov	r4, r7
 80133e4:	687f      	ldr	r7, [r7, #4]
 80133e6:	e7b6      	b.n	8013356 <_malloc_r+0x4a>
 80133e8:	461a      	mov	r2, r3
 80133ea:	685b      	ldr	r3, [r3, #4]
 80133ec:	42a3      	cmp	r3, r4
 80133ee:	d1fb      	bne.n	80133e8 <_malloc_r+0xdc>
 80133f0:	2300      	movs	r3, #0
 80133f2:	6053      	str	r3, [r2, #4]
 80133f4:	e7de      	b.n	80133b4 <_malloc_r+0xa8>
 80133f6:	230c      	movs	r3, #12
 80133f8:	6033      	str	r3, [r6, #0]
 80133fa:	4630      	mov	r0, r6
 80133fc:	f000 f80c 	bl	8013418 <__malloc_unlock>
 8013400:	e794      	b.n	801332c <_malloc_r+0x20>
 8013402:	6005      	str	r5, [r0, #0]
 8013404:	e7d6      	b.n	80133b4 <_malloc_r+0xa8>
 8013406:	bf00      	nop
 8013408:	200056ac 	.word	0x200056ac

0801340c <__malloc_lock>:
 801340c:	4801      	ldr	r0, [pc, #4]	@ (8013414 <__malloc_lock+0x8>)
 801340e:	f000 b94f 	b.w	80136b0 <__retarget_lock_acquire_recursive>
 8013412:	bf00      	nop
 8013414:	200057ec 	.word	0x200057ec

08013418 <__malloc_unlock>:
 8013418:	4801      	ldr	r0, [pc, #4]	@ (8013420 <__malloc_unlock+0x8>)
 801341a:	f000 b94a 	b.w	80136b2 <__retarget_lock_release_recursive>
 801341e:	bf00      	nop
 8013420:	200057ec 	.word	0x200057ec

08013424 <_strtol_l.isra.0>:
 8013424:	2b24      	cmp	r3, #36	@ 0x24
 8013426:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801342a:	4686      	mov	lr, r0
 801342c:	4690      	mov	r8, r2
 801342e:	d801      	bhi.n	8013434 <_strtol_l.isra.0+0x10>
 8013430:	2b01      	cmp	r3, #1
 8013432:	d106      	bne.n	8013442 <_strtol_l.isra.0+0x1e>
 8013434:	f000 f912 	bl	801365c <__errno>
 8013438:	2316      	movs	r3, #22
 801343a:	6003      	str	r3, [r0, #0]
 801343c:	2000      	movs	r0, #0
 801343e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013442:	4834      	ldr	r0, [pc, #208]	@ (8013514 <_strtol_l.isra.0+0xf0>)
 8013444:	460d      	mov	r5, r1
 8013446:	462a      	mov	r2, r5
 8013448:	f815 4b01 	ldrb.w	r4, [r5], #1
 801344c:	5d06      	ldrb	r6, [r0, r4]
 801344e:	f016 0608 	ands.w	r6, r6, #8
 8013452:	d1f8      	bne.n	8013446 <_strtol_l.isra.0+0x22>
 8013454:	2c2d      	cmp	r4, #45	@ 0x2d
 8013456:	d110      	bne.n	801347a <_strtol_l.isra.0+0x56>
 8013458:	782c      	ldrb	r4, [r5, #0]
 801345a:	2601      	movs	r6, #1
 801345c:	1c95      	adds	r5, r2, #2
 801345e:	f033 0210 	bics.w	r2, r3, #16
 8013462:	d115      	bne.n	8013490 <_strtol_l.isra.0+0x6c>
 8013464:	2c30      	cmp	r4, #48	@ 0x30
 8013466:	d10d      	bne.n	8013484 <_strtol_l.isra.0+0x60>
 8013468:	782a      	ldrb	r2, [r5, #0]
 801346a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801346e:	2a58      	cmp	r2, #88	@ 0x58
 8013470:	d108      	bne.n	8013484 <_strtol_l.isra.0+0x60>
 8013472:	786c      	ldrb	r4, [r5, #1]
 8013474:	3502      	adds	r5, #2
 8013476:	2310      	movs	r3, #16
 8013478:	e00a      	b.n	8013490 <_strtol_l.isra.0+0x6c>
 801347a:	2c2b      	cmp	r4, #43	@ 0x2b
 801347c:	bf04      	itt	eq
 801347e:	782c      	ldrbeq	r4, [r5, #0]
 8013480:	1c95      	addeq	r5, r2, #2
 8013482:	e7ec      	b.n	801345e <_strtol_l.isra.0+0x3a>
 8013484:	2b00      	cmp	r3, #0
 8013486:	d1f6      	bne.n	8013476 <_strtol_l.isra.0+0x52>
 8013488:	2c30      	cmp	r4, #48	@ 0x30
 801348a:	bf14      	ite	ne
 801348c:	230a      	movne	r3, #10
 801348e:	2308      	moveq	r3, #8
 8013490:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8013494:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013498:	2200      	movs	r2, #0
 801349a:	fbbc f9f3 	udiv	r9, ip, r3
 801349e:	4610      	mov	r0, r2
 80134a0:	fb03 ca19 	mls	sl, r3, r9, ip
 80134a4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80134a8:	2f09      	cmp	r7, #9
 80134aa:	d80f      	bhi.n	80134cc <_strtol_l.isra.0+0xa8>
 80134ac:	463c      	mov	r4, r7
 80134ae:	42a3      	cmp	r3, r4
 80134b0:	dd1b      	ble.n	80134ea <_strtol_l.isra.0+0xc6>
 80134b2:	1c57      	adds	r7, r2, #1
 80134b4:	d007      	beq.n	80134c6 <_strtol_l.isra.0+0xa2>
 80134b6:	4581      	cmp	r9, r0
 80134b8:	d314      	bcc.n	80134e4 <_strtol_l.isra.0+0xc0>
 80134ba:	d101      	bne.n	80134c0 <_strtol_l.isra.0+0x9c>
 80134bc:	45a2      	cmp	sl, r4
 80134be:	db11      	blt.n	80134e4 <_strtol_l.isra.0+0xc0>
 80134c0:	fb00 4003 	mla	r0, r0, r3, r4
 80134c4:	2201      	movs	r2, #1
 80134c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80134ca:	e7eb      	b.n	80134a4 <_strtol_l.isra.0+0x80>
 80134cc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80134d0:	2f19      	cmp	r7, #25
 80134d2:	d801      	bhi.n	80134d8 <_strtol_l.isra.0+0xb4>
 80134d4:	3c37      	subs	r4, #55	@ 0x37
 80134d6:	e7ea      	b.n	80134ae <_strtol_l.isra.0+0x8a>
 80134d8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80134dc:	2f19      	cmp	r7, #25
 80134de:	d804      	bhi.n	80134ea <_strtol_l.isra.0+0xc6>
 80134e0:	3c57      	subs	r4, #87	@ 0x57
 80134e2:	e7e4      	b.n	80134ae <_strtol_l.isra.0+0x8a>
 80134e4:	f04f 32ff 	mov.w	r2, #4294967295
 80134e8:	e7ed      	b.n	80134c6 <_strtol_l.isra.0+0xa2>
 80134ea:	1c53      	adds	r3, r2, #1
 80134ec:	d108      	bne.n	8013500 <_strtol_l.isra.0+0xdc>
 80134ee:	2322      	movs	r3, #34	@ 0x22
 80134f0:	f8ce 3000 	str.w	r3, [lr]
 80134f4:	4660      	mov	r0, ip
 80134f6:	f1b8 0f00 	cmp.w	r8, #0
 80134fa:	d0a0      	beq.n	801343e <_strtol_l.isra.0+0x1a>
 80134fc:	1e69      	subs	r1, r5, #1
 80134fe:	e006      	b.n	801350e <_strtol_l.isra.0+0xea>
 8013500:	b106      	cbz	r6, 8013504 <_strtol_l.isra.0+0xe0>
 8013502:	4240      	negs	r0, r0
 8013504:	f1b8 0f00 	cmp.w	r8, #0
 8013508:	d099      	beq.n	801343e <_strtol_l.isra.0+0x1a>
 801350a:	2a00      	cmp	r2, #0
 801350c:	d1f6      	bne.n	80134fc <_strtol_l.isra.0+0xd8>
 801350e:	f8c8 1000 	str.w	r1, [r8]
 8013512:	e794      	b.n	801343e <_strtol_l.isra.0+0x1a>
 8013514:	080141ed 	.word	0x080141ed

08013518 <strtol>:
 8013518:	4613      	mov	r3, r2
 801351a:	460a      	mov	r2, r1
 801351c:	4601      	mov	r1, r0
 801351e:	4802      	ldr	r0, [pc, #8]	@ (8013528 <strtol+0x10>)
 8013520:	6800      	ldr	r0, [r0, #0]
 8013522:	f7ff bf7f 	b.w	8013424 <_strtol_l.isra.0>
 8013526:	bf00      	nop
 8013528:	20000164 	.word	0x20000164

0801352c <siprintf>:
 801352c:	b40e      	push	{r1, r2, r3}
 801352e:	b510      	push	{r4, lr}
 8013530:	b09d      	sub	sp, #116	@ 0x74
 8013532:	ab1f      	add	r3, sp, #124	@ 0x7c
 8013534:	9002      	str	r0, [sp, #8]
 8013536:	9006      	str	r0, [sp, #24]
 8013538:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801353c:	480a      	ldr	r0, [pc, #40]	@ (8013568 <siprintf+0x3c>)
 801353e:	9107      	str	r1, [sp, #28]
 8013540:	9104      	str	r1, [sp, #16]
 8013542:	490a      	ldr	r1, [pc, #40]	@ (801356c <siprintf+0x40>)
 8013544:	f853 2b04 	ldr.w	r2, [r3], #4
 8013548:	9105      	str	r1, [sp, #20]
 801354a:	2400      	movs	r4, #0
 801354c:	a902      	add	r1, sp, #8
 801354e:	6800      	ldr	r0, [r0, #0]
 8013550:	9301      	str	r3, [sp, #4]
 8013552:	941b      	str	r4, [sp, #108]	@ 0x6c
 8013554:	f000 f962 	bl	801381c <_svfiprintf_r>
 8013558:	9b02      	ldr	r3, [sp, #8]
 801355a:	701c      	strb	r4, [r3, #0]
 801355c:	b01d      	add	sp, #116	@ 0x74
 801355e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013562:	b003      	add	sp, #12
 8013564:	4770      	bx	lr
 8013566:	bf00      	nop
 8013568:	20000164 	.word	0x20000164
 801356c:	ffff0208 	.word	0xffff0208

08013570 <memset>:
 8013570:	4402      	add	r2, r0
 8013572:	4603      	mov	r3, r0
 8013574:	4293      	cmp	r3, r2
 8013576:	d100      	bne.n	801357a <memset+0xa>
 8013578:	4770      	bx	lr
 801357a:	f803 1b01 	strb.w	r1, [r3], #1
 801357e:	e7f9      	b.n	8013574 <memset+0x4>

08013580 <_reclaim_reent>:
 8013580:	4b2d      	ldr	r3, [pc, #180]	@ (8013638 <_reclaim_reent+0xb8>)
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	4283      	cmp	r3, r0
 8013586:	b570      	push	{r4, r5, r6, lr}
 8013588:	4604      	mov	r4, r0
 801358a:	d053      	beq.n	8013634 <_reclaim_reent+0xb4>
 801358c:	69c3      	ldr	r3, [r0, #28]
 801358e:	b31b      	cbz	r3, 80135d8 <_reclaim_reent+0x58>
 8013590:	68db      	ldr	r3, [r3, #12]
 8013592:	b163      	cbz	r3, 80135ae <_reclaim_reent+0x2e>
 8013594:	2500      	movs	r5, #0
 8013596:	69e3      	ldr	r3, [r4, #28]
 8013598:	68db      	ldr	r3, [r3, #12]
 801359a:	5959      	ldr	r1, [r3, r5]
 801359c:	b9b1      	cbnz	r1, 80135cc <_reclaim_reent+0x4c>
 801359e:	3504      	adds	r5, #4
 80135a0:	2d80      	cmp	r5, #128	@ 0x80
 80135a2:	d1f8      	bne.n	8013596 <_reclaim_reent+0x16>
 80135a4:	69e3      	ldr	r3, [r4, #28]
 80135a6:	4620      	mov	r0, r4
 80135a8:	68d9      	ldr	r1, [r3, #12]
 80135aa:	f000 f891 	bl	80136d0 <_free_r>
 80135ae:	69e3      	ldr	r3, [r4, #28]
 80135b0:	6819      	ldr	r1, [r3, #0]
 80135b2:	b111      	cbz	r1, 80135ba <_reclaim_reent+0x3a>
 80135b4:	4620      	mov	r0, r4
 80135b6:	f000 f88b 	bl	80136d0 <_free_r>
 80135ba:	69e3      	ldr	r3, [r4, #28]
 80135bc:	689d      	ldr	r5, [r3, #8]
 80135be:	b15d      	cbz	r5, 80135d8 <_reclaim_reent+0x58>
 80135c0:	4629      	mov	r1, r5
 80135c2:	4620      	mov	r0, r4
 80135c4:	682d      	ldr	r5, [r5, #0]
 80135c6:	f000 f883 	bl	80136d0 <_free_r>
 80135ca:	e7f8      	b.n	80135be <_reclaim_reent+0x3e>
 80135cc:	680e      	ldr	r6, [r1, #0]
 80135ce:	4620      	mov	r0, r4
 80135d0:	f000 f87e 	bl	80136d0 <_free_r>
 80135d4:	4631      	mov	r1, r6
 80135d6:	e7e1      	b.n	801359c <_reclaim_reent+0x1c>
 80135d8:	6961      	ldr	r1, [r4, #20]
 80135da:	b111      	cbz	r1, 80135e2 <_reclaim_reent+0x62>
 80135dc:	4620      	mov	r0, r4
 80135de:	f000 f877 	bl	80136d0 <_free_r>
 80135e2:	69e1      	ldr	r1, [r4, #28]
 80135e4:	b111      	cbz	r1, 80135ec <_reclaim_reent+0x6c>
 80135e6:	4620      	mov	r0, r4
 80135e8:	f000 f872 	bl	80136d0 <_free_r>
 80135ec:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80135ee:	b111      	cbz	r1, 80135f6 <_reclaim_reent+0x76>
 80135f0:	4620      	mov	r0, r4
 80135f2:	f000 f86d 	bl	80136d0 <_free_r>
 80135f6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80135f8:	b111      	cbz	r1, 8013600 <_reclaim_reent+0x80>
 80135fa:	4620      	mov	r0, r4
 80135fc:	f000 f868 	bl	80136d0 <_free_r>
 8013600:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8013602:	b111      	cbz	r1, 801360a <_reclaim_reent+0x8a>
 8013604:	4620      	mov	r0, r4
 8013606:	f000 f863 	bl	80136d0 <_free_r>
 801360a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801360c:	b111      	cbz	r1, 8013614 <_reclaim_reent+0x94>
 801360e:	4620      	mov	r0, r4
 8013610:	f000 f85e 	bl	80136d0 <_free_r>
 8013614:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8013616:	b111      	cbz	r1, 801361e <_reclaim_reent+0x9e>
 8013618:	4620      	mov	r0, r4
 801361a:	f000 f859 	bl	80136d0 <_free_r>
 801361e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8013620:	b111      	cbz	r1, 8013628 <_reclaim_reent+0xa8>
 8013622:	4620      	mov	r0, r4
 8013624:	f000 f854 	bl	80136d0 <_free_r>
 8013628:	6a23      	ldr	r3, [r4, #32]
 801362a:	b11b      	cbz	r3, 8013634 <_reclaim_reent+0xb4>
 801362c:	4620      	mov	r0, r4
 801362e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013632:	4718      	bx	r3
 8013634:	bd70      	pop	{r4, r5, r6, pc}
 8013636:	bf00      	nop
 8013638:	20000164 	.word	0x20000164

0801363c <_sbrk_r>:
 801363c:	b538      	push	{r3, r4, r5, lr}
 801363e:	4d06      	ldr	r5, [pc, #24]	@ (8013658 <_sbrk_r+0x1c>)
 8013640:	2300      	movs	r3, #0
 8013642:	4604      	mov	r4, r0
 8013644:	4608      	mov	r0, r1
 8013646:	602b      	str	r3, [r5, #0]
 8013648:	f7f6 ffb4 	bl	800a5b4 <_sbrk>
 801364c:	1c43      	adds	r3, r0, #1
 801364e:	d102      	bne.n	8013656 <_sbrk_r+0x1a>
 8013650:	682b      	ldr	r3, [r5, #0]
 8013652:	b103      	cbz	r3, 8013656 <_sbrk_r+0x1a>
 8013654:	6023      	str	r3, [r4, #0]
 8013656:	bd38      	pop	{r3, r4, r5, pc}
 8013658:	200057e8 	.word	0x200057e8

0801365c <__errno>:
 801365c:	4b01      	ldr	r3, [pc, #4]	@ (8013664 <__errno+0x8>)
 801365e:	6818      	ldr	r0, [r3, #0]
 8013660:	4770      	bx	lr
 8013662:	bf00      	nop
 8013664:	20000164 	.word	0x20000164

08013668 <__libc_init_array>:
 8013668:	b570      	push	{r4, r5, r6, lr}
 801366a:	4d0d      	ldr	r5, [pc, #52]	@ (80136a0 <__libc_init_array+0x38>)
 801366c:	4c0d      	ldr	r4, [pc, #52]	@ (80136a4 <__libc_init_array+0x3c>)
 801366e:	1b64      	subs	r4, r4, r5
 8013670:	10a4      	asrs	r4, r4, #2
 8013672:	2600      	movs	r6, #0
 8013674:	42a6      	cmp	r6, r4
 8013676:	d109      	bne.n	801368c <__libc_init_array+0x24>
 8013678:	4d0b      	ldr	r5, [pc, #44]	@ (80136a8 <__libc_init_array+0x40>)
 801367a:	4c0c      	ldr	r4, [pc, #48]	@ (80136ac <__libc_init_array+0x44>)
 801367c:	f000 fca8 	bl	8013fd0 <_init>
 8013680:	1b64      	subs	r4, r4, r5
 8013682:	10a4      	asrs	r4, r4, #2
 8013684:	2600      	movs	r6, #0
 8013686:	42a6      	cmp	r6, r4
 8013688:	d105      	bne.n	8013696 <__libc_init_array+0x2e>
 801368a:	bd70      	pop	{r4, r5, r6, pc}
 801368c:	f855 3b04 	ldr.w	r3, [r5], #4
 8013690:	4798      	blx	r3
 8013692:	3601      	adds	r6, #1
 8013694:	e7ee      	b.n	8013674 <__libc_init_array+0xc>
 8013696:	f855 3b04 	ldr.w	r3, [r5], #4
 801369a:	4798      	blx	r3
 801369c:	3601      	adds	r6, #1
 801369e:	e7f2      	b.n	8013686 <__libc_init_array+0x1e>
 80136a0:	08014338 	.word	0x08014338
 80136a4:	08014338 	.word	0x08014338
 80136a8:	08014338 	.word	0x08014338
 80136ac:	0801433c 	.word	0x0801433c

080136b0 <__retarget_lock_acquire_recursive>:
 80136b0:	4770      	bx	lr

080136b2 <__retarget_lock_release_recursive>:
 80136b2:	4770      	bx	lr

080136b4 <memcpy>:
 80136b4:	440a      	add	r2, r1
 80136b6:	4291      	cmp	r1, r2
 80136b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80136bc:	d100      	bne.n	80136c0 <memcpy+0xc>
 80136be:	4770      	bx	lr
 80136c0:	b510      	push	{r4, lr}
 80136c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80136c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80136ca:	4291      	cmp	r1, r2
 80136cc:	d1f9      	bne.n	80136c2 <memcpy+0xe>
 80136ce:	bd10      	pop	{r4, pc}

080136d0 <_free_r>:
 80136d0:	b538      	push	{r3, r4, r5, lr}
 80136d2:	4605      	mov	r5, r0
 80136d4:	2900      	cmp	r1, #0
 80136d6:	d041      	beq.n	801375c <_free_r+0x8c>
 80136d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80136dc:	1f0c      	subs	r4, r1, #4
 80136de:	2b00      	cmp	r3, #0
 80136e0:	bfb8      	it	lt
 80136e2:	18e4      	addlt	r4, r4, r3
 80136e4:	f7ff fe92 	bl	801340c <__malloc_lock>
 80136e8:	4a1d      	ldr	r2, [pc, #116]	@ (8013760 <_free_r+0x90>)
 80136ea:	6813      	ldr	r3, [r2, #0]
 80136ec:	b933      	cbnz	r3, 80136fc <_free_r+0x2c>
 80136ee:	6063      	str	r3, [r4, #4]
 80136f0:	6014      	str	r4, [r2, #0]
 80136f2:	4628      	mov	r0, r5
 80136f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80136f8:	f7ff be8e 	b.w	8013418 <__malloc_unlock>
 80136fc:	42a3      	cmp	r3, r4
 80136fe:	d908      	bls.n	8013712 <_free_r+0x42>
 8013700:	6820      	ldr	r0, [r4, #0]
 8013702:	1821      	adds	r1, r4, r0
 8013704:	428b      	cmp	r3, r1
 8013706:	bf01      	itttt	eq
 8013708:	6819      	ldreq	r1, [r3, #0]
 801370a:	685b      	ldreq	r3, [r3, #4]
 801370c:	1809      	addeq	r1, r1, r0
 801370e:	6021      	streq	r1, [r4, #0]
 8013710:	e7ed      	b.n	80136ee <_free_r+0x1e>
 8013712:	461a      	mov	r2, r3
 8013714:	685b      	ldr	r3, [r3, #4]
 8013716:	b10b      	cbz	r3, 801371c <_free_r+0x4c>
 8013718:	42a3      	cmp	r3, r4
 801371a:	d9fa      	bls.n	8013712 <_free_r+0x42>
 801371c:	6811      	ldr	r1, [r2, #0]
 801371e:	1850      	adds	r0, r2, r1
 8013720:	42a0      	cmp	r0, r4
 8013722:	d10b      	bne.n	801373c <_free_r+0x6c>
 8013724:	6820      	ldr	r0, [r4, #0]
 8013726:	4401      	add	r1, r0
 8013728:	1850      	adds	r0, r2, r1
 801372a:	4283      	cmp	r3, r0
 801372c:	6011      	str	r1, [r2, #0]
 801372e:	d1e0      	bne.n	80136f2 <_free_r+0x22>
 8013730:	6818      	ldr	r0, [r3, #0]
 8013732:	685b      	ldr	r3, [r3, #4]
 8013734:	6053      	str	r3, [r2, #4]
 8013736:	4408      	add	r0, r1
 8013738:	6010      	str	r0, [r2, #0]
 801373a:	e7da      	b.n	80136f2 <_free_r+0x22>
 801373c:	d902      	bls.n	8013744 <_free_r+0x74>
 801373e:	230c      	movs	r3, #12
 8013740:	602b      	str	r3, [r5, #0]
 8013742:	e7d6      	b.n	80136f2 <_free_r+0x22>
 8013744:	6820      	ldr	r0, [r4, #0]
 8013746:	1821      	adds	r1, r4, r0
 8013748:	428b      	cmp	r3, r1
 801374a:	bf04      	itt	eq
 801374c:	6819      	ldreq	r1, [r3, #0]
 801374e:	685b      	ldreq	r3, [r3, #4]
 8013750:	6063      	str	r3, [r4, #4]
 8013752:	bf04      	itt	eq
 8013754:	1809      	addeq	r1, r1, r0
 8013756:	6021      	streq	r1, [r4, #0]
 8013758:	6054      	str	r4, [r2, #4]
 801375a:	e7ca      	b.n	80136f2 <_free_r+0x22>
 801375c:	bd38      	pop	{r3, r4, r5, pc}
 801375e:	bf00      	nop
 8013760:	200056ac 	.word	0x200056ac

08013764 <__ssputs_r>:
 8013764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013768:	688e      	ldr	r6, [r1, #8]
 801376a:	461f      	mov	r7, r3
 801376c:	42be      	cmp	r6, r7
 801376e:	680b      	ldr	r3, [r1, #0]
 8013770:	4682      	mov	sl, r0
 8013772:	460c      	mov	r4, r1
 8013774:	4690      	mov	r8, r2
 8013776:	d82d      	bhi.n	80137d4 <__ssputs_r+0x70>
 8013778:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801377c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013780:	d026      	beq.n	80137d0 <__ssputs_r+0x6c>
 8013782:	6965      	ldr	r5, [r4, #20]
 8013784:	6909      	ldr	r1, [r1, #16]
 8013786:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801378a:	eba3 0901 	sub.w	r9, r3, r1
 801378e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013792:	1c7b      	adds	r3, r7, #1
 8013794:	444b      	add	r3, r9
 8013796:	106d      	asrs	r5, r5, #1
 8013798:	429d      	cmp	r5, r3
 801379a:	bf38      	it	cc
 801379c:	461d      	movcc	r5, r3
 801379e:	0553      	lsls	r3, r2, #21
 80137a0:	d527      	bpl.n	80137f2 <__ssputs_r+0x8e>
 80137a2:	4629      	mov	r1, r5
 80137a4:	f7ff fdb2 	bl	801330c <_malloc_r>
 80137a8:	4606      	mov	r6, r0
 80137aa:	b360      	cbz	r0, 8013806 <__ssputs_r+0xa2>
 80137ac:	6921      	ldr	r1, [r4, #16]
 80137ae:	464a      	mov	r2, r9
 80137b0:	f7ff ff80 	bl	80136b4 <memcpy>
 80137b4:	89a3      	ldrh	r3, [r4, #12]
 80137b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80137ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80137be:	81a3      	strh	r3, [r4, #12]
 80137c0:	6126      	str	r6, [r4, #16]
 80137c2:	6165      	str	r5, [r4, #20]
 80137c4:	444e      	add	r6, r9
 80137c6:	eba5 0509 	sub.w	r5, r5, r9
 80137ca:	6026      	str	r6, [r4, #0]
 80137cc:	60a5      	str	r5, [r4, #8]
 80137ce:	463e      	mov	r6, r7
 80137d0:	42be      	cmp	r6, r7
 80137d2:	d900      	bls.n	80137d6 <__ssputs_r+0x72>
 80137d4:	463e      	mov	r6, r7
 80137d6:	6820      	ldr	r0, [r4, #0]
 80137d8:	4632      	mov	r2, r6
 80137da:	4641      	mov	r1, r8
 80137dc:	f000 faa6 	bl	8013d2c <memmove>
 80137e0:	68a3      	ldr	r3, [r4, #8]
 80137e2:	1b9b      	subs	r3, r3, r6
 80137e4:	60a3      	str	r3, [r4, #8]
 80137e6:	6823      	ldr	r3, [r4, #0]
 80137e8:	4433      	add	r3, r6
 80137ea:	6023      	str	r3, [r4, #0]
 80137ec:	2000      	movs	r0, #0
 80137ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80137f2:	462a      	mov	r2, r5
 80137f4:	f000 fab4 	bl	8013d60 <_realloc_r>
 80137f8:	4606      	mov	r6, r0
 80137fa:	2800      	cmp	r0, #0
 80137fc:	d1e0      	bne.n	80137c0 <__ssputs_r+0x5c>
 80137fe:	6921      	ldr	r1, [r4, #16]
 8013800:	4650      	mov	r0, sl
 8013802:	f7ff ff65 	bl	80136d0 <_free_r>
 8013806:	230c      	movs	r3, #12
 8013808:	f8ca 3000 	str.w	r3, [sl]
 801380c:	89a3      	ldrh	r3, [r4, #12]
 801380e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013812:	81a3      	strh	r3, [r4, #12]
 8013814:	f04f 30ff 	mov.w	r0, #4294967295
 8013818:	e7e9      	b.n	80137ee <__ssputs_r+0x8a>
	...

0801381c <_svfiprintf_r>:
 801381c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013820:	4698      	mov	r8, r3
 8013822:	898b      	ldrh	r3, [r1, #12]
 8013824:	061b      	lsls	r3, r3, #24
 8013826:	b09d      	sub	sp, #116	@ 0x74
 8013828:	4607      	mov	r7, r0
 801382a:	460d      	mov	r5, r1
 801382c:	4614      	mov	r4, r2
 801382e:	d510      	bpl.n	8013852 <_svfiprintf_r+0x36>
 8013830:	690b      	ldr	r3, [r1, #16]
 8013832:	b973      	cbnz	r3, 8013852 <_svfiprintf_r+0x36>
 8013834:	2140      	movs	r1, #64	@ 0x40
 8013836:	f7ff fd69 	bl	801330c <_malloc_r>
 801383a:	6028      	str	r0, [r5, #0]
 801383c:	6128      	str	r0, [r5, #16]
 801383e:	b930      	cbnz	r0, 801384e <_svfiprintf_r+0x32>
 8013840:	230c      	movs	r3, #12
 8013842:	603b      	str	r3, [r7, #0]
 8013844:	f04f 30ff 	mov.w	r0, #4294967295
 8013848:	b01d      	add	sp, #116	@ 0x74
 801384a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801384e:	2340      	movs	r3, #64	@ 0x40
 8013850:	616b      	str	r3, [r5, #20]
 8013852:	2300      	movs	r3, #0
 8013854:	9309      	str	r3, [sp, #36]	@ 0x24
 8013856:	2320      	movs	r3, #32
 8013858:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801385c:	f8cd 800c 	str.w	r8, [sp, #12]
 8013860:	2330      	movs	r3, #48	@ 0x30
 8013862:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013a00 <_svfiprintf_r+0x1e4>
 8013866:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801386a:	f04f 0901 	mov.w	r9, #1
 801386e:	4623      	mov	r3, r4
 8013870:	469a      	mov	sl, r3
 8013872:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013876:	b10a      	cbz	r2, 801387c <_svfiprintf_r+0x60>
 8013878:	2a25      	cmp	r2, #37	@ 0x25
 801387a:	d1f9      	bne.n	8013870 <_svfiprintf_r+0x54>
 801387c:	ebba 0b04 	subs.w	fp, sl, r4
 8013880:	d00b      	beq.n	801389a <_svfiprintf_r+0x7e>
 8013882:	465b      	mov	r3, fp
 8013884:	4622      	mov	r2, r4
 8013886:	4629      	mov	r1, r5
 8013888:	4638      	mov	r0, r7
 801388a:	f7ff ff6b 	bl	8013764 <__ssputs_r>
 801388e:	3001      	adds	r0, #1
 8013890:	f000 80a7 	beq.w	80139e2 <_svfiprintf_r+0x1c6>
 8013894:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013896:	445a      	add	r2, fp
 8013898:	9209      	str	r2, [sp, #36]	@ 0x24
 801389a:	f89a 3000 	ldrb.w	r3, [sl]
 801389e:	2b00      	cmp	r3, #0
 80138a0:	f000 809f 	beq.w	80139e2 <_svfiprintf_r+0x1c6>
 80138a4:	2300      	movs	r3, #0
 80138a6:	f04f 32ff 	mov.w	r2, #4294967295
 80138aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80138ae:	f10a 0a01 	add.w	sl, sl, #1
 80138b2:	9304      	str	r3, [sp, #16]
 80138b4:	9307      	str	r3, [sp, #28]
 80138b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80138ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80138bc:	4654      	mov	r4, sl
 80138be:	2205      	movs	r2, #5
 80138c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80138c4:	484e      	ldr	r0, [pc, #312]	@ (8013a00 <_svfiprintf_r+0x1e4>)
 80138c6:	f7ec fc83 	bl	80001d0 <memchr>
 80138ca:	9a04      	ldr	r2, [sp, #16]
 80138cc:	b9d8      	cbnz	r0, 8013906 <_svfiprintf_r+0xea>
 80138ce:	06d0      	lsls	r0, r2, #27
 80138d0:	bf44      	itt	mi
 80138d2:	2320      	movmi	r3, #32
 80138d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80138d8:	0711      	lsls	r1, r2, #28
 80138da:	bf44      	itt	mi
 80138dc:	232b      	movmi	r3, #43	@ 0x2b
 80138de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80138e2:	f89a 3000 	ldrb.w	r3, [sl]
 80138e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80138e8:	d015      	beq.n	8013916 <_svfiprintf_r+0xfa>
 80138ea:	9a07      	ldr	r2, [sp, #28]
 80138ec:	4654      	mov	r4, sl
 80138ee:	2000      	movs	r0, #0
 80138f0:	f04f 0c0a 	mov.w	ip, #10
 80138f4:	4621      	mov	r1, r4
 80138f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80138fa:	3b30      	subs	r3, #48	@ 0x30
 80138fc:	2b09      	cmp	r3, #9
 80138fe:	d94b      	bls.n	8013998 <_svfiprintf_r+0x17c>
 8013900:	b1b0      	cbz	r0, 8013930 <_svfiprintf_r+0x114>
 8013902:	9207      	str	r2, [sp, #28]
 8013904:	e014      	b.n	8013930 <_svfiprintf_r+0x114>
 8013906:	eba0 0308 	sub.w	r3, r0, r8
 801390a:	fa09 f303 	lsl.w	r3, r9, r3
 801390e:	4313      	orrs	r3, r2
 8013910:	9304      	str	r3, [sp, #16]
 8013912:	46a2      	mov	sl, r4
 8013914:	e7d2      	b.n	80138bc <_svfiprintf_r+0xa0>
 8013916:	9b03      	ldr	r3, [sp, #12]
 8013918:	1d19      	adds	r1, r3, #4
 801391a:	681b      	ldr	r3, [r3, #0]
 801391c:	9103      	str	r1, [sp, #12]
 801391e:	2b00      	cmp	r3, #0
 8013920:	bfbb      	ittet	lt
 8013922:	425b      	neglt	r3, r3
 8013924:	f042 0202 	orrlt.w	r2, r2, #2
 8013928:	9307      	strge	r3, [sp, #28]
 801392a:	9307      	strlt	r3, [sp, #28]
 801392c:	bfb8      	it	lt
 801392e:	9204      	strlt	r2, [sp, #16]
 8013930:	7823      	ldrb	r3, [r4, #0]
 8013932:	2b2e      	cmp	r3, #46	@ 0x2e
 8013934:	d10a      	bne.n	801394c <_svfiprintf_r+0x130>
 8013936:	7863      	ldrb	r3, [r4, #1]
 8013938:	2b2a      	cmp	r3, #42	@ 0x2a
 801393a:	d132      	bne.n	80139a2 <_svfiprintf_r+0x186>
 801393c:	9b03      	ldr	r3, [sp, #12]
 801393e:	1d1a      	adds	r2, r3, #4
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	9203      	str	r2, [sp, #12]
 8013944:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013948:	3402      	adds	r4, #2
 801394a:	9305      	str	r3, [sp, #20]
 801394c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013a10 <_svfiprintf_r+0x1f4>
 8013950:	7821      	ldrb	r1, [r4, #0]
 8013952:	2203      	movs	r2, #3
 8013954:	4650      	mov	r0, sl
 8013956:	f7ec fc3b 	bl	80001d0 <memchr>
 801395a:	b138      	cbz	r0, 801396c <_svfiprintf_r+0x150>
 801395c:	9b04      	ldr	r3, [sp, #16]
 801395e:	eba0 000a 	sub.w	r0, r0, sl
 8013962:	2240      	movs	r2, #64	@ 0x40
 8013964:	4082      	lsls	r2, r0
 8013966:	4313      	orrs	r3, r2
 8013968:	3401      	adds	r4, #1
 801396a:	9304      	str	r3, [sp, #16]
 801396c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013970:	4824      	ldr	r0, [pc, #144]	@ (8013a04 <_svfiprintf_r+0x1e8>)
 8013972:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013976:	2206      	movs	r2, #6
 8013978:	f7ec fc2a 	bl	80001d0 <memchr>
 801397c:	2800      	cmp	r0, #0
 801397e:	d036      	beq.n	80139ee <_svfiprintf_r+0x1d2>
 8013980:	4b21      	ldr	r3, [pc, #132]	@ (8013a08 <_svfiprintf_r+0x1ec>)
 8013982:	bb1b      	cbnz	r3, 80139cc <_svfiprintf_r+0x1b0>
 8013984:	9b03      	ldr	r3, [sp, #12]
 8013986:	3307      	adds	r3, #7
 8013988:	f023 0307 	bic.w	r3, r3, #7
 801398c:	3308      	adds	r3, #8
 801398e:	9303      	str	r3, [sp, #12]
 8013990:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013992:	4433      	add	r3, r6
 8013994:	9309      	str	r3, [sp, #36]	@ 0x24
 8013996:	e76a      	b.n	801386e <_svfiprintf_r+0x52>
 8013998:	fb0c 3202 	mla	r2, ip, r2, r3
 801399c:	460c      	mov	r4, r1
 801399e:	2001      	movs	r0, #1
 80139a0:	e7a8      	b.n	80138f4 <_svfiprintf_r+0xd8>
 80139a2:	2300      	movs	r3, #0
 80139a4:	3401      	adds	r4, #1
 80139a6:	9305      	str	r3, [sp, #20]
 80139a8:	4619      	mov	r1, r3
 80139aa:	f04f 0c0a 	mov.w	ip, #10
 80139ae:	4620      	mov	r0, r4
 80139b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80139b4:	3a30      	subs	r2, #48	@ 0x30
 80139b6:	2a09      	cmp	r2, #9
 80139b8:	d903      	bls.n	80139c2 <_svfiprintf_r+0x1a6>
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d0c6      	beq.n	801394c <_svfiprintf_r+0x130>
 80139be:	9105      	str	r1, [sp, #20]
 80139c0:	e7c4      	b.n	801394c <_svfiprintf_r+0x130>
 80139c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80139c6:	4604      	mov	r4, r0
 80139c8:	2301      	movs	r3, #1
 80139ca:	e7f0      	b.n	80139ae <_svfiprintf_r+0x192>
 80139cc:	ab03      	add	r3, sp, #12
 80139ce:	9300      	str	r3, [sp, #0]
 80139d0:	462a      	mov	r2, r5
 80139d2:	4b0e      	ldr	r3, [pc, #56]	@ (8013a0c <_svfiprintf_r+0x1f0>)
 80139d4:	a904      	add	r1, sp, #16
 80139d6:	4638      	mov	r0, r7
 80139d8:	f3af 8000 	nop.w
 80139dc:	1c42      	adds	r2, r0, #1
 80139de:	4606      	mov	r6, r0
 80139e0:	d1d6      	bne.n	8013990 <_svfiprintf_r+0x174>
 80139e2:	89ab      	ldrh	r3, [r5, #12]
 80139e4:	065b      	lsls	r3, r3, #25
 80139e6:	f53f af2d 	bmi.w	8013844 <_svfiprintf_r+0x28>
 80139ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80139ec:	e72c      	b.n	8013848 <_svfiprintf_r+0x2c>
 80139ee:	ab03      	add	r3, sp, #12
 80139f0:	9300      	str	r3, [sp, #0]
 80139f2:	462a      	mov	r2, r5
 80139f4:	4b05      	ldr	r3, [pc, #20]	@ (8013a0c <_svfiprintf_r+0x1f0>)
 80139f6:	a904      	add	r1, sp, #16
 80139f8:	4638      	mov	r0, r7
 80139fa:	f000 f879 	bl	8013af0 <_printf_i>
 80139fe:	e7ed      	b.n	80139dc <_svfiprintf_r+0x1c0>
 8013a00:	080142ed 	.word	0x080142ed
 8013a04:	080142f7 	.word	0x080142f7
 8013a08:	00000000 	.word	0x00000000
 8013a0c:	08013765 	.word	0x08013765
 8013a10:	080142f3 	.word	0x080142f3

08013a14 <_printf_common>:
 8013a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a18:	4616      	mov	r6, r2
 8013a1a:	4698      	mov	r8, r3
 8013a1c:	688a      	ldr	r2, [r1, #8]
 8013a1e:	690b      	ldr	r3, [r1, #16]
 8013a20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013a24:	4293      	cmp	r3, r2
 8013a26:	bfb8      	it	lt
 8013a28:	4613      	movlt	r3, r2
 8013a2a:	6033      	str	r3, [r6, #0]
 8013a2c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013a30:	4607      	mov	r7, r0
 8013a32:	460c      	mov	r4, r1
 8013a34:	b10a      	cbz	r2, 8013a3a <_printf_common+0x26>
 8013a36:	3301      	adds	r3, #1
 8013a38:	6033      	str	r3, [r6, #0]
 8013a3a:	6823      	ldr	r3, [r4, #0]
 8013a3c:	0699      	lsls	r1, r3, #26
 8013a3e:	bf42      	ittt	mi
 8013a40:	6833      	ldrmi	r3, [r6, #0]
 8013a42:	3302      	addmi	r3, #2
 8013a44:	6033      	strmi	r3, [r6, #0]
 8013a46:	6825      	ldr	r5, [r4, #0]
 8013a48:	f015 0506 	ands.w	r5, r5, #6
 8013a4c:	d106      	bne.n	8013a5c <_printf_common+0x48>
 8013a4e:	f104 0a19 	add.w	sl, r4, #25
 8013a52:	68e3      	ldr	r3, [r4, #12]
 8013a54:	6832      	ldr	r2, [r6, #0]
 8013a56:	1a9b      	subs	r3, r3, r2
 8013a58:	42ab      	cmp	r3, r5
 8013a5a:	dc26      	bgt.n	8013aaa <_printf_common+0x96>
 8013a5c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013a60:	6822      	ldr	r2, [r4, #0]
 8013a62:	3b00      	subs	r3, #0
 8013a64:	bf18      	it	ne
 8013a66:	2301      	movne	r3, #1
 8013a68:	0692      	lsls	r2, r2, #26
 8013a6a:	d42b      	bmi.n	8013ac4 <_printf_common+0xb0>
 8013a6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013a70:	4641      	mov	r1, r8
 8013a72:	4638      	mov	r0, r7
 8013a74:	47c8      	blx	r9
 8013a76:	3001      	adds	r0, #1
 8013a78:	d01e      	beq.n	8013ab8 <_printf_common+0xa4>
 8013a7a:	6823      	ldr	r3, [r4, #0]
 8013a7c:	6922      	ldr	r2, [r4, #16]
 8013a7e:	f003 0306 	and.w	r3, r3, #6
 8013a82:	2b04      	cmp	r3, #4
 8013a84:	bf02      	ittt	eq
 8013a86:	68e5      	ldreq	r5, [r4, #12]
 8013a88:	6833      	ldreq	r3, [r6, #0]
 8013a8a:	1aed      	subeq	r5, r5, r3
 8013a8c:	68a3      	ldr	r3, [r4, #8]
 8013a8e:	bf0c      	ite	eq
 8013a90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013a94:	2500      	movne	r5, #0
 8013a96:	4293      	cmp	r3, r2
 8013a98:	bfc4      	itt	gt
 8013a9a:	1a9b      	subgt	r3, r3, r2
 8013a9c:	18ed      	addgt	r5, r5, r3
 8013a9e:	2600      	movs	r6, #0
 8013aa0:	341a      	adds	r4, #26
 8013aa2:	42b5      	cmp	r5, r6
 8013aa4:	d11a      	bne.n	8013adc <_printf_common+0xc8>
 8013aa6:	2000      	movs	r0, #0
 8013aa8:	e008      	b.n	8013abc <_printf_common+0xa8>
 8013aaa:	2301      	movs	r3, #1
 8013aac:	4652      	mov	r2, sl
 8013aae:	4641      	mov	r1, r8
 8013ab0:	4638      	mov	r0, r7
 8013ab2:	47c8      	blx	r9
 8013ab4:	3001      	adds	r0, #1
 8013ab6:	d103      	bne.n	8013ac0 <_printf_common+0xac>
 8013ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8013abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ac0:	3501      	adds	r5, #1
 8013ac2:	e7c6      	b.n	8013a52 <_printf_common+0x3e>
 8013ac4:	18e1      	adds	r1, r4, r3
 8013ac6:	1c5a      	adds	r2, r3, #1
 8013ac8:	2030      	movs	r0, #48	@ 0x30
 8013aca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013ace:	4422      	add	r2, r4
 8013ad0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013ad4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013ad8:	3302      	adds	r3, #2
 8013ada:	e7c7      	b.n	8013a6c <_printf_common+0x58>
 8013adc:	2301      	movs	r3, #1
 8013ade:	4622      	mov	r2, r4
 8013ae0:	4641      	mov	r1, r8
 8013ae2:	4638      	mov	r0, r7
 8013ae4:	47c8      	blx	r9
 8013ae6:	3001      	adds	r0, #1
 8013ae8:	d0e6      	beq.n	8013ab8 <_printf_common+0xa4>
 8013aea:	3601      	adds	r6, #1
 8013aec:	e7d9      	b.n	8013aa2 <_printf_common+0x8e>
	...

08013af0 <_printf_i>:
 8013af0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013af4:	7e0f      	ldrb	r7, [r1, #24]
 8013af6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013af8:	2f78      	cmp	r7, #120	@ 0x78
 8013afa:	4691      	mov	r9, r2
 8013afc:	4680      	mov	r8, r0
 8013afe:	460c      	mov	r4, r1
 8013b00:	469a      	mov	sl, r3
 8013b02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013b06:	d807      	bhi.n	8013b18 <_printf_i+0x28>
 8013b08:	2f62      	cmp	r7, #98	@ 0x62
 8013b0a:	d80a      	bhi.n	8013b22 <_printf_i+0x32>
 8013b0c:	2f00      	cmp	r7, #0
 8013b0e:	f000 80d1 	beq.w	8013cb4 <_printf_i+0x1c4>
 8013b12:	2f58      	cmp	r7, #88	@ 0x58
 8013b14:	f000 80b8 	beq.w	8013c88 <_printf_i+0x198>
 8013b18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013b1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013b20:	e03a      	b.n	8013b98 <_printf_i+0xa8>
 8013b22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013b26:	2b15      	cmp	r3, #21
 8013b28:	d8f6      	bhi.n	8013b18 <_printf_i+0x28>
 8013b2a:	a101      	add	r1, pc, #4	@ (adr r1, 8013b30 <_printf_i+0x40>)
 8013b2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013b30:	08013b89 	.word	0x08013b89
 8013b34:	08013b9d 	.word	0x08013b9d
 8013b38:	08013b19 	.word	0x08013b19
 8013b3c:	08013b19 	.word	0x08013b19
 8013b40:	08013b19 	.word	0x08013b19
 8013b44:	08013b19 	.word	0x08013b19
 8013b48:	08013b9d 	.word	0x08013b9d
 8013b4c:	08013b19 	.word	0x08013b19
 8013b50:	08013b19 	.word	0x08013b19
 8013b54:	08013b19 	.word	0x08013b19
 8013b58:	08013b19 	.word	0x08013b19
 8013b5c:	08013c9b 	.word	0x08013c9b
 8013b60:	08013bc7 	.word	0x08013bc7
 8013b64:	08013c55 	.word	0x08013c55
 8013b68:	08013b19 	.word	0x08013b19
 8013b6c:	08013b19 	.word	0x08013b19
 8013b70:	08013cbd 	.word	0x08013cbd
 8013b74:	08013b19 	.word	0x08013b19
 8013b78:	08013bc7 	.word	0x08013bc7
 8013b7c:	08013b19 	.word	0x08013b19
 8013b80:	08013b19 	.word	0x08013b19
 8013b84:	08013c5d 	.word	0x08013c5d
 8013b88:	6833      	ldr	r3, [r6, #0]
 8013b8a:	1d1a      	adds	r2, r3, #4
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	6032      	str	r2, [r6, #0]
 8013b90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013b94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013b98:	2301      	movs	r3, #1
 8013b9a:	e09c      	b.n	8013cd6 <_printf_i+0x1e6>
 8013b9c:	6833      	ldr	r3, [r6, #0]
 8013b9e:	6820      	ldr	r0, [r4, #0]
 8013ba0:	1d19      	adds	r1, r3, #4
 8013ba2:	6031      	str	r1, [r6, #0]
 8013ba4:	0606      	lsls	r6, r0, #24
 8013ba6:	d501      	bpl.n	8013bac <_printf_i+0xbc>
 8013ba8:	681d      	ldr	r5, [r3, #0]
 8013baa:	e003      	b.n	8013bb4 <_printf_i+0xc4>
 8013bac:	0645      	lsls	r5, r0, #25
 8013bae:	d5fb      	bpl.n	8013ba8 <_printf_i+0xb8>
 8013bb0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013bb4:	2d00      	cmp	r5, #0
 8013bb6:	da03      	bge.n	8013bc0 <_printf_i+0xd0>
 8013bb8:	232d      	movs	r3, #45	@ 0x2d
 8013bba:	426d      	negs	r5, r5
 8013bbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013bc0:	4858      	ldr	r0, [pc, #352]	@ (8013d24 <_printf_i+0x234>)
 8013bc2:	230a      	movs	r3, #10
 8013bc4:	e011      	b.n	8013bea <_printf_i+0xfa>
 8013bc6:	6821      	ldr	r1, [r4, #0]
 8013bc8:	6833      	ldr	r3, [r6, #0]
 8013bca:	0608      	lsls	r0, r1, #24
 8013bcc:	f853 5b04 	ldr.w	r5, [r3], #4
 8013bd0:	d402      	bmi.n	8013bd8 <_printf_i+0xe8>
 8013bd2:	0649      	lsls	r1, r1, #25
 8013bd4:	bf48      	it	mi
 8013bd6:	b2ad      	uxthmi	r5, r5
 8013bd8:	2f6f      	cmp	r7, #111	@ 0x6f
 8013bda:	4852      	ldr	r0, [pc, #328]	@ (8013d24 <_printf_i+0x234>)
 8013bdc:	6033      	str	r3, [r6, #0]
 8013bde:	bf14      	ite	ne
 8013be0:	230a      	movne	r3, #10
 8013be2:	2308      	moveq	r3, #8
 8013be4:	2100      	movs	r1, #0
 8013be6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013bea:	6866      	ldr	r6, [r4, #4]
 8013bec:	60a6      	str	r6, [r4, #8]
 8013bee:	2e00      	cmp	r6, #0
 8013bf0:	db05      	blt.n	8013bfe <_printf_i+0x10e>
 8013bf2:	6821      	ldr	r1, [r4, #0]
 8013bf4:	432e      	orrs	r6, r5
 8013bf6:	f021 0104 	bic.w	r1, r1, #4
 8013bfa:	6021      	str	r1, [r4, #0]
 8013bfc:	d04b      	beq.n	8013c96 <_printf_i+0x1a6>
 8013bfe:	4616      	mov	r6, r2
 8013c00:	fbb5 f1f3 	udiv	r1, r5, r3
 8013c04:	fb03 5711 	mls	r7, r3, r1, r5
 8013c08:	5dc7      	ldrb	r7, [r0, r7]
 8013c0a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013c0e:	462f      	mov	r7, r5
 8013c10:	42bb      	cmp	r3, r7
 8013c12:	460d      	mov	r5, r1
 8013c14:	d9f4      	bls.n	8013c00 <_printf_i+0x110>
 8013c16:	2b08      	cmp	r3, #8
 8013c18:	d10b      	bne.n	8013c32 <_printf_i+0x142>
 8013c1a:	6823      	ldr	r3, [r4, #0]
 8013c1c:	07df      	lsls	r7, r3, #31
 8013c1e:	d508      	bpl.n	8013c32 <_printf_i+0x142>
 8013c20:	6923      	ldr	r3, [r4, #16]
 8013c22:	6861      	ldr	r1, [r4, #4]
 8013c24:	4299      	cmp	r1, r3
 8013c26:	bfde      	ittt	le
 8013c28:	2330      	movle	r3, #48	@ 0x30
 8013c2a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013c2e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013c32:	1b92      	subs	r2, r2, r6
 8013c34:	6122      	str	r2, [r4, #16]
 8013c36:	f8cd a000 	str.w	sl, [sp]
 8013c3a:	464b      	mov	r3, r9
 8013c3c:	aa03      	add	r2, sp, #12
 8013c3e:	4621      	mov	r1, r4
 8013c40:	4640      	mov	r0, r8
 8013c42:	f7ff fee7 	bl	8013a14 <_printf_common>
 8013c46:	3001      	adds	r0, #1
 8013c48:	d14a      	bne.n	8013ce0 <_printf_i+0x1f0>
 8013c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8013c4e:	b004      	add	sp, #16
 8013c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c54:	6823      	ldr	r3, [r4, #0]
 8013c56:	f043 0320 	orr.w	r3, r3, #32
 8013c5a:	6023      	str	r3, [r4, #0]
 8013c5c:	4832      	ldr	r0, [pc, #200]	@ (8013d28 <_printf_i+0x238>)
 8013c5e:	2778      	movs	r7, #120	@ 0x78
 8013c60:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013c64:	6823      	ldr	r3, [r4, #0]
 8013c66:	6831      	ldr	r1, [r6, #0]
 8013c68:	061f      	lsls	r7, r3, #24
 8013c6a:	f851 5b04 	ldr.w	r5, [r1], #4
 8013c6e:	d402      	bmi.n	8013c76 <_printf_i+0x186>
 8013c70:	065f      	lsls	r7, r3, #25
 8013c72:	bf48      	it	mi
 8013c74:	b2ad      	uxthmi	r5, r5
 8013c76:	6031      	str	r1, [r6, #0]
 8013c78:	07d9      	lsls	r1, r3, #31
 8013c7a:	bf44      	itt	mi
 8013c7c:	f043 0320 	orrmi.w	r3, r3, #32
 8013c80:	6023      	strmi	r3, [r4, #0]
 8013c82:	b11d      	cbz	r5, 8013c8c <_printf_i+0x19c>
 8013c84:	2310      	movs	r3, #16
 8013c86:	e7ad      	b.n	8013be4 <_printf_i+0xf4>
 8013c88:	4826      	ldr	r0, [pc, #152]	@ (8013d24 <_printf_i+0x234>)
 8013c8a:	e7e9      	b.n	8013c60 <_printf_i+0x170>
 8013c8c:	6823      	ldr	r3, [r4, #0]
 8013c8e:	f023 0320 	bic.w	r3, r3, #32
 8013c92:	6023      	str	r3, [r4, #0]
 8013c94:	e7f6      	b.n	8013c84 <_printf_i+0x194>
 8013c96:	4616      	mov	r6, r2
 8013c98:	e7bd      	b.n	8013c16 <_printf_i+0x126>
 8013c9a:	6833      	ldr	r3, [r6, #0]
 8013c9c:	6825      	ldr	r5, [r4, #0]
 8013c9e:	6961      	ldr	r1, [r4, #20]
 8013ca0:	1d18      	adds	r0, r3, #4
 8013ca2:	6030      	str	r0, [r6, #0]
 8013ca4:	062e      	lsls	r6, r5, #24
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	d501      	bpl.n	8013cae <_printf_i+0x1be>
 8013caa:	6019      	str	r1, [r3, #0]
 8013cac:	e002      	b.n	8013cb4 <_printf_i+0x1c4>
 8013cae:	0668      	lsls	r0, r5, #25
 8013cb0:	d5fb      	bpl.n	8013caa <_printf_i+0x1ba>
 8013cb2:	8019      	strh	r1, [r3, #0]
 8013cb4:	2300      	movs	r3, #0
 8013cb6:	6123      	str	r3, [r4, #16]
 8013cb8:	4616      	mov	r6, r2
 8013cba:	e7bc      	b.n	8013c36 <_printf_i+0x146>
 8013cbc:	6833      	ldr	r3, [r6, #0]
 8013cbe:	1d1a      	adds	r2, r3, #4
 8013cc0:	6032      	str	r2, [r6, #0]
 8013cc2:	681e      	ldr	r6, [r3, #0]
 8013cc4:	6862      	ldr	r2, [r4, #4]
 8013cc6:	2100      	movs	r1, #0
 8013cc8:	4630      	mov	r0, r6
 8013cca:	f7ec fa81 	bl	80001d0 <memchr>
 8013cce:	b108      	cbz	r0, 8013cd4 <_printf_i+0x1e4>
 8013cd0:	1b80      	subs	r0, r0, r6
 8013cd2:	6060      	str	r0, [r4, #4]
 8013cd4:	6863      	ldr	r3, [r4, #4]
 8013cd6:	6123      	str	r3, [r4, #16]
 8013cd8:	2300      	movs	r3, #0
 8013cda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013cde:	e7aa      	b.n	8013c36 <_printf_i+0x146>
 8013ce0:	6923      	ldr	r3, [r4, #16]
 8013ce2:	4632      	mov	r2, r6
 8013ce4:	4649      	mov	r1, r9
 8013ce6:	4640      	mov	r0, r8
 8013ce8:	47d0      	blx	sl
 8013cea:	3001      	adds	r0, #1
 8013cec:	d0ad      	beq.n	8013c4a <_printf_i+0x15a>
 8013cee:	6823      	ldr	r3, [r4, #0]
 8013cf0:	079b      	lsls	r3, r3, #30
 8013cf2:	d413      	bmi.n	8013d1c <_printf_i+0x22c>
 8013cf4:	68e0      	ldr	r0, [r4, #12]
 8013cf6:	9b03      	ldr	r3, [sp, #12]
 8013cf8:	4298      	cmp	r0, r3
 8013cfa:	bfb8      	it	lt
 8013cfc:	4618      	movlt	r0, r3
 8013cfe:	e7a6      	b.n	8013c4e <_printf_i+0x15e>
 8013d00:	2301      	movs	r3, #1
 8013d02:	4632      	mov	r2, r6
 8013d04:	4649      	mov	r1, r9
 8013d06:	4640      	mov	r0, r8
 8013d08:	47d0      	blx	sl
 8013d0a:	3001      	adds	r0, #1
 8013d0c:	d09d      	beq.n	8013c4a <_printf_i+0x15a>
 8013d0e:	3501      	adds	r5, #1
 8013d10:	68e3      	ldr	r3, [r4, #12]
 8013d12:	9903      	ldr	r1, [sp, #12]
 8013d14:	1a5b      	subs	r3, r3, r1
 8013d16:	42ab      	cmp	r3, r5
 8013d18:	dcf2      	bgt.n	8013d00 <_printf_i+0x210>
 8013d1a:	e7eb      	b.n	8013cf4 <_printf_i+0x204>
 8013d1c:	2500      	movs	r5, #0
 8013d1e:	f104 0619 	add.w	r6, r4, #25
 8013d22:	e7f5      	b.n	8013d10 <_printf_i+0x220>
 8013d24:	080142fe 	.word	0x080142fe
 8013d28:	0801430f 	.word	0x0801430f

08013d2c <memmove>:
 8013d2c:	4288      	cmp	r0, r1
 8013d2e:	b510      	push	{r4, lr}
 8013d30:	eb01 0402 	add.w	r4, r1, r2
 8013d34:	d902      	bls.n	8013d3c <memmove+0x10>
 8013d36:	4284      	cmp	r4, r0
 8013d38:	4623      	mov	r3, r4
 8013d3a:	d807      	bhi.n	8013d4c <memmove+0x20>
 8013d3c:	1e43      	subs	r3, r0, #1
 8013d3e:	42a1      	cmp	r1, r4
 8013d40:	d008      	beq.n	8013d54 <memmove+0x28>
 8013d42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013d46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013d4a:	e7f8      	b.n	8013d3e <memmove+0x12>
 8013d4c:	4402      	add	r2, r0
 8013d4e:	4601      	mov	r1, r0
 8013d50:	428a      	cmp	r2, r1
 8013d52:	d100      	bne.n	8013d56 <memmove+0x2a>
 8013d54:	bd10      	pop	{r4, pc}
 8013d56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013d5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013d5e:	e7f7      	b.n	8013d50 <memmove+0x24>

08013d60 <_realloc_r>:
 8013d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d64:	4607      	mov	r7, r0
 8013d66:	4614      	mov	r4, r2
 8013d68:	460d      	mov	r5, r1
 8013d6a:	b921      	cbnz	r1, 8013d76 <_realloc_r+0x16>
 8013d6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013d70:	4611      	mov	r1, r2
 8013d72:	f7ff bacb 	b.w	801330c <_malloc_r>
 8013d76:	b92a      	cbnz	r2, 8013d84 <_realloc_r+0x24>
 8013d78:	f7ff fcaa 	bl	80136d0 <_free_r>
 8013d7c:	4625      	mov	r5, r4
 8013d7e:	4628      	mov	r0, r5
 8013d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d84:	f000 f81a 	bl	8013dbc <_malloc_usable_size_r>
 8013d88:	4284      	cmp	r4, r0
 8013d8a:	4606      	mov	r6, r0
 8013d8c:	d802      	bhi.n	8013d94 <_realloc_r+0x34>
 8013d8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013d92:	d8f4      	bhi.n	8013d7e <_realloc_r+0x1e>
 8013d94:	4621      	mov	r1, r4
 8013d96:	4638      	mov	r0, r7
 8013d98:	f7ff fab8 	bl	801330c <_malloc_r>
 8013d9c:	4680      	mov	r8, r0
 8013d9e:	b908      	cbnz	r0, 8013da4 <_realloc_r+0x44>
 8013da0:	4645      	mov	r5, r8
 8013da2:	e7ec      	b.n	8013d7e <_realloc_r+0x1e>
 8013da4:	42b4      	cmp	r4, r6
 8013da6:	4622      	mov	r2, r4
 8013da8:	4629      	mov	r1, r5
 8013daa:	bf28      	it	cs
 8013dac:	4632      	movcs	r2, r6
 8013dae:	f7ff fc81 	bl	80136b4 <memcpy>
 8013db2:	4629      	mov	r1, r5
 8013db4:	4638      	mov	r0, r7
 8013db6:	f7ff fc8b 	bl	80136d0 <_free_r>
 8013dba:	e7f1      	b.n	8013da0 <_realloc_r+0x40>

08013dbc <_malloc_usable_size_r>:
 8013dbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013dc0:	1f18      	subs	r0, r3, #4
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	bfbc      	itt	lt
 8013dc6:	580b      	ldrlt	r3, [r1, r0]
 8013dc8:	18c0      	addlt	r0, r0, r3
 8013dca:	4770      	bx	lr

08013dcc <sqrt>:
 8013dcc:	b538      	push	{r3, r4, r5, lr}
 8013dce:	ed2d 8b02 	vpush	{d8}
 8013dd2:	ec55 4b10 	vmov	r4, r5, d0
 8013dd6:	f000 f825 	bl	8013e24 <__ieee754_sqrt>
 8013dda:	4622      	mov	r2, r4
 8013ddc:	462b      	mov	r3, r5
 8013dde:	4620      	mov	r0, r4
 8013de0:	4629      	mov	r1, r5
 8013de2:	eeb0 8a40 	vmov.f32	s16, s0
 8013de6:	eef0 8a60 	vmov.f32	s17, s1
 8013dea:	f7ec fe97 	bl	8000b1c <__aeabi_dcmpun>
 8013dee:	b990      	cbnz	r0, 8013e16 <sqrt+0x4a>
 8013df0:	2200      	movs	r2, #0
 8013df2:	2300      	movs	r3, #0
 8013df4:	4620      	mov	r0, r4
 8013df6:	4629      	mov	r1, r5
 8013df8:	f7ec fe68 	bl	8000acc <__aeabi_dcmplt>
 8013dfc:	b158      	cbz	r0, 8013e16 <sqrt+0x4a>
 8013dfe:	f7ff fc2d 	bl	801365c <__errno>
 8013e02:	2321      	movs	r3, #33	@ 0x21
 8013e04:	6003      	str	r3, [r0, #0]
 8013e06:	2200      	movs	r2, #0
 8013e08:	2300      	movs	r3, #0
 8013e0a:	4610      	mov	r0, r2
 8013e0c:	4619      	mov	r1, r3
 8013e0e:	f7ec fd15 	bl	800083c <__aeabi_ddiv>
 8013e12:	ec41 0b18 	vmov	d8, r0, r1
 8013e16:	eeb0 0a48 	vmov.f32	s0, s16
 8013e1a:	eef0 0a68 	vmov.f32	s1, s17
 8013e1e:	ecbd 8b02 	vpop	{d8}
 8013e22:	bd38      	pop	{r3, r4, r5, pc}

08013e24 <__ieee754_sqrt>:
 8013e24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e28:	4a66      	ldr	r2, [pc, #408]	@ (8013fc4 <__ieee754_sqrt+0x1a0>)
 8013e2a:	ec55 4b10 	vmov	r4, r5, d0
 8013e2e:	43aa      	bics	r2, r5
 8013e30:	462b      	mov	r3, r5
 8013e32:	4621      	mov	r1, r4
 8013e34:	d110      	bne.n	8013e58 <__ieee754_sqrt+0x34>
 8013e36:	4622      	mov	r2, r4
 8013e38:	4620      	mov	r0, r4
 8013e3a:	4629      	mov	r1, r5
 8013e3c:	f7ec fbd4 	bl	80005e8 <__aeabi_dmul>
 8013e40:	4602      	mov	r2, r0
 8013e42:	460b      	mov	r3, r1
 8013e44:	4620      	mov	r0, r4
 8013e46:	4629      	mov	r1, r5
 8013e48:	f7ec fa18 	bl	800027c <__adddf3>
 8013e4c:	4604      	mov	r4, r0
 8013e4e:	460d      	mov	r5, r1
 8013e50:	ec45 4b10 	vmov	d0, r4, r5
 8013e54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e58:	2d00      	cmp	r5, #0
 8013e5a:	dc0e      	bgt.n	8013e7a <__ieee754_sqrt+0x56>
 8013e5c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8013e60:	4322      	orrs	r2, r4
 8013e62:	d0f5      	beq.n	8013e50 <__ieee754_sqrt+0x2c>
 8013e64:	b19d      	cbz	r5, 8013e8e <__ieee754_sqrt+0x6a>
 8013e66:	4622      	mov	r2, r4
 8013e68:	4620      	mov	r0, r4
 8013e6a:	4629      	mov	r1, r5
 8013e6c:	f7ec fa04 	bl	8000278 <__aeabi_dsub>
 8013e70:	4602      	mov	r2, r0
 8013e72:	460b      	mov	r3, r1
 8013e74:	f7ec fce2 	bl	800083c <__aeabi_ddiv>
 8013e78:	e7e8      	b.n	8013e4c <__ieee754_sqrt+0x28>
 8013e7a:	152a      	asrs	r2, r5, #20
 8013e7c:	d115      	bne.n	8013eaa <__ieee754_sqrt+0x86>
 8013e7e:	2000      	movs	r0, #0
 8013e80:	e009      	b.n	8013e96 <__ieee754_sqrt+0x72>
 8013e82:	0acb      	lsrs	r3, r1, #11
 8013e84:	3a15      	subs	r2, #21
 8013e86:	0549      	lsls	r1, r1, #21
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d0fa      	beq.n	8013e82 <__ieee754_sqrt+0x5e>
 8013e8c:	e7f7      	b.n	8013e7e <__ieee754_sqrt+0x5a>
 8013e8e:	462a      	mov	r2, r5
 8013e90:	e7fa      	b.n	8013e88 <__ieee754_sqrt+0x64>
 8013e92:	005b      	lsls	r3, r3, #1
 8013e94:	3001      	adds	r0, #1
 8013e96:	02dc      	lsls	r4, r3, #11
 8013e98:	d5fb      	bpl.n	8013e92 <__ieee754_sqrt+0x6e>
 8013e9a:	1e44      	subs	r4, r0, #1
 8013e9c:	1b12      	subs	r2, r2, r4
 8013e9e:	f1c0 0420 	rsb	r4, r0, #32
 8013ea2:	fa21 f404 	lsr.w	r4, r1, r4
 8013ea6:	4323      	orrs	r3, r4
 8013ea8:	4081      	lsls	r1, r0
 8013eaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013eae:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8013eb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013eb6:	07d2      	lsls	r2, r2, #31
 8013eb8:	bf5c      	itt	pl
 8013eba:	005b      	lslpl	r3, r3, #1
 8013ebc:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8013ec0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013ec4:	bf58      	it	pl
 8013ec6:	0049      	lslpl	r1, r1, #1
 8013ec8:	2600      	movs	r6, #0
 8013eca:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8013ece:	107f      	asrs	r7, r7, #1
 8013ed0:	0049      	lsls	r1, r1, #1
 8013ed2:	2016      	movs	r0, #22
 8013ed4:	4632      	mov	r2, r6
 8013ed6:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8013eda:	1915      	adds	r5, r2, r4
 8013edc:	429d      	cmp	r5, r3
 8013ede:	bfde      	ittt	le
 8013ee0:	192a      	addle	r2, r5, r4
 8013ee2:	1b5b      	suble	r3, r3, r5
 8013ee4:	1936      	addle	r6, r6, r4
 8013ee6:	0fcd      	lsrs	r5, r1, #31
 8013ee8:	3801      	subs	r0, #1
 8013eea:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8013eee:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8013ef2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8013ef6:	d1f0      	bne.n	8013eda <__ieee754_sqrt+0xb6>
 8013ef8:	4605      	mov	r5, r0
 8013efa:	2420      	movs	r4, #32
 8013efc:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8013f00:	4293      	cmp	r3, r2
 8013f02:	eb0c 0e00 	add.w	lr, ip, r0
 8013f06:	dc02      	bgt.n	8013f0e <__ieee754_sqrt+0xea>
 8013f08:	d113      	bne.n	8013f32 <__ieee754_sqrt+0x10e>
 8013f0a:	458e      	cmp	lr, r1
 8013f0c:	d811      	bhi.n	8013f32 <__ieee754_sqrt+0x10e>
 8013f0e:	f1be 0f00 	cmp.w	lr, #0
 8013f12:	eb0e 000c 	add.w	r0, lr, ip
 8013f16:	da3f      	bge.n	8013f98 <__ieee754_sqrt+0x174>
 8013f18:	2800      	cmp	r0, #0
 8013f1a:	db3d      	blt.n	8013f98 <__ieee754_sqrt+0x174>
 8013f1c:	f102 0801 	add.w	r8, r2, #1
 8013f20:	1a9b      	subs	r3, r3, r2
 8013f22:	458e      	cmp	lr, r1
 8013f24:	bf88      	it	hi
 8013f26:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8013f2a:	eba1 010e 	sub.w	r1, r1, lr
 8013f2e:	4465      	add	r5, ip
 8013f30:	4642      	mov	r2, r8
 8013f32:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8013f36:	3c01      	subs	r4, #1
 8013f38:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8013f3c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8013f40:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8013f44:	d1dc      	bne.n	8013f00 <__ieee754_sqrt+0xdc>
 8013f46:	4319      	orrs	r1, r3
 8013f48:	d01b      	beq.n	8013f82 <__ieee754_sqrt+0x15e>
 8013f4a:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8013fc8 <__ieee754_sqrt+0x1a4>
 8013f4e:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8013fcc <__ieee754_sqrt+0x1a8>
 8013f52:	e9da 0100 	ldrd	r0, r1, [sl]
 8013f56:	e9db 2300 	ldrd	r2, r3, [fp]
 8013f5a:	f7ec f98d 	bl	8000278 <__aeabi_dsub>
 8013f5e:	e9da 8900 	ldrd	r8, r9, [sl]
 8013f62:	4602      	mov	r2, r0
 8013f64:	460b      	mov	r3, r1
 8013f66:	4640      	mov	r0, r8
 8013f68:	4649      	mov	r1, r9
 8013f6a:	f7ec fdb9 	bl	8000ae0 <__aeabi_dcmple>
 8013f6e:	b140      	cbz	r0, 8013f82 <__ieee754_sqrt+0x15e>
 8013f70:	f1b5 3fff 	cmp.w	r5, #4294967295
 8013f74:	e9da 0100 	ldrd	r0, r1, [sl]
 8013f78:	e9db 2300 	ldrd	r2, r3, [fp]
 8013f7c:	d10e      	bne.n	8013f9c <__ieee754_sqrt+0x178>
 8013f7e:	3601      	adds	r6, #1
 8013f80:	4625      	mov	r5, r4
 8013f82:	1073      	asrs	r3, r6, #1
 8013f84:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8013f88:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8013f8c:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8013f90:	086b      	lsrs	r3, r5, #1
 8013f92:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8013f96:	e759      	b.n	8013e4c <__ieee754_sqrt+0x28>
 8013f98:	4690      	mov	r8, r2
 8013f9a:	e7c1      	b.n	8013f20 <__ieee754_sqrt+0xfc>
 8013f9c:	f7ec f96e 	bl	800027c <__adddf3>
 8013fa0:	e9da 8900 	ldrd	r8, r9, [sl]
 8013fa4:	4602      	mov	r2, r0
 8013fa6:	460b      	mov	r3, r1
 8013fa8:	4640      	mov	r0, r8
 8013faa:	4649      	mov	r1, r9
 8013fac:	f7ec fd8e 	bl	8000acc <__aeabi_dcmplt>
 8013fb0:	b120      	cbz	r0, 8013fbc <__ieee754_sqrt+0x198>
 8013fb2:	1cab      	adds	r3, r5, #2
 8013fb4:	bf08      	it	eq
 8013fb6:	3601      	addeq	r6, #1
 8013fb8:	3502      	adds	r5, #2
 8013fba:	e7e2      	b.n	8013f82 <__ieee754_sqrt+0x15e>
 8013fbc:	1c6b      	adds	r3, r5, #1
 8013fbe:	f023 0501 	bic.w	r5, r3, #1
 8013fc2:	e7de      	b.n	8013f82 <__ieee754_sqrt+0x15e>
 8013fc4:	7ff00000 	.word	0x7ff00000
 8013fc8:	08014328 	.word	0x08014328
 8013fcc:	08014320 	.word	0x08014320

08013fd0 <_init>:
 8013fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fd2:	bf00      	nop
 8013fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013fd6:	bc08      	pop	{r3}
 8013fd8:	469e      	mov	lr, r3
 8013fda:	4770      	bx	lr

08013fdc <_fini>:
 8013fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fde:	bf00      	nop
 8013fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013fe2:	bc08      	pop	{r3}
 8013fe4:	469e      	mov	lr, r3
 8013fe6:	4770      	bx	lr
