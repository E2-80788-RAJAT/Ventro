
hm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015e58  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  08015fe8  08015fe8  00016fe8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016340  08016340  000181c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08016340  08016340  00017340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016348  08016348  000181c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016348  08016348  00017348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801634c  0801634c  0001734c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001c4  20000000  08016350  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000181c4  2**0
                  CONTENTS
 10 .bss          000059d4  200001c8  200001c8  000181c8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20005b9c  20005b9c  000181c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000181c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000222c5  00000000  00000000  000181f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004358  00000000  00000000  0003a4b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bf8  00000000  00000000  0003e818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015de  00000000  00000000  00040410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000053a1  00000000  00000000  000419ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021664  00000000  00000000  00046d8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ebf84  00000000  00000000  000683f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00154377  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007ea8  00000000  00000000  001543bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  0015c264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001c8 	.word	0x200001c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015fd0 	.word	0x08015fd0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001cc 	.word	0x200001cc
 80001cc:	08015fd0 	.word	0x08015fd0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b988 	b.w	8000fa0 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	468e      	mov	lr, r1
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	4688      	mov	r8, r1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d14a      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4617      	mov	r7, r2
 8000cbc:	d962      	bls.n	8000d84 <__udivmoddi4+0xdc>
 8000cbe:	fab2 f682 	clz	r6, r2
 8000cc2:	b14e      	cbz	r6, 8000cd8 <__udivmoddi4+0x30>
 8000cc4:	f1c6 0320 	rsb	r3, r6, #32
 8000cc8:	fa01 f806 	lsl.w	r8, r1, r6
 8000ccc:	fa20 f303 	lsr.w	r3, r0, r3
 8000cd0:	40b7      	lsls	r7, r6
 8000cd2:	ea43 0808 	orr.w	r8, r3, r8
 8000cd6:	40b4      	lsls	r4, r6
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	fa1f fc87 	uxth.w	ip, r7
 8000ce0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ce4:	0c23      	lsrs	r3, r4, #16
 8000ce6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cee:	fb01 f20c 	mul.w	r2, r1, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0x62>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cfc:	f080 80ea 	bcs.w	8000ed4 <__udivmoddi4+0x22c>
 8000d00:	429a      	cmp	r2, r3
 8000d02:	f240 80e7 	bls.w	8000ed4 <__udivmoddi4+0x22c>
 8000d06:	3902      	subs	r1, #2
 8000d08:	443b      	add	r3, r7
 8000d0a:	1a9a      	subs	r2, r3, r2
 8000d0c:	b2a3      	uxth	r3, r4
 8000d0e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d12:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d1e:	459c      	cmp	ip, r3
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0x8e>
 8000d22:	18fb      	adds	r3, r7, r3
 8000d24:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d28:	f080 80d6 	bcs.w	8000ed8 <__udivmoddi4+0x230>
 8000d2c:	459c      	cmp	ip, r3
 8000d2e:	f240 80d3 	bls.w	8000ed8 <__udivmoddi4+0x230>
 8000d32:	443b      	add	r3, r7
 8000d34:	3802      	subs	r0, #2
 8000d36:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d3a:	eba3 030c 	sub.w	r3, r3, ip
 8000d3e:	2100      	movs	r1, #0
 8000d40:	b11d      	cbz	r5, 8000d4a <__udivmoddi4+0xa2>
 8000d42:	40f3      	lsrs	r3, r6
 8000d44:	2200      	movs	r2, #0
 8000d46:	e9c5 3200 	strd	r3, r2, [r5]
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d905      	bls.n	8000d5e <__udivmoddi4+0xb6>
 8000d52:	b10d      	cbz	r5, 8000d58 <__udivmoddi4+0xb0>
 8000d54:	e9c5 0100 	strd	r0, r1, [r5]
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4608      	mov	r0, r1
 8000d5c:	e7f5      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d5e:	fab3 f183 	clz	r1, r3
 8000d62:	2900      	cmp	r1, #0
 8000d64:	d146      	bne.n	8000df4 <__udivmoddi4+0x14c>
 8000d66:	4573      	cmp	r3, lr
 8000d68:	d302      	bcc.n	8000d70 <__udivmoddi4+0xc8>
 8000d6a:	4282      	cmp	r2, r0
 8000d6c:	f200 8105 	bhi.w	8000f7a <__udivmoddi4+0x2d2>
 8000d70:	1a84      	subs	r4, r0, r2
 8000d72:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d76:	2001      	movs	r0, #1
 8000d78:	4690      	mov	r8, r2
 8000d7a:	2d00      	cmp	r5, #0
 8000d7c:	d0e5      	beq.n	8000d4a <__udivmoddi4+0xa2>
 8000d7e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d82:	e7e2      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	f000 8090 	beq.w	8000eaa <__udivmoddi4+0x202>
 8000d8a:	fab2 f682 	clz	r6, r2
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	f040 80a4 	bne.w	8000edc <__udivmoddi4+0x234>
 8000d94:	1a8a      	subs	r2, r1, r2
 8000d96:	0c03      	lsrs	r3, r0, #16
 8000d98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d9c:	b280      	uxth	r0, r0
 8000d9e:	b2bc      	uxth	r4, r7
 8000da0:	2101      	movs	r1, #1
 8000da2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000da6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000daa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dae:	fb04 f20c 	mul.w	r2, r4, ip
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x11e>
 8000db6:	18fb      	adds	r3, r7, r3
 8000db8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x11c>
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	f200 80e0 	bhi.w	8000f84 <__udivmoddi4+0x2dc>
 8000dc4:	46c4      	mov	ip, r8
 8000dc6:	1a9b      	subs	r3, r3, r2
 8000dc8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dcc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000dd0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000dd4:	fb02 f404 	mul.w	r4, r2, r4
 8000dd8:	429c      	cmp	r4, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x144>
 8000ddc:	18fb      	adds	r3, r7, r3
 8000dde:	f102 30ff 	add.w	r0, r2, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x142>
 8000de4:	429c      	cmp	r4, r3
 8000de6:	f200 80ca 	bhi.w	8000f7e <__udivmoddi4+0x2d6>
 8000dea:	4602      	mov	r2, r0
 8000dec:	1b1b      	subs	r3, r3, r4
 8000dee:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000df2:	e7a5      	b.n	8000d40 <__udivmoddi4+0x98>
 8000df4:	f1c1 0620 	rsb	r6, r1, #32
 8000df8:	408b      	lsls	r3, r1
 8000dfa:	fa22 f706 	lsr.w	r7, r2, r6
 8000dfe:	431f      	orrs	r7, r3
 8000e00:	fa0e f401 	lsl.w	r4, lr, r1
 8000e04:	fa20 f306 	lsr.w	r3, r0, r6
 8000e08:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e0c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e10:	4323      	orrs	r3, r4
 8000e12:	fa00 f801 	lsl.w	r8, r0, r1
 8000e16:	fa1f fc87 	uxth.w	ip, r7
 8000e1a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e1e:	0c1c      	lsrs	r4, r3, #16
 8000e20:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e24:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e28:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e2c:	45a6      	cmp	lr, r4
 8000e2e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e32:	d909      	bls.n	8000e48 <__udivmoddi4+0x1a0>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e3a:	f080 809c 	bcs.w	8000f76 <__udivmoddi4+0x2ce>
 8000e3e:	45a6      	cmp	lr, r4
 8000e40:	f240 8099 	bls.w	8000f76 <__udivmoddi4+0x2ce>
 8000e44:	3802      	subs	r0, #2
 8000e46:	443c      	add	r4, r7
 8000e48:	eba4 040e 	sub.w	r4, r4, lr
 8000e4c:	fa1f fe83 	uxth.w	lr, r3
 8000e50:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e54:	fb09 4413 	mls	r4, r9, r3, r4
 8000e58:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e5c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e60:	45a4      	cmp	ip, r4
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x1ce>
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e6a:	f080 8082 	bcs.w	8000f72 <__udivmoddi4+0x2ca>
 8000e6e:	45a4      	cmp	ip, r4
 8000e70:	d97f      	bls.n	8000f72 <__udivmoddi4+0x2ca>
 8000e72:	3b02      	subs	r3, #2
 8000e74:	443c      	add	r4, r7
 8000e76:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e7a:	eba4 040c 	sub.w	r4, r4, ip
 8000e7e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e82:	4564      	cmp	r4, ip
 8000e84:	4673      	mov	r3, lr
 8000e86:	46e1      	mov	r9, ip
 8000e88:	d362      	bcc.n	8000f50 <__udivmoddi4+0x2a8>
 8000e8a:	d05f      	beq.n	8000f4c <__udivmoddi4+0x2a4>
 8000e8c:	b15d      	cbz	r5, 8000ea6 <__udivmoddi4+0x1fe>
 8000e8e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e92:	eb64 0409 	sbc.w	r4, r4, r9
 8000e96:	fa04 f606 	lsl.w	r6, r4, r6
 8000e9a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e9e:	431e      	orrs	r6, r3
 8000ea0:	40cc      	lsrs	r4, r1
 8000ea2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	e74f      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000eaa:	fbb1 fcf2 	udiv	ip, r1, r2
 8000eae:	0c01      	lsrs	r1, r0, #16
 8000eb0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000eb4:	b280      	uxth	r0, r0
 8000eb6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eba:	463b      	mov	r3, r7
 8000ebc:	4638      	mov	r0, r7
 8000ebe:	463c      	mov	r4, r7
 8000ec0:	46b8      	mov	r8, r7
 8000ec2:	46be      	mov	lr, r7
 8000ec4:	2620      	movs	r6, #32
 8000ec6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eca:	eba2 0208 	sub.w	r2, r2, r8
 8000ece:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ed2:	e766      	b.n	8000da2 <__udivmoddi4+0xfa>
 8000ed4:	4601      	mov	r1, r0
 8000ed6:	e718      	b.n	8000d0a <__udivmoddi4+0x62>
 8000ed8:	4610      	mov	r0, r2
 8000eda:	e72c      	b.n	8000d36 <__udivmoddi4+0x8e>
 8000edc:	f1c6 0220 	rsb	r2, r6, #32
 8000ee0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ee4:	40b7      	lsls	r7, r6
 8000ee6:	40b1      	lsls	r1, r6
 8000ee8:	fa20 f202 	lsr.w	r2, r0, r2
 8000eec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ef6:	b2bc      	uxth	r4, r7
 8000ef8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb08 f904 	mul.w	r9, r8, r4
 8000f06:	40b0      	lsls	r0, r6
 8000f08:	4589      	cmp	r9, r1
 8000f0a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f0e:	b280      	uxth	r0, r0
 8000f10:	d93e      	bls.n	8000f90 <__udivmoddi4+0x2e8>
 8000f12:	1879      	adds	r1, r7, r1
 8000f14:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f18:	d201      	bcs.n	8000f1e <__udivmoddi4+0x276>
 8000f1a:	4589      	cmp	r9, r1
 8000f1c:	d81f      	bhi.n	8000f5e <__udivmoddi4+0x2b6>
 8000f1e:	eba1 0109 	sub.w	r1, r1, r9
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fb09 f804 	mul.w	r8, r9, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	b292      	uxth	r2, r2
 8000f30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f34:	4542      	cmp	r2, r8
 8000f36:	d229      	bcs.n	8000f8c <__udivmoddi4+0x2e4>
 8000f38:	18ba      	adds	r2, r7, r2
 8000f3a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f3e:	d2c4      	bcs.n	8000eca <__udivmoddi4+0x222>
 8000f40:	4542      	cmp	r2, r8
 8000f42:	d2c2      	bcs.n	8000eca <__udivmoddi4+0x222>
 8000f44:	f1a9 0102 	sub.w	r1, r9, #2
 8000f48:	443a      	add	r2, r7
 8000f4a:	e7be      	b.n	8000eca <__udivmoddi4+0x222>
 8000f4c:	45f0      	cmp	r8, lr
 8000f4e:	d29d      	bcs.n	8000e8c <__udivmoddi4+0x1e4>
 8000f50:	ebbe 0302 	subs.w	r3, lr, r2
 8000f54:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f58:	3801      	subs	r0, #1
 8000f5a:	46e1      	mov	r9, ip
 8000f5c:	e796      	b.n	8000e8c <__udivmoddi4+0x1e4>
 8000f5e:	eba7 0909 	sub.w	r9, r7, r9
 8000f62:	4449      	add	r1, r9
 8000f64:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f68:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6c:	fb09 f804 	mul.w	r8, r9, r4
 8000f70:	e7db      	b.n	8000f2a <__udivmoddi4+0x282>
 8000f72:	4673      	mov	r3, lr
 8000f74:	e77f      	b.n	8000e76 <__udivmoddi4+0x1ce>
 8000f76:	4650      	mov	r0, sl
 8000f78:	e766      	b.n	8000e48 <__udivmoddi4+0x1a0>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e6fd      	b.n	8000d7a <__udivmoddi4+0xd2>
 8000f7e:	443b      	add	r3, r7
 8000f80:	3a02      	subs	r2, #2
 8000f82:	e733      	b.n	8000dec <__udivmoddi4+0x144>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	443b      	add	r3, r7
 8000f8a:	e71c      	b.n	8000dc6 <__udivmoddi4+0x11e>
 8000f8c:	4649      	mov	r1, r9
 8000f8e:	e79c      	b.n	8000eca <__udivmoddi4+0x222>
 8000f90:	eba1 0109 	sub.w	r1, r1, r9
 8000f94:	46c4      	mov	ip, r8
 8000f96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f9a:	fb09 f804 	mul.w	r8, r9, r4
 8000f9e:	e7c4      	b.n	8000f2a <__udivmoddi4+0x282>

08000fa0 <__aeabi_idiv0>:
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	4a07      	ldr	r2, [pc, #28]	@ (8000fd0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000fb4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	4a06      	ldr	r2, [pc, #24]	@ (8000fd4 <vApplicationGetIdleTaskMemory+0x30>)
 8000fba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2280      	movs	r2, #128	@ 0x80
 8000fc0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000fc2:	bf00      	nop
 8000fc4:	3714      	adds	r7, #20
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	200001e4 	.word	0x200001e4
 8000fd4:	20000284 	.word	0x20000284

08000fd8 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4a07      	ldr	r2, [pc, #28]	@ (8001004 <vApplicationGetTimerTaskMemory+0x2c>)
 8000fe8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	4a06      	ldr	r2, [pc, #24]	@ (8001008 <vApplicationGetTimerTaskMemory+0x30>)
 8000fee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ff6:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ff8:	bf00      	nop
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	20000484 	.word	0x20000484
 8001008:	20000524 	.word	0x20000524

0800100c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001010:	f3bf 8f4f 	dsb	sy
}
 8001014:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001016:	4b06      	ldr	r3, [pc, #24]	@ (8001030 <__NVIC_SystemReset+0x24>)
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800101e:	4904      	ldr	r1, [pc, #16]	@ (8001030 <__NVIC_SystemReset+0x24>)
 8001020:	4b04      	ldr	r3, [pc, #16]	@ (8001034 <__NVIC_SystemReset+0x28>)
 8001022:	4313      	orrs	r3, r2
 8001024:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001026:	f3bf 8f4f 	dsb	sy
}
 800102a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <__NVIC_SystemReset+0x20>
 8001030:	e000ed00 	.word	0xe000ed00
 8001034:	05fa0004 	.word	0x05fa0004

08001038 <HardFault_Handler>:
//int c;
uint8_t RxData[50];
uint16_t RxData1[5];
uint32_t FlashRxData[50];
uint32_t now;
void HardFault_Handler(void){
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
 800103c:	f7ff ffe6 	bl	800100c <__NVIC_SystemReset>

08001040 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001040:	b5b0      	push	{r4, r5, r7, lr}
 8001042:	b0be      	sub	sp, #248	@ 0xf8
 8001044:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001046:	f00b faf9 	bl	800c63c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800104a:	f000 f92f 	bl	80012ac <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	HAL_Delay(1000);
 800104e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001052:	f00b fb35 	bl	800c6c0 <HAL_Delay>
	//	 NVIC_SystemReset();
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001056:	f000 fd23 	bl	8001aa0 <MX_GPIO_Init>
	MX_DMA_Init();
 800105a:	f000 fceb 	bl	8001a34 <MX_DMA_Init>
	MX_TIM1_Init();
 800105e:	f000 fb7f 	bl	8001760 <MX_TIM1_Init>
	MX_USART2_UART_Init();
 8001062:	f000 fcbd 	bl	80019e0 <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 8001066:	f000 fc91 	bl	800198c <MX_USART1_UART_Init>
	MX_ADC1_Init();
 800106a:	f000 f98b 	bl	8001384 <MX_ADC1_Init>
	MX_SPI3_Init();
 800106e:	f000 fb41 	bl	80016f4 <MX_SPI3_Init>
	MX_RTC_Init();
 8001072:	f000 fa7d 	bl	8001570 <MX_RTC_Init>
	MX_TIM4_Init();
 8001076:	f000 fc13 	bl	80018a0 <MX_TIM4_Init>
	MX_SPI1_Init();
 800107a:	f000 fb05 	bl	8001688 <MX_SPI1_Init>
	MX_ADC3_Init();
 800107e:	f000 fa25 	bl	80014cc <MX_ADC3_Init>
	MX_ADC2_Init();
 8001082:	f000 f9d1 	bl	8001428 <MX_ADC2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001086:	2100      	movs	r1, #0
 8001088:	486d      	ldr	r0, [pc, #436]	@ (8001240 <main+0x200>)
 800108a:	f00e fe8b 	bl	800fda4 <HAL_TIM_PWM_Start>
	SPI_Init();
 800108e:	f004 f87b 	bl	8005188 <SPI_Init>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001092:	2100      	movs	r1, #0
 8001094:	486b      	ldr	r0, [pc, #428]	@ (8001244 <main+0x204>)
 8001096:	f00e fe85 	bl	800fda4 <HAL_TIM_PWM_Start>
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* definition and creation of EEPROM */
	osSemaphoreDef(EEPROM);
 800109a:	2300      	movs	r3, #0
 800109c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80010a0:	2300      	movs	r3, #0
 80010a2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
	EEPROMHandle = osSemaphoreCreate(osSemaphore(EEPROM), 1);
 80010a6:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 80010aa:	2101      	movs	r1, #1
 80010ac:	4618      	mov	r0, r3
 80010ae:	f011 fa4d 	bl	801254c <osSemaphoreCreate>
 80010b2:	4603      	mov	r3, r0
 80010b4:	4a64      	ldr	r2, [pc, #400]	@ (8001248 <main+0x208>)
 80010b6:	6013      	str	r3, [r2, #0]
	/* add semaphores, ... */
	/* USER CODE END RTOS_SEMAPHORES */

	/* Create the timer(s) */
	/* definition and creation of Button_clear */
	osTimerDef(Button_clear, Clear_Button);
 80010b8:	4b64      	ldr	r3, [pc, #400]	@ (800124c <main+0x20c>)
 80010ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80010be:	2300      	movs	r3, #0
 80010c0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
	Button_clearHandle = osTimerCreate(osTimer(Button_clear), osTimerPeriodic, NULL);
 80010c4:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 80010c8:	2200      	movs	r2, #0
 80010ca:	2101      	movs	r1, #1
 80010cc:	4618      	mov	r0, r3
 80010ce:	f011 f989 	bl	80123e4 <osTimerCreate>
 80010d2:	4603      	mov	r3, r0
 80010d4:	4a5e      	ldr	r2, [pc, #376]	@ (8001250 <main+0x210>)
 80010d6:	6013      	str	r3, [r2, #0]

	/* definition and creation of Touch_value_reset */
	osTimerDef(Touch_value_reset, value_reset);
 80010d8:	4b5e      	ldr	r3, [pc, #376]	@ (8001254 <main+0x214>)
 80010da:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80010de:	2300      	movs	r3, #0
 80010e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
	Touch_value_resetHandle = osTimerCreate(osTimer(Touch_value_reset), osTimerPeriodic, NULL);
 80010e4:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80010e8:	2200      	movs	r2, #0
 80010ea:	2101      	movs	r1, #1
 80010ec:	4618      	mov	r0, r3
 80010ee:	f011 f979 	bl	80123e4 <osTimerCreate>
 80010f2:	4603      	mov	r3, r0
 80010f4:	4a58      	ldr	r2, [pc, #352]	@ (8001258 <main+0x218>)
 80010f6:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of dwin */
	osThreadDef(dwin, dwin_data, osPriorityRealtime, 0, 1024);
 80010f8:	4b58      	ldr	r3, [pc, #352]	@ (800125c <main+0x21c>)
 80010fa:	f107 04c4 	add.w	r4, r7, #196	@ 0xc4
 80010fe:	461d      	mov	r5, r3
 8001100:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001102:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001104:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001108:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	dwinHandle = osThreadCreate(osThread(dwin), NULL);
 800110c:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f011 f905 	bl	8012322 <osThreadCreate>
 8001118:	4603      	mov	r3, r0
 800111a:	4a51      	ldr	r2, [pc, #324]	@ (8001260 <main+0x220>)
 800111c:	6013      	str	r3, [r2, #0]

	/* definition and creation of sensor */
	osThreadDef(sensor, sensor_one, osPriorityNormal, 0, 128);
 800111e:	4b51      	ldr	r3, [pc, #324]	@ (8001264 <main+0x224>)
 8001120:	f107 04a8 	add.w	r4, r7, #168	@ 0xa8
 8001124:	461d      	mov	r5, r3
 8001126:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001128:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800112a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800112e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	sensorHandle = osThreadCreate(osThread(sensor), NULL);
 8001132:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001136:	2100      	movs	r1, #0
 8001138:	4618      	mov	r0, r3
 800113a:	f011 f8f2 	bl	8012322 <osThreadCreate>
 800113e:	4603      	mov	r3, r0
 8001140:	4a49      	ldr	r2, [pc, #292]	@ (8001268 <main+0x228>)
 8001142:	6013      	str	r3, [r2, #0]

	/* definition and creation of mode_control */
	osThreadDef(mode_control, mode_ctr, osPriorityRealtime, 0, 256);
 8001144:	4b49      	ldr	r3, [pc, #292]	@ (800126c <main+0x22c>)
 8001146:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 800114a:	461d      	mov	r5, r3
 800114c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800114e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001150:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001154:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	mode_controlHandle = osThreadCreate(osThread(mode_control), NULL);
 8001158:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800115c:	2100      	movs	r1, #0
 800115e:	4618      	mov	r0, r3
 8001160:	f011 f8df 	bl	8012322 <osThreadCreate>
 8001164:	4603      	mov	r3, r0
 8001166:	4a42      	ldr	r2, [pc, #264]	@ (8001270 <main+0x230>)
 8001168:	6013      	str	r3, [r2, #0]

	/* definition and creation of Notification */
	osThreadDef(Notification, Icon, osPriorityNormal, 0, 128);
 800116a:	4b42      	ldr	r3, [pc, #264]	@ (8001274 <main+0x234>)
 800116c:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8001170:	461d      	mov	r5, r3
 8001172:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001174:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001176:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800117a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	NotificationHandle = osThreadCreate(osThread(Notification), NULL);
 800117e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001182:	2100      	movs	r1, #0
 8001184:	4618      	mov	r0, r3
 8001186:	f011 f8cc 	bl	8012322 <osThreadCreate>
 800118a:	4603      	mov	r3, r0
 800118c:	4a3a      	ldr	r2, [pc, #232]	@ (8001278 <main+0x238>)
 800118e:	6013      	str	r3, [r2, #0]

	/* definition and creation of BT_ADC */
	osThreadDef(BT_ADC, Battery, osPriorityNormal, 0, 128);
 8001190:	4b3a      	ldr	r3, [pc, #232]	@ (800127c <main+0x23c>)
 8001192:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8001196:	461d      	mov	r5, r3
 8001198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800119a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800119c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	BT_ADCHandle = osThreadCreate(osThread(BT_ADC), NULL);
 80011a4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f011 f8b9 	bl	8012322 <osThreadCreate>
 80011b0:	4603      	mov	r3, r0
 80011b2:	4a33      	ldr	r2, [pc, #204]	@ (8001280 <main+0x240>)
 80011b4:	6013      	str	r3, [r2, #0]

	/* definition and creation of Loop_Graph */
	osThreadDef(Loop_Graph, Loop, osPriorityBelowNormal, 0, 128);
 80011b6:	4b33      	ldr	r3, [pc, #204]	@ (8001284 <main+0x244>)
 80011b8:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80011bc:	461d      	mov	r5, r3
 80011be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Loop_GraphHandle = osThreadCreate(osThread(Loop_Graph), NULL);
 80011ca:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011ce:	2100      	movs	r1, #0
 80011d0:	4618      	mov	r0, r3
 80011d2:	f011 f8a6 	bl	8012322 <osThreadCreate>
 80011d6:	4603      	mov	r3, r0
 80011d8:	4a2b      	ldr	r2, [pc, #172]	@ (8001288 <main+0x248>)
 80011da:	6013      	str	r3, [r2, #0]

	/* definition and creation of FVGraph */
	osThreadDef(FVGraph, FVG, osPriorityBelowNormal, 0, 128);
 80011dc:	4b2b      	ldr	r3, [pc, #172]	@ (800128c <main+0x24c>)
 80011de:	f107 041c 	add.w	r4, r7, #28
 80011e2:	461d      	mov	r5, r3
 80011e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	FVGraphHandle = osThreadCreate(osThread(FVGraph), NULL);
 80011f0:	f107 031c 	add.w	r3, r7, #28
 80011f4:	2100      	movs	r1, #0
 80011f6:	4618      	mov	r0, r3
 80011f8:	f011 f893 	bl	8012322 <osThreadCreate>
 80011fc:	4603      	mov	r3, r0
 80011fe:	4a24      	ldr	r2, [pc, #144]	@ (8001290 <main+0x250>)
 8001200:	6013      	str	r3, [r2, #0]

	/* definition and creation of Backup */
	osThreadDef(Backup, backup, osPriorityBelowNormal, 0, 256);
 8001202:	4b24      	ldr	r3, [pc, #144]	@ (8001294 <main+0x254>)
 8001204:	463c      	mov	r4, r7
 8001206:	461d      	mov	r5, r3
 8001208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800120a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800120c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001210:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	BackupHandle = osThreadCreate(osThread(Backup), NULL);
 8001214:	463b      	mov	r3, r7
 8001216:	2100      	movs	r1, #0
 8001218:	4618      	mov	r0, r3
 800121a:	f011 f882 	bl	8012322 <osThreadCreate>
 800121e:	4603      	mov	r3, r0
 8001220:	4a1d      	ldr	r2, [pc, #116]	@ (8001298 <main+0x258>)
 8001222:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	HAL_UART_Receive_DMA(&huart2, sensor_data, sizeof(sensor_data));
 8001224:	2218      	movs	r2, #24
 8001226:	491d      	ldr	r1, [pc, #116]	@ (800129c <main+0x25c>)
 8001228:	481d      	ldr	r0, [pc, #116]	@ (80012a0 <main+0x260>)
 800122a:	f00f fe23 	bl	8010e74 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart1, DISPLAY_INPUT, sizeof(DISPLAY_INPUT));
 800122e:	2209      	movs	r2, #9
 8001230:	491c      	ldr	r1, [pc, #112]	@ (80012a4 <main+0x264>)
 8001232:	481d      	ldr	r0, [pc, #116]	@ (80012a8 <main+0x268>)
 8001234:	f00f fe1e 	bl	8010e74 <HAL_UART_Receive_DMA>

	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8001238:	f011 f86c 	bl	8012314 <osKernelStart>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */


	while (1)
 800123c:	bf00      	nop
 800123e:	e7fd      	b.n	800123c <main+0x1fc>
 8001240:	20000f40 	.word	0x20000f40
 8001244:	20000f88 	.word	0x20000f88
 8001248:	20001148 	.word	0x20001148
 800124c:	0800b529 	.word	0x0800b529
 8001250:	20001140 	.word	0x20001140
 8001254:	0800b559 	.word	0x0800b559
 8001258:	20001144 	.word	0x20001144
 800125c:	08015ff0 	.word	0x08015ff0
 8001260:	20001120 	.word	0x20001120
 8001264:	08016014 	.word	0x08016014
 8001268:	20001124 	.word	0x20001124
 800126c:	08016040 	.word	0x08016040
 8001270:	20001128 	.word	0x20001128
 8001274:	0801606c 	.word	0x0801606c
 8001278:	2000112c 	.word	0x2000112c
 800127c:	08016090 	.word	0x08016090
 8001280:	20001130 	.word	0x20001130
 8001284:	080160b8 	.word	0x080160b8
 8001288:	20001134 	.word	0x20001134
 800128c:	080160dc 	.word	0x080160dc
 8001290:	20001138 	.word	0x20001138
 8001294:	08016100 	.word	0x08016100
 8001298:	2000113c 	.word	0x2000113c
 800129c:	20001320 	.word	0x20001320
 80012a0:	20001018 	.word	0x20001018
 80012a4:	20001938 	.word	0x20001938
 80012a8:	20000fd0 	.word	0x20000fd0

080012ac <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b094      	sub	sp, #80	@ 0x50
 80012b0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012b2:	f107 0320 	add.w	r3, r7, #32
 80012b6:	2230      	movs	r2, #48	@ 0x30
 80012b8:	2100      	movs	r1, #0
 80012ba:	4618      	mov	r0, r3
 80012bc:	f014 f958 	bl	8015570 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80012d0:	2300      	movs	r3, #0
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	4b29      	ldr	r3, [pc, #164]	@ (800137c <SystemClock_Config+0xd0>)
 80012d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d8:	4a28      	ldr	r2, [pc, #160]	@ (800137c <SystemClock_Config+0xd0>)
 80012da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012de:	6413      	str	r3, [r2, #64]	@ 0x40
 80012e0:	4b26      	ldr	r3, [pc, #152]	@ (800137c <SystemClock_Config+0xd0>)
 80012e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012ec:	2300      	movs	r3, #0
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	4b23      	ldr	r3, [pc, #140]	@ (8001380 <SystemClock_Config+0xd4>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a22      	ldr	r2, [pc, #136]	@ (8001380 <SystemClock_Config+0xd4>)
 80012f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012fa:	6013      	str	r3, [r2, #0]
 80012fc:	4b20      	ldr	r3, [pc, #128]	@ (8001380 <SystemClock_Config+0xd4>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001308:	2309      	movs	r3, #9
 800130a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800130c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001310:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001312:	2301      	movs	r3, #1
 8001314:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001316:	2302      	movs	r3, #2
 8001318:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800131a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800131e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001320:	2304      	movs	r3, #4
 8001322:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8001324:	23a8      	movs	r3, #168	@ 0xa8
 8001326:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001328:	2302      	movs	r3, #2
 800132a:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800132c:	2304      	movs	r3, #4
 800132e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001330:	f107 0320 	add.w	r3, r7, #32
 8001334:	4618      	mov	r0, r3
 8001336:	f00c fcbd 	bl	800dcb4 <HAL_RCC_OscConfig>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <SystemClock_Config+0x98>
	{
		Error_Handler();
 8001340:	f00a f9f4 	bl	800b72c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001344:	230f      	movs	r3, #15
 8001346:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001348:	2302      	movs	r3, #2
 800134a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001350:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001354:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001356:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800135a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800135c:	f107 030c 	add.w	r3, r7, #12
 8001360:	2105      	movs	r1, #5
 8001362:	4618      	mov	r0, r3
 8001364:	f00c ff1e 	bl	800e1a4 <HAL_RCC_ClockConfig>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <SystemClock_Config+0xc6>
	{
		Error_Handler();
 800136e:	f00a f9dd 	bl	800b72c <Error_Handler>
	}
}
 8001372:	bf00      	nop
 8001374:	3750      	adds	r7, #80	@ 0x50
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40023800 	.word	0x40023800
 8001380:	40007000 	.word	0x40007000

08001384 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 800138a:	463b      	mov	r3, r7
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8001396:	4b21      	ldr	r3, [pc, #132]	@ (800141c <MX_ADC1_Init+0x98>)
 8001398:	4a21      	ldr	r2, [pc, #132]	@ (8001420 <MX_ADC1_Init+0x9c>)
 800139a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800139c:	4b1f      	ldr	r3, [pc, #124]	@ (800141c <MX_ADC1_Init+0x98>)
 800139e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013a2:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013a4:	4b1d      	ldr	r3, [pc, #116]	@ (800141c <MX_ADC1_Init+0x98>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 80013aa:	4b1c      	ldr	r3, [pc, #112]	@ (800141c <MX_ADC1_Init+0x98>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80013b0:	4b1a      	ldr	r3, [pc, #104]	@ (800141c <MX_ADC1_Init+0x98>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013b6:	4b19      	ldr	r3, [pc, #100]	@ (800141c <MX_ADC1_Init+0x98>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013be:	4b17      	ldr	r3, [pc, #92]	@ (800141c <MX_ADC1_Init+0x98>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013c4:	4b15      	ldr	r3, [pc, #84]	@ (800141c <MX_ADC1_Init+0x98>)
 80013c6:	4a17      	ldr	r2, [pc, #92]	@ (8001424 <MX_ADC1_Init+0xa0>)
 80013c8:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013ca:	4b14      	ldr	r3, [pc, #80]	@ (800141c <MX_ADC1_Init+0x98>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 80013d0:	4b12      	ldr	r3, [pc, #72]	@ (800141c <MX_ADC1_Init+0x98>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80013d6:	4b11      	ldr	r3, [pc, #68]	@ (800141c <MX_ADC1_Init+0x98>)
 80013d8:	2200      	movs	r2, #0
 80013da:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013de:	4b0f      	ldr	r3, [pc, #60]	@ (800141c <MX_ADC1_Init+0x98>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013e4:	480d      	ldr	r0, [pc, #52]	@ (800141c <MX_ADC1_Init+0x98>)
 80013e6:	f00b f98f 	bl	800c708 <HAL_ADC_Init>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_ADC1_Init+0x70>
	{
		Error_Handler();
 80013f0:	f00a f99c 	bl	800b72c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 80013f4:	2309      	movs	r3, #9
 80013f6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80013f8:	2301      	movs	r3, #1
 80013fa:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013fc:	2300      	movs	r3, #0
 80013fe:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001400:	463b      	mov	r3, r7
 8001402:	4619      	mov	r1, r3
 8001404:	4805      	ldr	r0, [pc, #20]	@ (800141c <MX_ADC1_Init+0x98>)
 8001406:	f00b fb61 	bl	800cacc <HAL_ADC_ConfigChannel>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_ADC1_Init+0x90>
	{
		Error_Handler();
 8001410:	f00a f98c 	bl	800b72c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001414:	bf00      	nop
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000d98 	.word	0x20000d98
 8001420:	40012000 	.word	0x40012000
 8001424:	0f000001 	.word	0x0f000001

08001428 <MX_ADC2_Init>:
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 800142e:	463b      	mov	r3, r7
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC2_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc2.Instance = ADC2;
 800143a:	4b21      	ldr	r3, [pc, #132]	@ (80014c0 <MX_ADC2_Init+0x98>)
 800143c:	4a21      	ldr	r2, [pc, #132]	@ (80014c4 <MX_ADC2_Init+0x9c>)
 800143e:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001440:	4b1f      	ldr	r3, [pc, #124]	@ (80014c0 <MX_ADC2_Init+0x98>)
 8001442:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001446:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001448:	4b1d      	ldr	r3, [pc, #116]	@ (80014c0 <MX_ADC2_Init+0x98>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = DISABLE;
 800144e:	4b1c      	ldr	r3, [pc, #112]	@ (80014c0 <MX_ADC2_Init+0x98>)
 8001450:	2200      	movs	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
	hadc2.Init.ContinuousConvMode = DISABLE;
 8001454:	4b1a      	ldr	r3, [pc, #104]	@ (80014c0 <MX_ADC2_Init+0x98>)
 8001456:	2200      	movs	r2, #0
 8001458:	761a      	strb	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 800145a:	4b19      	ldr	r3, [pc, #100]	@ (80014c0 <MX_ADC2_Init+0x98>)
 800145c:	2200      	movs	r2, #0
 800145e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001462:	4b17      	ldr	r3, [pc, #92]	@ (80014c0 <MX_ADC2_Init+0x98>)
 8001464:	2200      	movs	r2, #0
 8001466:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001468:	4b15      	ldr	r3, [pc, #84]	@ (80014c0 <MX_ADC2_Init+0x98>)
 800146a:	4a17      	ldr	r2, [pc, #92]	@ (80014c8 <MX_ADC2_Init+0xa0>)
 800146c:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800146e:	4b14      	ldr	r3, [pc, #80]	@ (80014c0 <MX_ADC2_Init+0x98>)
 8001470:	2200      	movs	r2, #0
 8001472:	60da      	str	r2, [r3, #12]
	hadc2.Init.NbrOfConversion = 1;
 8001474:	4b12      	ldr	r3, [pc, #72]	@ (80014c0 <MX_ADC2_Init+0x98>)
 8001476:	2201      	movs	r2, #1
 8001478:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = DISABLE;
 800147a:	4b11      	ldr	r3, [pc, #68]	@ (80014c0 <MX_ADC2_Init+0x98>)
 800147c:	2200      	movs	r2, #0
 800147e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001482:	4b0f      	ldr	r3, [pc, #60]	@ (80014c0 <MX_ADC2_Init+0x98>)
 8001484:	2201      	movs	r2, #1
 8001486:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001488:	480d      	ldr	r0, [pc, #52]	@ (80014c0 <MX_ADC2_Init+0x98>)
 800148a:	f00b f93d 	bl	800c708 <HAL_ADC_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_ADC2_Init+0x70>
	{
		Error_Handler();
 8001494:	f00a f94a 	bl	800b72c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8001498:	2300      	movs	r3, #0
 800149a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800149c:	2301      	movs	r3, #1
 800149e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014a4:	463b      	mov	r3, r7
 80014a6:	4619      	mov	r1, r3
 80014a8:	4805      	ldr	r0, [pc, #20]	@ (80014c0 <MX_ADC2_Init+0x98>)
 80014aa:	f00b fb0f 	bl	800cacc <HAL_ADC_ConfigChannel>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_ADC2_Init+0x90>
	{
		Error_Handler();
 80014b4:	f00a f93a 	bl	800b72c <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 80014b8:	bf00      	nop
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000de0 	.word	0x20000de0
 80014c4:	40012100 	.word	0x40012100
 80014c8:	0f000001 	.word	0x0f000001

080014cc <MX_ADC3_Init>:
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 80014d2:	463b      	mov	r3, r7
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC3_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 80014de:	4b21      	ldr	r3, [pc, #132]	@ (8001564 <MX_ADC3_Init+0x98>)
 80014e0:	4a21      	ldr	r2, [pc, #132]	@ (8001568 <MX_ADC3_Init+0x9c>)
 80014e2:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001564 <MX_ADC3_Init+0x98>)
 80014e6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80014ea:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80014ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001564 <MX_ADC3_Init+0x98>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = DISABLE;
 80014f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001564 <MX_ADC3_Init+0x98>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = ENABLE;
 80014f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001564 <MX_ADC3_Init+0x98>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	761a      	strb	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 80014fe:	4b19      	ldr	r3, [pc, #100]	@ (8001564 <MX_ADC3_Init+0x98>)
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001506:	4b17      	ldr	r3, [pc, #92]	@ (8001564 <MX_ADC3_Init+0x98>)
 8001508:	2200      	movs	r2, #0
 800150a:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800150c:	4b15      	ldr	r3, [pc, #84]	@ (8001564 <MX_ADC3_Init+0x98>)
 800150e:	4a17      	ldr	r2, [pc, #92]	@ (800156c <MX_ADC3_Init+0xa0>)
 8001510:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001512:	4b14      	ldr	r3, [pc, #80]	@ (8001564 <MX_ADC3_Init+0x98>)
 8001514:	2200      	movs	r2, #0
 8001516:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 8001518:	4b12      	ldr	r3, [pc, #72]	@ (8001564 <MX_ADC3_Init+0x98>)
 800151a:	2201      	movs	r2, #1
 800151c:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 800151e:	4b11      	ldr	r3, [pc, #68]	@ (8001564 <MX_ADC3_Init+0x98>)
 8001520:	2200      	movs	r2, #0
 8001522:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001526:	4b0f      	ldr	r3, [pc, #60]	@ (8001564 <MX_ADC3_Init+0x98>)
 8001528:	2201      	movs	r2, #1
 800152a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800152c:	480d      	ldr	r0, [pc, #52]	@ (8001564 <MX_ADC3_Init+0x98>)
 800152e:	f00b f8eb 	bl	800c708 <HAL_ADC_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_ADC3_Init+0x70>
	{
		Error_Handler();
 8001538:	f00a f8f8 	bl	800b72c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 800153c:	2301      	movs	r3, #1
 800153e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001540:	2301      	movs	r3, #1
 8001542:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001544:	2300      	movs	r3, #0
 8001546:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001548:	463b      	mov	r3, r7
 800154a:	4619      	mov	r1, r3
 800154c:	4805      	ldr	r0, [pc, #20]	@ (8001564 <MX_ADC3_Init+0x98>)
 800154e:	f00b fabd 	bl	800cacc <HAL_ADC_ConfigChannel>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_ADC3_Init+0x90>
	{
		Error_Handler();
 8001558:	f00a f8e8 	bl	800b72c <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 800155c:	bf00      	nop
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000e28 	.word	0x20000e28
 8001568:	40012200 	.word	0x40012200
 800156c:	0f000001 	.word	0x0f000001

08001570 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b090      	sub	sp, #64	@ 0x40
 8001574:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = {0};
 8001576:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]
 8001584:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8001586:	2300      	movs	r3, #0
 8001588:	62bb      	str	r3, [r7, #40]	@ 0x28
	RTC_AlarmTypeDef sAlarm = {0};
 800158a:	463b      	mov	r3, r7
 800158c:	2228      	movs	r2, #40	@ 0x28
 800158e:	2100      	movs	r1, #0
 8001590:	4618      	mov	r0, r3
 8001592:	f013 ffed 	bl	8015570 <memset>

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8001596:	4b3a      	ldr	r3, [pc, #232]	@ (8001680 <MX_RTC_Init+0x110>)
 8001598:	4a3a      	ldr	r2, [pc, #232]	@ (8001684 <MX_RTC_Init+0x114>)
 800159a:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800159c:	4b38      	ldr	r3, [pc, #224]	@ (8001680 <MX_RTC_Init+0x110>)
 800159e:	2200      	movs	r2, #0
 80015a0:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 80015a2:	4b37      	ldr	r3, [pc, #220]	@ (8001680 <MX_RTC_Init+0x110>)
 80015a4:	227f      	movs	r2, #127	@ 0x7f
 80015a6:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 80015a8:	4b35      	ldr	r3, [pc, #212]	@ (8001680 <MX_RTC_Init+0x110>)
 80015aa:	22ff      	movs	r2, #255	@ 0xff
 80015ac:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80015ae:	4b34      	ldr	r3, [pc, #208]	@ (8001680 <MX_RTC_Init+0x110>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80015b4:	4b32      	ldr	r3, [pc, #200]	@ (8001680 <MX_RTC_Init+0x110>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80015ba:	4b31      	ldr	r3, [pc, #196]	@ (8001680 <MX_RTC_Init+0x110>)
 80015bc:	2200      	movs	r2, #0
 80015be:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015c0:	482f      	ldr	r0, [pc, #188]	@ (8001680 <MX_RTC_Init+0x110>)
 80015c2:	f00d f923 	bl	800e80c <HAL_RTC_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_RTC_Init+0x60>
	{
		Error_Handler();
 80015cc:	f00a f8ae 	bl	800b72c <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	sTime.Minutes = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	sTime.Seconds = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80015e2:	2300      	movs	r3, #0
 80015e4:	63bb      	str	r3, [r7, #56]	@ 0x38
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80015e6:	2300      	movs	r3, #0
 80015e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80015ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015ee:	2200      	movs	r2, #0
 80015f0:	4619      	mov	r1, r3
 80015f2:	4823      	ldr	r0, [pc, #140]	@ (8001680 <MX_RTC_Init+0x110>)
 80015f4:	f00d f98d 	bl	800e912 <HAL_RTC_SetTime>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_RTC_Init+0x92>
	{
		Error_Handler();
 80015fe:	f00a f895 	bl	800b72c <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8001602:	2302      	movs	r3, #2
 8001604:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	sDate.Month = RTC_MONTH_APRIL;
 8001608:	2304      	movs	r3, #4
 800160a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	sDate.Date = 1;
 800160e:	2301      	movs	r3, #1
 8001610:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	sDate.Year = 25;
 8001614:	2319      	movs	r3, #25
 8001616:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800161a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800161e:	2200      	movs	r2, #0
 8001620:	4619      	mov	r1, r3
 8001622:	4817      	ldr	r0, [pc, #92]	@ (8001680 <MX_RTC_Init+0x110>)
 8001624:	f00d fa0f 	bl	800ea46 <HAL_RTC_SetDate>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_RTC_Init+0xc2>
	{
		Error_Handler();
 800162e:	f00a f87d 	bl	800b72c <Error_Handler>
	}

	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 0;
 8001632:	2300      	movs	r3, #0
 8001634:	703b      	strb	r3, [r7, #0]
	sAlarm.AlarmTime.Minutes = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	707b      	strb	r3, [r7, #1]
	sAlarm.AlarmTime.Seconds = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	70bb      	strb	r3, [r7, #2]
	sAlarm.AlarmTime.SubSeconds = 0;
 800163e:	2300      	movs	r3, #0
 8001640:	607b      	str	r3, [r7, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800164a:	2300      	movs	r3, #0
 800164c:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800164e:	2300      	movs	r3, #0
 8001650:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDay = 1;
 8001656:	2301      	movs	r3, #1
 8001658:	f887 3020 	strb.w	r3, [r7, #32]
	sAlarm.Alarm = RTC_ALARM_A;
 800165c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001660:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001662:	463b      	mov	r3, r7
 8001664:	2200      	movs	r2, #0
 8001666:	4619      	mov	r1, r3
 8001668:	4805      	ldr	r0, [pc, #20]	@ (8001680 <MX_RTC_Init+0x110>)
 800166a:	f00d fa71 	bl	800eb50 <HAL_RTC_SetAlarm_IT>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_RTC_Init+0x108>
	{
		Error_Handler();
 8001674:	f00a f85a 	bl	800b72c <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8001678:	bf00      	nop
 800167a:	3740      	adds	r7, #64	@ 0x40
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000e70 	.word	0x20000e70
 8001684:	40002800 	.word	0x40002800

08001688 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800168c:	4b17      	ldr	r3, [pc, #92]	@ (80016ec <MX_SPI1_Init+0x64>)
 800168e:	4a18      	ldr	r2, [pc, #96]	@ (80016f0 <MX_SPI1_Init+0x68>)
 8001690:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001692:	4b16      	ldr	r3, [pc, #88]	@ (80016ec <MX_SPI1_Init+0x64>)
 8001694:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001698:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800169a:	4b14      	ldr	r3, [pc, #80]	@ (80016ec <MX_SPI1_Init+0x64>)
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016a0:	4b12      	ldr	r3, [pc, #72]	@ (80016ec <MX_SPI1_Init+0x64>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016a6:	4b11      	ldr	r3, [pc, #68]	@ (80016ec <MX_SPI1_Init+0x64>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016ac:	4b0f      	ldr	r3, [pc, #60]	@ (80016ec <MX_SPI1_Init+0x64>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80016b2:	4b0e      	ldr	r3, [pc, #56]	@ (80016ec <MX_SPI1_Init+0x64>)
 80016b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016b8:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016ba:	4b0c      	ldr	r3, [pc, #48]	@ (80016ec <MX_SPI1_Init+0x64>)
 80016bc:	2200      	movs	r2, #0
 80016be:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016c0:	4b0a      	ldr	r3, [pc, #40]	@ (80016ec <MX_SPI1_Init+0x64>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016c6:	4b09      	ldr	r3, [pc, #36]	@ (80016ec <MX_SPI1_Init+0x64>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016cc:	4b07      	ldr	r3, [pc, #28]	@ (80016ec <MX_SPI1_Init+0x64>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 80016d2:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <MX_SPI1_Init+0x64>)
 80016d4:	220a      	movs	r2, #10
 80016d6:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016d8:	4804      	ldr	r0, [pc, #16]	@ (80016ec <MX_SPI1_Init+0x64>)
 80016da:	f00d fc77 	bl	800efcc <HAL_SPI_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 80016e4:	f00a f822 	bl	800b72c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000e90 	.word	0x20000e90
 80016f0:	40013000 	.word	0x40013000

080016f4 <MX_SPI3_Init>:
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 80016f8:	4b17      	ldr	r3, [pc, #92]	@ (8001758 <MX_SPI3_Init+0x64>)
 80016fa:	4a18      	ldr	r2, [pc, #96]	@ (800175c <MX_SPI3_Init+0x68>)
 80016fc:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 80016fe:	4b16      	ldr	r3, [pc, #88]	@ (8001758 <MX_SPI3_Init+0x64>)
 8001700:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001704:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001706:	4b14      	ldr	r3, [pc, #80]	@ (8001758 <MX_SPI3_Init+0x64>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800170c:	4b12      	ldr	r3, [pc, #72]	@ (8001758 <MX_SPI3_Init+0x64>)
 800170e:	2200      	movs	r2, #0
 8001710:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001712:	4b11      	ldr	r3, [pc, #68]	@ (8001758 <MX_SPI3_Init+0x64>)
 8001714:	2202      	movs	r2, #2
 8001716:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001718:	4b0f      	ldr	r3, [pc, #60]	@ (8001758 <MX_SPI3_Init+0x64>)
 800171a:	2200      	movs	r2, #0
 800171c:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 800171e:	4b0e      	ldr	r3, [pc, #56]	@ (8001758 <MX_SPI3_Init+0x64>)
 8001720:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001724:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001726:	4b0c      	ldr	r3, [pc, #48]	@ (8001758 <MX_SPI3_Init+0x64>)
 8001728:	2218      	movs	r2, #24
 800172a:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800172c:	4b0a      	ldr	r3, [pc, #40]	@ (8001758 <MX_SPI3_Init+0x64>)
 800172e:	2200      	movs	r2, #0
 8001730:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001732:	4b09      	ldr	r3, [pc, #36]	@ (8001758 <MX_SPI3_Init+0x64>)
 8001734:	2200      	movs	r2, #0
 8001736:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001738:	4b07      	ldr	r3, [pc, #28]	@ (8001758 <MX_SPI3_Init+0x64>)
 800173a:	2200      	movs	r2, #0
 800173c:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi3.Init.CRCPolynomial = 10;
 800173e:	4b06      	ldr	r3, [pc, #24]	@ (8001758 <MX_SPI3_Init+0x64>)
 8001740:	220a      	movs	r2, #10
 8001742:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001744:	4804      	ldr	r0, [pc, #16]	@ (8001758 <MX_SPI3_Init+0x64>)
 8001746:	f00d fc41 	bl	800efcc <HAL_SPI_Init>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_SPI3_Init+0x60>
	{
		Error_Handler();
 8001750:	f009 ffec 	bl	800b72c <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 8001754:	bf00      	nop
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000ee8 	.word	0x20000ee8
 800175c:	40003c00 	.word	0x40003c00

08001760 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b096      	sub	sp, #88	@ 0x58
 8001764:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001766:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	605a      	str	r2, [r3, #4]
 8001770:	609a      	str	r2, [r3, #8]
 8001772:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001774:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 800177e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]
 8001788:	609a      	str	r2, [r3, #8]
 800178a:	60da      	str	r2, [r3, #12]
 800178c:	611a      	str	r2, [r3, #16]
 800178e:	615a      	str	r2, [r3, #20]
 8001790:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001792:	1d3b      	adds	r3, r7, #4
 8001794:	2220      	movs	r2, #32
 8001796:	2100      	movs	r1, #0
 8001798:	4618      	mov	r0, r3
 800179a:	f013 fee9 	bl	8015570 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800179e:	4b3e      	ldr	r3, [pc, #248]	@ (8001898 <MX_TIM1_Init+0x138>)
 80017a0:	4a3e      	ldr	r2, [pc, #248]	@ (800189c <MX_TIM1_Init+0x13c>)
 80017a2:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 1;
 80017a4:	4b3c      	ldr	r3, [pc, #240]	@ (8001898 <MX_TIM1_Init+0x138>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001898 <MX_TIM1_Init+0x138>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 210-1;
 80017b0:	4b39      	ldr	r3, [pc, #228]	@ (8001898 <MX_TIM1_Init+0x138>)
 80017b2:	22d1      	movs	r2, #209	@ 0xd1
 80017b4:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b6:	4b38      	ldr	r3, [pc, #224]	@ (8001898 <MX_TIM1_Init+0x138>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80017bc:	4b36      	ldr	r3, [pc, #216]	@ (8001898 <MX_TIM1_Init+0x138>)
 80017be:	2200      	movs	r2, #0
 80017c0:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c2:	4b35      	ldr	r3, [pc, #212]	@ (8001898 <MX_TIM1_Init+0x138>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017c8:	4833      	ldr	r0, [pc, #204]	@ (8001898 <MX_TIM1_Init+0x138>)
 80017ca:	f00e f9d1 	bl	800fb70 <HAL_TIM_Base_Init>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_TIM1_Init+0x78>
	{
		Error_Handler();
 80017d4:	f009 ffaa 	bl	800b72c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017dc:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017de:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80017e2:	4619      	mov	r1, r3
 80017e4:	482c      	ldr	r0, [pc, #176]	@ (8001898 <MX_TIM1_Init+0x138>)
 80017e6:	f00e fd57 	bl	8010298 <HAL_TIM_ConfigClockSource>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM1_Init+0x94>
	{
		Error_Handler();
 80017f0:	f009 ff9c 	bl	800b72c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017f4:	4828      	ldr	r0, [pc, #160]	@ (8001898 <MX_TIM1_Init+0x138>)
 80017f6:	f00e fa7b 	bl	800fcf0 <HAL_TIM_PWM_Init>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM1_Init+0xa4>
	{
		Error_Handler();
 8001800:	f009 ff94 	bl	800b72c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001804:	2300      	movs	r3, #0
 8001806:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001808:	2300      	movs	r3, #0
 800180a:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800180c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001810:	4619      	mov	r1, r3
 8001812:	4821      	ldr	r0, [pc, #132]	@ (8001898 <MX_TIM1_Init+0x138>)
 8001814:	f00f f94c 	bl	8010ab0 <HAL_TIMEx_MasterConfigSynchronization>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_TIM1_Init+0xc2>
	{
		Error_Handler();
 800181e:	f009 ff85 	bl	800b72c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001822:	2360      	movs	r3, #96	@ 0x60
 8001824:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 0;
 8001826:	2300      	movs	r3, #0
 8001828:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800182a:	2300      	movs	r3, #0
 800182c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800182e:	2300      	movs	r3, #0
 8001830:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001832:	2300      	movs	r3, #0
 8001834:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001836:	2300      	movs	r3, #0
 8001838:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800183a:	2300      	movs	r3, #0
 800183c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800183e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001842:	2200      	movs	r2, #0
 8001844:	4619      	mov	r1, r3
 8001846:	4814      	ldr	r0, [pc, #80]	@ (8001898 <MX_TIM1_Init+0x138>)
 8001848:	f00e fc64 	bl	8010114 <HAL_TIM_PWM_ConfigChannel>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_TIM1_Init+0xf6>
	{
		Error_Handler();
 8001852:	f009 ff6b 	bl	800b72c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001856:	2300      	movs	r3, #0
 8001858:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800185a:	2300      	movs	r3, #0
 800185c:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800186a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800186e:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001870:	2300      	movs	r3, #0
 8001872:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001874:	1d3b      	adds	r3, r7, #4
 8001876:	4619      	mov	r1, r3
 8001878:	4807      	ldr	r0, [pc, #28]	@ (8001898 <MX_TIM1_Init+0x138>)
 800187a:	f00f f995 	bl	8010ba8 <HAL_TIMEx_ConfigBreakDeadTime>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM1_Init+0x128>
	{
		Error_Handler();
 8001884:	f009 ff52 	bl	800b72c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001888:	4803      	ldr	r0, [pc, #12]	@ (8001898 <MX_TIM1_Init+0x138>)
 800188a:	f00a fc31 	bl	800c0f0 <HAL_TIM_MspPostInit>

}
 800188e:	bf00      	nop
 8001890:	3758      	adds	r7, #88	@ 0x58
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000f40 	.word	0x20000f40
 800189c:	40010000 	.word	0x40010000

080018a0 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08e      	sub	sp, #56	@ 0x38
 80018a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	605a      	str	r2, [r3, #4]
 80018b0:	609a      	str	r2, [r3, #8]
 80018b2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018b4:	f107 0320 	add.w	r3, r7, #32
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80018be:	1d3b      	adds	r3, r7, #4
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]
 80018cc:	615a      	str	r2, [r3, #20]
 80018ce:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80018d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001984 <MX_TIM4_Init+0xe4>)
 80018d2:	4a2d      	ldr	r2, [pc, #180]	@ (8001988 <MX_TIM4_Init+0xe8>)
 80018d4:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 1;
 80018d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001984 <MX_TIM4_Init+0xe4>)
 80018d8:	2201      	movs	r2, #1
 80018da:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018dc:	4b29      	ldr	r3, [pc, #164]	@ (8001984 <MX_TIM4_Init+0xe4>)
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 220;
 80018e2:	4b28      	ldr	r3, [pc, #160]	@ (8001984 <MX_TIM4_Init+0xe4>)
 80018e4:	22dc      	movs	r2, #220	@ 0xdc
 80018e6:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e8:	4b26      	ldr	r3, [pc, #152]	@ (8001984 <MX_TIM4_Init+0xe4>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ee:	4b25      	ldr	r3, [pc, #148]	@ (8001984 <MX_TIM4_Init+0xe4>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80018f4:	4823      	ldr	r0, [pc, #140]	@ (8001984 <MX_TIM4_Init+0xe4>)
 80018f6:	f00e f93b 	bl	800fb70 <HAL_TIM_Base_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_TIM4_Init+0x64>
	{
		Error_Handler();
 8001900:	f009 ff14 	bl	800b72c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001904:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001908:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800190a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800190e:	4619      	mov	r1, r3
 8001910:	481c      	ldr	r0, [pc, #112]	@ (8001984 <MX_TIM4_Init+0xe4>)
 8001912:	f00e fcc1 	bl	8010298 <HAL_TIM_ConfigClockSource>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_TIM4_Init+0x80>
	{
		Error_Handler();
 800191c:	f009 ff06 	bl	800b72c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001920:	4818      	ldr	r0, [pc, #96]	@ (8001984 <MX_TIM4_Init+0xe4>)
 8001922:	f00e f9e5 	bl	800fcf0 <HAL_TIM_PWM_Init>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_TIM4_Init+0x90>
	{
		Error_Handler();
 800192c:	f009 fefe 	bl	800b72c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001930:	2300      	movs	r3, #0
 8001932:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001934:	2300      	movs	r3, #0
 8001936:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001938:	f107 0320 	add.w	r3, r7, #32
 800193c:	4619      	mov	r1, r3
 800193e:	4811      	ldr	r0, [pc, #68]	@ (8001984 <MX_TIM4_Init+0xe4>)
 8001940:	f00f f8b6 	bl	8010ab0 <HAL_TIMEx_MasterConfigSynchronization>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_TIM4_Init+0xae>
	{
		Error_Handler();
 800194a:	f009 feef 	bl	800b72c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800194e:	2360      	movs	r3, #96	@ 0x60
 8001950:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001956:	2300      	movs	r3, #0
 8001958:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	2200      	movs	r2, #0
 8001962:	4619      	mov	r1, r3
 8001964:	4807      	ldr	r0, [pc, #28]	@ (8001984 <MX_TIM4_Init+0xe4>)
 8001966:	f00e fbd5 	bl	8010114 <HAL_TIM_PWM_ConfigChannel>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM4_Init+0xd4>
	{
		Error_Handler();
 8001970:	f009 fedc 	bl	800b72c <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8001974:	4803      	ldr	r0, [pc, #12]	@ (8001984 <MX_TIM4_Init+0xe4>)
 8001976:	f00a fbbb 	bl	800c0f0 <HAL_TIM_MspPostInit>

}
 800197a:	bf00      	nop
 800197c:	3738      	adds	r7, #56	@ 0x38
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000f88 	.word	0x20000f88
 8001988:	40000800 	.word	0x40000800

0800198c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001990:	4b11      	ldr	r3, [pc, #68]	@ (80019d8 <MX_USART1_UART_Init+0x4c>)
 8001992:	4a12      	ldr	r2, [pc, #72]	@ (80019dc <MX_USART1_UART_Init+0x50>)
 8001994:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 460800;
 8001996:	4b10      	ldr	r3, [pc, #64]	@ (80019d8 <MX_USART1_UART_Init+0x4c>)
 8001998:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 800199c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800199e:	4b0e      	ldr	r3, [pc, #56]	@ (80019d8 <MX_USART1_UART_Init+0x4c>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80019a4:	4b0c      	ldr	r3, [pc, #48]	@ (80019d8 <MX_USART1_UART_Init+0x4c>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80019aa:	4b0b      	ldr	r3, [pc, #44]	@ (80019d8 <MX_USART1_UART_Init+0x4c>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80019b0:	4b09      	ldr	r3, [pc, #36]	@ (80019d8 <MX_USART1_UART_Init+0x4c>)
 80019b2:	220c      	movs	r2, #12
 80019b4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019b6:	4b08      	ldr	r3, [pc, #32]	@ (80019d8 <MX_USART1_UART_Init+0x4c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019bc:	4b06      	ldr	r3, [pc, #24]	@ (80019d8 <MX_USART1_UART_Init+0x4c>)
 80019be:	2200      	movs	r2, #0
 80019c0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80019c2:	4805      	ldr	r0, [pc, #20]	@ (80019d8 <MX_USART1_UART_Init+0x4c>)
 80019c4:	f00f f956 	bl	8010c74 <HAL_UART_Init>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 80019ce:	f009 fead 	bl	800b72c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000fd0 	.word	0x20000fd0
 80019dc:	40011000 	.word	0x40011000

080019e0 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80019e4:	4b11      	ldr	r3, [pc, #68]	@ (8001a2c <MX_USART2_UART_Init+0x4c>)
 80019e6:	4a12      	ldr	r2, [pc, #72]	@ (8001a30 <MX_USART2_UART_Init+0x50>)
 80019e8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80019ea:	4b10      	ldr	r3, [pc, #64]	@ (8001a2c <MX_USART2_UART_Init+0x4c>)
 80019ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019f0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019f2:	4b0e      	ldr	r3, [pc, #56]	@ (8001a2c <MX_USART2_UART_Init+0x4c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80019f8:	4b0c      	ldr	r3, [pc, #48]	@ (8001a2c <MX_USART2_UART_Init+0x4c>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80019fe:	4b0b      	ldr	r3, [pc, #44]	@ (8001a2c <MX_USART2_UART_Init+0x4c>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001a04:	4b09      	ldr	r3, [pc, #36]	@ (8001a2c <MX_USART2_UART_Init+0x4c>)
 8001a06:	220c      	movs	r2, #12
 8001a08:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a0a:	4b08      	ldr	r3, [pc, #32]	@ (8001a2c <MX_USART2_UART_Init+0x4c>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a10:	4b06      	ldr	r3, [pc, #24]	@ (8001a2c <MX_USART2_UART_Init+0x4c>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a16:	4805      	ldr	r0, [pc, #20]	@ (8001a2c <MX_USART2_UART_Init+0x4c>)
 8001a18:	f00f f92c 	bl	8010c74 <HAL_UART_Init>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8001a22:	f009 fe83 	bl	800b72c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20001018 	.word	0x20001018
 8001a30:	40004400 	.word	0x40004400

08001a34 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	607b      	str	r3, [r7, #4]
 8001a3e:	4b17      	ldr	r3, [pc, #92]	@ (8001a9c <MX_DMA_Init+0x68>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a42:	4a16      	ldr	r2, [pc, #88]	@ (8001a9c <MX_DMA_Init+0x68>)
 8001a44:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a4a:	4b14      	ldr	r3, [pc, #80]	@ (8001a9c <MX_DMA_Init+0x68>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a52:	607b      	str	r3, [r7, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	603b      	str	r3, [r7, #0]
 8001a5a:	4b10      	ldr	r3, [pc, #64]	@ (8001a9c <MX_DMA_Init+0x68>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5e:	4a0f      	ldr	r2, [pc, #60]	@ (8001a9c <MX_DMA_Init+0x68>)
 8001a60:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a66:	4b0d      	ldr	r3, [pc, #52]	@ (8001a9c <MX_DMA_Init+0x68>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a6e:	603b      	str	r3, [r7, #0]
 8001a70:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2105      	movs	r1, #5
 8001a76:	2010      	movs	r0, #16
 8001a78:	f00b fafe 	bl	800d078 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001a7c:	2010      	movs	r0, #16
 8001a7e:	f00b fb17 	bl	800d0b0 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001a82:	2200      	movs	r2, #0
 8001a84:	2105      	movs	r1, #5
 8001a86:	203a      	movs	r0, #58	@ 0x3a
 8001a88:	f00b faf6 	bl	800d078 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001a8c:	203a      	movs	r0, #58	@ 0x3a
 8001a8e:	f00b fb0f 	bl	800d0b0 <HAL_NVIC_EnableIRQ>

}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40023800 	.word	0x40023800

08001aa0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08c      	sub	sp, #48	@ 0x30
 8001aa4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa6:	f107 031c 	add.w	r3, r7, #28
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	605a      	str	r2, [r3, #4]
 8001ab0:	609a      	str	r2, [r3, #8]
 8001ab2:	60da      	str	r2, [r3, #12]
 8001ab4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61bb      	str	r3, [r7, #24]
 8001aba:	4b74      	ldr	r3, [pc, #464]	@ (8001c8c <MX_GPIO_Init+0x1ec>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abe:	4a73      	ldr	r2, [pc, #460]	@ (8001c8c <MX_GPIO_Init+0x1ec>)
 8001ac0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ac6:	4b71      	ldr	r3, [pc, #452]	@ (8001c8c <MX_GPIO_Init+0x1ec>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ace:	61bb      	str	r3, [r7, #24]
 8001ad0:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	617b      	str	r3, [r7, #20]
 8001ad6:	4b6d      	ldr	r3, [pc, #436]	@ (8001c8c <MX_GPIO_Init+0x1ec>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ada:	4a6c      	ldr	r2, [pc, #432]	@ (8001c8c <MX_GPIO_Init+0x1ec>)
 8001adc:	f043 0304 	orr.w	r3, r3, #4
 8001ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ae2:	4b6a      	ldr	r3, [pc, #424]	@ (8001c8c <MX_GPIO_Init+0x1ec>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae6:	f003 0304 	and.w	r3, r3, #4
 8001aea:	617b      	str	r3, [r7, #20]
 8001aec:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	613b      	str	r3, [r7, #16]
 8001af2:	4b66      	ldr	r3, [pc, #408]	@ (8001c8c <MX_GPIO_Init+0x1ec>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af6:	4a65      	ldr	r2, [pc, #404]	@ (8001c8c <MX_GPIO_Init+0x1ec>)
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001afe:	4b63      	ldr	r3, [pc, #396]	@ (8001c8c <MX_GPIO_Init+0x1ec>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	613b      	str	r3, [r7, #16]
 8001b08:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	4b5f      	ldr	r3, [pc, #380]	@ (8001c8c <MX_GPIO_Init+0x1ec>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b12:	4a5e      	ldr	r2, [pc, #376]	@ (8001c8c <MX_GPIO_Init+0x1ec>)
 8001b14:	f043 0302 	orr.w	r3, r3, #2
 8001b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b1a:	4b5c      	ldr	r3, [pc, #368]	@ (8001c8c <MX_GPIO_Init+0x1ec>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	60bb      	str	r3, [r7, #8]
 8001b2a:	4b58      	ldr	r3, [pc, #352]	@ (8001c8c <MX_GPIO_Init+0x1ec>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2e:	4a57      	ldr	r2, [pc, #348]	@ (8001c8c <MX_GPIO_Init+0x1ec>)
 8001b30:	f043 0310 	orr.w	r3, r3, #16
 8001b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b36:	4b55      	ldr	r3, [pc, #340]	@ (8001c8c <MX_GPIO_Init+0x1ec>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3a:	f003 0310 	and.w	r3, r3, #16
 8001b3e:	60bb      	str	r3, [r7, #8]
 8001b40:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	607b      	str	r3, [r7, #4]
 8001b46:	4b51      	ldr	r3, [pc, #324]	@ (8001c8c <MX_GPIO_Init+0x1ec>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4a:	4a50      	ldr	r2, [pc, #320]	@ (8001c8c <MX_GPIO_Init+0x1ec>)
 8001b4c:	f043 0308 	orr.w	r3, r3, #8
 8001b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b52:	4b4e      	ldr	r3, [pc, #312]	@ (8001c8c <MX_GPIO_Init+0x1ec>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b56:	f003 0308 	and.w	r3, r3, #8
 8001b5a:	607b      	str	r3, [r7, #4]
 8001b5c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_6, GPIO_PIN_RESET);
 8001b5e:	2200      	movs	r2, #0
 8001b60:	2144      	movs	r1, #68	@ 0x44
 8001b62:	484b      	ldr	r0, [pc, #300]	@ (8001c90 <MX_GPIO_Init+0x1f0>)
 8001b64:	f00c f868 	bl	800dc38 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001b68:	2200      	movs	r2, #0
 8001b6a:	2110      	movs	r1, #16
 8001b6c:	4849      	ldr	r0, [pc, #292]	@ (8001c94 <MX_GPIO_Init+0x1f4>)
 8001b6e:	f00c f863 	bl	800dc38 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2101      	movs	r1, #1
 8001b76:	4848      	ldr	r0, [pc, #288]	@ (8001c98 <MX_GPIO_Init+0x1f8>)
 8001b78:	f00c f85e 	bl	800dc38 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f64c 4102 	movw	r1, #52226	@ 0xcc02
 8001b82:	4846      	ldr	r0, [pc, #280]	@ (8001c9c <MX_GPIO_Init+0x1fc>)
 8001b84:	f00c f858 	bl	800dc38 <HAL_GPIO_WritePin>
			|GPIO_PIN_1, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_7, GPIO_PIN_RESET);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f44f 5102 	mov.w	r1, #8320	@ 0x2080
 8001b8e:	4844      	ldr	r0, [pc, #272]	@ (8001ca0 <MX_GPIO_Init+0x200>)
 8001b90:	f00c f852 	bl	800dc38 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PC2 PC6 */
	GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8001b94:	2344      	movs	r3, #68	@ 0x44
 8001b96:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ba4:	f107 031c 	add.w	r3, r7, #28
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4839      	ldr	r0, [pc, #228]	@ (8001c90 <MX_GPIO_Init+0x1f0>)
 8001bac:	f00b fe90 	bl	800d8d0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001bb0:	2310      	movs	r3, #16
 8001bb2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc0:	f107 031c 	add.w	r3, r7, #28
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4833      	ldr	r0, [pc, #204]	@ (8001c94 <MX_GPIO_Init+0x1f4>)
 8001bc8:	f00b fe82 	bl	800d8d0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bdc:	f107 031c 	add.w	r3, r7, #28
 8001be0:	4619      	mov	r1, r3
 8001be2:	482d      	ldr	r0, [pc, #180]	@ (8001c98 <MX_GPIO_Init+0x1f8>)
 8001be4:	f00b fe74 	bl	800d8d0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PE10 PE11 PE14 PE15
                           PE1 */
	GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15
 8001be8:	f64c 4302 	movw	r3, #52226	@ 0xcc02
 8001bec:	61fb      	str	r3, [r7, #28]
			|GPIO_PIN_1;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bfa:	f107 031c 	add.w	r3, r7, #28
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4826      	ldr	r0, [pc, #152]	@ (8001c9c <MX_GPIO_Init+0x1fc>)
 8001c02:	f00b fe65 	bl	800d8d0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PE13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c06:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c0a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c14:	f107 031c 	add.w	r3, r7, #28
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4820      	ldr	r0, [pc, #128]	@ (8001c9c <MX_GPIO_Init+0x1fc>)
 8001c1c:	f00b fe58 	bl	800d8d0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PD11 */
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001c20:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001c24:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c26:	2300      	movs	r3, #0
 8001c28:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c2e:	f107 031c 	add.w	r3, r7, #28
 8001c32:	4619      	mov	r1, r3
 8001c34:	481a      	ldr	r0, [pc, #104]	@ (8001ca0 <MX_GPIO_Init+0x200>)
 8001c36:	f00b fe4b 	bl	800d8d0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD13 PD7 */
	GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_7;
 8001c3a:	f44f 5302 	mov.w	r3, #8320	@ 0x2080
 8001c3e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c40:	2301      	movs	r3, #1
 8001c42:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c4c:	f107 031c 	add.w	r3, r7, #28
 8001c50:	4619      	mov	r1, r3
 8001c52:	4813      	ldr	r0, [pc, #76]	@ (8001ca0 <MX_GPIO_Init+0x200>)
 8001c54:	f00b fe3c 	bl	800d8d0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC9 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c5c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c5e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001c62:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c64:	2301      	movs	r3, #1
 8001c66:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c68:	f107 031c 	add.w	r3, r7, #28
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4808      	ldr	r0, [pc, #32]	@ (8001c90 <MX_GPIO_Init+0x1f0>)
 8001c70:	f00b fe2e 	bl	800d8d0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001c74:	2200      	movs	r2, #0
 8001c76:	2105      	movs	r1, #5
 8001c78:	2017      	movs	r0, #23
 8001c7a:	f00b f9fd 	bl	800d078 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001c7e:	2017      	movs	r0, #23
 8001c80:	f00b fa16 	bl	800d0b0 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8001c84:	bf00      	nop
 8001c86:	3730      	adds	r7, #48	@ 0x30
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40020800 	.word	0x40020800
 8001c94:	40020000 	.word	0x40020000
 8001c98:	40020400 	.word	0x40020400
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	40020c00 	.word	0x40020c00

08001ca4 <ICON_TOGGLE>:

/* USER CODE BEGIN 4 */
uint8_t* ICON_TOGGLE(uint8_t ADD_H, uint8_t ADD_L, uint8_t pos, uint8_t status) {
 8001ca4:	b590      	push	{r4, r7, lr}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4604      	mov	r4, r0
 8001cac:	4608      	mov	r0, r1
 8001cae:	4611      	mov	r1, r2
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4623      	mov	r3, r4
 8001cb4:	71fb      	strb	r3, [r7, #7]
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71bb      	strb	r3, [r7, #6]
 8001cba:	460b      	mov	r3, r1
 8001cbc:	717b      	strb	r3, [r7, #5]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	713b      	strb	r3, [r7, #4]

	uint8_t *temp_arr = (uint8_t*) malloc(8 * sizeof(uint8_t));
 8001cc2:	2008      	movs	r0, #8
 8001cc4:	f013 faf0 	bl	80152a8 <malloc>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	60fb      	str	r3, [r7, #12]

	if (status == 0x00) {
 8001ccc:	793b      	ldrb	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d125      	bne.n	8001d1e <ICON_TOGGLE+0x7a>

		button_color_status = 0x01;
 8001cd2:	4b2b      	ldr	r3, [pc, #172]	@ (8001d80 <ICON_TOGGLE+0xdc>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	701a      	strb	r2, [r3, #0]
		temp_arr[0] = 0x5a;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	225a      	movs	r2, #90	@ 0x5a
 8001cdc:	701a      	strb	r2, [r3, #0]
		temp_arr[1] = 0xa5;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	22a5      	movs	r2, #165	@ 0xa5
 8001ce4:	701a      	strb	r2, [r3, #0]
		temp_arr[2] = 0x05;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	3302      	adds	r3, #2
 8001cea:	2205      	movs	r2, #5
 8001cec:	701a      	strb	r2, [r3, #0]
		temp_arr[3] = 0x82;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	3303      	adds	r3, #3
 8001cf2:	2282      	movs	r2, #130	@ 0x82
 8001cf4:	701a      	strb	r2, [r3, #0]
		temp_arr[4] = ADD_H;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	3304      	adds	r3, #4
 8001cfa:	79fa      	ldrb	r2, [r7, #7]
 8001cfc:	701a      	strb	r2, [r3, #0]
		temp_arr[5] = ADD_L;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	3305      	adds	r3, #5
 8001d02:	79ba      	ldrb	r2, [r7, #6]
 8001d04:	701a      	strb	r2, [r3, #0]
		temp_arr[6] = 0x00;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	3306      	adds	r3, #6
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	701a      	strb	r2, [r3, #0]
		temp_arr[7] = GREEN_ICON[pos];
 8001d0e:	797a      	ldrb	r2, [r7, #5]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	3307      	adds	r3, #7
 8001d14:	491b      	ldr	r1, [pc, #108]	@ (8001d84 <ICON_TOGGLE+0xe0>)
 8001d16:	5c8a      	ldrb	r2, [r1, r2]
 8001d18:	701a      	strb	r2, [r3, #0]

		return temp_arr;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	e02c      	b.n	8001d78 <ICON_TOGGLE+0xd4>

	}

	if (status == 0x01) {
 8001d1e:	793b      	ldrb	r3, [r7, #4]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d125      	bne.n	8001d70 <ICON_TOGGLE+0xcc>

		button_color_status = 0x00;
 8001d24:	4b16      	ldr	r3, [pc, #88]	@ (8001d80 <ICON_TOGGLE+0xdc>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	701a      	strb	r2, [r3, #0]
		temp_arr[0] = 0x5a;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	225a      	movs	r2, #90	@ 0x5a
 8001d2e:	701a      	strb	r2, [r3, #0]
		temp_arr[1] = 0xa5;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	3301      	adds	r3, #1
 8001d34:	22a5      	movs	r2, #165	@ 0xa5
 8001d36:	701a      	strb	r2, [r3, #0]
		temp_arr[2] = 0x05;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	3302      	adds	r3, #2
 8001d3c:	2205      	movs	r2, #5
 8001d3e:	701a      	strb	r2, [r3, #0]
		temp_arr[3] = 0x82;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	3303      	adds	r3, #3
 8001d44:	2282      	movs	r2, #130	@ 0x82
 8001d46:	701a      	strb	r2, [r3, #0]
		temp_arr[4] = ADD_H;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	3304      	adds	r3, #4
 8001d4c:	79fa      	ldrb	r2, [r7, #7]
 8001d4e:	701a      	strb	r2, [r3, #0]
		temp_arr[5] = ADD_L;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	3305      	adds	r3, #5
 8001d54:	79ba      	ldrb	r2, [r7, #6]
 8001d56:	701a      	strb	r2, [r3, #0]
		temp_arr[6] = 0x00;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	3306      	adds	r3, #6
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	701a      	strb	r2, [r3, #0]
		temp_arr[7] = BLUE_ICON[pos];
 8001d60:	797a      	ldrb	r2, [r7, #5]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	3307      	adds	r3, #7
 8001d66:	4908      	ldr	r1, [pc, #32]	@ (8001d88 <ICON_TOGGLE+0xe4>)
 8001d68:	5c8a      	ldrb	r2, [r1, r2]
 8001d6a:	701a      	strb	r2, [r3, #0]

		return temp_arr;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	e003      	b.n	8001d78 <ICON_TOGGLE+0xd4>


	}
	free(temp_arr);
 8001d70:	68f8      	ldr	r0, [r7, #12]
 8001d72:	f013 faa1 	bl	80152b8 <free>
	return NULL;
 8001d76:	2300      	movs	r3, #0

}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd90      	pop	{r4, r7, pc}
 8001d80:	20001a02 	.word	0x20001a02
 8001d84:	20000130 	.word	0x20000130
 8001d88:	20000148 	.word	0x20000148

08001d8c <display_icon_clr>:

void display_icon_clr(uint8_t ADD_H, uint8_t icon_add, uint8_t pos) {
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	71fb      	strb	r3, [r7, #7]
 8001d96:	460b      	mov	r3, r1
 8001d98:	71bb      	strb	r3, [r7, #6]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	717b      	strb	r3, [r7, #5]

	uint8_t temp_arr[8] = { 0 };
 8001d9e:	f107 0308 	add.w	r3, r7, #8
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	605a      	str	r2, [r3, #4]
	temp_arr[0] = 0x5a;
 8001da8:	235a      	movs	r3, #90	@ 0x5a
 8001daa:	723b      	strb	r3, [r7, #8]
	temp_arr[1] = 0xa5;
 8001dac:	23a5      	movs	r3, #165	@ 0xa5
 8001dae:	727b      	strb	r3, [r7, #9]
	temp_arr[2] = 0x05;
 8001db0:	2305      	movs	r3, #5
 8001db2:	72bb      	strb	r3, [r7, #10]
	temp_arr[3] = 0x82;
 8001db4:	2382      	movs	r3, #130	@ 0x82
 8001db6:	72fb      	strb	r3, [r7, #11]
	temp_arr[4] = ADD_H;
 8001db8:	79fb      	ldrb	r3, [r7, #7]
 8001dba:	733b      	strb	r3, [r7, #12]
	temp_arr[5] = icon_add;
 8001dbc:	79bb      	ldrb	r3, [r7, #6]
 8001dbe:	737b      	strb	r3, [r7, #13]
	temp_arr[6] = 0x00;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	73bb      	strb	r3, [r7, #14]
	temp_arr[7] = BLUE_ICON[pos];
 8001dc4:	797b      	ldrb	r3, [r7, #5]
 8001dc6:	4a07      	ldr	r2, [pc, #28]	@ (8001de4 <display_icon_clr+0x58>)
 8001dc8:	5cd3      	ldrb	r3, [r2, r3]
 8001dca:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, temp_arr, sizeof(temp_arr), 1);
 8001dcc:	f107 0108 	add.w	r1, r7, #8
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	2208      	movs	r2, #8
 8001dd4:	4804      	ldr	r0, [pc, #16]	@ (8001de8 <display_icon_clr+0x5c>)
 8001dd6:	f00e ff9d 	bl	8010d14 <HAL_UART_Transmit>

}
 8001dda:	bf00      	nop
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000148 	.word	0x20000148
 8001de8:	20000fd0 	.word	0x20000fd0

08001dec <display_data>:

uint8_t* display_data(uint8_t ADDH, uint8_t ADDL, uint8_t BUTTON_STATUS) {
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	71fb      	strb	r3, [r7, #7]
 8001df6:	460b      	mov	r3, r1
 8001df8:	71bb      	strb	r3, [r7, #6]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	717b      	strb	r3, [r7, #5]

	uint8_t *temp_data = (uint8_t*) malloc(8 * sizeof(uint8_t));
 8001dfe:	2008      	movs	r0, #8
 8001e00:	f013 fa52 	bl	80152a8 <malloc>
 8001e04:	4603      	mov	r3, r0
 8001e06:	60fb      	str	r3, [r7, #12]

	//	uint8_t

	if ((ADDH == 0x10) && (ADDL > 0x00)) {
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	2b10      	cmp	r3, #16
 8001e0c:	f040 81fe 	bne.w	800220c <display_data+0x420>
 8001e10:	79bb      	ldrb	r3, [r7, #6]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 81fa 	beq.w	800220c <display_data+0x420>

		switch (ADDL) {
 8001e18:	79bb      	ldrb	r3, [r7, #6]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	2b21      	cmp	r3, #33	@ 0x21
 8001e1e:	f200 81f5 	bhi.w	800220c <display_data+0x420>
 8001e22:	a201      	add	r2, pc, #4	@ (adr r2, 8001e28 <display_data+0x3c>)
 8001e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e28:	08001eb1 	.word	0x08001eb1
 8001e2c:	08001ee3 	.word	0x08001ee3
 8001e30:	08001f0f 	.word	0x08001f0f
 8001e34:	08001f3b 	.word	0x08001f3b
 8001e38:	08001f67 	.word	0x08001f67
 8001e3c:	08001f93 	.word	0x08001f93
 8001e40:	08001fbf 	.word	0x08001fbf
 8001e44:	08001feb 	.word	0x08001feb
 8001e48:	0800220d 	.word	0x0800220d
 8001e4c:	0800220d 	.word	0x0800220d
 8001e50:	0800220d 	.word	0x0800220d
 8001e54:	0800220d 	.word	0x0800220d
 8001e58:	0800220d 	.word	0x0800220d
 8001e5c:	0800220d 	.word	0x0800220d
 8001e60:	0800220d 	.word	0x0800220d
 8001e64:	0800220d 	.word	0x0800220d
 8001e68:	0800220d 	.word	0x0800220d
 8001e6c:	08002017 	.word	0x08002017
 8001e70:	08002043 	.word	0x08002043
 8001e74:	0800206f 	.word	0x0800206f
 8001e78:	0800209b 	.word	0x0800209b
 8001e7c:	080020c7 	.word	0x080020c7
 8001e80:	080020f3 	.word	0x080020f3
 8001e84:	0800211f 	.word	0x0800211f
 8001e88:	0800214b 	.word	0x0800214b
 8001e8c:	0800220d 	.word	0x0800220d
 8001e90:	0800220d 	.word	0x0800220d
 8001e94:	0800220d 	.word	0x0800220d
 8001e98:	0800220d 	.word	0x0800220d
 8001e9c:	0800220d 	.word	0x0800220d
 8001ea0:	0800220d 	.word	0x0800220d
 8001ea4:	08002177 	.word	0x08002177
 8001ea8:	080021a3 	.word	0x080021a3
 8001eac:	080021e1 	.word	0x080021e1

		case 0x01:
			cls_con(temp_add);
 8001eb0:	4bc7      	ldr	r3, [pc, #796]	@ (80021d0 <display_data+0x3e4>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f000 fc17 	bl	80026e8 <cls_con>
			inc_drc_icon(BUTTON_STATUS);
 8001eba:	797b      	ldrb	r3, [r7, #5]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f000 fc57 	bl	8002770 <inc_drc_icon>
			osDelay(50);
 8001ec2:	2032      	movs	r0, #50	@ 0x32
 8001ec4:	f010 fa79 	bl	80123ba <osDelay>
			HAL_UART_Transmit(&huart1,
					ICON_TOGGLE(0x10, 0x01, 0, BUTTON_STATUS), 8,
 8001ec8:	797b      	ldrb	r3, [r7, #5]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2101      	movs	r1, #1
 8001ece:	2010      	movs	r0, #16
 8001ed0:	f7ff fee8 	bl	8001ca4 <ICON_TOGGLE>
 8001ed4:	4601      	mov	r1, r0
			HAL_UART_Transmit(&huart1,
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	2208      	movs	r2, #8
 8001eda:	48be      	ldr	r0, [pc, #760]	@ (80021d4 <display_data+0x3e8>)
 8001edc:	f00e ff1a 	bl	8010d14 <HAL_UART_Transmit>
					1);
			break;
 8001ee0:	e194      	b.n	800220c <display_data+0x420>

		case 0x02:
			cls_con(temp_add);
 8001ee2:	4bbb      	ldr	r3, [pc, #748]	@ (80021d0 <display_data+0x3e4>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 fbfe 	bl	80026e8 <cls_con>
			inc_drc_icon(BUTTON_STATUS);
 8001eec:	797b      	ldrb	r3, [r7, #5]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 fc3e 	bl	8002770 <inc_drc_icon>
			HAL_UART_Transmit(&huart1,
					ICON_TOGGLE(0x10, 0x02, 1, BUTTON_STATUS), 8,
 8001ef4:	797b      	ldrb	r3, [r7, #5]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	2102      	movs	r1, #2
 8001efa:	2010      	movs	r0, #16
 8001efc:	f7ff fed2 	bl	8001ca4 <ICON_TOGGLE>
 8001f00:	4601      	mov	r1, r0
			HAL_UART_Transmit(&huart1,
 8001f02:	2301      	movs	r3, #1
 8001f04:	2208      	movs	r2, #8
 8001f06:	48b3      	ldr	r0, [pc, #716]	@ (80021d4 <display_data+0x3e8>)
 8001f08:	f00e ff04 	bl	8010d14 <HAL_UART_Transmit>
					1);
			break;
 8001f0c:	e17e      	b.n	800220c <display_data+0x420>

		case 0x03:
			cls_con(temp_add);
 8001f0e:	4bb0      	ldr	r3, [pc, #704]	@ (80021d0 <display_data+0x3e4>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f000 fbe8 	bl	80026e8 <cls_con>
			//			osDelay(50);
			inc_drc_icon(BUTTON_STATUS);
 8001f18:	797b      	ldrb	r3, [r7, #5]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f000 fc28 	bl	8002770 <inc_drc_icon>
			//			osDelay(50);
			HAL_UART_Transmit(&huart1,
					ICON_TOGGLE(0x10, 0x03, 2, BUTTON_STATUS), 8,
 8001f20:	797b      	ldrb	r3, [r7, #5]
 8001f22:	2202      	movs	r2, #2
 8001f24:	2103      	movs	r1, #3
 8001f26:	2010      	movs	r0, #16
 8001f28:	f7ff febc 	bl	8001ca4 <ICON_TOGGLE>
 8001f2c:	4601      	mov	r1, r0
			HAL_UART_Transmit(&huart1,
 8001f2e:	2301      	movs	r3, #1
 8001f30:	2208      	movs	r2, #8
 8001f32:	48a8      	ldr	r0, [pc, #672]	@ (80021d4 <display_data+0x3e8>)
 8001f34:	f00e feee 	bl	8010d14 <HAL_UART_Transmit>
					1);
			break;
 8001f38:	e168      	b.n	800220c <display_data+0x420>

		case 0x04:
			cls_con(temp_add);
 8001f3a:	4ba5      	ldr	r3, [pc, #660]	@ (80021d0 <display_data+0x3e4>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 fbd2 	bl	80026e8 <cls_con>
			inc_drc_icon(BUTTON_STATUS);
 8001f44:	797b      	ldrb	r3, [r7, #5]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 fc12 	bl	8002770 <inc_drc_icon>
			HAL_UART_Transmit(&huart1,
					ICON_TOGGLE(0x10, 0x04, 3, BUTTON_STATUS), 8,
 8001f4c:	797b      	ldrb	r3, [r7, #5]
 8001f4e:	2203      	movs	r2, #3
 8001f50:	2104      	movs	r1, #4
 8001f52:	2010      	movs	r0, #16
 8001f54:	f7ff fea6 	bl	8001ca4 <ICON_TOGGLE>
 8001f58:	4601      	mov	r1, r0
			HAL_UART_Transmit(&huart1,
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	2208      	movs	r2, #8
 8001f5e:	489d      	ldr	r0, [pc, #628]	@ (80021d4 <display_data+0x3e8>)
 8001f60:	f00e fed8 	bl	8010d14 <HAL_UART_Transmit>
					1);
			break;
 8001f64:	e152      	b.n	800220c <display_data+0x420>

		case 0x05:
			cls_con(temp_add);
 8001f66:	4b9a      	ldr	r3, [pc, #616]	@ (80021d0 <display_data+0x3e4>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 fbbc 	bl	80026e8 <cls_con>
			inc_drc_icon(BUTTON_STATUS);
 8001f70:	797b      	ldrb	r3, [r7, #5]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f000 fbfc 	bl	8002770 <inc_drc_icon>
			HAL_UART_Transmit(&huart1,
					ICON_TOGGLE(0x10, 0x05, 4, BUTTON_STATUS), 8,
 8001f78:	797b      	ldrb	r3, [r7, #5]
 8001f7a:	2204      	movs	r2, #4
 8001f7c:	2105      	movs	r1, #5
 8001f7e:	2010      	movs	r0, #16
 8001f80:	f7ff fe90 	bl	8001ca4 <ICON_TOGGLE>
 8001f84:	4601      	mov	r1, r0
			HAL_UART_Transmit(&huart1,
 8001f86:	2301      	movs	r3, #1
 8001f88:	2208      	movs	r2, #8
 8001f8a:	4892      	ldr	r0, [pc, #584]	@ (80021d4 <display_data+0x3e8>)
 8001f8c:	f00e fec2 	bl	8010d14 <HAL_UART_Transmit>
					1);
			break;
 8001f90:	e13c      	b.n	800220c <display_data+0x420>

		case 0x06:
			cls_con(temp_add);
 8001f92:	4b8f      	ldr	r3, [pc, #572]	@ (80021d0 <display_data+0x3e4>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f000 fba6 	bl	80026e8 <cls_con>
			inc_drc_icon(BUTTON_STATUS);
 8001f9c:	797b      	ldrb	r3, [r7, #5]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f000 fbe6 	bl	8002770 <inc_drc_icon>
			HAL_UART_Transmit(&huart1,
					ICON_TOGGLE(0x10, 0x06, 5, BUTTON_STATUS), 8,
 8001fa4:	797b      	ldrb	r3, [r7, #5]
 8001fa6:	2205      	movs	r2, #5
 8001fa8:	2106      	movs	r1, #6
 8001faa:	2010      	movs	r0, #16
 8001fac:	f7ff fe7a 	bl	8001ca4 <ICON_TOGGLE>
 8001fb0:	4601      	mov	r1, r0
			HAL_UART_Transmit(&huart1,
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	2208      	movs	r2, #8
 8001fb6:	4887      	ldr	r0, [pc, #540]	@ (80021d4 <display_data+0x3e8>)
 8001fb8:	f00e feac 	bl	8010d14 <HAL_UART_Transmit>
					1);
			break;
 8001fbc:	e126      	b.n	800220c <display_data+0x420>

		case 0x07:
			cls_con(temp_add);
 8001fbe:	4b84      	ldr	r3, [pc, #528]	@ (80021d0 <display_data+0x3e4>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f000 fb90 	bl	80026e8 <cls_con>
			inc_drc_icon(BUTTON_STATUS);
 8001fc8:	797b      	ldrb	r3, [r7, #5]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 fbd0 	bl	8002770 <inc_drc_icon>
			HAL_UART_Transmit(&huart1,
					ICON_TOGGLE(0x10, 0x07, 6, BUTTON_STATUS), 8,
 8001fd0:	797b      	ldrb	r3, [r7, #5]
 8001fd2:	2206      	movs	r2, #6
 8001fd4:	2107      	movs	r1, #7
 8001fd6:	2010      	movs	r0, #16
 8001fd8:	f7ff fe64 	bl	8001ca4 <ICON_TOGGLE>
 8001fdc:	4601      	mov	r1, r0
			HAL_UART_Transmit(&huart1,
 8001fde:	2301      	movs	r3, #1
 8001fe0:	2208      	movs	r2, #8
 8001fe2:	487c      	ldr	r0, [pc, #496]	@ (80021d4 <display_data+0x3e8>)
 8001fe4:	f00e fe96 	bl	8010d14 <HAL_UART_Transmit>
					1);
			break;
 8001fe8:	e110      	b.n	800220c <display_data+0x420>

		case 0x08:
			cls_con(temp_add);
 8001fea:	4b79      	ldr	r3, [pc, #484]	@ (80021d0 <display_data+0x3e4>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f000 fb7a 	bl	80026e8 <cls_con>
			inc_drc_icon(BUTTON_STATUS);
 8001ff4:	797b      	ldrb	r3, [r7, #5]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f000 fbba 	bl	8002770 <inc_drc_icon>
			HAL_UART_Transmit(&huart1,
					ICON_TOGGLE(0x10, 0x08, 7, BUTTON_STATUS), 8,
 8001ffc:	797b      	ldrb	r3, [r7, #5]
 8001ffe:	2207      	movs	r2, #7
 8002000:	2108      	movs	r1, #8
 8002002:	2010      	movs	r0, #16
 8002004:	f7ff fe4e 	bl	8001ca4 <ICON_TOGGLE>
 8002008:	4601      	mov	r1, r0
			HAL_UART_Transmit(&huart1,
 800200a:	2301      	movs	r3, #1
 800200c:	2208      	movs	r2, #8
 800200e:	4871      	ldr	r0, [pc, #452]	@ (80021d4 <display_data+0x3e8>)
 8002010:	f00e fe80 	bl	8010d14 <HAL_UART_Transmit>
					1);
			break;
 8002014:	e0fa      	b.n	800220c <display_data+0x420>
			//			temp_data = ICON_TOGGLE(0x10, 0x11, 11, BUTTON_STATUS);
			//			return temp_data;
			//			break;

		case 0x12:
			cls_con(clear_add);
 8002016:	4b70      	ldr	r3, [pc, #448]	@ (80021d8 <display_data+0x3ec>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f000 fb64 	bl	80026e8 <cls_con>
			inc_drc_icon(BUTTON_STATUS);
 8002020:	797b      	ldrb	r3, [r7, #5]
 8002022:	4618      	mov	r0, r3
 8002024:	f000 fba4 	bl	8002770 <inc_drc_icon>
			HAL_UART_Transmit(&huart1,
					ICON_TOGGLE(0x10, 0x12, 11, BUTTON_STATUS), 8,
 8002028:	797b      	ldrb	r3, [r7, #5]
 800202a:	220b      	movs	r2, #11
 800202c:	2112      	movs	r1, #18
 800202e:	2010      	movs	r0, #16
 8002030:	f7ff fe38 	bl	8001ca4 <ICON_TOGGLE>
 8002034:	4601      	mov	r1, r0
			HAL_UART_Transmit(&huart1,
 8002036:	2301      	movs	r3, #1
 8002038:	2208      	movs	r2, #8
 800203a:	4866      	ldr	r0, [pc, #408]	@ (80021d4 <display_data+0x3e8>)
 800203c:	f00e fe6a 	bl	8010d14 <HAL_UART_Transmit>
					1);
			break;
 8002040:	e0e4      	b.n	800220c <display_data+0x420>
		case 0x13:
			cls_con(clear_add);
 8002042:	4b65      	ldr	r3, [pc, #404]	@ (80021d8 <display_data+0x3ec>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f000 fb4e 	bl	80026e8 <cls_con>
			inc_drc_icon(BUTTON_STATUS);
 800204c:	797b      	ldrb	r3, [r7, #5]
 800204e:	4618      	mov	r0, r3
 8002050:	f000 fb8e 	bl	8002770 <inc_drc_icon>
			HAL_UART_Transmit(&huart1,
					ICON_TOGGLE(0x10, 0x13, 12, BUTTON_STATUS), 8,
 8002054:	797b      	ldrb	r3, [r7, #5]
 8002056:	220c      	movs	r2, #12
 8002058:	2113      	movs	r1, #19
 800205a:	2010      	movs	r0, #16
 800205c:	f7ff fe22 	bl	8001ca4 <ICON_TOGGLE>
 8002060:	4601      	mov	r1, r0
			HAL_UART_Transmit(&huart1,
 8002062:	2301      	movs	r3, #1
 8002064:	2208      	movs	r2, #8
 8002066:	485b      	ldr	r0, [pc, #364]	@ (80021d4 <display_data+0x3e8>)
 8002068:	f00e fe54 	bl	8010d14 <HAL_UART_Transmit>
					1);
			break;
 800206c:	e0ce      	b.n	800220c <display_data+0x420>
			//					ICON_TOGGLE(0x10, 0x35, 13, BUTTON_STATUS), 8,
			//					HAL_MAX_DELAY);
			//			break;

		case 0x14:
			cls_con(clear_add);
 800206e:	4b5a      	ldr	r3, [pc, #360]	@ (80021d8 <display_data+0x3ec>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f000 fb38 	bl	80026e8 <cls_con>
			inc_drc_icon(BUTTON_STATUS);
 8002078:	797b      	ldrb	r3, [r7, #5]
 800207a:	4618      	mov	r0, r3
 800207c:	f000 fb78 	bl	8002770 <inc_drc_icon>
			HAL_UART_Transmit(&huart1,
					ICON_TOGGLE(0x10, 0x14, 13, BUTTON_STATUS), 8,
 8002080:	797b      	ldrb	r3, [r7, #5]
 8002082:	220d      	movs	r2, #13
 8002084:	2114      	movs	r1, #20
 8002086:	2010      	movs	r0, #16
 8002088:	f7ff fe0c 	bl	8001ca4 <ICON_TOGGLE>
 800208c:	4601      	mov	r1, r0
			HAL_UART_Transmit(&huart1,
 800208e:	2301      	movs	r3, #1
 8002090:	2208      	movs	r2, #8
 8002092:	4850      	ldr	r0, [pc, #320]	@ (80021d4 <display_data+0x3e8>)
 8002094:	f00e fe3e 	bl	8010d14 <HAL_UART_Transmit>
					1);
			break;
 8002098:	e0b8      	b.n	800220c <display_data+0x420>

		case 0x15:
			cls_con(clear_add);
 800209a:	4b4f      	ldr	r3, [pc, #316]	@ (80021d8 <display_data+0x3ec>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 fb22 	bl	80026e8 <cls_con>

			inc_drc_icon(BUTTON_STATUS);
 80020a4:	797b      	ldrb	r3, [r7, #5]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f000 fb62 	bl	8002770 <inc_drc_icon>

			HAL_UART_Transmit(&huart1,
					ICON_TOGGLE(0x10, 0x15, 14, BUTTON_STATUS), 8,
 80020ac:	797b      	ldrb	r3, [r7, #5]
 80020ae:	220e      	movs	r2, #14
 80020b0:	2115      	movs	r1, #21
 80020b2:	2010      	movs	r0, #16
 80020b4:	f7ff fdf6 	bl	8001ca4 <ICON_TOGGLE>
 80020b8:	4601      	mov	r1, r0
			HAL_UART_Transmit(&huart1,
 80020ba:	2301      	movs	r3, #1
 80020bc:	2208      	movs	r2, #8
 80020be:	4845      	ldr	r0, [pc, #276]	@ (80021d4 <display_data+0x3e8>)
 80020c0:	f00e fe28 	bl	8010d14 <HAL_UART_Transmit>
					1);
			break;
 80020c4:	e0a2      	b.n	800220c <display_data+0x420>

		case 0x16:

			cls_con(clear_add);
 80020c6:	4b44      	ldr	r3, [pc, #272]	@ (80021d8 <display_data+0x3ec>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f000 fb0c 	bl	80026e8 <cls_con>

			inc_drc_icon(BUTTON_STATUS);
 80020d0:	797b      	ldrb	r3, [r7, #5]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f000 fb4c 	bl	8002770 <inc_drc_icon>

			HAL_UART_Transmit(&huart1,
					ICON_TOGGLE(0x10, 0x16, 15, BUTTON_STATUS), 8,
 80020d8:	797b      	ldrb	r3, [r7, #5]
 80020da:	220f      	movs	r2, #15
 80020dc:	2116      	movs	r1, #22
 80020de:	2010      	movs	r0, #16
 80020e0:	f7ff fde0 	bl	8001ca4 <ICON_TOGGLE>
 80020e4:	4601      	mov	r1, r0
			HAL_UART_Transmit(&huart1,
 80020e6:	2301      	movs	r3, #1
 80020e8:	2208      	movs	r2, #8
 80020ea:	483a      	ldr	r0, [pc, #232]	@ (80021d4 <display_data+0x3e8>)
 80020ec:	f00e fe12 	bl	8010d14 <HAL_UART_Transmit>
					1);
			break;
 80020f0:	e08c      	b.n	800220c <display_data+0x420>

		case 0x17:

			cls_con(clear_add);
 80020f2:	4b39      	ldr	r3, [pc, #228]	@ (80021d8 <display_data+0x3ec>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f000 faf6 	bl	80026e8 <cls_con>

			inc_drc_icon(BUTTON_STATUS);
 80020fc:	797b      	ldrb	r3, [r7, #5]
 80020fe:	4618      	mov	r0, r3
 8002100:	f000 fb36 	bl	8002770 <inc_drc_icon>

			HAL_UART_Transmit(&huart1,
					ICON_TOGGLE(0x10, 0x17, 16, BUTTON_STATUS), 8,
 8002104:	797b      	ldrb	r3, [r7, #5]
 8002106:	2210      	movs	r2, #16
 8002108:	2117      	movs	r1, #23
 800210a:	2010      	movs	r0, #16
 800210c:	f7ff fdca 	bl	8001ca4 <ICON_TOGGLE>
 8002110:	4601      	mov	r1, r0
			HAL_UART_Transmit(&huart1,
 8002112:	2301      	movs	r3, #1
 8002114:	2208      	movs	r2, #8
 8002116:	482f      	ldr	r0, [pc, #188]	@ (80021d4 <display_data+0x3e8>)
 8002118:	f00e fdfc 	bl	8010d14 <HAL_UART_Transmit>
					1);
			break;
 800211c:	e076      	b.n	800220c <display_data+0x420>

		case 0x18:

			cls_con(clear_add);
 800211e:	4b2e      	ldr	r3, [pc, #184]	@ (80021d8 <display_data+0x3ec>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f000 fae0 	bl	80026e8 <cls_con>

			inc_drc_icon(BUTTON_STATUS);
 8002128:	797b      	ldrb	r3, [r7, #5]
 800212a:	4618      	mov	r0, r3
 800212c:	f000 fb20 	bl	8002770 <inc_drc_icon>

			HAL_UART_Transmit(&huart1,
					ICON_TOGGLE(0x10, 0x18, 17, BUTTON_STATUS), 8,
 8002130:	797b      	ldrb	r3, [r7, #5]
 8002132:	2211      	movs	r2, #17
 8002134:	2118      	movs	r1, #24
 8002136:	2010      	movs	r0, #16
 8002138:	f7ff fdb4 	bl	8001ca4 <ICON_TOGGLE>
 800213c:	4601      	mov	r1, r0
			HAL_UART_Transmit(&huart1,
 800213e:	2301      	movs	r3, #1
 8002140:	2208      	movs	r2, #8
 8002142:	4824      	ldr	r0, [pc, #144]	@ (80021d4 <display_data+0x3e8>)
 8002144:	f00e fde6 	bl	8010d14 <HAL_UART_Transmit>
					1);
			break;
 8002148:	e060      	b.n	800220c <display_data+0x420>

		case 0x19:
			cls_con(clear_add);
 800214a:	4b23      	ldr	r3, [pc, #140]	@ (80021d8 <display_data+0x3ec>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f000 faca 	bl	80026e8 <cls_con>
			inc_drc_icon(BUTTON_STATUS);
 8002154:	797b      	ldrb	r3, [r7, #5]
 8002156:	4618      	mov	r0, r3
 8002158:	f000 fb0a 	bl	8002770 <inc_drc_icon>
			HAL_UART_Transmit(&huart1,
					ICON_TOGGLE(0x10, 0x19, 18, BUTTON_STATUS), 8,
 800215c:	797b      	ldrb	r3, [r7, #5]
 800215e:	2212      	movs	r2, #18
 8002160:	2119      	movs	r1, #25
 8002162:	2010      	movs	r0, #16
 8002164:	f7ff fd9e 	bl	8001ca4 <ICON_TOGGLE>
 8002168:	4601      	mov	r1, r0
			HAL_UART_Transmit(&huart1,
 800216a:	2301      	movs	r3, #1
 800216c:	2208      	movs	r2, #8
 800216e:	4819      	ldr	r0, [pc, #100]	@ (80021d4 <display_data+0x3e8>)
 8002170:	f00e fdd0 	bl	8010d14 <HAL_UART_Transmit>
					1);
			break;
 8002174:	e04a      	b.n	800220c <display_data+0x420>
		case 0x20:
			cls_con(clears_add);
 8002176:	4b19      	ldr	r3, [pc, #100]	@ (80021dc <display_data+0x3f0>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f000 fab4 	bl	80026e8 <cls_con>
			inc_drc_icon(BUTTON_STATUS);
 8002180:	797b      	ldrb	r3, [r7, #5]
 8002182:	4618      	mov	r0, r3
 8002184:	f000 faf4 	bl	8002770 <inc_drc_icon>
			HAL_UART_Transmit(&huart1,
					ICON_TOGGLE(0x10, 0x20, 19, BUTTON_STATUS), 8,
 8002188:	797b      	ldrb	r3, [r7, #5]
 800218a:	2213      	movs	r2, #19
 800218c:	2120      	movs	r1, #32
 800218e:	2010      	movs	r0, #16
 8002190:	f7ff fd88 	bl	8001ca4 <ICON_TOGGLE>
 8002194:	4601      	mov	r1, r0
			HAL_UART_Transmit(&huart1,
 8002196:	2301      	movs	r3, #1
 8002198:	2208      	movs	r2, #8
 800219a:	480e      	ldr	r0, [pc, #56]	@ (80021d4 <display_data+0x3e8>)
 800219c:	f00e fdba 	bl	8010d14 <HAL_UART_Transmit>
					1);
			break;
 80021a0:	e034      	b.n	800220c <display_data+0x420>
		case 0x21:
			cls_con(clears_add);
 80021a2:	4b0e      	ldr	r3, [pc, #56]	@ (80021dc <display_data+0x3f0>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f000 fa9e 	bl	80026e8 <cls_con>
			inc_drc_icon(BUTTON_STATUS);
 80021ac:	797b      	ldrb	r3, [r7, #5]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f000 fade 	bl	8002770 <inc_drc_icon>
			HAL_UART_Transmit(&huart1,
					ICON_TOGGLE(0x10, 0x21, 20, BUTTON_STATUS), 8,
 80021b4:	797b      	ldrb	r3, [r7, #5]
 80021b6:	2214      	movs	r2, #20
 80021b8:	2121      	movs	r1, #33	@ 0x21
 80021ba:	2010      	movs	r0, #16
 80021bc:	f7ff fd72 	bl	8001ca4 <ICON_TOGGLE>
 80021c0:	4601      	mov	r1, r0
			HAL_UART_Transmit(&huart1,
 80021c2:	2301      	movs	r3, #1
 80021c4:	2208      	movs	r2, #8
 80021c6:	4803      	ldr	r0, [pc, #12]	@ (80021d4 <display_data+0x3e8>)
 80021c8:	f00e fda4 	bl	8010d14 <HAL_UART_Transmit>
					1);
			break;
 80021cc:	e01e      	b.n	800220c <display_data+0x420>
 80021ce:	bf00      	nop
 80021d0:	20001951 	.word	0x20001951
 80021d4:	20000fd0 	.word	0x20000fd0
 80021d8:	20001952 	.word	0x20001952
 80021dc:	20001953 	.word	0x20001953
		case 0x22:
			cls_con(clears_add);
 80021e0:	4b0e      	ldr	r3, [pc, #56]	@ (800221c <display_data+0x430>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f000 fa7f 	bl	80026e8 <cls_con>
			inc_drc_icon(BUTTON_STATUS);
 80021ea:	797b      	ldrb	r3, [r7, #5]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f000 fabf 	bl	8002770 <inc_drc_icon>
			HAL_UART_Transmit(&huart1,
					ICON_TOGGLE(0x10, 0x22, 21, BUTTON_STATUS), 8,
 80021f2:	797b      	ldrb	r3, [r7, #5]
 80021f4:	2215      	movs	r2, #21
 80021f6:	2122      	movs	r1, #34	@ 0x22
 80021f8:	2010      	movs	r0, #16
 80021fa:	f7ff fd53 	bl	8001ca4 <ICON_TOGGLE>
 80021fe:	4601      	mov	r1, r0
			HAL_UART_Transmit(&huart1,
 8002200:	2301      	movs	r3, #1
 8002202:	2208      	movs	r2, #8
 8002204:	4806      	ldr	r0, [pc, #24]	@ (8002220 <display_data+0x434>)
 8002206:	f00e fd85 	bl	8010d14 <HAL_UART_Transmit>
					1);
			break;
 800220a:	bf00      	nop
			//			break;

		}

	}
	free(temp_data);
 800220c:	68f8      	ldr	r0, [r7, #12]
 800220e:	f013 f853 	bl	80152b8 <free>

}
 8002212:	bf00      	nop
 8002214:	4618      	mov	r0, r3
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	20001953 	.word	0x20001953
 8002220:	20000fd0 	.word	0x20000fd0

08002224 <SPI_Write>:
void SPI_Write(uint8_t *data, uint8_t len){
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	460b      	mov	r3, r1
 800222e:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(&W25Q_SPI, data, len, 1100);
 8002230:	78fb      	ldrb	r3, [r7, #3]
 8002232:	b29a      	uxth	r2, r3
 8002234:	f240 434c 	movw	r3, #1100	@ 0x44c
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	4803      	ldr	r0, [pc, #12]	@ (8002248 <SPI_Write+0x24>)
 800223c:	f00c ff4f 	bl	800f0de <HAL_SPI_Transmit>
}
 8002240:	bf00      	nop
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	20000e90 	.word	0x20000e90

0800224c <SPI_Read>:
void SPI_Read(uint8_t *data, uint32_t len){
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
	HAL_SPI_Receive(&W25Q_SPI, data, len, 1100);
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	b29a      	uxth	r2, r3
 800225a:	f240 434c 	movw	r3, #1100	@ 0x44c
 800225e:	6879      	ldr	r1, [r7, #4]
 8002260:	4803      	ldr	r0, [pc, #12]	@ (8002270 <SPI_Read+0x24>)
 8002262:	f00d f880 	bl	800f366 <HAL_SPI_Receive>
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	20000e90 	.word	0x20000e90

08002274 <W25Q_Read>:
	csLOW();
	SPI_Write(tDATA, 2);
	csHIGH();
	osDelay(500);
}
void W25Q_Read(uint32_t startPage, uint8_t offset, uint32_t size, uint8_t *rData){
 8002274:	b580      	push	{r7, lr}
 8002276:	b088      	sub	sp, #32
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	607a      	str	r2, [r7, #4]
 800227e:	603b      	str	r3, [r7, #0]
 8002280:	460b      	mov	r3, r1
 8002282:	72fb      	strb	r3, [r7, #11]
	uint8_t tData[5];
	uint32_t memAddress = (startPage * 256) + offset;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	021a      	lsls	r2, r3, #8
 8002288:	7afb      	ldrb	r3, [r7, #11]
 800228a:	4413      	add	r3, r2
 800228c:	61fb      	str	r3, [r7, #28]
	if(numBLOCK < 1024){
		tData[0] = 0x03;
 800228e:	2303      	movs	r3, #3
 8002290:	753b      	strb	r3, [r7, #20]
		tData[1] = (memAddress >> 16) & 0xFF;
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	0c1b      	lsrs	r3, r3, #16
 8002296:	b2db      	uxtb	r3, r3
 8002298:	757b      	strb	r3, [r7, #21]
		tData[2] = (memAddress >> 8) & 0xFF;
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	0a1b      	lsrs	r3, r3, #8
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	75bb      	strb	r3, [r7, #22]
		tData[3] = (memAddress) & 0xFF;
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	75fb      	strb	r3, [r7, #23]
	}
	csLOW();
 80022a8:	2200      	movs	r2, #0
 80022aa:	2101      	movs	r1, #1
 80022ac:	480a      	ldr	r0, [pc, #40]	@ (80022d8 <W25Q_Read+0x64>)
 80022ae:	f00b fcc3 	bl	800dc38 <HAL_GPIO_WritePin>
	SPI_Write(tData, 4);
 80022b2:	f107 0314 	add.w	r3, r7, #20
 80022b6:	2104      	movs	r1, #4
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff ffb3 	bl	8002224 <SPI_Write>
	SPI_Read(rData, size);
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	6838      	ldr	r0, [r7, #0]
 80022c2:	f7ff ffc3 	bl	800224c <SPI_Read>
	csHIGH();
 80022c6:	2201      	movs	r2, #1
 80022c8:	2101      	movs	r1, #1
 80022ca:	4803      	ldr	r0, [pc, #12]	@ (80022d8 <W25Q_Read+0x64>)
 80022cc:	f00b fcb4 	bl	800dc38 <HAL_GPIO_WritePin>

}
 80022d0:	bf00      	nop
 80022d2:	3720      	adds	r7, #32
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40020400 	.word	0x40020400

080022dc <write_enable>:
	}

	free(readBuffer);
}

void write_enable(void){
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
	uint8_t tData = 0x06;
 80022e2:	2306      	movs	r3, #6
 80022e4:	71fb      	strb	r3, [r7, #7]
	csLOW();
 80022e6:	2200      	movs	r2, #0
 80022e8:	2101      	movs	r1, #1
 80022ea:	480a      	ldr	r0, [pc, #40]	@ (8002314 <write_enable+0x38>)
 80022ec:	f00b fca4 	bl	800dc38 <HAL_GPIO_WritePin>
	SPI_Write(&tData, 1);
 80022f0:	1dfb      	adds	r3, r7, #7
 80022f2:	2101      	movs	r1, #1
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff ff95 	bl	8002224 <SPI_Write>
	csHIGH();
 80022fa:	2201      	movs	r2, #1
 80022fc:	2101      	movs	r1, #1
 80022fe:	4805      	ldr	r0, [pc, #20]	@ (8002314 <write_enable+0x38>)
 8002300:	f00b fc9a 	bl	800dc38 <HAL_GPIO_WritePin>
	osDelay(50);
 8002304:	2032      	movs	r0, #50	@ 0x32
 8002306:	f010 f858 	bl	80123ba <osDelay>
}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40020400 	.word	0x40020400

08002318 <write_disable>:
void write_disable(void){
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
	uint8_t tData = 0x04;
 800231e:	2304      	movs	r3, #4
 8002320:	71fb      	strb	r3, [r7, #7]
	csLOW();
 8002322:	2200      	movs	r2, #0
 8002324:	2101      	movs	r1, #1
 8002326:	480a      	ldr	r0, [pc, #40]	@ (8002350 <write_disable+0x38>)
 8002328:	f00b fc86 	bl	800dc38 <HAL_GPIO_WritePin>
	SPI_Write(&tData, 1);
 800232c:	1dfb      	adds	r3, r7, #7
 800232e:	2101      	movs	r1, #1
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff ff77 	bl	8002224 <SPI_Write>
	csHIGH();
 8002336:	2201      	movs	r2, #1
 8002338:	2101      	movs	r1, #1
 800233a:	4805      	ldr	r0, [pc, #20]	@ (8002350 <write_disable+0x38>)
 800233c:	f00b fc7c 	bl	800dc38 <HAL_GPIO_WritePin>
	osDelay(10);
 8002340:	200a      	movs	r0, #10
 8002342:	f010 f83a 	bl	80123ba <osDelay>
}
 8002346:	bf00      	nop
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40020400 	.word	0x40020400

08002354 <bytetoWrite>:

uint32_t bytetoWrite(uint32_t size, uint16_t offset){
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	460b      	mov	r3, r1
 800235e:	807b      	strh	r3, [r7, #2]
	if((size + offset) < 256){
 8002360:	887a      	ldrh	r2, [r7, #2]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4413      	add	r3, r2
 8002366:	2bff      	cmp	r3, #255	@ 0xff
 8002368:	d801      	bhi.n	800236e <bytetoWrite+0x1a>
		return size;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	e002      	b.n	8002374 <bytetoWrite+0x20>

	}
	else{
		return 256 - offset;
 800236e:	887b      	ldrh	r3, [r7, #2]
 8002370:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
	}
}
 8002374:	4618      	mov	r0, r3
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <erase_sector>:
void erase_sector(uint8_t numSector){
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	71fb      	strb	r3, [r7, #7]
	uint8_t tData[6];
	uint32_t memAddress = numSector * 16 * 256;
 800238a:	79fb      	ldrb	r3, [r7, #7]
 800238c:	031b      	lsls	r3, r3, #12
 800238e:	617b      	str	r3, [r7, #20]

	write_enable();
 8002390:	f7ff ffa4 	bl	80022dc <write_enable>
	if(numBLOCK < 512){
		tData[0] = 0x20;
 8002394:	2320      	movs	r3, #32
 8002396:	733b      	strb	r3, [r7, #12]
		tData[1] = (memAddress >> 24) & 0xFF;
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	0e1b      	lsrs	r3, r3, #24
 800239c:	b2db      	uxtb	r3, r3
 800239e:	737b      	strb	r3, [r7, #13]
		tData[2] = (memAddress >> 16) & 0xFF;
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	0c1b      	lsrs	r3, r3, #16
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	73bb      	strb	r3, [r7, #14]
		tData[3] = (memAddress >> 8) & 0xFF;
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	0a1b      	lsrs	r3, r3, #8
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	73fb      	strb	r3, [r7, #15]
		tData[4] = (memAddress ) & 0xFF;
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	743b      	strb	r3, [r7, #16]

		csLOW();
 80023b6:	2200      	movs	r2, #0
 80023b8:	2101      	movs	r1, #1
 80023ba:	480c      	ldr	r0, [pc, #48]	@ (80023ec <erase_sector+0x6c>)
 80023bc:	f00b fc3c 	bl	800dc38 <HAL_GPIO_WritePin>
		SPI_Write(tData, 4);
 80023c0:	f107 030c 	add.w	r3, r7, #12
 80023c4:	2104      	movs	r1, #4
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff ff2c 	bl	8002224 <SPI_Write>
		csHIGH();
 80023cc:	2201      	movs	r2, #1
 80023ce:	2101      	movs	r1, #1
 80023d0:	4806      	ldr	r0, [pc, #24]	@ (80023ec <erase_sector+0x6c>)
 80023d2:	f00b fc31 	bl	800dc38 <HAL_GPIO_WritePin>
	}
	osDelay(450);
 80023d6:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 80023da:	f00f ffee 	bl	80123ba <osDelay>
	write_disable();
 80023de:	f7ff ff9b 	bl	8002318 <write_disable>

}
 80023e2:	bf00      	nop
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40020400 	.word	0x40020400

080023f0 <W25Q_Write_Page>:


void W25Q_Write_Page(uint32_t page, uint16_t offset, uint32_t size, uint8_t *data){
 80023f0:	b590      	push	{r4, r7, lr}
 80023f2:	b0d5      	sub	sp, #340	@ 0x154
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	f507 74a8 	add.w	r4, r7, #336	@ 0x150
 80023fa:	f5a4 74a2 	sub.w	r4, r4, #324	@ 0x144
 80023fe:	6020      	str	r0, [r4, #0]
 8002400:	4608      	mov	r0, r1
 8002402:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8002406:	f5a1 71a6 	sub.w	r1, r1, #332	@ 0x14c
 800240a:	600a      	str	r2, [r1, #0]
 800240c:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8002410:	f5a2 72a8 	sub.w	r2, r2, #336	@ 0x150
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800241a:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 800241e:	4602      	mov	r2, r0
 8002420:	801a      	strh	r2, [r3, #0]
	uint8_t tData[266];
	uint32_t startPage = page;
 8002422:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8002426:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
	uint32_t endPage = startPage + ((size + offset - 1) / 256);
 8002430:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8002434:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 8002438:	881a      	ldrh	r2, [r3, #0]
 800243a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800243e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4413      	add	r3, r2
 8002446:	3b01      	subs	r3, #1
 8002448:	0a1b      	lsrs	r3, r3, #8
 800244a:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800244e:	4413      	add	r3, r2
 8002450:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
	uint32_t numPage = endPage - startPage + 1;
 8002454:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8002458:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	3301      	adds	r3, #1
 8002460:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

	uint16_t startSector = startPage / 16;
 8002464:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002468:	091b      	lsrs	r3, r3, #4
 800246a:	f8a7 314a 	strh.w	r3, [r7, #330]	@ 0x14a
	uint16_t endSector = endPage / 16;
 800246e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002472:	091b      	lsrs	r3, r3, #4
 8002474:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
	uint16_t numSector = endSector - startSector + 1;
 8002478:	f8b7 212e 	ldrh.w	r2, [r7, #302]	@ 0x12e
 800247c:	f8b7 314a 	ldrh.w	r3, [r7, #330]	@ 0x14a
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	b29b      	uxth	r3, r3
 8002484:	3301      	adds	r3, #1
 8002486:	f8a7 312c 	strh.w	r3, [r7, #300]	@ 0x12c
	for (uint8_t i = 0; i < numSector; i++){
 800248a:	2300      	movs	r3, #0
 800248c:	f887 3149 	strb.w	r3, [r7, #329]	@ 0x149
 8002490:	e00d      	b.n	80024ae <W25Q_Write_Page+0xbe>
		erase_sector(startSector++);
 8002492:	f8b7 314a 	ldrh.w	r3, [r7, #330]	@ 0x14a
 8002496:	1c5a      	adds	r2, r3, #1
 8002498:	f8a7 214a 	strh.w	r2, [r7, #330]	@ 0x14a
 800249c:	b2db      	uxtb	r3, r3
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff ff6e 	bl	8002380 <erase_sector>
	for (uint8_t i = 0; i < numSector; i++){
 80024a4:	f897 3149 	ldrb.w	r3, [r7, #329]	@ 0x149
 80024a8:	3301      	adds	r3, #1
 80024aa:	f887 3149 	strb.w	r3, [r7, #329]	@ 0x149
 80024ae:	f897 3149 	ldrb.w	r3, [r7, #329]	@ 0x149
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	f8b7 212c 	ldrh.w	r2, [r7, #300]	@ 0x12c
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d8ea      	bhi.n	8002492 <W25Q_Write_Page+0xa2>
	}
	uint32_t dataPosition = 0;
 80024bc:	2300      	movs	r3, #0
 80024be:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
	for(uint8_t i = 0; i < numPage; i++){
 80024c2:	2300      	movs	r3, #0
 80024c4:	f887 3143 	strb.w	r3, [r7, #323]	@ 0x143
 80024c8:	e0ab      	b.n	8002622 <W25Q_Write_Page+0x232>
		uint32_t memAddress = (startPage * 256) + offset;
 80024ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80024ce:	021a      	lsls	r2, r3, #8
 80024d0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80024d4:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 80024d8:	881b      	ldrh	r3, [r3, #0]
 80024da:	4413      	add	r3, r2
 80024dc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
		uint16_t bytesRemaining = bytetoWrite(size, offset);
 80024e0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80024e4:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 80024e8:	881a      	ldrh	r2, [r3, #0]
 80024ea:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80024ee:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80024f2:	4611      	mov	r1, r2
 80024f4:	6818      	ldr	r0, [r3, #0]
 80024f6:	f7ff ff2d 	bl	8002354 <bytetoWrite>
 80024fa:	4603      	mov	r3, r0
 80024fc:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
		uint32_t index = 0;
 8002500:	2300      	movs	r3, #0
 8002502:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c

		write_enable();
 8002506:	f7ff fee9 	bl	80022dc <write_enable>
		if(numBLOCK < 512){
			tData[0] = 0x02;
 800250a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800250e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002512:	2202      	movs	r2, #2
 8002514:	701a      	strb	r2, [r3, #0]
			tData[1] = (memAddress >> 16) & 0xFF;
 8002516:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800251a:	0c1b      	lsrs	r3, r3, #16
 800251c:	b2da      	uxtb	r2, r3
 800251e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8002522:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002526:	705a      	strb	r2, [r3, #1]
			tData[2] = (memAddress >> 8) & 0xFF;
 8002528:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800252c:	0a1b      	lsrs	r3, r3, #8
 800252e:	b2da      	uxtb	r2, r3
 8002530:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8002534:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002538:	709a      	strb	r2, [r3, #2]
			tData[3] = (memAddress) & 0xFF;
 800253a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800253e:	b2da      	uxtb	r2, r3
 8002540:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8002544:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002548:	70da      	strb	r2, [r3, #3]
			index = 4;
 800254a:	2304      	movs	r3, #4
 800254c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
		}

		uint32_t bytestoSend = bytesRemaining + index;
 8002550:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8002554:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8002558:	4413      	add	r3, r2
 800255a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
		for(uint8_t i = 0; i < bytesRemaining; i++){
 800255e:	2300      	movs	r3, #0
 8002560:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
 8002564:	e01a      	b.n	800259c <W25Q_Write_Page+0x1ac>
			tData[index++] = data[i + dataPosition];
 8002566:	f897 213b 	ldrb.w	r2, [r7, #315]	@ 0x13b
 800256a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800256e:	4413      	add	r3, r2
 8002570:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8002574:	f5a2 72a8 	sub.w	r2, r2, #336	@ 0x150
 8002578:	6812      	ldr	r2, [r2, #0]
 800257a:	441a      	add	r2, r3
 800257c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002580:	1c59      	adds	r1, r3, #1
 8002582:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
 8002586:	7811      	ldrb	r1, [r2, #0]
 8002588:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 800258c:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002590:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0; i < bytesRemaining; i++){
 8002592:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 8002596:	3301      	adds	r3, #1
 8002598:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
 800259c:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	f8b7 2126 	ldrh.w	r2, [r7, #294]	@ 0x126
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d8dd      	bhi.n	8002566 <W25Q_Write_Page+0x176>
		}
		csLOW();
 80025aa:	2200      	movs	r2, #0
 80025ac:	2101      	movs	r1, #1
 80025ae:	4823      	ldr	r0, [pc, #140]	@ (800263c <W25Q_Write_Page+0x24c>)
 80025b0:	f00b fb42 	bl	800dc38 <HAL_GPIO_WritePin>
		SPI_Write(tData, bytestoSend);
 80025b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	f107 0314 	add.w	r3, r7, #20
 80025be:	4611      	mov	r1, r2
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff fe2f 	bl	8002224 <SPI_Write>
		csHIGH();
 80025c6:	2201      	movs	r2, #1
 80025c8:	2101      	movs	r1, #1
 80025ca:	481c      	ldr	r0, [pc, #112]	@ (800263c <W25Q_Write_Page+0x24c>)
 80025cc:	f00b fb34 	bl	800dc38 <HAL_GPIO_WritePin>
		startPage++;
 80025d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80025d4:	3301      	adds	r3, #1
 80025d6:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
		offset = 0;
 80025da:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80025de:	f5a3 73a3 	sub.w	r3, r3, #326	@ 0x146
 80025e2:	2200      	movs	r2, #0
 80025e4:	801a      	strh	r2, [r3, #0]
		size = size - bytesRemaining;
 80025e6:	f8b7 2126 	ldrh.w	r2, [r7, #294]	@ 0x126
 80025ea:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80025ee:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80025f2:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 80025f6:	f5a1 71a6 	sub.w	r1, r1, #332	@ 0x14c
 80025fa:	6809      	ldr	r1, [r1, #0]
 80025fc:	1a8a      	subs	r2, r1, r2
 80025fe:	601a      	str	r2, [r3, #0]
		dataPosition = dataPosition + bytesRemaining;
 8002600:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8002604:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002608:	4413      	add	r3, r2
 800260a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144

		osDelay(10);
 800260e:	200a      	movs	r0, #10
 8002610:	f00f fed3 	bl	80123ba <osDelay>
		write_disable();
 8002614:	f7ff fe80 	bl	8002318 <write_disable>
	for(uint8_t i = 0; i < numPage; i++){
 8002618:	f897 3143 	ldrb.w	r3, [r7, #323]	@ 0x143
 800261c:	3301      	adds	r3, #1
 800261e:	f887 3143 	strb.w	r3, [r7, #323]	@ 0x143
 8002622:	f897 3143 	ldrb.w	r3, [r7, #323]	@ 0x143
 8002626:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800262a:	429a      	cmp	r2, r3
 800262c:	f63f af4d 	bhi.w	80024ca <W25Q_Write_Page+0xda>
	}
}
 8002630:	bf00      	nop
 8002632:	bf00      	nop
 8002634:	f507 77aa 	add.w	r7, r7, #340	@ 0x154
 8002638:	46bd      	mov	sp, r7
 800263a:	bd90      	pop	{r4, r7, pc}
 800263c:	40020400 	.word	0x40020400

08002640 <intiger_val_send_Backup>:
		write_disable();
	}
}


void intiger_val_send_Backup(uint8_t icon_address, uint8_t value) {
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	460a      	mov	r2, r1
 800264a:	71fb      	strb	r3, [r7, #7]
 800264c:	4613      	mov	r3, r2
 800264e:	71bb      	strb	r3, [r7, #6]
	uint8_t send_intiger_val[8] = { 0x5A, 0xA5, 0x05, 0x82, 0x10, 0x00, 0x00,
 8002650:	4a0b      	ldr	r2, [pc, #44]	@ (8002680 <intiger_val_send_Backup+0x40>)
 8002652:	f107 0308 	add.w	r3, r7, #8
 8002656:	e892 0003 	ldmia.w	r2, {r0, r1}
 800265a:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	send_intiger_val[5] = 0x3F + icon_address;
 800265e:	79fb      	ldrb	r3, [r7, #7]
 8002660:	333f      	adds	r3, #63	@ 0x3f
 8002662:	b2db      	uxtb	r3, r3
 8002664:	737b      	strb	r3, [r7, #13]
	send_intiger_val[7] = value;
 8002666:	79bb      	ldrb	r3, [r7, #6]
 8002668:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, send_intiger_val, sizeof(send_intiger_val),
 800266a:	f107 0108 	add.w	r1, r7, #8
 800266e:	2301      	movs	r3, #1
 8002670:	2208      	movs	r2, #8
 8002672:	4804      	ldr	r0, [pc, #16]	@ (8002684 <intiger_val_send_Backup+0x44>)
 8002674:	f00e fb4e 	bl	8010d14 <HAL_UART_Transmit>
			1);
}
 8002678:	bf00      	nop
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	0801611c 	.word	0x0801611c
 8002684:	20000fd0 	.word	0x20000fd0

08002688 <intiger_val_vt_send_Backup>:
void intiger_val_vt_send_Backup(uint8_t icon_address, uint16_t value) {
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	4603      	mov	r3, r0
 8002690:	460a      	mov	r2, r1
 8002692:	71fb      	strb	r3, [r7, #7]
 8002694:	4613      	mov	r3, r2
 8002696:	80bb      	strh	r3, [r7, #4]
	uint8_t send_intiger_val[8] = { 0x5A, 0xA5, 0x05, 0x82, 0x10, 0x00, 0x00,
 8002698:	4a11      	ldr	r2, [pc, #68]	@ (80026e0 <intiger_val_vt_send_Backup+0x58>)
 800269a:	f107 030c 	add.w	r3, r7, #12
 800269e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026a2:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	uint8_t msb = 0x00;
 80026a6:	2300      	movs	r3, #0
 80026a8:	75fb      	strb	r3, [r7, #23]
	uint8_t lsb = 0x00;
 80026aa:	2300      	movs	r3, #0
 80026ac:	75bb      	strb	r3, [r7, #22]
	lsb = value;
 80026ae:	88bb      	ldrh	r3, [r7, #4]
 80026b0:	75bb      	strb	r3, [r7, #22]
	msb = value >> 8;
 80026b2:	88bb      	ldrh	r3, [r7, #4]
 80026b4:	0a1b      	lsrs	r3, r3, #8
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	75fb      	strb	r3, [r7, #23]
	send_intiger_val[5] = 0x3F + icon_address;
 80026ba:	79fb      	ldrb	r3, [r7, #7]
 80026bc:	333f      	adds	r3, #63	@ 0x3f
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	747b      	strb	r3, [r7, #17]
	send_intiger_val[6] = msb;
 80026c2:	7dfb      	ldrb	r3, [r7, #23]
 80026c4:	74bb      	strb	r3, [r7, #18]
	send_intiger_val[7] = lsb;
 80026c6:	7dbb      	ldrb	r3, [r7, #22]
 80026c8:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart1, send_intiger_val, sizeof(send_intiger_val),
 80026ca:	f107 010c 	add.w	r1, r7, #12
 80026ce:	2301      	movs	r3, #1
 80026d0:	2208      	movs	r2, #8
 80026d2:	4804      	ldr	r0, [pc, #16]	@ (80026e4 <intiger_val_vt_send_Backup+0x5c>)
 80026d4:	f00e fb1e 	bl	8010d14 <HAL_UART_Transmit>
			1);
}
 80026d8:	bf00      	nop
 80026da:	3718      	adds	r7, #24
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	0801611c 	.word	0x0801611c
 80026e4:	20000fd0 	.word	0x20000fd0

080026e8 <cls_con>:
void cls_con(int data) {
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
	//	int pos = 0;
	pos =  data;
 80026f0:	4a1e      	ldr	r2, [pc, #120]	@ (800276c <cls_con+0x84>)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6013      	str	r3, [r2, #0]
	if ((pos == 9) || (pos == 10)){
 80026f6:	4b1d      	ldr	r3, [pc, #116]	@ (800276c <cls_con+0x84>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2b09      	cmp	r3, #9
 80026fc:	d003      	beq.n	8002706 <cls_con+0x1e>
 80026fe:	4b1b      	ldr	r3, [pc, #108]	@ (800276c <cls_con+0x84>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2b0a      	cmp	r3, #10
 8002704:	d104      	bne.n	8002710 <cls_con+0x28>
		pos = pos;
 8002706:	4b19      	ldr	r3, [pc, #100]	@ (800276c <cls_con+0x84>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a18      	ldr	r2, [pc, #96]	@ (800276c <cls_con+0x84>)
 800270c:	6013      	str	r3, [r2, #0]
 800270e:	e020      	b.n	8002752 <cls_con+0x6a>
	}
	else if (pos <= 8){
 8002710:	4b16      	ldr	r3, [pc, #88]	@ (800276c <cls_con+0x84>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2b08      	cmp	r3, #8
 8002716:	dc05      	bgt.n	8002724 <cls_con+0x3c>
		pos -= 1;
 8002718:	4b14      	ldr	r3, [pc, #80]	@ (800276c <cls_con+0x84>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	3b01      	subs	r3, #1
 800271e:	4a13      	ldr	r2, [pc, #76]	@ (800276c <cls_con+0x84>)
 8002720:	6013      	str	r3, [r2, #0]
 8002722:	e016      	b.n	8002752 <cls_con+0x6a>
	}

	else if ((pos >= 12)  || (pos <= 19)){
 8002724:	4b11      	ldr	r3, [pc, #68]	@ (800276c <cls_con+0x84>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2b0b      	cmp	r3, #11
 800272a:	dc03      	bgt.n	8002734 <cls_con+0x4c>
 800272c:	4b0f      	ldr	r3, [pc, #60]	@ (800276c <cls_con+0x84>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b13      	cmp	r3, #19
 8002732:	dc05      	bgt.n	8002740 <cls_con+0x58>
		//	if (12 <= pos <= 19){
		pos -= 7;
 8002734:	4b0d      	ldr	r3, [pc, #52]	@ (800276c <cls_con+0x84>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	3b07      	subs	r3, #7
 800273a:	4a0c      	ldr	r2, [pc, #48]	@ (800276c <cls_con+0x84>)
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	e008      	b.n	8002752 <cls_con+0x6a>
	}
	else if (pos >= 20){
 8002740:	4b0a      	ldr	r3, [pc, #40]	@ (800276c <cls_con+0x84>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2b13      	cmp	r3, #19
 8002746:	dd04      	ble.n	8002752 <cls_con+0x6a>
		pos -= 6;
 8002748:	4b08      	ldr	r3, [pc, #32]	@ (800276c <cls_con+0x84>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	3b06      	subs	r3, #6
 800274e:	4a07      	ldr	r2, [pc, #28]	@ (800276c <cls_con+0x84>)
 8002750:	6013      	str	r3, [r2, #0]
	}

	display_icon_clr(0x10, data, pos);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	b2db      	uxtb	r3, r3
 8002756:	4a05      	ldr	r2, [pc, #20]	@ (800276c <cls_con+0x84>)
 8002758:	6812      	ldr	r2, [r2, #0]
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	4619      	mov	r1, r3
 800275e:	2010      	movs	r0, #16
 8002760:	f7ff fb14 	bl	8001d8c <display_icon_clr>
}
 8002764:	bf00      	nop
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	20001b24 	.word	0x20001b24

08002770 <inc_drc_icon>:

void inc_drc_icon(uint8_t BUTTON_STATUS) {
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	71fb      	strb	r3, [r7, #7]
	osDelay(50);
 800277a:	2032      	movs	r0, #50	@ 0x32
 800277c:	f00f fe1d 	bl	80123ba <osDelay>
	HAL_UART_Transmit(&huart1, ICON_TOGGLE(0x10, 0x10, 9, BUTTON_STATUS), 8,
 8002780:	79fb      	ldrb	r3, [r7, #7]
 8002782:	2209      	movs	r2, #9
 8002784:	2110      	movs	r1, #16
 8002786:	2010      	movs	r0, #16
 8002788:	f7ff fa8c 	bl	8001ca4 <ICON_TOGGLE>
 800278c:	4601      	mov	r1, r0
 800278e:	2301      	movs	r3, #1
 8002790:	2208      	movs	r2, #8
 8002792:	480f      	ldr	r0, [pc, #60]	@ (80027d0 <inc_drc_icon+0x60>)
 8002794:	f00e fabe 	bl	8010d14 <HAL_UART_Transmit>
			1);
	HAL_UART_Transmit(&huart1, ICON_TOGGLE(0x10, 0x09, 8, BUTTON_STATUS), 8,
 8002798:	79fb      	ldrb	r3, [r7, #7]
 800279a:	2208      	movs	r2, #8
 800279c:	2109      	movs	r1, #9
 800279e:	2010      	movs	r0, #16
 80027a0:	f7ff fa80 	bl	8001ca4 <ICON_TOGGLE>
 80027a4:	4601      	mov	r1, r0
 80027a6:	2301      	movs	r3, #1
 80027a8:	2208      	movs	r2, #8
 80027aa:	4809      	ldr	r0, [pc, #36]	@ (80027d0 <inc_drc_icon+0x60>)
 80027ac:	f00e fab2 	bl	8010d14 <HAL_UART_Transmit>
			1);
	HAL_UART_Transmit(&huart1, ICON_TOGGLE(0x10, 0x11, 10, BUTTON_STATUS), 8,
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	220a      	movs	r2, #10
 80027b4:	2111      	movs	r1, #17
 80027b6:	2010      	movs	r0, #16
 80027b8:	f7ff fa74 	bl	8001ca4 <ICON_TOGGLE>
 80027bc:	4601      	mov	r1, r0
 80027be:	2301      	movs	r3, #1
 80027c0:	2208      	movs	r2, #8
 80027c2:	4803      	ldr	r0, [pc, #12]	@ (80027d0 <inc_drc_icon+0x60>)
 80027c4:	f00e faa6 	bl	8010d14 <HAL_UART_Transmit>
			1);
	//	HAL_UART_Transmit(&huart1, ICON_TOGGLE(0x10, 0x35, 13, BUTTON_STATUS), 8,
	//			HAL_MAX_DELAY);
}
 80027c8:	bf00      	nop
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	20000fd0 	.word	0x20000fd0

080027d4 <intiger_val_send>:

void intiger_val_send(uint8_t icon_address, uint8_t value) {
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4603      	mov	r3, r0
 80027dc:	460a      	mov	r2, r1
 80027de:	71fb      	strb	r3, [r7, #7]
 80027e0:	4613      	mov	r3, r2
 80027e2:	71bb      	strb	r3, [r7, #6]
	uint8_t send_intiger_val[8] = { 0x5A, 0xA5, 0x05, 0x82, 0x10, 0x00, 0x00,
 80027e4:	4a0b      	ldr	r2, [pc, #44]	@ (8002814 <intiger_val_send+0x40>)
 80027e6:	f107 0308 	add.w	r3, r7, #8
 80027ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027ee:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	send_intiger_val[5] = 0x3F + icon_address;
 80027f2:	79fb      	ldrb	r3, [r7, #7]
 80027f4:	333f      	adds	r3, #63	@ 0x3f
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	737b      	strb	r3, [r7, #13]
	send_intiger_val[7] = value;
 80027fa:	79bb      	ldrb	r3, [r7, #6]
 80027fc:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, send_intiger_val, sizeof(send_intiger_val),
 80027fe:	f107 0108 	add.w	r1, r7, #8
 8002802:	2301      	movs	r3, #1
 8002804:	2208      	movs	r2, #8
 8002806:	4804      	ldr	r0, [pc, #16]	@ (8002818 <intiger_val_send+0x44>)
 8002808:	f00e fa84 	bl	8010d14 <HAL_UART_Transmit>
			1);
}
 800280c:	bf00      	nop
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	0801611c 	.word	0x0801611c
 8002818:	20000fd0 	.word	0x20000fd0

0800281c <intiger_val_vt_send>:

//vt_value
void intiger_val_vt_send(uint8_t icon_address, uint16_t value) {
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	460a      	mov	r2, r1
 8002826:	71fb      	strb	r3, [r7, #7]
 8002828:	4613      	mov	r3, r2
 800282a:	80bb      	strh	r3, [r7, #4]
	uint8_t send_intiger_val[8] = { 0x5A, 0xA5, 0x05, 0x82, 0x10, 0x00, 0x00,
 800282c:	4a11      	ldr	r2, [pc, #68]	@ (8002874 <intiger_val_vt_send+0x58>)
 800282e:	f107 030c 	add.w	r3, r7, #12
 8002832:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002836:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	uint8_t msb = 0x00;
 800283a:	2300      	movs	r3, #0
 800283c:	75fb      	strb	r3, [r7, #23]
	uint8_t lsb = 0x00;
 800283e:	2300      	movs	r3, #0
 8002840:	75bb      	strb	r3, [r7, #22]
	lsb = value;
 8002842:	88bb      	ldrh	r3, [r7, #4]
 8002844:	75bb      	strb	r3, [r7, #22]
	msb = value >> 8;
 8002846:	88bb      	ldrh	r3, [r7, #4]
 8002848:	0a1b      	lsrs	r3, r3, #8
 800284a:	b29b      	uxth	r3, r3
 800284c:	75fb      	strb	r3, [r7, #23]
	send_intiger_val[5] = 0x3F + icon_address;
 800284e:	79fb      	ldrb	r3, [r7, #7]
 8002850:	333f      	adds	r3, #63	@ 0x3f
 8002852:	b2db      	uxtb	r3, r3
 8002854:	747b      	strb	r3, [r7, #17]
	send_intiger_val[6] = msb;
 8002856:	7dfb      	ldrb	r3, [r7, #23]
 8002858:	74bb      	strb	r3, [r7, #18]
	send_intiger_val[7] = lsb;
 800285a:	7dbb      	ldrb	r3, [r7, #22]
 800285c:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart1, send_intiger_val, sizeof(send_intiger_val),
 800285e:	f107 010c 	add.w	r1, r7, #12
 8002862:	2301      	movs	r3, #1
 8002864:	2208      	movs	r2, #8
 8002866:	4804      	ldr	r0, [pc, #16]	@ (8002878 <intiger_val_vt_send+0x5c>)
 8002868:	f00e fa54 	bl	8010d14 <HAL_UART_Transmit>
			1);
}
 800286c:	bf00      	nop
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	0801611c 	.word	0x0801611c
 8002878:	20000fd0 	.word	0x20000fd0

0800287c <PIP_VAL>:
void PIP_VAL(uint8_t icon_address, uint8_t value) {
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	460a      	mov	r2, r1
 8002886:	71fb      	strb	r3, [r7, #7]
 8002888:	4613      	mov	r3, r2
 800288a:	71bb      	strb	r3, [r7, #6]
	uint8_t send_intiger_val[8] = { 0x5A, 0xA5, 0x05, 0x82, 0x10, 0x00, 0x00,
 800288c:	4a0c      	ldr	r2, [pc, #48]	@ (80028c0 <PIP_VAL+0x44>)
 800288e:	f107 0308 	add.w	r3, r7, #8
 8002892:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002896:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	send_intiger_val[5] = 0x3F + icon_address;
 800289a:	79fb      	ldrb	r3, [r7, #7]
 800289c:	333f      	adds	r3, #63	@ 0x3f
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	737b      	strb	r3, [r7, #13]
	send_intiger_val[6] = 0xFF;
 80028a2:	23ff      	movs	r3, #255	@ 0xff
 80028a4:	73bb      	strb	r3, [r7, #14]
	send_intiger_val[7] = value;
 80028a6:	79bb      	ldrb	r3, [r7, #6]
 80028a8:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, send_intiger_val, sizeof(send_intiger_val),
 80028aa:	f107 0108 	add.w	r1, r7, #8
 80028ae:	2301      	movs	r3, #1
 80028b0:	2208      	movs	r2, #8
 80028b2:	4804      	ldr	r0, [pc, #16]	@ (80028c4 <PIP_VAL+0x48>)
 80028b4:	f00e fa2e 	bl	8010d14 <HAL_UART_Transmit>
			1);
}
 80028b8:	bf00      	nop
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	0801611c 	.word	0x0801611c
 80028c4:	20000fd0 	.word	0x20000fd0

080028c8 <cls_cmd>:
//        seconds = currentTime.Seconds;
//        // Print or use the current time as needed
//    }
//}

void cls_cmd(uint8_t pos) {
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	4603      	mov	r3, r0
 80028d0:	71fb      	strb	r3, [r7, #7]

	if (DISPLAY_INPUT[5] == 0xBC) {
 80028d2:	4bb5      	ldr	r3, [pc, #724]	@ (8002ba8 <cls_cmd+0x2e0>)
 80028d4:	795b      	ldrb	r3, [r3, #5]
 80028d6:	2bbc      	cmp	r3, #188	@ 0xbc
 80028d8:	d11b      	bne.n	8002912 <cls_cmd+0x4a>
		if (mode_select_number == 0x01) {
 80028da:	4bb4      	ldr	r3, [pc, #720]	@ (8002bac <cls_cmd+0x2e4>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d117      	bne.n	8002912 <cls_cmd+0x4a>
			osDelay(50);
 80028e2:	2032      	movs	r0, #50	@ 0x32
 80028e4:	f00f fd69 	bl	80123ba <osDelay>
			PCV_FLAG = 0;
 80028e8:	4bb1      	ldr	r3, [pc, #708]	@ (8002bb0 <cls_cmd+0x2e8>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	701a      	strb	r2, [r3, #0]
			VCV_FLAG = 0;
 80028ee:	4bb1      	ldr	r3, [pc, #708]	@ (8002bb4 <cls_cmd+0x2ec>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	701a      	strb	r2, [r3, #0]
			PSV_FLAG = 0;
 80028f4:	4bb0      	ldr	r3, [pc, #704]	@ (8002bb8 <cls_cmd+0x2f0>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	701a      	strb	r2, [r3, #0]
			STAND_BY = 1;
 80028fa:	4bb0      	ldr	r3, [pc, #704]	@ (8002bbc <cls_cmd+0x2f4>)
 80028fc:	2201      	movs	r2, #1
 80028fe:	701a      	strb	r2, [r3, #0]

			SIMV_FLAG = 0;
 8002900:	4baf      	ldr	r3, [pc, #700]	@ (8002bc0 <cls_cmd+0x2f8>)
 8002902:	2200      	movs	r2, #0
 8002904:	701a      	strb	r2, [r3, #0]
			BAG_FLAG = 0;
 8002906:	4baf      	ldr	r3, [pc, #700]	@ (8002bc4 <cls_cmd+0x2fc>)
 8002908:	2200      	movs	r2, #0
 800290a:	701a      	strb	r2, [r3, #0]
			stand_ppr_set_flag = 1;
 800290c:	4bae      	ldr	r3, [pc, #696]	@ (8002bc8 <cls_cmd+0x300>)
 800290e:	2201      	movs	r2, #1
 8002910:	701a      	strb	r2, [r3, #0]
		}
	}  if (DISPLAY_INPUT[8] == 0x6A){
 8002912:	4ba5      	ldr	r3, [pc, #660]	@ (8002ba8 <cls_cmd+0x2e0>)
 8002914:	7a1b      	ldrb	r3, [r3, #8]
 8002916:	2b6a      	cmp	r3, #106	@ 0x6a
 8002918:	f040 82c5 	bne.w	8002ea6 <cls_cmd+0x5de>
		//		uint8_t clear_graph2[8] = { 0x5A, 0xA5, 0x05, 0x82, 0x03, 0x0B, 0x00, 0x00 };
		//		HAL_UART_Transmit(&huart1, clear_graph, sizeof(clear_graph),
		//				HAL_MAX_DELAY);
		//		HAL_UART_Transmit(&huart1, clear_graph2, sizeof(clear_graph2),
		//				HAL_MAX_DELAY);
		if (mode_select_number == 0x02) {
 800291c:	4ba3      	ldr	r3, [pc, #652]	@ (8002bac <cls_cmd+0x2e4>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b02      	cmp	r3, #2
 8002922:	f040 80e2 	bne.w	8002aea <cls_cmd+0x222>
			osDelay(50);
 8002926:	2032      	movs	r0, #50	@ 0x32
 8002928:	f00f fd47 	bl	80123ba <osDelay>
			PID_VALUE_SET_FLAG = 1;
 800292c:	4ba7      	ldr	r3, [pc, #668]	@ (8002bcc <cls_cmd+0x304>)
 800292e:	2201      	movs	r2, #1
 8002930:	701a      	strb	r2, [r3, #0]
			//			Value_reset_flag = 1;

			PCV_FLAG = 0;
 8002932:	4b9f      	ldr	r3, [pc, #636]	@ (8002bb0 <cls_cmd+0x2e8>)
 8002934:	2200      	movs	r2, #0
 8002936:	701a      	strb	r2, [r3, #0]
			VCV_FLAG = 1;
 8002938:	4b9e      	ldr	r3, [pc, #632]	@ (8002bb4 <cls_cmd+0x2ec>)
 800293a:	2201      	movs	r2, #1
 800293c:	701a      	strb	r2, [r3, #0]
			PSV_FLAG = 0;
 800293e:	4b9e      	ldr	r3, [pc, #632]	@ (8002bb8 <cls_cmd+0x2f0>)
 8002940:	2200      	movs	r2, #0
 8002942:	701a      	strb	r2, [r3, #0]

			SIMV_FLAG = 0;
 8002944:	4b9e      	ldr	r3, [pc, #632]	@ (8002bc0 <cls_cmd+0x2f8>)
 8002946:	2200      	movs	r2, #0
 8002948:	701a      	strb	r2, [r3, #0]
			STAND_BY = 0;
 800294a:	4b9c      	ldr	r3, [pc, #624]	@ (8002bbc <cls_cmd+0x2f4>)
 800294c:	2200      	movs	r2, #0
 800294e:	701a      	strb	r2, [r3, #0]
			BAG_FLAG = 0;
 8002950:	4b9c      	ldr	r3, [pc, #624]	@ (8002bc4 <cls_cmd+0x2fc>)
 8002952:	2200      	movs	r2, #0
 8002954:	701a      	strb	r2, [r3, #0]
			vcv_ppr_set_flag = 0;
 8002956:	4b9e      	ldr	r3, [pc, #632]	@ (8002bd0 <cls_cmd+0x308>)
 8002958:	2200      	movs	r2, #0
 800295a:	701a      	strb	r2, [r3, #0]
			//			}
			//			else if ((vt_temp_value >= 751) && (vt_temp_value <= 900)){
			//				PID_FLOW_SET_VALUE(vt_temp_value, 0.015, 0.073, 0.001, 4);
			//			}

			if ((vt_temp_value >= 0) && (vt_temp_value <=180)){
 800295c:	4b9d      	ldr	r3, [pc, #628]	@ (8002bd4 <cls_cmd+0x30c>)
 800295e:	881b      	ldrh	r3, [r3, #0]
 8002960:	2bb4      	cmp	r3, #180	@ 0xb4
 8002962:	d811      	bhi.n	8002988 <cls_cmd+0xc0>
				PID_FLOW_SET_VALUE(vt_temp_value, 0.03, 0.018, 0, 4);
 8002964:	4b9b      	ldr	r3, [pc, #620]	@ (8002bd4 <cls_cmd+0x30c>)
 8002966:	881b      	ldrh	r3, [r3, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	f7fd fdc3 	bl	80004f4 <__aeabi_ui2d>
 800296e:	4602      	mov	r2, r0
 8002970:	460b      	mov	r3, r1
 8002972:	2004      	movs	r0, #4
 8002974:	ed9f 3b7a 	vldr	d3, [pc, #488]	@ 8002b60 <cls_cmd+0x298>
 8002978:	ed9f 2b7b 	vldr	d2, [pc, #492]	@ 8002b68 <cls_cmd+0x2a0>
 800297c:	ed9f 1b7c 	vldr	d1, [pc, #496]	@ 8002b70 <cls_cmd+0x2a8>
 8002980:	ec43 2b10 	vmov	d0, r2, r3
 8002984:	f002 fa2c 	bl	8004de0 <PID_FLOW_SET_VALUE>
			}
			if ((vt_temp_value >= 181) && (vt_temp_value <=399)){
 8002988:	4b92      	ldr	r3, [pc, #584]	@ (8002bd4 <cls_cmd+0x30c>)
 800298a:	881b      	ldrh	r3, [r3, #0]
 800298c:	2bb4      	cmp	r3, #180	@ 0xb4
 800298e:	d916      	bls.n	80029be <cls_cmd+0xf6>
 8002990:	4b90      	ldr	r3, [pc, #576]	@ (8002bd4 <cls_cmd+0x30c>)
 8002992:	881b      	ldrh	r3, [r3, #0]
 8002994:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002998:	d211      	bcs.n	80029be <cls_cmd+0xf6>
				PID_FLOW_SET_VALUE(vt_temp_value, 0.011, 0.02, 0, 4);
 800299a:	4b8e      	ldr	r3, [pc, #568]	@ (8002bd4 <cls_cmd+0x30c>)
 800299c:	881b      	ldrh	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f7fd fda8 	bl	80004f4 <__aeabi_ui2d>
 80029a4:	4602      	mov	r2, r0
 80029a6:	460b      	mov	r3, r1
 80029a8:	2004      	movs	r0, #4
 80029aa:	ed9f 3b6d 	vldr	d3, [pc, #436]	@ 8002b60 <cls_cmd+0x298>
 80029ae:	ed9f 2b72 	vldr	d2, [pc, #456]	@ 8002b78 <cls_cmd+0x2b0>
 80029b2:	ed9f 1b73 	vldr	d1, [pc, #460]	@ 8002b80 <cls_cmd+0x2b8>
 80029b6:	ec43 2b10 	vmov	d0, r2, r3
 80029ba:	f002 fa11 	bl	8004de0 <PID_FLOW_SET_VALUE>
			}
			if ((vt_temp_value >= 400) && (vt_temp_value <=650)){
 80029be:	4b85      	ldr	r3, [pc, #532]	@ (8002bd4 <cls_cmd+0x30c>)
 80029c0:	881b      	ldrh	r3, [r3, #0]
 80029c2:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80029c6:	d317      	bcc.n	80029f8 <cls_cmd+0x130>
 80029c8:	4b82      	ldr	r3, [pc, #520]	@ (8002bd4 <cls_cmd+0x30c>)
 80029ca:	881b      	ldrh	r3, [r3, #0]
 80029cc:	f240 228a 	movw	r2, #650	@ 0x28a
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d811      	bhi.n	80029f8 <cls_cmd+0x130>
				PID_FLOW_SET_VALUE(vt_temp_value, 0.011, 0.02, 0, 4);
 80029d4:	4b7f      	ldr	r3, [pc, #508]	@ (8002bd4 <cls_cmd+0x30c>)
 80029d6:	881b      	ldrh	r3, [r3, #0]
 80029d8:	4618      	mov	r0, r3
 80029da:	f7fd fd8b 	bl	80004f4 <__aeabi_ui2d>
 80029de:	4602      	mov	r2, r0
 80029e0:	460b      	mov	r3, r1
 80029e2:	2004      	movs	r0, #4
 80029e4:	ed9f 3b5e 	vldr	d3, [pc, #376]	@ 8002b60 <cls_cmd+0x298>
 80029e8:	ed9f 2b63 	vldr	d2, [pc, #396]	@ 8002b78 <cls_cmd+0x2b0>
 80029ec:	ed9f 1b64 	vldr	d1, [pc, #400]	@ 8002b80 <cls_cmd+0x2b8>
 80029f0:	ec43 2b10 	vmov	d0, r2, r3
 80029f4:	f002 f9f4 	bl	8004de0 <PID_FLOW_SET_VALUE>
			}
			if ((vt_temp_value >= 651) && (vt_temp_value <=750)){
 80029f8:	4b76      	ldr	r3, [pc, #472]	@ (8002bd4 <cls_cmd+0x30c>)
 80029fa:	881b      	ldrh	r3, [r3, #0]
 80029fc:	f240 228a 	movw	r2, #650	@ 0x28a
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d917      	bls.n	8002a34 <cls_cmd+0x16c>
 8002a04:	4b73      	ldr	r3, [pc, #460]	@ (8002bd4 <cls_cmd+0x30c>)
 8002a06:	881b      	ldrh	r3, [r3, #0]
 8002a08:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d811      	bhi.n	8002a34 <cls_cmd+0x16c>
				PID_FLOW_SET_VALUE(vt_temp_value, 0.011, 0.02, 0, 4);
 8002a10:	4b70      	ldr	r3, [pc, #448]	@ (8002bd4 <cls_cmd+0x30c>)
 8002a12:	881b      	ldrh	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7fd fd6d 	bl	80004f4 <__aeabi_ui2d>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	2004      	movs	r0, #4
 8002a20:	ed9f 3b4f 	vldr	d3, [pc, #316]	@ 8002b60 <cls_cmd+0x298>
 8002a24:	ed9f 2b54 	vldr	d2, [pc, #336]	@ 8002b78 <cls_cmd+0x2b0>
 8002a28:	ed9f 1b55 	vldr	d1, [pc, #340]	@ 8002b80 <cls_cmd+0x2b8>
 8002a2c:	ec43 2b10 	vmov	d0, r2, r3
 8002a30:	f002 f9d6 	bl	8004de0 <PID_FLOW_SET_VALUE>
			}
			if ((vt_temp_value >= 751) && (vt_temp_value <= 870)){
 8002a34:	4b67      	ldr	r3, [pc, #412]	@ (8002bd4 <cls_cmd+0x30c>)
 8002a36:	881b      	ldrh	r3, [r3, #0]
 8002a38:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d917      	bls.n	8002a70 <cls_cmd+0x1a8>
 8002a40:	4b64      	ldr	r3, [pc, #400]	@ (8002bd4 <cls_cmd+0x30c>)
 8002a42:	881b      	ldrh	r3, [r3, #0]
 8002a44:	f240 3266 	movw	r2, #870	@ 0x366
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d811      	bhi.n	8002a70 <cls_cmd+0x1a8>
				PID_FLOW_SET_VALUE(vt_temp_value, 0.011, 0.02, 0, 4);
 8002a4c:	4b61      	ldr	r3, [pc, #388]	@ (8002bd4 <cls_cmd+0x30c>)
 8002a4e:	881b      	ldrh	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7fd fd4f 	bl	80004f4 <__aeabi_ui2d>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	2004      	movs	r0, #4
 8002a5c:	ed9f 3b40 	vldr	d3, [pc, #256]	@ 8002b60 <cls_cmd+0x298>
 8002a60:	ed9f 2b45 	vldr	d2, [pc, #276]	@ 8002b78 <cls_cmd+0x2b0>
 8002a64:	ed9f 1b46 	vldr	d1, [pc, #280]	@ 8002b80 <cls_cmd+0x2b8>
 8002a68:	ec43 2b10 	vmov	d0, r2, r3
 8002a6c:	f002 f9b8 	bl	8004de0 <PID_FLOW_SET_VALUE>
			}
			if((vt_temp_value >= 871) && (vt_temp_value <= 1080)){
 8002a70:	4b58      	ldr	r3, [pc, #352]	@ (8002bd4 <cls_cmd+0x30c>)
 8002a72:	881b      	ldrh	r3, [r3, #0]
 8002a74:	f240 3266 	movw	r2, #870	@ 0x366
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d916      	bls.n	8002aaa <cls_cmd+0x1e2>
 8002a7c:	4b55      	ldr	r3, [pc, #340]	@ (8002bd4 <cls_cmd+0x30c>)
 8002a7e:	881b      	ldrh	r3, [r3, #0]
 8002a80:	f5b3 6f87 	cmp.w	r3, #1080	@ 0x438
 8002a84:	d811      	bhi.n	8002aaa <cls_cmd+0x1e2>
				PID_FLOW_SET_VALUE(vt_temp_value, 0.01, 0.01, 0, 4);
 8002a86:	4b53      	ldr	r3, [pc, #332]	@ (8002bd4 <cls_cmd+0x30c>)
 8002a88:	881b      	ldrh	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7fd fd32 	bl	80004f4 <__aeabi_ui2d>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	2004      	movs	r0, #4
 8002a96:	ed9f 3b32 	vldr	d3, [pc, #200]	@ 8002b60 <cls_cmd+0x298>
 8002a9a:	ed9f 2b3b 	vldr	d2, [pc, #236]	@ 8002b88 <cls_cmd+0x2c0>
 8002a9e:	ed9f 1b3a 	vldr	d1, [pc, #232]	@ 8002b88 <cls_cmd+0x2c0>
 8002aa2:	ec43 2b10 	vmov	d0, r2, r3
 8002aa6:	f002 f99b 	bl	8004de0 <PID_FLOW_SET_VALUE>
			}
			if((vt_temp_value >= 1081) && (vt_temp_value <= 1500)){
 8002aaa:	4b4a      	ldr	r3, [pc, #296]	@ (8002bd4 <cls_cmd+0x30c>)
 8002aac:	881b      	ldrh	r3, [r3, #0]
 8002aae:	f5b3 6f87 	cmp.w	r3, #1080	@ 0x438
 8002ab2:	f240 81f8 	bls.w	8002ea6 <cls_cmd+0x5de>
 8002ab6:	4b47      	ldr	r3, [pc, #284]	@ (8002bd4 <cls_cmd+0x30c>)
 8002ab8:	881b      	ldrh	r3, [r3, #0]
 8002aba:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	f200 81f1 	bhi.w	8002ea6 <cls_cmd+0x5de>
				PID_FLOW_SET_VALUE(vt_temp_value, 0.001, 0.002, 0, 4);
 8002ac4:	4b43      	ldr	r3, [pc, #268]	@ (8002bd4 <cls_cmd+0x30c>)
 8002ac6:	881b      	ldrh	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7fd fd13 	bl	80004f4 <__aeabi_ui2d>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	2004      	movs	r0, #4
 8002ad4:	ed9f 3b22 	vldr	d3, [pc, #136]	@ 8002b60 <cls_cmd+0x298>
 8002ad8:	ed9f 2b2d 	vldr	d2, [pc, #180]	@ 8002b90 <cls_cmd+0x2c8>
 8002adc:	ed9f 1b2e 	vldr	d1, [pc, #184]	@ 8002b98 <cls_cmd+0x2d0>
 8002ae0:	ec43 2b10 	vmov	d0, r2, r3
 8002ae4:	f002 f97c 	bl	8004de0 <PID_FLOW_SET_VALUE>
 8002ae8:	e1dd      	b.n	8002ea6 <cls_cmd+0x5de>
			//			else if(vt_value > 100){
			//			PID_FLOW_SET_VALUE(user_flowe, 0.4, 0.1, 0, 5);
			//			}

		}
		else if (mode_select_number == 0x03) {
 8002aea:	4b30      	ldr	r3, [pc, #192]	@ (8002bac <cls_cmd+0x2e4>)
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	2b03      	cmp	r3, #3
 8002af0:	f040 8095 	bne.w	8002c1e <cls_cmd+0x356>
			osDelay(50);
 8002af4:	2032      	movs	r0, #50	@ 0x32
 8002af6:	f00f fc60 	bl	80123ba <osDelay>
			PID_VALUE_SET_FLAG = 1;
 8002afa:	4b34      	ldr	r3, [pc, #208]	@ (8002bcc <cls_cmd+0x304>)
 8002afc:	2201      	movs	r2, #1
 8002afe:	701a      	strb	r2, [r3, #0]
			//			Value_reset_flag = 1;

			PCV_FLAG = 1;
 8002b00:	4b2b      	ldr	r3, [pc, #172]	@ (8002bb0 <cls_cmd+0x2e8>)
 8002b02:	2201      	movs	r2, #1
 8002b04:	701a      	strb	r2, [r3, #0]
			VCV_FLAG = 0;
 8002b06:	4b2b      	ldr	r3, [pc, #172]	@ (8002bb4 <cls_cmd+0x2ec>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	701a      	strb	r2, [r3, #0]
			STAND_BY = 0;
 8002b0c:	4b2b      	ldr	r3, [pc, #172]	@ (8002bbc <cls_cmd+0x2f4>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	701a      	strb	r2, [r3, #0]
			SIMV_FLAG = 0;
 8002b12:	4b2b      	ldr	r3, [pc, #172]	@ (8002bc0 <cls_cmd+0x2f8>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	701a      	strb	r2, [r3, #0]
			PSV_FLAG = 0;
 8002b18:	4b27      	ldr	r3, [pc, #156]	@ (8002bb8 <cls_cmd+0x2f0>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	701a      	strb	r2, [r3, #0]
			BAG_FLAG = 0;
 8002b1e:	4b29      	ldr	r3, [pc, #164]	@ (8002bc4 <cls_cmd+0x2fc>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	701a      	strb	r2, [r3, #0]
			pcv_ppr_set_flag = 1;
 8002b24:	4b2c      	ldr	r3, [pc, #176]	@ (8002bd8 <cls_cmd+0x310>)
 8002b26:	2201      	movs	r2, #1
 8002b28:	701a      	strb	r2, [r3, #0]

			if ((RR_temp_value >= 5) && (RR_temp_value < 12)) {
 8002b2a:	4b2c      	ldr	r3, [pc, #176]	@ (8002bdc <cls_cmd+0x314>)
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	d958      	bls.n	8002be4 <cls_cmd+0x31c>
 8002b32:	4b2a      	ldr	r3, [pc, #168]	@ (8002bdc <cls_cmd+0x314>)
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	2b0b      	cmp	r3, #11
 8002b38:	d854      	bhi.n	8002be4 <cls_cmd+0x31c>
				PID_FLOW_SET_VALUE(PLR_temp_value, 0.1, 0.1, 0, 5);
 8002b3a:	4b29      	ldr	r3, [pc, #164]	@ (8002be0 <cls_cmd+0x318>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fd fce8 	bl	8000514 <__aeabi_i2d>
 8002b44:	4602      	mov	r2, r0
 8002b46:	460b      	mov	r3, r1
 8002b48:	2005      	movs	r0, #5
 8002b4a:	ed9f 3b05 	vldr	d3, [pc, #20]	@ 8002b60 <cls_cmd+0x298>
 8002b4e:	ed9f 2b14 	vldr	d2, [pc, #80]	@ 8002ba0 <cls_cmd+0x2d8>
 8002b52:	ed9f 1b13 	vldr	d1, [pc, #76]	@ 8002ba0 <cls_cmd+0x2d8>
 8002b56:	ec43 2b10 	vmov	d0, r2, r3
 8002b5a:	f002 f941 	bl	8004de0 <PID_FLOW_SET_VALUE>
 8002b5e:	e1a2      	b.n	8002ea6 <cls_cmd+0x5de>
	...
 8002b68:	8d4fdf3b 	.word	0x8d4fdf3b
 8002b6c:	3f926e97 	.word	0x3f926e97
 8002b70:	eb851eb8 	.word	0xeb851eb8
 8002b74:	3f9eb851 	.word	0x3f9eb851
 8002b78:	47ae147b 	.word	0x47ae147b
 8002b7c:	3f947ae1 	.word	0x3f947ae1
 8002b80:	020c49ba 	.word	0x020c49ba
 8002b84:	3f86872b 	.word	0x3f86872b
 8002b88:	47ae147b 	.word	0x47ae147b
 8002b8c:	3f847ae1 	.word	0x3f847ae1
 8002b90:	d2f1a9fc 	.word	0xd2f1a9fc
 8002b94:	3f60624d 	.word	0x3f60624d
 8002b98:	d2f1a9fc 	.word	0xd2f1a9fc
 8002b9c:	3f50624d 	.word	0x3f50624d
 8002ba0:	9999999a 	.word	0x9999999a
 8002ba4:	3fb99999 	.word	0x3fb99999
 8002ba8:	20001938 	.word	0x20001938
 8002bac:	200019ae 	.word	0x200019ae
 8002bb0:	200019ac 	.word	0x200019ac
 8002bb4:	200019ab 	.word	0x200019ab
 8002bb8:	200019aa 	.word	0x200019aa
 8002bbc:	200019a9 	.word	0x200019a9
 8002bc0:	200019a8 	.word	0x200019a8
 8002bc4:	200019ad 	.word	0x200019ad
 8002bc8:	200019c3 	.word	0x200019c3
 8002bcc:	20001415 	.word	0x20001415
 8002bd0:	200019c4 	.word	0x200019c4
 8002bd4:	20000044 	.word	0x20000044
 8002bd8:	200019c5 	.word	0x200019c5
 8002bdc:	2000004c 	.word	0x2000004c
 8002be0:	20000048 	.word	0x20000048
			} else if ((RR_temp_value >= 12) && (RR_temp_value <= 30)) {
 8002be4:	4b86      	ldr	r3, [pc, #536]	@ (8002e00 <cls_cmd+0x538>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	2b0b      	cmp	r3, #11
 8002bea:	f240 815c 	bls.w	8002ea6 <cls_cmd+0x5de>
 8002bee:	4b84      	ldr	r3, [pc, #528]	@ (8002e00 <cls_cmd+0x538>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	2b1e      	cmp	r3, #30
 8002bf4:	f200 8157 	bhi.w	8002ea6 <cls_cmd+0x5de>
				PID_FLOW_SET_VALUE(PLR_temp_value, 0.1, 0.1, 0, 5);
 8002bf8:	4b82      	ldr	r3, [pc, #520]	@ (8002e04 <cls_cmd+0x53c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7fd fc89 	bl	8000514 <__aeabi_i2d>
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	2005      	movs	r0, #5
 8002c08:	ed9f 3b6b 	vldr	d3, [pc, #428]	@ 8002db8 <cls_cmd+0x4f0>
 8002c0c:	ed9f 2b6c 	vldr	d2, [pc, #432]	@ 8002dc0 <cls_cmd+0x4f8>
 8002c10:	ed9f 1b6b 	vldr	d1, [pc, #428]	@ 8002dc0 <cls_cmd+0x4f8>
 8002c14:	ec43 2b10 	vmov	d0, r2, r3
 8002c18:	f002 f8e2 	bl	8004de0 <PID_FLOW_SET_VALUE>
 8002c1c:	e143      	b.n	8002ea6 <cls_cmd+0x5de>
			}

		} else if (mode_select_number == 0x04) {
 8002c1e:	4b7a      	ldr	r3, [pc, #488]	@ (8002e08 <cls_cmd+0x540>)
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	f040 8108 	bne.w	8002e38 <cls_cmd+0x570>
			osDelay(50);
 8002c28:	2032      	movs	r0, #50	@ 0x32
 8002c2a:	f00f fbc6 	bl	80123ba <osDelay>
			PID_VALUE_SET_FLAG = 1;
 8002c2e:	4b77      	ldr	r3, [pc, #476]	@ (8002e0c <cls_cmd+0x544>)
 8002c30:	2201      	movs	r2, #1
 8002c32:	701a      	strb	r2, [r3, #0]
			//			Value_reset_flag = 1;

			PCV_FLAG = 0;
 8002c34:	4b76      	ldr	r3, [pc, #472]	@ (8002e10 <cls_cmd+0x548>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	701a      	strb	r2, [r3, #0]
			PSV_FLAG = 0;
 8002c3a:	4b76      	ldr	r3, [pc, #472]	@ (8002e14 <cls_cmd+0x54c>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	701a      	strb	r2, [r3, #0]
			STAND_BY = 0;
 8002c40:	4b75      	ldr	r3, [pc, #468]	@ (8002e18 <cls_cmd+0x550>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	701a      	strb	r2, [r3, #0]

			SIMV_FLAG = 1;
 8002c46:	4b75      	ldr	r3, [pc, #468]	@ (8002e1c <cls_cmd+0x554>)
 8002c48:	2201      	movs	r2, #1
 8002c4a:	701a      	strb	r2, [r3, #0]
			VCV_FLAG = 0;
 8002c4c:	4b74      	ldr	r3, [pc, #464]	@ (8002e20 <cls_cmd+0x558>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	701a      	strb	r2, [r3, #0]
			BAG_FLAG = 0;
 8002c52:	4b74      	ldr	r3, [pc, #464]	@ (8002e24 <cls_cmd+0x55c>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	701a      	strb	r2, [r3, #0]
			PS_flag = 1;
 8002c58:	4b73      	ldr	r3, [pc, #460]	@ (8002e28 <cls_cmd+0x560>)
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	701a      	strb	r2, [r3, #0]
			Mandatory_FLAG = 1;
 8002c5e:	4b73      	ldr	r3, [pc, #460]	@ (8002e2c <cls_cmd+0x564>)
 8002c60:	2201      	movs	r2, #1
 8002c62:	701a      	strb	r2, [r3, #0]

			simv_ppr_set_flag = 1;
 8002c64:	4b72      	ldr	r3, [pc, #456]	@ (8002e30 <cls_cmd+0x568>)
 8002c66:	2201      	movs	r2, #1
 8002c68:	701a      	strb	r2, [r3, #0]
			if ((vt_temp_value >= 0) && (vt_temp_value <=180)){
 8002c6a:	4b72      	ldr	r3, [pc, #456]	@ (8002e34 <cls_cmd+0x56c>)
 8002c6c:	881b      	ldrh	r3, [r3, #0]
 8002c6e:	2bb4      	cmp	r3, #180	@ 0xb4
 8002c70:	d811      	bhi.n	8002c96 <cls_cmd+0x3ce>
				PID_FLOW_SET_VALUE(vt_temp_value, 0.03, 0.018, 0, 4);
 8002c72:	4b70      	ldr	r3, [pc, #448]	@ (8002e34 <cls_cmd+0x56c>)
 8002c74:	881b      	ldrh	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7fd fc3c 	bl	80004f4 <__aeabi_ui2d>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	2004      	movs	r0, #4
 8002c82:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 8002db8 <cls_cmd+0x4f0>
 8002c86:	ed9f 2b50 	vldr	d2, [pc, #320]	@ 8002dc8 <cls_cmd+0x500>
 8002c8a:	ed9f 1b51 	vldr	d1, [pc, #324]	@ 8002dd0 <cls_cmd+0x508>
 8002c8e:	ec43 2b10 	vmov	d0, r2, r3
 8002c92:	f002 f8a5 	bl	8004de0 <PID_FLOW_SET_VALUE>
			}
			if ((vt_temp_value >= 181) && (vt_temp_value <=399)){
 8002c96:	4b67      	ldr	r3, [pc, #412]	@ (8002e34 <cls_cmd+0x56c>)
 8002c98:	881b      	ldrh	r3, [r3, #0]
 8002c9a:	2bb4      	cmp	r3, #180	@ 0xb4
 8002c9c:	d916      	bls.n	8002ccc <cls_cmd+0x404>
 8002c9e:	4b65      	ldr	r3, [pc, #404]	@ (8002e34 <cls_cmd+0x56c>)
 8002ca0:	881b      	ldrh	r3, [r3, #0]
 8002ca2:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002ca6:	d211      	bcs.n	8002ccc <cls_cmd+0x404>
				PID_FLOW_SET_VALUE(vt_temp_value, 0.015, 0.05, 0, 4);
 8002ca8:	4b62      	ldr	r3, [pc, #392]	@ (8002e34 <cls_cmd+0x56c>)
 8002caa:	881b      	ldrh	r3, [r3, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fd fc21 	bl	80004f4 <__aeabi_ui2d>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	2004      	movs	r0, #4
 8002cb8:	ed9f 3b3f 	vldr	d3, [pc, #252]	@ 8002db8 <cls_cmd+0x4f0>
 8002cbc:	ed9f 2b46 	vldr	d2, [pc, #280]	@ 8002dd8 <cls_cmd+0x510>
 8002cc0:	ed9f 1b47 	vldr	d1, [pc, #284]	@ 8002de0 <cls_cmd+0x518>
 8002cc4:	ec43 2b10 	vmov	d0, r2, r3
 8002cc8:	f002 f88a 	bl	8004de0 <PID_FLOW_SET_VALUE>
			}
			if ((vt_temp_value >= 400) && (vt_temp_value <=650)){
 8002ccc:	4b59      	ldr	r3, [pc, #356]	@ (8002e34 <cls_cmd+0x56c>)
 8002cce:	881b      	ldrh	r3, [r3, #0]
 8002cd0:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002cd4:	d317      	bcc.n	8002d06 <cls_cmd+0x43e>
 8002cd6:	4b57      	ldr	r3, [pc, #348]	@ (8002e34 <cls_cmd+0x56c>)
 8002cd8:	881b      	ldrh	r3, [r3, #0]
 8002cda:	f240 228a 	movw	r2, #650	@ 0x28a
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d811      	bhi.n	8002d06 <cls_cmd+0x43e>
				PID_FLOW_SET_VALUE(vt_temp_value, 0.015, 0.05, 0, 4);
 8002ce2:	4b54      	ldr	r3, [pc, #336]	@ (8002e34 <cls_cmd+0x56c>)
 8002ce4:	881b      	ldrh	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7fd fc04 	bl	80004f4 <__aeabi_ui2d>
 8002cec:	4602      	mov	r2, r0
 8002cee:	460b      	mov	r3, r1
 8002cf0:	2004      	movs	r0, #4
 8002cf2:	ed9f 3b31 	vldr	d3, [pc, #196]	@ 8002db8 <cls_cmd+0x4f0>
 8002cf6:	ed9f 2b38 	vldr	d2, [pc, #224]	@ 8002dd8 <cls_cmd+0x510>
 8002cfa:	ed9f 1b39 	vldr	d1, [pc, #228]	@ 8002de0 <cls_cmd+0x518>
 8002cfe:	ec43 2b10 	vmov	d0, r2, r3
 8002d02:	f002 f86d 	bl	8004de0 <PID_FLOW_SET_VALUE>
			}
			if ((vt_temp_value >= 651) && (vt_temp_value <=750)){
 8002d06:	4b4b      	ldr	r3, [pc, #300]	@ (8002e34 <cls_cmd+0x56c>)
 8002d08:	881b      	ldrh	r3, [r3, #0]
 8002d0a:	f240 228a 	movw	r2, #650	@ 0x28a
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d917      	bls.n	8002d42 <cls_cmd+0x47a>
 8002d12:	4b48      	ldr	r3, [pc, #288]	@ (8002e34 <cls_cmd+0x56c>)
 8002d14:	881b      	ldrh	r3, [r3, #0]
 8002d16:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d811      	bhi.n	8002d42 <cls_cmd+0x47a>
				PID_FLOW_SET_VALUE(vt_temp_value, 0.015, 0.073, 0.001, 4);
 8002d1e:	4b45      	ldr	r3, [pc, #276]	@ (8002e34 <cls_cmd+0x56c>)
 8002d20:	881b      	ldrh	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fd fbe6 	bl	80004f4 <__aeabi_ui2d>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	2004      	movs	r0, #4
 8002d2e:	ed9f 3b2e 	vldr	d3, [pc, #184]	@ 8002de8 <cls_cmd+0x520>
 8002d32:	ed9f 2b2f 	vldr	d2, [pc, #188]	@ 8002df0 <cls_cmd+0x528>
 8002d36:	ed9f 1b2a 	vldr	d1, [pc, #168]	@ 8002de0 <cls_cmd+0x518>
 8002d3a:	ec43 2b10 	vmov	d0, r2, r3
 8002d3e:	f002 f84f 	bl	8004de0 <PID_FLOW_SET_VALUE>
			}
			if ((vt_temp_value >= 751) && (vt_temp_value <= 870)){
 8002d42:	4b3c      	ldr	r3, [pc, #240]	@ (8002e34 <cls_cmd+0x56c>)
 8002d44:	881b      	ldrh	r3, [r3, #0]
 8002d46:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d917      	bls.n	8002d7e <cls_cmd+0x4b6>
 8002d4e:	4b39      	ldr	r3, [pc, #228]	@ (8002e34 <cls_cmd+0x56c>)
 8002d50:	881b      	ldrh	r3, [r3, #0]
 8002d52:	f240 3266 	movw	r2, #870	@ 0x366
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d811      	bhi.n	8002d7e <cls_cmd+0x4b6>
				PID_FLOW_SET_VALUE(vt_temp_value, 0.015, 0.073, 0.001, 4);
 8002d5a:	4b36      	ldr	r3, [pc, #216]	@ (8002e34 <cls_cmd+0x56c>)
 8002d5c:	881b      	ldrh	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fd fbc8 	bl	80004f4 <__aeabi_ui2d>
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	2004      	movs	r0, #4
 8002d6a:	ed9f 3b1f 	vldr	d3, [pc, #124]	@ 8002de8 <cls_cmd+0x520>
 8002d6e:	ed9f 2b20 	vldr	d2, [pc, #128]	@ 8002df0 <cls_cmd+0x528>
 8002d72:	ed9f 1b1b 	vldr	d1, [pc, #108]	@ 8002de0 <cls_cmd+0x518>
 8002d76:	ec43 2b10 	vmov	d0, r2, r3
 8002d7a:	f002 f831 	bl	8004de0 <PID_FLOW_SET_VALUE>
			}
			if(vt_temp_value >= 871){
 8002d7e:	4b2d      	ldr	r3, [pc, #180]	@ (8002e34 <cls_cmd+0x56c>)
 8002d80:	881b      	ldrh	r3, [r3, #0]
 8002d82:	f240 3266 	movw	r2, #870	@ 0x366
 8002d86:	4293      	cmp	r3, r2
 8002d88:	f240 808d 	bls.w	8002ea6 <cls_cmd+0x5de>
				PID_FLOW_SET_VALUE(vt_temp_value, 0.01, 0.01, 0, 4);
 8002d8c:	4b29      	ldr	r3, [pc, #164]	@ (8002e34 <cls_cmd+0x56c>)
 8002d8e:	881b      	ldrh	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7fd fbaf 	bl	80004f4 <__aeabi_ui2d>
 8002d96:	4602      	mov	r2, r0
 8002d98:	460b      	mov	r3, r1
 8002d9a:	2004      	movs	r0, #4
 8002d9c:	ed9f 3b06 	vldr	d3, [pc, #24]	@ 8002db8 <cls_cmd+0x4f0>
 8002da0:	ed9f 2b15 	vldr	d2, [pc, #84]	@ 8002df8 <cls_cmd+0x530>
 8002da4:	ed9f 1b14 	vldr	d1, [pc, #80]	@ 8002df8 <cls_cmd+0x530>
 8002da8:	ec43 2b10 	vmov	d0, r2, r3
 8002dac:	f002 f818 	bl	8004de0 <PID_FLOW_SET_VALUE>
 8002db0:	e079      	b.n	8002ea6 <cls_cmd+0x5de>
 8002db2:	bf00      	nop
 8002db4:	f3af 8000 	nop.w
	...
 8002dc0:	9999999a 	.word	0x9999999a
 8002dc4:	3fb99999 	.word	0x3fb99999
 8002dc8:	8d4fdf3b 	.word	0x8d4fdf3b
 8002dcc:	3f926e97 	.word	0x3f926e97
 8002dd0:	eb851eb8 	.word	0xeb851eb8
 8002dd4:	3f9eb851 	.word	0x3f9eb851
 8002dd8:	9999999a 	.word	0x9999999a
 8002ddc:	3fa99999 	.word	0x3fa99999
 8002de0:	eb851eb8 	.word	0xeb851eb8
 8002de4:	3f8eb851 	.word	0x3f8eb851
 8002de8:	d2f1a9fc 	.word	0xd2f1a9fc
 8002dec:	3f50624d 	.word	0x3f50624d
 8002df0:	c49ba5e3 	.word	0xc49ba5e3
 8002df4:	3fb2b020 	.word	0x3fb2b020
 8002df8:	47ae147b 	.word	0x47ae147b
 8002dfc:	3f847ae1 	.word	0x3f847ae1
 8002e00:	2000004c 	.word	0x2000004c
 8002e04:	20000048 	.word	0x20000048
 8002e08:	200019ae 	.word	0x200019ae
 8002e0c:	20001415 	.word	0x20001415
 8002e10:	200019ac 	.word	0x200019ac
 8002e14:	200019aa 	.word	0x200019aa
 8002e18:	200019a9 	.word	0x200019a9
 8002e1c:	200019a8 	.word	0x200019a8
 8002e20:	200019ab 	.word	0x200019ab
 8002e24:	200019ad 	.word	0x200019ad
 8002e28:	200019d2 	.word	0x200019d2
 8002e2c:	200019b0 	.word	0x200019b0
 8002e30:	200019c6 	.word	0x200019c6
 8002e34:	20000044 	.word	0x20000044
			}

		} else if (mode_select_number == 0x05) {
 8002e38:	4b67      	ldr	r3, [pc, #412]	@ (8002fd8 <cls_cmd+0x710>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	2b05      	cmp	r3, #5
 8002e3e:	d132      	bne.n	8002ea6 <cls_cmd+0x5de>
			osDelay(50);
 8002e40:	2032      	movs	r0, #50	@ 0x32
 8002e42:	f00f faba 	bl	80123ba <osDelay>
			PID_VALUE_SET_FLAG = 1;
 8002e46:	4b65      	ldr	r3, [pc, #404]	@ (8002fdc <cls_cmd+0x714>)
 8002e48:	2201      	movs	r2, #1
 8002e4a:	701a      	strb	r2, [r3, #0]
			//			Value_reset_flag = 1;

			VCV_FLAG = 0;
 8002e4c:	4b64      	ldr	r3, [pc, #400]	@ (8002fe0 <cls_cmd+0x718>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	701a      	strb	r2, [r3, #0]
			PSV_FLAG = 1;
 8002e52:	4b64      	ldr	r3, [pc, #400]	@ (8002fe4 <cls_cmd+0x71c>)
 8002e54:	2201      	movs	r2, #1
 8002e56:	701a      	strb	r2, [r3, #0]
			STAND_BY = 0;
 8002e58:	4b63      	ldr	r3, [pc, #396]	@ (8002fe8 <cls_cmd+0x720>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	701a      	strb	r2, [r3, #0]
			SIMV_FLAG = 0;
 8002e5e:	4b63      	ldr	r3, [pc, #396]	@ (8002fec <cls_cmd+0x724>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	701a      	strb	r2, [r3, #0]
			PCV_FLAG = 0;
 8002e64:	4b62      	ldr	r3, [pc, #392]	@ (8002ff0 <cls_cmd+0x728>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	701a      	strb	r2, [r3, #0]
			BAG_FLAG = 0;
 8002e6a:	4b62      	ldr	r3, [pc, #392]	@ (8002ff4 <cls_cmd+0x72c>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	701a      	strb	r2, [r3, #0]
			psv_ppr_set_flag = 1;
 8002e70:	4b61      	ldr	r3, [pc, #388]	@ (8002ff8 <cls_cmd+0x730>)
 8002e72:	2201      	movs	r2, #1
 8002e74:	701a      	strb	r2, [r3, #0]
			rr_flag = 0;
 8002e76:	4b61      	ldr	r3, [pc, #388]	@ (8002ffc <cls_cmd+0x734>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	701a      	strb	r2, [r3, #0]
			PS_flag = 1;
 8002e7c:	4b60      	ldr	r3, [pc, #384]	@ (8003000 <cls_cmd+0x738>)
 8002e7e:	2201      	movs	r2, #1
 8002e80:	701a      	strb	r2, [r3, #0]
			//			if ((RR_temp_value >= 5) && (RR_temp_value < 12)) {
			PID_FLOW_SET_VALUE(PS_temp_value, 0.1, 0.1, 0, 5);
 8002e82:	4b60      	ldr	r3, [pc, #384]	@ (8003004 <cls_cmd+0x73c>)
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7fd fb34 	bl	80004f4 <__aeabi_ui2d>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	2005      	movs	r0, #5
 8002e92:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 8002fc8 <cls_cmd+0x700>
 8002e96:	ed9f 2b4e 	vldr	d2, [pc, #312]	@ 8002fd0 <cls_cmd+0x708>
 8002e9a:	ed9f 1b4d 	vldr	d1, [pc, #308]	@ 8002fd0 <cls_cmd+0x708>
 8002e9e:	ec43 2b10 	vmov	d0, r2, r3
 8002ea2:	f001 ff9d 	bl	8004de0 <PID_FLOW_SET_VALUE>
			//			} else if ((RR_temp_value >= 12) && (RR_temp_value <= 30)) {
			//				PID_FLOW_SET_VALUE(PS_temp_value, 0.5, 0.5, 0, 5);

		}
	}
	if(DISPLAY_INPUT[8] == 0x7C){
 8002ea6:	4b58      	ldr	r3, [pc, #352]	@ (8003008 <cls_cmd+0x740>)
 8002ea8:	7a1b      	ldrb	r3, [r3, #8]
 8002eaa:	2b7c      	cmp	r3, #124	@ 0x7c
 8002eac:	d11e      	bne.n	8002eec <cls_cmd+0x624>
		mode_select_number = 0x06;
 8002eae:	4b4a      	ldr	r3, [pc, #296]	@ (8002fd8 <cls_cmd+0x710>)
 8002eb0:	2206      	movs	r2, #6
 8002eb2:	701a      	strb	r2, [r3, #0]
		if (mode_select_number == 0x06) {
 8002eb4:	4b48      	ldr	r3, [pc, #288]	@ (8002fd8 <cls_cmd+0x710>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b06      	cmp	r3, #6
 8002eba:	d117      	bne.n	8002eec <cls_cmd+0x624>
			osDelay(50);
 8002ebc:	2032      	movs	r0, #50	@ 0x32
 8002ebe:	f00f fa7c 	bl	80123ba <osDelay>
			//			PID_VALUE_SET_FLAG = 1;
			//			Value_reset_flag = 1;
			VCV_FLAG = 0;
 8002ec2:	4b47      	ldr	r3, [pc, #284]	@ (8002fe0 <cls_cmd+0x718>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	701a      	strb	r2, [r3, #0]
			PSV_FLAG = 0;
 8002ec8:	4b46      	ldr	r3, [pc, #280]	@ (8002fe4 <cls_cmd+0x71c>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	701a      	strb	r2, [r3, #0]
			STAND_BY = 0;
 8002ece:	4b46      	ldr	r3, [pc, #280]	@ (8002fe8 <cls_cmd+0x720>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	701a      	strb	r2, [r3, #0]
			SIMV_FLAG = 0;
 8002ed4:	4b45      	ldr	r3, [pc, #276]	@ (8002fec <cls_cmd+0x724>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	701a      	strb	r2, [r3, #0]
			PCV_FLAG = 0;
 8002eda:	4b45      	ldr	r3, [pc, #276]	@ (8002ff0 <cls_cmd+0x728>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	701a      	strb	r2, [r3, #0]
			BAG_FLAG = 1;
 8002ee0:	4b44      	ldr	r3, [pc, #272]	@ (8002ff4 <cls_cmd+0x72c>)
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	701a      	strb	r2, [r3, #0]
			bag_ppr_set_flag = 1;
 8002ee6:	4b49      	ldr	r3, [pc, #292]	@ (800300c <cls_cmd+0x744>)
 8002ee8:	2201      	movs	r2, #1
 8002eea:	701a      	strb	r2, [r3, #0]
		}
	}
	if (DISPLAY_INPUT[8] == 0x69){
 8002eec:	4b46      	ldr	r3, [pc, #280]	@ (8003008 <cls_cmd+0x740>)
 8002eee:	7a1b      	ldrb	r3, [r3, #8]
 8002ef0:	2b69      	cmp	r3, #105	@ 0x69
 8002ef2:	d123      	bne.n	8002f3c <cls_cmd+0x674>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002efa:	4845      	ldr	r0, [pc, #276]	@ (8003010 <cls_cmd+0x748>)
 8002efc:	f00a fe9c 	bl	800dc38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8002f00:	2200      	movs	r2, #0
 8002f02:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002f06:	4842      	ldr	r0, [pc, #264]	@ (8003010 <cls_cmd+0x748>)
 8002f08:	f00a fe96 	bl	800dc38 <HAL_GPIO_WritePin>
		PCV_FLAG = 0;
 8002f0c:	4b38      	ldr	r3, [pc, #224]	@ (8002ff0 <cls_cmd+0x728>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	701a      	strb	r2, [r3, #0]
		VCV_FLAG = 0;
 8002f12:	4b33      	ldr	r3, [pc, #204]	@ (8002fe0 <cls_cmd+0x718>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	701a      	strb	r2, [r3, #0]
		PSV_FLAG = 0;
 8002f18:	4b32      	ldr	r3, [pc, #200]	@ (8002fe4 <cls_cmd+0x71c>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	701a      	strb	r2, [r3, #0]
		STAND_BY = 1;
 8002f1e:	4b32      	ldr	r3, [pc, #200]	@ (8002fe8 <cls_cmd+0x720>)
 8002f20:	2201      	movs	r2, #1
 8002f22:	701a      	strb	r2, [r3, #0]
		SIMV_FLAG = 0;
 8002f24:	4b31      	ldr	r3, [pc, #196]	@ (8002fec <cls_cmd+0x724>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	701a      	strb	r2, [r3, #0]
		BAG_FLAG = 0;
 8002f2a:	4b32      	ldr	r3, [pc, #200]	@ (8002ff4 <cls_cmd+0x72c>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	701a      	strb	r2, [r3, #0]
		Mandatory_FLAG = 0;
 8002f30:	4b38      	ldr	r3, [pc, #224]	@ (8003014 <cls_cmd+0x74c>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	701a      	strb	r2, [r3, #0]
		stand_ppr_set_flag = 1;
 8002f36:	4b38      	ldr	r3, [pc, #224]	@ (8003018 <cls_cmd+0x750>)
 8002f38:	2201      	movs	r2, #1
 8002f3a:	701a      	strb	r2, [r3, #0]
	}
	if (DISPLAY_INPUT[5] == 0XA4) {
 8002f3c:	4b32      	ldr	r3, [pc, #200]	@ (8003008 <cls_cmd+0x740>)
 8002f3e:	795b      	ldrb	r3, [r3, #5]
 8002f40:	2ba4      	cmp	r3, #164	@ 0xa4
 8002f42:	f040 8178 	bne.w	8003236 <cls_cmd+0x96e>
		osDelay(50);
 8002f46:	2032      	movs	r0, #50	@ 0x32
 8002f48:	f00f fa37 	bl	80123ba <osDelay>
		if(PCV_FLAG == 1){
 8002f4c:	4b28      	ldr	r3, [pc, #160]	@ (8002ff0 <cls_cmd+0x728>)
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d066      	beq.n	8003024 <cls_cmd+0x75c>
			if ((RR_temp_value >= 5) && (RR_temp_value < 12)) {
 8002f56:	4b31      	ldr	r3, [pc, #196]	@ (800301c <cls_cmd+0x754>)
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	2b04      	cmp	r3, #4
 8002f5c:	d916      	bls.n	8002f8c <cls_cmd+0x6c4>
 8002f5e:	4b2f      	ldr	r3, [pc, #188]	@ (800301c <cls_cmd+0x754>)
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	2b0b      	cmp	r3, #11
 8002f64:	d812      	bhi.n	8002f8c <cls_cmd+0x6c4>
				PID_FLOW_SET_VALUE(PLR_temp_value, 0.1, 0.1, 0, 5);
 8002f66:	4b2e      	ldr	r3, [pc, #184]	@ (8003020 <cls_cmd+0x758>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fd fad2 	bl	8000514 <__aeabi_i2d>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	2005      	movs	r0, #5
 8002f76:	ed9f 3b14 	vldr	d3, [pc, #80]	@ 8002fc8 <cls_cmd+0x700>
 8002f7a:	ed9f 2b15 	vldr	d2, [pc, #84]	@ 8002fd0 <cls_cmd+0x708>
 8002f7e:	ed9f 1b14 	vldr	d1, [pc, #80]	@ 8002fd0 <cls_cmd+0x708>
 8002f82:	ec43 2b10 	vmov	d0, r2, r3
 8002f86:	f001 ff2b 	bl	8004de0 <PID_FLOW_SET_VALUE>
 8002f8a:	e062      	b.n	8003052 <cls_cmd+0x78a>
			} else if ((RR_temp_value >= 12) && (RR_temp_value <= 30)) {
 8002f8c:	4b23      	ldr	r3, [pc, #140]	@ (800301c <cls_cmd+0x754>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b0b      	cmp	r3, #11
 8002f92:	d95e      	bls.n	8003052 <cls_cmd+0x78a>
 8002f94:	4b21      	ldr	r3, [pc, #132]	@ (800301c <cls_cmd+0x754>)
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	2b1e      	cmp	r3, #30
 8002f9a:	d85a      	bhi.n	8003052 <cls_cmd+0x78a>
				PID_FLOW_SET_VALUE(PLR_temp_value, 0.1, 0.1, 0, 5);
 8002f9c:	4b20      	ldr	r3, [pc, #128]	@ (8003020 <cls_cmd+0x758>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7fd fab7 	bl	8000514 <__aeabi_i2d>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	460b      	mov	r3, r1
 8002faa:	2005      	movs	r0, #5
 8002fac:	ed9f 3b06 	vldr	d3, [pc, #24]	@ 8002fc8 <cls_cmd+0x700>
 8002fb0:	ed9f 2b07 	vldr	d2, [pc, #28]	@ 8002fd0 <cls_cmd+0x708>
 8002fb4:	ed9f 1b06 	vldr	d1, [pc, #24]	@ 8002fd0 <cls_cmd+0x708>
 8002fb8:	ec43 2b10 	vmov	d0, r2, r3
 8002fbc:	f001 ff10 	bl	8004de0 <PID_FLOW_SET_VALUE>
 8002fc0:	e047      	b.n	8003052 <cls_cmd+0x78a>
 8002fc2:	bf00      	nop
 8002fc4:	f3af 8000 	nop.w
	...
 8002fd0:	9999999a 	.word	0x9999999a
 8002fd4:	3fb99999 	.word	0x3fb99999
 8002fd8:	200019ae 	.word	0x200019ae
 8002fdc:	20001415 	.word	0x20001415
 8002fe0:	200019ab 	.word	0x200019ab
 8002fe4:	200019aa 	.word	0x200019aa
 8002fe8:	200019a9 	.word	0x200019a9
 8002fec:	200019a8 	.word	0x200019a8
 8002ff0:	200019ac 	.word	0x200019ac
 8002ff4:	200019ad 	.word	0x200019ad
 8002ff8:	200019c7 	.word	0x200019c7
 8002ffc:	200019cd 	.word	0x200019cd
 8003000:	200019d2 	.word	0x200019d2
 8003004:	20001969 	.word	0x20001969
 8003008:	20001938 	.word	0x20001938
 800300c:	200019c8 	.word	0x200019c8
 8003010:	40021000 	.word	0x40021000
 8003014:	200019b0 	.word	0x200019b0
 8003018:	200019c3 	.word	0x200019c3
 800301c:	2000004c 	.word	0x2000004c
 8003020:	20000048 	.word	0x20000048
			}
		}
		else if (PSV_FLAG == 1){
 8003024:	4bac      	ldr	r3, [pc, #688]	@ (80032d8 <cls_cmd+0xa10>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d011      	beq.n	8003052 <cls_cmd+0x78a>
			PID_FLOW_SET_VALUE(PS_temp_value, 0.1, 0.1, 0, 5);
 800302e:	4bab      	ldr	r3, [pc, #684]	@ (80032dc <cls_cmd+0xa14>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	4618      	mov	r0, r3
 8003034:	f7fd fa5e 	bl	80004f4 <__aeabi_ui2d>
 8003038:	4602      	mov	r2, r0
 800303a:	460b      	mov	r3, r1
 800303c:	2005      	movs	r0, #5
 800303e:	ed9f 3ba0 	vldr	d3, [pc, #640]	@ 80032c0 <cls_cmd+0x9f8>
 8003042:	ed9f 2ba1 	vldr	d2, [pc, #644]	@ 80032c8 <cls_cmd+0xa00>
 8003046:	ed9f 1ba0 	vldr	d1, [pc, #640]	@ 80032c8 <cls_cmd+0xa00>
 800304a:	ec43 2b10 	vmov	d0, r2, r3
 800304e:	f001 fec7 	bl	8004de0 <PID_FLOW_SET_VALUE>
		}

		vt_temp_value = vt_value;
 8003052:	4ba3      	ldr	r3, [pc, #652]	@ (80032e0 <cls_cmd+0xa18>)
 8003054:	881a      	ldrh	r2, [r3, #0]
 8003056:	4ba3      	ldr	r3, [pc, #652]	@ (80032e4 <cls_cmd+0xa1c>)
 8003058:	801a      	strh	r2, [r3, #0]
		RR_temp_value = RR_value;
 800305a:	4ba3      	ldr	r3, [pc, #652]	@ (80032e8 <cls_cmd+0xa20>)
 800305c:	781a      	ldrb	r2, [r3, #0]
 800305e:	4ba3      	ldr	r3, [pc, #652]	@ (80032ec <cls_cmd+0xa24>)
 8003060:	701a      	strb	r2, [r3, #0]
		PLR_temp_value = PLR_value;
 8003062:	4ba3      	ldr	r3, [pc, #652]	@ (80032f0 <cls_cmd+0xa28>)
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	461a      	mov	r2, r3
 8003068:	4ba2      	ldr	r3, [pc, #648]	@ (80032f4 <cls_cmd+0xa2c>)
 800306a:	601a      	str	r2, [r3, #0]
		temp_insP_value = insP_value;
 800306c:	4ba2      	ldr	r3, [pc, #648]	@ (80032f8 <cls_cmd+0xa30>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4aa2      	ldr	r2, [pc, #648]	@ (80032fc <cls_cmd+0xa34>)
 8003072:	6013      	str	r3, [r2, #0]
		temp_exp_value = exp_value;
 8003074:	4ba2      	ldr	r3, [pc, #648]	@ (8003300 <cls_cmd+0xa38>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4aa2      	ldr	r2, [pc, #648]	@ (8003304 <cls_cmd+0xa3c>)
 800307a:	6013      	str	r3, [r2, #0]
		PU_temp_value = PU_value;
 800307c:	4ba2      	ldr	r3, [pc, #648]	@ (8003308 <cls_cmd+0xa40>)
 800307e:	781a      	ldrb	r2, [r3, #0]
 8003080:	4ba2      	ldr	r3, [pc, #648]	@ (800330c <cls_cmd+0xa44>)
 8003082:	701a      	strb	r2, [r3, #0]
		PEEP_temp_value = PEEP_value - 1;
 8003084:	4ba2      	ldr	r3, [pc, #648]	@ (8003310 <cls_cmd+0xa48>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	3b01      	subs	r3, #1
 800308a:	b2da      	uxtb	r2, r3
 800308c:	4ba1      	ldr	r3, [pc, #644]	@ (8003314 <cls_cmd+0xa4c>)
 800308e:	701a      	strb	r2, [r3, #0]
		PS_temp_value = PS_value;
 8003090:	4ba1      	ldr	r3, [pc, #644]	@ (8003318 <cls_cmd+0xa50>)
 8003092:	781a      	ldrb	r2, [r3, #0]
 8003094:	4b91      	ldr	r3, [pc, #580]	@ (80032dc <cls_cmd+0xa14>)
 8003096:	701a      	strb	r2, [r3, #0]
		P_peak_alarm_max_value = P_peak_alarm_max_value;
 8003098:	4ba0      	ldr	r3, [pc, #640]	@ (800331c <cls_cmd+0xa54>)
 800309a:	781a      	ldrb	r2, [r3, #0]
 800309c:	4b9f      	ldr	r3, [pc, #636]	@ (800331c <cls_cmd+0xa54>)
 800309e:	701a      	strb	r2, [r3, #0]
		P_peak_alarm_min_value = P_peak_alarm_min_value;
 80030a0:	4b9f      	ldr	r3, [pc, #636]	@ (8003320 <cls_cmd+0xa58>)
 80030a2:	781a      	ldrb	r2, [r3, #0]
 80030a4:	4b9e      	ldr	r3, [pc, #632]	@ (8003320 <cls_cmd+0xa58>)
 80030a6:	701a      	strb	r2, [r3, #0]
		MV_alarm_max_value = MV_alarm_max_value;
 80030a8:	4b9e      	ldr	r3, [pc, #632]	@ (8003324 <cls_cmd+0xa5c>)
 80030aa:	781a      	ldrb	r2, [r3, #0]
 80030ac:	4b9d      	ldr	r3, [pc, #628]	@ (8003324 <cls_cmd+0xa5c>)
 80030ae:	701a      	strb	r2, [r3, #0]
		MV_alarm_min_value = MV_alarm_min_value;
 80030b0:	4b9d      	ldr	r3, [pc, #628]	@ (8003328 <cls_cmd+0xa60>)
 80030b2:	781a      	ldrb	r2, [r3, #0]
 80030b4:	4b9c      	ldr	r3, [pc, #624]	@ (8003328 <cls_cmd+0xa60>)
 80030b6:	701a      	strb	r2, [r3, #0]
		RR_alarm_max_value = RR_alarm_max_value;
 80030b8:	4b9c      	ldr	r3, [pc, #624]	@ (800332c <cls_cmd+0xa64>)
 80030ba:	781a      	ldrb	r2, [r3, #0]
 80030bc:	4b9b      	ldr	r3, [pc, #620]	@ (800332c <cls_cmd+0xa64>)
 80030be:	701a      	strb	r2, [r3, #0]
		RR_alarm_min_value = RR_alarm_min_value;
 80030c0:	4b9b      	ldr	r3, [pc, #620]	@ (8003330 <cls_cmd+0xa68>)
 80030c2:	781a      	ldrb	r2, [r3, #0]
 80030c4:	4b9a      	ldr	r3, [pc, #616]	@ (8003330 <cls_cmd+0xa68>)
 80030c6:	701a      	strb	r2, [r3, #0]
		peep_alarm_max_value = peep_alarm_max_value;
 80030c8:	4b9a      	ldr	r3, [pc, #616]	@ (8003334 <cls_cmd+0xa6c>)
 80030ca:	781a      	ldrb	r2, [r3, #0]
 80030cc:	4b99      	ldr	r3, [pc, #612]	@ (8003334 <cls_cmd+0xa6c>)
 80030ce:	701a      	strb	r2, [r3, #0]
		peep_alarm_min_value = peep_alarm_min_value;
 80030d0:	4b99      	ldr	r3, [pc, #612]	@ (8003338 <cls_cmd+0xa70>)
 80030d2:	781a      	ldrb	r2, [r3, #0]
 80030d4:	4b98      	ldr	r3, [pc, #608]	@ (8003338 <cls_cmd+0xa70>)
 80030d6:	701a      	strb	r2, [r3, #0]
		O2_alarm_max_value = O2_alarm_max_value;
 80030d8:	4b98      	ldr	r3, [pc, #608]	@ (800333c <cls_cmd+0xa74>)
 80030da:	781a      	ldrb	r2, [r3, #0]
 80030dc:	4b97      	ldr	r3, [pc, #604]	@ (800333c <cls_cmd+0xa74>)
 80030de:	701a      	strb	r2, [r3, #0]
		O2_alarm_min_value = O2_alarm_min_value;
 80030e0:	4b97      	ldr	r3, [pc, #604]	@ (8003340 <cls_cmd+0xa78>)
 80030e2:	781a      	ldrb	r2, [r3, #0]
 80030e4:	4b96      	ldr	r3, [pc, #600]	@ (8003340 <cls_cmd+0xa78>)
 80030e6:	701a      	strb	r2, [r3, #0]



		PID_VALUE_SET_FLAG = 1;
 80030e8:	4b96      	ldr	r3, [pc, #600]	@ (8003344 <cls_cmd+0xa7c>)
 80030ea:	2201      	movs	r2, #1
 80030ec:	701a      	strb	r2, [r3, #0]
		Value_reset_flag = 1;
 80030ee:	4b96      	ldr	r3, [pc, #600]	@ (8003348 <cls_cmd+0xa80>)
 80030f0:	2201      	movs	r2, #1
 80030f2:	701a      	strb	r2, [r3, #0]
		vt_flag = 0;
 80030f4:	4b95      	ldr	r3, [pc, #596]	@ (800334c <cls_cmd+0xa84>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	701a      	strb	r2, [r3, #0]
		plt_flag = 0;
 80030fa:	4b95      	ldr	r3, [pc, #596]	@ (8003350 <cls_cmd+0xa88>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	701a      	strb	r2, [r3, #0]
		rr_flag = 0;
 8003100:	4b94      	ldr	r3, [pc, #592]	@ (8003354 <cls_cmd+0xa8c>)
 8003102:	2200      	movs	r2, #0
 8003104:	701a      	strb	r2, [r3, #0]
		i_flag = 0;
 8003106:	4b94      	ldr	r3, [pc, #592]	@ (8003358 <cls_cmd+0xa90>)
 8003108:	2200      	movs	r2, #0
 800310a:	701a      	strb	r2, [r3, #0]
		e_flag = 0;
 800310c:	4b93      	ldr	r3, [pc, #588]	@ (800335c <cls_cmd+0xa94>)
 800310e:	2200      	movs	r2, #0
 8003110:	701a      	strb	r2, [r3, #0]
		pu_flag = 0;
 8003112:	4b93      	ldr	r3, [pc, #588]	@ (8003360 <cls_cmd+0xa98>)
 8003114:	2200      	movs	r2, #0
 8003116:	701a      	strb	r2, [r3, #0]
		trg_flag = 0;
 8003118:	4b92      	ldr	r3, [pc, #584]	@ (8003364 <cls_cmd+0xa9c>)
 800311a:	2200      	movs	r2, #0
 800311c:	701a      	strb	r2, [r3, #0]
		pip_flag = 0;
 800311e:	4b92      	ldr	r3, [pc, #584]	@ (8003368 <cls_cmd+0xaa0>)
 8003120:	2200      	movs	r2, #0
 8003122:	701a      	strb	r2, [r3, #0]
		peep_flag = 0;
 8003124:	4b91      	ldr	r3, [pc, #580]	@ (800336c <cls_cmd+0xaa4>)
 8003126:	2200      	movs	r2, #0
 8003128:	701a      	strb	r2, [r3, #0]
		PS_flag = 0;
 800312a:	4b91      	ldr	r3, [pc, #580]	@ (8003370 <cls_cmd+0xaa8>)
 800312c:	2200      	movs	r2, #0
 800312e:	701a      	strb	r2, [r3, #0]
		Mute_flag = 0;
 8003130:	4b90      	ldr	r3, [pc, #576]	@ (8003374 <cls_cmd+0xaac>)
 8003132:	2200      	movs	r2, #0
 8003134:	701a      	strb	r2, [r3, #0]
		P_peak_alarm_min_flag = 0;
 8003136:	4b90      	ldr	r3, [pc, #576]	@ (8003378 <cls_cmd+0xab0>)
 8003138:	2200      	movs	r2, #0
 800313a:	701a      	strb	r2, [r3, #0]
		MV_alarm_min_flag     = 0;
 800313c:	4b8f      	ldr	r3, [pc, #572]	@ (800337c <cls_cmd+0xab4>)
 800313e:	2200      	movs	r2, #0
 8003140:	701a      	strb	r2, [r3, #0]
		RR_alarm_min_flag     = 0;
 8003142:	4b8f      	ldr	r3, [pc, #572]	@ (8003380 <cls_cmd+0xab8>)
 8003144:	2200      	movs	r2, #0
 8003146:	701a      	strb	r2, [r3, #0]
		peep_alarm_min_flag   = 0;
 8003148:	4b8e      	ldr	r3, [pc, #568]	@ (8003384 <cls_cmd+0xabc>)
 800314a:	2200      	movs	r2, #0
 800314c:	701a      	strb	r2, [r3, #0]
		O2_alarm_min_flag     = 0;
 800314e:	4b8e      	ldr	r3, [pc, #568]	@ (8003388 <cls_cmd+0xac0>)
 8003150:	2200      	movs	r2, #0
 8003152:	701a      	strb	r2, [r3, #0]
		P_peak_alarm_max_flag = 0;
 8003154:	4b8d      	ldr	r3, [pc, #564]	@ (800338c <cls_cmd+0xac4>)
 8003156:	2200      	movs	r2, #0
 8003158:	701a      	strb	r2, [r3, #0]
		MV_alarm_max_flag     = 0;
 800315a:	4b8d      	ldr	r3, [pc, #564]	@ (8003390 <cls_cmd+0xac8>)
 800315c:	2200      	movs	r2, #0
 800315e:	701a      	strb	r2, [r3, #0]
		RR_alarm_max_flag     = 0;
 8003160:	4b8c      	ldr	r3, [pc, #560]	@ (8003394 <cls_cmd+0xacc>)
 8003162:	2200      	movs	r2, #0
 8003164:	701a      	strb	r2, [r3, #0]
		peep_alarm_max_flag   = 0;
 8003166:	4b8c      	ldr	r3, [pc, #560]	@ (8003398 <cls_cmd+0xad0>)
 8003168:	2200      	movs	r2, #0
 800316a:	701a      	strb	r2, [r3, #0]
		O2_alarm_max_flag     = 0;
 800316c:	4b8b      	ldr	r3, [pc, #556]	@ (800339c <cls_cmd+0xad4>)
 800316e:	2200      	movs	r2, #0
 8003170:	701a      	strb	r2, [r3, #0]

		HAL_UART_Transmit(&huart1,
 8003172:	4b8b      	ldr	r3, [pc, #556]	@ (80033a0 <cls_cmd+0xad8>)
 8003174:	7819      	ldrb	r1, [r3, #0]
				ICON_TOGGLE(0x10, temp_add, ((int) temp_add - 1), 0x01), 8,
 8003176:	4b8a      	ldr	r3, [pc, #552]	@ (80033a0 <cls_cmd+0xad8>)
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	3b01      	subs	r3, #1
 800317c:	b2da      	uxtb	r2, r3
 800317e:	2301      	movs	r3, #1
 8003180:	2010      	movs	r0, #16
 8003182:	f7fe fd8f 	bl	8001ca4 <ICON_TOGGLE>
 8003186:	4601      	mov	r1, r0
		HAL_UART_Transmit(&huart1,
 8003188:	2301      	movs	r3, #1
 800318a:	2208      	movs	r2, #8
 800318c:	4885      	ldr	r0, [pc, #532]	@ (80033a4 <cls_cmd+0xadc>)
 800318e:	f00d fdc1 	bl	8010d14 <HAL_UART_Transmit>
				1);
		HAL_UART_Transmit(&huart1,
 8003192:	4b85      	ldr	r3, [pc, #532]	@ (80033a8 <cls_cmd+0xae0>)
 8003194:	7819      	ldrb	r1, [r3, #0]
				ICON_TOGGLE(0x10, clear_add, ((int) clear_add - 7), 0x01), 8,
 8003196:	4b84      	ldr	r3, [pc, #528]	@ (80033a8 <cls_cmd+0xae0>)
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	3b07      	subs	r3, #7
 800319c:	b2da      	uxtb	r2, r3
 800319e:	2301      	movs	r3, #1
 80031a0:	2010      	movs	r0, #16
 80031a2:	f7fe fd7f 	bl	8001ca4 <ICON_TOGGLE>
 80031a6:	4601      	mov	r1, r0
		HAL_UART_Transmit(&huart1,
 80031a8:	2301      	movs	r3, #1
 80031aa:	2208      	movs	r2, #8
 80031ac:	487d      	ldr	r0, [pc, #500]	@ (80033a4 <cls_cmd+0xadc>)
 80031ae:	f00d fdb1 	bl	8010d14 <HAL_UART_Transmit>
				1);
		HAL_UART_Transmit(&huart1,
 80031b2:	4b7e      	ldr	r3, [pc, #504]	@ (80033ac <cls_cmd+0xae4>)
 80031b4:	7819      	ldrb	r1, [r3, #0]
				ICON_TOGGLE(0x10, clears_add, ((int) clears_add - 13), 0x01), 8,
 80031b6:	4b7d      	ldr	r3, [pc, #500]	@ (80033ac <cls_cmd+0xae4>)
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	3b0d      	subs	r3, #13
 80031bc:	b2da      	uxtb	r2, r3
 80031be:	2301      	movs	r3, #1
 80031c0:	2010      	movs	r0, #16
 80031c2:	f7fe fd6f 	bl	8001ca4 <ICON_TOGGLE>
 80031c6:	4601      	mov	r1, r0
		HAL_UART_Transmit(&huart1,
 80031c8:	2301      	movs	r3, #1
 80031ca:	2208      	movs	r2, #8
 80031cc:	4875      	ldr	r0, [pc, #468]	@ (80033a4 <cls_cmd+0xadc>)
 80031ce:	f00d fda1 	bl	8010d14 <HAL_UART_Transmit>
				1);
		HAL_UART_Transmit(&huart1,
 80031d2:	4b77      	ldr	r3, [pc, #476]	@ (80033b0 <cls_cmd+0xae8>)
 80031d4:	7819      	ldrb	r1, [r3, #0]
				ICON_TOGGLE(0x10, clearss_add, ((int) clearss_add - 28), 0x01), 8,
 80031d6:	4b76      	ldr	r3, [pc, #472]	@ (80033b0 <cls_cmd+0xae8>)
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	3b1c      	subs	r3, #28
 80031dc:	b2da      	uxtb	r2, r3
 80031de:	2301      	movs	r3, #1
 80031e0:	2010      	movs	r0, #16
 80031e2:	f7fe fd5f 	bl	8001ca4 <ICON_TOGGLE>
 80031e6:	4601      	mov	r1, r0
		HAL_UART_Transmit(&huart1,
 80031e8:	2301      	movs	r3, #1
 80031ea:	2208      	movs	r2, #8
 80031ec:	486d      	ldr	r0, [pc, #436]	@ (80033a4 <cls_cmd+0xadc>)
 80031ee:	f00d fd91 	bl	8010d14 <HAL_UART_Transmit>
				1);
		HAL_UART_Transmit(&huart1,
 80031f2:	4b70      	ldr	r3, [pc, #448]	@ (80033b4 <cls_cmd+0xaec>)
 80031f4:	7819      	ldrb	r1, [r3, #0]
				ICON_TOGGLE(0x10, PS_add, ((int) PS_add - 161), 0x01), 8,
 80031f6:	4b6f      	ldr	r3, [pc, #444]	@ (80033b4 <cls_cmd+0xaec>)
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	335f      	adds	r3, #95	@ 0x5f
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	2301      	movs	r3, #1
 8003200:	2010      	movs	r0, #16
 8003202:	f7fe fd4f 	bl	8001ca4 <ICON_TOGGLE>
 8003206:	4601      	mov	r1, r0
		HAL_UART_Transmit(&huart1,
 8003208:	2301      	movs	r3, #1
 800320a:	2208      	movs	r2, #8
 800320c:	4865      	ldr	r0, [pc, #404]	@ (80033a4 <cls_cmd+0xadc>)
 800320e:	f00d fd81 	bl	8010d14 <HAL_UART_Transmit>
				1);
		inc_drc_icon(0X01);
 8003212:	2001      	movs	r0, #1
 8003214:	f7ff faac 	bl	8002770 <inc_drc_icon>

		for (int a = 0; a < 9; a++)
 8003218:	2300      	movs	r3, #0
 800321a:	60fb      	str	r3, [r7, #12]
 800321c:	e007      	b.n	800322e <cls_cmd+0x966>
			DISPLAY_INPUT[a] = 0x00;
 800321e:	4a66      	ldr	r2, [pc, #408]	@ (80033b8 <cls_cmd+0xaf0>)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	4413      	add	r3, r2
 8003224:	2200      	movs	r2, #0
 8003226:	701a      	strb	r2, [r3, #0]
		for (int a = 0; a < 9; a++)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	3301      	adds	r3, #1
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2b08      	cmp	r3, #8
 8003232:	ddf4      	ble.n	800321e <cls_cmd+0x956>
 8003234:	e040      	b.n	80032b8 <cls_cmd+0x9f0>
	}
	else if ((DISPLAY_INPUT[5] == 0xC3)||(DISPLAY_INPUT[5] == 0xF1)){
 8003236:	4b60      	ldr	r3, [pc, #384]	@ (80033b8 <cls_cmd+0xaf0>)
 8003238:	795b      	ldrb	r3, [r3, #5]
 800323a:	2bc3      	cmp	r3, #195	@ 0xc3
 800323c:	d003      	beq.n	8003246 <cls_cmd+0x97e>
 800323e:	4b5e      	ldr	r3, [pc, #376]	@ (80033b8 <cls_cmd+0xaf0>)
 8003240:	795b      	ldrb	r3, [r3, #5]
 8003242:	2bf1      	cmp	r3, #241	@ 0xf1
 8003244:	d101      	bne.n	800324a <cls_cmd+0x982>
		NVIC_SystemReset();
 8003246:	f7fd fee1 	bl	800100c <__NVIC_SystemReset>
	}

	else if (DISPLAY_INPUT[5] == 0xE2){
 800324a:	4b5b      	ldr	r3, [pc, #364]	@ (80033b8 <cls_cmd+0xaf0>)
 800324c:	795b      	ldrb	r3, [r3, #5]
 800324e:	2be2      	cmp	r3, #226	@ 0xe2
 8003250:	d132      	bne.n	80032b8 <cls_cmd+0x9f0>
		PID_VALUE_SET_FLAG = 1;
 8003252:	4b3c      	ldr	r3, [pc, #240]	@ (8003344 <cls_cmd+0xa7c>)
 8003254:	2201      	movs	r2, #1
 8003256:	701a      	strb	r2, [r3, #0]
		//			Value_reset_flag = 1;
		CLT_FLAG = 1;
 8003258:	4b58      	ldr	r3, [pc, #352]	@ (80033bc <cls_cmd+0xaf4>)
 800325a:	2201      	movs	r2, #1
 800325c:	701a      	strb	r2, [r3, #0]
		VCV_FLAG = 0;
 800325e:	4b58      	ldr	r3, [pc, #352]	@ (80033c0 <cls_cmd+0xaf8>)
 8003260:	2200      	movs	r2, #0
 8003262:	701a      	strb	r2, [r3, #0]
		PSV_FLAG = 0;
 8003264:	4b1c      	ldr	r3, [pc, #112]	@ (80032d8 <cls_cmd+0xa10>)
 8003266:	2200      	movs	r2, #0
 8003268:	701a      	strb	r2, [r3, #0]
		STAND_BY = 0;
 800326a:	4b56      	ldr	r3, [pc, #344]	@ (80033c4 <cls_cmd+0xafc>)
 800326c:	2200      	movs	r2, #0
 800326e:	701a      	strb	r2, [r3, #0]
		SIMV_FLAG = 0;
 8003270:	4b55      	ldr	r3, [pc, #340]	@ (80033c8 <cls_cmd+0xb00>)
 8003272:	2200      	movs	r2, #0
 8003274:	701a      	strb	r2, [r3, #0]
		PCV_FLAG = 0;
 8003276:	4b55      	ldr	r3, [pc, #340]	@ (80033cc <cls_cmd+0xb04>)
 8003278:	2200      	movs	r2, #0
 800327a:	701a      	strb	r2, [r3, #0]
		BAG_FLAG = 0;
 800327c:	4b54      	ldr	r3, [pc, #336]	@ (80033d0 <cls_cmd+0xb08>)
 800327e:	2200      	movs	r2, #0
 8003280:	701a      	strb	r2, [r3, #0]
		psv_ppr_set_flag = 1;
 8003282:	4b54      	ldr	r3, [pc, #336]	@ (80033d4 <cls_cmd+0xb0c>)
 8003284:	2201      	movs	r2, #1
 8003286:	701a      	strb	r2, [r3, #0]
		rr_flag = 0;
 8003288:	4b32      	ldr	r3, [pc, #200]	@ (8003354 <cls_cmd+0xa8c>)
 800328a:	2200      	movs	r2, #0
 800328c:	701a      	strb	r2, [r3, #0]
		PS_flag = 1;
 800328e:	4b38      	ldr	r3, [pc, #224]	@ (8003370 <cls_cmd+0xaa8>)
 8003290:	2201      	movs	r2, #1
 8003292:	701a      	strb	r2, [r3, #0]

		PID_FLOW_SET_VALUE(PS_temp_value, 0.1, 0.1, 0.15, 0.5);
 8003294:	4b11      	ldr	r3, [pc, #68]	@ (80032dc <cls_cmd+0xa14>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	4618      	mov	r0, r3
 800329a:	f7fd f92b 	bl	80004f4 <__aeabi_ui2d>
 800329e:	4602      	mov	r2, r0
 80032a0:	460b      	mov	r3, r1
 80032a2:	2000      	movs	r0, #0
 80032a4:	ed9f 3b0a 	vldr	d3, [pc, #40]	@ 80032d0 <cls_cmd+0xa08>
 80032a8:	ed9f 2b07 	vldr	d2, [pc, #28]	@ 80032c8 <cls_cmd+0xa00>
 80032ac:	ed9f 1b06 	vldr	d1, [pc, #24]	@ 80032c8 <cls_cmd+0xa00>
 80032b0:	ec43 2b10 	vmov	d0, r2, r3
 80032b4:	f001 fd94 	bl	8004de0 <PID_FLOW_SET_VALUE>
	}
	for (int a = 0; a < 9; a++)
 80032b8:	2300      	movs	r3, #0
 80032ba:	60bb      	str	r3, [r7, #8]
 80032bc:	e094      	b.n	80033e8 <cls_cmd+0xb20>
 80032be:	bf00      	nop
	...
 80032c8:	9999999a 	.word	0x9999999a
 80032cc:	3fb99999 	.word	0x3fb99999
 80032d0:	33333333 	.word	0x33333333
 80032d4:	3fc33333 	.word	0x3fc33333
 80032d8:	200019aa 	.word	0x200019aa
 80032dc:	20001969 	.word	0x20001969
 80032e0:	20000034 	.word	0x20000034
 80032e4:	20000044 	.word	0x20000044
 80032e8:	20000037 	.word	0x20000037
 80032ec:	2000004c 	.word	0x2000004c
 80032f0:	20000036 	.word	0x20000036
 80032f4:	20000048 	.word	0x20000048
 80032f8:	2000002c 	.word	0x2000002c
 80032fc:	2000003c 	.word	0x2000003c
 8003300:	20000030 	.word	0x20000030
 8003304:	20000040 	.word	0x20000040
 8003308:	2000195d 	.word	0x2000195d
 800330c:	20001967 	.word	0x20001967
 8003310:	20001964 	.word	0x20001964
 8003314:	20001968 	.word	0x20001968
 8003318:	20001965 	.word	0x20001965
 800331c:	20000050 	.word	0x20000050
 8003320:	200019e4 	.word	0x200019e4
 8003324:	20000051 	.word	0x20000051
 8003328:	200019e5 	.word	0x200019e5
 800332c:	20000052 	.word	0x20000052
 8003330:	2000004d 	.word	0x2000004d
 8003334:	20000053 	.word	0x20000053
 8003338:	2000004e 	.word	0x2000004e
 800333c:	20000054 	.word	0x20000054
 8003340:	2000004f 	.word	0x2000004f
 8003344:	20001415 	.word	0x20001415
 8003348:	200019c2 	.word	0x200019c2
 800334c:	200019cb 	.word	0x200019cb
 8003350:	200019cc 	.word	0x200019cc
 8003354:	200019cd 	.word	0x200019cd
 8003358:	200019c9 	.word	0x200019c9
 800335c:	200019ca 	.word	0x200019ca
 8003360:	200019ce 	.word	0x200019ce
 8003364:	200019cf 	.word	0x200019cf
 8003368:	200019d0 	.word	0x200019d0
 800336c:	200019d1 	.word	0x200019d1
 8003370:	200019d2 	.word	0x200019d2
 8003374:	200019d3 	.word	0x200019d3
 8003378:	200019f7 	.word	0x200019f7
 800337c:	200019f8 	.word	0x200019f8
 8003380:	200019f9 	.word	0x200019f9
 8003384:	200019fa 	.word	0x200019fa
 8003388:	200019fb 	.word	0x200019fb
 800338c:	200019fc 	.word	0x200019fc
 8003390:	200019fd 	.word	0x200019fd
 8003394:	200019fe 	.word	0x200019fe
 8003398:	200019ff 	.word	0x200019ff
 800339c:	20001a00 	.word	0x20001a00
 80033a0:	20001951 	.word	0x20001951
 80033a4:	20000fd0 	.word	0x20000fd0
 80033a8:	20001952 	.word	0x20001952
 80033ac:	20001953 	.word	0x20001953
 80033b0:	20001954 	.word	0x20001954
 80033b4:	20001955 	.word	0x20001955
 80033b8:	20001938 	.word	0x20001938
 80033bc:	200019af 	.word	0x200019af
 80033c0:	200019ab 	.word	0x200019ab
 80033c4:	200019a9 	.word	0x200019a9
 80033c8:	200019a8 	.word	0x200019a8
 80033cc:	200019ac 	.word	0x200019ac
 80033d0:	200019ad 	.word	0x200019ad
 80033d4:	200019c7 	.word	0x200019c7
		DISPLAY_INPUT[a] = 0x00;
 80033d8:	4a07      	ldr	r2, [pc, #28]	@ (80033f8 <cls_cmd+0xb30>)
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	4413      	add	r3, r2
 80033de:	2200      	movs	r2, #0
 80033e0:	701a      	strb	r2, [r3, #0]
	for (int a = 0; a < 9; a++)
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	3301      	adds	r3, #1
 80033e6:	60bb      	str	r3, [r7, #8]
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	ddf4      	ble.n	80033d8 <cls_cmd+0xb10>
}
 80033ee:	bf00      	nop
 80033f0:	bf00      	nop
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	20001938 	.word	0x20001938
 80033fc:	00000000 	.word	0x00000000

08003400 <Breath_calclution>:
//	numatic_exp_ctr = Te * 1000;
//	total_time = BPS * 1000;
//
//	insPause_vale = ((float) PU_temp_value / (float) 100) * numatic_insp_ctr;
//}
void Breath_calclution(void) {
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
	Single_breath_time = 60.0 / (float) RR_temp_value;
 8003404:	4b40      	ldr	r3, [pc, #256]	@ (8003508 <Breath_calclution+0x108>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	ee07 3a90 	vmov	s15, r3
 800340c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003410:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 800350c <Breath_calclution+0x10c>
 8003414:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003418:	4b3d      	ldr	r3, [pc, #244]	@ (8003510 <Breath_calclution+0x110>)
 800341a:	edc3 7a00 	vstr	s15, [r3]

	Ti = ((float) temp_insP_value
 800341e:	4b3d      	ldr	r3, [pc, #244]	@ (8003514 <Breath_calclution+0x114>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	ee07 3a90 	vmov	s15, r3
 8003426:	eef8 6ae7 	vcvt.f32.s32	s13, s15
			/ ((float) temp_insP_value + (float) temp_exp_value))
 800342a:	4b3a      	ldr	r3, [pc, #232]	@ (8003514 <Breath_calclution+0x114>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	ee07 3a90 	vmov	s15, r3
 8003432:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003436:	4b38      	ldr	r3, [pc, #224]	@ (8003518 <Breath_calclution+0x118>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	ee07 3a90 	vmov	s15, r3
 800343e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003442:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
														* Single_breath_time;
 800344a:	4b31      	ldr	r3, [pc, #196]	@ (8003510 <Breath_calclution+0x110>)
 800344c:	edd3 7a00 	vldr	s15, [r3]
 8003450:	ee67 7a27 	vmul.f32	s15, s14, s15
	Ti = ((float) temp_insP_value
 8003454:	4b31      	ldr	r3, [pc, #196]	@ (800351c <Breath_calclution+0x11c>)
 8003456:	edc3 7a00 	vstr	s15, [r3]
	Ti += 0.2;
 800345a:	4b30      	ldr	r3, [pc, #192]	@ (800351c <Breath_calclution+0x11c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f7fd f86a 	bl	8000538 <__aeabi_f2d>
 8003464:	a326      	add	r3, pc, #152	@ (adr r3, 8003500 <Breath_calclution+0x100>)
 8003466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800346a:	f7fc ff07 	bl	800027c <__adddf3>
 800346e:	4602      	mov	r2, r0
 8003470:	460b      	mov	r3, r1
 8003472:	4610      	mov	r0, r2
 8003474:	4619      	mov	r1, r3
 8003476:	f7fd fbaf 	bl	8000bd8 <__aeabi_d2f>
 800347a:	4603      	mov	r3, r0
 800347c:	4a27      	ldr	r2, [pc, #156]	@ (800351c <Breath_calclution+0x11c>)
 800347e:	6013      	str	r3, [r2, #0]

	Te = Single_breath_time - Ti;
 8003480:	4b23      	ldr	r3, [pc, #140]	@ (8003510 <Breath_calclution+0x110>)
 8003482:	ed93 7a00 	vldr	s14, [r3]
 8003486:	4b25      	ldr	r3, [pc, #148]	@ (800351c <Breath_calclution+0x11c>)
 8003488:	edd3 7a00 	vldr	s15, [r3]
 800348c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003490:	4b23      	ldr	r3, [pc, #140]	@ (8003520 <Breath_calclution+0x120>)
 8003492:	edc3 7a00 	vstr	s15, [r3]

	numatic_insp_ctr = Ti * 1000;
 8003496:	4b21      	ldr	r3, [pc, #132]	@ (800351c <Breath_calclution+0x11c>)
 8003498:	edd3 7a00 	vldr	s15, [r3]
 800349c:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8003524 <Breath_calclution+0x124>
 80034a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034a8:	ee17 2a90 	vmov	r2, s15
 80034ac:	4b1e      	ldr	r3, [pc, #120]	@ (8003528 <Breath_calclution+0x128>)
 80034ae:	601a      	str	r2, [r3, #0]
	numatic_exp_ctr = Te * 1000;
 80034b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003520 <Breath_calclution+0x120>)
 80034b2:	edd3 7a00 	vldr	s15, [r3]
 80034b6:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8003524 <Breath_calclution+0x124>
 80034ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034c2:	ee17 2a90 	vmov	r2, s15
 80034c6:	4b19      	ldr	r3, [pc, #100]	@ (800352c <Breath_calclution+0x12c>)
 80034c8:	601a      	str	r2, [r3, #0]

	insPause_vale = ((float) PU_temp_value / (float) 100) * numatic_insp_ctr;
 80034ca:	4b19      	ldr	r3, [pc, #100]	@ (8003530 <Breath_calclution+0x130>)
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	ee07 3a90 	vmov	s15, r3
 80034d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034d6:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8003534 <Breath_calclution+0x134>
 80034da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80034de:	4b12      	ldr	r3, [pc, #72]	@ (8003528 <Breath_calclution+0x128>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	ee07 3a90 	vmov	s15, r3
 80034e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034f2:	ee17 2a90 	vmov	r2, s15
 80034f6:	4b10      	ldr	r3, [pc, #64]	@ (8003538 <Breath_calclution+0x138>)
 80034f8:	601a      	str	r2, [r3, #0]
}
 80034fa:	bf00      	nop
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	9999999a 	.word	0x9999999a
 8003504:	3fc99999 	.word	0x3fc99999
 8003508:	2000004c 	.word	0x2000004c
 800350c:	42700000 	.word	0x42700000
 8003510:	200013a4 	.word	0x200013a4
 8003514:	2000003c 	.word	0x2000003c
 8003518:	20000040 	.word	0x20000040
 800351c:	200013a8 	.word	0x200013a8
 8003520:	200013ac 	.word	0x200013ac
 8003524:	447a0000 	.word	0x447a0000
 8003528:	20001930 	.word	0x20001930
 800352c:	20001934 	.word	0x20001934
 8003530:	20001967 	.word	0x20001967
 8003534:	42c80000 	.word	0x42c80000
 8003538:	20000160 	.word	0x20000160

0800353c <Breath_calclution_Neo>:
void Breath_calclution_Neo(void) {
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0
	static int roger=0,once=0;
	static int first_RR=0;
	if(roger >= 150){
 8003540:	4b5b      	ldr	r3, [pc, #364]	@ (80036b0 <Breath_calclution_Neo+0x174>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2b95      	cmp	r3, #149	@ 0x95
 8003546:	dd03      	ble.n	8003550 <Breath_calclution_Neo+0x14>
		roger=500;
 8003548:	4b59      	ldr	r3, [pc, #356]	@ (80036b0 <Breath_calclution_Neo+0x174>)
 800354a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800354e:	601a      	str	r2, [r3, #0]
	}
	if((roger++ <= 150)&&(Compliance_Neonate_Flag == 1) && (vt_temp_value <= 150)&&(VCV_FLAG == 1)){
 8003550:	4b57      	ldr	r3, [pc, #348]	@ (80036b0 <Breath_calclution_Neo+0x174>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	1c5a      	adds	r2, r3, #1
 8003556:	4956      	ldr	r1, [pc, #344]	@ (80036b0 <Breath_calclution_Neo+0x174>)
 8003558:	600a      	str	r2, [r1, #0]
 800355a:	2b96      	cmp	r3, #150	@ 0x96
 800355c:	dc37      	bgt.n	80035ce <Breath_calclution_Neo+0x92>
 800355e:	4b55      	ldr	r3, [pc, #340]	@ (80036b4 <Breath_calclution_Neo+0x178>)
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d033      	beq.n	80035ce <Breath_calclution_Neo+0x92>
 8003566:	4b54      	ldr	r3, [pc, #336]	@ (80036b8 <Breath_calclution_Neo+0x17c>)
 8003568:	881b      	ldrh	r3, [r3, #0]
 800356a:	2b96      	cmp	r3, #150	@ 0x96
 800356c:	d82f      	bhi.n	80035ce <Breath_calclution_Neo+0x92>
 800356e:	4b53      	ldr	r3, [pc, #332]	@ (80036bc <Breath_calclution_Neo+0x180>)
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b00      	cmp	r3, #0
 8003576:	d02a      	beq.n	80035ce <Breath_calclution_Neo+0x92>

		if(once == 0){
 8003578:	4b51      	ldr	r3, [pc, #324]	@ (80036c0 <Breath_calclution_Neo+0x184>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d105      	bne.n	800358c <Breath_calclution_Neo+0x50>
			RR_temp_value =29;
 8003580:	4b50      	ldr	r3, [pc, #320]	@ (80036c4 <Breath_calclution_Neo+0x188>)
 8003582:	221d      	movs	r2, #29
 8003584:	701a      	strb	r2, [r3, #0]
			once =1;
 8003586:	4b4e      	ldr	r3, [pc, #312]	@ (80036c0 <Breath_calclution_Neo+0x184>)
 8003588:	2201      	movs	r2, #1
 800358a:	601a      	str	r2, [r3, #0]
		}

		if(RR_value < 29){
 800358c:	4b4e      	ldr	r3, [pc, #312]	@ (80036c8 <Breath_calclution_Neo+0x18c>)
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	2b1c      	cmp	r3, #28
 8003592:	d815      	bhi.n	80035c0 <Breath_calclution_Neo+0x84>
			if(first_RR++ >= 15){
 8003594:	4b4d      	ldr	r3, [pc, #308]	@ (80036cc <Breath_calclution_Neo+0x190>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	494c      	ldr	r1, [pc, #304]	@ (80036cc <Breath_calclution_Neo+0x190>)
 800359c:	600a      	str	r2, [r1, #0]
 800359e:	2b0e      	cmp	r3, #14
 80035a0:	dd0e      	ble.n	80035c0 <Breath_calclution_Neo+0x84>
				if(RR_value < RR_temp_value){
 80035a2:	4b49      	ldr	r3, [pc, #292]	@ (80036c8 <Breath_calclution_Neo+0x18c>)
 80035a4:	781a      	ldrb	r2, [r3, #0]
 80035a6:	4b47      	ldr	r3, [pc, #284]	@ (80036c4 <Breath_calclution_Neo+0x188>)
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d208      	bcs.n	80035c0 <Breath_calclution_Neo+0x84>
					RR_temp_value -=1;
 80035ae:	4b45      	ldr	r3, [pc, #276]	@ (80036c4 <Breath_calclution_Neo+0x188>)
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	3b01      	subs	r3, #1
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	4b43      	ldr	r3, [pc, #268]	@ (80036c4 <Breath_calclution_Neo+0x188>)
 80035b8:	701a      	strb	r2, [r3, #0]
					first_RR=0;
 80035ba:	4b44      	ldr	r3, [pc, #272]	@ (80036cc <Breath_calclution_Neo+0x190>)
 80035bc:	2200      	movs	r2, #0
 80035be:	601a      	str	r2, [r3, #0]
				}
			}
		}

		temp_insP_value = 0x01;
 80035c0:	4b43      	ldr	r3, [pc, #268]	@ (80036d0 <Breath_calclution_Neo+0x194>)
 80035c2:	2201      	movs	r2, #1
 80035c4:	601a      	str	r2, [r3, #0]
		temp_exp_value = 0x02;
 80035c6:	4b43      	ldr	r3, [pc, #268]	@ (80036d4 <Breath_calclution_Neo+0x198>)
 80035c8:	2202      	movs	r2, #2
 80035ca:	601a      	str	r2, [r3, #0]
 80035cc:	e003      	b.n	80035d6 <Breath_calclution_Neo+0x9a>
	}
	else{
		RR_temp_value = RR_value;
 80035ce:	4b3e      	ldr	r3, [pc, #248]	@ (80036c8 <Breath_calclution_Neo+0x18c>)
 80035d0:	781a      	ldrb	r2, [r3, #0]
 80035d2:	4b3c      	ldr	r3, [pc, #240]	@ (80036c4 <Breath_calclution_Neo+0x188>)
 80035d4:	701a      	strb	r2, [r3, #0]
	}
	Single_breath_time = 60.0 / (float) RR_temp_value;
 80035d6:	4b3b      	ldr	r3, [pc, #236]	@ (80036c4 <Breath_calclution_Neo+0x188>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	ee07 3a90 	vmov	s15, r3
 80035de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80035e2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80036d8 <Breath_calclution_Neo+0x19c>
 80035e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035ea:	4b3c      	ldr	r3, [pc, #240]	@ (80036dc <Breath_calclution_Neo+0x1a0>)
 80035ec:	edc3 7a00 	vstr	s15, [r3]

	Ti = ((float) temp_insP_value
 80035f0:	4b37      	ldr	r3, [pc, #220]	@ (80036d0 <Breath_calclution_Neo+0x194>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	ee07 3a90 	vmov	s15, r3
 80035f8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
			/ ((float) temp_insP_value + (float) temp_exp_value))
 80035fc:	4b34      	ldr	r3, [pc, #208]	@ (80036d0 <Breath_calclution_Neo+0x194>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	ee07 3a90 	vmov	s15, r3
 8003604:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003608:	4b32      	ldr	r3, [pc, #200]	@ (80036d4 <Breath_calclution_Neo+0x198>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	ee07 3a90 	vmov	s15, r3
 8003610:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003614:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003618:	ee86 7aa7 	vdiv.f32	s14, s13, s15
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																													* Single_breath_time;
 800361c:	4b2f      	ldr	r3, [pc, #188]	@ (80036dc <Breath_calclution_Neo+0x1a0>)
 800361e:	edd3 7a00 	vldr	s15, [r3]
 8003622:	ee67 7a27 	vmul.f32	s15, s14, s15
	Ti = ((float) temp_insP_value
 8003626:	4b2e      	ldr	r3, [pc, #184]	@ (80036e0 <Breath_calclution_Neo+0x1a4>)
 8003628:	edc3 7a00 	vstr	s15, [r3]
	Te = Single_breath_time - Ti;
 800362c:	4b2b      	ldr	r3, [pc, #172]	@ (80036dc <Breath_calclution_Neo+0x1a0>)
 800362e:	ed93 7a00 	vldr	s14, [r3]
 8003632:	4b2b      	ldr	r3, [pc, #172]	@ (80036e0 <Breath_calclution_Neo+0x1a4>)
 8003634:	edd3 7a00 	vldr	s15, [r3]
 8003638:	ee77 7a67 	vsub.f32	s15, s14, s15
 800363c:	4b29      	ldr	r3, [pc, #164]	@ (80036e4 <Breath_calclution_Neo+0x1a8>)
 800363e:	edc3 7a00 	vstr	s15, [r3]

	numatic_insp_ctr = Ti * 1000;
 8003642:	4b27      	ldr	r3, [pc, #156]	@ (80036e0 <Breath_calclution_Neo+0x1a4>)
 8003644:	edd3 7a00 	vldr	s15, [r3]
 8003648:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80036e8 <Breath_calclution_Neo+0x1ac>
 800364c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003650:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003654:	ee17 2a90 	vmov	r2, s15
 8003658:	4b24      	ldr	r3, [pc, #144]	@ (80036ec <Breath_calclution_Neo+0x1b0>)
 800365a:	601a      	str	r2, [r3, #0]
	numatic_exp_ctr = Te * 1000;
 800365c:	4b21      	ldr	r3, [pc, #132]	@ (80036e4 <Breath_calclution_Neo+0x1a8>)
 800365e:	edd3 7a00 	vldr	s15, [r3]
 8003662:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80036e8 <Breath_calclution_Neo+0x1ac>
 8003666:	ee67 7a87 	vmul.f32	s15, s15, s14
 800366a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800366e:	ee17 2a90 	vmov	r2, s15
 8003672:	4b1f      	ldr	r3, [pc, #124]	@ (80036f0 <Breath_calclution_Neo+0x1b4>)
 8003674:	601a      	str	r2, [r3, #0]

	insPause_vale = ((float) PU_temp_value / (float) 100) * numatic_insp_ctr;
 8003676:	4b1f      	ldr	r3, [pc, #124]	@ (80036f4 <Breath_calclution_Neo+0x1b8>)
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	ee07 3a90 	vmov	s15, r3
 800367e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003682:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 80036f8 <Breath_calclution_Neo+0x1bc>
 8003686:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800368a:	4b18      	ldr	r3, [pc, #96]	@ (80036ec <Breath_calclution_Neo+0x1b0>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	ee07 3a90 	vmov	s15, r3
 8003692:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800369a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800369e:	ee17 2a90 	vmov	r2, s15
 80036a2:	4b16      	ldr	r3, [pc, #88]	@ (80036fc <Breath_calclution_Neo+0x1c0>)
 80036a4:	601a      	str	r2, [r3, #0]
}
 80036a6:	bf00      	nop
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr
 80036b0:	20001b48 	.word	0x20001b48
 80036b4:	20001b38 	.word	0x20001b38
 80036b8:	20000044 	.word	0x20000044
 80036bc:	200019ab 	.word	0x200019ab
 80036c0:	20001b4c 	.word	0x20001b4c
 80036c4:	2000004c 	.word	0x2000004c
 80036c8:	20000037 	.word	0x20000037
 80036cc:	20001b50 	.word	0x20001b50
 80036d0:	2000003c 	.word	0x2000003c
 80036d4:	20000040 	.word	0x20000040
 80036d8:	42700000 	.word	0x42700000
 80036dc:	200013a4 	.word	0x200013a4
 80036e0:	200013a8 	.word	0x200013a8
 80036e4:	200013ac 	.word	0x200013ac
 80036e8:	447a0000 	.word	0x447a0000
 80036ec:	20001930 	.word	0x20001930
 80036f0:	20001934 	.word	0x20001934
 80036f4:	20001967 	.word	0x20001967
 80036f8:	42c80000 	.word	0x42c80000
 80036fc:	20000160 	.word	0x20000160

08003700 <Pre_set_value_show>:
void Pre_set_value_show(void) {
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
	intiger_val_vt_send(1, vt_value);
 8003704:	4b3f      	ldr	r3, [pc, #252]	@ (8003804 <Pre_set_value_show+0x104>)
 8003706:	881b      	ldrh	r3, [r3, #0]
 8003708:	4619      	mov	r1, r3
 800370a:	2001      	movs	r0, #1
 800370c:	f7ff f886 	bl	800281c <intiger_val_vt_send>
	intiger_val_send(2, PLR_value);
 8003710:	4b3d      	ldr	r3, [pc, #244]	@ (8003808 <Pre_set_value_show+0x108>)
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	4619      	mov	r1, r3
 8003716:	2002      	movs	r0, #2
 8003718:	f7ff f85c 	bl	80027d4 <intiger_val_send>
	intiger_val_send(3, RR_value);
 800371c:	4b3b      	ldr	r3, [pc, #236]	@ (800380c <Pre_set_value_show+0x10c>)
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	4619      	mov	r1, r3
 8003722:	2003      	movs	r0, #3
 8003724:	f7ff f856 	bl	80027d4 <intiger_val_send>
	intiger_val_send(5, PU_value);
 8003728:	4b39      	ldr	r3, [pc, #228]	@ (8003810 <Pre_set_value_show+0x110>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	4619      	mov	r1, r3
 800372e:	2005      	movs	r0, #5
 8003730:	f7ff f850 	bl	80027d4 <intiger_val_send>
	intiger_val_send(6, TRG_value);
 8003734:	4b37      	ldr	r3, [pc, #220]	@ (8003814 <Pre_set_value_show+0x114>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	b2db      	uxtb	r3, r3
 800373a:	4619      	mov	r1, r3
 800373c:	2006      	movs	r0, #6
 800373e:	f7ff f849 	bl	80027d4 <intiger_val_send>
	PIP_VAL(7, PIP_value);
 8003742:	4b35      	ldr	r3, [pc, #212]	@ (8003818 <Pre_set_value_show+0x118>)
 8003744:	f993 3000 	ldrsb.w	r3, [r3]
 8003748:	b2db      	uxtb	r3, r3
 800374a:	4619      	mov	r1, r3
 800374c:	2007      	movs	r0, #7
 800374e:	f7ff f895 	bl	800287c <PIP_VAL>
	//	intiger_val_send(7, PIP_value);
	intiger_val_send(8, PEEP_value);
 8003752:	4b32      	ldr	r3, [pc, #200]	@ (800381c <Pre_set_value_show+0x11c>)
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	4619      	mov	r1, r3
 8003758:	2008      	movs	r0, #8
 800375a:	f7ff f83b 	bl	80027d4 <intiger_val_send>
	intiger_val_send(9, PS_value);
 800375e:	4b30      	ldr	r3, [pc, #192]	@ (8003820 <Pre_set_value_show+0x120>)
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	4619      	mov	r1, r3
 8003764:	2009      	movs	r0, #9
 8003766:	f7ff f835 	bl	80027d4 <intiger_val_send>
	//	intiger_val_send(0x43, Play_value);
	//	intiger_val_send(0x24, insP_value);
	//	intiger_val_send(0x25, exp_value);
	intiger_val_send(0x14,P_peak_alarm_max_value);
 800376a:	4b2e      	ldr	r3, [pc, #184]	@ (8003824 <Pre_set_value_show+0x124>)
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	4619      	mov	r1, r3
 8003770:	2014      	movs	r0, #20
 8003772:	f7ff f82f 	bl	80027d4 <intiger_val_send>
	intiger_val_send(0x15,P_peak_alarm_min_value);
 8003776:	4b2c      	ldr	r3, [pc, #176]	@ (8003828 <Pre_set_value_show+0x128>)
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	4619      	mov	r1, r3
 800377c:	2015      	movs	r0, #21
 800377e:	f7ff f829 	bl	80027d4 <intiger_val_send>
	intiger_val_send(0x16,MV_alarm_max_value);
 8003782:	4b2a      	ldr	r3, [pc, #168]	@ (800382c <Pre_set_value_show+0x12c>)
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	4619      	mov	r1, r3
 8003788:	2016      	movs	r0, #22
 800378a:	f7ff f823 	bl	80027d4 <intiger_val_send>
	intiger_val_send(0x17,MV_alarm_min_value);
 800378e:	4b28      	ldr	r3, [pc, #160]	@ (8003830 <Pre_set_value_show+0x130>)
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	4619      	mov	r1, r3
 8003794:	2017      	movs	r0, #23
 8003796:	f7ff f81d 	bl	80027d4 <intiger_val_send>
	intiger_val_send(0x18,RR_alarm_max_value);
 800379a:	4b26      	ldr	r3, [pc, #152]	@ (8003834 <Pre_set_value_show+0x134>)
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	4619      	mov	r1, r3
 80037a0:	2018      	movs	r0, #24
 80037a2:	f7ff f817 	bl	80027d4 <intiger_val_send>
	intiger_val_send(0x19,RR_alarm_min_value);
 80037a6:	4b24      	ldr	r3, [pc, #144]	@ (8003838 <Pre_set_value_show+0x138>)
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	4619      	mov	r1, r3
 80037ac:	2019      	movs	r0, #25
 80037ae:	f7ff f811 	bl	80027d4 <intiger_val_send>
	intiger_val_send(0x1A,peep_alarm_max_value);
 80037b2:	4b22      	ldr	r3, [pc, #136]	@ (800383c <Pre_set_value_show+0x13c>)
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	4619      	mov	r1, r3
 80037b8:	201a      	movs	r0, #26
 80037ba:	f7ff f80b 	bl	80027d4 <intiger_val_send>
	intiger_val_send(0x21,peep_alarm_min_value);
 80037be:	4b20      	ldr	r3, [pc, #128]	@ (8003840 <Pre_set_value_show+0x140>)
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	4619      	mov	r1, r3
 80037c4:	2021      	movs	r0, #33	@ 0x21
 80037c6:	f7ff f805 	bl	80027d4 <intiger_val_send>
	intiger_val_send(0x22,O2_alarm_max_value);
 80037ca:	4b1e      	ldr	r3, [pc, #120]	@ (8003844 <Pre_set_value_show+0x144>)
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	4619      	mov	r1, r3
 80037d0:	2022      	movs	r0, #34	@ 0x22
 80037d2:	f7fe ffff 	bl	80027d4 <intiger_val_send>
	intiger_val_send(0x23,O2_alarm_min_value);
 80037d6:	4b1c      	ldr	r3, [pc, #112]	@ (8003848 <Pre_set_value_show+0x148>)
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	4619      	mov	r1, r3
 80037dc:	2023      	movs	r0, #35	@ 0x23
 80037de:	f7fe fff9 	bl	80027d4 <intiger_val_send>
	intiger_val_send(0x24, insP_value);
 80037e2:	4b1a      	ldr	r3, [pc, #104]	@ (800384c <Pre_set_value_show+0x14c>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	4619      	mov	r1, r3
 80037ea:	2024      	movs	r0, #36	@ 0x24
 80037ec:	f7fe fff2 	bl	80027d4 <intiger_val_send>
	intiger_val_send(0x25, exp_value);
 80037f0:	4b17      	ldr	r3, [pc, #92]	@ (8003850 <Pre_set_value_show+0x150>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	4619      	mov	r1, r3
 80037f8:	2025      	movs	r0, #37	@ 0x25
 80037fa:	f7fe ffeb 	bl	80027d4 <intiger_val_send>
}
 80037fe:	bf00      	nop
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	20000034 	.word	0x20000034
 8003808:	20000036 	.word	0x20000036
 800380c:	20000037 	.word	0x20000037
 8003810:	2000195d 	.word	0x2000195d
 8003814:	20001960 	.word	0x20001960
 8003818:	20000038 	.word	0x20000038
 800381c:	20001964 	.word	0x20001964
 8003820:	20001965 	.word	0x20001965
 8003824:	20000050 	.word	0x20000050
 8003828:	200019e4 	.word	0x200019e4
 800382c:	20000051 	.word	0x20000051
 8003830:	200019e5 	.word	0x200019e5
 8003834:	20000052 	.word	0x20000052
 8003838:	2000004d 	.word	0x2000004d
 800383c:	20000053 	.word	0x20000053
 8003840:	2000004e 	.word	0x2000004e
 8003844:	20000054 	.word	0x20000054
 8003848:	2000004f 	.word	0x2000004f
 800384c:	2000002c 	.word	0x2000002c
 8003850:	20000030 	.word	0x20000030

08003854 <modes_icon_change>:
//..............icon change..........
void modes_icon_change(m_icon_add) {
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
	uint8_t mode_icon_data[8] =
 800385c:	4a0a      	ldr	r2, [pc, #40]	@ (8003888 <modes_icon_change+0x34>)
 800385e:	f107 0308 	add.w	r3, r7, #8
 8003862:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003866:	e883 0003 	stmia.w	r3, {r0, r1}
	{ 0x5a, 0xa5, 0x05, 0x82, 0x10, 0x23, 0x00, 0x00 };
	mode_icon_data[7] = m_icon_add;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	b2db      	uxtb	r3, r3
 800386e:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, mode_icon_data, 8, 1);
 8003870:	f107 0108 	add.w	r1, r7, #8
 8003874:	2301      	movs	r3, #1
 8003876:	2208      	movs	r2, #8
 8003878:	4804      	ldr	r0, [pc, #16]	@ (800388c <modes_icon_change+0x38>)
 800387a:	f00d fa4b 	bl	8010d14 <HAL_UART_Transmit>
}
 800387e:	bf00      	nop
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	08016130 	.word	0x08016130
 800388c:	20000fd0 	.word	0x20000fd0

08003890 <battery_icon_change>:

void battery_icon_change(uint8_t battery_icon_add) {
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	4603      	mov	r3, r0
 8003898:	71fb      	strb	r3, [r7, #7]
	uint8_t battery_icon_data[8] = {0x5A, 0XA5, 0X05, 0X82, 0X10, 0XD5, 0X00, 0X00};
 800389a:	4a0a      	ldr	r2, [pc, #40]	@ (80038c4 <battery_icon_change+0x34>)
 800389c:	f107 0308 	add.w	r3, r7, #8
 80038a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80038a4:	e883 0003 	stmia.w	r3, {r0, r1}
	battery_icon_data[7] = battery_icon_add;
 80038a8:	79fb      	ldrb	r3, [r7, #7]
 80038aa:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, battery_icon_data, 8, 1);
 80038ac:	f107 0108 	add.w	r1, r7, #8
 80038b0:	2301      	movs	r3, #1
 80038b2:	2208      	movs	r2, #8
 80038b4:	4804      	ldr	r0, [pc, #16]	@ (80038c8 <battery_icon_change+0x38>)
 80038b6:	f00d fa2d 	bl	8010d14 <HAL_UART_Transmit>
}
 80038ba:	bf00      	nop
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	08016138 	.word	0x08016138
 80038c8:	20000fd0 	.word	0x20000fd0

080038cc <muteUnmute_icon_change>:
void muteUnmute_icon_change(uint8_t mute_icon_add) {
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	4603      	mov	r3, r0
 80038d4:	71fb      	strb	r3, [r7, #7]
	uint8_t battery_icon_data[8] = {0x5A, 0XA5, 0X05, 0X82, 0X10, 0X37, 0X00, 0X00};
 80038d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003900 <muteUnmute_icon_change+0x34>)
 80038d8:	f107 0308 	add.w	r3, r7, #8
 80038dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80038e0:	e883 0003 	stmia.w	r3, {r0, r1}
	battery_icon_data[7] = mute_icon_add;
 80038e4:	79fb      	ldrb	r3, [r7, #7]
 80038e6:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, battery_icon_data, 8, 1);
 80038e8:	f107 0108 	add.w	r1, r7, #8
 80038ec:	2301      	movs	r3, #1
 80038ee:	2208      	movs	r2, #8
 80038f0:	4804      	ldr	r0, [pc, #16]	@ (8003904 <muteUnmute_icon_change+0x38>)
 80038f2:	f00d fa0f 	bl	8010d14 <HAL_UART_Transmit>
}
 80038f6:	bf00      	nop
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	08016140 	.word	0x08016140
 8003904:	20000fd0 	.word	0x20000fd0

08003908 <alarm_icon_change>:
void alarm_icon_change(uint8_t alarm_icon_add) {
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	4603      	mov	r3, r0
 8003910:	71fb      	strb	r3, [r7, #7]
	uint8_t battery_icon_data[8] = {0x5A, 0XA5, 0X05, 0X82, 0X10, 0X5B, 0X00, 0X00};
 8003912:	4a0a      	ldr	r2, [pc, #40]	@ (800393c <alarm_icon_change+0x34>)
 8003914:	f107 0308 	add.w	r3, r7, #8
 8003918:	e892 0003 	ldmia.w	r2, {r0, r1}
 800391c:	e883 0003 	stmia.w	r3, {r0, r1}
	battery_icon_data[7] = alarm_icon_add;
 8003920:	79fb      	ldrb	r3, [r7, #7]
 8003922:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, battery_icon_data, 8, 1);
 8003924:	f107 0108 	add.w	r1, r7, #8
 8003928:	2301      	movs	r3, #1
 800392a:	2208      	movs	r2, #8
 800392c:	4804      	ldr	r0, [pc, #16]	@ (8003940 <alarm_icon_change+0x38>)
 800392e:	f00d f9f1 	bl	8010d14 <HAL_UART_Transmit>
}
 8003932:	bf00      	nop
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	08016148 	.word	0x08016148
 8003940:	20000fd0 	.word	0x20000fd0

08003944 <leak_icon_change>:
void leak_icon_change(uint8_t leak_icon_add) {
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	4603      	mov	r3, r0
 800394c:	71fb      	strb	r3, [r7, #7]
	uint8_t leak_icon_data[8] = {0x5A, 0XA5, 0X05, 0X82, 0X10, 0XCE, 0X00, 0X00};
 800394e:	4a0a      	ldr	r2, [pc, #40]	@ (8003978 <leak_icon_change+0x34>)
 8003950:	f107 0308 	add.w	r3, r7, #8
 8003954:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003958:	e883 0003 	stmia.w	r3, {r0, r1}
	leak_icon_data[7] = leak_icon_add;
 800395c:	79fb      	ldrb	r3, [r7, #7]
 800395e:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, leak_icon_data, 8, 1);
 8003960:	f107 0108 	add.w	r1, r7, #8
 8003964:	2301      	movs	r3, #1
 8003966:	2208      	movs	r2, #8
 8003968:	4804      	ldr	r0, [pc, #16]	@ (800397c <leak_icon_change+0x38>)
 800396a:	f00d f9d3 	bl	8010d14 <HAL_UART_Transmit>
}
 800396e:	bf00      	nop
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	08016150 	.word	0x08016150
 800397c:	20000fd0 	.word	0x20000fd0

08003980 <O2_Sensor>:
void O2_Sensor(uint8_t O2_icon_add) {
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	4603      	mov	r3, r0
 8003988:	71fb      	strb	r3, [r7, #7]
	uint8_t O2_data[8] = {0x5A, 0XA5, 0X05, 0X82, 0X10, 0X68, 0X00, 0X00};
 800398a:	4a0a      	ldr	r2, [pc, #40]	@ (80039b4 <O2_Sensor+0x34>)
 800398c:	f107 0308 	add.w	r3, r7, #8
 8003990:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003994:	e883 0003 	stmia.w	r3, {r0, r1}
	O2_data[7] = O2_icon_add;
 8003998:	79fb      	ldrb	r3, [r7, #7]
 800399a:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, O2_data, 8, 1);
 800399c:	f107 0108 	add.w	r1, r7, #8
 80039a0:	2301      	movs	r3, #1
 80039a2:	2208      	movs	r2, #8
 80039a4:	4804      	ldr	r0, [pc, #16]	@ (80039b8 <O2_Sensor+0x38>)
 80039a6:	f00d f9b5 	bl	8010d14 <HAL_UART_Transmit>
}
 80039aa:	bf00      	nop
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	08016158 	.word	0x08016158
 80039b8:	20000fd0 	.word	0x20000fd0

080039bc <AC_Plug>:

void AC_Plug(uint8_t AC_icon_add) {
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	4603      	mov	r3, r0
 80039c4:	71fb      	strb	r3, [r7, #7]
	uint8_t AC_data[8] = {0x5A, 0XA5, 0X05, 0X82, 0X12, 0X00, 0X00, 0X00};
 80039c6:	4a0a      	ldr	r2, [pc, #40]	@ (80039f0 <AC_Plug+0x34>)
 80039c8:	f107 0308 	add.w	r3, r7, #8
 80039cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80039d0:	e883 0003 	stmia.w	r3, {r0, r1}
	AC_data[7] = AC_icon_add;
 80039d4:	79fb      	ldrb	r3, [r7, #7]
 80039d6:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, AC_data, 8, 1);
 80039d8:	f107 0108 	add.w	r1, r7, #8
 80039dc:	2301      	movs	r3, #1
 80039de:	2208      	movs	r2, #8
 80039e0:	4804      	ldr	r0, [pc, #16]	@ (80039f4 <AC_Plug+0x38>)
 80039e2:	f00d f997 	bl	8010d14 <HAL_UART_Transmit>
}
 80039e6:	bf00      	nop
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	08016160 	.word	0x08016160
 80039f4:	20000fd0 	.word	0x20000fd0

080039f8 <update_mbar_history>:
	final_P_data = (int) P_mbar_data;
	return final_P_data;
}


void update_mbar_history(float new_mbar) {
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	ed87 0a01 	vstr	s0, [r7, #4]
	mbar_history[index1] = new_mbar;
 8003a02:	4b1e      	ldr	r3, [pc, #120]	@ (8003a7c <update_mbar_history+0x84>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a1e      	ldr	r2, [pc, #120]	@ (8003a80 <update_mbar_history+0x88>)
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	4413      	add	r3, r2
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	601a      	str	r2, [r3, #0]
	index1 = (index1 + 1) % SMOOTHING_WINDOW;  // Keep index within bounds
 8003a10:	4b1a      	ldr	r3, [pc, #104]	@ (8003a7c <update_mbar_history+0x84>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	1c59      	adds	r1, r3, #1
 8003a16:	4b1b      	ldr	r3, [pc, #108]	@ (8003a84 <update_mbar_history+0x8c>)
 8003a18:	fb83 2301 	smull	r2, r3, r3, r1
 8003a1c:	105a      	asrs	r2, r3, #1
 8003a1e:	17cb      	asrs	r3, r1, #31
 8003a20:	1ad2      	subs	r2, r2, r3
 8003a22:	4613      	mov	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	4413      	add	r3, r2
 8003a28:	1aca      	subs	r2, r1, r3
 8003a2a:	4b14      	ldr	r3, [pc, #80]	@ (8003a7c <update_mbar_history+0x84>)
 8003a2c:	601a      	str	r2, [r3, #0]

	// Calculate moving average
	float sum = 0;
 8003a2e:	f04f 0300 	mov.w	r3, #0
 8003a32:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < SMOOTHING_WINDOW; i++) {
 8003a34:	2300      	movs	r3, #0
 8003a36:	60bb      	str	r3, [r7, #8]
 8003a38:	e00e      	b.n	8003a58 <update_mbar_history+0x60>
		sum += mbar_history[i];
 8003a3a:	4a11      	ldr	r2, [pc, #68]	@ (8003a80 <update_mbar_history+0x88>)
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	edd3 7a00 	vldr	s15, [r3]
 8003a46:	ed97 7a03 	vldr	s14, [r7, #12]
 8003a4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a4e:	edc7 7a03 	vstr	s15, [r7, #12]
	for (int i = 0; i < SMOOTHING_WINDOW; i++) {
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	3301      	adds	r3, #1
 8003a56:	60bb      	str	r3, [r7, #8]
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	dded      	ble.n	8003a3a <update_mbar_history+0x42>
	}
	mbar2_smooth = sum / SMOOTHING_WINDOW;
 8003a5e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003a62:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8003a66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a6a:	4b07      	ldr	r3, [pc, #28]	@ (8003a88 <update_mbar_history+0x90>)
 8003a6c:	edc3 7a00 	vstr	s15, [r3]
}
 8003a70:	bf00      	nop
 8003a72:	3714      	adds	r7, #20
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr
 8003a7c:	2000138c 	.word	0x2000138c
 8003a80:	20001378 	.word	0x20001378
 8003a84:	66666667 	.word	0x66666667
 8003a88:	20001390 	.word	0x20001390

08003a8c <play_icon_change>:
void play_icon_change(uint8_t play_icon_add) {
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	4603      	mov	r3, r0
 8003a94:	71fb      	strb	r3, [r7, #7]
	uint8_t play_icon_data[8] = {0x5A, 0XA5, 0X05, 0X82, 0X10, 0X35, 0X00, 0X00};
 8003a96:	4a0a      	ldr	r2, [pc, #40]	@ (8003ac0 <play_icon_change+0x34>)
 8003a98:	f107 0308 	add.w	r3, r7, #8
 8003a9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003aa0:	e883 0003 	stmia.w	r3, {r0, r1}
	play_icon_data[7] = play_icon_add;
 8003aa4:	79fb      	ldrb	r3, [r7, #7]
 8003aa6:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, play_icon_data, 8, 1);
 8003aa8:	f107 0108 	add.w	r1, r7, #8
 8003aac:	2301      	movs	r3, #1
 8003aae:	2208      	movs	r2, #8
 8003ab0:	4804      	ldr	r0, [pc, #16]	@ (8003ac4 <play_icon_change+0x38>)
 8003ab2:	f00d f92f 	bl	8010d14 <HAL_UART_Transmit>
}
 8003ab6:	bf00      	nop
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	08016168 	.word	0x08016168
 8003ac4:	20000fd0 	.word	0x20000fd0

08003ac8 <bag_play_icon_change>:
void bag_play_icon_change(uint8_t play_icon_add) {
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	4603      	mov	r3, r0
 8003ad0:	71fb      	strb	r3, [r7, #7]
	uint8_t play_icon_data[8] = {0x5A, 0XA5, 0X05, 0X82, 0X10, 0XDC, 0X00, 0X00};
 8003ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8003afc <bag_play_icon_change+0x34>)
 8003ad4:	f107 0308 	add.w	r3, r7, #8
 8003ad8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003adc:	e883 0003 	stmia.w	r3, {r0, r1}
	play_icon_data[7] = play_icon_add;
 8003ae0:	79fb      	ldrb	r3, [r7, #7]
 8003ae2:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, play_icon_data, 8, 1);
 8003ae4:	f107 0108 	add.w	r1, r7, #8
 8003ae8:	2301      	movs	r3, #1
 8003aea:	2208      	movs	r2, #8
 8003aec:	4804      	ldr	r0, [pc, #16]	@ (8003b00 <bag_play_icon_change+0x38>)
 8003aee:	f00d f911 	bl	8010d14 <HAL_UART_Transmit>
}
 8003af2:	bf00      	nop
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	08016170 	.word	0x08016170
 8003b00:	20000fd0 	.word	0x20000fd0

08003b04 <ap_icon_change>:

void ap_icon_change(uint8_t ap_icon_add) {
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	71fb      	strb	r3, [r7, #7]
	uint8_t ap_icon_data[8] = {0x5A, 0XA5, 0X05, 0X82, 0X10, 0X0C, 0X00, 0X00};
 8003b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8003b38 <ap_icon_change+0x34>)
 8003b10:	f107 0308 	add.w	r3, r7, #8
 8003b14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b18:	e883 0003 	stmia.w	r3, {r0, r1}
	ap_icon_data[7] = ap_icon_add;
 8003b1c:	79fb      	ldrb	r3, [r7, #7]
 8003b1e:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, ap_icon_data, 8, 1);
 8003b20:	f107 0108 	add.w	r1, r7, #8
 8003b24:	2301      	movs	r3, #1
 8003b26:	2208      	movs	r2, #8
 8003b28:	4804      	ldr	r0, [pc, #16]	@ (8003b3c <ap_icon_change+0x38>)
 8003b2a:	f00d f8f3 	bl	8010d14 <HAL_UART_Transmit>
}
 8003b2e:	bf00      	nop
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	08016178 	.word	0x08016178
 8003b3c:	20000fd0 	.word	0x20000fd0

08003b40 <target_flow_cal>:
//	double INStime = Ti * 1000;
//	double user_flow;
//	user_flow = (((int) vt_temp_value / INStime) / 2) * 100;
//	return (user_flow - 2) + 100;
//}
double target_flow_cal(void){
 8003b40:	b5b0      	push	{r4, r5, r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
	double target_flow;
	target_flow = ((vt_temp_value * 2.5) / (16.667 * Ti));
 8003b46:	4b1c      	ldr	r3, [pc, #112]	@ (8003bb8 <target_flow_cal+0x78>)
 8003b48:	881b      	ldrh	r3, [r3, #0]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7fc fce2 	bl	8000514 <__aeabi_i2d>
 8003b50:	f04f 0200 	mov.w	r2, #0
 8003b54:	4b19      	ldr	r3, [pc, #100]	@ (8003bbc <target_flow_cal+0x7c>)
 8003b56:	f7fc fd47 	bl	80005e8 <__aeabi_dmul>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	4614      	mov	r4, r2
 8003b60:	461d      	mov	r5, r3
 8003b62:	4b17      	ldr	r3, [pc, #92]	@ (8003bc0 <target_flow_cal+0x80>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7fc fce6 	bl	8000538 <__aeabi_f2d>
 8003b6c:	a310      	add	r3, pc, #64	@ (adr r3, 8003bb0 <target_flow_cal+0x70>)
 8003b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b72:	f7fc fd39 	bl	80005e8 <__aeabi_dmul>
 8003b76:	4602      	mov	r2, r0
 8003b78:	460b      	mov	r3, r1
 8003b7a:	4620      	mov	r0, r4
 8003b7c:	4629      	mov	r1, r5
 8003b7e:	f7fc fe5d 	bl	800083c <__aeabi_ddiv>
 8003b82:	4602      	mov	r2, r0
 8003b84:	460b      	mov	r3, r1
 8003b86:	e9c7 2300 	strd	r2, r3, [r7]
	return (target_flow + 1);
 8003b8a:	f04f 0200 	mov.w	r2, #0
 8003b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003bc4 <target_flow_cal+0x84>)
 8003b90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003b94:	f7fc fb72 	bl	800027c <__adddf3>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	ec43 2b17 	vmov	d7, r2, r3
}
 8003ba0:	eeb0 0a47 	vmov.f32	s0, s14
 8003ba4:	eef0 0a67 	vmov.f32	s1, s15
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bdb0      	pop	{r4, r5, r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	83126e98 	.word	0x83126e98
 8003bb4:	4030aac0 	.word	0x4030aac0
 8003bb8:	20000044 	.word	0x20000044
 8003bbc:	40040000 	.word	0x40040000
 8003bc0:	200013a8 	.word	0x200013a8
 8003bc4:	3ff00000 	.word	0x3ff00000

08003bc8 <user_flowe_cal>:
double user_flowe_cal(void) {
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
	double INStime = Ti * 1000;
 8003bce:	4b25      	ldr	r3, [pc, #148]	@ (8003c64 <user_flowe_cal+0x9c>)
 8003bd0:	edd3 7a00 	vldr	s15, [r3]
 8003bd4:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8003c68 <user_flowe_cal+0xa0>
 8003bd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bdc:	ee17 0a90 	vmov	r0, s15
 8003be0:	f7fc fcaa 	bl	8000538 <__aeabi_f2d>
 8003be4:	4602      	mov	r2, r0
 8003be6:	460b      	mov	r3, r1
 8003be8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	double user_flow;
	user_flow = (((int) vt_temp_value / INStime) / 2) * 100;
 8003bec:	4b1f      	ldr	r3, [pc, #124]	@ (8003c6c <user_flowe_cal+0xa4>)
 8003bee:	881b      	ldrh	r3, [r3, #0]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7fc fc8f 	bl	8000514 <__aeabi_i2d>
 8003bf6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bfa:	f7fc fe1f 	bl	800083c <__aeabi_ddiv>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	460b      	mov	r3, r1
 8003c02:	4610      	mov	r0, r2
 8003c04:	4619      	mov	r1, r3
 8003c06:	f04f 0200 	mov.w	r2, #0
 8003c0a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003c0e:	f7fc fe15 	bl	800083c <__aeabi_ddiv>
 8003c12:	4602      	mov	r2, r0
 8003c14:	460b      	mov	r3, r1
 8003c16:	4610      	mov	r0, r2
 8003c18:	4619      	mov	r1, r3
 8003c1a:	f04f 0200 	mov.w	r2, #0
 8003c1e:	4b14      	ldr	r3, [pc, #80]	@ (8003c70 <user_flowe_cal+0xa8>)
 8003c20:	f7fc fce2 	bl	80005e8 <__aeabi_dmul>
 8003c24:	4602      	mov	r2, r0
 8003c26:	460b      	mov	r3, r1
 8003c28:	e9c7 2300 	strd	r2, r3, [r7]
	return (user_flow + 1) + 100;
 8003c2c:	f04f 0200 	mov.w	r2, #0
 8003c30:	4b10      	ldr	r3, [pc, #64]	@ (8003c74 <user_flowe_cal+0xac>)
 8003c32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c36:	f7fc fb21 	bl	800027c <__adddf3>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	4610      	mov	r0, r2
 8003c40:	4619      	mov	r1, r3
 8003c42:	f04f 0200 	mov.w	r2, #0
 8003c46:	4b0a      	ldr	r3, [pc, #40]	@ (8003c70 <user_flowe_cal+0xa8>)
 8003c48:	f7fc fb18 	bl	800027c <__adddf3>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	460b      	mov	r3, r1
 8003c50:	ec43 2b17 	vmov	d7, r2, r3
}
 8003c54:	eeb0 0a47 	vmov.f32	s0, s14
 8003c58:	eef0 0a67 	vmov.f32	s1, s15
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	200013a8 	.word	0x200013a8
 8003c68:	447a0000 	.word	0x447a0000
 8003c6c:	20000044 	.word	0x20000044
 8003c70:	40590000 	.word	0x40590000
 8003c74:	3ff00000 	.word	0x3ff00000

08003c78 <vt_alarm>:
//	INStime = (((int) vt_temp_value / Ti));
//	user_flow = (INStime * 60) / 1000;
//	return (user_flow + 1) + 100;
//}
//left hand values from display
void vt_alarm(uint16_t value) {
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	4603      	mov	r3, r0
 8003c80:	80fb      	strh	r3, [r7, #6]
	uint8_t send_intiger_val[8] = { 0x5A, 0xA5, 0x05, 0x82, 0x10, 0xD7, 0x00,
 8003c82:	4a10      	ldr	r2, [pc, #64]	@ (8003cc4 <vt_alarm+0x4c>)
 8003c84:	f107 030c 	add.w	r3, r7, #12
 8003c88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c8c:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	uint8_t msb = 0x00;
 8003c90:	2300      	movs	r3, #0
 8003c92:	75fb      	strb	r3, [r7, #23]
	uint8_t lsb = 0x00;
 8003c94:	2300      	movs	r3, #0
 8003c96:	75bb      	strb	r3, [r7, #22]
	lsb = (uint16_t)value;
 8003c98:	88fb      	ldrh	r3, [r7, #6]
 8003c9a:	75bb      	strb	r3, [r7, #22]
	msb = (uint16_t)value >> 8;
 8003c9c:	88fb      	ldrh	r3, [r7, #6]
 8003c9e:	0a1b      	lsrs	r3, r3, #8
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	75fb      	strb	r3, [r7, #23]
	send_intiger_val[6] = msb;
 8003ca4:	7dfb      	ldrb	r3, [r7, #23]
 8003ca6:	74bb      	strb	r3, [r7, #18]
	send_intiger_val[7] = lsb;
 8003ca8:	7dbb      	ldrb	r3, [r7, #22]
 8003caa:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart1, send_intiger_val, sizeof(send_intiger_val),
 8003cac:	f107 010c 	add.w	r1, r7, #12
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	2208      	movs	r2, #8
 8003cb4:	4804      	ldr	r0, [pc, #16]	@ (8003cc8 <vt_alarm+0x50>)
 8003cb6:	f00d f82d 	bl	8010d14 <HAL_UART_Transmit>
			1);
}
 8003cba:	bf00      	nop
 8003cbc:	3718      	adds	r7, #24
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	08016180 	.word	0x08016180
 8003cc8:	20000fd0 	.word	0x20000fd0

08003ccc <mv_alarm>:
void mv_alarm(void) {
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b088      	sub	sp, #32
 8003cd0:	af00      	add	r7, sp, #0
	uint8_t send_intiger_val[8] = { 0x5A, 0xA5, 0x05, 0x82, 0x10, 0x65, 0x00,
 8003cd2:	4a32      	ldr	r2, [pc, #200]	@ (8003d9c <mv_alarm+0xd0>)
 8003cd4:	f107 0310 	add.w	r3, r7, #16
 8003cd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003cdc:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	uint8_t msb = 0x00;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	77fb      	strb	r3, [r7, #31]
	uint8_t lsb = 0x00;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	77bb      	strb	r3, [r7, #30]
	int value = 0.00;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	61bb      	str	r3, [r7, #24]
	MV_value_var = (Tidal_vol * RR_temp_value) / 1000;
 8003cec:	4b2c      	ldr	r3, [pc, #176]	@ (8003da0 <mv_alarm+0xd4>)
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	ee07 3a90 	vmov	s15, r3
 8003cf4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003cf8:	4b2a      	ldr	r3, [pc, #168]	@ (8003da4 <mv_alarm+0xd8>)
 8003cfa:	edd3 7a00 	vldr	s15, [r3]
 8003cfe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d02:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8003da8 <mv_alarm+0xdc>
 8003d06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d0a:	4b28      	ldr	r3, [pc, #160]	@ (8003dac <mv_alarm+0xe0>)
 8003d0c:	edc3 7a00 	vstr	s15, [r3]
	value = MV_value_var * 100;
 8003d10:	4b26      	ldr	r3, [pc, #152]	@ (8003dac <mv_alarm+0xe0>)
 8003d12:	edd3 7a00 	vldr	s15, [r3]
 8003d16:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8003db0 <mv_alarm+0xe4>
 8003d1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d22:	ee17 3a90 	vmov	r3, s15
 8003d26:	61bb      	str	r3, [r7, #24]
	char temp_float_data[4] = { 0, 0, 0, 0 };
 8003d28:	2300      	movs	r3, #0
 8003d2a:	60fb      	str	r3, [r7, #12]
	char float_hexStr[5];

	sprintf(temp_float_data, "%X", value);
 8003d2c:	f107 030c 	add.w	r3, r7, #12
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	4920      	ldr	r1, [pc, #128]	@ (8003db4 <mv_alarm+0xe8>)
 8003d34:	4618      	mov	r0, r3
 8003d36:	f011 fbf9 	bl	801552c <siprintf>
	sprintf("hex %s", temp_float_data);
 8003d3a:	f107 030c 	add.w	r3, r7, #12
 8003d3e:	4619      	mov	r1, r3
 8003d40:	481d      	ldr	r0, [pc, #116]	@ (8003db8 <mv_alarm+0xec>)
 8003d42:	f011 fbf3 	bl	801552c <siprintf>
	float_hexStr[0] = temp_float_data[0];
 8003d46:	7b3b      	ldrb	r3, [r7, #12]
 8003d48:	713b      	strb	r3, [r7, #4]
	float_hexStr[1] = temp_float_data[1];
 8003d4a:	7b7b      	ldrb	r3, [r7, #13]
 8003d4c:	717b      	strb	r3, [r7, #5]
	float_hexStr[2] = temp_float_data[2];
 8003d4e:	7bbb      	ldrb	r3, [r7, #14]
 8003d50:	71bb      	strb	r3, [r7, #6]
	float_hexStr[3] = temp_float_data[3];
 8003d52:	7bfb      	ldrb	r3, [r7, #15]
 8003d54:	71fb      	strb	r3, [r7, #7]
	float_hexStr[4] = '\0';
 8003d56:	2300      	movs	r3, #0
 8003d58:	723b      	strb	r3, [r7, #8]
	result4 = (uint16_t) strtol(float_hexStr, NULL, 16);
 8003d5a:	1d3b      	adds	r3, r7, #4
 8003d5c:	2210      	movs	r2, #16
 8003d5e:	2100      	movs	r1, #0
 8003d60:	4618      	mov	r0, r3
 8003d62:	f011 fbd9 	bl	8015518 <strtol>
 8003d66:	4603      	mov	r3, r0
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	4b14      	ldr	r3, [pc, #80]	@ (8003dbc <mv_alarm+0xf0>)
 8003d6c:	801a      	strh	r2, [r3, #0]
	lsb = result4;
 8003d6e:	4b13      	ldr	r3, [pc, #76]	@ (8003dbc <mv_alarm+0xf0>)
 8003d70:	881b      	ldrh	r3, [r3, #0]
 8003d72:	77bb      	strb	r3, [r7, #30]
	msb = result4 >> 8;
 8003d74:	4b11      	ldr	r3, [pc, #68]	@ (8003dbc <mv_alarm+0xf0>)
 8003d76:	881b      	ldrh	r3, [r3, #0]
 8003d78:	0a1b      	lsrs	r3, r3, #8
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	77fb      	strb	r3, [r7, #31]
	send_intiger_val[6] = msb;
 8003d7e:	7ffb      	ldrb	r3, [r7, #31]
 8003d80:	75bb      	strb	r3, [r7, #22]
	send_intiger_val[7] = lsb;
 8003d82:	7fbb      	ldrb	r3, [r7, #30]
 8003d84:	75fb      	strb	r3, [r7, #23]
	HAL_UART_Transmit(&huart1, send_intiger_val, sizeof(send_intiger_val),
 8003d86:	f107 0110 	add.w	r1, r7, #16
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	2208      	movs	r2, #8
 8003d8e:	480c      	ldr	r0, [pc, #48]	@ (8003dc0 <mv_alarm+0xf4>)
 8003d90:	f00c ffc0 	bl	8010d14 <HAL_UART_Transmit>
			1);
}
 8003d94:	bf00      	nop
 8003d96:	3720      	adds	r7, #32
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	08016188 	.word	0x08016188
 8003da0:	2000004c 	.word	0x2000004c
 8003da4:	200013b4 	.word	0x200013b4
 8003da8:	447a0000 	.word	0x447a0000
 8003dac:	200019e0 	.word	0x200019e0
 8003db0:	42c80000 	.word	0x42c80000
 8003db4:	08016124 	.word	0x08016124
 8003db8:	08016128 	.word	0x08016128
 8003dbc:	20001a92 	.word	0x20001a92
 8003dc0:	20000fd0 	.word	0x20000fd0

08003dc4 <bag_mv_alarm>:
void bag_mv_alarm(void) {
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b088      	sub	sp, #32
 8003dc8:	af00      	add	r7, sp, #0
	uint8_t send_intiger_val[8] = { 0x5A, 0xA5, 0x05, 0x82, 0x10, 0x65, 0x00,
 8003dca:	4a34      	ldr	r2, [pc, #208]	@ (8003e9c <bag_mv_alarm+0xd8>)
 8003dcc:	f107 0310 	add.w	r3, r7, #16
 8003dd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003dd4:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	uint8_t msb = 0x00;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	77fb      	strb	r3, [r7, #31]
	uint8_t lsb = 0x00;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	77bb      	strb	r3, [r7, #30]
	int value = 0.00;
 8003de0:	2300      	movs	r3, #0
 8003de2:	61bb      	str	r3, [r7, #24]
	MV_value_var = (previous_bag * (60 / (2*prev_insp))) / 1000;
 8003de4:	4b2e      	ldr	r3, [pc, #184]	@ (8003ea0 <bag_mv_alarm+0xdc>)
 8003de6:	edd3 7a00 	vldr	s15, [r3]
 8003dea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003dee:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 8003ea4 <bag_mv_alarm+0xe0>
 8003df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003df6:	4b2c      	ldr	r3, [pc, #176]	@ (8003ea8 <bag_mv_alarm+0xe4>)
 8003df8:	edd3 7a00 	vldr	s15, [r3]
 8003dfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e00:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8003eac <bag_mv_alarm+0xe8>
 8003e04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e08:	4b29      	ldr	r3, [pc, #164]	@ (8003eb0 <bag_mv_alarm+0xec>)
 8003e0a:	edc3 7a00 	vstr	s15, [r3]
	value = MV_value_var * 100;
 8003e0e:	4b28      	ldr	r3, [pc, #160]	@ (8003eb0 <bag_mv_alarm+0xec>)
 8003e10:	edd3 7a00 	vldr	s15, [r3]
 8003e14:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8003eb4 <bag_mv_alarm+0xf0>
 8003e18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e20:	ee17 3a90 	vmov	r3, s15
 8003e24:	61bb      	str	r3, [r7, #24]
	char temp_float_data[4] = { 0, 0, 0, 0 };
 8003e26:	2300      	movs	r3, #0
 8003e28:	60fb      	str	r3, [r7, #12]
	char float_hexStr[5];

	sprintf(temp_float_data, "%X", value);
 8003e2a:	f107 030c 	add.w	r3, r7, #12
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	4921      	ldr	r1, [pc, #132]	@ (8003eb8 <bag_mv_alarm+0xf4>)
 8003e32:	4618      	mov	r0, r3
 8003e34:	f011 fb7a 	bl	801552c <siprintf>
	sprintf("hex %s", temp_float_data);
 8003e38:	f107 030c 	add.w	r3, r7, #12
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	481f      	ldr	r0, [pc, #124]	@ (8003ebc <bag_mv_alarm+0xf8>)
 8003e40:	f011 fb74 	bl	801552c <siprintf>
	float_hexStr[0] = temp_float_data[0];
 8003e44:	7b3b      	ldrb	r3, [r7, #12]
 8003e46:	713b      	strb	r3, [r7, #4]
	float_hexStr[1] = temp_float_data[1];
 8003e48:	7b7b      	ldrb	r3, [r7, #13]
 8003e4a:	717b      	strb	r3, [r7, #5]
	float_hexStr[2] = temp_float_data[2];
 8003e4c:	7bbb      	ldrb	r3, [r7, #14]
 8003e4e:	71bb      	strb	r3, [r7, #6]
	float_hexStr[3] = temp_float_data[3];
 8003e50:	7bfb      	ldrb	r3, [r7, #15]
 8003e52:	71fb      	strb	r3, [r7, #7]
	float_hexStr[4] = '\0';
 8003e54:	2300      	movs	r3, #0
 8003e56:	723b      	strb	r3, [r7, #8]
	result4 = (uint16_t) strtol(float_hexStr, NULL, 16);
 8003e58:	1d3b      	adds	r3, r7, #4
 8003e5a:	2210      	movs	r2, #16
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f011 fb5a 	bl	8015518 <strtol>
 8003e64:	4603      	mov	r3, r0
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	4b15      	ldr	r3, [pc, #84]	@ (8003ec0 <bag_mv_alarm+0xfc>)
 8003e6a:	801a      	strh	r2, [r3, #0]
	lsb = result4;
 8003e6c:	4b14      	ldr	r3, [pc, #80]	@ (8003ec0 <bag_mv_alarm+0xfc>)
 8003e6e:	881b      	ldrh	r3, [r3, #0]
 8003e70:	77bb      	strb	r3, [r7, #30]
	msb = result4 >> 8;
 8003e72:	4b13      	ldr	r3, [pc, #76]	@ (8003ec0 <bag_mv_alarm+0xfc>)
 8003e74:	881b      	ldrh	r3, [r3, #0]
 8003e76:	0a1b      	lsrs	r3, r3, #8
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	77fb      	strb	r3, [r7, #31]
	send_intiger_val[6] = msb;
 8003e7c:	7ffb      	ldrb	r3, [r7, #31]
 8003e7e:	75bb      	strb	r3, [r7, #22]
	send_intiger_val[7] = lsb;
 8003e80:	7fbb      	ldrb	r3, [r7, #30]
 8003e82:	75fb      	strb	r3, [r7, #23]
	HAL_UART_Transmit(&huart1, send_intiger_val, sizeof(send_intiger_val),
 8003e84:	f107 0110 	add.w	r1, r7, #16
 8003e88:	2301      	movs	r3, #1
 8003e8a:	2208      	movs	r2, #8
 8003e8c:	480d      	ldr	r0, [pc, #52]	@ (8003ec4 <bag_mv_alarm+0x100>)
 8003e8e:	f00c ff41 	bl	8010d14 <HAL_UART_Transmit>
			1);
}
 8003e92:	bf00      	nop
 8003e94:	3720      	adds	r7, #32
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	08016188 	.word	0x08016188
 8003ea0:	200013dc 	.word	0x200013dc
 8003ea4:	42700000 	.word	0x42700000
 8003ea8:	200013d8 	.word	0x200013d8
 8003eac:	447a0000 	.word	0x447a0000
 8003eb0:	200019e0 	.word	0x200019e0
 8003eb4:	42c80000 	.word	0x42c80000
 8003eb8:	08016124 	.word	0x08016124
 8003ebc:	08016128 	.word	0x08016128
 8003ec0:	20001a92 	.word	0x20001a92
 8003ec4:	20000fd0 	.word	0x20000fd0

08003ec8 <rr_alarm>:

void rr_alarm(uint8_t value) {
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	4603      	mov	r3, r0
 8003ed0:	71fb      	strb	r3, [r7, #7]
	uint8_t send_intiger_val[8] = { 0x5A, 0xA5, 0x05, 0x82, 0x10, 0x66, 0x00,
 8003ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8003efc <rr_alarm+0x34>)
 8003ed4:	f107 0308 	add.w	r3, r7, #8
 8003ed8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003edc:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	send_intiger_val[7] = value;
 8003ee0:	79fb      	ldrb	r3, [r7, #7]
 8003ee2:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, send_intiger_val, sizeof(send_intiger_val),
 8003ee4:	f107 0108 	add.w	r1, r7, #8
 8003ee8:	2301      	movs	r3, #1
 8003eea:	2208      	movs	r2, #8
 8003eec:	4804      	ldr	r0, [pc, #16]	@ (8003f00 <rr_alarm+0x38>)
 8003eee:	f00c ff11 	bl	8010d14 <HAL_UART_Transmit>
			1);
}
 8003ef2:	bf00      	nop
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	08016190 	.word	0x08016190
 8003f00:	20000fd0 	.word	0x20000fd0

08003f04 <P_Peak_pressure>:

void P_Peak_pressure(uint8_t value) {
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	71fb      	strb	r3, [r7, #7]
	uint8_t send_intiger_val[8] = { 0x5A, 0xA5, 0x05, 0x82, 0x10, 0xD8, 0x00,
 8003f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8003f38 <P_Peak_pressure+0x34>)
 8003f10:	f107 0308 	add.w	r3, r7, #8
 8003f14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f18:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	send_intiger_val[7] = value;
 8003f1c:	79fb      	ldrb	r3, [r7, #7]
 8003f1e:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, send_intiger_val, sizeof(send_intiger_val),
 8003f20:	f107 0108 	add.w	r1, r7, #8
 8003f24:	2301      	movs	r3, #1
 8003f26:	2208      	movs	r2, #8
 8003f28:	4804      	ldr	r0, [pc, #16]	@ (8003f3c <P_Peak_pressure+0x38>)
 8003f2a:	f00c fef3 	bl	8010d14 <HAL_UART_Transmit>
			1);
}
 8003f2e:	bf00      	nop
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	08016198 	.word	0x08016198
 8003f3c:	20000fd0 	.word	0x20000fd0

08003f40 <Peep_live_pressure>:
void Peep_live_pressure(uint8_t value) {
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	4603      	mov	r3, r0
 8003f48:	71fb      	strb	r3, [r7, #7]
	uint8_t send_intiger_val[8] = { 0x5A, 0xA5, 0x05, 0x82, 0x10, 0x67, 0x00,
 8003f4a:	4a0a      	ldr	r2, [pc, #40]	@ (8003f74 <Peep_live_pressure+0x34>)
 8003f4c:	f107 0308 	add.w	r3, r7, #8
 8003f50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f54:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	send_intiger_val[7] = value;
 8003f58:	79fb      	ldrb	r3, [r7, #7]
 8003f5a:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, send_intiger_val, sizeof(send_intiger_val),
 8003f5c:	f107 0108 	add.w	r1, r7, #8
 8003f60:	2301      	movs	r3, #1
 8003f62:	2208      	movs	r2, #8
 8003f64:	4804      	ldr	r0, [pc, #16]	@ (8003f78 <Peep_live_pressure+0x38>)
 8003f66:	f00c fed5 	bl	8010d14 <HAL_UART_Transmit>
			1);
}
 8003f6a:	bf00      	nop
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	080161a0 	.word	0x080161a0
 8003f78:	20000fd0 	.word	0x20000fd0

08003f7c <Compliance>:
void Compliance(uint8_t value){
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	4603      	mov	r3, r0
 8003f84:	71fb      	strb	r3, [r7, #7]
	uint8_t send_intiger_val[8] = {0x5A, 0xA5, 0x05, 0x82, 0x10, 0x9A, 0x00,
 8003f86:	4a0a      	ldr	r2, [pc, #40]	@ (8003fb0 <Compliance+0x34>)
 8003f88:	f107 0308 	add.w	r3, r7, #8
 8003f8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f90:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00};
	send_intiger_val[7] = value;
 8003f94:	79fb      	ldrb	r3, [r7, #7]
 8003f96:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, send_intiger_val, sizeof(send_intiger_val),
 8003f98:	f107 0108 	add.w	r1, r7, #8
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	2208      	movs	r2, #8
 8003fa0:	4804      	ldr	r0, [pc, #16]	@ (8003fb4 <Compliance+0x38>)
 8003fa2:	f00c feb7 	bl	8010d14 <HAL_UART_Transmit>
			1);
}
 8003fa6:	bf00      	nop
 8003fa8:	3710      	adds	r7, #16
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	080161a8 	.word	0x080161a8
 8003fb4:	20000fd0 	.word	0x20000fd0

08003fb8 <BUZZ_PWM>:
void BUZZ_PWM(void){
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
	//	__HAL_TIM_SET_AUTORELOAD(&htim4, x*24);
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 500);
 8003fbc:	4b09      	ldr	r3, [pc, #36]	@ (8003fe4 <BUZZ_PWM+0x2c>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003fc4:	635a      	str	r2, [r3, #52]	@ 0x34
	osDelay(500);
 8003fc6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003fca:	f00e f9f6 	bl	80123ba <osDelay>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8003fce:	4b05      	ldr	r3, [pc, #20]	@ (8003fe4 <BUZZ_PWM+0x2c>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	635a      	str	r2, [r3, #52]	@ 0x34
	osDelay(500);
 8003fd6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003fda:	f00e f9ee 	bl	80123ba <osDelay>
}
 8003fde:	bf00      	nop
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	20000f88 	.word	0x20000f88

08003fe8 <get_filtered_flow>:
float get_filtered_flow(float new_sample) {
 8003fe8:	b480      	push	{r7}
 8003fea:	b087      	sub	sp, #28
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	ed87 0a01 	vstr	s0, [r7, #4]
	flow_buffer[flow_index++] = new_sample;
 8003ff2:	4b1e      	ldr	r3, [pc, #120]	@ (800406c <get_filtered_flow+0x84>)
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	1c5a      	adds	r2, r3, #1
 8003ff8:	b2d1      	uxtb	r1, r2
 8003ffa:	4a1c      	ldr	r2, [pc, #112]	@ (800406c <get_filtered_flow+0x84>)
 8003ffc:	7011      	strb	r1, [r2, #0]
 8003ffe:	4a1c      	ldr	r2, [pc, #112]	@ (8004070 <get_filtered_flow+0x88>)
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	4413      	add	r3, r2
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	601a      	str	r2, [r3, #0]
	if (flow_index >= FILTER_WINDOW) flow_index = 0;
 8004008:	4b18      	ldr	r3, [pc, #96]	@ (800406c <get_filtered_flow+0x84>)
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	2b63      	cmp	r3, #99	@ 0x63
 800400e:	d902      	bls.n	8004016 <get_filtered_flow+0x2e>
 8004010:	4b16      	ldr	r3, [pc, #88]	@ (800406c <get_filtered_flow+0x84>)
 8004012:	2200      	movs	r2, #0
 8004014:	701a      	strb	r2, [r3, #0]

	float sum = 0;
 8004016:	f04f 0300 	mov.w	r3, #0
 800401a:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < FILTER_WINDOW; i++) {
 800401c:	2300      	movs	r3, #0
 800401e:	613b      	str	r3, [r7, #16]
 8004020:	e00e      	b.n	8004040 <get_filtered_flow+0x58>
		sum += flow_buffer[i];
 8004022:	4a13      	ldr	r2, [pc, #76]	@ (8004070 <get_filtered_flow+0x88>)
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	4413      	add	r3, r2
 800402a:	edd3 7a00 	vldr	s15, [r3]
 800402e:	ed97 7a05 	vldr	s14, [r7, #20]
 8004032:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004036:	edc7 7a05 	vstr	s15, [r7, #20]
	for (int i = 0; i < FILTER_WINDOW; i++) {
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	3301      	adds	r3, #1
 800403e:	613b      	str	r3, [r7, #16]
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	2b63      	cmp	r3, #99	@ 0x63
 8004044:	dded      	ble.n	8004022 <get_filtered_flow+0x3a>
	}
	float fraction = sum / FILTER_WINDOW;
 8004046:	ed97 7a05 	vldr	s14, [r7, #20]
 800404a:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8004074 <get_filtered_flow+0x8c>
 800404e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004052:	edc7 7a03 	vstr	s15, [r7, #12]
	return fraction;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	ee07 3a90 	vmov	s15, r3
}
 800405c:	eeb0 0a67 	vmov.f32	s0, s15
 8004060:	371c      	adds	r7, #28
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	200012dc 	.word	0x200012dc
 8004070:	2000114c 	.word	0x2000114c
 8004074:	42c80000 	.word	0x42c80000

08004078 <VCV_MODE>:
		}
	}
}


void VCV_MODE(void) {
 8004078:	b590      	push	{r4, r7, lr}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0

	VT_UPDATE_FLAG = 0;
 800407e:	4bae      	ldr	r3, [pc, #696]	@ (8004338 <VCV_MODE+0x2c0>)
 8004080:	2200      	movs	r2, #0
 8004082:	701a      	strb	r2, [r3, #0]
	PID_CALIBRATE_FLAG = 1;
 8004084:	4bad      	ldr	r3, [pc, #692]	@ (800433c <VCV_MODE+0x2c4>)
 8004086:	2201      	movs	r2, #1
 8004088:	701a      	strb	r2, [r3, #0]
	if(vt_temp_value<= 90){
 800408a:	4bad      	ldr	r3, [pc, #692]	@ (8004340 <VCV_MODE+0x2c8>)
 800408c:	881b      	ldrh	r3, [r3, #0]
 800408e:	2b5a      	cmp	r3, #90	@ 0x5a
 8004090:	d803      	bhi.n	800409a <VCV_MODE+0x22>
		PID_CALIBRATE_FLAG = 1;
 8004092:	4baa      	ldr	r3, [pc, #680]	@ (800433c <VCV_MODE+0x2c4>)
 8004094:	2201      	movs	r2, #1
 8004096:	701a      	strb	r2, [r3, #0]
 8004098:	e0a3      	b.n	80041e2 <VCV_MODE+0x16a>
	}
	else if ((((vt_temp_value - Tidal_vol) <= 15) && ((vt_temp_value - Tidal_vol) >= 0)) ||
 800409a:	4ba9      	ldr	r3, [pc, #676]	@ (8004340 <VCV_MODE+0x2c8>)
 800409c:	881b      	ldrh	r3, [r3, #0]
 800409e:	ee07 3a90 	vmov	s15, r3
 80040a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040a6:	4ba7      	ldr	r3, [pc, #668]	@ (8004344 <VCV_MODE+0x2cc>)
 80040a8:	edd3 7a00 	vldr	s15, [r3]
 80040ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040b0:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 80040b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040bc:	d80f      	bhi.n	80040de <VCV_MODE+0x66>
 80040be:	4ba0      	ldr	r3, [pc, #640]	@ (8004340 <VCV_MODE+0x2c8>)
 80040c0:	881b      	ldrh	r3, [r3, #0]
 80040c2:	ee07 3a90 	vmov	s15, r3
 80040c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040ca:	4b9e      	ldr	r3, [pc, #632]	@ (8004344 <VCV_MODE+0x2cc>)
 80040cc:	edd3 7a00 	vldr	s15, [r3]
 80040d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040dc:	da21      	bge.n	8004122 <VCV_MODE+0xaa>
			(((Tidal_vol - vt_temp_value) <= 15) && ((Tidal_vol - vt_temp_value) >= 0))) {
 80040de:	4b99      	ldr	r3, [pc, #612]	@ (8004344 <VCV_MODE+0x2cc>)
 80040e0:	ed93 7a00 	vldr	s14, [r3]
 80040e4:	4b96      	ldr	r3, [pc, #600]	@ (8004340 <VCV_MODE+0x2c8>)
 80040e6:	881b      	ldrh	r3, [r3, #0]
 80040e8:	ee07 3a90 	vmov	s15, r3
 80040ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040f0:	ee77 7a67 	vsub.f32	s15, s14, s15
	else if ((((vt_temp_value - Tidal_vol) <= 15) && ((vt_temp_value - Tidal_vol) >= 0)) ||
 80040f4:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 80040f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004100:	d86f      	bhi.n	80041e2 <VCV_MODE+0x16a>
			(((Tidal_vol - vt_temp_value) <= 15) && ((Tidal_vol - vt_temp_value) >= 0))) {
 8004102:	4b90      	ldr	r3, [pc, #576]	@ (8004344 <VCV_MODE+0x2cc>)
 8004104:	ed93 7a00 	vldr	s14, [r3]
 8004108:	4b8d      	ldr	r3, [pc, #564]	@ (8004340 <VCV_MODE+0x2c8>)
 800410a:	881b      	ldrh	r3, [r3, #0]
 800410c:	ee07 3a90 	vmov	s15, r3
 8004110:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004114:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004118:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800411c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004120:	db5f      	blt.n	80041e2 <VCV_MODE+0x16a>
		PID_CALIBRATE_FLAG = 0;
 8004122:	4b86      	ldr	r3, [pc, #536]	@ (800433c <VCV_MODE+0x2c4>)
 8004124:	2200      	movs	r2, #0
 8004126:	701a      	strb	r2, [r3, #0]
		//		user_flowe = user_flowe + 1;
		if(vt_temp_value < Tidal_vol){
 8004128:	4b85      	ldr	r3, [pc, #532]	@ (8004340 <VCV_MODE+0x2c8>)
 800412a:	881b      	ldrh	r3, [r3, #0]
 800412c:	ee07 3a90 	vmov	s15, r3
 8004130:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004134:	4b83      	ldr	r3, [pc, #524]	@ (8004344 <VCV_MODE+0x2cc>)
 8004136:	edd3 7a00 	vldr	s15, [r3]
 800413a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800413e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004142:	d520      	bpl.n	8004186 <VCV_MODE+0x10e>
			if (vt_temp_value != Tidal_vol) {
 8004144:	4b7e      	ldr	r3, [pc, #504]	@ (8004340 <VCV_MODE+0x2c8>)
 8004146:	881b      	ldrh	r3, [r3, #0]
 8004148:	ee07 3a90 	vmov	s15, r3
 800414c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004150:	4b7c      	ldr	r3, [pc, #496]	@ (8004344 <VCV_MODE+0x2cc>)
 8004152:	edd3 7a00 	vldr	s15, [r3]
 8004156:	eeb4 7a67 	vcmp.f32	s14, s15
 800415a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800415e:	d040      	beq.n	80041e2 <VCV_MODE+0x16a>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PIDOut - 0.5);
 8004160:	4b79      	ldr	r3, [pc, #484]	@ (8004348 <VCV_MODE+0x2d0>)
 8004162:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004166:	f04f 0200 	mov.w	r2, #0
 800416a:	4b78      	ldr	r3, [pc, #480]	@ (800434c <VCV_MODE+0x2d4>)
 800416c:	f7fc f884 	bl	8000278 <__aeabi_dsub>
 8004170:	4602      	mov	r2, r0
 8004172:	460b      	mov	r3, r1
 8004174:	4976      	ldr	r1, [pc, #472]	@ (8004350 <VCV_MODE+0x2d8>)
 8004176:	680c      	ldr	r4, [r1, #0]
 8004178:	4610      	mov	r0, r2
 800417a:	4619      	mov	r1, r3
 800417c:	f7fc fd0c 	bl	8000b98 <__aeabi_d2uiz>
 8004180:	4603      	mov	r3, r0
 8004182:	6363      	str	r3, [r4, #52]	@ 0x34
 8004184:	e02d      	b.n	80041e2 <VCV_MODE+0x16a>
				//				break;
			}
		}else if(vt_temp_value > Tidal_vol){
 8004186:	4b6e      	ldr	r3, [pc, #440]	@ (8004340 <VCV_MODE+0x2c8>)
 8004188:	881b      	ldrh	r3, [r3, #0]
 800418a:	ee07 3a90 	vmov	s15, r3
 800418e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004192:	4b6c      	ldr	r3, [pc, #432]	@ (8004344 <VCV_MODE+0x2cc>)
 8004194:	edd3 7a00 	vldr	s15, [r3]
 8004198:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800419c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041a0:	dd1f      	ble.n	80041e2 <VCV_MODE+0x16a>
			if (vt_temp_value != Tidal_vol) {
 80041a2:	4b67      	ldr	r3, [pc, #412]	@ (8004340 <VCV_MODE+0x2c8>)
 80041a4:	881b      	ldrh	r3, [r3, #0]
 80041a6:	ee07 3a90 	vmov	s15, r3
 80041aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041ae:	4b65      	ldr	r3, [pc, #404]	@ (8004344 <VCV_MODE+0x2cc>)
 80041b0:	edd3 7a00 	vldr	s15, [r3]
 80041b4:	eeb4 7a67 	vcmp.f32	s14, s15
 80041b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041bc:	d011      	beq.n	80041e2 <VCV_MODE+0x16a>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PIDOut + 0.5);
 80041be:	4b62      	ldr	r3, [pc, #392]	@ (8004348 <VCV_MODE+0x2d0>)
 80041c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80041c4:	f04f 0200 	mov.w	r2, #0
 80041c8:	4b60      	ldr	r3, [pc, #384]	@ (800434c <VCV_MODE+0x2d4>)
 80041ca:	f7fc f857 	bl	800027c <__adddf3>
 80041ce:	4602      	mov	r2, r0
 80041d0:	460b      	mov	r3, r1
 80041d2:	495f      	ldr	r1, [pc, #380]	@ (8004350 <VCV_MODE+0x2d8>)
 80041d4:	680c      	ldr	r4, [r1, #0]
 80041d6:	4610      	mov	r0, r2
 80041d8:	4619      	mov	r1, r3
 80041da:	f7fc fcdd 	bl	8000b98 <__aeabi_d2uiz>
 80041de:	4603      	mov	r3, r0
 80041e0:	6363      	str	r3, [r4, #52]	@ 0x34
				//				break;
			}
		}
	}
	start_time_ms = HAL_GetTick();
 80041e2:	f008 fa61 	bl	800c6a8 <HAL_GetTick>
 80041e6:	4603      	mov	r3, r0
 80041e8:	461a      	mov	r2, r3
 80041ea:	4b5a      	ldr	r3, [pc, #360]	@ (8004354 <VCV_MODE+0x2dc>)
 80041ec:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 80041ee:	2201      	movs	r2, #1
 80041f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80041f4:	4858      	ldr	r0, [pc, #352]	@ (8004358 <VCV_MODE+0x2e0>)
 80041f6:	f009 fd1f 	bl	800dc38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 80041fa:	2201      	movs	r2, #1
 80041fc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004200:	4855      	ldr	r0, [pc, #340]	@ (8004358 <VCV_MODE+0x2e0>)
 8004202:	f009 fd19 	bl	800dc38 <HAL_GPIO_WritePin>
	Data_Flag_Flow++;
 8004206:	4b55      	ldr	r3, [pc, #340]	@ (800435c <VCV_MODE+0x2e4>)
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	3301      	adds	r3, #1
 800420c:	b2da      	uxtb	r2, r3
 800420e:	4b53      	ldr	r3, [pc, #332]	@ (800435c <VCV_MODE+0x2e4>)
 8004210:	701a      	strb	r2, [r3, #0]
	Data_Flag_Pressure++;
 8004212:	4b53      	ldr	r3, [pc, #332]	@ (8004360 <VCV_MODE+0x2e8>)
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	3301      	adds	r3, #1
 8004218:	b2da      	uxtb	r2, r3
 800421a:	4b51      	ldr	r3, [pc, #324]	@ (8004360 <VCV_MODE+0x2e8>)
 800421c:	701a      	strb	r2, [r3, #0]
	osDelay(numatic_insp_ctr - insPause_vale);
 800421e:	4b51      	ldr	r3, [pc, #324]	@ (8004364 <VCV_MODE+0x2ec>)
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	4b51      	ldr	r3, [pc, #324]	@ (8004368 <VCV_MODE+0x2f0>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	4618      	mov	r0, r3
 800422a:	f00e f8c6 	bl	80123ba <osDelay>

	end_time_ms = HAL_GetTick();
 800422e:	f008 fa3b 	bl	800c6a8 <HAL_GetTick>
 8004232:	4603      	mov	r3, r0
 8004234:	461a      	mov	r2, r3
 8004236:	4b4d      	ldr	r3, [pc, #308]	@ (800436c <VCV_MODE+0x2f4>)
 8004238:	601a      	str	r2, [r3, #0]
	elapsed_time_ms = end_time_ms - start_time_ms;
 800423a:	4b4c      	ldr	r3, [pc, #304]	@ (800436c <VCV_MODE+0x2f4>)
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	4b45      	ldr	r3, [pc, #276]	@ (8004354 <VCV_MODE+0x2dc>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	4a4a      	ldr	r2, [pc, #296]	@ (8004370 <VCV_MODE+0x2f8>)
 8004246:	6013      	str	r3, [r2, #0]

	PID_CALIBRATE_FLAG = 0;
 8004248:	4b3c      	ldr	r3, [pc, #240]	@ (800433c <VCV_MODE+0x2c4>)
 800424a:	2200      	movs	r2, #0
 800424c:	701a      	strb	r2, [r3, #0]
	//	osTimerStart(Button_clearHandle, (numatic_exp_ctr - 2000));
	PID_FLOW_VAR = result;
 800424e:	4b49      	ldr	r3, [pc, #292]	@ (8004374 <VCV_MODE+0x2fc>)
 8004250:	781a      	ldrb	r2, [r3, #0]
 8004252:	4b49      	ldr	r3, [pc, #292]	@ (8004378 <VCV_MODE+0x300>)
 8004254:	701a      	strb	r2, [r3, #0]
	FLOW_VAR = Q;
 8004256:	4b49      	ldr	r3, [pc, #292]	@ (800437c <VCV_MODE+0x304>)
 8004258:	edd3 7a00 	vldr	s15, [r3]
 800425c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004260:	edc7 7a01 	vstr	s15, [r7, #4]
 8004264:	793b      	ldrb	r3, [r7, #4]
 8004266:	b2da      	uxtb	r2, r3
 8004268:	4b45      	ldr	r3, [pc, #276]	@ (8004380 <VCV_MODE+0x308>)
 800426a:	701a      	strb	r2, [r3, #0]
	previous_tidal = Tidal_vol;
 800426c:	4b35      	ldr	r3, [pc, #212]	@ (8004344 <VCV_MODE+0x2cc>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a44      	ldr	r2, [pc, #272]	@ (8004384 <VCV_MODE+0x30c>)
 8004272:	6013      	str	r3, [r2, #0]
	if (PU_temp_value > 0) {
 8004274:	4b44      	ldr	r3, [pc, #272]	@ (8004388 <VCV_MODE+0x310>)
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00a      	beq.n	8004292 <VCV_MODE+0x21a>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 800427c:	2200      	movs	r2, #0
 800427e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004282:	4835      	ldr	r0, [pc, #212]	@ (8004358 <VCV_MODE+0x2e0>)
 8004284:	f009 fcd8 	bl	800dc38 <HAL_GPIO_WritePin>
		osDelay(insPause_vale);
 8004288:	4b37      	ldr	r3, [pc, #220]	@ (8004368 <VCV_MODE+0x2f0>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4618      	mov	r0, r3
 800428e:	f00e f894 	bl	80123ba <osDelay>
	}
	previous_pressure_first = result2;
 8004292:	4b3e      	ldr	r3, [pc, #248]	@ (800438c <VCV_MODE+0x314>)
 8004294:	781a      	ldrb	r2, [r3, #0]
 8004296:	4b3e      	ldr	r3, [pc, #248]	@ (8004390 <VCV_MODE+0x318>)
 8004298:	701a      	strb	r2, [r3, #0]
	previous_compliance = Compliance_value;
 800429a:	4b3e      	ldr	r3, [pc, #248]	@ (8004394 <VCV_MODE+0x31c>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a3e      	ldr	r2, [pc, #248]	@ (8004398 <VCV_MODE+0x320>)
 80042a0:	6013      	str	r3, [r2, #0]
	VT_UPDATE_FLAG = 1;
 80042a2:	4b25      	ldr	r3, [pc, #148]	@ (8004338 <VCV_MODE+0x2c0>)
 80042a4:	2201      	movs	r2, #1
 80042a6:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 80042a8:	2200      	movs	r2, #0
 80042aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80042ae:	482a      	ldr	r0, [pc, #168]	@ (8004358 <VCV_MODE+0x2e0>)
 80042b0:	f009 fcc2 	bl	800dc38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 80042b4:	2200      	movs	r2, #0
 80042b6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80042ba:	4827      	ldr	r0, [pc, #156]	@ (8004358 <VCV_MODE+0x2e0>)
 80042bc:	f009 fcbc 	bl	800dc38 <HAL_GPIO_WritePin>
	hI = 0;
 80042c0:	4b36      	ldr	r3, [pc, #216]	@ (800439c <VCV_MODE+0x324>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	601a      	str	r2, [r3, #0]
	P_HI = 0;
 80042c6:	4b36      	ldr	r3, [pc, #216]	@ (80043a0 <VCV_MODE+0x328>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	701a      	strb	r2, [r3, #0]
	PhI = 0;
 80042cc:	4b35      	ldr	r3, [pc, #212]	@ (80043a4 <VCV_MODE+0x32c>)
 80042ce:	f04f 0200 	mov.w	r2, #0
 80042d2:	601a      	str	r2, [r3, #0]
	ventro = 0;
 80042d4:	4b34      	ldr	r3, [pc, #208]	@ (80043a8 <VCV_MODE+0x330>)
 80042d6:	f04f 0200 	mov.w	r2, #0
 80042da:	601a      	str	r2, [r3, #0]
	flow2 = 0;
 80042dc:	4b33      	ldr	r3, [pc, #204]	@ (80043ac <VCV_MODE+0x334>)
 80042de:	f04f 0200 	mov.w	r2, #0
 80042e2:	601a      	str	r2, [r3, #0]
	Tidal = 0;
 80042e4:	4b32      	ldr	r3, [pc, #200]	@ (80043b0 <VCV_MODE+0x338>)
 80042e6:	f04f 0200 	mov.w	r2, #0
 80042ea:	601a      	str	r2, [r3, #0]
	Final_T = 0;
 80042ec:	4b31      	ldr	r3, [pc, #196]	@ (80043b4 <VCV_MODE+0x33c>)
 80042ee:	f04f 0200 	mov.w	r2, #0
 80042f2:	601a      	str	r2, [r3, #0]
	PeakP = 0;
 80042f4:	4b30      	ldr	r3, [pc, #192]	@ (80043b8 <VCV_MODE+0x340>)
 80042f6:	f04f 0200 	mov.w	r2, #0
 80042fa:	601a      	str	r2, [r3, #0]
	Resistance = 0;
 80042fc:	4b2f      	ldr	r3, [pc, #188]	@ (80043bc <VCV_MODE+0x344>)
 80042fe:	f04f 0200 	mov.w	r2, #0
 8004302:	601a      	str	r2, [r3, #0]
	Peep_control_flag = 1;
 8004304:	4b2e      	ldr	r3, [pc, #184]	@ (80043c0 <VCV_MODE+0x348>)
 8004306:	2201      	movs	r2, #1
 8004308:	701a      	strb	r2, [r3, #0]
	exp_cycle_counter++;
 800430a:	4b2e      	ldr	r3, [pc, #184]	@ (80043c4 <VCV_MODE+0x34c>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	3301      	adds	r3, #1
 8004310:	4a2c      	ldr	r2, [pc, #176]	@ (80043c4 <VCV_MODE+0x34c>)
 8004312:	6013      	str	r3, [r2, #0]
	osDelay(numatic_exp_ctr);
 8004314:	4b2c      	ldr	r3, [pc, #176]	@ (80043c8 <VCV_MODE+0x350>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4618      	mov	r0, r3
 800431a:	f00e f84e 	bl	80123ba <osDelay>
	Peep_control_flag = 0;
 800431e:	4b28      	ldr	r3, [pc, #160]	@ (80043c0 <VCV_MODE+0x348>)
 8004320:	2200      	movs	r2, #0
 8004322:	701a      	strb	r2, [r3, #0]
	Peep_live_pressure(result2);
 8004324:	4b19      	ldr	r3, [pc, #100]	@ (800438c <VCV_MODE+0x314>)
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	4618      	mov	r0, r3
 800432a:	f7ff fe09 	bl	8003f40 <Peep_live_pressure>
}
 800432e:	bf00      	nop
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	bd90      	pop	{r4, r7, pc}
 8004336:	bf00      	nop
 8004338:	20001414 	.word	0x20001414
 800433c:	20001416 	.word	0x20001416
 8004340:	20000044 	.word	0x20000044
 8004344:	200013b4 	.word	0x200013b4
 8004348:	20001428 	.word	0x20001428
 800434c:	3fe00000 	.word	0x3fe00000
 8004350:	20000f40 	.word	0x20000f40
 8004354:	200019b4 	.word	0x200019b4
 8004358:	40021000 	.word	0x40021000
 800435c:	200019c0 	.word	0x200019c0
 8004360:	200019c1 	.word	0x200019c1
 8004364:	20001930 	.word	0x20001930
 8004368:	20000160 	.word	0x20000160
 800436c:	200019b8 	.word	0x200019b8
 8004370:	200019bc 	.word	0x200019bc
 8004374:	20001a8f 	.word	0x20001a8f
 8004378:	2000141c 	.word	0x2000141c
 800437c:	20001354 	.word	0x20001354
 8004380:	20001370 	.word	0x20001370
 8004384:	20001404 	.word	0x20001404
 8004388:	20001967 	.word	0x20001967
 800438c:	20001a90 	.word	0x20001a90
 8004390:	20001b28 	.word	0x20001b28
 8004394:	20001b34 	.word	0x20001b34
 8004398:	20001408 	.word	0x20001408
 800439c:	20000028 	.word	0x20000028
 80043a0:	2000191c 	.word	0x2000191c
 80043a4:	20001920 	.word	0x20001920
 80043a8:	20001b44 	.word	0x20001b44
 80043ac:	200013c4 	.word	0x200013c4
 80043b0:	20001918 	.word	0x20001918
 80043b4:	200013e8 	.word	0x200013e8
 80043b8:	200013f8 	.word	0x200013f8
 80043bc:	20001400 	.word	0x20001400
 80043c0:	20001a01 	.word	0x20001a01
 80043c4:	2000192c 	.word	0x2000192c
 80043c8:	20001934 	.word	0x20001934

080043cc <PCV_MODE>:
//		}
//	}
//
//}

void PCV_MODE(void) {
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0

	PLR_temp_value = PLR_value;
 80043d0:	4b3c      	ldr	r3, [pc, #240]	@ (80044c4 <PCV_MODE+0xf8>)
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	461a      	mov	r2, r3
 80043d6:	4b3c      	ldr	r3, [pc, #240]	@ (80044c8 <PCV_MODE+0xfc>)
 80043d8:	601a      	str	r2, [r3, #0]
	VT_UPDATE_FLAG = 0;
 80043da:	4b3c      	ldr	r3, [pc, #240]	@ (80044cc <PCV_MODE+0x100>)
 80043dc:	2200      	movs	r2, #0
 80043de:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 80043e0:	2201      	movs	r2, #1
 80043e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80043e6:	483a      	ldr	r0, [pc, #232]	@ (80044d0 <PCV_MODE+0x104>)
 80043e8:	f009 fc26 	bl	800dc38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 80043ec:	2201      	movs	r2, #1
 80043ee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80043f2:	4837      	ldr	r0, [pc, #220]	@ (80044d0 <PCV_MODE+0x104>)
 80043f4:	f009 fc20 	bl	800dc38 <HAL_GPIO_WritePin>
	osDelay(numatic_insp_ctr - insPause_vale);
 80043f8:	4b36      	ldr	r3, [pc, #216]	@ (80044d4 <PCV_MODE+0x108>)
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	4b36      	ldr	r3, [pc, #216]	@ (80044d8 <PCV_MODE+0x10c>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	4618      	mov	r0, r3
 8004404:	f00d ffd9 	bl	80123ba <osDelay>
	PID_CALIBRATE_FLAG = 1;
 8004408:	4b34      	ldr	r3, [pc, #208]	@ (80044dc <PCV_MODE+0x110>)
 800440a:	2201      	movs	r2, #1
 800440c:	701a      	strb	r2, [r3, #0]
	PID_FLOW_VAR = result;
 800440e:	4b34      	ldr	r3, [pc, #208]	@ (80044e0 <PCV_MODE+0x114>)
 8004410:	781a      	ldrb	r2, [r3, #0]
 8004412:	4b34      	ldr	r3, [pc, #208]	@ (80044e4 <PCV_MODE+0x118>)
 8004414:	701a      	strb	r2, [r3, #0]
	if (PU_temp_value > 0) {
 8004416:	4b34      	ldr	r3, [pc, #208]	@ (80044e8 <PCV_MODE+0x11c>)
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00a      	beq.n	8004434 <PCV_MODE+0x68>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 800441e:	2200      	movs	r2, #0
 8004420:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004424:	482a      	ldr	r0, [pc, #168]	@ (80044d0 <PCV_MODE+0x104>)
 8004426:	f009 fc07 	bl	800dc38 <HAL_GPIO_WritePin>
		osDelay(insPause_vale);
 800442a:	4b2b      	ldr	r3, [pc, #172]	@ (80044d8 <PCV_MODE+0x10c>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4618      	mov	r0, r3
 8004430:	f00d ffc3 	bl	80123ba <osDelay>
	}
	previous_pressure_first = result2;
 8004434:	4b2d      	ldr	r3, [pc, #180]	@ (80044ec <PCV_MODE+0x120>)
 8004436:	781a      	ldrb	r2, [r3, #0]
 8004438:	4b2d      	ldr	r3, [pc, #180]	@ (80044f0 <PCV_MODE+0x124>)
 800443a:	701a      	strb	r2, [r3, #0]
	VT_UPDATE_FLAG = 1;
 800443c:	4b23      	ldr	r3, [pc, #140]	@ (80044cc <PCV_MODE+0x100>)
 800443e:	2201      	movs	r2, #1
 8004440:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8004442:	2200      	movs	r2, #0
 8004444:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004448:	4821      	ldr	r0, [pc, #132]	@ (80044d0 <PCV_MODE+0x104>)
 800444a:	f009 fbf5 	bl	800dc38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 800444e:	2200      	movs	r2, #0
 8004450:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004454:	481e      	ldr	r0, [pc, #120]	@ (80044d0 <PCV_MODE+0x104>)
 8004456:	f009 fbef 	bl	800dc38 <HAL_GPIO_WritePin>
	hI = 0;
 800445a:	4b26      	ldr	r3, [pc, #152]	@ (80044f4 <PCV_MODE+0x128>)
 800445c:	2200      	movs	r2, #0
 800445e:	601a      	str	r2, [r3, #0]
	P_HI = 0;
 8004460:	4b25      	ldr	r3, [pc, #148]	@ (80044f8 <PCV_MODE+0x12c>)
 8004462:	2200      	movs	r2, #0
 8004464:	701a      	strb	r2, [r3, #0]
	PhI = 0;
 8004466:	4b25      	ldr	r3, [pc, #148]	@ (80044fc <PCV_MODE+0x130>)
 8004468:	f04f 0200 	mov.w	r2, #0
 800446c:	601a      	str	r2, [r3, #0]
	ventro = 0;
 800446e:	4b24      	ldr	r3, [pc, #144]	@ (8004500 <PCV_MODE+0x134>)
 8004470:	f04f 0200 	mov.w	r2, #0
 8004474:	601a      	str	r2, [r3, #0]
	flow2 = 0;
 8004476:	4b23      	ldr	r3, [pc, #140]	@ (8004504 <PCV_MODE+0x138>)
 8004478:	f04f 0200 	mov.w	r2, #0
 800447c:	601a      	str	r2, [r3, #0]
	Tidal = 0;
 800447e:	4b22      	ldr	r3, [pc, #136]	@ (8004508 <PCV_MODE+0x13c>)
 8004480:	f04f 0200 	mov.w	r2, #0
 8004484:	601a      	str	r2, [r3, #0]
	PeakP = 0;
 8004486:	4b21      	ldr	r3, [pc, #132]	@ (800450c <PCV_MODE+0x140>)
 8004488:	f04f 0200 	mov.w	r2, #0
 800448c:	601a      	str	r2, [r3, #0]
	Peep_control_flag = 1;
 800448e:	4b20      	ldr	r3, [pc, #128]	@ (8004510 <PCV_MODE+0x144>)
 8004490:	2201      	movs	r2, #1
 8004492:	701a      	strb	r2, [r3, #0]
	exp_cycle_counter++;
 8004494:	4b1f      	ldr	r3, [pc, #124]	@ (8004514 <PCV_MODE+0x148>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	3301      	adds	r3, #1
 800449a:	4a1e      	ldr	r2, [pc, #120]	@ (8004514 <PCV_MODE+0x148>)
 800449c:	6013      	str	r3, [r2, #0]
	osDelay(numatic_exp_ctr);
 800449e:	4b1e      	ldr	r3, [pc, #120]	@ (8004518 <PCV_MODE+0x14c>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f00d ff89 	bl	80123ba <osDelay>
	Peep_control_flag = 0;
 80044a8:	4b19      	ldr	r3, [pc, #100]	@ (8004510 <PCV_MODE+0x144>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	701a      	strb	r2, [r3, #0]
	Peep_live_pressure(result2);
 80044ae:	4b0f      	ldr	r3, [pc, #60]	@ (80044ec <PCV_MODE+0x120>)
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7ff fd44 	bl	8003f40 <Peep_live_pressure>
	PID_CALIBRATE_FLAG = 0;
 80044b8:	4b08      	ldr	r3, [pc, #32]	@ (80044dc <PCV_MODE+0x110>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	701a      	strb	r2, [r3, #0]
}
 80044be:	bf00      	nop
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	20000036 	.word	0x20000036
 80044c8:	20000048 	.word	0x20000048
 80044cc:	20001414 	.word	0x20001414
 80044d0:	40021000 	.word	0x40021000
 80044d4:	20001930 	.word	0x20001930
 80044d8:	20000160 	.word	0x20000160
 80044dc:	20001416 	.word	0x20001416
 80044e0:	20001a8f 	.word	0x20001a8f
 80044e4:	2000141c 	.word	0x2000141c
 80044e8:	20001967 	.word	0x20001967
 80044ec:	20001a90 	.word	0x20001a90
 80044f0:	20001b28 	.word	0x20001b28
 80044f4:	20000028 	.word	0x20000028
 80044f8:	2000191c 	.word	0x2000191c
 80044fc:	20001920 	.word	0x20001920
 8004500:	20001b44 	.word	0x20001b44
 8004504:	200013c4 	.word	0x200013c4
 8004508:	20001918 	.word	0x20001918
 800450c:	200013f8 	.word	0x200013f8
 8004510:	20001a01 	.word	0x20001a01
 8004514:	2000192c 	.word	0x2000192c
 8004518:	20001934 	.word	0x20001934

0800451c <Mandatory_MODE>:
int Mandatory_MODE(void) {
 800451c:	b590      	push	{r4, r7, lr}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0

	VT_UPDATE_FLAG = 0;
 8004522:	4b79      	ldr	r3, [pc, #484]	@ (8004708 <Mandatory_MODE+0x1ec>)
 8004524:	2200      	movs	r2, #0
 8004526:	701a      	strb	r2, [r3, #0]
	PID_CALIBRATE_FLAG = 1;
 8004528:	4b78      	ldr	r3, [pc, #480]	@ (800470c <Mandatory_MODE+0x1f0>)
 800452a:	2201      	movs	r2, #1
 800452c:	701a      	strb	r2, [r3, #0]
	Spontaneous_FLAG = 0;
 800452e:	4b78      	ldr	r3, [pc, #480]	@ (8004710 <Mandatory_MODE+0x1f4>)
 8004530:	2200      	movs	r2, #0
 8004532:	701a      	strb	r2, [r3, #0]

	if(vt_temp_value<= 90){
 8004534:	4b77      	ldr	r3, [pc, #476]	@ (8004714 <Mandatory_MODE+0x1f8>)
 8004536:	881b      	ldrh	r3, [r3, #0]
 8004538:	2b5a      	cmp	r3, #90	@ 0x5a
 800453a:	d803      	bhi.n	8004544 <Mandatory_MODE+0x28>
		PID_CALIBRATE_FLAG = 1;
 800453c:	4b73      	ldr	r3, [pc, #460]	@ (800470c <Mandatory_MODE+0x1f0>)
 800453e:	2201      	movs	r2, #1
 8004540:	701a      	strb	r2, [r3, #0]
 8004542:	e0a3      	b.n	800468c <Mandatory_MODE+0x170>
	}
	else if ((((vt_temp_value - Tidal_vol) <= 15) && ((vt_temp_value - Tidal_vol) >= 0)) ||
 8004544:	4b73      	ldr	r3, [pc, #460]	@ (8004714 <Mandatory_MODE+0x1f8>)
 8004546:	881b      	ldrh	r3, [r3, #0]
 8004548:	ee07 3a90 	vmov	s15, r3
 800454c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004550:	4b71      	ldr	r3, [pc, #452]	@ (8004718 <Mandatory_MODE+0x1fc>)
 8004552:	edd3 7a00 	vldr	s15, [r3]
 8004556:	ee77 7a67 	vsub.f32	s15, s14, s15
 800455a:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 800455e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004566:	d80f      	bhi.n	8004588 <Mandatory_MODE+0x6c>
 8004568:	4b6a      	ldr	r3, [pc, #424]	@ (8004714 <Mandatory_MODE+0x1f8>)
 800456a:	881b      	ldrh	r3, [r3, #0]
 800456c:	ee07 3a90 	vmov	s15, r3
 8004570:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004574:	4b68      	ldr	r3, [pc, #416]	@ (8004718 <Mandatory_MODE+0x1fc>)
 8004576:	edd3 7a00 	vldr	s15, [r3]
 800457a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800457e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004586:	da21      	bge.n	80045cc <Mandatory_MODE+0xb0>
			(((Tidal_vol - vt_temp_value) <= 15) && ((Tidal_vol - vt_temp_value) >= 0))) {
 8004588:	4b63      	ldr	r3, [pc, #396]	@ (8004718 <Mandatory_MODE+0x1fc>)
 800458a:	ed93 7a00 	vldr	s14, [r3]
 800458e:	4b61      	ldr	r3, [pc, #388]	@ (8004714 <Mandatory_MODE+0x1f8>)
 8004590:	881b      	ldrh	r3, [r3, #0]
 8004592:	ee07 3a90 	vmov	s15, r3
 8004596:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800459a:	ee77 7a67 	vsub.f32	s15, s14, s15
	else if ((((vt_temp_value - Tidal_vol) <= 15) && ((vt_temp_value - Tidal_vol) >= 0)) ||
 800459e:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 80045a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045aa:	d86f      	bhi.n	800468c <Mandatory_MODE+0x170>
			(((Tidal_vol - vt_temp_value) <= 15) && ((Tidal_vol - vt_temp_value) >= 0))) {
 80045ac:	4b5a      	ldr	r3, [pc, #360]	@ (8004718 <Mandatory_MODE+0x1fc>)
 80045ae:	ed93 7a00 	vldr	s14, [r3]
 80045b2:	4b58      	ldr	r3, [pc, #352]	@ (8004714 <Mandatory_MODE+0x1f8>)
 80045b4:	881b      	ldrh	r3, [r3, #0]
 80045b6:	ee07 3a90 	vmov	s15, r3
 80045ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80045c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045ca:	db5f      	blt.n	800468c <Mandatory_MODE+0x170>
		PID_CALIBRATE_FLAG = 0;
 80045cc:	4b4f      	ldr	r3, [pc, #316]	@ (800470c <Mandatory_MODE+0x1f0>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	701a      	strb	r2, [r3, #0]
		//		user_flowe = user_flowe + 1;
		if(vt_temp_value < Tidal_vol){
 80045d2:	4b50      	ldr	r3, [pc, #320]	@ (8004714 <Mandatory_MODE+0x1f8>)
 80045d4:	881b      	ldrh	r3, [r3, #0]
 80045d6:	ee07 3a90 	vmov	s15, r3
 80045da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045de:	4b4e      	ldr	r3, [pc, #312]	@ (8004718 <Mandatory_MODE+0x1fc>)
 80045e0:	edd3 7a00 	vldr	s15, [r3]
 80045e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045ec:	d520      	bpl.n	8004630 <Mandatory_MODE+0x114>
			if (vt_temp_value != Tidal_vol) {
 80045ee:	4b49      	ldr	r3, [pc, #292]	@ (8004714 <Mandatory_MODE+0x1f8>)
 80045f0:	881b      	ldrh	r3, [r3, #0]
 80045f2:	ee07 3a90 	vmov	s15, r3
 80045f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045fa:	4b47      	ldr	r3, [pc, #284]	@ (8004718 <Mandatory_MODE+0x1fc>)
 80045fc:	edd3 7a00 	vldr	s15, [r3]
 8004600:	eeb4 7a67 	vcmp.f32	s14, s15
 8004604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004608:	d040      	beq.n	800468c <Mandatory_MODE+0x170>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PIDOut - 0.5);
 800460a:	4b44      	ldr	r3, [pc, #272]	@ (800471c <Mandatory_MODE+0x200>)
 800460c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004610:	f04f 0200 	mov.w	r2, #0
 8004614:	4b42      	ldr	r3, [pc, #264]	@ (8004720 <Mandatory_MODE+0x204>)
 8004616:	f7fb fe2f 	bl	8000278 <__aeabi_dsub>
 800461a:	4602      	mov	r2, r0
 800461c:	460b      	mov	r3, r1
 800461e:	4941      	ldr	r1, [pc, #260]	@ (8004724 <Mandatory_MODE+0x208>)
 8004620:	680c      	ldr	r4, [r1, #0]
 8004622:	4610      	mov	r0, r2
 8004624:	4619      	mov	r1, r3
 8004626:	f7fc fab7 	bl	8000b98 <__aeabi_d2uiz>
 800462a:	4603      	mov	r3, r0
 800462c:	6363      	str	r3, [r4, #52]	@ 0x34
 800462e:	e02d      	b.n	800468c <Mandatory_MODE+0x170>
				//				break;
			}
		}else if(vt_temp_value > Tidal_vol){
 8004630:	4b38      	ldr	r3, [pc, #224]	@ (8004714 <Mandatory_MODE+0x1f8>)
 8004632:	881b      	ldrh	r3, [r3, #0]
 8004634:	ee07 3a90 	vmov	s15, r3
 8004638:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800463c:	4b36      	ldr	r3, [pc, #216]	@ (8004718 <Mandatory_MODE+0x1fc>)
 800463e:	edd3 7a00 	vldr	s15, [r3]
 8004642:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800464a:	dd1f      	ble.n	800468c <Mandatory_MODE+0x170>
			if (vt_temp_value != Tidal_vol) {
 800464c:	4b31      	ldr	r3, [pc, #196]	@ (8004714 <Mandatory_MODE+0x1f8>)
 800464e:	881b      	ldrh	r3, [r3, #0]
 8004650:	ee07 3a90 	vmov	s15, r3
 8004654:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004658:	4b2f      	ldr	r3, [pc, #188]	@ (8004718 <Mandatory_MODE+0x1fc>)
 800465a:	edd3 7a00 	vldr	s15, [r3]
 800465e:	eeb4 7a67 	vcmp.f32	s14, s15
 8004662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004666:	d011      	beq.n	800468c <Mandatory_MODE+0x170>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PIDOut + 0.5);
 8004668:	4b2c      	ldr	r3, [pc, #176]	@ (800471c <Mandatory_MODE+0x200>)
 800466a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800466e:	f04f 0200 	mov.w	r2, #0
 8004672:	4b2b      	ldr	r3, [pc, #172]	@ (8004720 <Mandatory_MODE+0x204>)
 8004674:	f7fb fe02 	bl	800027c <__adddf3>
 8004678:	4602      	mov	r2, r0
 800467a:	460b      	mov	r3, r1
 800467c:	4929      	ldr	r1, [pc, #164]	@ (8004724 <Mandatory_MODE+0x208>)
 800467e:	680c      	ldr	r4, [r1, #0]
 8004680:	4610      	mov	r0, r2
 8004682:	4619      	mov	r1, r3
 8004684:	f7fc fa88 	bl	8000b98 <__aeabi_d2uiz>
 8004688:	4603      	mov	r3, r0
 800468a:	6363      	str	r3, [r4, #52]	@ 0x34
				//				break;
			}
		}
	}
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 800468c:	2201      	movs	r2, #1
 800468e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004692:	4825      	ldr	r0, [pc, #148]	@ (8004728 <Mandatory_MODE+0x20c>)
 8004694:	f009 fad0 	bl	800dc38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8004698:	2201      	movs	r2, #1
 800469a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800469e:	4822      	ldr	r0, [pc, #136]	@ (8004728 <Mandatory_MODE+0x20c>)
 80046a0:	f009 faca 	bl	800dc38 <HAL_GPIO_WritePin>
	//	holi = 1;
	osDelay(numatic_insp_ctr);
 80046a4:	4b21      	ldr	r3, [pc, #132]	@ (800472c <Mandatory_MODE+0x210>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4618      	mov	r0, r3
 80046aa:	f00d fe86 	bl	80123ba <osDelay>

	PID_CALIBRATE_FLAG = 0;
 80046ae:	4b17      	ldr	r3, [pc, #92]	@ (800470c <Mandatory_MODE+0x1f0>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	701a      	strb	r2, [r3, #0]
	//	osTimerStart(Button_clearHandle, (numatic_exp_ctr - 2000));
	PID_FLOW_VAR = result;
 80046b4:	4b1e      	ldr	r3, [pc, #120]	@ (8004730 <Mandatory_MODE+0x214>)
 80046b6:	781a      	ldrb	r2, [r3, #0]
 80046b8:	4b1e      	ldr	r3, [pc, #120]	@ (8004734 <Mandatory_MODE+0x218>)
 80046ba:	701a      	strb	r2, [r3, #0]
	FLOW_VAR = Q;
 80046bc:	4b1e      	ldr	r3, [pc, #120]	@ (8004738 <Mandatory_MODE+0x21c>)
 80046be:	edd3 7a00 	vldr	s15, [r3]
 80046c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046c6:	edc7 7a01 	vstr	s15, [r7, #4]
 80046ca:	793b      	ldrb	r3, [r7, #4]
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	4b1b      	ldr	r3, [pc, #108]	@ (800473c <Mandatory_MODE+0x220>)
 80046d0:	701a      	strb	r2, [r3, #0]
	previous_pressure_first = result2;
 80046d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004740 <Mandatory_MODE+0x224>)
 80046d4:	781a      	ldrb	r2, [r3, #0]
 80046d6:	4b1b      	ldr	r3, [pc, #108]	@ (8004744 <Mandatory_MODE+0x228>)
 80046d8:	701a      	strb	r2, [r3, #0]
	if (PU_temp_value > 0) {
 80046da:	4b1b      	ldr	r3, [pc, #108]	@ (8004748 <Mandatory_MODE+0x22c>)
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00a      	beq.n	80046f8 <Mandatory_MODE+0x1dc>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 80046e2:	2200      	movs	r2, #0
 80046e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80046e8:	480f      	ldr	r0, [pc, #60]	@ (8004728 <Mandatory_MODE+0x20c>)
 80046ea:	f009 faa5 	bl	800dc38 <HAL_GPIO_WritePin>
		osDelay(insPause_vale);
 80046ee:	4b17      	ldr	r3, [pc, #92]	@ (800474c <Mandatory_MODE+0x230>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f00d fe61 	bl	80123ba <osDelay>
	}
	Mandarine();
 80046f8:	f000 f9e0 	bl	8004abc <Mandarine>
	return 1;
 80046fc:	2301      	movs	r3, #1
}
 80046fe:	4618      	mov	r0, r3
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	bd90      	pop	{r4, r7, pc}
 8004706:	bf00      	nop
 8004708:	20001414 	.word	0x20001414
 800470c:	20001416 	.word	0x20001416
 8004710:	200019b1 	.word	0x200019b1
 8004714:	20000044 	.word	0x20000044
 8004718:	200013b4 	.word	0x200013b4
 800471c:	20001428 	.word	0x20001428
 8004720:	3fe00000 	.word	0x3fe00000
 8004724:	20000f40 	.word	0x20000f40
 8004728:	40021000 	.word	0x40021000
 800472c:	20001930 	.word	0x20001930
 8004730:	20001a8f 	.word	0x20001a8f
 8004734:	2000141c 	.word	0x2000141c
 8004738:	20001354 	.word	0x20001354
 800473c:	20001370 	.word	0x20001370
 8004740:	20001a90 	.word	0x20001a90
 8004744:	20001b28 	.word	0x20001b28
 8004748:	20001967 	.word	0x20001967
 800474c:	20000160 	.word	0x20000160

08004750 <Spontaneous_MODE>:
void Spontaneous_MODE(void){
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
	TRG_value = PIP_value;
 8004756:	4b49      	ldr	r3, [pc, #292]	@ (800487c <Spontaneous_MODE+0x12c>)
 8004758:	f993 3000 	ldrsb.w	r3, [r3]
 800475c:	461a      	mov	r2, r3
 800475e:	4b48      	ldr	r3, [pc, #288]	@ (8004880 <Spontaneous_MODE+0x130>)
 8004760:	601a      	str	r2, [r3, #0]
	if (Qin>=(100-TRG_value)){
 8004762:	4b47      	ldr	r3, [pc, #284]	@ (8004880 <Spontaneous_MODE+0x130>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f1c3 0264 	rsb	r2, r3, #100	@ 0x64
 800476a:	4b46      	ldr	r3, [pc, #280]	@ (8004884 <Spontaneous_MODE+0x134>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	429a      	cmp	r2, r3
 8004770:	dc33      	bgt.n	80047da <Spontaneous_MODE+0x8a>
		VT_UPDATE_FLAG = 0;
 8004772:	4b45      	ldr	r3, [pc, #276]	@ (8004888 <Spontaneous_MODE+0x138>)
 8004774:	2200      	movs	r2, #0
 8004776:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 8004778:	2201      	movs	r2, #1
 800477a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800477e:	4843      	ldr	r0, [pc, #268]	@ (800488c <Spontaneous_MODE+0x13c>)
 8004780:	f009 fa5a 	bl	800dc38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8004784:	2201      	movs	r2, #1
 8004786:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800478a:	4840      	ldr	r0, [pc, #256]	@ (800488c <Spontaneous_MODE+0x13c>)
 800478c:	f009 fa54 	bl	800dc38 <HAL_GPIO_WritePin>
		//		osDelay(numatic_insp_ctr - insPause_vale);
		PID_CALIBRATE_FLAG = 1;
 8004790:	4b3f      	ldr	r3, [pc, #252]	@ (8004890 <Spontaneous_MODE+0x140>)
 8004792:	2201      	movs	r2, #1
 8004794:	701a      	strb	r2, [r3, #0]
		//		PID_FLOW_VAR = result;
		FLOW_VAR = Q;
 8004796:	4b3f      	ldr	r3, [pc, #252]	@ (8004894 <Spontaneous_MODE+0x144>)
 8004798:	edd3 7a00 	vldr	s15, [r3]
 800479c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047a0:	edc7 7a01 	vstr	s15, [r7, #4]
 80047a4:	793b      	ldrb	r3, [r7, #4]
 80047a6:	b2da      	uxtb	r2, r3
 80047a8:	4b3b      	ldr	r3, [pc, #236]	@ (8004898 <Spontaneous_MODE+0x148>)
 80047aa:	701a      	strb	r2, [r3, #0]
		//		if (result2>PS_temp_value){
		//			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
		//			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
		//			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 75);
		//		}
		if (PU_temp_value > 0) {
 80047ac:	4b3b      	ldr	r3, [pc, #236]	@ (800489c <Spontaneous_MODE+0x14c>)
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00a      	beq.n	80047ca <Spontaneous_MODE+0x7a>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 80047b4:	2200      	movs	r2, #0
 80047b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80047ba:	4834      	ldr	r0, [pc, #208]	@ (800488c <Spontaneous_MODE+0x13c>)
 80047bc:	f009 fa3c 	bl	800dc38 <HAL_GPIO_WritePin>
			osDelay(insPause_vale);
 80047c0:	4b37      	ldr	r3, [pc, #220]	@ (80048a0 <Spontaneous_MODE+0x150>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4618      	mov	r0, r3
 80047c6:	f00d fdf8 	bl	80123ba <osDelay>

		}
		previous_pressure_first = result2;
 80047ca:	4b36      	ldr	r3, [pc, #216]	@ (80048a4 <Spontaneous_MODE+0x154>)
 80047cc:	781a      	ldrb	r2, [r3, #0]
 80047ce:	4b36      	ldr	r3, [pc, #216]	@ (80048a8 <Spontaneous_MODE+0x158>)
 80047d0:	701a      	strb	r2, [r3, #0]
		sensor_flow_for_vt = 0;
 80047d2:	4b36      	ldr	r3, [pc, #216]	@ (80048ac <Spontaneous_MODE+0x15c>)
 80047d4:	f04f 0200 	mov.w	r2, #0
 80047d8:	601a      	str	r2, [r3, #0]
	}
	//	store2 = prev_pressure_first;
	if (result2>PS_temp_value){
 80047da:	4b32      	ldr	r3, [pc, #200]	@ (80048a4 <Spontaneous_MODE+0x154>)
 80047dc:	781a      	ldrb	r2, [r3, #0]
 80047de:	4b34      	ldr	r3, [pc, #208]	@ (80048b0 <Spontaneous_MODE+0x160>)
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d946      	bls.n	8004874 <Spontaneous_MODE+0x124>
		//		else if (result2>PS_temp_value){
		//	else if(y<(100)){
		VT_UPDATE_FLAG = 1;
 80047e6:	4b28      	ldr	r3, [pc, #160]	@ (8004888 <Spontaneous_MODE+0x138>)
 80047e8:	2201      	movs	r2, #1
 80047ea:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 80047ec:	2200      	movs	r2, #0
 80047ee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80047f2:	4826      	ldr	r0, [pc, #152]	@ (800488c <Spontaneous_MODE+0x13c>)
 80047f4:	f009 fa20 	bl	800dc38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 80047f8:	2200      	movs	r2, #0
 80047fa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80047fe:	4823      	ldr	r0, [pc, #140]	@ (800488c <Spontaneous_MODE+0x13c>)
 8004800:	f009 fa1a 	bl	800dc38 <HAL_GPIO_WritePin>
		Peep_control_flag = 1;
 8004804:	4b2b      	ldr	r3, [pc, #172]	@ (80048b4 <Spontaneous_MODE+0x164>)
 8004806:	2201      	movs	r2, #1
 8004808:	701a      	strb	r2, [r3, #0]
		exp_cycle_counter++;
 800480a:	4b2b      	ldr	r3, [pc, #172]	@ (80048b8 <Spontaneous_MODE+0x168>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	3301      	adds	r3, #1
 8004810:	4a29      	ldr	r2, [pc, #164]	@ (80048b8 <Spontaneous_MODE+0x168>)
 8004812:	6013      	str	r3, [r2, #0]
		hI = 0;
 8004814:	4b29      	ldr	r3, [pc, #164]	@ (80048bc <Spontaneous_MODE+0x16c>)
 8004816:	2200      	movs	r2, #0
 8004818:	601a      	str	r2, [r3, #0]
		P_HI = 0;
 800481a:	4b29      	ldr	r3, [pc, #164]	@ (80048c0 <Spontaneous_MODE+0x170>)
 800481c:	2200      	movs	r2, #0
 800481e:	701a      	strb	r2, [r3, #0]
		PhI = 0;
 8004820:	4b28      	ldr	r3, [pc, #160]	@ (80048c4 <Spontaneous_MODE+0x174>)
 8004822:	f04f 0200 	mov.w	r2, #0
 8004826:	601a      	str	r2, [r3, #0]
		ventro = 0;
 8004828:	4b27      	ldr	r3, [pc, #156]	@ (80048c8 <Spontaneous_MODE+0x178>)
 800482a:	f04f 0200 	mov.w	r2, #0
 800482e:	601a      	str	r2, [r3, #0]
		flow2 = 0;
 8004830:	4b26      	ldr	r3, [pc, #152]	@ (80048cc <Spontaneous_MODE+0x17c>)
 8004832:	f04f 0200 	mov.w	r2, #0
 8004836:	601a      	str	r2, [r3, #0]
		Tidal = 0;
 8004838:	4b25      	ldr	r3, [pc, #148]	@ (80048d0 <Spontaneous_MODE+0x180>)
 800483a:	f04f 0200 	mov.w	r2, #0
 800483e:	601a      	str	r2, [r3, #0]
		Final_T = 0;
 8004840:	4b24      	ldr	r3, [pc, #144]	@ (80048d4 <Spontaneous_MODE+0x184>)
 8004842:	f04f 0200 	mov.w	r2, #0
 8004846:	601a      	str	r2, [r3, #0]
		PeakP = 0;
 8004848:	4b23      	ldr	r3, [pc, #140]	@ (80048d8 <Spontaneous_MODE+0x188>)
 800484a:	f04f 0200 	mov.w	r2, #0
 800484e:	601a      	str	r2, [r3, #0]
		Resistance = 0;
 8004850:	4b22      	ldr	r3, [pc, #136]	@ (80048dc <Spontaneous_MODE+0x18c>)
 8004852:	f04f 0200 	mov.w	r2, #0
 8004856:	601a      	str	r2, [r3, #0]
		osDelay(200);
 8004858:	20c8      	movs	r0, #200	@ 0xc8
 800485a:	f00d fdae 	bl	80123ba <osDelay>
		Peep_control_flag = 0;
 800485e:	4b15      	ldr	r3, [pc, #84]	@ (80048b4 <Spontaneous_MODE+0x164>)
 8004860:	2200      	movs	r2, #0
 8004862:	701a      	strb	r2, [r3, #0]
		Peep_live_pressure(result2);
 8004864:	4b0f      	ldr	r3, [pc, #60]	@ (80048a4 <Spontaneous_MODE+0x154>)
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	4618      	mov	r0, r3
 800486a:	f7ff fb69 	bl	8003f40 <Peep_live_pressure>
		PID_CALIBRATE_FLAG = 0;
 800486e:	4b08      	ldr	r3, [pc, #32]	@ (8004890 <Spontaneous_MODE+0x140>)
 8004870:	2200      	movs	r2, #0
 8004872:	701a      	strb	r2, [r3, #0]
	}
}
 8004874:	bf00      	nop
 8004876:	3708      	adds	r7, #8
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	20000038 	.word	0x20000038
 8004880:	20001960 	.word	0x20001960
 8004884:	20001358 	.word	0x20001358
 8004888:	20001414 	.word	0x20001414
 800488c:	40021000 	.word	0x40021000
 8004890:	20001416 	.word	0x20001416
 8004894:	20001354 	.word	0x20001354
 8004898:	20001370 	.word	0x20001370
 800489c:	20001967 	.word	0x20001967
 80048a0:	20000160 	.word	0x20000160
 80048a4:	20001a90 	.word	0x20001a90
 80048a8:	20001b28 	.word	0x20001b28
 80048ac:	20001418 	.word	0x20001418
 80048b0:	20001969 	.word	0x20001969
 80048b4:	20001a01 	.word	0x20001a01
 80048b8:	2000192c 	.word	0x2000192c
 80048bc:	20000028 	.word	0x20000028
 80048c0:	2000191c 	.word	0x2000191c
 80048c4:	20001920 	.word	0x20001920
 80048c8:	20001b44 	.word	0x20001b44
 80048cc:	200013c4 	.word	0x200013c4
 80048d0:	20001918 	.word	0x20001918
 80048d4:	200013e8 	.word	0x200013e8
 80048d8:	200013f8 	.word	0x200013f8
 80048dc:	20001400 	.word	0x20001400

080048e0 <PSV_MODE>:
void PSV_MODE(void){
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
	//	P_TRG = (PIP_value + result2);
	//	uint8_t store2;
	TRG_value = PIP_value;
 80048e6:	4b4b      	ldr	r3, [pc, #300]	@ (8004a14 <PSV_MODE+0x134>)
 80048e8:	f993 3000 	ldrsb.w	r3, [r3]
 80048ec:	461a      	mov	r2, r3
 80048ee:	4b4a      	ldr	r3, [pc, #296]	@ (8004a18 <PSV_MODE+0x138>)
 80048f0:	601a      	str	r2, [r3, #0]
	if (Qin>=(100-TRG_value)){
 80048f2:	4b49      	ldr	r3, [pc, #292]	@ (8004a18 <PSV_MODE+0x138>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f1c3 0264 	rsb	r2, r3, #100	@ 0x64
 80048fa:	4b48      	ldr	r3, [pc, #288]	@ (8004a1c <PSV_MODE+0x13c>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	429a      	cmp	r2, r3
 8004900:	dc37      	bgt.n	8004972 <PSV_MODE+0x92>
		VT_UPDATE_FLAG = 0;
 8004902:	4b47      	ldr	r3, [pc, #284]	@ (8004a20 <PSV_MODE+0x140>)
 8004904:	2200      	movs	r2, #0
 8004906:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 8004908:	2201      	movs	r2, #1
 800490a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800490e:	4845      	ldr	r0, [pc, #276]	@ (8004a24 <PSV_MODE+0x144>)
 8004910:	f009 f992 	bl	800dc38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8004914:	2201      	movs	r2, #1
 8004916:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800491a:	4842      	ldr	r0, [pc, #264]	@ (8004a24 <PSV_MODE+0x144>)
 800491c:	f009 f98c 	bl	800dc38 <HAL_GPIO_WritePin>
		//		osDelay(numatic_insp_ctr - insPause_vale);
		PID_CALIBRATE_FLAG = 1;
 8004920:	4b41      	ldr	r3, [pc, #260]	@ (8004a28 <PSV_MODE+0x148>)
 8004922:	2201      	movs	r2, #1
 8004924:	701a      	strb	r2, [r3, #0]
		PID_FLOW_VAR = result;
 8004926:	4b41      	ldr	r3, [pc, #260]	@ (8004a2c <PSV_MODE+0x14c>)
 8004928:	781a      	ldrb	r2, [r3, #0]
 800492a:	4b41      	ldr	r3, [pc, #260]	@ (8004a30 <PSV_MODE+0x150>)
 800492c:	701a      	strb	r2, [r3, #0]
		FLOW_VAR = Q;
 800492e:	4b41      	ldr	r3, [pc, #260]	@ (8004a34 <PSV_MODE+0x154>)
 8004930:	edd3 7a00 	vldr	s15, [r3]
 8004934:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004938:	edc7 7a01 	vstr	s15, [r7, #4]
 800493c:	793b      	ldrb	r3, [r7, #4]
 800493e:	b2da      	uxtb	r2, r3
 8004940:	4b3d      	ldr	r3, [pc, #244]	@ (8004a38 <PSV_MODE+0x158>)
 8004942:	701a      	strb	r2, [r3, #0]
		//		if (result2>PS_temp_value){
		//			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
		//			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
		//			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 75);
		//		}
		if (PU_temp_value > 0) {
 8004944:	4b3d      	ldr	r3, [pc, #244]	@ (8004a3c <PSV_MODE+0x15c>)
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00a      	beq.n	8004962 <PSV_MODE+0x82>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 800494c:	2200      	movs	r2, #0
 800494e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004952:	4834      	ldr	r0, [pc, #208]	@ (8004a24 <PSV_MODE+0x144>)
 8004954:	f009 f970 	bl	800dc38 <HAL_GPIO_WritePin>
			osDelay(insPause_vale);
 8004958:	4b39      	ldr	r3, [pc, #228]	@ (8004a40 <PSV_MODE+0x160>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4618      	mov	r0, r3
 800495e:	f00d fd2c 	bl	80123ba <osDelay>

		}
		previous_pressure_first = result2;
 8004962:	4b38      	ldr	r3, [pc, #224]	@ (8004a44 <PSV_MODE+0x164>)
 8004964:	781a      	ldrb	r2, [r3, #0]
 8004966:	4b38      	ldr	r3, [pc, #224]	@ (8004a48 <PSV_MODE+0x168>)
 8004968:	701a      	strb	r2, [r3, #0]
		sensor_flow_for_vt = 0;
 800496a:	4b38      	ldr	r3, [pc, #224]	@ (8004a4c <PSV_MODE+0x16c>)
 800496c:	f04f 0200 	mov.w	r2, #0
 8004970:	601a      	str	r2, [r3, #0]
	}
	//	store2 = prev_pressure_first;
	if (result2>PS_temp_value){
 8004972:	4b34      	ldr	r3, [pc, #208]	@ (8004a44 <PSV_MODE+0x164>)
 8004974:	781a      	ldrb	r2, [r3, #0]
 8004976:	4b36      	ldr	r3, [pc, #216]	@ (8004a50 <PSV_MODE+0x170>)
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	429a      	cmp	r2, r3
 800497c:	d946      	bls.n	8004a0c <PSV_MODE+0x12c>
		//		else if (result2>PS_temp_value){
		//	else if(y<(100)){
		VT_UPDATE_FLAG = 1;
 800497e:	4b28      	ldr	r3, [pc, #160]	@ (8004a20 <PSV_MODE+0x140>)
 8004980:	2201      	movs	r2, #1
 8004982:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8004984:	2200      	movs	r2, #0
 8004986:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800498a:	4826      	ldr	r0, [pc, #152]	@ (8004a24 <PSV_MODE+0x144>)
 800498c:	f009 f954 	bl	800dc38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8004990:	2200      	movs	r2, #0
 8004992:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004996:	4823      	ldr	r0, [pc, #140]	@ (8004a24 <PSV_MODE+0x144>)
 8004998:	f009 f94e 	bl	800dc38 <HAL_GPIO_WritePin>
		Peep_control_flag = 1;
 800499c:	4b2d      	ldr	r3, [pc, #180]	@ (8004a54 <PSV_MODE+0x174>)
 800499e:	2201      	movs	r2, #1
 80049a0:	701a      	strb	r2, [r3, #0]
		exp_cycle_counter++;
 80049a2:	4b2d      	ldr	r3, [pc, #180]	@ (8004a58 <PSV_MODE+0x178>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	3301      	adds	r3, #1
 80049a8:	4a2b      	ldr	r2, [pc, #172]	@ (8004a58 <PSV_MODE+0x178>)
 80049aa:	6013      	str	r3, [r2, #0]
		hI = 0;
 80049ac:	4b2b      	ldr	r3, [pc, #172]	@ (8004a5c <PSV_MODE+0x17c>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	601a      	str	r2, [r3, #0]
		P_HI = 0;
 80049b2:	4b2b      	ldr	r3, [pc, #172]	@ (8004a60 <PSV_MODE+0x180>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	701a      	strb	r2, [r3, #0]
		PhI = 0;
 80049b8:	4b2a      	ldr	r3, [pc, #168]	@ (8004a64 <PSV_MODE+0x184>)
 80049ba:	f04f 0200 	mov.w	r2, #0
 80049be:	601a      	str	r2, [r3, #0]
		ventro = 0;
 80049c0:	4b29      	ldr	r3, [pc, #164]	@ (8004a68 <PSV_MODE+0x188>)
 80049c2:	f04f 0200 	mov.w	r2, #0
 80049c6:	601a      	str	r2, [r3, #0]
		flow2 = 0;
 80049c8:	4b28      	ldr	r3, [pc, #160]	@ (8004a6c <PSV_MODE+0x18c>)
 80049ca:	f04f 0200 	mov.w	r2, #0
 80049ce:	601a      	str	r2, [r3, #0]
		Tidal = 0;
 80049d0:	4b27      	ldr	r3, [pc, #156]	@ (8004a70 <PSV_MODE+0x190>)
 80049d2:	f04f 0200 	mov.w	r2, #0
 80049d6:	601a      	str	r2, [r3, #0]
		Final_T = 0;
 80049d8:	4b26      	ldr	r3, [pc, #152]	@ (8004a74 <PSV_MODE+0x194>)
 80049da:	f04f 0200 	mov.w	r2, #0
 80049de:	601a      	str	r2, [r3, #0]
		PeakP = 0;
 80049e0:	4b25      	ldr	r3, [pc, #148]	@ (8004a78 <PSV_MODE+0x198>)
 80049e2:	f04f 0200 	mov.w	r2, #0
 80049e6:	601a      	str	r2, [r3, #0]
		Resistance = 0;
 80049e8:	4b24      	ldr	r3, [pc, #144]	@ (8004a7c <PSV_MODE+0x19c>)
 80049ea:	f04f 0200 	mov.w	r2, #0
 80049ee:	601a      	str	r2, [r3, #0]
		osDelay(200);
 80049f0:	20c8      	movs	r0, #200	@ 0xc8
 80049f2:	f00d fce2 	bl	80123ba <osDelay>
		Peep_control_flag = 0;
 80049f6:	4b17      	ldr	r3, [pc, #92]	@ (8004a54 <PSV_MODE+0x174>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	701a      	strb	r2, [r3, #0]
		Peep_live_pressure(result2);
 80049fc:	4b11      	ldr	r3, [pc, #68]	@ (8004a44 <PSV_MODE+0x164>)
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7ff fa9d 	bl	8003f40 <Peep_live_pressure>
		PID_CALIBRATE_FLAG = 0;
 8004a06:	4b08      	ldr	r3, [pc, #32]	@ (8004a28 <PSV_MODE+0x148>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	701a      	strb	r2, [r3, #0]
	}
}
 8004a0c:	bf00      	nop
 8004a0e:	3708      	adds	r7, #8
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	20000038 	.word	0x20000038
 8004a18:	20001960 	.word	0x20001960
 8004a1c:	20001358 	.word	0x20001358
 8004a20:	20001414 	.word	0x20001414
 8004a24:	40021000 	.word	0x40021000
 8004a28:	20001416 	.word	0x20001416
 8004a2c:	20001a8f 	.word	0x20001a8f
 8004a30:	2000141c 	.word	0x2000141c
 8004a34:	20001354 	.word	0x20001354
 8004a38:	20001370 	.word	0x20001370
 8004a3c:	20001967 	.word	0x20001967
 8004a40:	20000160 	.word	0x20000160
 8004a44:	20001a90 	.word	0x20001a90
 8004a48:	20001b28 	.word	0x20001b28
 8004a4c:	20001418 	.word	0x20001418
 8004a50:	20001969 	.word	0x20001969
 8004a54:	20001a01 	.word	0x20001a01
 8004a58:	2000192c 	.word	0x2000192c
 8004a5c:	20000028 	.word	0x20000028
 8004a60:	2000191c 	.word	0x2000191c
 8004a64:	20001920 	.word	0x20001920
 8004a68:	20001b44 	.word	0x20001b44
 8004a6c:	200013c4 	.word	0x200013c4
 8004a70:	20001918 	.word	0x20001918
 8004a74:	200013e8 	.word	0x200013e8
 8004a78:	200013f8 	.word	0x200013f8
 8004a7c:	20001400 	.word	0x20001400

08004a80 <SIMV_MODE>:
void SIMV_MODE(void){
 8004a80:	b580      	push	{r7, lr}
 8004a82:	af00      	add	r7, sp, #0

	//	if(getElapsedMilliseconds() <= numatic_insp_ctr){
	//		Mandatory_MODE();
	//	}
	//	Mandatory_FLAG = 1;
	if(Mandatory_FLAG == 1){
 8004a84:	4b0b      	ldr	r3, [pc, #44]	@ (8004ab4 <SIMV_MODE+0x34>)
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d005      	beq.n	8004a98 <SIMV_MODE+0x18>
		Spontaneous_FLAG = 0;
 8004a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8004ab8 <SIMV_MODE+0x38>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	701a      	strb	r2, [r3, #0]
		Mandatory_MODE();
 8004a92:	f7ff fd43 	bl	800451c <Mandatory_MODE>
	//			osDelay(numatic_exp_ctr - 250);
	//			Spontaneous_FLAG = 0;
	//
	//		}
	//	}
}
 8004a96:	e00b      	b.n	8004ab0 <SIMV_MODE+0x30>
	else if(Mandatory_FLAG == 0){
 8004a98:	4b06      	ldr	r3, [pc, #24]	@ (8004ab4 <SIMV_MODE+0x34>)
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	f083 0301 	eor.w	r3, r3, #1
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d004      	beq.n	8004ab0 <SIMV_MODE+0x30>
		Spontaneous_FLAG = 1;
 8004aa6:	4b04      	ldr	r3, [pc, #16]	@ (8004ab8 <SIMV_MODE+0x38>)
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	701a      	strb	r2, [r3, #0]
		Spontaneous_MODE();
 8004aac:	f7ff fe50 	bl	8004750 <Spontaneous_MODE>
}
 8004ab0:	bf00      	nop
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	200019b0 	.word	0x200019b0
 8004ab8:	200019b1 	.word	0x200019b1

08004abc <Mandarine>:
void Mandarine(void){
 8004abc:	b580      	push	{r7, lr}
 8004abe:	af00      	add	r7, sp, #0
	VT_UPDATE_FLAG = 1;
 8004ac0:	4b2b      	ldr	r3, [pc, #172]	@ (8004b70 <Mandarine+0xb4>)
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	701a      	strb	r2, [r3, #0]
	//	Peep_control_flag = 1;
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004acc:	4829      	ldr	r0, [pc, #164]	@ (8004b74 <Mandarine+0xb8>)
 8004ace:	f009 f8b3 	bl	800dc38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004ad8:	4826      	ldr	r0, [pc, #152]	@ (8004b74 <Mandarine+0xb8>)
 8004ada:	f009 f8ad 	bl	800dc38 <HAL_GPIO_WritePin>
	//	start_time_ms = HAL_GetTick();

	//	holi = 0;
	Peep_control_flag = 1;
 8004ade:	4b26      	ldr	r3, [pc, #152]	@ (8004b78 <Mandarine+0xbc>)
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	701a      	strb	r2, [r3, #0]
	exp_cycle_counter++;
 8004ae4:	4b25      	ldr	r3, [pc, #148]	@ (8004b7c <Mandarine+0xc0>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	4a24      	ldr	r2, [pc, #144]	@ (8004b7c <Mandarine+0xc0>)
 8004aec:	6013      	str	r3, [r2, #0]
	osDelay(50);
 8004aee:	2032      	movs	r0, #50	@ 0x32
 8004af0:	f00d fc63 	bl	80123ba <osDelay>
	Mandatory_FLAG = 0;
 8004af4:	4b22      	ldr	r3, [pc, #136]	@ (8004b80 <Mandarine+0xc4>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	701a      	strb	r2, [r3, #0]
	//	start_time_ms = HAL_GetTick();  // Get the system time in milliseconds
	hI = 0;
 8004afa:	4b22      	ldr	r3, [pc, #136]	@ (8004b84 <Mandarine+0xc8>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	601a      	str	r2, [r3, #0]
	P_HI = 0;
 8004b00:	4b21      	ldr	r3, [pc, #132]	@ (8004b88 <Mandarine+0xcc>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	701a      	strb	r2, [r3, #0]
	PhI = 0;
 8004b06:	4b21      	ldr	r3, [pc, #132]	@ (8004b8c <Mandarine+0xd0>)
 8004b08:	f04f 0200 	mov.w	r2, #0
 8004b0c:	601a      	str	r2, [r3, #0]
	ventro = 0;
 8004b0e:	4b20      	ldr	r3, [pc, #128]	@ (8004b90 <Mandarine+0xd4>)
 8004b10:	f04f 0200 	mov.w	r2, #0
 8004b14:	601a      	str	r2, [r3, #0]
	flow2 = 0;
 8004b16:	4b1f      	ldr	r3, [pc, #124]	@ (8004b94 <Mandarine+0xd8>)
 8004b18:	f04f 0200 	mov.w	r2, #0
 8004b1c:	601a      	str	r2, [r3, #0]
	Tidal = 0;
 8004b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8004b98 <Mandarine+0xdc>)
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	601a      	str	r2, [r3, #0]
	Final_T = 0;
 8004b26:	4b1d      	ldr	r3, [pc, #116]	@ (8004b9c <Mandarine+0xe0>)
 8004b28:	f04f 0200 	mov.w	r2, #0
 8004b2c:	601a      	str	r2, [r3, #0]
	PeakP = 0;
 8004b2e:	4b1c      	ldr	r3, [pc, #112]	@ (8004ba0 <Mandarine+0xe4>)
 8004b30:	f04f 0200 	mov.w	r2, #0
 8004b34:	601a      	str	r2, [r3, #0]
	exp_cycle_counter++;
 8004b36:	4b11      	ldr	r3, [pc, #68]	@ (8004b7c <Mandarine+0xc0>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	4a0f      	ldr	r2, [pc, #60]	@ (8004b7c <Mandarine+0xc0>)
 8004b3e:	6013      	str	r3, [r2, #0]
	osDelay(numatic_exp_ctr);
 8004b40:	4b18      	ldr	r3, [pc, #96]	@ (8004ba4 <Mandarine+0xe8>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f00d fc38 	bl	80123ba <osDelay>
	Peep_live_pressure(result2);
 8004b4a:	4b17      	ldr	r3, [pc, #92]	@ (8004ba8 <Mandarine+0xec>)
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7ff f9f6 	bl	8003f40 <Peep_live_pressure>

	osDelay(numatic_exp_ctr-100);  // Delay for numatic_exp_ctr milliseconds
 8004b54:	4b13      	ldr	r3, [pc, #76]	@ (8004ba4 <Mandarine+0xe8>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	3b64      	subs	r3, #100	@ 0x64
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f00d fc2d 	bl	80123ba <osDelay>
	Spontaneous_FLAG = 0;
 8004b60:	4b12      	ldr	r3, [pc, #72]	@ (8004bac <Mandarine+0xf0>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	701a      	strb	r2, [r3, #0]
	Mandatory_FLAG = 1;
 8004b66:	4b06      	ldr	r3, [pc, #24]	@ (8004b80 <Mandarine+0xc4>)
 8004b68:	2201      	movs	r2, #1
 8004b6a:	701a      	strb	r2, [r3, #0]

	//	end_time_ms = HAL_GetTick();  // Get the system time after delay
	//	Spontaneous_FLAG = 0;

	//	elapsed_time_ms = end_time_ms - start_time_ms;  // Calculate elapsed time in milliseconds
}
 8004b6c:	bf00      	nop
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	20001414 	.word	0x20001414
 8004b74:	40021000 	.word	0x40021000
 8004b78:	20001a01 	.word	0x20001a01
 8004b7c:	2000192c 	.word	0x2000192c
 8004b80:	200019b0 	.word	0x200019b0
 8004b84:	20000028 	.word	0x20000028
 8004b88:	2000191c 	.word	0x2000191c
 8004b8c:	20001920 	.word	0x20001920
 8004b90:	20001b44 	.word	0x20001b44
 8004b94:	200013c4 	.word	0x200013c4
 8004b98:	20001918 	.word	0x20001918
 8004b9c:	200013e8 	.word	0x200013e8
 8004ba0:	200013f8 	.word	0x200013f8
 8004ba4:	20001934 	.word	0x20001934
 8004ba8:	20001a90 	.word	0x20001a90
 8004bac:	200019b1 	.word	0x200019b1

08004bb0 <CLT_MODE>:

	if (CLV >= LEAK_THRESHOLD && Leak_Percentage >= LEAK_PERCENT_THRESHOLD)

		return Leak_Percentage;
}
float CLT_MODE(void){
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
	//	P_TRG = (PIP_value + result2);
	//	uint8_t store2;
	//	TRG_value = PIP_value;
	PS_temp_value = 50;
 8004bb6:	4b50      	ldr	r3, [pc, #320]	@ (8004cf8 <CLT_MODE+0x148>)
 8004bb8:	2232      	movs	r2, #50	@ 0x32
 8004bba:	701a      	strb	r2, [r3, #0]
	RR_temp_value = 0;
 8004bbc:	4b4f      	ldr	r3, [pc, #316]	@ (8004cfc <CLT_MODE+0x14c>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	701a      	strb	r2, [r3, #0]
	if (CLT_FLAG == 1){
 8004bc2:	4b4f      	ldr	r3, [pc, #316]	@ (8004d00 <CLT_MODE+0x150>)
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	f040 8091 	bne.w	8004cee <CLT_MODE+0x13e>
		VT_UPDATE_FLAG = 0;
 8004bcc:	4b4d      	ldr	r3, [pc, #308]	@ (8004d04 <CLT_MODE+0x154>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004bd8:	484b      	ldr	r0, [pc, #300]	@ (8004d08 <CLT_MODE+0x158>)
 8004bda:	f009 f82d 	bl	800dc38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8004bde:	2201      	movs	r2, #1
 8004be0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004be4:	4848      	ldr	r0, [pc, #288]	@ (8004d08 <CLT_MODE+0x158>)
 8004be6:	f009 f827 	bl	800dc38 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 103);
 8004bea:	4b48      	ldr	r3, [pc, #288]	@ (8004d0c <CLT_MODE+0x15c>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2267      	movs	r2, #103	@ 0x67
 8004bf0:	635a      	str	r2, [r3, #52]	@ 0x34
		osDelay(10000);
 8004bf2:	f242 7010 	movw	r0, #10000	@ 0x2710
 8004bf6:	f00d fbe0 	bl	80123ba <osDelay>
		//		osDelay(numatic_insp_ctr - insPause_vale);
		PID_CALIBRATE_FLAG = 1;
 8004bfa:	4b45      	ldr	r3, [pc, #276]	@ (8004d10 <CLT_MODE+0x160>)
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	701a      	strb	r2, [r3, #0]
		PID_FLOW_VAR = Qin;
 8004c00:	4b44      	ldr	r3, [pc, #272]	@ (8004d14 <CLT_MODE+0x164>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	b2da      	uxtb	r2, r3
 8004c06:	4b44      	ldr	r3, [pc, #272]	@ (8004d18 <CLT_MODE+0x168>)
 8004c08:	701a      	strb	r2, [r3, #0]
		PID_FLOW_VAR = 0;
 8004c0a:	4b43      	ldr	r3, [pc, #268]	@ (8004d18 <CLT_MODE+0x168>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	701a      	strb	r2, [r3, #0]
		//		if (PU_temp_value > 0) {
		//			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
		//			osDelay(insPause_vale);
		//
		//		}
		previous_pressure_first = result2;
 8004c10:	4b42      	ldr	r3, [pc, #264]	@ (8004d1c <CLT_MODE+0x16c>)
 8004c12:	781a      	ldrb	r2, [r3, #0]
 8004c14:	4b42      	ldr	r3, [pc, #264]	@ (8004d20 <CLT_MODE+0x170>)
 8004c16:	701a      	strb	r2, [r3, #0]
		sensor_flow_for_vt = 0;
 8004c18:	4b42      	ldr	r3, [pc, #264]	@ (8004d24 <CLT_MODE+0x174>)
 8004c1a:	f04f 0200 	mov.w	r2, #0
 8004c1e:	601a      	str	r2, [r3, #0]
		previous_pressure_second = pressure_adc;
 8004c20:	4b41      	ldr	r3, [pc, #260]	@ (8004d28 <CLT_MODE+0x178>)
 8004c22:	881a      	ldrh	r2, [r3, #0]
 8004c24:	4b41      	ldr	r3, [pc, #260]	@ (8004d2c <CLT_MODE+0x17c>)
 8004c26:	801a      	strh	r2, [r3, #0]
		//	}
		//	store2 = prev_pressure_first;
		//	if (result2>PS_temp_value){
		//		else if (result2>PS_temp_value){
		//	else if(y<(100)){
		Peep_control_flag = 1;
 8004c28:	4b41      	ldr	r3, [pc, #260]	@ (8004d30 <CLT_MODE+0x180>)
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	701a      	strb	r2, [r3, #0]
		VT_UPDATE_FLAG = 1;
 8004c2e:	4b35      	ldr	r3, [pc, #212]	@ (8004d04 <CLT_MODE+0x154>)
 8004c30:	2201      	movs	r2, #1
 8004c32:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8004c34:	2200      	movs	r2, #0
 8004c36:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004c3a:	4833      	ldr	r0, [pc, #204]	@ (8004d08 <CLT_MODE+0x158>)
 8004c3c:	f008 fffc 	bl	800dc38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8004c40:	2200      	movs	r2, #0
 8004c42:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004c46:	4830      	ldr	r0, [pc, #192]	@ (8004d08 <CLT_MODE+0x158>)
 8004c48:	f008 fff6 	bl	800dc38 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 75);
 8004c4c:	4b2f      	ldr	r3, [pc, #188]	@ (8004d0c <CLT_MODE+0x15c>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	224b      	movs	r2, #75	@ 0x4b
 8004c52:	635a      	str	r2, [r3, #52]	@ 0x34

		exp_cycle_counter++;
 8004c54:	4b37      	ldr	r3, [pc, #220]	@ (8004d34 <CLT_MODE+0x184>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	3301      	adds	r3, #1
 8004c5a:	4a36      	ldr	r2, [pc, #216]	@ (8004d34 <CLT_MODE+0x184>)
 8004c5c:	6013      	str	r3, [r2, #0]
		osDelay(3500);
 8004c5e:	f640 50ac 	movw	r0, #3500	@ 0xdac
 8004c62:	f00d fbaa 	bl	80123ba <osDelay>
		Peep_control_flag = 0;
 8004c66:	4b32      	ldr	r3, [pc, #200]	@ (8004d30 <CLT_MODE+0x180>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	701a      	strb	r2, [r3, #0]
		Peep_live_pressure(result2);
 8004c6c:	4b2b      	ldr	r3, [pc, #172]	@ (8004d1c <CLT_MODE+0x16c>)
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7ff f965 	bl	8003f40 <Peep_live_pressure>
		PID_CALIBRATE_FLAG = 0;
 8004c76:	4b26      	ldr	r3, [pc, #152]	@ (8004d10 <CLT_MODE+0x160>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	701a      	strb	r2, [r3, #0]
		CLT_FLAG = 2;
 8004c7c:	4b20      	ldr	r3, [pc, #128]	@ (8004d00 <CLT_MODE+0x150>)
 8004c7e:	2202      	movs	r2, #2
 8004c80:	701a      	strb	r2, [r3, #0]
		float CLV = (result / result2);
 8004c82:	4b2d      	ldr	r3, [pc, #180]	@ (8004d38 <CLT_MODE+0x188>)
 8004c84:	781a      	ldrb	r2, [r3, #0]
 8004c86:	4b25      	ldr	r3, [pc, #148]	@ (8004d1c <CLT_MODE+0x16c>)
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	ee07 3a90 	vmov	s15, r3
 8004c94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c98:	edc7 7a01 	vstr	s15, [r7, #4]
		Leak_Percentage = (CLV / result) * 100;
 8004c9c:	4b26      	ldr	r3, [pc, #152]	@ (8004d38 <CLT_MODE+0x188>)
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	ee07 3a90 	vmov	s15, r3
 8004ca4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ca8:	edd7 6a01 	vldr	s13, [r7, #4]
 8004cac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cb0:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8004d3c <CLT_MODE+0x18c>
 8004cb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cb8:	4b21      	ldr	r3, [pc, #132]	@ (8004d40 <CLT_MODE+0x190>)
 8004cba:	edc3 7a00 	vstr	s15, [r3]

		if (CLV >= LEAK_THRESHOLD && Leak_Percentage >= LEAK_PERCENT_THRESHOLD)
 8004cbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8004cc2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8004cc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cce:	db0e      	blt.n	8004cee <CLT_MODE+0x13e>
 8004cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8004d40 <CLT_MODE+0x190>)
 8004cd2:	edd3 7a00 	vldr	s15, [r3]
 8004cd6:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8004cda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ce2:	db04      	blt.n	8004cee <CLT_MODE+0x13e>

			return Leak_Percentage;
 8004ce4:	4b16      	ldr	r3, [pc, #88]	@ (8004d40 <CLT_MODE+0x190>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	ee07 3a90 	vmov	s15, r3
 8004cec:	e7ff      	b.n	8004cee <CLT_MODE+0x13e>
	}

}
 8004cee:	eeb0 0a67 	vmov.f32	s0, s15
 8004cf2:	3708      	adds	r7, #8
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	20001969 	.word	0x20001969
 8004cfc:	2000004c 	.word	0x2000004c
 8004d00:	200019af 	.word	0x200019af
 8004d04:	20001414 	.word	0x20001414
 8004d08:	40021000 	.word	0x40021000
 8004d0c:	20000f40 	.word	0x20000f40
 8004d10:	20001416 	.word	0x20001416
 8004d14:	20001358 	.word	0x20001358
 8004d18:	2000141c 	.word	0x2000141c
 8004d1c:	20001a90 	.word	0x20001a90
 8004d20:	20001b28 	.word	0x20001b28
 8004d24:	20001418 	.word	0x20001418
 8004d28:	20001344 	.word	0x20001344
 8004d2c:	20001b2a 	.word	0x20001b2a
 8004d30:	20001a01 	.word	0x20001a01
 8004d34:	2000192c 	.word	0x2000192c
 8004d38:	20001a8f 	.word	0x20001a8f
 8004d3c:	42c80000 	.word	0x42c80000
 8004d40:	200019dc 	.word	0x200019dc

08004d44 <BAG_MODE>:
void BAG_MODE(void) {
 8004d44:	b580      	push	{r7, lr}
 8004d46:	af00      	add	r7, sp, #0
	//	VT_UPDATE_FLAG = 1;
	static unsigned int count=0;
	static bool bag_reset=0;
	if((count == 0) || (bag_reset == 0)){
 8004d48:	4b1c      	ldr	r3, [pc, #112]	@ (8004dbc <BAG_MODE+0x78>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d006      	beq.n	8004d5e <BAG_MODE+0x1a>
 8004d50:	4b1b      	ldr	r3, [pc, #108]	@ (8004dc0 <BAG_MODE+0x7c>)
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	f083 0301 	eor.w	r3, r3, #1
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d01b      	beq.n	8004d96 <BAG_MODE+0x52>
		count++;
 8004d5e:	4b17      	ldr	r3, [pc, #92]	@ (8004dbc <BAG_MODE+0x78>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	3301      	adds	r3, #1
 8004d64:	4a15      	ldr	r2, [pc, #84]	@ (8004dbc <BAG_MODE+0x78>)
 8004d66:	6013      	str	r3, [r2, #0]
		Bag_vol = 0;
 8004d68:	4b16      	ldr	r3, [pc, #88]	@ (8004dc4 <BAG_MODE+0x80>)
 8004d6a:	f04f 0200 	mov.w	r2, #0
 8004d6e:	601a      	str	r2, [r3, #0]

		//		RR_value = 0x01;
		//		flow2 = 0;
		//		dp = 0;
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8004d70:	2200      	movs	r2, #0
 8004d72:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004d76:	4814      	ldr	r0, [pc, #80]	@ (8004dc8 <BAG_MODE+0x84>)
 8004d78:	f008 ff5e 	bl	800dc38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004d82:	4811      	ldr	r0, [pc, #68]	@ (8004dc8 <BAG_MODE+0x84>)
 8004d84:	f008 ff58 	bl	800dc38 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 75);
 8004d88:	4b10      	ldr	r3, [pc, #64]	@ (8004dcc <BAG_MODE+0x88>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	224b      	movs	r2, #75	@ 0x4b
 8004d8e:	635a      	str	r2, [r3, #52]	@ 0x34

		bag_reset=1;
 8004d90:	4b0b      	ldr	r3, [pc, #44]	@ (8004dc0 <BAG_MODE+0x7c>)
 8004d92:	2201      	movs	r2, #1
 8004d94:	701a      	strb	r2, [r3, #0]
	}

	if(Qin<=102){
 8004d96:	4b0e      	ldr	r3, [pc, #56]	@ (8004dd0 <BAG_MODE+0x8c>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2b66      	cmp	r3, #102	@ 0x66
 8004d9c:	dc03      	bgt.n	8004da6 <BAG_MODE+0x62>
		//		Tidal = 0;
		//		TP = 0;
		//		Resistance = 0;
		//		Bag_vol = 0;
		//		previous_bag = Bag_vol;
		osDelay(1500);
 8004d9e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8004da2:	f00d fb0a 	bl	80123ba <osDelay>
	}
	//	PID_FLOW_VAR = result;
	//	previous_bag = Bag_vol;
	//	previous_pressure_first = result2;

	STAND_BY = 1;
 8004da6:	4b0b      	ldr	r3, [pc, #44]	@ (8004dd4 <BAG_MODE+0x90>)
 8004da8:	2201      	movs	r2, #1
 8004daa:	701a      	strb	r2, [r3, #0]
	Peep_live_pressure(result2);
 8004dac:	4b0a      	ldr	r3, [pc, #40]	@ (8004dd8 <BAG_MODE+0x94>)
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7ff f8c5 	bl	8003f40 <Peep_live_pressure>
}
 8004db6:	bf00      	nop
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	20001b54 	.word	0x20001b54
 8004dc0:	20001b58 	.word	0x20001b58
 8004dc4:	200013d4 	.word	0x200013d4
 8004dc8:	40021000 	.word	0x40021000
 8004dcc:	20000f40 	.word	0x20000f40
 8004dd0:	20001358 	.word	0x20001358
 8004dd4:	200019a9 	.word	0x200019a9
 8004dd8:	20001a90 	.word	0x20001a90
 8004ddc:	00000000 	.word	0x00000000

08004de0 <PID_FLOW_SET_VALUE>:
void PID_FLOW_SET_VALUE(double SETTING_POINT, double kp, double kd, double ki,
		uint32_t PID_time) {
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b08c      	sub	sp, #48	@ 0x30
 8004de4:	af02      	add	r7, sp, #8
 8004de6:	ed87 0b08 	vstr	d0, [r7, #32]
 8004dea:	ed87 1b06 	vstr	d1, [r7, #24]
 8004dee:	ed87 2b04 	vstr	d2, [r7, #16]
 8004df2:	ed87 3b02 	vstr	d3, [r7, #8]
 8004df6:	6078      	str	r0, [r7, #4]

	TempSetpoint = (int)SETTING_POINT;
 8004df8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004dfc:	f7fb fea4 	bl	8000b48 <__aeabi_d2iz>
 8004e00:	4603      	mov	r3, r0
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7fb fb86 	bl	8000514 <__aeabi_i2d>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	4918      	ldr	r1, [pc, #96]	@ (8004e70 <PID_FLOW_SET_VALUE+0x90>)
 8004e0e:	e9c1 2300 	strd	r2, r3, [r1]
	PID(&TPID, &Temp, &PIDOut, &TempSetpoint, kp, kd, ki, _PID_P_ON_E,
 8004e12:	2300      	movs	r3, #0
 8004e14:	9301      	str	r3, [sp, #4]
 8004e16:	2301      	movs	r3, #1
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	ed97 2b02 	vldr	d2, [r7, #8]
 8004e1e:	ed97 1b04 	vldr	d1, [r7, #16]
 8004e22:	ed97 0b06 	vldr	d0, [r7, #24]
 8004e26:	4b12      	ldr	r3, [pc, #72]	@ (8004e70 <PID_FLOW_SET_VALUE+0x90>)
 8004e28:	4a12      	ldr	r2, [pc, #72]	@ (8004e74 <PID_FLOW_SET_VALUE+0x94>)
 8004e2a:	4913      	ldr	r1, [pc, #76]	@ (8004e78 <PID_FLOW_SET_VALUE+0x98>)
 8004e2c:	4813      	ldr	r0, [pc, #76]	@ (8004e7c <PID_FLOW_SET_VALUE+0x9c>)
 8004e2e:	f006 fcbf 	bl	800b7b0 <PID>
			_PID_CD_DIRECT);
	PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 8004e32:	2101      	movs	r1, #1
 8004e34:	4811      	ldr	r0, [pc, #68]	@ (8004e7c <PID_FLOW_SET_VALUE+0x9c>)
 8004e36:	f006 fdf1 	bl	800ba1c <PID_SetMode>
	PID_SetSampleTime(&TPID, PID_time);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	480f      	ldr	r0, [pc, #60]	@ (8004e7c <PID_FLOW_SET_VALUE+0x9c>)
 8004e40:	f006 ff60 	bl	800bd04 <PID_SetSampleTime>
	PID_SetOutputLimits(&TPID, 75, 160); // PID for PPR valve
 8004e44:	ed9f 1b06 	vldr	d1, [pc, #24]	@ 8004e60 <PID_FLOW_SET_VALUE+0x80>
 8004e48:	ed9f 0b07 	vldr	d0, [pc, #28]	@ 8004e68 <PID_FLOW_SET_VALUE+0x88>
 8004e4c:	480b      	ldr	r0, [pc, #44]	@ (8004e7c <PID_FLOW_SET_VALUE+0x9c>)
 8004e4e:	f006 fe03 	bl	800ba58 <PID_SetOutputLimits>
}
 8004e52:	bf00      	nop
 8004e54:	3728      	adds	r7, #40	@ 0x28
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	f3af 8000 	nop.w
 8004e60:	00000000 	.word	0x00000000
 8004e64:	40640000 	.word	0x40640000
 8004e68:	00000000 	.word	0x00000000
 8004e6c:	4052c000 	.word	0x4052c000
 8004e70:	20001430 	.word	0x20001430
 8004e74:	20001428 	.word	0x20001428
 8004e78:	20000020 	.word	0x20000020
 8004e7c:	20000d28 	.word	0x20000d28

08004e80 <VT_KEYPAD>:
//
//	return PIDOut;  // Return the uint8_t value
//}


void VT_KEYPAD(void){
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
	if((DISPLAY_INPUT1[0]==0x5A)&&(DISPLAY_INPUT1[1]==0xA5)&&(DISPLAY_INPUT1[3]==0x83)
 8004e86:	4b94      	ldr	r3, [pc, #592]	@ (80050d8 <VT_KEYPAD+0x258>)
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	2b5a      	cmp	r3, #90	@ 0x5a
 8004e8c:	f040 8171 	bne.w	8005172 <VT_KEYPAD+0x2f2>
 8004e90:	4b91      	ldr	r3, [pc, #580]	@ (80050d8 <VT_KEYPAD+0x258>)
 8004e92:	785b      	ldrb	r3, [r3, #1]
 8004e94:	2ba5      	cmp	r3, #165	@ 0xa5
 8004e96:	f040 816c 	bne.w	8005172 <VT_KEYPAD+0x2f2>
 8004e9a:	4b8f      	ldr	r3, [pc, #572]	@ (80050d8 <VT_KEYPAD+0x258>)
 8004e9c:	78db      	ldrb	r3, [r3, #3]
 8004e9e:	2b83      	cmp	r3, #131	@ 0x83
 8004ea0:	f040 8167 	bne.w	8005172 <VT_KEYPAD+0x2f2>
			&&(DISPLAY_INPUT1[4]==0x10)&&(DISPLAY_INPUT1[5]==0x95)){
 8004ea4:	4b8c      	ldr	r3, [pc, #560]	@ (80050d8 <VT_KEYPAD+0x258>)
 8004ea6:	791b      	ldrb	r3, [r3, #4]
 8004ea8:	2b10      	cmp	r3, #16
 8004eaa:	f040 8162 	bne.w	8005172 <VT_KEYPAD+0x2f2>
 8004eae:	4b8a      	ldr	r3, [pc, #552]	@ (80050d8 <VT_KEYPAD+0x258>)
 8004eb0:	795b      	ldrb	r3, [r3, #5]
 8004eb2:	2b95      	cmp	r3, #149	@ 0x95
 8004eb4:	f040 815d 	bne.w	8005172 <VT_KEYPAD+0x2f2>

		if((DISPLAY_INPUT1[8] == 0xFF) && (DISPLAY_INPUT1[9] == 0xFF)){
 8004eb8:	4b87      	ldr	r3, [pc, #540]	@ (80050d8 <VT_KEYPAD+0x258>)
 8004eba:	7a1b      	ldrb	r3, [r3, #8]
 8004ebc:	2bff      	cmp	r3, #255	@ 0xff
 8004ebe:	d125      	bne.n	8004f0c <VT_KEYPAD+0x8c>
 8004ec0:	4b85      	ldr	r3, [pc, #532]	@ (80050d8 <VT_KEYPAD+0x258>)
 8004ec2:	7a5b      	ldrb	r3, [r3, #9]
 8004ec4:	2bff      	cmp	r3, #255	@ 0xff
 8004ec6:	d121      	bne.n	8004f0c <VT_KEYPAD+0x8c>
			Keypad[0] = 0x00;
 8004ec8:	4b84      	ldr	r3, [pc, #528]	@ (80050dc <VT_KEYPAD+0x25c>)
 8004eca:	2200      	movs	r2, #0
 8004ecc:	701a      	strb	r2, [r3, #0]
			Keypad[1] = 0x00;
 8004ece:	4b83      	ldr	r3, [pc, #524]	@ (80050dc <VT_KEYPAD+0x25c>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	705a      	strb	r2, [r3, #1]
			Keypad[2] = 0x00;
 8004ed4:	4b81      	ldr	r3, [pc, #516]	@ (80050dc <VT_KEYPAD+0x25c>)
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	709a      	strb	r2, [r3, #2]
			Keypad[3] = DISPLAY_INPUT1[7] & 0x0F;
 8004eda:	4b7f      	ldr	r3, [pc, #508]	@ (80050d8 <VT_KEYPAD+0x258>)
 8004edc:	79db      	ldrb	r3, [r3, #7]
 8004ede:	f003 030f 	and.w	r3, r3, #15
 8004ee2:	b2da      	uxtb	r2, r3
 8004ee4:	4b7d      	ldr	r3, [pc, #500]	@ (80050dc <VT_KEYPAD+0x25c>)
 8004ee6:	70da      	strb	r2, [r3, #3]
			Keypad[4] = 0x01;
 8004ee8:	4b7c      	ldr	r3, [pc, #496]	@ (80050dc <VT_KEYPAD+0x25c>)
 8004eea:	2201      	movs	r2, #1
 8004eec:	711a      	strb	r2, [r3, #4]
			for(int j = 0; j < 12; j++){
 8004eee:	2300      	movs	r3, #0
 8004ef0:	60fb      	str	r3, [r7, #12]
 8004ef2:	e007      	b.n	8004f04 <VT_KEYPAD+0x84>
				DISPLAY_INPUT1[j] = 0x00;
 8004ef4:	4a78      	ldr	r2, [pc, #480]	@ (80050d8 <VT_KEYPAD+0x258>)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	4413      	add	r3, r2
 8004efa:	2200      	movs	r2, #0
 8004efc:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 12; j++){
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	3301      	adds	r3, #1
 8004f02:	60fb      	str	r3, [r7, #12]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2b0b      	cmp	r3, #11
 8004f08:	ddf4      	ble.n	8004ef4 <VT_KEYPAD+0x74>
 8004f0a:	e094      	b.n	8005036 <VT_KEYPAD+0x1b6>
			}
			//                            memset(DISPLAY_INPUT1,0,13);
		}
		else if((DISPLAY_INPUT1[9] == 0xFF) && (DISPLAY_INPUT1[10] == 0xFF)){
 8004f0c:	4b72      	ldr	r3, [pc, #456]	@ (80050d8 <VT_KEYPAD+0x258>)
 8004f0e:	7a5b      	ldrb	r3, [r3, #9]
 8004f10:	2bff      	cmp	r3, #255	@ 0xff
 8004f12:	d129      	bne.n	8004f68 <VT_KEYPAD+0xe8>
 8004f14:	4b70      	ldr	r3, [pc, #448]	@ (80050d8 <VT_KEYPAD+0x258>)
 8004f16:	7a9b      	ldrb	r3, [r3, #10]
 8004f18:	2bff      	cmp	r3, #255	@ 0xff
 8004f1a:	d125      	bne.n	8004f68 <VT_KEYPAD+0xe8>
			Keypad[0] = 0x00;
 8004f1c:	4b6f      	ldr	r3, [pc, #444]	@ (80050dc <VT_KEYPAD+0x25c>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	701a      	strb	r2, [r3, #0]
			Keypad[1] = 0x00;
 8004f22:	4b6e      	ldr	r3, [pc, #440]	@ (80050dc <VT_KEYPAD+0x25c>)
 8004f24:	2200      	movs	r2, #0
 8004f26:	705a      	strb	r2, [r3, #1]
			Keypad[2] = DISPLAY_INPUT1[7] & 0x0F;
 8004f28:	4b6b      	ldr	r3, [pc, #428]	@ (80050d8 <VT_KEYPAD+0x258>)
 8004f2a:	79db      	ldrb	r3, [r3, #7]
 8004f2c:	f003 030f 	and.w	r3, r3, #15
 8004f30:	b2da      	uxtb	r2, r3
 8004f32:	4b6a      	ldr	r3, [pc, #424]	@ (80050dc <VT_KEYPAD+0x25c>)
 8004f34:	709a      	strb	r2, [r3, #2]
			Keypad[3] = DISPLAY_INPUT1[8] & 0x0F;
 8004f36:	4b68      	ldr	r3, [pc, #416]	@ (80050d8 <VT_KEYPAD+0x258>)
 8004f38:	7a1b      	ldrb	r3, [r3, #8]
 8004f3a:	f003 030f 	and.w	r3, r3, #15
 8004f3e:	b2da      	uxtb	r2, r3
 8004f40:	4b66      	ldr	r3, [pc, #408]	@ (80050dc <VT_KEYPAD+0x25c>)
 8004f42:	70da      	strb	r2, [r3, #3]
			Keypad[4] = 0x02;
 8004f44:	4b65      	ldr	r3, [pc, #404]	@ (80050dc <VT_KEYPAD+0x25c>)
 8004f46:	2202      	movs	r2, #2
 8004f48:	711a      	strb	r2, [r3, #4]
			for(int j = 0; j < 12; j++){
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	60bb      	str	r3, [r7, #8]
 8004f4e:	e007      	b.n	8004f60 <VT_KEYPAD+0xe0>
				DISPLAY_INPUT1[j] = 0x00;
 8004f50:	4a61      	ldr	r2, [pc, #388]	@ (80050d8 <VT_KEYPAD+0x258>)
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	4413      	add	r3, r2
 8004f56:	2200      	movs	r2, #0
 8004f58:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 12; j++){
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	60bb      	str	r3, [r7, #8]
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	2b0b      	cmp	r3, #11
 8004f64:	ddf4      	ble.n	8004f50 <VT_KEYPAD+0xd0>
 8004f66:	e066      	b.n	8005036 <VT_KEYPAD+0x1b6>
			}
			//                            memset(DISPLAY_INPUT1,0,13);
		}
		else if((DISPLAY_INPUT1[10] == 0xFF) && (DISPLAY_INPUT1[11] == 0xFF)){
 8004f68:	4b5b      	ldr	r3, [pc, #364]	@ (80050d8 <VT_KEYPAD+0x258>)
 8004f6a:	7a9b      	ldrb	r3, [r3, #10]
 8004f6c:	2bff      	cmp	r3, #255	@ 0xff
 8004f6e:	d12d      	bne.n	8004fcc <VT_KEYPAD+0x14c>
 8004f70:	4b59      	ldr	r3, [pc, #356]	@ (80050d8 <VT_KEYPAD+0x258>)
 8004f72:	7adb      	ldrb	r3, [r3, #11]
 8004f74:	2bff      	cmp	r3, #255	@ 0xff
 8004f76:	d129      	bne.n	8004fcc <VT_KEYPAD+0x14c>
			Keypad[0] = 0x00;
 8004f78:	4b58      	ldr	r3, [pc, #352]	@ (80050dc <VT_KEYPAD+0x25c>)
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	701a      	strb	r2, [r3, #0]
			Keypad[1] = DISPLAY_INPUT1[7] & 0x0F;
 8004f7e:	4b56      	ldr	r3, [pc, #344]	@ (80050d8 <VT_KEYPAD+0x258>)
 8004f80:	79db      	ldrb	r3, [r3, #7]
 8004f82:	f003 030f 	and.w	r3, r3, #15
 8004f86:	b2da      	uxtb	r2, r3
 8004f88:	4b54      	ldr	r3, [pc, #336]	@ (80050dc <VT_KEYPAD+0x25c>)
 8004f8a:	705a      	strb	r2, [r3, #1]
			Keypad[2] = DISPLAY_INPUT1[8] & 0x0F;
 8004f8c:	4b52      	ldr	r3, [pc, #328]	@ (80050d8 <VT_KEYPAD+0x258>)
 8004f8e:	7a1b      	ldrb	r3, [r3, #8]
 8004f90:	f003 030f 	and.w	r3, r3, #15
 8004f94:	b2da      	uxtb	r2, r3
 8004f96:	4b51      	ldr	r3, [pc, #324]	@ (80050dc <VT_KEYPAD+0x25c>)
 8004f98:	709a      	strb	r2, [r3, #2]
			Keypad[3] = DISPLAY_INPUT1[9] & 0x0F;
 8004f9a:	4b4f      	ldr	r3, [pc, #316]	@ (80050d8 <VT_KEYPAD+0x258>)
 8004f9c:	7a5b      	ldrb	r3, [r3, #9]
 8004f9e:	f003 030f 	and.w	r3, r3, #15
 8004fa2:	b2da      	uxtb	r2, r3
 8004fa4:	4b4d      	ldr	r3, [pc, #308]	@ (80050dc <VT_KEYPAD+0x25c>)
 8004fa6:	70da      	strb	r2, [r3, #3]
			Keypad[4] = 0x03;
 8004fa8:	4b4c      	ldr	r3, [pc, #304]	@ (80050dc <VT_KEYPAD+0x25c>)
 8004faa:	2203      	movs	r2, #3
 8004fac:	711a      	strb	r2, [r3, #4]
			for(int j = 0; j < 12; j++){
 8004fae:	2300      	movs	r3, #0
 8004fb0:	607b      	str	r3, [r7, #4]
 8004fb2:	e007      	b.n	8004fc4 <VT_KEYPAD+0x144>
				DISPLAY_INPUT1[j] = 0x00;
 8004fb4:	4a48      	ldr	r2, [pc, #288]	@ (80050d8 <VT_KEYPAD+0x258>)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4413      	add	r3, r2
 8004fba:	2200      	movs	r2, #0
 8004fbc:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 12; j++){
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	607b      	str	r3, [r7, #4]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b0b      	cmp	r3, #11
 8004fc8:	ddf4      	ble.n	8004fb4 <VT_KEYPAD+0x134>
 8004fca:	e034      	b.n	8005036 <VT_KEYPAD+0x1b6>
			}
			//                            memset(DISPLAY_INPUT1,0,13);
		}
		else if((DISPLAY_INPUT1[11] == 0xFF) && (DISPLAY_INPUT1[12] == 0xFF)){
 8004fcc:	4b42      	ldr	r3, [pc, #264]	@ (80050d8 <VT_KEYPAD+0x258>)
 8004fce:	7adb      	ldrb	r3, [r3, #11]
 8004fd0:	2bff      	cmp	r3, #255	@ 0xff
 8004fd2:	d130      	bne.n	8005036 <VT_KEYPAD+0x1b6>
 8004fd4:	4b40      	ldr	r3, [pc, #256]	@ (80050d8 <VT_KEYPAD+0x258>)
 8004fd6:	7b1b      	ldrb	r3, [r3, #12]
 8004fd8:	2bff      	cmp	r3, #255	@ 0xff
 8004fda:	d12c      	bne.n	8005036 <VT_KEYPAD+0x1b6>
			Keypad[0] = DISPLAY_INPUT1[7] & 0x0F;
 8004fdc:	4b3e      	ldr	r3, [pc, #248]	@ (80050d8 <VT_KEYPAD+0x258>)
 8004fde:	79db      	ldrb	r3, [r3, #7]
 8004fe0:	f003 030f 	and.w	r3, r3, #15
 8004fe4:	b2da      	uxtb	r2, r3
 8004fe6:	4b3d      	ldr	r3, [pc, #244]	@ (80050dc <VT_KEYPAD+0x25c>)
 8004fe8:	701a      	strb	r2, [r3, #0]
			Keypad[1] = DISPLAY_INPUT1[8] & 0x0F;
 8004fea:	4b3b      	ldr	r3, [pc, #236]	@ (80050d8 <VT_KEYPAD+0x258>)
 8004fec:	7a1b      	ldrb	r3, [r3, #8]
 8004fee:	f003 030f 	and.w	r3, r3, #15
 8004ff2:	b2da      	uxtb	r2, r3
 8004ff4:	4b39      	ldr	r3, [pc, #228]	@ (80050dc <VT_KEYPAD+0x25c>)
 8004ff6:	705a      	strb	r2, [r3, #1]
			Keypad[2] = DISPLAY_INPUT1[9] & 0x0F;
 8004ff8:	4b37      	ldr	r3, [pc, #220]	@ (80050d8 <VT_KEYPAD+0x258>)
 8004ffa:	7a5b      	ldrb	r3, [r3, #9]
 8004ffc:	f003 030f 	and.w	r3, r3, #15
 8005000:	b2da      	uxtb	r2, r3
 8005002:	4b36      	ldr	r3, [pc, #216]	@ (80050dc <VT_KEYPAD+0x25c>)
 8005004:	709a      	strb	r2, [r3, #2]
			Keypad[3] = DISPLAY_INPUT1[10] & 0x0F;
 8005006:	4b34      	ldr	r3, [pc, #208]	@ (80050d8 <VT_KEYPAD+0x258>)
 8005008:	7a9b      	ldrb	r3, [r3, #10]
 800500a:	f003 030f 	and.w	r3, r3, #15
 800500e:	b2da      	uxtb	r2, r3
 8005010:	4b32      	ldr	r3, [pc, #200]	@ (80050dc <VT_KEYPAD+0x25c>)
 8005012:	70da      	strb	r2, [r3, #3]
			Keypad[4] = 0x04;
 8005014:	4b31      	ldr	r3, [pc, #196]	@ (80050dc <VT_KEYPAD+0x25c>)
 8005016:	2204      	movs	r2, #4
 8005018:	711a      	strb	r2, [r3, #4]
			for(int j = 0; j < 12; j++){
 800501a:	2300      	movs	r3, #0
 800501c:	603b      	str	r3, [r7, #0]
 800501e:	e007      	b.n	8005030 <VT_KEYPAD+0x1b0>
				DISPLAY_INPUT1[j] = 0x00;
 8005020:	4a2d      	ldr	r2, [pc, #180]	@ (80050d8 <VT_KEYPAD+0x258>)
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	4413      	add	r3, r2
 8005026:	2200      	movs	r2, #0
 8005028:	701a      	strb	r2, [r3, #0]
			for(int j = 0; j < 12; j++){
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	3301      	adds	r3, #1
 800502e:	603b      	str	r3, [r7, #0]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	2b0b      	cmp	r3, #11
 8005034:	ddf4      	ble.n	8005020 <VT_KEYPAD+0x1a0>
			}
			//                            memset(DISPLAY_INPUT1,0,13);
		}
		HAL_UART_AbortReceive_IT(&huart1);
 8005036:	482a      	ldr	r0, [pc, #168]	@ (80050e0 <VT_KEYPAD+0x260>)
 8005038:	f00b ff42 	bl	8010ec0 <HAL_UART_AbortReceive_IT>
		vt_value = (((int)Keypad[0]*1000)+((int)Keypad[1]*100)+((int)Keypad[2]*10)+(int)Keypad[3]);
 800503c:	4b27      	ldr	r3, [pc, #156]	@ (80050dc <VT_KEYPAD+0x25c>)
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	461a      	mov	r2, r3
 8005042:	0152      	lsls	r2, r2, #5
 8005044:	1ad2      	subs	r2, r2, r3
 8005046:	0092      	lsls	r2, r2, #2
 8005048:	4413      	add	r3, r2
 800504a:	00db      	lsls	r3, r3, #3
 800504c:	b29a      	uxth	r2, r3
 800504e:	4b23      	ldr	r3, [pc, #140]	@ (80050dc <VT_KEYPAD+0x25c>)
 8005050:	785b      	ldrb	r3, [r3, #1]
 8005052:	4619      	mov	r1, r3
 8005054:	0089      	lsls	r1, r1, #2
 8005056:	440b      	add	r3, r1
 8005058:	4619      	mov	r1, r3
 800505a:	0088      	lsls	r0, r1, #2
 800505c:	4619      	mov	r1, r3
 800505e:	4603      	mov	r3, r0
 8005060:	440b      	add	r3, r1
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	b29b      	uxth	r3, r3
 8005066:	4413      	add	r3, r2
 8005068:	b29a      	uxth	r2, r3
 800506a:	4b1c      	ldr	r3, [pc, #112]	@ (80050dc <VT_KEYPAD+0x25c>)
 800506c:	789b      	ldrb	r3, [r3, #2]
 800506e:	4619      	mov	r1, r3
 8005070:	0089      	lsls	r1, r1, #2
 8005072:	440b      	add	r3, r1
 8005074:	005b      	lsls	r3, r3, #1
 8005076:	b29b      	uxth	r3, r3
 8005078:	4413      	add	r3, r2
 800507a:	b29b      	uxth	r3, r3
 800507c:	4a17      	ldr	r2, [pc, #92]	@ (80050dc <VT_KEYPAD+0x25c>)
 800507e:	78d2      	ldrb	r2, [r2, #3]
 8005080:	4413      	add	r3, r2
 8005082:	b29a      	uxth	r2, r3
 8005084:	4b17      	ldr	r3, [pc, #92]	@ (80050e4 <VT_KEYPAD+0x264>)
 8005086:	801a      	strh	r2, [r3, #0]
		//		vt_temp_value = vt_value;
		if(Compliance_Neonate_Flag == 1){
 8005088:	4b17      	ldr	r3, [pc, #92]	@ (80050e8 <VT_KEYPAD+0x268>)
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d02f      	beq.n	80050f0 <VT_KEYPAD+0x270>
			if((vt_value >= 5) && (vt_value <= 300)){
 8005090:	4b14      	ldr	r3, [pc, #80]	@ (80050e4 <VT_KEYPAD+0x264>)
 8005092:	881b      	ldrh	r3, [r3, #0]
 8005094:	2b04      	cmp	r3, #4
 8005096:	d90e      	bls.n	80050b6 <VT_KEYPAD+0x236>
 8005098:	4b12      	ldr	r3, [pc, #72]	@ (80050e4 <VT_KEYPAD+0x264>)
 800509a:	881b      	ldrh	r3, [r3, #0]
 800509c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80050a0:	d809      	bhi.n	80050b6 <VT_KEYPAD+0x236>
				vt_temp_value = vt_value;
 80050a2:	4b10      	ldr	r3, [pc, #64]	@ (80050e4 <VT_KEYPAD+0x264>)
 80050a4:	881a      	ldrh	r2, [r3, #0]
 80050a6:	4b11      	ldr	r3, [pc, #68]	@ (80050ec <VT_KEYPAD+0x26c>)
 80050a8:	801a      	strh	r2, [r3, #0]
				intiger_val_vt_send(0x01, vt_value);
 80050aa:	4b0e      	ldr	r3, [pc, #56]	@ (80050e4 <VT_KEYPAD+0x264>)
 80050ac:	881b      	ldrh	r3, [r3, #0]
 80050ae:	4619      	mov	r1, r3
 80050b0:	2001      	movs	r0, #1
 80050b2:	f7fd fbb3 	bl	800281c <intiger_val_vt_send>
			}if(vt_value < 5){
 80050b6:	4b0b      	ldr	r3, [pc, #44]	@ (80050e4 <VT_KEYPAD+0x264>)
 80050b8:	881b      	ldrh	r3, [r3, #0]
 80050ba:	2b04      	cmp	r3, #4
 80050bc:	d802      	bhi.n	80050c4 <VT_KEYPAD+0x244>
				vt_value = 5;
 80050be:	4b09      	ldr	r3, [pc, #36]	@ (80050e4 <VT_KEYPAD+0x264>)
 80050c0:	2205      	movs	r2, #5
 80050c2:	801a      	strh	r2, [r3, #0]
			}
			if(vt_value > 300){
 80050c4:	4b07      	ldr	r3, [pc, #28]	@ (80050e4 <VT_KEYPAD+0x264>)
 80050c6:	881b      	ldrh	r3, [r3, #0]
 80050c8:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80050cc:	d93c      	bls.n	8005148 <VT_KEYPAD+0x2c8>
				vt_value = 300;
 80050ce:	4b05      	ldr	r3, [pc, #20]	@ (80050e4 <VT_KEYPAD+0x264>)
 80050d0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80050d4:	801a      	strh	r2, [r3, #0]
 80050d6:	e037      	b.n	8005148 <VT_KEYPAD+0x2c8>
 80050d8:	20001944 	.word	0x20001944
 80050dc:	20001958 	.word	0x20001958
 80050e0:	20000fd0 	.word	0x20000fd0
 80050e4:	20000034 	.word	0x20000034
 80050e8:	20001b38 	.word	0x20001b38
 80050ec:	20000044 	.word	0x20000044
			}
		}
		else if(Compliance_Adult_Flag == 1){
 80050f0:	4b22      	ldr	r3, [pc, #136]	@ (800517c <VT_KEYPAD+0x2fc>)
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d027      	beq.n	8005148 <VT_KEYPAD+0x2c8>
			if((vt_value >= 300) && (vt_value <= 1500)){
 80050f8:	4b21      	ldr	r3, [pc, #132]	@ (8005180 <VT_KEYPAD+0x300>)
 80050fa:	881b      	ldrh	r3, [r3, #0]
 80050fc:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8005100:	d30f      	bcc.n	8005122 <VT_KEYPAD+0x2a2>
 8005102:	4b1f      	ldr	r3, [pc, #124]	@ (8005180 <VT_KEYPAD+0x300>)
 8005104:	881b      	ldrh	r3, [r3, #0]
 8005106:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800510a:	4293      	cmp	r3, r2
 800510c:	d809      	bhi.n	8005122 <VT_KEYPAD+0x2a2>
				vt_temp_value = vt_value;
 800510e:	4b1c      	ldr	r3, [pc, #112]	@ (8005180 <VT_KEYPAD+0x300>)
 8005110:	881a      	ldrh	r2, [r3, #0]
 8005112:	4b1c      	ldr	r3, [pc, #112]	@ (8005184 <VT_KEYPAD+0x304>)
 8005114:	801a      	strh	r2, [r3, #0]
				intiger_val_vt_send(0x01, vt_value);
 8005116:	4b1a      	ldr	r3, [pc, #104]	@ (8005180 <VT_KEYPAD+0x300>)
 8005118:	881b      	ldrh	r3, [r3, #0]
 800511a:	4619      	mov	r1, r3
 800511c:	2001      	movs	r0, #1
 800511e:	f7fd fb7d 	bl	800281c <intiger_val_vt_send>
			}if(vt_value < 300){
 8005122:	4b17      	ldr	r3, [pc, #92]	@ (8005180 <VT_KEYPAD+0x300>)
 8005124:	881b      	ldrh	r3, [r3, #0]
 8005126:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800512a:	d203      	bcs.n	8005134 <VT_KEYPAD+0x2b4>
				vt_value = 300;
 800512c:	4b14      	ldr	r3, [pc, #80]	@ (8005180 <VT_KEYPAD+0x300>)
 800512e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005132:	801a      	strh	r2, [r3, #0]
			}
			if(vt_value > 1500){
 8005134:	4b12      	ldr	r3, [pc, #72]	@ (8005180 <VT_KEYPAD+0x300>)
 8005136:	881b      	ldrh	r3, [r3, #0]
 8005138:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800513c:	4293      	cmp	r3, r2
 800513e:	d903      	bls.n	8005148 <VT_KEYPAD+0x2c8>
				vt_value = 1500;
 8005140:	4b0f      	ldr	r3, [pc, #60]	@ (8005180 <VT_KEYPAD+0x300>)
 8005142:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8005146:	801a      	strh	r2, [r3, #0]
			}
		}
		if((vt_value >= 20) && (vt_value <= 1500)){
 8005148:	4b0d      	ldr	r3, [pc, #52]	@ (8005180 <VT_KEYPAD+0x300>)
 800514a:	881b      	ldrh	r3, [r3, #0]
 800514c:	2b13      	cmp	r3, #19
 800514e:	d90c      	bls.n	800516a <VT_KEYPAD+0x2ea>
 8005150:	4b0b      	ldr	r3, [pc, #44]	@ (8005180 <VT_KEYPAD+0x300>)
 8005152:	881b      	ldrh	r3, [r3, #0]
 8005154:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8005158:	4293      	cmp	r3, r2
 800515a:	d806      	bhi.n	800516a <VT_KEYPAD+0x2ea>
			intiger_val_vt_send(0x01, vt_value);
 800515c:	4b08      	ldr	r3, [pc, #32]	@ (8005180 <VT_KEYPAD+0x300>)
 800515e:	881b      	ldrh	r3, [r3, #0]
 8005160:	4619      	mov	r1, r3
 8005162:	2001      	movs	r0, #1
 8005164:	f7fd fb5a 	bl	800281c <intiger_val_vt_send>
		}else{
			vt_value = vt_value;
		}
	}
}
 8005168:	e003      	b.n	8005172 <VT_KEYPAD+0x2f2>
			vt_value = vt_value;
 800516a:	4b05      	ldr	r3, [pc, #20]	@ (8005180 <VT_KEYPAD+0x300>)
 800516c:	881a      	ldrh	r2, [r3, #0]
 800516e:	4b04      	ldr	r3, [pc, #16]	@ (8005180 <VT_KEYPAD+0x300>)
 8005170:	801a      	strh	r2, [r3, #0]
}
 8005172:	bf00      	nop
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	20001b39 	.word	0x20001b39
 8005180:	20000034 	.word	0x20000034
 8005184:	20000044 	.word	0x20000044

08005188 <SPI_Init>:
//..........................oxygen_sensor............
void SPI_Init(void)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	af00      	add	r7, sp, #0
	HAL_SPI_Init(&hspi3);
 800518c:	4802      	ldr	r0, [pc, #8]	@ (8005198 <SPI_Init+0x10>)
 800518e:	f009 ff1d 	bl	800efcc <HAL_SPI_Init>
}
 8005192:	bf00      	nop
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	20000ee8 	.word	0x20000ee8

0800519c <MCP3551_ReadData>:
HAL_StatusTypeDef MCP3551_ReadData(void)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
	uint8_t txBuffer[1] = {MCP3551_START_CONVERSION_CMD};
 80051a2:	2324      	movs	r3, #36	@ 0x24
 80051a4:	723b      	strb	r3, [r7, #8]
	uint8_t tempBuffer[3] = {0};  // Temporary buffer
 80051a6:	1d3b      	adds	r3, r7, #4
 80051a8:	2100      	movs	r1, #0
 80051aa:	460a      	mov	r2, r1
 80051ac:	801a      	strh	r2, [r3, #0]
 80051ae:	460a      	mov	r2, r1
 80051b0:	709a      	strb	r2, [r3, #2]
	uint32_t rawData = 0;
 80051b2:	2300      	movs	r3, #0
 80051b4:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80051b6:	2200      	movs	r2, #0
 80051b8:	2110      	movs	r1, #16
 80051ba:	481b      	ldr	r0, [pc, #108]	@ (8005228 <MCP3551_ReadData+0x8c>)
 80051bc:	f008 fd3c 	bl	800dc38 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, txBuffer, 1, HAL_MAX_DELAY); // Send command
 80051c0:	f107 0108 	add.w	r1, r7, #8
 80051c4:	f04f 33ff 	mov.w	r3, #4294967295
 80051c8:	2201      	movs	r2, #1
 80051ca:	4818      	ldr	r0, [pc, #96]	@ (800522c <MCP3551_ReadData+0x90>)
 80051cc:	f009 ff87 	bl	800f0de <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, tempBuffer, 3, HAL_MAX_DELAY); // Read ADC data
 80051d0:	1d39      	adds	r1, r7, #4
 80051d2:	f04f 33ff 	mov.w	r3, #4294967295
 80051d6:	2203      	movs	r2, #3
 80051d8:	4814      	ldr	r0, [pc, #80]	@ (800522c <MCP3551_ReadData+0x90>)
 80051da:	f00a f8c4 	bl	800f366 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80051de:	2201      	movs	r2, #1
 80051e0:	2110      	movs	r1, #16
 80051e2:	4811      	ldr	r0, [pc, #68]	@ (8005228 <MCP3551_ReadData+0x8c>)
 80051e4:	f008 fd28 	bl	800dc38 <HAL_GPIO_WritePin>

	// Combine received bytes into a 24-bit number
	rawData = ((uint32_t)tempBuffer[0] << 16) | ((uint32_t)tempBuffer[1] << 8) | tempBuffer[2];
 80051e8:	793b      	ldrb	r3, [r7, #4]
 80051ea:	041a      	lsls	r2, r3, #16
 80051ec:	797b      	ldrb	r3, [r7, #5]
 80051ee:	021b      	lsls	r3, r3, #8
 80051f0:	4313      	orrs	r3, r2
 80051f2:	79ba      	ldrb	r2, [r7, #6]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	60fb      	str	r3, [r7, #12]

	// Ignore erroneous max values (0xFFFFFF)
	if (rawData == 0xFFFFFF)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 80051fe:	4293      	cmp	r3, r2
 8005200:	d101      	bne.n	8005206 <MCP3551_ReadData+0x6a>
	{
		return HAL_ERROR; // Signal an error to avoid processing invalid data
 8005202:	2301      	movs	r3, #1
 8005204:	e00c      	b.n	8005220 <MCP3551_ReadData+0x84>
	}

	// MCP3551 is a 24-bit signed ADC, apply sign extension for 32-bit storage
	if (rawData & 0x800000)  // Check if the sign bit is set (MSB of 24-bit)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d003      	beq.n	8005218 <MCP3551_ReadData+0x7c>
	{
		rawData |= 0xFF000000; // Sign-extend to 32-bit (keep negative values correct)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005216:	60fb      	str	r3, [r7, #12]
	}

	adcValue = rawData; // Store corrected ADC value
 8005218:	4a05      	ldr	r2, [pc, #20]	@ (8005230 <MCP3551_ReadData+0x94>)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6013      	str	r3, [r2, #0]
	return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3710      	adds	r7, #16
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	40020000 	.word	0x40020000
 800522c:	20000ee8 	.word	0x20000ee8
 8005230:	20001394 	.word	0x20001394

08005234 <oxy_per>:

void oxy_per(void) {
 8005234:	b580      	push	{r7, lr}
 8005236:	b088      	sub	sp, #32
 8005238:	af00      	add	r7, sp, #0
	uint8_t send_intiger_val[8] = { 0x5A, 0xA5, 0x05, 0x82, 0x10, 0x68, 0x00,
 800523a:	4a27      	ldr	r2, [pc, #156]	@ (80052d8 <oxy_per+0xa4>)
 800523c:	f107 0310 	add.w	r3, r7, #16
 8005240:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005244:	e883 0003 	stmia.w	r3, {r0, r1}
			0x00 };
	uint8_t msb = 0x00;
 8005248:	2300      	movs	r3, #0
 800524a:	77fb      	strb	r3, [r7, #31]
	uint8_t lsb = 0x00;
 800524c:	2300      	movs	r3, #0
 800524e:	77bb      	strb	r3, [r7, #30]
	int value = 0.0;
 8005250:	2300      	movs	r3, #0
 8005252:	61bb      	str	r3, [r7, #24]
	//MV_value_var = (sensor_flow_for_vt * RR_temp_value) / 1000;
	//value = MV_value_var * 100;
	value = Percent;
 8005254:	4b21      	ldr	r3, [pc, #132]	@ (80052dc <oxy_per+0xa8>)
 8005256:	edd3 7a00 	vldr	s15, [r3]
 800525a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800525e:	ee17 3a90 	vmov	r3, s15
 8005262:	61bb      	str	r3, [r7, #24]
	char temp_float_data[4] = { 0, 0, 0, 0 };
 8005264:	2300      	movs	r3, #0
 8005266:	60fb      	str	r3, [r7, #12]
	char float_hexStr[5];

	sprintf(temp_float_data, "%X", value);
 8005268:	f107 030c 	add.w	r3, r7, #12
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	491c      	ldr	r1, [pc, #112]	@ (80052e0 <oxy_per+0xac>)
 8005270:	4618      	mov	r0, r3
 8005272:	f010 f95b 	bl	801552c <siprintf>
	sprintf("hex %s", temp_float_data);
 8005276:	f107 030c 	add.w	r3, r7, #12
 800527a:	4619      	mov	r1, r3
 800527c:	4819      	ldr	r0, [pc, #100]	@ (80052e4 <oxy_per+0xb0>)
 800527e:	f010 f955 	bl	801552c <siprintf>
	float_hexStr[0] = temp_float_data[0];
 8005282:	7b3b      	ldrb	r3, [r7, #12]
 8005284:	713b      	strb	r3, [r7, #4]
	float_hexStr[1] = temp_float_data[1];
 8005286:	7b7b      	ldrb	r3, [r7, #13]
 8005288:	717b      	strb	r3, [r7, #5]
	float_hexStr[2] = temp_float_data[2];
 800528a:	7bbb      	ldrb	r3, [r7, #14]
 800528c:	71bb      	strb	r3, [r7, #6]
	float_hexStr[3] = temp_float_data[3];
 800528e:	7bfb      	ldrb	r3, [r7, #15]
 8005290:	71fb      	strb	r3, [r7, #7]
	float_hexStr[4] = '\0';
 8005292:	2300      	movs	r3, #0
 8005294:	723b      	strb	r3, [r7, #8]
	result4 = (uint16_t) strtol(float_hexStr, NULL, 16);
 8005296:	1d3b      	adds	r3, r7, #4
 8005298:	2210      	movs	r2, #16
 800529a:	2100      	movs	r1, #0
 800529c:	4618      	mov	r0, r3
 800529e:	f010 f93b 	bl	8015518 <strtol>
 80052a2:	4603      	mov	r3, r0
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	4b10      	ldr	r3, [pc, #64]	@ (80052e8 <oxy_per+0xb4>)
 80052a8:	801a      	strh	r2, [r3, #0]
	lsb = result4;
 80052aa:	4b0f      	ldr	r3, [pc, #60]	@ (80052e8 <oxy_per+0xb4>)
 80052ac:	881b      	ldrh	r3, [r3, #0]
 80052ae:	77bb      	strb	r3, [r7, #30]
	msb = result4 >> 8;
 80052b0:	4b0d      	ldr	r3, [pc, #52]	@ (80052e8 <oxy_per+0xb4>)
 80052b2:	881b      	ldrh	r3, [r3, #0]
 80052b4:	0a1b      	lsrs	r3, r3, #8
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	77fb      	strb	r3, [r7, #31]
	send_intiger_val[6] = msb;
 80052ba:	7ffb      	ldrb	r3, [r7, #31]
 80052bc:	75bb      	strb	r3, [r7, #22]
	send_intiger_val[7] = lsb;
 80052be:	7fbb      	ldrb	r3, [r7, #30]
 80052c0:	75fb      	strb	r3, [r7, #23]
	//        HAL_UART_Transmit(&huart1, send_integer_val, 8, HAL_MAX_DELAY);

	//    send_intiger_val[7] = MV_data;
	HAL_UART_Transmit(&huart1, send_intiger_val, sizeof(send_intiger_val),
 80052c2:	f107 0110 	add.w	r1, r7, #16
 80052c6:	2301      	movs	r3, #1
 80052c8:	2208      	movs	r2, #8
 80052ca:	4808      	ldr	r0, [pc, #32]	@ (80052ec <oxy_per+0xb8>)
 80052cc:	f00b fd22 	bl	8010d14 <HAL_UART_Transmit>
			1);
}
 80052d0:	bf00      	nop
 80052d2:	3720      	adds	r7, #32
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	08016158 	.word	0x08016158
 80052dc:	20001924 	.word	0x20001924
 80052e0:	08016124 	.word	0x08016124
 80052e4:	08016128 	.word	0x08016128
 80052e8:	20001a92 	.word	0x20001a92
 80052ec:	20000fd0 	.word	0x20000fd0

080052f0 <convert_ADC_to_Percentage>:
float convert_ADC_to_Percentage(uint32_t adcValue) {
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
	Oxygen = ((float)adcValue / 6221656) * 100;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	ee07 3a90 	vmov	s15, r3
 80052fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005302:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8005368 <convert_ADC_to_Percentage+0x78>
 8005306:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800530a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800536c <convert_ADC_to_Percentage+0x7c>
 800530e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005312:	4b17      	ldr	r3, [pc, #92]	@ (8005370 <convert_ADC_to_Percentage+0x80>)
 8005314:	edc3 7a00 	vstr	s15, [r3]
	Percent = ((float)adcValue / 6221656) * 1000;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	ee07 3a90 	vmov	s15, r3
 800531e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005322:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8005368 <convert_ADC_to_Percentage+0x78>
 8005326:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800532a:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8005374 <convert_ADC_to_Percentage+0x84>
 800532e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005332:	4b11      	ldr	r3, [pc, #68]	@ (8005378 <convert_ADC_to_Percentage+0x88>)
 8005334:	edc3 7a00 	vstr	s15, [r3]
	if(Percent >= 1000){
 8005338:	4b0f      	ldr	r3, [pc, #60]	@ (8005378 <convert_ADC_to_Percentage+0x88>)
 800533a:	edd3 7a00 	vldr	s15, [r3]
 800533e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8005374 <convert_ADC_to_Percentage+0x84>
 8005342:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800534a:	db02      	blt.n	8005352 <convert_ADC_to_Percentage+0x62>
		Percent =1000;
 800534c:	4b0a      	ldr	r3, [pc, #40]	@ (8005378 <convert_ADC_to_Percentage+0x88>)
 800534e:	4a0b      	ldr	r2, [pc, #44]	@ (800537c <convert_ADC_to_Percentage+0x8c>)
 8005350:	601a      	str	r2, [r3, #0]

	}// 2^24 - 1 = 16777215
	return Percent;
 8005352:	4b09      	ldr	r3, [pc, #36]	@ (8005378 <convert_ADC_to_Percentage+0x88>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	ee07 3a90 	vmov	s15, r3
}
 800535a:	eeb0 0a67 	vmov.f32	s0, s15
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr
 8005368:	4abddeb0 	.word	0x4abddeb0
 800536c:	42c80000 	.word	0x42c80000
 8005370:	20001928 	.word	0x20001928
 8005374:	447a0000 	.word	0x447a0000
 8005378:	20001924 	.word	0x20001924
 800537c:	447a0000 	.word	0x447a0000

08005380 <computeFlowFromPressure>:



void computeFlowFromPressure(float current_pressure)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	ed87 0a01 	vstr	s0, [r7, #4]
	dp1 = dp - p_flow_prev;
 800538a:	4b1b      	ldr	r3, [pc, #108]	@ (80053f8 <computeFlowFromPressure+0x78>)
 800538c:	ed93 7a00 	vldr	s14, [r3]
 8005390:	4b1a      	ldr	r3, [pc, #104]	@ (80053fc <computeFlowFromPressure+0x7c>)
 8005392:	edd3 7a00 	vldr	s15, [r3]
 8005396:	ee77 7a67 	vsub.f32	s15, s14, s15
 800539a:	4b19      	ldr	r3, [pc, #100]	@ (8005400 <computeFlowFromPressure+0x80>)
 800539c:	edc3 7a00 	vstr	s15, [r3]
	flow_Lps = COMPLIANCE_ADULT * (dp1 / SAMPLE_TIME);
 80053a0:	4b17      	ldr	r3, [pc, #92]	@ (8005400 <computeFlowFromPressure+0x80>)
 80053a2:	ed93 7a00 	vldr	s14, [r3]
 80053a6:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8005404 <computeFlowFromPressure+0x84>
 80053aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80053ae:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8005408 <computeFlowFromPressure+0x88>
 80053b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053b6:	4b15      	ldr	r3, [pc, #84]	@ (800540c <computeFlowFromPressure+0x8c>)
 80053b8:	edc3 7a00 	vstr	s15, [r3]
	p_flow_prev = dp;
 80053bc:	4b0e      	ldr	r3, [pc, #56]	@ (80053f8 <computeFlowFromPressure+0x78>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a0e      	ldr	r2, [pc, #56]	@ (80053fc <computeFlowFromPressure+0x7c>)
 80053c2:	6013      	str	r3, [r2, #0]
	volume_mL += flow_Lps * 1000.0f * SAMPLE_TIME;
 80053c4:	4b11      	ldr	r3, [pc, #68]	@ (800540c <computeFlowFromPressure+0x8c>)
 80053c6:	edd3 7a00 	vldr	s15, [r3]
 80053ca:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8005410 <computeFlowFromPressure+0x90>
 80053ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053d2:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8005404 <computeFlowFromPressure+0x84>
 80053d6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80053da:	4b0e      	ldr	r3, [pc, #56]	@ (8005414 <computeFlowFromPressure+0x94>)
 80053dc:	edd3 7a00 	vldr	s15, [r3]
 80053e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005414 <computeFlowFromPressure+0x94>)
 80053e6:	edc3 7a00 	vstr	s15, [r3]
}
 80053ea:	bf00      	nop
 80053ec:	370c      	adds	r7, #12
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	20001368 	.word	0x20001368
 80053fc:	200013a0 	.word	0x200013a0
 8005400:	200013ec 	.word	0x200013ec
 8005404:	3c23d70a 	.word	0x3c23d70a
 8005408:	3ccccccd 	.word	0x3ccccccd
 800540c:	20001b3c 	.word	0x20001b3c
 8005410:	447a0000 	.word	0x447a0000
 8005414:	20001b40 	.word	0x20001b40

08005418 <differential_flow>:
float differential_flow(void){
 8005418:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800541c:	af00      	add	r7, sp, #0
	//	if(VT_UPDATE_FLAG == 0){
	Qt = (0.1512 * p_flow * p_flow * p_flow) - (3.3424 * p_flow * p_flow) + (41.65 * p_flow);
 800541e:	4b4a      	ldr	r3, [pc, #296]	@ (8005548 <differential_flow+0x130>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4618      	mov	r0, r3
 8005424:	f7fb f888 	bl	8000538 <__aeabi_f2d>
 8005428:	a33f      	add	r3, pc, #252	@ (adr r3, 8005528 <differential_flow+0x110>)
 800542a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542e:	f7fb f8db 	bl	80005e8 <__aeabi_dmul>
 8005432:	4602      	mov	r2, r0
 8005434:	460b      	mov	r3, r1
 8005436:	4614      	mov	r4, r2
 8005438:	461d      	mov	r5, r3
 800543a:	4b43      	ldr	r3, [pc, #268]	@ (8005548 <differential_flow+0x130>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4618      	mov	r0, r3
 8005440:	f7fb f87a 	bl	8000538 <__aeabi_f2d>
 8005444:	4602      	mov	r2, r0
 8005446:	460b      	mov	r3, r1
 8005448:	4620      	mov	r0, r4
 800544a:	4629      	mov	r1, r5
 800544c:	f7fb f8cc 	bl	80005e8 <__aeabi_dmul>
 8005450:	4602      	mov	r2, r0
 8005452:	460b      	mov	r3, r1
 8005454:	4614      	mov	r4, r2
 8005456:	461d      	mov	r5, r3
 8005458:	4b3b      	ldr	r3, [pc, #236]	@ (8005548 <differential_flow+0x130>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4618      	mov	r0, r3
 800545e:	f7fb f86b 	bl	8000538 <__aeabi_f2d>
 8005462:	4602      	mov	r2, r0
 8005464:	460b      	mov	r3, r1
 8005466:	4620      	mov	r0, r4
 8005468:	4629      	mov	r1, r5
 800546a:	f7fb f8bd 	bl	80005e8 <__aeabi_dmul>
 800546e:	4602      	mov	r2, r0
 8005470:	460b      	mov	r3, r1
 8005472:	4614      	mov	r4, r2
 8005474:	461d      	mov	r5, r3
 8005476:	4b34      	ldr	r3, [pc, #208]	@ (8005548 <differential_flow+0x130>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4618      	mov	r0, r3
 800547c:	f7fb f85c 	bl	8000538 <__aeabi_f2d>
 8005480:	a32b      	add	r3, pc, #172	@ (adr r3, 8005530 <differential_flow+0x118>)
 8005482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005486:	f7fb f8af 	bl	80005e8 <__aeabi_dmul>
 800548a:	4602      	mov	r2, r0
 800548c:	460b      	mov	r3, r1
 800548e:	4690      	mov	r8, r2
 8005490:	4699      	mov	r9, r3
 8005492:	4b2d      	ldr	r3, [pc, #180]	@ (8005548 <differential_flow+0x130>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4618      	mov	r0, r3
 8005498:	f7fb f84e 	bl	8000538 <__aeabi_f2d>
 800549c:	4602      	mov	r2, r0
 800549e:	460b      	mov	r3, r1
 80054a0:	4640      	mov	r0, r8
 80054a2:	4649      	mov	r1, r9
 80054a4:	f7fb f8a0 	bl	80005e8 <__aeabi_dmul>
 80054a8:	4602      	mov	r2, r0
 80054aa:	460b      	mov	r3, r1
 80054ac:	4620      	mov	r0, r4
 80054ae:	4629      	mov	r1, r5
 80054b0:	f7fa fee2 	bl	8000278 <__aeabi_dsub>
 80054b4:	4602      	mov	r2, r0
 80054b6:	460b      	mov	r3, r1
 80054b8:	4614      	mov	r4, r2
 80054ba:	461d      	mov	r5, r3
 80054bc:	4b22      	ldr	r3, [pc, #136]	@ (8005548 <differential_flow+0x130>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7fb f839 	bl	8000538 <__aeabi_f2d>
 80054c6:	a31c      	add	r3, pc, #112	@ (adr r3, 8005538 <differential_flow+0x120>)
 80054c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054cc:	f7fb f88c 	bl	80005e8 <__aeabi_dmul>
 80054d0:	4602      	mov	r2, r0
 80054d2:	460b      	mov	r3, r1
 80054d4:	4620      	mov	r0, r4
 80054d6:	4629      	mov	r1, r5
 80054d8:	f7fa fed0 	bl	800027c <__adddf3>
 80054dc:	4602      	mov	r2, r0
 80054de:	460b      	mov	r3, r1
 80054e0:	4610      	mov	r0, r2
 80054e2:	4619      	mov	r1, r3
 80054e4:	f7fb fb78 	bl	8000bd8 <__aeabi_d2f>
 80054e8:	4603      	mov	r3, r0
 80054ea:	4a18      	ldr	r2, [pc, #96]	@ (800554c <differential_flow+0x134>)
 80054ec:	6013      	str	r3, [r2, #0]
	mlsQt = Qt * 16.67;
 80054ee:	4b17      	ldr	r3, [pc, #92]	@ (800554c <differential_flow+0x134>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7fb f820 	bl	8000538 <__aeabi_f2d>
 80054f8:	a311      	add	r3, pc, #68	@ (adr r3, 8005540 <differential_flow+0x128>)
 80054fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fe:	f7fb f873 	bl	80005e8 <__aeabi_dmul>
 8005502:	4602      	mov	r2, r0
 8005504:	460b      	mov	r3, r1
 8005506:	4610      	mov	r0, r2
 8005508:	4619      	mov	r1, r3
 800550a:	f7fb fb65 	bl	8000bd8 <__aeabi_d2f>
 800550e:	4603      	mov	r3, r0
 8005510:	4a0f      	ldr	r2, [pc, #60]	@ (8005550 <differential_flow+0x138>)
 8005512:	6013      	str	r3, [r2, #0]
	//	}
	return mlsQt;
 8005514:	4b0e      	ldr	r3, [pc, #56]	@ (8005550 <differential_flow+0x138>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	ee07 3a90 	vmov	s15, r3
}
 800551c:	eeb0 0a67 	vmov.f32	s0, s15
 8005520:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005524:	f3af 8000 	nop.w
 8005528:	8793dd98 	.word	0x8793dd98
 800552c:	3fc35a85 	.word	0x3fc35a85
 8005530:	36113405 	.word	0x36113405
 8005534:	400abd3c 	.word	0x400abd3c
 8005538:	33333333 	.word	0x33333333
 800553c:	4044d333 	.word	0x4044d333
 8005540:	1eb851ec 	.word	0x1eb851ec
 8005544:	4030ab85 	.word	0x4030ab85
 8005548:	2000139c 	.word	0x2000139c
 800554c:	20001360 	.word	0x20001360
 8005550:	20001364 	.word	0x20001364

08005554 <dwin_data>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_dwin_data */
void dwin_data(void const * argument)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b0d0      	sub	sp, #320	@ 0x140
 8005558:	af00      	add	r7, sp, #0
 800555a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800555e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005562:	6018      	str	r0, [r3, #0]
	/* USER CODE BEGIN 5 */
	//	Pre_set_value_show();
	//	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
	if(county++ == 0){
 8005564:	4b23      	ldr	r3, [pc, #140]	@ (80055f4 <dwin_data+0xa0>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	1c5a      	adds	r2, r3, #1
 800556a:	4922      	ldr	r1, [pc, #136]	@ (80055f4 <dwin_data+0xa0>)
 800556c:	600a      	str	r2, [r1, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	f040 81f5 	bne.w	800595e <dwin_data+0x40a>
		county=1;
 8005574:	4b1f      	ldr	r3, [pc, #124]	@ (80055f4 <dwin_data+0xa0>)
 8005576:	2201      	movs	r2, #1
 8005578:	601a      	str	r2, [r3, #0]

		//		osThreadSuspend(NotificationHandle);
		//		osThreadSuspend(BackupHandle);
		//W25Q_Write_Page(0, 0, strlen(rajat), rajat);

		W25Q_Read(0, 0, sizeof(tester), tester);
 800557a:	4b1f      	ldr	r3, [pc, #124]	@ (80055f8 <dwin_data+0xa4>)
 800557c:	2233      	movs	r2, #51	@ 0x33
 800557e:	2100      	movs	r1, #0
 8005580:	2000      	movs	r0, #0
 8005582:	f7fc fe77 	bl	8002274 <W25Q_Read>
		vt_value= (tester[25] <<8);
 8005586:	4b1c      	ldr	r3, [pc, #112]	@ (80055f8 <dwin_data+0xa4>)
 8005588:	7e5b      	ldrb	r3, [r3, #25]
 800558a:	021b      	lsls	r3, r3, #8
 800558c:	b29a      	uxth	r2, r3
 800558e:	4b1b      	ldr	r3, [pc, #108]	@ (80055fc <dwin_data+0xa8>)
 8005590:	801a      	strh	r2, [r3, #0]
		vt_value |= tester[26];
 8005592:	4b19      	ldr	r3, [pc, #100]	@ (80055f8 <dwin_data+0xa4>)
 8005594:	7e9b      	ldrb	r3, [r3, #26]
 8005596:	461a      	mov	r2, r3
 8005598:	4b18      	ldr	r3, [pc, #96]	@ (80055fc <dwin_data+0xa8>)
 800559a:	881b      	ldrh	r3, [r3, #0]
 800559c:	4313      	orrs	r3, r2
 800559e:	b29a      	uxth	r2, r3
 80055a0:	4b16      	ldr	r3, [pc, #88]	@ (80055fc <dwin_data+0xa8>)
 80055a2:	801a      	strh	r2, [r3, #0]
		vt_temp_value = vt_value;
 80055a4:	4b15      	ldr	r3, [pc, #84]	@ (80055fc <dwin_data+0xa8>)
 80055a6:	881a      	ldrh	r2, [r3, #0]
 80055a8:	4b15      	ldr	r3, [pc, #84]	@ (8005600 <dwin_data+0xac>)
 80055aa:	801a      	strh	r2, [r3, #0]

		if(vt_value == 65535){
 80055ac:	4b13      	ldr	r3, [pc, #76]	@ (80055fc <dwin_data+0xa8>)
 80055ae:	881b      	ldrh	r3, [r3, #0]
 80055b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d107      	bne.n	80055c8 <dwin_data+0x74>
			vt_value=300;
 80055b8:	4b10      	ldr	r3, [pc, #64]	@ (80055fc <dwin_data+0xa8>)
 80055ba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80055be:	801a      	strh	r2, [r3, #0]
			vt_temp_value = vt_value;
 80055c0:	4b0e      	ldr	r3, [pc, #56]	@ (80055fc <dwin_data+0xa8>)
 80055c2:	881a      	ldrh	r2, [r3, #0]
 80055c4:	4b0e      	ldr	r3, [pc, #56]	@ (8005600 <dwin_data+0xac>)
 80055c6:	801a      	strh	r2, [r3, #0]
		}

		if((tester[0] == 0xff)||(tester[1] == 0xff)||(tester[2] == 0xff)||(tester[3] == 0xff)){
 80055c8:	4b0b      	ldr	r3, [pc, #44]	@ (80055f8 <dwin_data+0xa4>)
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	2bff      	cmp	r3, #255	@ 0xff
 80055ce:	d00b      	beq.n	80055e8 <dwin_data+0x94>
 80055d0:	4b09      	ldr	r3, [pc, #36]	@ (80055f8 <dwin_data+0xa4>)
 80055d2:	785b      	ldrb	r3, [r3, #1]
 80055d4:	2bff      	cmp	r3, #255	@ 0xff
 80055d6:	d007      	beq.n	80055e8 <dwin_data+0x94>
 80055d8:	4b07      	ldr	r3, [pc, #28]	@ (80055f8 <dwin_data+0xa4>)
 80055da:	789b      	ldrb	r3, [r3, #2]
 80055dc:	2bff      	cmp	r3, #255	@ 0xff
 80055de:	d003      	beq.n	80055e8 <dwin_data+0x94>
 80055e0:	4b05      	ldr	r3, [pc, #20]	@ (80055f8 <dwin_data+0xa4>)
 80055e2:	78db      	ldrb	r3, [r3, #3]
 80055e4:	2bff      	cmp	r3, #255	@ 0xff
 80055e6:	d10f      	bne.n	8005608 <dwin_data+0xb4>
			Pre_set_value_show();
 80055e8:	f7fe f88a 	bl	8003700 <Pre_set_value_show>
			bk = 10;
 80055ec:	4b05      	ldr	r3, [pc, #20]	@ (8005604 <dwin_data+0xb0>)
 80055ee:	220a      	movs	r2, #10
 80055f0:	601a      	str	r2, [r3, #0]
 80055f2:	e0c8      	b.n	8005786 <dwin_data+0x232>
 80055f4:	2000196c 	.word	0x2000196c
 80055f8:	20001974 	.word	0x20001974
 80055fc:	20000034 	.word	0x20000034
 8005600:	20000044 	.word	0x20000044
 8005604:	200013cc 	.word	0x200013cc
		}
		else{
			//		W25Q_Read1(1, 0, sizeof(tester1), tester1);
			PLR_value = tester[0];
 8005608:	4b9e      	ldr	r3, [pc, #632]	@ (8005884 <dwin_data+0x330>)
 800560a:	781a      	ldrb	r2, [r3, #0]
 800560c:	4b9e      	ldr	r3, [pc, #632]	@ (8005888 <dwin_data+0x334>)
 800560e:	701a      	strb	r2, [r3, #0]
			RR_value = tester[1];
 8005610:	4b9c      	ldr	r3, [pc, #624]	@ (8005884 <dwin_data+0x330>)
 8005612:	785a      	ldrb	r2, [r3, #1]
 8005614:	4b9d      	ldr	r3, [pc, #628]	@ (800588c <dwin_data+0x338>)
 8005616:	701a      	strb	r2, [r3, #0]
			insP_value = tester[2];
 8005618:	4b9a      	ldr	r3, [pc, #616]	@ (8005884 <dwin_data+0x330>)
 800561a:	789b      	ldrb	r3, [r3, #2]
 800561c:	461a      	mov	r2, r3
 800561e:	4b9c      	ldr	r3, [pc, #624]	@ (8005890 <dwin_data+0x33c>)
 8005620:	601a      	str	r2, [r3, #0]
			exp_value = tester[3];
 8005622:	4b98      	ldr	r3, [pc, #608]	@ (8005884 <dwin_data+0x330>)
 8005624:	78db      	ldrb	r3, [r3, #3]
 8005626:	461a      	mov	r2, r3
 8005628:	4b9a      	ldr	r3, [pc, #616]	@ (8005894 <dwin_data+0x340>)
 800562a:	601a      	str	r2, [r3, #0]
			PU_value = tester[4];
 800562c:	4b95      	ldr	r3, [pc, #596]	@ (8005884 <dwin_data+0x330>)
 800562e:	791a      	ldrb	r2, [r3, #4]
 8005630:	4b99      	ldr	r3, [pc, #612]	@ (8005898 <dwin_data+0x344>)
 8005632:	701a      	strb	r2, [r3, #0]
			TRG_value = tester[5];
 8005634:	4b93      	ldr	r3, [pc, #588]	@ (8005884 <dwin_data+0x330>)
 8005636:	795b      	ldrb	r3, [r3, #5]
 8005638:	461a      	mov	r2, r3
 800563a:	4b98      	ldr	r3, [pc, #608]	@ (800589c <dwin_data+0x348>)
 800563c:	601a      	str	r2, [r3, #0]
			PIP_value = tester[6];
 800563e:	4b91      	ldr	r3, [pc, #580]	@ (8005884 <dwin_data+0x330>)
 8005640:	799b      	ldrb	r3, [r3, #6]
 8005642:	b25a      	sxtb	r2, r3
 8005644:	4b96      	ldr	r3, [pc, #600]	@ (80058a0 <dwin_data+0x34c>)
 8005646:	701a      	strb	r2, [r3, #0]
			PEEP_value = tester[7];
 8005648:	4b8e      	ldr	r3, [pc, #568]	@ (8005884 <dwin_data+0x330>)
 800564a:	79da      	ldrb	r2, [r3, #7]
 800564c:	4b95      	ldr	r3, [pc, #596]	@ (80058a4 <dwin_data+0x350>)
 800564e:	701a      	strb	r2, [r3, #0]
			P_peak_alarm_max_value = tester[8];
 8005650:	4b8c      	ldr	r3, [pc, #560]	@ (8005884 <dwin_data+0x330>)
 8005652:	7a1a      	ldrb	r2, [r3, #8]
 8005654:	4b94      	ldr	r3, [pc, #592]	@ (80058a8 <dwin_data+0x354>)
 8005656:	701a      	strb	r2, [r3, #0]
			P_peak_alarm_min_value = tester[9];
 8005658:	4b8a      	ldr	r3, [pc, #552]	@ (8005884 <dwin_data+0x330>)
 800565a:	7a5a      	ldrb	r2, [r3, #9]
 800565c:	4b93      	ldr	r3, [pc, #588]	@ (80058ac <dwin_data+0x358>)
 800565e:	701a      	strb	r2, [r3, #0]
			MV_alarm_max_value = tester[10];
 8005660:	4b88      	ldr	r3, [pc, #544]	@ (8005884 <dwin_data+0x330>)
 8005662:	7a9a      	ldrb	r2, [r3, #10]
 8005664:	4b92      	ldr	r3, [pc, #584]	@ (80058b0 <dwin_data+0x35c>)
 8005666:	701a      	strb	r2, [r3, #0]
			MV_alarm_min_value = tester[11];
 8005668:	4b86      	ldr	r3, [pc, #536]	@ (8005884 <dwin_data+0x330>)
 800566a:	7ada      	ldrb	r2, [r3, #11]
 800566c:	4b91      	ldr	r3, [pc, #580]	@ (80058b4 <dwin_data+0x360>)
 800566e:	701a      	strb	r2, [r3, #0]
			RR_alarm_max_value = tester[12];
 8005670:	4b84      	ldr	r3, [pc, #528]	@ (8005884 <dwin_data+0x330>)
 8005672:	7b1a      	ldrb	r2, [r3, #12]
 8005674:	4b90      	ldr	r3, [pc, #576]	@ (80058b8 <dwin_data+0x364>)
 8005676:	701a      	strb	r2, [r3, #0]
			RR_alarm_min_value = tester[13];
 8005678:	4b82      	ldr	r3, [pc, #520]	@ (8005884 <dwin_data+0x330>)
 800567a:	7b5a      	ldrb	r2, [r3, #13]
 800567c:	4b8f      	ldr	r3, [pc, #572]	@ (80058bc <dwin_data+0x368>)
 800567e:	701a      	strb	r2, [r3, #0]
			peep_alarm_max_value = tester[14];
 8005680:	4b80      	ldr	r3, [pc, #512]	@ (8005884 <dwin_data+0x330>)
 8005682:	7b9a      	ldrb	r2, [r3, #14]
 8005684:	4b8e      	ldr	r3, [pc, #568]	@ (80058c0 <dwin_data+0x36c>)
 8005686:	701a      	strb	r2, [r3, #0]
			peep_alarm_min_value = tester[15];
 8005688:	4b7e      	ldr	r3, [pc, #504]	@ (8005884 <dwin_data+0x330>)
 800568a:	7bda      	ldrb	r2, [r3, #15]
 800568c:	4b8d      	ldr	r3, [pc, #564]	@ (80058c4 <dwin_data+0x370>)
 800568e:	701a      	strb	r2, [r3, #0]
			O2_alarm_max_value = tester[16];
 8005690:	4b7c      	ldr	r3, [pc, #496]	@ (8005884 <dwin_data+0x330>)
 8005692:	7c1a      	ldrb	r2, [r3, #16]
 8005694:	4b8c      	ldr	r3, [pc, #560]	@ (80058c8 <dwin_data+0x374>)
 8005696:	701a      	strb	r2, [r3, #0]
			O2_alarm_min_value = tester[17];
 8005698:	4b7a      	ldr	r3, [pc, #488]	@ (8005884 <dwin_data+0x330>)
 800569a:	7c5a      	ldrb	r2, [r3, #17]
 800569c:	4b8b      	ldr	r3, [pc, #556]	@ (80058cc <dwin_data+0x378>)
 800569e:	701a      	strb	r2, [r3, #0]
			PS_value = tester[18];
 80056a0:	4b78      	ldr	r3, [pc, #480]	@ (8005884 <dwin_data+0x330>)
 80056a2:	7c9a      	ldrb	r2, [r3, #18]
 80056a4:	4b8a      	ldr	r3, [pc, #552]	@ (80058d0 <dwin_data+0x37c>)
 80056a6:	701a      	strb	r2, [r3, #0]
			live_rr_value = tester[19];
 80056a8:	4b76      	ldr	r3, [pc, #472]	@ (8005884 <dwin_data+0x330>)
 80056aa:	7cda      	ldrb	r2, [r3, #19]
 80056ac:	4b89      	ldr	r3, [pc, #548]	@ (80058d4 <dwin_data+0x380>)
 80056ae:	701a      	strb	r2, [r3, #0]
			mode_select_number = tester[20];
 80056b0:	4b74      	ldr	r3, [pc, #464]	@ (8005884 <dwin_data+0x330>)
 80056b2:	7d1a      	ldrb	r2, [r3, #20]
 80056b4:	4b88      	ldr	r3, [pc, #544]	@ (80058d8 <dwin_data+0x384>)
 80056b6:	701a      	strb	r2, [r3, #0]
			m_icon_add = tester[21];
 80056b8:	4b72      	ldr	r3, [pc, #456]	@ (8005884 <dwin_data+0x330>)
 80056ba:	7d5a      	ldrb	r2, [r3, #21]
 80056bc:	4b87      	ldr	r3, [pc, #540]	@ (80058dc <dwin_data+0x388>)
 80056be:	701a      	strb	r2, [r3, #0]
			O2_flag = tester[22];
 80056c0:	4b70      	ldr	r3, [pc, #448]	@ (8005884 <dwin_data+0x330>)
 80056c2:	7d9b      	ldrb	r3, [r3, #22]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	bf14      	ite	ne
 80056c8:	2301      	movne	r3, #1
 80056ca:	2300      	moveq	r3, #0
 80056cc:	b2da      	uxtb	r2, r3
 80056ce:	4b84      	ldr	r3, [pc, #528]	@ (80058e0 <dwin_data+0x38c>)
 80056d0:	701a      	strb	r2, [r3, #0]
			Compliance_Adult_Flag = tester[23];
 80056d2:	4b6c      	ldr	r3, [pc, #432]	@ (8005884 <dwin_data+0x330>)
 80056d4:	7ddb      	ldrb	r3, [r3, #23]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	bf14      	ite	ne
 80056da:	2301      	movne	r3, #1
 80056dc:	2300      	moveq	r3, #0
 80056de:	b2da      	uxtb	r2, r3
 80056e0:	4b80      	ldr	r3, [pc, #512]	@ (80058e4 <dwin_data+0x390>)
 80056e2:	701a      	strb	r2, [r3, #0]
			Compliance_Neonate_Flag = tester[24];
 80056e4:	4b67      	ldr	r3, [pc, #412]	@ (8005884 <dwin_data+0x330>)
 80056e6:	7e1b      	ldrb	r3, [r3, #24]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	bf14      	ite	ne
 80056ec:	2301      	movne	r3, #1
 80056ee:	2300      	moveq	r3, #0
 80056f0:	b2da      	uxtb	r2, r3
 80056f2:	4b7d      	ldr	r3, [pc, #500]	@ (80058e8 <dwin_data+0x394>)
 80056f4:	701a      	strb	r2, [r3, #0]
			RR_temp_value = RR_value;
 80056f6:	4b65      	ldr	r3, [pc, #404]	@ (800588c <dwin_data+0x338>)
 80056f8:	781a      	ldrb	r2, [r3, #0]
 80056fa:	4b7c      	ldr	r3, [pc, #496]	@ (80058ec <dwin_data+0x398>)
 80056fc:	701a      	strb	r2, [r3, #0]
			PLR_temp_value = PLR_value;
 80056fe:	4b62      	ldr	r3, [pc, #392]	@ (8005888 <dwin_data+0x334>)
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	461a      	mov	r2, r3
 8005704:	4b7a      	ldr	r3, [pc, #488]	@ (80058f0 <dwin_data+0x39c>)
 8005706:	601a      	str	r2, [r3, #0]
			temp_insP_value = insP_value;
 8005708:	4b61      	ldr	r3, [pc, #388]	@ (8005890 <dwin_data+0x33c>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a79      	ldr	r2, [pc, #484]	@ (80058f4 <dwin_data+0x3a0>)
 800570e:	6013      	str	r3, [r2, #0]
			temp_exp_value = exp_value;
 8005710:	4b60      	ldr	r3, [pc, #384]	@ (8005894 <dwin_data+0x340>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a78      	ldr	r2, [pc, #480]	@ (80058f8 <dwin_data+0x3a4>)
 8005716:	6013      	str	r3, [r2, #0]
			PU_temp_value = PU_value;
 8005718:	4b5f      	ldr	r3, [pc, #380]	@ (8005898 <dwin_data+0x344>)
 800571a:	781a      	ldrb	r2, [r3, #0]
 800571c:	4b77      	ldr	r3, [pc, #476]	@ (80058fc <dwin_data+0x3a8>)
 800571e:	701a      	strb	r2, [r3, #0]
			PEEP_temp_value = PEEP_value;
 8005720:	4b60      	ldr	r3, [pc, #384]	@ (80058a4 <dwin_data+0x350>)
 8005722:	781a      	ldrb	r2, [r3, #0]
 8005724:	4b76      	ldr	r3, [pc, #472]	@ (8005900 <dwin_data+0x3ac>)
 8005726:	701a      	strb	r2, [r3, #0]
			PS_temp_value = PS_value;
 8005728:	4b69      	ldr	r3, [pc, #420]	@ (80058d0 <dwin_data+0x37c>)
 800572a:	781a      	ldrb	r2, [r3, #0]
 800572c:	4b75      	ldr	r3, [pc, #468]	@ (8005904 <dwin_data+0x3b0>)
 800572e:	701a      	strb	r2, [r3, #0]
			P_peak_alarm_max_value = P_peak_alarm_max_value;
 8005730:	4b5d      	ldr	r3, [pc, #372]	@ (80058a8 <dwin_data+0x354>)
 8005732:	781a      	ldrb	r2, [r3, #0]
 8005734:	4b5c      	ldr	r3, [pc, #368]	@ (80058a8 <dwin_data+0x354>)
 8005736:	701a      	strb	r2, [r3, #0]
			P_peak_alarm_min_value = P_peak_alarm_min_value;
 8005738:	4b5c      	ldr	r3, [pc, #368]	@ (80058ac <dwin_data+0x358>)
 800573a:	781a      	ldrb	r2, [r3, #0]
 800573c:	4b5b      	ldr	r3, [pc, #364]	@ (80058ac <dwin_data+0x358>)
 800573e:	701a      	strb	r2, [r3, #0]
			MV_alarm_max_value = MV_alarm_max_value;
 8005740:	4b5b      	ldr	r3, [pc, #364]	@ (80058b0 <dwin_data+0x35c>)
 8005742:	781a      	ldrb	r2, [r3, #0]
 8005744:	4b5a      	ldr	r3, [pc, #360]	@ (80058b0 <dwin_data+0x35c>)
 8005746:	701a      	strb	r2, [r3, #0]
			MV_alarm_min_value = MV_alarm_min_value;
 8005748:	4b5a      	ldr	r3, [pc, #360]	@ (80058b4 <dwin_data+0x360>)
 800574a:	781a      	ldrb	r2, [r3, #0]
 800574c:	4b59      	ldr	r3, [pc, #356]	@ (80058b4 <dwin_data+0x360>)
 800574e:	701a      	strb	r2, [r3, #0]
			RR_alarm_max_value = RR_alarm_max_value;
 8005750:	4b59      	ldr	r3, [pc, #356]	@ (80058b8 <dwin_data+0x364>)
 8005752:	781a      	ldrb	r2, [r3, #0]
 8005754:	4b58      	ldr	r3, [pc, #352]	@ (80058b8 <dwin_data+0x364>)
 8005756:	701a      	strb	r2, [r3, #0]
			RR_alarm_min_value = RR_alarm_min_value;
 8005758:	4b58      	ldr	r3, [pc, #352]	@ (80058bc <dwin_data+0x368>)
 800575a:	781a      	ldrb	r2, [r3, #0]
 800575c:	4b57      	ldr	r3, [pc, #348]	@ (80058bc <dwin_data+0x368>)
 800575e:	701a      	strb	r2, [r3, #0]
			peep_alarm_max_value = peep_alarm_max_value;
 8005760:	4b57      	ldr	r3, [pc, #348]	@ (80058c0 <dwin_data+0x36c>)
 8005762:	781a      	ldrb	r2, [r3, #0]
 8005764:	4b56      	ldr	r3, [pc, #344]	@ (80058c0 <dwin_data+0x36c>)
 8005766:	701a      	strb	r2, [r3, #0]
			peep_alarm_min_value = peep_alarm_min_value;
 8005768:	4b56      	ldr	r3, [pc, #344]	@ (80058c4 <dwin_data+0x370>)
 800576a:	781a      	ldrb	r2, [r3, #0]
 800576c:	4b55      	ldr	r3, [pc, #340]	@ (80058c4 <dwin_data+0x370>)
 800576e:	701a      	strb	r2, [r3, #0]
			O2_alarm_max_value = O2_alarm_max_value;
 8005770:	4b55      	ldr	r3, [pc, #340]	@ (80058c8 <dwin_data+0x374>)
 8005772:	781a      	ldrb	r2, [r3, #0]
 8005774:	4b54      	ldr	r3, [pc, #336]	@ (80058c8 <dwin_data+0x374>)
 8005776:	701a      	strb	r2, [r3, #0]
			O2_alarm_min_value = O2_alarm_min_value;
 8005778:	4b54      	ldr	r3, [pc, #336]	@ (80058cc <dwin_data+0x378>)
 800577a:	781a      	ldrb	r2, [r3, #0]
 800577c:	4b53      	ldr	r3, [pc, #332]	@ (80058cc <dwin_data+0x378>)
 800577e:	701a      	strb	r2, [r3, #0]
			bk=13;
 8005780:	4b61      	ldr	r3, [pc, #388]	@ (8005908 <dwin_data+0x3b4>)
 8005782:	220d      	movs	r2, #13
 8005784:	601a      	str	r2, [r3, #0]
			//		vt_value = tester1[0];
		}


		intiger_val_send_Backup(0x02, PLR_value);
 8005786:	4b40      	ldr	r3, [pc, #256]	@ (8005888 <dwin_data+0x334>)
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	4619      	mov	r1, r3
 800578c:	2002      	movs	r0, #2
 800578e:	f7fc ff57 	bl	8002640 <intiger_val_send_Backup>
		intiger_val_send_Backup(0x03, RR_value);
 8005792:	4b3e      	ldr	r3, [pc, #248]	@ (800588c <dwin_data+0x338>)
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	4619      	mov	r1, r3
 8005798:	2003      	movs	r0, #3
 800579a:	f7fc ff51 	bl	8002640 <intiger_val_send_Backup>
		intiger_val_send_Backup(0x05, PU_value);
 800579e:	4b3e      	ldr	r3, [pc, #248]	@ (8005898 <dwin_data+0x344>)
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	4619      	mov	r1, r3
 80057a4:	2005      	movs	r0, #5
 80057a6:	f7fc ff4b 	bl	8002640 <intiger_val_send_Backup>
		intiger_val_send_Backup(0x06, TRG_value);
 80057aa:	4b3c      	ldr	r3, [pc, #240]	@ (800589c <dwin_data+0x348>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	4619      	mov	r1, r3
 80057b2:	2006      	movs	r0, #6
 80057b4:	f7fc ff44 	bl	8002640 <intiger_val_send_Backup>
		PIP_VAL(0x07, PIP_value);
 80057b8:	4b39      	ldr	r3, [pc, #228]	@ (80058a0 <dwin_data+0x34c>)
 80057ba:	f993 3000 	ldrsb.w	r3, [r3]
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	4619      	mov	r1, r3
 80057c2:	2007      	movs	r0, #7
 80057c4:	f7fd f85a 	bl	800287c <PIP_VAL>
		intiger_val_send_Backup(0x08, PEEP_value);
 80057c8:	4b36      	ldr	r3, [pc, #216]	@ (80058a4 <dwin_data+0x350>)
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	4619      	mov	r1, r3
 80057ce:	2008      	movs	r0, #8
 80057d0:	f7fc ff36 	bl	8002640 <intiger_val_send_Backup>
		intiger_val_send_Backup(0x09, PS_value);
 80057d4:	4b3e      	ldr	r3, [pc, #248]	@ (80058d0 <dwin_data+0x37c>)
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	4619      	mov	r1, r3
 80057da:	2009      	movs	r0, #9
 80057dc:	f7fc ff30 	bl	8002640 <intiger_val_send_Backup>
		intiger_val_send_Backup(0x14, P_peak_alarm_max_value);
 80057e0:	4b31      	ldr	r3, [pc, #196]	@ (80058a8 <dwin_data+0x354>)
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	4619      	mov	r1, r3
 80057e6:	2014      	movs	r0, #20
 80057e8:	f7fc ff2a 	bl	8002640 <intiger_val_send_Backup>
		intiger_val_send_Backup(0x15, P_peak_alarm_min_value);
 80057ec:	4b2f      	ldr	r3, [pc, #188]	@ (80058ac <dwin_data+0x358>)
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	4619      	mov	r1, r3
 80057f2:	2015      	movs	r0, #21
 80057f4:	f7fc ff24 	bl	8002640 <intiger_val_send_Backup>
		intiger_val_send_Backup(0x16, MV_alarm_max_value);
 80057f8:	4b2d      	ldr	r3, [pc, #180]	@ (80058b0 <dwin_data+0x35c>)
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	4619      	mov	r1, r3
 80057fe:	2016      	movs	r0, #22
 8005800:	f7fc ff1e 	bl	8002640 <intiger_val_send_Backup>
		intiger_val_send_Backup(0x17, MV_alarm_min_value);
 8005804:	4b2b      	ldr	r3, [pc, #172]	@ (80058b4 <dwin_data+0x360>)
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	4619      	mov	r1, r3
 800580a:	2017      	movs	r0, #23
 800580c:	f7fc ff18 	bl	8002640 <intiger_val_send_Backup>
		intiger_val_send_Backup(0x18, RR_alarm_max_value);
 8005810:	4b29      	ldr	r3, [pc, #164]	@ (80058b8 <dwin_data+0x364>)
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	4619      	mov	r1, r3
 8005816:	2018      	movs	r0, #24
 8005818:	f7fc ff12 	bl	8002640 <intiger_val_send_Backup>
		intiger_val_send_Backup(0x19, RR_alarm_min_value);
 800581c:	4b27      	ldr	r3, [pc, #156]	@ (80058bc <dwin_data+0x368>)
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	4619      	mov	r1, r3
 8005822:	2019      	movs	r0, #25
 8005824:	f7fc ff0c 	bl	8002640 <intiger_val_send_Backup>
		intiger_val_send_Backup(0x1A, peep_alarm_max_value);
 8005828:	4b25      	ldr	r3, [pc, #148]	@ (80058c0 <dwin_data+0x36c>)
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	4619      	mov	r1, r3
 800582e:	201a      	movs	r0, #26
 8005830:	f7fc ff06 	bl	8002640 <intiger_val_send_Backup>
		intiger_val_send_Backup(0x21, peep_alarm_min_value);
 8005834:	4b23      	ldr	r3, [pc, #140]	@ (80058c4 <dwin_data+0x370>)
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	4619      	mov	r1, r3
 800583a:	2021      	movs	r0, #33	@ 0x21
 800583c:	f7fc ff00 	bl	8002640 <intiger_val_send_Backup>
		intiger_val_send_Backup(0x22, O2_alarm_max_value);
 8005840:	4b21      	ldr	r3, [pc, #132]	@ (80058c8 <dwin_data+0x374>)
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	4619      	mov	r1, r3
 8005846:	2022      	movs	r0, #34	@ 0x22
 8005848:	f7fc fefa 	bl	8002640 <intiger_val_send_Backup>
		intiger_val_send_Backup(0x23, O2_alarm_min_value);
 800584c:	4b1f      	ldr	r3, [pc, #124]	@ (80058cc <dwin_data+0x378>)
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	4619      	mov	r1, r3
 8005852:	2023      	movs	r0, #35	@ 0x23
 8005854:	f7fc fef4 	bl	8002640 <intiger_val_send_Backup>
		intiger_val_send_Backup(0x24, insP_value);
 8005858:	4b0d      	ldr	r3, [pc, #52]	@ (8005890 <dwin_data+0x33c>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	b2db      	uxtb	r3, r3
 800585e:	4619      	mov	r1, r3
 8005860:	2024      	movs	r0, #36	@ 0x24
 8005862:	f7fc feed 	bl	8002640 <intiger_val_send_Backup>
		intiger_val_send_Backup(0x25, exp_value);
 8005866:	4b0b      	ldr	r3, [pc, #44]	@ (8005894 <dwin_data+0x340>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	b2db      	uxtb	r3, r3
 800586c:	4619      	mov	r1, r3
 800586e:	2025      	movs	r0, #37	@ 0x25
 8005870:	f7fc fee6 	bl	8002640 <intiger_val_send_Backup>
		intiger_val_send_Backup(0x27, live_rr_value);
 8005874:	4b17      	ldr	r3, [pc, #92]	@ (80058d4 <dwin_data+0x380>)
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	4619      	mov	r1, r3
 800587a:	2027      	movs	r0, #39	@ 0x27
 800587c:	f7fc fee0 	bl	8002640 <intiger_val_send_Backup>
 8005880:	e044      	b.n	800590c <dwin_data+0x3b8>
 8005882:	bf00      	nop
 8005884:	20001974 	.word	0x20001974
 8005888:	20000036 	.word	0x20000036
 800588c:	20000037 	.word	0x20000037
 8005890:	2000002c 	.word	0x2000002c
 8005894:	20000030 	.word	0x20000030
 8005898:	2000195d 	.word	0x2000195d
 800589c:	20001960 	.word	0x20001960
 80058a0:	20000038 	.word	0x20000038
 80058a4:	20001964 	.word	0x20001964
 80058a8:	20000050 	.word	0x20000050
 80058ac:	200019e4 	.word	0x200019e4
 80058b0:	20000051 	.word	0x20000051
 80058b4:	200019e5 	.word	0x200019e5
 80058b8:	20000052 	.word	0x20000052
 80058bc:	2000004d 	.word	0x2000004d
 80058c0:	20000053 	.word	0x20000053
 80058c4:	2000004e 	.word	0x2000004e
 80058c8:	20000054 	.word	0x20000054
 80058cc:	2000004f 	.word	0x2000004f
 80058d0:	20001965 	.word	0x20001965
 80058d4:	20001966 	.word	0x20001966
 80058d8:	200019ae 	.word	0x200019ae
 80058dc:	200019e8 	.word	0x200019e8
 80058e0:	200019d4 	.word	0x200019d4
 80058e4:	20001b39 	.word	0x20001b39
 80058e8:	20001b38 	.word	0x20001b38
 80058ec:	2000004c 	.word	0x2000004c
 80058f0:	20000048 	.word	0x20000048
 80058f4:	2000003c 	.word	0x2000003c
 80058f8:	20000040 	.word	0x20000040
 80058fc:	20001967 	.word	0x20001967
 8005900:	20001968 	.word	0x20001968
 8005904:	20001969 	.word	0x20001969
 8005908:	200013cc 	.word	0x200013cc
		intiger_val_vt_send_Backup(0x01, vt_value);
 800590c:	4b34      	ldr	r3, [pc, #208]	@ (80059e0 <dwin_data+0x48c>)
 800590e:	881b      	ldrh	r3, [r3, #0]
 8005910:	4619      	mov	r1, r3
 8005912:	2001      	movs	r0, #1
 8005914:	f7fc feb8 	bl	8002688 <intiger_val_vt_send_Backup>
		//		intiger_val_vt_send_Backup(0x01, vt_value_backup);
		mode_select_number = tester[20];
 8005918:	4b32      	ldr	r3, [pc, #200]	@ (80059e4 <dwin_data+0x490>)
 800591a:	7d1a      	ldrb	r2, [r3, #20]
 800591c:	4b32      	ldr	r3, [pc, #200]	@ (80059e8 <dwin_data+0x494>)
 800591e:	701a      	strb	r2, [r3, #0]
		m_icon_add = tester[21];
 8005920:	4b30      	ldr	r3, [pc, #192]	@ (80059e4 <dwin_data+0x490>)
 8005922:	7d5a      	ldrb	r2, [r3, #21]
 8005924:	4b31      	ldr	r3, [pc, #196]	@ (80059ec <dwin_data+0x498>)
 8005926:	701a      	strb	r2, [r3, #0]
		O2_flag = tester[22];
 8005928:	4b2e      	ldr	r3, [pc, #184]	@ (80059e4 <dwin_data+0x490>)
 800592a:	7d9b      	ldrb	r3, [r3, #22]
 800592c:	2b00      	cmp	r3, #0
 800592e:	bf14      	ite	ne
 8005930:	2301      	movne	r3, #1
 8005932:	2300      	moveq	r3, #0
 8005934:	b2da      	uxtb	r2, r3
 8005936:	4b2e      	ldr	r3, [pc, #184]	@ (80059f0 <dwin_data+0x49c>)
 8005938:	701a      	strb	r2, [r3, #0]
		Compliance_Adult_Flag = tester[23];
 800593a:	4b2a      	ldr	r3, [pc, #168]	@ (80059e4 <dwin_data+0x490>)
 800593c:	7ddb      	ldrb	r3, [r3, #23]
 800593e:	2b00      	cmp	r3, #0
 8005940:	bf14      	ite	ne
 8005942:	2301      	movne	r3, #1
 8005944:	2300      	moveq	r3, #0
 8005946:	b2da      	uxtb	r2, r3
 8005948:	4b2a      	ldr	r3, [pc, #168]	@ (80059f4 <dwin_data+0x4a0>)
 800594a:	701a      	strb	r2, [r3, #0]
		Compliance_Neonate_Flag = tester[24];
 800594c:	4b25      	ldr	r3, [pc, #148]	@ (80059e4 <dwin_data+0x490>)
 800594e:	7e1b      	ldrb	r3, [r3, #24]
 8005950:	2b00      	cmp	r3, #0
 8005952:	bf14      	ite	ne
 8005954:	2301      	movne	r3, #1
 8005956:	2300      	moveq	r3, #0
 8005958:	b2da      	uxtb	r2, r3
 800595a:	4b27      	ldr	r3, [pc, #156]	@ (80059f8 <dwin_data+0x4a4>)
 800595c:	701a      	strb	r2, [r3, #0]
	/* Infinite loop */
	for(;;)
	{


		if(Trigger_Display){
 800595e:	4b27      	ldr	r3, [pc, #156]	@ (80059fc <dwin_data+0x4a8>)
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	b2db      	uxtb	r3, r3
 8005964:	2b00      	cmp	r3, #0
 8005966:	f000 81fb 	beq.w	8005d60 <dwin_data+0x80c>

			//		osThreadSuspend(NotificationHandle);
			//		osThreadSuspend(BackupHandle);
			//W25Q_Write_Page(0, 0, strlen(rajat), rajat);

			W25Q_Read(0, 0, sizeof(tester), tester);
 800596a:	4b1e      	ldr	r3, [pc, #120]	@ (80059e4 <dwin_data+0x490>)
 800596c:	2233      	movs	r2, #51	@ 0x33
 800596e:	2100      	movs	r1, #0
 8005970:	2000      	movs	r0, #0
 8005972:	f7fc fc7f 	bl	8002274 <W25Q_Read>
			vt_value= (tester[25] <<8);
 8005976:	4b1b      	ldr	r3, [pc, #108]	@ (80059e4 <dwin_data+0x490>)
 8005978:	7e5b      	ldrb	r3, [r3, #25]
 800597a:	021b      	lsls	r3, r3, #8
 800597c:	b29a      	uxth	r2, r3
 800597e:	4b18      	ldr	r3, [pc, #96]	@ (80059e0 <dwin_data+0x48c>)
 8005980:	801a      	strh	r2, [r3, #0]
			vt_value |= tester[26];
 8005982:	4b18      	ldr	r3, [pc, #96]	@ (80059e4 <dwin_data+0x490>)
 8005984:	7e9b      	ldrb	r3, [r3, #26]
 8005986:	461a      	mov	r2, r3
 8005988:	4b15      	ldr	r3, [pc, #84]	@ (80059e0 <dwin_data+0x48c>)
 800598a:	881b      	ldrh	r3, [r3, #0]
 800598c:	4313      	orrs	r3, r2
 800598e:	b29a      	uxth	r2, r3
 8005990:	4b13      	ldr	r3, [pc, #76]	@ (80059e0 <dwin_data+0x48c>)
 8005992:	801a      	strh	r2, [r3, #0]
			vt_temp_value = vt_value;
 8005994:	4b12      	ldr	r3, [pc, #72]	@ (80059e0 <dwin_data+0x48c>)
 8005996:	881a      	ldrh	r2, [r3, #0]
 8005998:	4b19      	ldr	r3, [pc, #100]	@ (8005a00 <dwin_data+0x4ac>)
 800599a:	801a      	strh	r2, [r3, #0]

			if(vt_value == 65535){
 800599c:	4b10      	ldr	r3, [pc, #64]	@ (80059e0 <dwin_data+0x48c>)
 800599e:	881b      	ldrh	r3, [r3, #0]
 80059a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d107      	bne.n	80059b8 <dwin_data+0x464>
				vt_value=300;
 80059a8:	4b0d      	ldr	r3, [pc, #52]	@ (80059e0 <dwin_data+0x48c>)
 80059aa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80059ae:	801a      	strh	r2, [r3, #0]
				vt_temp_value = vt_value;
 80059b0:	4b0b      	ldr	r3, [pc, #44]	@ (80059e0 <dwin_data+0x48c>)
 80059b2:	881a      	ldrh	r2, [r3, #0]
 80059b4:	4b12      	ldr	r3, [pc, #72]	@ (8005a00 <dwin_data+0x4ac>)
 80059b6:	801a      	strh	r2, [r3, #0]
			}

			if((tester[0] == 0xff)||(tester[1] == 0xff)||(tester[2] == 0xff)||(tester[3] == 0xff)){
 80059b8:	4b0a      	ldr	r3, [pc, #40]	@ (80059e4 <dwin_data+0x490>)
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	2bff      	cmp	r3, #255	@ 0xff
 80059be:	d00b      	beq.n	80059d8 <dwin_data+0x484>
 80059c0:	4b08      	ldr	r3, [pc, #32]	@ (80059e4 <dwin_data+0x490>)
 80059c2:	785b      	ldrb	r3, [r3, #1]
 80059c4:	2bff      	cmp	r3, #255	@ 0xff
 80059c6:	d007      	beq.n	80059d8 <dwin_data+0x484>
 80059c8:	4b06      	ldr	r3, [pc, #24]	@ (80059e4 <dwin_data+0x490>)
 80059ca:	789b      	ldrb	r3, [r3, #2]
 80059cc:	2bff      	cmp	r3, #255	@ 0xff
 80059ce:	d003      	beq.n	80059d8 <dwin_data+0x484>
 80059d0:	4b04      	ldr	r3, [pc, #16]	@ (80059e4 <dwin_data+0x490>)
 80059d2:	78db      	ldrb	r3, [r3, #3]
 80059d4:	2bff      	cmp	r3, #255	@ 0xff
 80059d6:	d115      	bne.n	8005a04 <dwin_data+0x4b0>
				Pre_set_value_show();
 80059d8:	f7fd fe92 	bl	8003700 <Pre_set_value_show>
 80059dc:	e0d0      	b.n	8005b80 <dwin_data+0x62c>
 80059de:	bf00      	nop
 80059e0:	20000034 	.word	0x20000034
 80059e4:	20001974 	.word	0x20001974
 80059e8:	200019ae 	.word	0x200019ae
 80059ec:	200019e8 	.word	0x200019e8
 80059f0:	200019d4 	.word	0x200019d4
 80059f4:	20001b39 	.word	0x20001b39
 80059f8:	20001b38 	.word	0x20001b38
 80059fc:	200019a7 	.word	0x200019a7
 8005a00:	20000044 	.word	0x20000044
			}
			else{
				//		W25Q_Read1(1, 0, sizeof(tester1), tester1);
				PLR_value = tester[0];
 8005a04:	4b9f      	ldr	r3, [pc, #636]	@ (8005c84 <dwin_data+0x730>)
 8005a06:	781a      	ldrb	r2, [r3, #0]
 8005a08:	4b9f      	ldr	r3, [pc, #636]	@ (8005c88 <dwin_data+0x734>)
 8005a0a:	701a      	strb	r2, [r3, #0]
				RR_value = tester[1];
 8005a0c:	4b9d      	ldr	r3, [pc, #628]	@ (8005c84 <dwin_data+0x730>)
 8005a0e:	785a      	ldrb	r2, [r3, #1]
 8005a10:	4b9e      	ldr	r3, [pc, #632]	@ (8005c8c <dwin_data+0x738>)
 8005a12:	701a      	strb	r2, [r3, #0]
				insP_value = tester[2];
 8005a14:	4b9b      	ldr	r3, [pc, #620]	@ (8005c84 <dwin_data+0x730>)
 8005a16:	789b      	ldrb	r3, [r3, #2]
 8005a18:	461a      	mov	r2, r3
 8005a1a:	4b9d      	ldr	r3, [pc, #628]	@ (8005c90 <dwin_data+0x73c>)
 8005a1c:	601a      	str	r2, [r3, #0]
				exp_value = tester[3];
 8005a1e:	4b99      	ldr	r3, [pc, #612]	@ (8005c84 <dwin_data+0x730>)
 8005a20:	78db      	ldrb	r3, [r3, #3]
 8005a22:	461a      	mov	r2, r3
 8005a24:	4b9b      	ldr	r3, [pc, #620]	@ (8005c94 <dwin_data+0x740>)
 8005a26:	601a      	str	r2, [r3, #0]
				PU_value = tester[4];
 8005a28:	4b96      	ldr	r3, [pc, #600]	@ (8005c84 <dwin_data+0x730>)
 8005a2a:	791a      	ldrb	r2, [r3, #4]
 8005a2c:	4b9a      	ldr	r3, [pc, #616]	@ (8005c98 <dwin_data+0x744>)
 8005a2e:	701a      	strb	r2, [r3, #0]
				TRG_value = tester[5];
 8005a30:	4b94      	ldr	r3, [pc, #592]	@ (8005c84 <dwin_data+0x730>)
 8005a32:	795b      	ldrb	r3, [r3, #5]
 8005a34:	461a      	mov	r2, r3
 8005a36:	4b99      	ldr	r3, [pc, #612]	@ (8005c9c <dwin_data+0x748>)
 8005a38:	601a      	str	r2, [r3, #0]
				PIP_value = tester[6];
 8005a3a:	4b92      	ldr	r3, [pc, #584]	@ (8005c84 <dwin_data+0x730>)
 8005a3c:	799b      	ldrb	r3, [r3, #6]
 8005a3e:	b25a      	sxtb	r2, r3
 8005a40:	4b97      	ldr	r3, [pc, #604]	@ (8005ca0 <dwin_data+0x74c>)
 8005a42:	701a      	strb	r2, [r3, #0]
				PEEP_value = tester[7];
 8005a44:	4b8f      	ldr	r3, [pc, #572]	@ (8005c84 <dwin_data+0x730>)
 8005a46:	79da      	ldrb	r2, [r3, #7]
 8005a48:	4b96      	ldr	r3, [pc, #600]	@ (8005ca4 <dwin_data+0x750>)
 8005a4a:	701a      	strb	r2, [r3, #0]
				P_peak_alarm_max_value = tester[8];
 8005a4c:	4b8d      	ldr	r3, [pc, #564]	@ (8005c84 <dwin_data+0x730>)
 8005a4e:	7a1a      	ldrb	r2, [r3, #8]
 8005a50:	4b95      	ldr	r3, [pc, #596]	@ (8005ca8 <dwin_data+0x754>)
 8005a52:	701a      	strb	r2, [r3, #0]
				P_peak_alarm_min_value = tester[9];
 8005a54:	4b8b      	ldr	r3, [pc, #556]	@ (8005c84 <dwin_data+0x730>)
 8005a56:	7a5a      	ldrb	r2, [r3, #9]
 8005a58:	4b94      	ldr	r3, [pc, #592]	@ (8005cac <dwin_data+0x758>)
 8005a5a:	701a      	strb	r2, [r3, #0]
				MV_alarm_max_value = tester[10];
 8005a5c:	4b89      	ldr	r3, [pc, #548]	@ (8005c84 <dwin_data+0x730>)
 8005a5e:	7a9a      	ldrb	r2, [r3, #10]
 8005a60:	4b93      	ldr	r3, [pc, #588]	@ (8005cb0 <dwin_data+0x75c>)
 8005a62:	701a      	strb	r2, [r3, #0]
				MV_alarm_min_value = tester[11];
 8005a64:	4b87      	ldr	r3, [pc, #540]	@ (8005c84 <dwin_data+0x730>)
 8005a66:	7ada      	ldrb	r2, [r3, #11]
 8005a68:	4b92      	ldr	r3, [pc, #584]	@ (8005cb4 <dwin_data+0x760>)
 8005a6a:	701a      	strb	r2, [r3, #0]
				RR_alarm_max_value = tester[12];
 8005a6c:	4b85      	ldr	r3, [pc, #532]	@ (8005c84 <dwin_data+0x730>)
 8005a6e:	7b1a      	ldrb	r2, [r3, #12]
 8005a70:	4b91      	ldr	r3, [pc, #580]	@ (8005cb8 <dwin_data+0x764>)
 8005a72:	701a      	strb	r2, [r3, #0]
				RR_alarm_min_value = tester[13];
 8005a74:	4b83      	ldr	r3, [pc, #524]	@ (8005c84 <dwin_data+0x730>)
 8005a76:	7b5a      	ldrb	r2, [r3, #13]
 8005a78:	4b90      	ldr	r3, [pc, #576]	@ (8005cbc <dwin_data+0x768>)
 8005a7a:	701a      	strb	r2, [r3, #0]
				peep_alarm_max_value = tester[14];
 8005a7c:	4b81      	ldr	r3, [pc, #516]	@ (8005c84 <dwin_data+0x730>)
 8005a7e:	7b9a      	ldrb	r2, [r3, #14]
 8005a80:	4b8f      	ldr	r3, [pc, #572]	@ (8005cc0 <dwin_data+0x76c>)
 8005a82:	701a      	strb	r2, [r3, #0]
				peep_alarm_min_value = tester[15];
 8005a84:	4b7f      	ldr	r3, [pc, #508]	@ (8005c84 <dwin_data+0x730>)
 8005a86:	7bda      	ldrb	r2, [r3, #15]
 8005a88:	4b8e      	ldr	r3, [pc, #568]	@ (8005cc4 <dwin_data+0x770>)
 8005a8a:	701a      	strb	r2, [r3, #0]
				O2_alarm_max_value = tester[16];
 8005a8c:	4b7d      	ldr	r3, [pc, #500]	@ (8005c84 <dwin_data+0x730>)
 8005a8e:	7c1a      	ldrb	r2, [r3, #16]
 8005a90:	4b8d      	ldr	r3, [pc, #564]	@ (8005cc8 <dwin_data+0x774>)
 8005a92:	701a      	strb	r2, [r3, #0]
				O2_alarm_min_value = tester[17];
 8005a94:	4b7b      	ldr	r3, [pc, #492]	@ (8005c84 <dwin_data+0x730>)
 8005a96:	7c5a      	ldrb	r2, [r3, #17]
 8005a98:	4b8c      	ldr	r3, [pc, #560]	@ (8005ccc <dwin_data+0x778>)
 8005a9a:	701a      	strb	r2, [r3, #0]
				PS_value = tester[18];
 8005a9c:	4b79      	ldr	r3, [pc, #484]	@ (8005c84 <dwin_data+0x730>)
 8005a9e:	7c9a      	ldrb	r2, [r3, #18]
 8005aa0:	4b8b      	ldr	r3, [pc, #556]	@ (8005cd0 <dwin_data+0x77c>)
 8005aa2:	701a      	strb	r2, [r3, #0]
				live_rr_value = tester[19];
 8005aa4:	4b77      	ldr	r3, [pc, #476]	@ (8005c84 <dwin_data+0x730>)
 8005aa6:	7cda      	ldrb	r2, [r3, #19]
 8005aa8:	4b8a      	ldr	r3, [pc, #552]	@ (8005cd4 <dwin_data+0x780>)
 8005aaa:	701a      	strb	r2, [r3, #0]
				mode_select_number = tester[20];
 8005aac:	4b75      	ldr	r3, [pc, #468]	@ (8005c84 <dwin_data+0x730>)
 8005aae:	7d1a      	ldrb	r2, [r3, #20]
 8005ab0:	4b89      	ldr	r3, [pc, #548]	@ (8005cd8 <dwin_data+0x784>)
 8005ab2:	701a      	strb	r2, [r3, #0]
				m_icon_add = tester[21];
 8005ab4:	4b73      	ldr	r3, [pc, #460]	@ (8005c84 <dwin_data+0x730>)
 8005ab6:	7d5a      	ldrb	r2, [r3, #21]
 8005ab8:	4b88      	ldr	r3, [pc, #544]	@ (8005cdc <dwin_data+0x788>)
 8005aba:	701a      	strb	r2, [r3, #0]
				O2_flag = tester[22];
 8005abc:	4b71      	ldr	r3, [pc, #452]	@ (8005c84 <dwin_data+0x730>)
 8005abe:	7d9b      	ldrb	r3, [r3, #22]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	bf14      	ite	ne
 8005ac4:	2301      	movne	r3, #1
 8005ac6:	2300      	moveq	r3, #0
 8005ac8:	b2da      	uxtb	r2, r3
 8005aca:	4b85      	ldr	r3, [pc, #532]	@ (8005ce0 <dwin_data+0x78c>)
 8005acc:	701a      	strb	r2, [r3, #0]
				Compliance_Adult_Flag = tester[23];
 8005ace:	4b6d      	ldr	r3, [pc, #436]	@ (8005c84 <dwin_data+0x730>)
 8005ad0:	7ddb      	ldrb	r3, [r3, #23]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	bf14      	ite	ne
 8005ad6:	2301      	movne	r3, #1
 8005ad8:	2300      	moveq	r3, #0
 8005ada:	b2da      	uxtb	r2, r3
 8005adc:	4b81      	ldr	r3, [pc, #516]	@ (8005ce4 <dwin_data+0x790>)
 8005ade:	701a      	strb	r2, [r3, #0]
				Compliance_Neonate_Flag = tester[24];
 8005ae0:	4b68      	ldr	r3, [pc, #416]	@ (8005c84 <dwin_data+0x730>)
 8005ae2:	7e1b      	ldrb	r3, [r3, #24]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	bf14      	ite	ne
 8005ae8:	2301      	movne	r3, #1
 8005aea:	2300      	moveq	r3, #0
 8005aec:	b2da      	uxtb	r2, r3
 8005aee:	4b7e      	ldr	r3, [pc, #504]	@ (8005ce8 <dwin_data+0x794>)
 8005af0:	701a      	strb	r2, [r3, #0]
				RR_temp_value = RR_value;
 8005af2:	4b66      	ldr	r3, [pc, #408]	@ (8005c8c <dwin_data+0x738>)
 8005af4:	781a      	ldrb	r2, [r3, #0]
 8005af6:	4b7d      	ldr	r3, [pc, #500]	@ (8005cec <dwin_data+0x798>)
 8005af8:	701a      	strb	r2, [r3, #0]
				PLR_temp_value = PLR_value;
 8005afa:	4b63      	ldr	r3, [pc, #396]	@ (8005c88 <dwin_data+0x734>)
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	461a      	mov	r2, r3
 8005b00:	4b7b      	ldr	r3, [pc, #492]	@ (8005cf0 <dwin_data+0x79c>)
 8005b02:	601a      	str	r2, [r3, #0]
				temp_insP_value = insP_value;
 8005b04:	4b62      	ldr	r3, [pc, #392]	@ (8005c90 <dwin_data+0x73c>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a7a      	ldr	r2, [pc, #488]	@ (8005cf4 <dwin_data+0x7a0>)
 8005b0a:	6013      	str	r3, [r2, #0]
				temp_exp_value = exp_value;
 8005b0c:	4b61      	ldr	r3, [pc, #388]	@ (8005c94 <dwin_data+0x740>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a79      	ldr	r2, [pc, #484]	@ (8005cf8 <dwin_data+0x7a4>)
 8005b12:	6013      	str	r3, [r2, #0]
				PU_temp_value = PU_value;
 8005b14:	4b60      	ldr	r3, [pc, #384]	@ (8005c98 <dwin_data+0x744>)
 8005b16:	781a      	ldrb	r2, [r3, #0]
 8005b18:	4b78      	ldr	r3, [pc, #480]	@ (8005cfc <dwin_data+0x7a8>)
 8005b1a:	701a      	strb	r2, [r3, #0]
				PEEP_temp_value = PEEP_value - 1;
 8005b1c:	4b61      	ldr	r3, [pc, #388]	@ (8005ca4 <dwin_data+0x750>)
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	3b01      	subs	r3, #1
 8005b22:	b2da      	uxtb	r2, r3
 8005b24:	4b76      	ldr	r3, [pc, #472]	@ (8005d00 <dwin_data+0x7ac>)
 8005b26:	701a      	strb	r2, [r3, #0]
				PS_temp_value = PS_value;
 8005b28:	4b69      	ldr	r3, [pc, #420]	@ (8005cd0 <dwin_data+0x77c>)
 8005b2a:	781a      	ldrb	r2, [r3, #0]
 8005b2c:	4b75      	ldr	r3, [pc, #468]	@ (8005d04 <dwin_data+0x7b0>)
 8005b2e:	701a      	strb	r2, [r3, #0]
				P_peak_alarm_max_value = P_peak_alarm_max_value;
 8005b30:	4b5d      	ldr	r3, [pc, #372]	@ (8005ca8 <dwin_data+0x754>)
 8005b32:	781a      	ldrb	r2, [r3, #0]
 8005b34:	4b5c      	ldr	r3, [pc, #368]	@ (8005ca8 <dwin_data+0x754>)
 8005b36:	701a      	strb	r2, [r3, #0]
				P_peak_alarm_min_value = P_peak_alarm_min_value;
 8005b38:	4b5c      	ldr	r3, [pc, #368]	@ (8005cac <dwin_data+0x758>)
 8005b3a:	781a      	ldrb	r2, [r3, #0]
 8005b3c:	4b5b      	ldr	r3, [pc, #364]	@ (8005cac <dwin_data+0x758>)
 8005b3e:	701a      	strb	r2, [r3, #0]
				MV_alarm_max_value = MV_alarm_max_value;
 8005b40:	4b5b      	ldr	r3, [pc, #364]	@ (8005cb0 <dwin_data+0x75c>)
 8005b42:	781a      	ldrb	r2, [r3, #0]
 8005b44:	4b5a      	ldr	r3, [pc, #360]	@ (8005cb0 <dwin_data+0x75c>)
 8005b46:	701a      	strb	r2, [r3, #0]
				MV_alarm_min_value = MV_alarm_min_value;
 8005b48:	4b5a      	ldr	r3, [pc, #360]	@ (8005cb4 <dwin_data+0x760>)
 8005b4a:	781a      	ldrb	r2, [r3, #0]
 8005b4c:	4b59      	ldr	r3, [pc, #356]	@ (8005cb4 <dwin_data+0x760>)
 8005b4e:	701a      	strb	r2, [r3, #0]
				RR_alarm_max_value = RR_alarm_max_value;
 8005b50:	4b59      	ldr	r3, [pc, #356]	@ (8005cb8 <dwin_data+0x764>)
 8005b52:	781a      	ldrb	r2, [r3, #0]
 8005b54:	4b58      	ldr	r3, [pc, #352]	@ (8005cb8 <dwin_data+0x764>)
 8005b56:	701a      	strb	r2, [r3, #0]
				RR_alarm_min_value = RR_alarm_min_value;
 8005b58:	4b58      	ldr	r3, [pc, #352]	@ (8005cbc <dwin_data+0x768>)
 8005b5a:	781a      	ldrb	r2, [r3, #0]
 8005b5c:	4b57      	ldr	r3, [pc, #348]	@ (8005cbc <dwin_data+0x768>)
 8005b5e:	701a      	strb	r2, [r3, #0]
				peep_alarm_max_value = peep_alarm_max_value;
 8005b60:	4b57      	ldr	r3, [pc, #348]	@ (8005cc0 <dwin_data+0x76c>)
 8005b62:	781a      	ldrb	r2, [r3, #0]
 8005b64:	4b56      	ldr	r3, [pc, #344]	@ (8005cc0 <dwin_data+0x76c>)
 8005b66:	701a      	strb	r2, [r3, #0]
				peep_alarm_min_value = peep_alarm_min_value;
 8005b68:	4b56      	ldr	r3, [pc, #344]	@ (8005cc4 <dwin_data+0x770>)
 8005b6a:	781a      	ldrb	r2, [r3, #0]
 8005b6c:	4b55      	ldr	r3, [pc, #340]	@ (8005cc4 <dwin_data+0x770>)
 8005b6e:	701a      	strb	r2, [r3, #0]
				O2_alarm_max_value = O2_alarm_max_value;
 8005b70:	4b55      	ldr	r3, [pc, #340]	@ (8005cc8 <dwin_data+0x774>)
 8005b72:	781a      	ldrb	r2, [r3, #0]
 8005b74:	4b54      	ldr	r3, [pc, #336]	@ (8005cc8 <dwin_data+0x774>)
 8005b76:	701a      	strb	r2, [r3, #0]
				O2_alarm_min_value = O2_alarm_min_value;
 8005b78:	4b54      	ldr	r3, [pc, #336]	@ (8005ccc <dwin_data+0x778>)
 8005b7a:	781a      	ldrb	r2, [r3, #0]
 8005b7c:	4b53      	ldr	r3, [pc, #332]	@ (8005ccc <dwin_data+0x778>)
 8005b7e:	701a      	strb	r2, [r3, #0]
				//		vt_value = tester1[0];
			}
			osDelay(5500);
 8005b80:	f241 507c 	movw	r0, #5500	@ 0x157c
 8005b84:	f00c fc19 	bl	80123ba <osDelay>

			intiger_val_send_Backup(0x02, PLR_value);
 8005b88:	4b3f      	ldr	r3, [pc, #252]	@ (8005c88 <dwin_data+0x734>)
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	2002      	movs	r0, #2
 8005b90:	f7fc fd56 	bl	8002640 <intiger_val_send_Backup>
			intiger_val_send_Backup(0x03, RR_value);
 8005b94:	4b3d      	ldr	r3, [pc, #244]	@ (8005c8c <dwin_data+0x738>)
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	4619      	mov	r1, r3
 8005b9a:	2003      	movs	r0, #3
 8005b9c:	f7fc fd50 	bl	8002640 <intiger_val_send_Backup>
			intiger_val_send_Backup(0x05, PU_value);
 8005ba0:	4b3d      	ldr	r3, [pc, #244]	@ (8005c98 <dwin_data+0x744>)
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	2005      	movs	r0, #5
 8005ba8:	f7fc fd4a 	bl	8002640 <intiger_val_send_Backup>
			intiger_val_send_Backup(0x06, TRG_value);
 8005bac:	4b3b      	ldr	r3, [pc, #236]	@ (8005c9c <dwin_data+0x748>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	2006      	movs	r0, #6
 8005bb6:	f7fc fd43 	bl	8002640 <intiger_val_send_Backup>
			PIP_VAL(0x07, PIP_value);
 8005bba:	4b39      	ldr	r3, [pc, #228]	@ (8005ca0 <dwin_data+0x74c>)
 8005bbc:	f993 3000 	ldrsb.w	r3, [r3]
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	2007      	movs	r0, #7
 8005bc6:	f7fc fe59 	bl	800287c <PIP_VAL>
			intiger_val_send_Backup(0x08, PEEP_value);
 8005bca:	4b36      	ldr	r3, [pc, #216]	@ (8005ca4 <dwin_data+0x750>)
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	4619      	mov	r1, r3
 8005bd0:	2008      	movs	r0, #8
 8005bd2:	f7fc fd35 	bl	8002640 <intiger_val_send_Backup>
			intiger_val_send_Backup(0x09, PS_value);
 8005bd6:	4b3e      	ldr	r3, [pc, #248]	@ (8005cd0 <dwin_data+0x77c>)
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	4619      	mov	r1, r3
 8005bdc:	2009      	movs	r0, #9
 8005bde:	f7fc fd2f 	bl	8002640 <intiger_val_send_Backup>
			intiger_val_send_Backup(0x14, P_peak_alarm_max_value);
 8005be2:	4b31      	ldr	r3, [pc, #196]	@ (8005ca8 <dwin_data+0x754>)
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	4619      	mov	r1, r3
 8005be8:	2014      	movs	r0, #20
 8005bea:	f7fc fd29 	bl	8002640 <intiger_val_send_Backup>
			intiger_val_send_Backup(0x15, P_peak_alarm_min_value);
 8005bee:	4b2f      	ldr	r3, [pc, #188]	@ (8005cac <dwin_data+0x758>)
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	2015      	movs	r0, #21
 8005bf6:	f7fc fd23 	bl	8002640 <intiger_val_send_Backup>
			intiger_val_send_Backup(0x16, MV_alarm_max_value);
 8005bfa:	4b2d      	ldr	r3, [pc, #180]	@ (8005cb0 <dwin_data+0x75c>)
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	4619      	mov	r1, r3
 8005c00:	2016      	movs	r0, #22
 8005c02:	f7fc fd1d 	bl	8002640 <intiger_val_send_Backup>
			intiger_val_send_Backup(0x17, MV_alarm_min_value);
 8005c06:	4b2b      	ldr	r3, [pc, #172]	@ (8005cb4 <dwin_data+0x760>)
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	2017      	movs	r0, #23
 8005c0e:	f7fc fd17 	bl	8002640 <intiger_val_send_Backup>
			intiger_val_send_Backup(0x18, RR_alarm_max_value);
 8005c12:	4b29      	ldr	r3, [pc, #164]	@ (8005cb8 <dwin_data+0x764>)
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	4619      	mov	r1, r3
 8005c18:	2018      	movs	r0, #24
 8005c1a:	f7fc fd11 	bl	8002640 <intiger_val_send_Backup>
			intiger_val_send_Backup(0x19, RR_alarm_min_value);
 8005c1e:	4b27      	ldr	r3, [pc, #156]	@ (8005cbc <dwin_data+0x768>)
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	4619      	mov	r1, r3
 8005c24:	2019      	movs	r0, #25
 8005c26:	f7fc fd0b 	bl	8002640 <intiger_val_send_Backup>
			intiger_val_send_Backup(0x1A, peep_alarm_max_value);
 8005c2a:	4b25      	ldr	r3, [pc, #148]	@ (8005cc0 <dwin_data+0x76c>)
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	4619      	mov	r1, r3
 8005c30:	201a      	movs	r0, #26
 8005c32:	f7fc fd05 	bl	8002640 <intiger_val_send_Backup>
			intiger_val_send_Backup(0x21, peep_alarm_min_value);
 8005c36:	4b23      	ldr	r3, [pc, #140]	@ (8005cc4 <dwin_data+0x770>)
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	2021      	movs	r0, #33	@ 0x21
 8005c3e:	f7fc fcff 	bl	8002640 <intiger_val_send_Backup>
			intiger_val_send_Backup(0x22, O2_alarm_max_value);
 8005c42:	4b21      	ldr	r3, [pc, #132]	@ (8005cc8 <dwin_data+0x774>)
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	4619      	mov	r1, r3
 8005c48:	2022      	movs	r0, #34	@ 0x22
 8005c4a:	f7fc fcf9 	bl	8002640 <intiger_val_send_Backup>
			intiger_val_send_Backup(0x23, O2_alarm_min_value);
 8005c4e:	4b1f      	ldr	r3, [pc, #124]	@ (8005ccc <dwin_data+0x778>)
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	4619      	mov	r1, r3
 8005c54:	2023      	movs	r0, #35	@ 0x23
 8005c56:	f7fc fcf3 	bl	8002640 <intiger_val_send_Backup>
			intiger_val_send_Backup(0x24, insP_value);
 8005c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8005c90 <dwin_data+0x73c>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	4619      	mov	r1, r3
 8005c62:	2024      	movs	r0, #36	@ 0x24
 8005c64:	f7fc fcec 	bl	8002640 <intiger_val_send_Backup>
			intiger_val_send_Backup(0x25, exp_value);
 8005c68:	4b0a      	ldr	r3, [pc, #40]	@ (8005c94 <dwin_data+0x740>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	4619      	mov	r1, r3
 8005c70:	2025      	movs	r0, #37	@ 0x25
 8005c72:	f7fc fce5 	bl	8002640 <intiger_val_send_Backup>
			intiger_val_send_Backup(0x27, live_rr_value);
 8005c76:	4b17      	ldr	r3, [pc, #92]	@ (8005cd4 <dwin_data+0x780>)
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	2027      	movs	r0, #39	@ 0x27
 8005c7e:	f7fc fcdf 	bl	8002640 <intiger_val_send_Backup>
 8005c82:	e041      	b.n	8005d08 <dwin_data+0x7b4>
 8005c84:	20001974 	.word	0x20001974
 8005c88:	20000036 	.word	0x20000036
 8005c8c:	20000037 	.word	0x20000037
 8005c90:	2000002c 	.word	0x2000002c
 8005c94:	20000030 	.word	0x20000030
 8005c98:	2000195d 	.word	0x2000195d
 8005c9c:	20001960 	.word	0x20001960
 8005ca0:	20000038 	.word	0x20000038
 8005ca4:	20001964 	.word	0x20001964
 8005ca8:	20000050 	.word	0x20000050
 8005cac:	200019e4 	.word	0x200019e4
 8005cb0:	20000051 	.word	0x20000051
 8005cb4:	200019e5 	.word	0x200019e5
 8005cb8:	20000052 	.word	0x20000052
 8005cbc:	2000004d 	.word	0x2000004d
 8005cc0:	20000053 	.word	0x20000053
 8005cc4:	2000004e 	.word	0x2000004e
 8005cc8:	20000054 	.word	0x20000054
 8005ccc:	2000004f 	.word	0x2000004f
 8005cd0:	20001965 	.word	0x20001965
 8005cd4:	20001966 	.word	0x20001966
 8005cd8:	200019ae 	.word	0x200019ae
 8005cdc:	200019e8 	.word	0x200019e8
 8005ce0:	200019d4 	.word	0x200019d4
 8005ce4:	20001b39 	.word	0x20001b39
 8005ce8:	20001b38 	.word	0x20001b38
 8005cec:	2000004c 	.word	0x2000004c
 8005cf0:	20000048 	.word	0x20000048
 8005cf4:	2000003c 	.word	0x2000003c
 8005cf8:	20000040 	.word	0x20000040
 8005cfc:	20001967 	.word	0x20001967
 8005d00:	20001968 	.word	0x20001968
 8005d04:	20001969 	.word	0x20001969
			intiger_val_vt_send_Backup(0x01, vt_value);
 8005d08:	4bb9      	ldr	r3, [pc, #740]	@ (8005ff0 <dwin_data+0xa9c>)
 8005d0a:	881b      	ldrh	r3, [r3, #0]
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	2001      	movs	r0, #1
 8005d10:	f7fc fcba 	bl	8002688 <intiger_val_vt_send_Backup>
			//		intiger_val_vt_send_Backup(0x01, vt_value_backup);
			mode_select_number = tester[20];
 8005d14:	4bb7      	ldr	r3, [pc, #732]	@ (8005ff4 <dwin_data+0xaa0>)
 8005d16:	7d1a      	ldrb	r2, [r3, #20]
 8005d18:	4bb7      	ldr	r3, [pc, #732]	@ (8005ff8 <dwin_data+0xaa4>)
 8005d1a:	701a      	strb	r2, [r3, #0]
			m_icon_add = tester[21];
 8005d1c:	4bb5      	ldr	r3, [pc, #724]	@ (8005ff4 <dwin_data+0xaa0>)
 8005d1e:	7d5a      	ldrb	r2, [r3, #21]
 8005d20:	4bb6      	ldr	r3, [pc, #728]	@ (8005ffc <dwin_data+0xaa8>)
 8005d22:	701a      	strb	r2, [r3, #0]
			O2_flag = tester[22];
 8005d24:	4bb3      	ldr	r3, [pc, #716]	@ (8005ff4 <dwin_data+0xaa0>)
 8005d26:	7d9b      	ldrb	r3, [r3, #22]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	bf14      	ite	ne
 8005d2c:	2301      	movne	r3, #1
 8005d2e:	2300      	moveq	r3, #0
 8005d30:	b2da      	uxtb	r2, r3
 8005d32:	4bb3      	ldr	r3, [pc, #716]	@ (8006000 <dwin_data+0xaac>)
 8005d34:	701a      	strb	r2, [r3, #0]
			Compliance_Adult_Flag = tester[23];
 8005d36:	4baf      	ldr	r3, [pc, #700]	@ (8005ff4 <dwin_data+0xaa0>)
 8005d38:	7ddb      	ldrb	r3, [r3, #23]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	bf14      	ite	ne
 8005d3e:	2301      	movne	r3, #1
 8005d40:	2300      	moveq	r3, #0
 8005d42:	b2da      	uxtb	r2, r3
 8005d44:	4baf      	ldr	r3, [pc, #700]	@ (8006004 <dwin_data+0xab0>)
 8005d46:	701a      	strb	r2, [r3, #0]
			Compliance_Neonate_Flag = tester[24];
 8005d48:	4baa      	ldr	r3, [pc, #680]	@ (8005ff4 <dwin_data+0xaa0>)
 8005d4a:	7e1b      	ldrb	r3, [r3, #24]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	bf14      	ite	ne
 8005d50:	2301      	movne	r3, #1
 8005d52:	2300      	moveq	r3, #0
 8005d54:	b2da      	uxtb	r2, r3
 8005d56:	4bac      	ldr	r3, [pc, #688]	@ (8006008 <dwin_data+0xab4>)
 8005d58:	701a      	strb	r2, [r3, #0]
			//		osThreadResume(NotificationHandle);
			//		osThreadResume(BackupHandle);


			Trigger_Display=0; // This is alway required
 8005d5a:	4bac      	ldr	r3, [pc, #688]	@ (800600c <dwin_data+0xab8>)
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	701a      	strb	r2, [r3, #0]
		}



		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8005d60:	2201      	movs	r2, #1
 8005d62:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005d66:	48aa      	ldr	r0, [pc, #680]	@ (8006010 <dwin_data+0xabc>)
 8005d68:	f007 ff66 	bl	800dc38 <HAL_GPIO_WritePin>



		if(countery++ >= 50){
 8005d6c:	4ba9      	ldr	r3, [pc, #676]	@ (8006014 <dwin_data+0xac0>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	1c5a      	adds	r2, r3, #1
 8005d72:	49a8      	ldr	r1, [pc, #672]	@ (8006014 <dwin_data+0xac0>)
 8005d74:	600a      	str	r2, [r1, #0]
 8005d76:	2b31      	cmp	r3, #49	@ 0x31
 8005d78:	f240 80e9 	bls.w	8005f4e <dwin_data+0x9fa>
			countery=0;
 8005d7c:	4ba5      	ldr	r3, [pc, #660]	@ (8006014 <dwin_data+0xac0>)
 8005d7e:	2200      	movs	r2, #0
 8005d80:	601a      	str	r2, [r3, #0]
			//			osThreadSuspend(NotificationHandle);
			//			osThreadSuspend(BackupHandle);
			uint8_t bit0=0,bit1=0;
 8005d82:	2300      	movs	r3, #0
 8005d84:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8005d88:	2300      	movs	r3, #0
 8005d8a:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e

			bit0 = (vt_value & 0xff);
 8005d8e:	4b98      	ldr	r3, [pc, #608]	@ (8005ff0 <dwin_data+0xa9c>)
 8005d90:	881b      	ldrh	r3, [r3, #0]
 8005d92:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			bit1 = ((vt_value &0xff00)>>8);
 8005d96:	4b96      	ldr	r3, [pc, #600]	@ (8005ff0 <dwin_data+0xa9c>)
 8005d98:	881b      	ldrh	r3, [r3, #0]
 8005d9a:	0a1b      	lsrs	r3, r3, #8
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
			uint8_t arr[50] = {PLR_value, RR_value, insP_value, exp_value, PU_value, TRG_value, PIP_value, PEEP_value, P_peak_alarm_max_value, P_peak_alarm_min_value, MV_alarm_max_value, MV_alarm_min_value, RR_alarm_max_value, RR_alarm_min_value, peep_alarm_max_value, peep_alarm_min_value, O2_alarm_max_value, O2_alarm_min_value, PS_value, RR_temp_value, mode_select_number, m_icon_add, O2_flag, Compliance_Adult_Flag, Compliance_Neonate_Flag,bit1,bit0};
 8005da2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005da6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005daa:	4618      	mov	r0, r3
 8005dac:	2332      	movs	r3, #50	@ 0x32
 8005dae:	461a      	mov	r2, r3
 8005db0:	2100      	movs	r1, #0
 8005db2:	f00f fbdd 	bl	8015570 <memset>
 8005db6:	4b98      	ldr	r3, [pc, #608]	@ (8006018 <dwin_data+0xac4>)
 8005db8:	781a      	ldrb	r2, [r3, #0]
 8005dba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005dbe:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005dc2:	701a      	strb	r2, [r3, #0]
 8005dc4:	4b95      	ldr	r3, [pc, #596]	@ (800601c <dwin_data+0xac8>)
 8005dc6:	781a      	ldrb	r2, [r3, #0]
 8005dc8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005dcc:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005dd0:	705a      	strb	r2, [r3, #1]
 8005dd2:	4b93      	ldr	r3, [pc, #588]	@ (8006020 <dwin_data+0xacc>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	b2da      	uxtb	r2, r3
 8005dd8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005ddc:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005de0:	709a      	strb	r2, [r3, #2]
 8005de2:	4b90      	ldr	r3, [pc, #576]	@ (8006024 <dwin_data+0xad0>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	b2da      	uxtb	r2, r3
 8005de8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005dec:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005df0:	70da      	strb	r2, [r3, #3]
 8005df2:	4b8d      	ldr	r3, [pc, #564]	@ (8006028 <dwin_data+0xad4>)
 8005df4:	781a      	ldrb	r2, [r3, #0]
 8005df6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005dfa:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005dfe:	711a      	strb	r2, [r3, #4]
 8005e00:	4b8a      	ldr	r3, [pc, #552]	@ (800602c <dwin_data+0xad8>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	b2da      	uxtb	r2, r3
 8005e06:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005e0a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005e0e:	715a      	strb	r2, [r3, #5]
 8005e10:	4b87      	ldr	r3, [pc, #540]	@ (8006030 <dwin_data+0xadc>)
 8005e12:	f993 3000 	ldrsb.w	r3, [r3]
 8005e16:	b2da      	uxtb	r2, r3
 8005e18:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005e1c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005e20:	719a      	strb	r2, [r3, #6]
 8005e22:	4b84      	ldr	r3, [pc, #528]	@ (8006034 <dwin_data+0xae0>)
 8005e24:	781a      	ldrb	r2, [r3, #0]
 8005e26:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005e2a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005e2e:	71da      	strb	r2, [r3, #7]
 8005e30:	4b81      	ldr	r3, [pc, #516]	@ (8006038 <dwin_data+0xae4>)
 8005e32:	781a      	ldrb	r2, [r3, #0]
 8005e34:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005e38:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005e3c:	721a      	strb	r2, [r3, #8]
 8005e3e:	4b7f      	ldr	r3, [pc, #508]	@ (800603c <dwin_data+0xae8>)
 8005e40:	781a      	ldrb	r2, [r3, #0]
 8005e42:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005e46:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005e4a:	725a      	strb	r2, [r3, #9]
 8005e4c:	4b7c      	ldr	r3, [pc, #496]	@ (8006040 <dwin_data+0xaec>)
 8005e4e:	781a      	ldrb	r2, [r3, #0]
 8005e50:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005e54:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005e58:	729a      	strb	r2, [r3, #10]
 8005e5a:	4b7a      	ldr	r3, [pc, #488]	@ (8006044 <dwin_data+0xaf0>)
 8005e5c:	781a      	ldrb	r2, [r3, #0]
 8005e5e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005e62:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005e66:	72da      	strb	r2, [r3, #11]
 8005e68:	4b77      	ldr	r3, [pc, #476]	@ (8006048 <dwin_data+0xaf4>)
 8005e6a:	781a      	ldrb	r2, [r3, #0]
 8005e6c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005e70:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005e74:	731a      	strb	r2, [r3, #12]
 8005e76:	4b75      	ldr	r3, [pc, #468]	@ (800604c <dwin_data+0xaf8>)
 8005e78:	781a      	ldrb	r2, [r3, #0]
 8005e7a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005e7e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005e82:	735a      	strb	r2, [r3, #13]
 8005e84:	4b72      	ldr	r3, [pc, #456]	@ (8006050 <dwin_data+0xafc>)
 8005e86:	781a      	ldrb	r2, [r3, #0]
 8005e88:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005e8c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005e90:	739a      	strb	r2, [r3, #14]
 8005e92:	4b70      	ldr	r3, [pc, #448]	@ (8006054 <dwin_data+0xb00>)
 8005e94:	781a      	ldrb	r2, [r3, #0]
 8005e96:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005e9a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005e9e:	73da      	strb	r2, [r3, #15]
 8005ea0:	4b6d      	ldr	r3, [pc, #436]	@ (8006058 <dwin_data+0xb04>)
 8005ea2:	781a      	ldrb	r2, [r3, #0]
 8005ea4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005ea8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005eac:	741a      	strb	r2, [r3, #16]
 8005eae:	4b6b      	ldr	r3, [pc, #428]	@ (800605c <dwin_data+0xb08>)
 8005eb0:	781a      	ldrb	r2, [r3, #0]
 8005eb2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005eb6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005eba:	745a      	strb	r2, [r3, #17]
 8005ebc:	4b68      	ldr	r3, [pc, #416]	@ (8006060 <dwin_data+0xb0c>)
 8005ebe:	781a      	ldrb	r2, [r3, #0]
 8005ec0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005ec4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005ec8:	749a      	strb	r2, [r3, #18]
 8005eca:	4b66      	ldr	r3, [pc, #408]	@ (8006064 <dwin_data+0xb10>)
 8005ecc:	781a      	ldrb	r2, [r3, #0]
 8005ece:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005ed2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005ed6:	74da      	strb	r2, [r3, #19]
 8005ed8:	4b47      	ldr	r3, [pc, #284]	@ (8005ff8 <dwin_data+0xaa4>)
 8005eda:	781a      	ldrb	r2, [r3, #0]
 8005edc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005ee0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005ee4:	751a      	strb	r2, [r3, #20]
 8005ee6:	4b45      	ldr	r3, [pc, #276]	@ (8005ffc <dwin_data+0xaa8>)
 8005ee8:	781a      	ldrb	r2, [r3, #0]
 8005eea:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005eee:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005ef2:	755a      	strb	r2, [r3, #21]
 8005ef4:	4b42      	ldr	r3, [pc, #264]	@ (8006000 <dwin_data+0xaac>)
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	461a      	mov	r2, r3
 8005efa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005efe:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005f02:	759a      	strb	r2, [r3, #22]
 8005f04:	4b3f      	ldr	r3, [pc, #252]	@ (8006004 <dwin_data+0xab0>)
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	461a      	mov	r2, r3
 8005f0a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005f0e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005f12:	75da      	strb	r2, [r3, #23]
 8005f14:	4b3c      	ldr	r3, [pc, #240]	@ (8006008 <dwin_data+0xab4>)
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	461a      	mov	r2, r3
 8005f1a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005f1e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005f22:	761a      	strb	r2, [r3, #24]
 8005f24:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005f28:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005f2c:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 8005f30:	765a      	strb	r2, [r3, #25]
 8005f32:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005f36:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005f3a:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8005f3e:	769a      	strb	r2, [r3, #26]

			W25Q_Write_Page(0, 0, sizeof(arr), arr);
 8005f40:	f107 0308 	add.w	r3, r7, #8
 8005f44:	2232      	movs	r2, #50	@ 0x32
 8005f46:	2100      	movs	r1, #0
 8005f48:	2000      	movs	r0, #0
 8005f4a:	f7fc fa51 	bl	80023f0 <W25Q_Write_Page>

		}
		//		osDelay(300);
		//		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
		//		osDelay(300);
		if(Compliance_Neonate_Flag == 1){
 8005f4e:	4b2e      	ldr	r3, [pc, #184]	@ (8006008 <dwin_data+0xab4>)
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d002      	beq.n	8005f5c <dwin_data+0xa08>
			Breath_calclution_Neo();
 8005f56:	f7fd faf1 	bl	800353c <Breath_calclution_Neo>
 8005f5a:	e001      	b.n	8005f60 <dwin_data+0xa0c>
		}
		else{
			Breath_calclution();
 8005f5c:	f7fd fa50 	bl	8003400 <Breath_calclution>
		}
		user_flowe = user_flowe_cal();
 8005f60:	f7fd fe32 	bl	8003bc8 <user_flowe_cal>
 8005f64:	ec53 2b10 	vmov	r2, r3, d0
 8005f68:	4610      	mov	r0, r2
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	f7fa fdec 	bl	8000b48 <__aeabi_d2iz>
 8005f70:	4603      	mov	r3, r0
 8005f72:	4a3d      	ldr	r2, [pc, #244]	@ (8006068 <dwin_data+0xb14>)
 8005f74:	6013      	str	r3, [r2, #0]
		t_flow = target_flow_cal();
 8005f76:	f7fd fde3 	bl	8003b40 <target_flow_cal>
 8005f7a:	ec53 2b10 	vmov	r2, r3, d0
 8005f7e:	4610      	mov	r0, r2
 8005f80:	4619      	mov	r1, r3
 8005f82:	f7fa fe29 	bl	8000bd8 <__aeabi_d2f>
 8005f86:	4603      	mov	r3, r0
 8005f88:	4a38      	ldr	r2, [pc, #224]	@ (800606c <dwin_data+0xb18>)
 8005f8a:	6013      	str	r3, [r2, #0]
		if(SIMV_FLAG == 1){
 8005f8c:	4b38      	ldr	r3, [pc, #224]	@ (8006070 <dwin_data+0xb1c>)
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00b      	beq.n	8005fae <dwin_data+0xa5a>
			if(Mandatory_FLAG == 0){
 8005f96:	4b37      	ldr	r3, [pc, #220]	@ (8006074 <dwin_data+0xb20>)
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	f083 0301 	eor.w	r3, r3, #1
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d004      	beq.n	8005fae <dwin_data+0xa5a>
				Spontaneous_FLAG = 1;
 8005fa4:	4b34      	ldr	r3, [pc, #208]	@ (8006078 <dwin_data+0xb24>)
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	701a      	strb	r2, [r3, #0]
				SIMV_MODE();
 8005faa:	f7fe fd69 	bl	8004a80 <SIMV_MODE>
		//		}
		//		else {
		//			user_flowe = user_flowe_cal1();
		//		}

		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == GPIO_PIN_RESET){
 8005fae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005fb2:	4832      	ldr	r0, [pc, #200]	@ (800607c <dwin_data+0xb28>)
 8005fb4:	f007 fe28 	bl	800dc08 <HAL_GPIO_ReadPin>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d109      	bne.n	8005fd2 <dwin_data+0xa7e>
			Backup_flag = 1;
 8005fbe:	4b30      	ldr	r3, [pc, #192]	@ (8006080 <dwin_data+0xb2c>)
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	701a      	strb	r2, [r3, #0]
			Backup_flag1 = 1;
 8005fc4:	4b2f      	ldr	r3, [pc, #188]	@ (8006084 <dwin_data+0xb30>)
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	701a      	strb	r2, [r3, #0]
			Display_Switch_Flag = 1;
 8005fca:	4b2f      	ldr	r3, [pc, #188]	@ (8006088 <dwin_data+0xb34>)
 8005fcc:	2201      	movs	r2, #1
 8005fce:	701a      	strb	r2, [r3, #0]
 8005fd0:	e07c      	b.n	80060cc <dwin_data+0xb78>
		}
		else if((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == GPIO_PIN_SET)){
 8005fd2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005fd6:	4829      	ldr	r0, [pc, #164]	@ (800607c <dwin_data+0xb28>)
 8005fd8:	f007 fe16 	bl	800dc08 <HAL_GPIO_ReadPin>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d154      	bne.n	800608c <dwin_data+0xb38>
			Backup_flag = 0;
 8005fe2:	4b27      	ldr	r3, [pc, #156]	@ (8006080 <dwin_data+0xb2c>)
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	701a      	strb	r2, [r3, #0]
			Display_Switch_Flag = 0;
 8005fe8:	4b27      	ldr	r3, [pc, #156]	@ (8006088 <dwin_data+0xb34>)
 8005fea:	2200      	movs	r2, #0
 8005fec:	701a      	strb	r2, [r3, #0]
 8005fee:	e06d      	b.n	80060cc <dwin_data+0xb78>
 8005ff0:	20000034 	.word	0x20000034
 8005ff4:	20001974 	.word	0x20001974
 8005ff8:	200019ae 	.word	0x200019ae
 8005ffc:	200019e8 	.word	0x200019e8
 8006000:	200019d4 	.word	0x200019d4
 8006004:	20001b39 	.word	0x20001b39
 8006008:	20001b38 	.word	0x20001b38
 800600c:	200019a7 	.word	0x200019a7
 8006010:	40021000 	.word	0x40021000
 8006014:	20001970 	.word	0x20001970
 8006018:	20000036 	.word	0x20000036
 800601c:	20000037 	.word	0x20000037
 8006020:	2000002c 	.word	0x2000002c
 8006024:	20000030 	.word	0x20000030
 8006028:	2000195d 	.word	0x2000195d
 800602c:	20001960 	.word	0x20001960
 8006030:	20000038 	.word	0x20000038
 8006034:	20001964 	.word	0x20001964
 8006038:	20000050 	.word	0x20000050
 800603c:	200019e4 	.word	0x200019e4
 8006040:	20000051 	.word	0x20000051
 8006044:	200019e5 	.word	0x200019e5
 8006048:	20000052 	.word	0x20000052
 800604c:	2000004d 	.word	0x2000004d
 8006050:	20000053 	.word	0x20000053
 8006054:	2000004e 	.word	0x2000004e
 8006058:	20000054 	.word	0x20000054
 800605c:	2000004f 	.word	0x2000004f
 8006060:	20001965 	.word	0x20001965
 8006064:	2000004c 	.word	0x2000004c
 8006068:	20001420 	.word	0x20001420
 800606c:	200013b8 	.word	0x200013b8
 8006070:	200019a8 	.word	0x200019a8
 8006074:	200019b0 	.word	0x200019b0
 8006078:	200019b1 	.word	0x200019b1
 800607c:	40020800 	.word	0x40020800
 8006080:	20001b2d 	.word	0x20001b2d
 8006084:	20001b2e 	.word	0x20001b2e
 8006088:	20001b30 	.word	0x20001b30
			//			Backup_flag1 = 1;
		}

		else if((HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11) == GPIO_PIN_RESET)){
 800608c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006090:	48b9      	ldr	r0, [pc, #740]	@ (8006378 <dwin_data+0xe24>)
 8006092:	f007 fdb9 	bl	800dc08 <HAL_GPIO_ReadPin>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d109      	bne.n	80060b0 <dwin_data+0xb5c>
			Backup_flag = 1;
 800609c:	4bb7      	ldr	r3, [pc, #732]	@ (800637c <dwin_data+0xe28>)
 800609e:	2201      	movs	r2, #1
 80060a0:	701a      	strb	r2, [r3, #0]
			Backup_flag1 = 1;
 80060a2:	4bb7      	ldr	r3, [pc, #732]	@ (8006380 <dwin_data+0xe2c>)
 80060a4:	2201      	movs	r2, #1
 80060a6:	701a      	strb	r2, [r3, #0]
			AC_Detection_Flag = 1;
 80060a8:	4bb6      	ldr	r3, [pc, #728]	@ (8006384 <dwin_data+0xe30>)
 80060aa:	2201      	movs	r2, #1
 80060ac:	701a      	strb	r2, [r3, #0]
 80060ae:	e00d      	b.n	80060cc <dwin_data+0xb78>
		}
		else if((HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11) == GPIO_PIN_SET)){
 80060b0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80060b4:	48b0      	ldr	r0, [pc, #704]	@ (8006378 <dwin_data+0xe24>)
 80060b6:	f007 fda7 	bl	800dc08 <HAL_GPIO_ReadPin>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d105      	bne.n	80060cc <dwin_data+0xb78>
			Backup_flag = 0;
 80060c0:	4bae      	ldr	r3, [pc, #696]	@ (800637c <dwin_data+0xe28>)
 80060c2:	2200      	movs	r2, #0
 80060c4:	701a      	strb	r2, [r3, #0]
			AC_Detection_Flag = 0;
 80060c6:	4baf      	ldr	r3, [pc, #700]	@ (8006384 <dwin_data+0xe30>)
 80060c8:	2200      	movs	r2, #0
 80060ca:	701a      	strb	r2, [r3, #0]
		}

		if ((HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11) == GPIO_PIN_RESET)){
 80060cc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80060d0:	48a9      	ldr	r0, [pc, #676]	@ (8006378 <dwin_data+0xe24>)
 80060d2:	f007 fd99 	bl	800dc08 <HAL_GPIO_ReadPin>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d103      	bne.n	80060e4 <dwin_data+0xb90>

			AC_Plug(0x78);
 80060dc:	2078      	movs	r0, #120	@ 0x78
 80060de:	f7fd fc6d 	bl	80039bc <AC_Plug>
 80060e2:	e00a      	b.n	80060fa <dwin_data+0xba6>
		}
		else if((HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11) == GPIO_PIN_SET)){
 80060e4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80060e8:	48a3      	ldr	r0, [pc, #652]	@ (8006378 <dwin_data+0xe24>)
 80060ea:	f007 fd8d 	bl	800dc08 <HAL_GPIO_ReadPin>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d102      	bne.n	80060fa <dwin_data+0xba6>
			AC_Plug(0x77);
 80060f4:	2077      	movs	r0, #119	@ 0x77
 80060f6:	f7fd fc61 	bl	80039bc <AC_Plug>
		//			user_flowe = user_flowe_cal();
		//		}
		//		user2_flow = user_flowe;
		//		user1_flow = (int)(user2_flow * 10) / 10.0;
		//take the button status for display data//
		HAL_UART_Receive_IT(&huart1, DISPLAY_INPUT1, 13);
 80060fa:	220d      	movs	r2, #13
 80060fc:	49a2      	ldr	r1, [pc, #648]	@ (8006388 <dwin_data+0xe34>)
 80060fe:	48a3      	ldr	r0, [pc, #652]	@ (800638c <dwin_data+0xe38>)
 8006100:	f00a fe93 	bl	8010e2a <HAL_UART_Receive_IT>
		osDelay(100);
 8006104:	2064      	movs	r0, #100	@ 0x64
 8006106:	f00c f958 	bl	80123ba <osDelay>
		HAL_UART_AbortReceive_IT(&huart1);
 800610a:	48a0      	ldr	r0, [pc, #640]	@ (800638c <dwin_data+0xe38>)
 800610c:	f00a fed8 	bl	8010ec0 <HAL_UART_AbortReceive_IT>
		if(DISPLAY_INPUT1[2]==0x06){
 8006110:	4b9d      	ldr	r3, [pc, #628]	@ (8006388 <dwin_data+0xe34>)
 8006112:	789b      	ldrb	r3, [r3, #2]
 8006114:	2b06      	cmp	r3, #6
 8006116:	d13a      	bne.n	800618e <dwin_data+0xc3a>
			for(int a = 0; a<=9; a++){
 8006118:	2300      	movs	r3, #0
 800611a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800611e:	e01b      	b.n	8006158 <dwin_data+0xc04>
				DISPLAY_INPUT[a]=DISPLAY_INPUT1[a];
 8006120:	4a99      	ldr	r2, [pc, #612]	@ (8006388 <dwin_data+0xe34>)
 8006122:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8006126:	4413      	add	r3, r2
 8006128:	7819      	ldrb	r1, [r3, #0]
 800612a:	4a99      	ldr	r2, [pc, #612]	@ (8006390 <dwin_data+0xe3c>)
 800612c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8006130:	4413      	add	r3, r2
 8006132:	460a      	mov	r2, r1
 8006134:	701a      	strb	r2, [r3, #0]
				received_length++;
 8006136:	4b97      	ldr	r3, [pc, #604]	@ (8006394 <dwin_data+0xe40>)
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	3301      	adds	r3, #1
 800613c:	b2da      	uxtb	r2, r3
 800613e:	4b95      	ldr	r3, [pc, #596]	@ (8006394 <dwin_data+0xe40>)
 8006140:	701a      	strb	r2, [r3, #0]
				DISPLAY_INPUT1[a]=0x00;
 8006142:	4a91      	ldr	r2, [pc, #580]	@ (8006388 <dwin_data+0xe34>)
 8006144:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8006148:	4413      	add	r3, r2
 800614a:	2200      	movs	r2, #0
 800614c:	701a      	strb	r2, [r3, #0]
			for(int a = 0; a<=9; a++){
 800614e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8006152:	3301      	adds	r3, #1
 8006154:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8006158:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800615c:	2b09      	cmp	r3, #9
 800615e:	dddf      	ble.n	8006120 <dwin_data+0xbcc>
			}
			if(DISPLAY_INPUT1[2]==0x0A){
 8006160:	4b89      	ldr	r3, [pc, #548]	@ (8006388 <dwin_data+0xe34>)
 8006162:	789b      	ldrb	r3, [r3, #2]
 8006164:	2b0a      	cmp	r3, #10
 8006166:	d112      	bne.n	800618e <dwin_data+0xc3a>
				//								DISPLAY_INPUT1[ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] = 0x00;
				for(int i = 0; i<13; i++){
 8006168:	2300      	movs	r3, #0
 800616a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800616e:	e00a      	b.n	8006186 <dwin_data+0xc32>
					DISPLAY_INPUT1[i] = 0x00;
 8006170:	4a85      	ldr	r2, [pc, #532]	@ (8006388 <dwin_data+0xe34>)
 8006172:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8006176:	4413      	add	r3, r2
 8006178:	2200      	movs	r2, #0
 800617a:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i<13; i++){
 800617c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8006180:	3301      	adds	r3, #1
 8006182:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8006186:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800618a:	2b0c      	cmp	r3, #12
 800618c:	ddf0      	ble.n	8006170 <dwin_data+0xc1c>
				}
			}
		}

		VT_KEYPAD();
 800618e:	f7fe fe77 	bl	8004e80 <VT_KEYPAD>
		if (DISPLAY_INPUT[5] == 0x9D) {
 8006192:	4b7f      	ldr	r3, [pc, #508]	@ (8006390 <dwin_data+0xe3c>)
 8006194:	795b      	ldrb	r3, [r3, #5]
 8006196:	2b9d      	cmp	r3, #157	@ 0x9d
 8006198:	d179      	bne.n	800628e <dwin_data+0xd3a>
			if (DISPLAY_INPUT[8] == 0x01) {
 800619a:	4b7d      	ldr	r3, [pc, #500]	@ (8006390 <dwin_data+0xe3c>)
 800619c:	7a1b      	ldrb	r3, [r3, #8]
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d136      	bne.n	8006210 <dwin_data+0xcbc>
				vt_flag = 0;
 80061a2:	4b7d      	ldr	r3, [pc, #500]	@ (8006398 <dwin_data+0xe44>)
 80061a4:	2200      	movs	r2, #0
 80061a6:	701a      	strb	r2, [r3, #0]
				plt_flag = 0;
 80061a8:	4b7c      	ldr	r3, [pc, #496]	@ (800639c <dwin_data+0xe48>)
 80061aa:	2200      	movs	r2, #0
 80061ac:	701a      	strb	r2, [r3, #0]
				rr_flag = 0;
 80061ae:	4b7c      	ldr	r3, [pc, #496]	@ (80063a0 <dwin_data+0xe4c>)
 80061b0:	2200      	movs	r2, #0
 80061b2:	701a      	strb	r2, [r3, #0]
				i_flag = 1;
 80061b4:	4b7b      	ldr	r3, [pc, #492]	@ (80063a4 <dwin_data+0xe50>)
 80061b6:	2201      	movs	r2, #1
 80061b8:	701a      	strb	r2, [r3, #0]
				e_flag = 0;
 80061ba:	4b7b      	ldr	r3, [pc, #492]	@ (80063a8 <dwin_data+0xe54>)
 80061bc:	2200      	movs	r2, #0
 80061be:	701a      	strb	r2, [r3, #0]
				pu_flag = 0;
 80061c0:	4b7a      	ldr	r3, [pc, #488]	@ (80063ac <dwin_data+0xe58>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	701a      	strb	r2, [r3, #0]
				trg_flag = 0;
 80061c6:	4b7a      	ldr	r3, [pc, #488]	@ (80063b0 <dwin_data+0xe5c>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	701a      	strb	r2, [r3, #0]
				pip_flag = 0;
 80061cc:	4b79      	ldr	r3, [pc, #484]	@ (80063b4 <dwin_data+0xe60>)
 80061ce:	2200      	movs	r2, #0
 80061d0:	701a      	strb	r2, [r3, #0]
				peep_flag = 0;
 80061d2:	4b79      	ldr	r3, [pc, #484]	@ (80063b8 <dwin_data+0xe64>)
 80061d4:	2200      	movs	r2, #0
 80061d6:	701a      	strb	r2, [r3, #0]
				PS_flag = 0;
 80061d8:	4b78      	ldr	r3, [pc, #480]	@ (80063bc <dwin_data+0xe68>)
 80061da:	2200      	movs	r2, #0
 80061dc:	701a      	strb	r2, [r3, #0]
				display_data(0x10, 0x04, 0x00);
 80061de:	2200      	movs	r2, #0
 80061e0:	2104      	movs	r1, #4
 80061e2:	2010      	movs	r0, #16
 80061e4:	f7fb fe02 	bl	8001dec <display_data>
				for (int a = 0; a < 9; a++)
 80061e8:	2300      	movs	r3, #0
 80061ea:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80061ee:	e00a      	b.n	8006206 <dwin_data+0xcb2>
					DISPLAY_INPUT[a] = 0x00;
 80061f0:	4a67      	ldr	r2, [pc, #412]	@ (8006390 <dwin_data+0xe3c>)
 80061f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80061f6:	4413      	add	r3, r2
 80061f8:	2200      	movs	r2, #0
 80061fa:	701a      	strb	r2, [r3, #0]
				for (int a = 0; a < 9; a++)
 80061fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006200:	3301      	adds	r3, #1
 8006202:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8006206:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800620a:	2b08      	cmp	r3, #8
 800620c:	ddf0      	ble.n	80061f0 <dwin_data+0xc9c>
 800620e:	e039      	b.n	8006284 <dwin_data+0xd30>
			} else if (DISPLAY_INPUT[8] == 0x02) {
 8006210:	4b5f      	ldr	r3, [pc, #380]	@ (8006390 <dwin_data+0xe3c>)
 8006212:	7a1b      	ldrb	r3, [r3, #8]
 8006214:	2b02      	cmp	r3, #2
 8006216:	d135      	bne.n	8006284 <dwin_data+0xd30>
				vt_flag = 0;
 8006218:	4b5f      	ldr	r3, [pc, #380]	@ (8006398 <dwin_data+0xe44>)
 800621a:	2200      	movs	r2, #0
 800621c:	701a      	strb	r2, [r3, #0]
				plt_flag = 0;
 800621e:	4b5f      	ldr	r3, [pc, #380]	@ (800639c <dwin_data+0xe48>)
 8006220:	2200      	movs	r2, #0
 8006222:	701a      	strb	r2, [r3, #0]
				rr_flag = 0;
 8006224:	4b5e      	ldr	r3, [pc, #376]	@ (80063a0 <dwin_data+0xe4c>)
 8006226:	2200      	movs	r2, #0
 8006228:	701a      	strb	r2, [r3, #0]
				i_flag = 0;
 800622a:	4b5e      	ldr	r3, [pc, #376]	@ (80063a4 <dwin_data+0xe50>)
 800622c:	2200      	movs	r2, #0
 800622e:	701a      	strb	r2, [r3, #0]
				e_flag = 1;
 8006230:	4b5d      	ldr	r3, [pc, #372]	@ (80063a8 <dwin_data+0xe54>)
 8006232:	2201      	movs	r2, #1
 8006234:	701a      	strb	r2, [r3, #0]
				pu_flag = 0;
 8006236:	4b5d      	ldr	r3, [pc, #372]	@ (80063ac <dwin_data+0xe58>)
 8006238:	2200      	movs	r2, #0
 800623a:	701a      	strb	r2, [r3, #0]
				trg_flag = 0;
 800623c:	4b5c      	ldr	r3, [pc, #368]	@ (80063b0 <dwin_data+0xe5c>)
 800623e:	2200      	movs	r2, #0
 8006240:	701a      	strb	r2, [r3, #0]
				pip_flag = 0;
 8006242:	4b5c      	ldr	r3, [pc, #368]	@ (80063b4 <dwin_data+0xe60>)
 8006244:	2200      	movs	r2, #0
 8006246:	701a      	strb	r2, [r3, #0]
				peep_flag = 0;
 8006248:	4b5b      	ldr	r3, [pc, #364]	@ (80063b8 <dwin_data+0xe64>)
 800624a:	2200      	movs	r2, #0
 800624c:	701a      	strb	r2, [r3, #0]
				PS_flag = 0;
 800624e:	4b5b      	ldr	r3, [pc, #364]	@ (80063bc <dwin_data+0xe68>)
 8006250:	2200      	movs	r2, #0
 8006252:	701a      	strb	r2, [r3, #0]
				display_data(0x10, 0x04, 0x00);
 8006254:	2200      	movs	r2, #0
 8006256:	2104      	movs	r1, #4
 8006258:	2010      	movs	r0, #16
 800625a:	f7fb fdc7 	bl	8001dec <display_data>
				for (int a = 0; a < 9; a++)
 800625e:	2300      	movs	r3, #0
 8006260:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8006264:	e00a      	b.n	800627c <dwin_data+0xd28>
					DISPLAY_INPUT[a] = 0x00;
 8006266:	4a4a      	ldr	r2, [pc, #296]	@ (8006390 <dwin_data+0xe3c>)
 8006268:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800626c:	4413      	add	r3, r2
 800626e:	2200      	movs	r2, #0
 8006270:	701a      	strb	r2, [r3, #0]
				for (int a = 0; a < 9; a++)
 8006272:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006276:	3301      	adds	r3, #1
 8006278:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800627c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006280:	2b08      	cmp	r3, #8
 8006282:	ddf0      	ble.n	8006266 <dwin_data+0xd12>
			}
			temp_add = 0x04;
 8006284:	4b4e      	ldr	r3, [pc, #312]	@ (80063c0 <dwin_data+0xe6c>)
 8006286:	2204      	movs	r2, #4
 8006288:	701a      	strb	r2, [r3, #0]
 800628a:	f000 bd5c 	b.w	8006d46 <dwin_data+0x17f2>
		}else if (((DISPLAY_INPUT[5] == 0x95) && (DISPLAY_INPUT[8] == 0x01))) {
 800628e:	4b40      	ldr	r3, [pc, #256]	@ (8006390 <dwin_data+0xe3c>)
 8006290:	795b      	ldrb	r3, [r3, #5]
 8006292:	2b95      	cmp	r3, #149	@ 0x95
 8006294:	d13e      	bne.n	8006314 <dwin_data+0xdc0>
 8006296:	4b3e      	ldr	r3, [pc, #248]	@ (8006390 <dwin_data+0xe3c>)
 8006298:	7a1b      	ldrb	r3, [r3, #8]
 800629a:	2b01      	cmp	r3, #1
 800629c:	d13a      	bne.n	8006314 <dwin_data+0xdc0>
			vt_flag = 1;
 800629e:	4b3e      	ldr	r3, [pc, #248]	@ (8006398 <dwin_data+0xe44>)
 80062a0:	2201      	movs	r2, #1
 80062a2:	701a      	strb	r2, [r3, #0]
			plt_flag = 0;
 80062a4:	4b3d      	ldr	r3, [pc, #244]	@ (800639c <dwin_data+0xe48>)
 80062a6:	2200      	movs	r2, #0
 80062a8:	701a      	strb	r2, [r3, #0]
			rr_flag = 0;
 80062aa:	4b3d      	ldr	r3, [pc, #244]	@ (80063a0 <dwin_data+0xe4c>)
 80062ac:	2200      	movs	r2, #0
 80062ae:	701a      	strb	r2, [r3, #0]
			i_flag = 0;
 80062b0:	4b3c      	ldr	r3, [pc, #240]	@ (80063a4 <dwin_data+0xe50>)
 80062b2:	2200      	movs	r2, #0
 80062b4:	701a      	strb	r2, [r3, #0]
			e_flag = 0;
 80062b6:	4b3c      	ldr	r3, [pc, #240]	@ (80063a8 <dwin_data+0xe54>)
 80062b8:	2200      	movs	r2, #0
 80062ba:	701a      	strb	r2, [r3, #0]
			pu_flag = 0;
 80062bc:	4b3b      	ldr	r3, [pc, #236]	@ (80063ac <dwin_data+0xe58>)
 80062be:	2200      	movs	r2, #0
 80062c0:	701a      	strb	r2, [r3, #0]
			trg_flag = 0;
 80062c2:	4b3b      	ldr	r3, [pc, #236]	@ (80063b0 <dwin_data+0xe5c>)
 80062c4:	2200      	movs	r2, #0
 80062c6:	701a      	strb	r2, [r3, #0]
			pip_flag = 0;
 80062c8:	4b3a      	ldr	r3, [pc, #232]	@ (80063b4 <dwin_data+0xe60>)
 80062ca:	2200      	movs	r2, #0
 80062cc:	701a      	strb	r2, [r3, #0]
			peep_flag = 0;
 80062ce:	4b3a      	ldr	r3, [pc, #232]	@ (80063b8 <dwin_data+0xe64>)
 80062d0:	2200      	movs	r2, #0
 80062d2:	701a      	strb	r2, [r3, #0]
			PS_flag = 0;
 80062d4:	4b39      	ldr	r3, [pc, #228]	@ (80063bc <dwin_data+0xe68>)
 80062d6:	2200      	movs	r2, #0
 80062d8:	701a      	strb	r2, [r3, #0]
			display_data(0x10, 0x01, 0x00);
 80062da:	2200      	movs	r2, #0
 80062dc:	2101      	movs	r1, #1
 80062de:	2010      	movs	r0, #16
 80062e0:	f7fb fd84 	bl	8001dec <display_data>
			temp_add = 0x01;
 80062e4:	4b36      	ldr	r3, [pc, #216]	@ (80063c0 <dwin_data+0xe6c>)
 80062e6:	2201      	movs	r2, #1
 80062e8:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 80062ea:	2300      	movs	r3, #0
 80062ec:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80062f0:	e00a      	b.n	8006308 <dwin_data+0xdb4>
				DISPLAY_INPUT[a] = 0x00;
 80062f2:	4a27      	ldr	r2, [pc, #156]	@ (8006390 <dwin_data+0xe3c>)
 80062f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80062f8:	4413      	add	r3, r2
 80062fa:	2200      	movs	r2, #0
 80062fc:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 80062fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006302:	3301      	adds	r3, #1
 8006304:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8006308:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800630c:	2b08      	cmp	r3, #8
 800630e:	ddf0      	ble.n	80062f2 <dwin_data+0xd9e>
 8006310:	f000 bd19 	b.w	8006d46 <dwin_data+0x17f2>

		} else if (((DISPLAY_INPUT[5] == 0x9B) && (DISPLAY_INPUT[8] == 0x01))) {
 8006314:	4b1e      	ldr	r3, [pc, #120]	@ (8006390 <dwin_data+0xe3c>)
 8006316:	795b      	ldrb	r3, [r3, #5]
 8006318:	2b9b      	cmp	r3, #155	@ 0x9b
 800631a:	d164      	bne.n	80063e6 <dwin_data+0xe92>
 800631c:	4b1c      	ldr	r3, [pc, #112]	@ (8006390 <dwin_data+0xe3c>)
 800631e:	7a1b      	ldrb	r3, [r3, #8]
 8006320:	2b01      	cmp	r3, #1
 8006322:	d160      	bne.n	80063e6 <dwin_data+0xe92>
			vt_flag = 0;
 8006324:	4b1c      	ldr	r3, [pc, #112]	@ (8006398 <dwin_data+0xe44>)
 8006326:	2200      	movs	r2, #0
 8006328:	701a      	strb	r2, [r3, #0]
			plt_flag = 1;
 800632a:	4b1c      	ldr	r3, [pc, #112]	@ (800639c <dwin_data+0xe48>)
 800632c:	2201      	movs	r2, #1
 800632e:	701a      	strb	r2, [r3, #0]
			rr_flag = 0;
 8006330:	4b1b      	ldr	r3, [pc, #108]	@ (80063a0 <dwin_data+0xe4c>)
 8006332:	2200      	movs	r2, #0
 8006334:	701a      	strb	r2, [r3, #0]
			i_flag = 0;
 8006336:	4b1b      	ldr	r3, [pc, #108]	@ (80063a4 <dwin_data+0xe50>)
 8006338:	2200      	movs	r2, #0
 800633a:	701a      	strb	r2, [r3, #0]
			e_flag = 0;
 800633c:	4b1a      	ldr	r3, [pc, #104]	@ (80063a8 <dwin_data+0xe54>)
 800633e:	2200      	movs	r2, #0
 8006340:	701a      	strb	r2, [r3, #0]
			pu_flag = 0;
 8006342:	4b1a      	ldr	r3, [pc, #104]	@ (80063ac <dwin_data+0xe58>)
 8006344:	2200      	movs	r2, #0
 8006346:	701a      	strb	r2, [r3, #0]
			trg_flag = 0;
 8006348:	4b19      	ldr	r3, [pc, #100]	@ (80063b0 <dwin_data+0xe5c>)
 800634a:	2200      	movs	r2, #0
 800634c:	701a      	strb	r2, [r3, #0]
			pip_flag = 0;
 800634e:	4b19      	ldr	r3, [pc, #100]	@ (80063b4 <dwin_data+0xe60>)
 8006350:	2200      	movs	r2, #0
 8006352:	701a      	strb	r2, [r3, #0]
			peep_flag = 0;
 8006354:	4b18      	ldr	r3, [pc, #96]	@ (80063b8 <dwin_data+0xe64>)
 8006356:	2200      	movs	r2, #0
 8006358:	701a      	strb	r2, [r3, #0]
			PS_flag = 0;
 800635a:	4b18      	ldr	r3, [pc, #96]	@ (80063bc <dwin_data+0xe68>)
 800635c:	2200      	movs	r2, #0
 800635e:	701a      	strb	r2, [r3, #0]
			display_data(0x10, 0x02, 0x00);
 8006360:	2200      	movs	r2, #0
 8006362:	2102      	movs	r1, #2
 8006364:	2010      	movs	r0, #16
 8006366:	f7fb fd41 	bl	8001dec <display_data>
			temp_add = 0x02;
 800636a:	4b15      	ldr	r3, [pc, #84]	@ (80063c0 <dwin_data+0xe6c>)
 800636c:	2202      	movs	r2, #2
 800636e:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 8006370:	2300      	movs	r3, #0
 8006372:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8006376:	e030      	b.n	80063da <dwin_data+0xe86>
 8006378:	40020c00 	.word	0x40020c00
 800637c:	20001b2d 	.word	0x20001b2d
 8006380:	20001b2e 	.word	0x20001b2e
 8006384:	20001b2f 	.word	0x20001b2f
 8006388:	20001944 	.word	0x20001944
 800638c:	20000fd0 	.word	0x20000fd0
 8006390:	20001938 	.word	0x20001938
 8006394:	20001b2c 	.word	0x20001b2c
 8006398:	200019cb 	.word	0x200019cb
 800639c:	200019cc 	.word	0x200019cc
 80063a0:	200019cd 	.word	0x200019cd
 80063a4:	200019c9 	.word	0x200019c9
 80063a8:	200019ca 	.word	0x200019ca
 80063ac:	200019ce 	.word	0x200019ce
 80063b0:	200019cf 	.word	0x200019cf
 80063b4:	200019d0 	.word	0x200019d0
 80063b8:	200019d1 	.word	0x200019d1
 80063bc:	200019d2 	.word	0x200019d2
 80063c0:	20001951 	.word	0x20001951
				DISPLAY_INPUT[a] = 0x00;
 80063c4:	4aaf      	ldr	r2, [pc, #700]	@ (8006684 <dwin_data+0x1130>)
 80063c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80063ca:	4413      	add	r3, r2
 80063cc:	2200      	movs	r2, #0
 80063ce:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 80063d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80063d4:	3301      	adds	r3, #1
 80063d6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80063da:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80063de:	2b08      	cmp	r3, #8
 80063e0:	ddf0      	ble.n	80063c4 <dwin_data+0xe70>
 80063e2:	f000 bcb0 	b.w	8006d46 <dwin_data+0x17f2>
		} else if (((DISPLAY_INPUT[5] == 0x9C) && (DISPLAY_INPUT[8] == 0x01))) {
 80063e6:	4ba7      	ldr	r3, [pc, #668]	@ (8006684 <dwin_data+0x1130>)
 80063e8:	795b      	ldrb	r3, [r3, #5]
 80063ea:	2b9c      	cmp	r3, #156	@ 0x9c
 80063ec:	d141      	bne.n	8006472 <dwin_data+0xf1e>
 80063ee:	4ba5      	ldr	r3, [pc, #660]	@ (8006684 <dwin_data+0x1130>)
 80063f0:	7a1b      	ldrb	r3, [r3, #8]
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d13d      	bne.n	8006472 <dwin_data+0xf1e>
			osDelay(50);
 80063f6:	2032      	movs	r0, #50	@ 0x32
 80063f8:	f00b ffdf 	bl	80123ba <osDelay>
			vt_flag = 0;
 80063fc:	4ba2      	ldr	r3, [pc, #648]	@ (8006688 <dwin_data+0x1134>)
 80063fe:	2200      	movs	r2, #0
 8006400:	701a      	strb	r2, [r3, #0]
			plt_flag = 0;
 8006402:	4ba2      	ldr	r3, [pc, #648]	@ (800668c <dwin_data+0x1138>)
 8006404:	2200      	movs	r2, #0
 8006406:	701a      	strb	r2, [r3, #0]
			rr_flag = 1;
 8006408:	4ba1      	ldr	r3, [pc, #644]	@ (8006690 <dwin_data+0x113c>)
 800640a:	2201      	movs	r2, #1
 800640c:	701a      	strb	r2, [r3, #0]
			i_flag = 0;
 800640e:	4ba1      	ldr	r3, [pc, #644]	@ (8006694 <dwin_data+0x1140>)
 8006410:	2200      	movs	r2, #0
 8006412:	701a      	strb	r2, [r3, #0]
			e_flag = 0;
 8006414:	4ba0      	ldr	r3, [pc, #640]	@ (8006698 <dwin_data+0x1144>)
 8006416:	2200      	movs	r2, #0
 8006418:	701a      	strb	r2, [r3, #0]
			pu_flag = 0;
 800641a:	4ba0      	ldr	r3, [pc, #640]	@ (800669c <dwin_data+0x1148>)
 800641c:	2200      	movs	r2, #0
 800641e:	701a      	strb	r2, [r3, #0]
			trg_flag = 0;
 8006420:	4b9f      	ldr	r3, [pc, #636]	@ (80066a0 <dwin_data+0x114c>)
 8006422:	2200      	movs	r2, #0
 8006424:	701a      	strb	r2, [r3, #0]
			pip_flag = 0;
 8006426:	4b9f      	ldr	r3, [pc, #636]	@ (80066a4 <dwin_data+0x1150>)
 8006428:	2200      	movs	r2, #0
 800642a:	701a      	strb	r2, [r3, #0]
			peep_flag = 0;
 800642c:	4b9e      	ldr	r3, [pc, #632]	@ (80066a8 <dwin_data+0x1154>)
 800642e:	2200      	movs	r2, #0
 8006430:	701a      	strb	r2, [r3, #0]
			PS_flag = 0;
 8006432:	4b9e      	ldr	r3, [pc, #632]	@ (80066ac <dwin_data+0x1158>)
 8006434:	2200      	movs	r2, #0
 8006436:	701a      	strb	r2, [r3, #0]
			display_data(0x10, 0x03, 0x00);
 8006438:	2200      	movs	r2, #0
 800643a:	2103      	movs	r1, #3
 800643c:	2010      	movs	r0, #16
 800643e:	f7fb fcd5 	bl	8001dec <display_data>
			temp_add = 0x03;
 8006442:	4b9b      	ldr	r3, [pc, #620]	@ (80066b0 <dwin_data+0x115c>)
 8006444:	2203      	movs	r2, #3
 8006446:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 8006448:	2300      	movs	r3, #0
 800644a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800644e:	e00a      	b.n	8006466 <dwin_data+0xf12>
				DISPLAY_INPUT[a] = 0x00;
 8006450:	4a8c      	ldr	r2, [pc, #560]	@ (8006684 <dwin_data+0x1130>)
 8006452:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8006456:	4413      	add	r3, r2
 8006458:	2200      	movs	r2, #0
 800645a:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 800645c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8006460:	3301      	adds	r3, #1
 8006462:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8006466:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800646a:	2b08      	cmp	r3, #8
 800646c:	ddf0      	ble.n	8006450 <dwin_data+0xefc>
 800646e:	f000 bc6a 	b.w	8006d46 <dwin_data+0x17f2>
		} else if (((DISPLAY_INPUT[5] == 0x9E) && (DISPLAY_INPUT[8] == 0x01))) {
 8006472:	4b84      	ldr	r3, [pc, #528]	@ (8006684 <dwin_data+0x1130>)
 8006474:	795b      	ldrb	r3, [r3, #5]
 8006476:	2b9e      	cmp	r3, #158	@ 0x9e
 8006478:	d13e      	bne.n	80064f8 <dwin_data+0xfa4>
 800647a:	4b82      	ldr	r3, [pc, #520]	@ (8006684 <dwin_data+0x1130>)
 800647c:	7a1b      	ldrb	r3, [r3, #8]
 800647e:	2b01      	cmp	r3, #1
 8006480:	d13a      	bne.n	80064f8 <dwin_data+0xfa4>
			vt_flag = 0;
 8006482:	4b81      	ldr	r3, [pc, #516]	@ (8006688 <dwin_data+0x1134>)
 8006484:	2200      	movs	r2, #0
 8006486:	701a      	strb	r2, [r3, #0]
			plt_flag = 0;
 8006488:	4b80      	ldr	r3, [pc, #512]	@ (800668c <dwin_data+0x1138>)
 800648a:	2200      	movs	r2, #0
 800648c:	701a      	strb	r2, [r3, #0]
			rr_flag = 0;
 800648e:	4b80      	ldr	r3, [pc, #512]	@ (8006690 <dwin_data+0x113c>)
 8006490:	2200      	movs	r2, #0
 8006492:	701a      	strb	r2, [r3, #0]
			i_flag = 0;
 8006494:	4b7f      	ldr	r3, [pc, #508]	@ (8006694 <dwin_data+0x1140>)
 8006496:	2200      	movs	r2, #0
 8006498:	701a      	strb	r2, [r3, #0]
			e_flag = 0;
 800649a:	4b7f      	ldr	r3, [pc, #508]	@ (8006698 <dwin_data+0x1144>)
 800649c:	2200      	movs	r2, #0
 800649e:	701a      	strb	r2, [r3, #0]
			pu_flag = 1;
 80064a0:	4b7e      	ldr	r3, [pc, #504]	@ (800669c <dwin_data+0x1148>)
 80064a2:	2201      	movs	r2, #1
 80064a4:	701a      	strb	r2, [r3, #0]
			trg_flag = 0;
 80064a6:	4b7e      	ldr	r3, [pc, #504]	@ (80066a0 <dwin_data+0x114c>)
 80064a8:	2200      	movs	r2, #0
 80064aa:	701a      	strb	r2, [r3, #0]
			pip_flag = 0;
 80064ac:	4b7d      	ldr	r3, [pc, #500]	@ (80066a4 <dwin_data+0x1150>)
 80064ae:	2200      	movs	r2, #0
 80064b0:	701a      	strb	r2, [r3, #0]
			peep_flag = 0;
 80064b2:	4b7d      	ldr	r3, [pc, #500]	@ (80066a8 <dwin_data+0x1154>)
 80064b4:	2200      	movs	r2, #0
 80064b6:	701a      	strb	r2, [r3, #0]
			PS_flag = 0;
 80064b8:	4b7c      	ldr	r3, [pc, #496]	@ (80066ac <dwin_data+0x1158>)
 80064ba:	2200      	movs	r2, #0
 80064bc:	701a      	strb	r2, [r3, #0]
			display_data(0x10, 0x05, 0x00);
 80064be:	2200      	movs	r2, #0
 80064c0:	2105      	movs	r1, #5
 80064c2:	2010      	movs	r0, #16
 80064c4:	f7fb fc92 	bl	8001dec <display_data>
			temp_add = 0x05;
 80064c8:	4b79      	ldr	r3, [pc, #484]	@ (80066b0 <dwin_data+0x115c>)
 80064ca:	2205      	movs	r2, #5
 80064cc:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 80064ce:	2300      	movs	r3, #0
 80064d0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80064d4:	e00a      	b.n	80064ec <dwin_data+0xf98>
				DISPLAY_INPUT[a] = 0x00;
 80064d6:	4a6b      	ldr	r2, [pc, #428]	@ (8006684 <dwin_data+0x1130>)
 80064d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80064dc:	4413      	add	r3, r2
 80064de:	2200      	movs	r2, #0
 80064e0:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 80064e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80064e6:	3301      	adds	r3, #1
 80064e8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80064ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80064f0:	2b08      	cmp	r3, #8
 80064f2:	ddf0      	ble.n	80064d6 <dwin_data+0xf82>
 80064f4:	f000 bc27 	b.w	8006d46 <dwin_data+0x17f2>
		}else if (((DISPLAY_INPUT[5] == 0x9F) && (DISPLAY_INPUT[8] == 0x01))) {
 80064f8:	4b62      	ldr	r3, [pc, #392]	@ (8006684 <dwin_data+0x1130>)
 80064fa:	795b      	ldrb	r3, [r3, #5]
 80064fc:	2b9f      	cmp	r3, #159	@ 0x9f
 80064fe:	d13d      	bne.n	800657c <dwin_data+0x1028>
 8006500:	4b60      	ldr	r3, [pc, #384]	@ (8006684 <dwin_data+0x1130>)
 8006502:	7a1b      	ldrb	r3, [r3, #8]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d139      	bne.n	800657c <dwin_data+0x1028>
			vt_flag = 0;
 8006508:	4b5f      	ldr	r3, [pc, #380]	@ (8006688 <dwin_data+0x1134>)
 800650a:	2200      	movs	r2, #0
 800650c:	701a      	strb	r2, [r3, #0]
			plt_flag = 0;
 800650e:	4b5f      	ldr	r3, [pc, #380]	@ (800668c <dwin_data+0x1138>)
 8006510:	2200      	movs	r2, #0
 8006512:	701a      	strb	r2, [r3, #0]
			rr_flag = 0;
 8006514:	4b5e      	ldr	r3, [pc, #376]	@ (8006690 <dwin_data+0x113c>)
 8006516:	2200      	movs	r2, #0
 8006518:	701a      	strb	r2, [r3, #0]
			i_flag = 0;
 800651a:	4b5e      	ldr	r3, [pc, #376]	@ (8006694 <dwin_data+0x1140>)
 800651c:	2200      	movs	r2, #0
 800651e:	701a      	strb	r2, [r3, #0]
			e_flag = 0;
 8006520:	4b5d      	ldr	r3, [pc, #372]	@ (8006698 <dwin_data+0x1144>)
 8006522:	2200      	movs	r2, #0
 8006524:	701a      	strb	r2, [r3, #0]
			pu_flag = 0;
 8006526:	4b5d      	ldr	r3, [pc, #372]	@ (800669c <dwin_data+0x1148>)
 8006528:	2200      	movs	r2, #0
 800652a:	701a      	strb	r2, [r3, #0]
			trg_flag = 1;
 800652c:	4b5c      	ldr	r3, [pc, #368]	@ (80066a0 <dwin_data+0x114c>)
 800652e:	2201      	movs	r2, #1
 8006530:	701a      	strb	r2, [r3, #0]
			pip_flag = 0;
 8006532:	4b5c      	ldr	r3, [pc, #368]	@ (80066a4 <dwin_data+0x1150>)
 8006534:	2200      	movs	r2, #0
 8006536:	701a      	strb	r2, [r3, #0]
			peep_flag = 0;
 8006538:	4b5b      	ldr	r3, [pc, #364]	@ (80066a8 <dwin_data+0x1154>)
 800653a:	2200      	movs	r2, #0
 800653c:	701a      	strb	r2, [r3, #0]
			PS_flag = 0;
 800653e:	4b5b      	ldr	r3, [pc, #364]	@ (80066ac <dwin_data+0x1158>)
 8006540:	2200      	movs	r2, #0
 8006542:	701a      	strb	r2, [r3, #0]
			display_data(0x10, 0x06, 0x00);
 8006544:	2200      	movs	r2, #0
 8006546:	2106      	movs	r1, #6
 8006548:	2010      	movs	r0, #16
 800654a:	f7fb fc4f 	bl	8001dec <display_data>
			temp_add = 0x06;
 800654e:	4b58      	ldr	r3, [pc, #352]	@ (80066b0 <dwin_data+0x115c>)
 8006550:	2206      	movs	r2, #6
 8006552:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 8006554:	2300      	movs	r3, #0
 8006556:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800655a:	e00a      	b.n	8006572 <dwin_data+0x101e>
				DISPLAY_INPUT[a] = 0x00;
 800655c:	4a49      	ldr	r2, [pc, #292]	@ (8006684 <dwin_data+0x1130>)
 800655e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006562:	4413      	add	r3, r2
 8006564:	2200      	movs	r2, #0
 8006566:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 8006568:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800656c:	3301      	adds	r3, #1
 800656e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8006572:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006576:	2b08      	cmp	r3, #8
 8006578:	ddf0      	ble.n	800655c <dwin_data+0x1008>
 800657a:	e3e4      	b.n	8006d46 <dwin_data+0x17f2>
		} else if (((DISPLAY_INPUT[5] == 0xA0) && (DISPLAY_INPUT[8] == 0x01))) {
 800657c:	4b41      	ldr	r3, [pc, #260]	@ (8006684 <dwin_data+0x1130>)
 800657e:	795b      	ldrb	r3, [r3, #5]
 8006580:	2ba0      	cmp	r3, #160	@ 0xa0
 8006582:	d13d      	bne.n	8006600 <dwin_data+0x10ac>
 8006584:	4b3f      	ldr	r3, [pc, #252]	@ (8006684 <dwin_data+0x1130>)
 8006586:	7a1b      	ldrb	r3, [r3, #8]
 8006588:	2b01      	cmp	r3, #1
 800658a:	d139      	bne.n	8006600 <dwin_data+0x10ac>
			vt_flag = 0;
 800658c:	4b3e      	ldr	r3, [pc, #248]	@ (8006688 <dwin_data+0x1134>)
 800658e:	2200      	movs	r2, #0
 8006590:	701a      	strb	r2, [r3, #0]
			plt_flag = 0;
 8006592:	4b3e      	ldr	r3, [pc, #248]	@ (800668c <dwin_data+0x1138>)
 8006594:	2200      	movs	r2, #0
 8006596:	701a      	strb	r2, [r3, #0]
			rr_flag = 0;
 8006598:	4b3d      	ldr	r3, [pc, #244]	@ (8006690 <dwin_data+0x113c>)
 800659a:	2200      	movs	r2, #0
 800659c:	701a      	strb	r2, [r3, #0]
			i_flag = 0;
 800659e:	4b3d      	ldr	r3, [pc, #244]	@ (8006694 <dwin_data+0x1140>)
 80065a0:	2200      	movs	r2, #0
 80065a2:	701a      	strb	r2, [r3, #0]
			e_flag = 0;
 80065a4:	4b3c      	ldr	r3, [pc, #240]	@ (8006698 <dwin_data+0x1144>)
 80065a6:	2200      	movs	r2, #0
 80065a8:	701a      	strb	r2, [r3, #0]
			pu_flag = 0;
 80065aa:	4b3c      	ldr	r3, [pc, #240]	@ (800669c <dwin_data+0x1148>)
 80065ac:	2200      	movs	r2, #0
 80065ae:	701a      	strb	r2, [r3, #0]
			trg_flag = 0;
 80065b0:	4b3b      	ldr	r3, [pc, #236]	@ (80066a0 <dwin_data+0x114c>)
 80065b2:	2200      	movs	r2, #0
 80065b4:	701a      	strb	r2, [r3, #0]
			pip_flag = 1;
 80065b6:	4b3b      	ldr	r3, [pc, #236]	@ (80066a4 <dwin_data+0x1150>)
 80065b8:	2201      	movs	r2, #1
 80065ba:	701a      	strb	r2, [r3, #0]
			peep_flag = 0;
 80065bc:	4b3a      	ldr	r3, [pc, #232]	@ (80066a8 <dwin_data+0x1154>)
 80065be:	2200      	movs	r2, #0
 80065c0:	701a      	strb	r2, [r3, #0]
			PS_flag = 0;
 80065c2:	4b3a      	ldr	r3, [pc, #232]	@ (80066ac <dwin_data+0x1158>)
 80065c4:	2200      	movs	r2, #0
 80065c6:	701a      	strb	r2, [r3, #0]
			display_data(0x10, 0x07, 0x00);
 80065c8:	2200      	movs	r2, #0
 80065ca:	2107      	movs	r1, #7
 80065cc:	2010      	movs	r0, #16
 80065ce:	f7fb fc0d 	bl	8001dec <display_data>
			temp_add = 0x07;
 80065d2:	4b37      	ldr	r3, [pc, #220]	@ (80066b0 <dwin_data+0x115c>)
 80065d4:	2207      	movs	r2, #7
 80065d6:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 80065d8:	2300      	movs	r3, #0
 80065da:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80065de:	e00a      	b.n	80065f6 <dwin_data+0x10a2>
				DISPLAY_INPUT[a] = 0x00;
 80065e0:	4a28      	ldr	r2, [pc, #160]	@ (8006684 <dwin_data+0x1130>)
 80065e2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80065e6:	4413      	add	r3, r2
 80065e8:	2200      	movs	r2, #0
 80065ea:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 80065ec:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80065f0:	3301      	adds	r3, #1
 80065f2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80065f6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80065fa:	2b08      	cmp	r3, #8
 80065fc:	ddf0      	ble.n	80065e0 <dwin_data+0x108c>
 80065fe:	e3a2      	b.n	8006d46 <dwin_data+0x17f2>
		} else if (((DISPLAY_INPUT[5] == 0xA1) && (DISPLAY_INPUT[8] == 0x01))) {
 8006600:	4b20      	ldr	r3, [pc, #128]	@ (8006684 <dwin_data+0x1130>)
 8006602:	795b      	ldrb	r3, [r3, #5]
 8006604:	2ba1      	cmp	r3, #161	@ 0xa1
 8006606:	d155      	bne.n	80066b4 <dwin_data+0x1160>
 8006608:	4b1e      	ldr	r3, [pc, #120]	@ (8006684 <dwin_data+0x1130>)
 800660a:	7a1b      	ldrb	r3, [r3, #8]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d151      	bne.n	80066b4 <dwin_data+0x1160>
			vt_flag = 0;
 8006610:	4b1d      	ldr	r3, [pc, #116]	@ (8006688 <dwin_data+0x1134>)
 8006612:	2200      	movs	r2, #0
 8006614:	701a      	strb	r2, [r3, #0]
			plt_flag = 0;
 8006616:	4b1d      	ldr	r3, [pc, #116]	@ (800668c <dwin_data+0x1138>)
 8006618:	2200      	movs	r2, #0
 800661a:	701a      	strb	r2, [r3, #0]
			rr_flag = 0;
 800661c:	4b1c      	ldr	r3, [pc, #112]	@ (8006690 <dwin_data+0x113c>)
 800661e:	2200      	movs	r2, #0
 8006620:	701a      	strb	r2, [r3, #0]
			i_flag = 0;
 8006622:	4b1c      	ldr	r3, [pc, #112]	@ (8006694 <dwin_data+0x1140>)
 8006624:	2200      	movs	r2, #0
 8006626:	701a      	strb	r2, [r3, #0]
			e_flag = 0;
 8006628:	4b1b      	ldr	r3, [pc, #108]	@ (8006698 <dwin_data+0x1144>)
 800662a:	2200      	movs	r2, #0
 800662c:	701a      	strb	r2, [r3, #0]
			pu_flag = 0;
 800662e:	4b1b      	ldr	r3, [pc, #108]	@ (800669c <dwin_data+0x1148>)
 8006630:	2200      	movs	r2, #0
 8006632:	701a      	strb	r2, [r3, #0]
			trg_flag = 0;
 8006634:	4b1a      	ldr	r3, [pc, #104]	@ (80066a0 <dwin_data+0x114c>)
 8006636:	2200      	movs	r2, #0
 8006638:	701a      	strb	r2, [r3, #0]
			pip_flag = 0;
 800663a:	4b1a      	ldr	r3, [pc, #104]	@ (80066a4 <dwin_data+0x1150>)
 800663c:	2200      	movs	r2, #0
 800663e:	701a      	strb	r2, [r3, #0]
			peep_flag = 1;
 8006640:	4b19      	ldr	r3, [pc, #100]	@ (80066a8 <dwin_data+0x1154>)
 8006642:	2201      	movs	r2, #1
 8006644:	701a      	strb	r2, [r3, #0]
			PS_flag = 0;
 8006646:	4b19      	ldr	r3, [pc, #100]	@ (80066ac <dwin_data+0x1158>)
 8006648:	2200      	movs	r2, #0
 800664a:	701a      	strb	r2, [r3, #0]
			display_data(0x10, 0x08, 0x00);
 800664c:	2200      	movs	r2, #0
 800664e:	2108      	movs	r1, #8
 8006650:	2010      	movs	r0, #16
 8006652:	f7fb fbcb 	bl	8001dec <display_data>
			temp_add = 0x08;
 8006656:	4b16      	ldr	r3, [pc, #88]	@ (80066b0 <dwin_data+0x115c>)
 8006658:	2208      	movs	r2, #8
 800665a:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 800665c:	2300      	movs	r3, #0
 800665e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8006662:	e00a      	b.n	800667a <dwin_data+0x1126>
				DISPLAY_INPUT[a] = 0x00;
 8006664:	4a07      	ldr	r2, [pc, #28]	@ (8006684 <dwin_data+0x1130>)
 8006666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800666a:	4413      	add	r3, r2
 800666c:	2200      	movs	r2, #0
 800666e:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 8006670:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006674:	3301      	adds	r3, #1
 8006676:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800667a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800667e:	2b08      	cmp	r3, #8
 8006680:	ddf0      	ble.n	8006664 <dwin_data+0x1110>
 8006682:	e360      	b.n	8006d46 <dwin_data+0x17f2>
 8006684:	20001938 	.word	0x20001938
 8006688:	200019cb 	.word	0x200019cb
 800668c:	200019cc 	.word	0x200019cc
 8006690:	200019cd 	.word	0x200019cd
 8006694:	200019c9 	.word	0x200019c9
 8006698:	200019ca 	.word	0x200019ca
 800669c:	200019ce 	.word	0x200019ce
 80066a0:	200019cf 	.word	0x200019cf
 80066a4:	200019d0 	.word	0x200019d0
 80066a8:	200019d1 	.word	0x200019d1
 80066ac:	200019d2 	.word	0x200019d2
 80066b0:	20001951 	.word	0x20001951
		} else if (((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xAF) && (DISPLAY_INPUT[8] == 0x01))) {
 80066b4:	4bae      	ldr	r3, [pc, #696]	@ (8006970 <dwin_data+0x141c>)
 80066b6:	791b      	ldrb	r3, [r3, #4]
 80066b8:	2b10      	cmp	r3, #16
 80066ba:	d141      	bne.n	8006740 <dwin_data+0x11ec>
 80066bc:	4bac      	ldr	r3, [pc, #688]	@ (8006970 <dwin_data+0x141c>)
 80066be:	795b      	ldrb	r3, [r3, #5]
 80066c0:	2baf      	cmp	r3, #175	@ 0xaf
 80066c2:	d13d      	bne.n	8006740 <dwin_data+0x11ec>
 80066c4:	4baa      	ldr	r3, [pc, #680]	@ (8006970 <dwin_data+0x141c>)
 80066c6:	7a1b      	ldrb	r3, [r3, #8]
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d139      	bne.n	8006740 <dwin_data+0x11ec>
			vt_flag = 0;
 80066cc:	4ba9      	ldr	r3, [pc, #676]	@ (8006974 <dwin_data+0x1420>)
 80066ce:	2200      	movs	r2, #0
 80066d0:	701a      	strb	r2, [r3, #0]
			plt_flag = 0;
 80066d2:	4ba9      	ldr	r3, [pc, #676]	@ (8006978 <dwin_data+0x1424>)
 80066d4:	2200      	movs	r2, #0
 80066d6:	701a      	strb	r2, [r3, #0]
			rr_flag = 0;
 80066d8:	4ba8      	ldr	r3, [pc, #672]	@ (800697c <dwin_data+0x1428>)
 80066da:	2200      	movs	r2, #0
 80066dc:	701a      	strb	r2, [r3, #0]
			i_flag = 0;
 80066de:	4ba8      	ldr	r3, [pc, #672]	@ (8006980 <dwin_data+0x142c>)
 80066e0:	2200      	movs	r2, #0
 80066e2:	701a      	strb	r2, [r3, #0]
			e_flag = 0;
 80066e4:	4ba7      	ldr	r3, [pc, #668]	@ (8006984 <dwin_data+0x1430>)
 80066e6:	2200      	movs	r2, #0
 80066e8:	701a      	strb	r2, [r3, #0]
			pu_flag = 0;
 80066ea:	4ba7      	ldr	r3, [pc, #668]	@ (8006988 <dwin_data+0x1434>)
 80066ec:	2200      	movs	r2, #0
 80066ee:	701a      	strb	r2, [r3, #0]
			trg_flag = 0;
 80066f0:	4ba6      	ldr	r3, [pc, #664]	@ (800698c <dwin_data+0x1438>)
 80066f2:	2200      	movs	r2, #0
 80066f4:	701a      	strb	r2, [r3, #0]
			pip_flag = 0;
 80066f6:	4ba6      	ldr	r3, [pc, #664]	@ (8006990 <dwin_data+0x143c>)
 80066f8:	2200      	movs	r2, #0
 80066fa:	701a      	strb	r2, [r3, #0]
			peep_flag = 0;
 80066fc:	4ba5      	ldr	r3, [pc, #660]	@ (8006994 <dwin_data+0x1440>)
 80066fe:	2200      	movs	r2, #0
 8006700:	701a      	strb	r2, [r3, #0]
			PS_flag = 1;
 8006702:	4ba5      	ldr	r3, [pc, #660]	@ (8006998 <dwin_data+0x1444>)
 8006704:	2201      	movs	r2, #1
 8006706:	701a      	strb	r2, [r3, #0]
			display_data(0x10, 0x22, 0x00);
 8006708:	2200      	movs	r2, #0
 800670a:	2122      	movs	r1, #34	@ 0x22
 800670c:	2010      	movs	r0, #16
 800670e:	f7fb fb6d 	bl	8001dec <display_data>
			clears_add = 0x22;
 8006712:	4ba2      	ldr	r3, [pc, #648]	@ (800699c <dwin_data+0x1448>)
 8006714:	2222      	movs	r2, #34	@ 0x22
 8006716:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 8006718:	2300      	movs	r3, #0
 800671a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800671e:	e00a      	b.n	8006736 <dwin_data+0x11e2>
				DISPLAY_INPUT[a] = 0x00;
 8006720:	4a93      	ldr	r2, [pc, #588]	@ (8006970 <dwin_data+0x141c>)
 8006722:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006726:	4413      	add	r3, r2
 8006728:	2200      	movs	r2, #0
 800672a:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 800672c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006730:	3301      	adds	r3, #1
 8006732:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8006736:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800673a:	2b08      	cmp	r3, #8
 800673c:	ddf0      	ble.n	8006720 <dwin_data+0x11cc>
 800673e:	e302      	b.n	8006d46 <dwin_data+0x17f2>
		}
		else if (((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA5)
 8006740:	4b8b      	ldr	r3, [pc, #556]	@ (8006970 <dwin_data+0x141c>)
 8006742:	791b      	ldrb	r3, [r3, #4]
 8006744:	2b10      	cmp	r3, #16
 8006746:	d141      	bne.n	80067cc <dwin_data+0x1278>
 8006748:	4b89      	ldr	r3, [pc, #548]	@ (8006970 <dwin_data+0x141c>)
 800674a:	795b      	ldrb	r3, [r3, #5]
 800674c:	2ba5      	cmp	r3, #165	@ 0xa5
 800674e:	d13d      	bne.n	80067cc <dwin_data+0x1278>

				&& (DISPLAY_INPUT[8] == 0x01))) {
 8006750:	4b87      	ldr	r3, [pc, #540]	@ (8006970 <dwin_data+0x141c>)
 8006752:	7a1b      	ldrb	r3, [r3, #8]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d139      	bne.n	80067cc <dwin_data+0x1278>
			P_peak_alarm_min_flag = 0;
 8006758:	4b91      	ldr	r3, [pc, #580]	@ (80069a0 <dwin_data+0x144c>)
 800675a:	2200      	movs	r2, #0
 800675c:	701a      	strb	r2, [r3, #0]
			MV_alarm_min_flag = 0;
 800675e:	4b91      	ldr	r3, [pc, #580]	@ (80069a4 <dwin_data+0x1450>)
 8006760:	2200      	movs	r2, #0
 8006762:	701a      	strb	r2, [r3, #0]
			RR_alarm_min_flag = 0;
 8006764:	4b90      	ldr	r3, [pc, #576]	@ (80069a8 <dwin_data+0x1454>)
 8006766:	2200      	movs	r2, #0
 8006768:	701a      	strb	r2, [r3, #0]
			peep_alarm_min_flag = 0;
 800676a:	4b90      	ldr	r3, [pc, #576]	@ (80069ac <dwin_data+0x1458>)
 800676c:	2200      	movs	r2, #0
 800676e:	701a      	strb	r2, [r3, #0]
			P_peak_alarm_max_flag = 1;
 8006770:	4b8f      	ldr	r3, [pc, #572]	@ (80069b0 <dwin_data+0x145c>)
 8006772:	2201      	movs	r2, #1
 8006774:	701a      	strb	r2, [r3, #0]
			MV_alarm_max_flag = 0;
 8006776:	4b8f      	ldr	r3, [pc, #572]	@ (80069b4 <dwin_data+0x1460>)
 8006778:	2200      	movs	r2, #0
 800677a:	701a      	strb	r2, [r3, #0]
			RR_alarm_max_flag = 0;
 800677c:	4b8e      	ldr	r3, [pc, #568]	@ (80069b8 <dwin_data+0x1464>)
 800677e:	2200      	movs	r2, #0
 8006780:	701a      	strb	r2, [r3, #0]
			peep_alarm_max_flag = 0;
 8006782:	4b8e      	ldr	r3, [pc, #568]	@ (80069bc <dwin_data+0x1468>)
 8006784:	2200      	movs	r2, #0
 8006786:	701a      	strb	r2, [r3, #0]
			O2_alarm_max_flag = 0;
 8006788:	4b8d      	ldr	r3, [pc, #564]	@ (80069c0 <dwin_data+0x146c>)
 800678a:	2200      	movs	r2, #0
 800678c:	701a      	strb	r2, [r3, #0]
			O2_alarm_min_flag = 0;
 800678e:	4b8d      	ldr	r3, [pc, #564]	@ (80069c4 <dwin_data+0x1470>)
 8006790:	2200      	movs	r2, #0
 8006792:	701a      	strb	r2, [r3, #0]
			display_data(0x10, 0x12, 0x00);
 8006794:	2200      	movs	r2, #0
 8006796:	2112      	movs	r1, #18
 8006798:	2010      	movs	r0, #16
 800679a:	f7fb fb27 	bl	8001dec <display_data>
			clear_add = 0x12;
 800679e:	4b8a      	ldr	r3, [pc, #552]	@ (80069c8 <dwin_data+0x1474>)
 80067a0:	2212      	movs	r2, #18
 80067a2:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 80067a4:	2300      	movs	r3, #0
 80067a6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80067aa:	e00a      	b.n	80067c2 <dwin_data+0x126e>
				DISPLAY_INPUT[a] = 0x00;
 80067ac:	4a70      	ldr	r2, [pc, #448]	@ (8006970 <dwin_data+0x141c>)
 80067ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067b2:	4413      	add	r3, r2
 80067b4:	2200      	movs	r2, #0
 80067b6:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 80067b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067bc:	3301      	adds	r3, #1
 80067be:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80067c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80067c6:	2b08      	cmp	r3, #8
 80067c8:	ddf0      	ble.n	80067ac <dwin_data+0x1258>
 80067ca:	e2bc      	b.n	8006d46 <dwin_data+0x17f2>
		}

		else if (((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA6)
 80067cc:	4b68      	ldr	r3, [pc, #416]	@ (8006970 <dwin_data+0x141c>)
 80067ce:	791b      	ldrb	r3, [r3, #4]
 80067d0:	2b10      	cmp	r3, #16
 80067d2:	d141      	bne.n	8006858 <dwin_data+0x1304>
 80067d4:	4b66      	ldr	r3, [pc, #408]	@ (8006970 <dwin_data+0x141c>)
 80067d6:	795b      	ldrb	r3, [r3, #5]
 80067d8:	2ba6      	cmp	r3, #166	@ 0xa6
 80067da:	d13d      	bne.n	8006858 <dwin_data+0x1304>
				&& (DISPLAY_INPUT[8] == 0x01))) {
 80067dc:	4b64      	ldr	r3, [pc, #400]	@ (8006970 <dwin_data+0x141c>)
 80067de:	7a1b      	ldrb	r3, [r3, #8]
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d139      	bne.n	8006858 <dwin_data+0x1304>
			P_peak_alarm_min_flag = 1;
 80067e4:	4b6e      	ldr	r3, [pc, #440]	@ (80069a0 <dwin_data+0x144c>)
 80067e6:	2201      	movs	r2, #1
 80067e8:	701a      	strb	r2, [r3, #0]
			MV_alarm_min_flag = 0;
 80067ea:	4b6e      	ldr	r3, [pc, #440]	@ (80069a4 <dwin_data+0x1450>)
 80067ec:	2200      	movs	r2, #0
 80067ee:	701a      	strb	r2, [r3, #0]
			RR_alarm_min_flag = 0;
 80067f0:	4b6d      	ldr	r3, [pc, #436]	@ (80069a8 <dwin_data+0x1454>)
 80067f2:	2200      	movs	r2, #0
 80067f4:	701a      	strb	r2, [r3, #0]
			peep_alarm_min_flag = 0;
 80067f6:	4b6d      	ldr	r3, [pc, #436]	@ (80069ac <dwin_data+0x1458>)
 80067f8:	2200      	movs	r2, #0
 80067fa:	701a      	strb	r2, [r3, #0]
			P_peak_alarm_max_flag = 0;
 80067fc:	4b6c      	ldr	r3, [pc, #432]	@ (80069b0 <dwin_data+0x145c>)
 80067fe:	2200      	movs	r2, #0
 8006800:	701a      	strb	r2, [r3, #0]
			MV_alarm_max_flag = 0;
 8006802:	4b6c      	ldr	r3, [pc, #432]	@ (80069b4 <dwin_data+0x1460>)
 8006804:	2200      	movs	r2, #0
 8006806:	701a      	strb	r2, [r3, #0]
			RR_alarm_max_flag = 0;
 8006808:	4b6b      	ldr	r3, [pc, #428]	@ (80069b8 <dwin_data+0x1464>)
 800680a:	2200      	movs	r2, #0
 800680c:	701a      	strb	r2, [r3, #0]
			peep_alarm_max_flag = 0;
 800680e:	4b6b      	ldr	r3, [pc, #428]	@ (80069bc <dwin_data+0x1468>)
 8006810:	2200      	movs	r2, #0
 8006812:	701a      	strb	r2, [r3, #0]
			O2_alarm_max_flag = 0;
 8006814:	4b6a      	ldr	r3, [pc, #424]	@ (80069c0 <dwin_data+0x146c>)
 8006816:	2200      	movs	r2, #0
 8006818:	701a      	strb	r2, [r3, #0]
			O2_alarm_min_flag = 0;
 800681a:	4b6a      	ldr	r3, [pc, #424]	@ (80069c4 <dwin_data+0x1470>)
 800681c:	2200      	movs	r2, #0
 800681e:	701a      	strb	r2, [r3, #0]
			display_data(0x10, 0x13, 0x00);
 8006820:	2200      	movs	r2, #0
 8006822:	2113      	movs	r1, #19
 8006824:	2010      	movs	r0, #16
 8006826:	f7fb fae1 	bl	8001dec <display_data>
			clear_add = 0x13;
 800682a:	4b67      	ldr	r3, [pc, #412]	@ (80069c8 <dwin_data+0x1474>)
 800682c:	2213      	movs	r2, #19
 800682e:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 8006830:	2300      	movs	r3, #0
 8006832:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006836:	e00a      	b.n	800684e <dwin_data+0x12fa>
				DISPLAY_INPUT[a] = 0x00;
 8006838:	4a4d      	ldr	r2, [pc, #308]	@ (8006970 <dwin_data+0x141c>)
 800683a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800683e:	4413      	add	r3, r2
 8006840:	2200      	movs	r2, #0
 8006842:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 8006844:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8006848:	3301      	adds	r3, #1
 800684a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800684e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8006852:	2b08      	cmp	r3, #8
 8006854:	ddf0      	ble.n	8006838 <dwin_data+0x12e4>
 8006856:	e276      	b.n	8006d46 <dwin_data+0x17f2>
		}

		else if (((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA7)
 8006858:	4b45      	ldr	r3, [pc, #276]	@ (8006970 <dwin_data+0x141c>)
 800685a:	791b      	ldrb	r3, [r3, #4]
 800685c:	2b10      	cmp	r3, #16
 800685e:	d141      	bne.n	80068e4 <dwin_data+0x1390>
 8006860:	4b43      	ldr	r3, [pc, #268]	@ (8006970 <dwin_data+0x141c>)
 8006862:	795b      	ldrb	r3, [r3, #5]
 8006864:	2ba7      	cmp	r3, #167	@ 0xa7
 8006866:	d13d      	bne.n	80068e4 <dwin_data+0x1390>
				&& (DISPLAY_INPUT[8] == 0x01))) {
 8006868:	4b41      	ldr	r3, [pc, #260]	@ (8006970 <dwin_data+0x141c>)
 800686a:	7a1b      	ldrb	r3, [r3, #8]
 800686c:	2b01      	cmp	r3, #1
 800686e:	d139      	bne.n	80068e4 <dwin_data+0x1390>
			P_peak_alarm_min_flag = 0;
 8006870:	4b4b      	ldr	r3, [pc, #300]	@ (80069a0 <dwin_data+0x144c>)
 8006872:	2200      	movs	r2, #0
 8006874:	701a      	strb	r2, [r3, #0]
			MV_alarm_min_flag = 0;
 8006876:	4b4b      	ldr	r3, [pc, #300]	@ (80069a4 <dwin_data+0x1450>)
 8006878:	2200      	movs	r2, #0
 800687a:	701a      	strb	r2, [r3, #0]
			RR_alarm_min_flag = 0;
 800687c:	4b4a      	ldr	r3, [pc, #296]	@ (80069a8 <dwin_data+0x1454>)
 800687e:	2200      	movs	r2, #0
 8006880:	701a      	strb	r2, [r3, #0]
			peep_alarm_min_flag = 0;
 8006882:	4b4a      	ldr	r3, [pc, #296]	@ (80069ac <dwin_data+0x1458>)
 8006884:	2200      	movs	r2, #0
 8006886:	701a      	strb	r2, [r3, #0]
			P_peak_alarm_max_flag = 0;
 8006888:	4b49      	ldr	r3, [pc, #292]	@ (80069b0 <dwin_data+0x145c>)
 800688a:	2200      	movs	r2, #0
 800688c:	701a      	strb	r2, [r3, #0]
			MV_alarm_max_flag = 1;
 800688e:	4b49      	ldr	r3, [pc, #292]	@ (80069b4 <dwin_data+0x1460>)
 8006890:	2201      	movs	r2, #1
 8006892:	701a      	strb	r2, [r3, #0]
			RR_alarm_max_flag = 0;
 8006894:	4b48      	ldr	r3, [pc, #288]	@ (80069b8 <dwin_data+0x1464>)
 8006896:	2200      	movs	r2, #0
 8006898:	701a      	strb	r2, [r3, #0]
			peep_alarm_max_flag = 0;
 800689a:	4b48      	ldr	r3, [pc, #288]	@ (80069bc <dwin_data+0x1468>)
 800689c:	2200      	movs	r2, #0
 800689e:	701a      	strb	r2, [r3, #0]
			O2_alarm_max_flag = 0;
 80068a0:	4b47      	ldr	r3, [pc, #284]	@ (80069c0 <dwin_data+0x146c>)
 80068a2:	2200      	movs	r2, #0
 80068a4:	701a      	strb	r2, [r3, #0]
			O2_alarm_min_flag = 0;
 80068a6:	4b47      	ldr	r3, [pc, #284]	@ (80069c4 <dwin_data+0x1470>)
 80068a8:	2200      	movs	r2, #0
 80068aa:	701a      	strb	r2, [r3, #0]
			display_data(0x10, 0x14, 0x00);
 80068ac:	2200      	movs	r2, #0
 80068ae:	2114      	movs	r1, #20
 80068b0:	2010      	movs	r0, #16
 80068b2:	f7fb fa9b 	bl	8001dec <display_data>
			clear_add = 0x14;
 80068b6:	4b44      	ldr	r3, [pc, #272]	@ (80069c8 <dwin_data+0x1474>)
 80068b8:	2214      	movs	r2, #20
 80068ba:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 80068bc:	2300      	movs	r3, #0
 80068be:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80068c2:	e00a      	b.n	80068da <dwin_data+0x1386>
				DISPLAY_INPUT[a] = 0x00;
 80068c4:	4a2a      	ldr	r2, [pc, #168]	@ (8006970 <dwin_data+0x141c>)
 80068c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ca:	4413      	add	r3, r2
 80068cc:	2200      	movs	r2, #0
 80068ce:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 80068d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068d4:	3301      	adds	r3, #1
 80068d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80068da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068de:	2b08      	cmp	r3, #8
 80068e0:	ddf0      	ble.n	80068c4 <dwin_data+0x1370>
 80068e2:	e230      	b.n	8006d46 <dwin_data+0x17f2>
		}

		else if (((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA8)
 80068e4:	4b22      	ldr	r3, [pc, #136]	@ (8006970 <dwin_data+0x141c>)
 80068e6:	791b      	ldrb	r3, [r3, #4]
 80068e8:	2b10      	cmp	r3, #16
 80068ea:	d16f      	bne.n	80069cc <dwin_data+0x1478>
 80068ec:	4b20      	ldr	r3, [pc, #128]	@ (8006970 <dwin_data+0x141c>)
 80068ee:	795b      	ldrb	r3, [r3, #5]
 80068f0:	2ba8      	cmp	r3, #168	@ 0xa8
 80068f2:	d16b      	bne.n	80069cc <dwin_data+0x1478>
				&& (DISPLAY_INPUT[8] == 0x01))) {
 80068f4:	4b1e      	ldr	r3, [pc, #120]	@ (8006970 <dwin_data+0x141c>)
 80068f6:	7a1b      	ldrb	r3, [r3, #8]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d167      	bne.n	80069cc <dwin_data+0x1478>
			P_peak_alarm_min_flag = 0;
 80068fc:	4b28      	ldr	r3, [pc, #160]	@ (80069a0 <dwin_data+0x144c>)
 80068fe:	2200      	movs	r2, #0
 8006900:	701a      	strb	r2, [r3, #0]
			MV_alarm_min_flag = 1;
 8006902:	4b28      	ldr	r3, [pc, #160]	@ (80069a4 <dwin_data+0x1450>)
 8006904:	2201      	movs	r2, #1
 8006906:	701a      	strb	r2, [r3, #0]
			RR_alarm_min_flag = 0;
 8006908:	4b27      	ldr	r3, [pc, #156]	@ (80069a8 <dwin_data+0x1454>)
 800690a:	2200      	movs	r2, #0
 800690c:	701a      	strb	r2, [r3, #0]
			peep_alarm_min_flag = 0;
 800690e:	4b27      	ldr	r3, [pc, #156]	@ (80069ac <dwin_data+0x1458>)
 8006910:	2200      	movs	r2, #0
 8006912:	701a      	strb	r2, [r3, #0]
			P_peak_alarm_max_flag = 0;
 8006914:	4b26      	ldr	r3, [pc, #152]	@ (80069b0 <dwin_data+0x145c>)
 8006916:	2200      	movs	r2, #0
 8006918:	701a      	strb	r2, [r3, #0]
			MV_alarm_max_flag = 0;
 800691a:	4b26      	ldr	r3, [pc, #152]	@ (80069b4 <dwin_data+0x1460>)
 800691c:	2200      	movs	r2, #0
 800691e:	701a      	strb	r2, [r3, #0]
			RR_alarm_max_flag = 0;
 8006920:	4b25      	ldr	r3, [pc, #148]	@ (80069b8 <dwin_data+0x1464>)
 8006922:	2200      	movs	r2, #0
 8006924:	701a      	strb	r2, [r3, #0]
			peep_alarm_max_flag = 0;
 8006926:	4b25      	ldr	r3, [pc, #148]	@ (80069bc <dwin_data+0x1468>)
 8006928:	2200      	movs	r2, #0
 800692a:	701a      	strb	r2, [r3, #0]
			O2_alarm_max_flag = 0;
 800692c:	4b24      	ldr	r3, [pc, #144]	@ (80069c0 <dwin_data+0x146c>)
 800692e:	2200      	movs	r2, #0
 8006930:	701a      	strb	r2, [r3, #0]
			O2_alarm_min_flag = 0;
 8006932:	4b24      	ldr	r3, [pc, #144]	@ (80069c4 <dwin_data+0x1470>)
 8006934:	2200      	movs	r2, #0
 8006936:	701a      	strb	r2, [r3, #0]
			display_data(0x10, 0x15, 0x00);
 8006938:	2200      	movs	r2, #0
 800693a:	2115      	movs	r1, #21
 800693c:	2010      	movs	r0, #16
 800693e:	f7fb fa55 	bl	8001dec <display_data>
			clear_add = 0x15;
 8006942:	4b21      	ldr	r3, [pc, #132]	@ (80069c8 <dwin_data+0x1474>)
 8006944:	2215      	movs	r2, #21
 8006946:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 8006948:	2300      	movs	r3, #0
 800694a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800694e:	e00a      	b.n	8006966 <dwin_data+0x1412>
				DISPLAY_INPUT[a] = 0x00;
 8006950:	4a07      	ldr	r2, [pc, #28]	@ (8006970 <dwin_data+0x141c>)
 8006952:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006956:	4413      	add	r3, r2
 8006958:	2200      	movs	r2, #0
 800695a:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 800695c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006960:	3301      	adds	r3, #1
 8006962:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006966:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800696a:	2b08      	cmp	r3, #8
 800696c:	ddf0      	ble.n	8006950 <dwin_data+0x13fc>
 800696e:	e1ea      	b.n	8006d46 <dwin_data+0x17f2>
 8006970:	20001938 	.word	0x20001938
 8006974:	200019cb 	.word	0x200019cb
 8006978:	200019cc 	.word	0x200019cc
 800697c:	200019cd 	.word	0x200019cd
 8006980:	200019c9 	.word	0x200019c9
 8006984:	200019ca 	.word	0x200019ca
 8006988:	200019ce 	.word	0x200019ce
 800698c:	200019cf 	.word	0x200019cf
 8006990:	200019d0 	.word	0x200019d0
 8006994:	200019d1 	.word	0x200019d1
 8006998:	200019d2 	.word	0x200019d2
 800699c:	20001953 	.word	0x20001953
 80069a0:	200019f7 	.word	0x200019f7
 80069a4:	200019f8 	.word	0x200019f8
 80069a8:	200019f9 	.word	0x200019f9
 80069ac:	200019fa 	.word	0x200019fa
 80069b0:	200019fc 	.word	0x200019fc
 80069b4:	200019fd 	.word	0x200019fd
 80069b8:	200019fe 	.word	0x200019fe
 80069bc:	200019ff 	.word	0x200019ff
 80069c0:	20001a00 	.word	0x20001a00
 80069c4:	200019fb 	.word	0x200019fb
 80069c8:	20001952 	.word	0x20001952
		}

		else if (((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA9)
 80069cc:	4bae      	ldr	r3, [pc, #696]	@ (8006c88 <dwin_data+0x1734>)
 80069ce:	791b      	ldrb	r3, [r3, #4]
 80069d0:	2b10      	cmp	r3, #16
 80069d2:	d141      	bne.n	8006a58 <dwin_data+0x1504>
 80069d4:	4bac      	ldr	r3, [pc, #688]	@ (8006c88 <dwin_data+0x1734>)
 80069d6:	795b      	ldrb	r3, [r3, #5]
 80069d8:	2ba9      	cmp	r3, #169	@ 0xa9
 80069da:	d13d      	bne.n	8006a58 <dwin_data+0x1504>
				&& (DISPLAY_INPUT[8] == 0x01))) {
 80069dc:	4baa      	ldr	r3, [pc, #680]	@ (8006c88 <dwin_data+0x1734>)
 80069de:	7a1b      	ldrb	r3, [r3, #8]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d139      	bne.n	8006a58 <dwin_data+0x1504>
			P_peak_alarm_min_flag = 0;
 80069e4:	4ba9      	ldr	r3, [pc, #676]	@ (8006c8c <dwin_data+0x1738>)
 80069e6:	2200      	movs	r2, #0
 80069e8:	701a      	strb	r2, [r3, #0]
			MV_alarm_min_flag = 0;
 80069ea:	4ba9      	ldr	r3, [pc, #676]	@ (8006c90 <dwin_data+0x173c>)
 80069ec:	2200      	movs	r2, #0
 80069ee:	701a      	strb	r2, [r3, #0]
			RR_alarm_min_flag = 0;
 80069f0:	4ba8      	ldr	r3, [pc, #672]	@ (8006c94 <dwin_data+0x1740>)
 80069f2:	2200      	movs	r2, #0
 80069f4:	701a      	strb	r2, [r3, #0]
			peep_alarm_min_flag = 0;
 80069f6:	4ba8      	ldr	r3, [pc, #672]	@ (8006c98 <dwin_data+0x1744>)
 80069f8:	2200      	movs	r2, #0
 80069fa:	701a      	strb	r2, [r3, #0]
			P_peak_alarm_max_flag = 0;
 80069fc:	4ba7      	ldr	r3, [pc, #668]	@ (8006c9c <dwin_data+0x1748>)
 80069fe:	2200      	movs	r2, #0
 8006a00:	701a      	strb	r2, [r3, #0]
			MV_alarm_max_flag = 0;
 8006a02:	4ba7      	ldr	r3, [pc, #668]	@ (8006ca0 <dwin_data+0x174c>)
 8006a04:	2200      	movs	r2, #0
 8006a06:	701a      	strb	r2, [r3, #0]
			RR_alarm_max_flag = 1;
 8006a08:	4ba6      	ldr	r3, [pc, #664]	@ (8006ca4 <dwin_data+0x1750>)
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	701a      	strb	r2, [r3, #0]
			peep_alarm_max_flag = 0;
 8006a0e:	4ba6      	ldr	r3, [pc, #664]	@ (8006ca8 <dwin_data+0x1754>)
 8006a10:	2200      	movs	r2, #0
 8006a12:	701a      	strb	r2, [r3, #0]
			O2_alarm_max_flag = 0;
 8006a14:	4ba5      	ldr	r3, [pc, #660]	@ (8006cac <dwin_data+0x1758>)
 8006a16:	2200      	movs	r2, #0
 8006a18:	701a      	strb	r2, [r3, #0]
			O2_alarm_min_flag = 0;
 8006a1a:	4ba5      	ldr	r3, [pc, #660]	@ (8006cb0 <dwin_data+0x175c>)
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	701a      	strb	r2, [r3, #0]
			display_data(0x10, 0x16, 0x00);
 8006a20:	2200      	movs	r2, #0
 8006a22:	2116      	movs	r1, #22
 8006a24:	2010      	movs	r0, #16
 8006a26:	f7fb f9e1 	bl	8001dec <display_data>
			clear_add = 0x16;
 8006a2a:	4ba2      	ldr	r3, [pc, #648]	@ (8006cb4 <dwin_data+0x1760>)
 8006a2c:	2216      	movs	r2, #22
 8006a2e:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 8006a30:	2300      	movs	r3, #0
 8006a32:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006a36:	e00a      	b.n	8006a4e <dwin_data+0x14fa>
				DISPLAY_INPUT[a] = 0x00;
 8006a38:	4a93      	ldr	r2, [pc, #588]	@ (8006c88 <dwin_data+0x1734>)
 8006a3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a3e:	4413      	add	r3, r2
 8006a40:	2200      	movs	r2, #0
 8006a42:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 8006a44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a48:	3301      	adds	r3, #1
 8006a4a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006a4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a52:	2b08      	cmp	r3, #8
 8006a54:	ddf0      	ble.n	8006a38 <dwin_data+0x14e4>
 8006a56:	e176      	b.n	8006d46 <dwin_data+0x17f2>
		}

		else if (((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xAA)
 8006a58:	4b8b      	ldr	r3, [pc, #556]	@ (8006c88 <dwin_data+0x1734>)
 8006a5a:	791b      	ldrb	r3, [r3, #4]
 8006a5c:	2b10      	cmp	r3, #16
 8006a5e:	d141      	bne.n	8006ae4 <dwin_data+0x1590>
 8006a60:	4b89      	ldr	r3, [pc, #548]	@ (8006c88 <dwin_data+0x1734>)
 8006a62:	795b      	ldrb	r3, [r3, #5]
 8006a64:	2baa      	cmp	r3, #170	@ 0xaa
 8006a66:	d13d      	bne.n	8006ae4 <dwin_data+0x1590>
				&& (DISPLAY_INPUT[8] == 0x01))) {
 8006a68:	4b87      	ldr	r3, [pc, #540]	@ (8006c88 <dwin_data+0x1734>)
 8006a6a:	7a1b      	ldrb	r3, [r3, #8]
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d139      	bne.n	8006ae4 <dwin_data+0x1590>
			P_peak_alarm_min_flag = 0;
 8006a70:	4b86      	ldr	r3, [pc, #536]	@ (8006c8c <dwin_data+0x1738>)
 8006a72:	2200      	movs	r2, #0
 8006a74:	701a      	strb	r2, [r3, #0]
			MV_alarm_min_flag = 0;
 8006a76:	4b86      	ldr	r3, [pc, #536]	@ (8006c90 <dwin_data+0x173c>)
 8006a78:	2200      	movs	r2, #0
 8006a7a:	701a      	strb	r2, [r3, #0]
			RR_alarm_min_flag = 1;
 8006a7c:	4b85      	ldr	r3, [pc, #532]	@ (8006c94 <dwin_data+0x1740>)
 8006a7e:	2201      	movs	r2, #1
 8006a80:	701a      	strb	r2, [r3, #0]
			peep_alarm_min_flag = 0;
 8006a82:	4b85      	ldr	r3, [pc, #532]	@ (8006c98 <dwin_data+0x1744>)
 8006a84:	2200      	movs	r2, #0
 8006a86:	701a      	strb	r2, [r3, #0]
			P_peak_alarm_max_flag = 0;
 8006a88:	4b84      	ldr	r3, [pc, #528]	@ (8006c9c <dwin_data+0x1748>)
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	701a      	strb	r2, [r3, #0]
			MV_alarm_max_flag = 0;
 8006a8e:	4b84      	ldr	r3, [pc, #528]	@ (8006ca0 <dwin_data+0x174c>)
 8006a90:	2200      	movs	r2, #0
 8006a92:	701a      	strb	r2, [r3, #0]
			RR_alarm_max_flag = 0;
 8006a94:	4b83      	ldr	r3, [pc, #524]	@ (8006ca4 <dwin_data+0x1750>)
 8006a96:	2200      	movs	r2, #0
 8006a98:	701a      	strb	r2, [r3, #0]
			peep_alarm_max_flag = 0;
 8006a9a:	4b83      	ldr	r3, [pc, #524]	@ (8006ca8 <dwin_data+0x1754>)
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	701a      	strb	r2, [r3, #0]
			O2_alarm_max_flag = 0;
 8006aa0:	4b82      	ldr	r3, [pc, #520]	@ (8006cac <dwin_data+0x1758>)
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	701a      	strb	r2, [r3, #0]
			O2_alarm_min_flag = 0;
 8006aa6:	4b82      	ldr	r3, [pc, #520]	@ (8006cb0 <dwin_data+0x175c>)
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	701a      	strb	r2, [r3, #0]
			display_data(0x10, 0x17, 0x00);
 8006aac:	2200      	movs	r2, #0
 8006aae:	2117      	movs	r1, #23
 8006ab0:	2010      	movs	r0, #16
 8006ab2:	f7fb f99b 	bl	8001dec <display_data>
			clear_add = 0x17;
 8006ab6:	4b7f      	ldr	r3, [pc, #508]	@ (8006cb4 <dwin_data+0x1760>)
 8006ab8:	2217      	movs	r2, #23
 8006aba:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 8006abc:	2300      	movs	r3, #0
 8006abe:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006ac2:	e00a      	b.n	8006ada <dwin_data+0x1586>
				DISPLAY_INPUT[a] = 0x00;
 8006ac4:	4a70      	ldr	r2, [pc, #448]	@ (8006c88 <dwin_data+0x1734>)
 8006ac6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006aca:	4413      	add	r3, r2
 8006acc:	2200      	movs	r2, #0
 8006ace:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 8006ad0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006ada:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006ade:	2b08      	cmp	r3, #8
 8006ae0:	ddf0      	ble.n	8006ac4 <dwin_data+0x1570>
 8006ae2:	e130      	b.n	8006d46 <dwin_data+0x17f2>
		}

		else if (((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xAB)
 8006ae4:	4b68      	ldr	r3, [pc, #416]	@ (8006c88 <dwin_data+0x1734>)
 8006ae6:	791b      	ldrb	r3, [r3, #4]
 8006ae8:	2b10      	cmp	r3, #16
 8006aea:	d141      	bne.n	8006b70 <dwin_data+0x161c>
 8006aec:	4b66      	ldr	r3, [pc, #408]	@ (8006c88 <dwin_data+0x1734>)
 8006aee:	795b      	ldrb	r3, [r3, #5]
 8006af0:	2bab      	cmp	r3, #171	@ 0xab
 8006af2:	d13d      	bne.n	8006b70 <dwin_data+0x161c>
				&& (DISPLAY_INPUT[8] == 0x01))) {
 8006af4:	4b64      	ldr	r3, [pc, #400]	@ (8006c88 <dwin_data+0x1734>)
 8006af6:	7a1b      	ldrb	r3, [r3, #8]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d139      	bne.n	8006b70 <dwin_data+0x161c>
			P_peak_alarm_min_flag = 0;
 8006afc:	4b63      	ldr	r3, [pc, #396]	@ (8006c8c <dwin_data+0x1738>)
 8006afe:	2200      	movs	r2, #0
 8006b00:	701a      	strb	r2, [r3, #0]
			MV_alarm_min_flag = 0;
 8006b02:	4b63      	ldr	r3, [pc, #396]	@ (8006c90 <dwin_data+0x173c>)
 8006b04:	2200      	movs	r2, #0
 8006b06:	701a      	strb	r2, [r3, #0]
			RR_alarm_min_flag = 0;
 8006b08:	4b62      	ldr	r3, [pc, #392]	@ (8006c94 <dwin_data+0x1740>)
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	701a      	strb	r2, [r3, #0]
			peep_alarm_min_flag = 0;
 8006b0e:	4b62      	ldr	r3, [pc, #392]	@ (8006c98 <dwin_data+0x1744>)
 8006b10:	2200      	movs	r2, #0
 8006b12:	701a      	strb	r2, [r3, #0]
			P_peak_alarm_max_flag = 0;
 8006b14:	4b61      	ldr	r3, [pc, #388]	@ (8006c9c <dwin_data+0x1748>)
 8006b16:	2200      	movs	r2, #0
 8006b18:	701a      	strb	r2, [r3, #0]
			MV_alarm_max_flag = 0;
 8006b1a:	4b61      	ldr	r3, [pc, #388]	@ (8006ca0 <dwin_data+0x174c>)
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	701a      	strb	r2, [r3, #0]
			RR_alarm_max_flag = 0;
 8006b20:	4b60      	ldr	r3, [pc, #384]	@ (8006ca4 <dwin_data+0x1750>)
 8006b22:	2200      	movs	r2, #0
 8006b24:	701a      	strb	r2, [r3, #0]
			peep_alarm_max_flag = 1;
 8006b26:	4b60      	ldr	r3, [pc, #384]	@ (8006ca8 <dwin_data+0x1754>)
 8006b28:	2201      	movs	r2, #1
 8006b2a:	701a      	strb	r2, [r3, #0]
			O2_alarm_max_flag = 0;
 8006b2c:	4b5f      	ldr	r3, [pc, #380]	@ (8006cac <dwin_data+0x1758>)
 8006b2e:	2200      	movs	r2, #0
 8006b30:	701a      	strb	r2, [r3, #0]
			O2_alarm_min_flag = 0;
 8006b32:	4b5f      	ldr	r3, [pc, #380]	@ (8006cb0 <dwin_data+0x175c>)
 8006b34:	2200      	movs	r2, #0
 8006b36:	701a      	strb	r2, [r3, #0]
			display_data(0x10, 0x18, 0x00);
 8006b38:	2200      	movs	r2, #0
 8006b3a:	2118      	movs	r1, #24
 8006b3c:	2010      	movs	r0, #16
 8006b3e:	f7fb f955 	bl	8001dec <display_data>
			clear_add = 0x18;
 8006b42:	4b5c      	ldr	r3, [pc, #368]	@ (8006cb4 <dwin_data+0x1760>)
 8006b44:	2218      	movs	r2, #24
 8006b46:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 8006b48:	2300      	movs	r3, #0
 8006b4a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006b4e:	e00a      	b.n	8006b66 <dwin_data+0x1612>
				DISPLAY_INPUT[a] = 0x00;
 8006b50:	4a4d      	ldr	r2, [pc, #308]	@ (8006c88 <dwin_data+0x1734>)
 8006b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b56:	4413      	add	r3, r2
 8006b58:	2200      	movs	r2, #0
 8006b5a:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 8006b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b60:	3301      	adds	r3, #1
 8006b62:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b6a:	2b08      	cmp	r3, #8
 8006b6c:	ddf0      	ble.n	8006b50 <dwin_data+0x15fc>
 8006b6e:	e0ea      	b.n	8006d46 <dwin_data+0x17f2>
		}

		else if (((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xAC)
 8006b70:	4b45      	ldr	r3, [pc, #276]	@ (8006c88 <dwin_data+0x1734>)
 8006b72:	791b      	ldrb	r3, [r3, #4]
 8006b74:	2b10      	cmp	r3, #16
 8006b76:	d141      	bne.n	8006bfc <dwin_data+0x16a8>
 8006b78:	4b43      	ldr	r3, [pc, #268]	@ (8006c88 <dwin_data+0x1734>)
 8006b7a:	795b      	ldrb	r3, [r3, #5]
 8006b7c:	2bac      	cmp	r3, #172	@ 0xac
 8006b7e:	d13d      	bne.n	8006bfc <dwin_data+0x16a8>
				&& (DISPLAY_INPUT[8] == 0x01))) {
 8006b80:	4b41      	ldr	r3, [pc, #260]	@ (8006c88 <dwin_data+0x1734>)
 8006b82:	7a1b      	ldrb	r3, [r3, #8]
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d139      	bne.n	8006bfc <dwin_data+0x16a8>
			P_peak_alarm_min_flag = 0;
 8006b88:	4b40      	ldr	r3, [pc, #256]	@ (8006c8c <dwin_data+0x1738>)
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	701a      	strb	r2, [r3, #0]
			MV_alarm_min_flag = 0;
 8006b8e:	4b40      	ldr	r3, [pc, #256]	@ (8006c90 <dwin_data+0x173c>)
 8006b90:	2200      	movs	r2, #0
 8006b92:	701a      	strb	r2, [r3, #0]
			RR_alarm_min_flag = 0;
 8006b94:	4b3f      	ldr	r3, [pc, #252]	@ (8006c94 <dwin_data+0x1740>)
 8006b96:	2200      	movs	r2, #0
 8006b98:	701a      	strb	r2, [r3, #0]
			peep_alarm_min_flag = 1;
 8006b9a:	4b3f      	ldr	r3, [pc, #252]	@ (8006c98 <dwin_data+0x1744>)
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	701a      	strb	r2, [r3, #0]
			P_peak_alarm_max_flag = 0;
 8006ba0:	4b3e      	ldr	r3, [pc, #248]	@ (8006c9c <dwin_data+0x1748>)
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	701a      	strb	r2, [r3, #0]
			MV_alarm_max_flag = 0;
 8006ba6:	4b3e      	ldr	r3, [pc, #248]	@ (8006ca0 <dwin_data+0x174c>)
 8006ba8:	2200      	movs	r2, #0
 8006baa:	701a      	strb	r2, [r3, #0]
			RR_alarm_max_flag = 0;
 8006bac:	4b3d      	ldr	r3, [pc, #244]	@ (8006ca4 <dwin_data+0x1750>)
 8006bae:	2200      	movs	r2, #0
 8006bb0:	701a      	strb	r2, [r3, #0]
			peep_alarm_max_flag = 0;
 8006bb2:	4b3d      	ldr	r3, [pc, #244]	@ (8006ca8 <dwin_data+0x1754>)
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	701a      	strb	r2, [r3, #0]
			O2_alarm_max_flag = 0;
 8006bb8:	4b3c      	ldr	r3, [pc, #240]	@ (8006cac <dwin_data+0x1758>)
 8006bba:	2200      	movs	r2, #0
 8006bbc:	701a      	strb	r2, [r3, #0]
			O2_alarm_min_flag = 0;
 8006bbe:	4b3c      	ldr	r3, [pc, #240]	@ (8006cb0 <dwin_data+0x175c>)
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	701a      	strb	r2, [r3, #0]
			display_data(0x10, 0x19, 0x00);
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	2119      	movs	r1, #25
 8006bc8:	2010      	movs	r0, #16
 8006bca:	f7fb f90f 	bl	8001dec <display_data>
			clear_add = 0x19;
 8006bce:	4b39      	ldr	r3, [pc, #228]	@ (8006cb4 <dwin_data+0x1760>)
 8006bd0:	2219      	movs	r2, #25
 8006bd2:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006bda:	e00a      	b.n	8006bf2 <dwin_data+0x169e>
				DISPLAY_INPUT[a] = 0x00;
 8006bdc:	4a2a      	ldr	r2, [pc, #168]	@ (8006c88 <dwin_data+0x1734>)
 8006bde:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006be2:	4413      	add	r3, r2
 8006be4:	2200      	movs	r2, #0
 8006be6:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 8006be8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006bec:	3301      	adds	r3, #1
 8006bee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006bf2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006bf6:	2b08      	cmp	r3, #8
 8006bf8:	ddf0      	ble.n	8006bdc <dwin_data+0x1688>
 8006bfa:	e0a4      	b.n	8006d46 <dwin_data+0x17f2>
		}
		else if (((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xAD)
 8006bfc:	4b22      	ldr	r3, [pc, #136]	@ (8006c88 <dwin_data+0x1734>)
 8006bfe:	791b      	ldrb	r3, [r3, #4]
 8006c00:	2b10      	cmp	r3, #16
 8006c02:	d15b      	bne.n	8006cbc <dwin_data+0x1768>
 8006c04:	4b20      	ldr	r3, [pc, #128]	@ (8006c88 <dwin_data+0x1734>)
 8006c06:	795b      	ldrb	r3, [r3, #5]
 8006c08:	2bad      	cmp	r3, #173	@ 0xad
 8006c0a:	d157      	bne.n	8006cbc <dwin_data+0x1768>
				&& (DISPLAY_INPUT[8] == 0x01))) {
 8006c0c:	4b1e      	ldr	r3, [pc, #120]	@ (8006c88 <dwin_data+0x1734>)
 8006c0e:	7a1b      	ldrb	r3, [r3, #8]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d153      	bne.n	8006cbc <dwin_data+0x1768>
			P_peak_alarm_min_flag = 0;
 8006c14:	4b1d      	ldr	r3, [pc, #116]	@ (8006c8c <dwin_data+0x1738>)
 8006c16:	2200      	movs	r2, #0
 8006c18:	701a      	strb	r2, [r3, #0]
			MV_alarm_min_flag = 0;
 8006c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8006c90 <dwin_data+0x173c>)
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	701a      	strb	r2, [r3, #0]
			RR_alarm_min_flag = 0;
 8006c20:	4b1c      	ldr	r3, [pc, #112]	@ (8006c94 <dwin_data+0x1740>)
 8006c22:	2200      	movs	r2, #0
 8006c24:	701a      	strb	r2, [r3, #0]
			peep_alarm_min_flag = 0;
 8006c26:	4b1c      	ldr	r3, [pc, #112]	@ (8006c98 <dwin_data+0x1744>)
 8006c28:	2200      	movs	r2, #0
 8006c2a:	701a      	strb	r2, [r3, #0]
			P_peak_alarm_max_flag = 0;
 8006c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8006c9c <dwin_data+0x1748>)
 8006c2e:	2200      	movs	r2, #0
 8006c30:	701a      	strb	r2, [r3, #0]
			MV_alarm_max_flag = 0;
 8006c32:	4b1b      	ldr	r3, [pc, #108]	@ (8006ca0 <dwin_data+0x174c>)
 8006c34:	2200      	movs	r2, #0
 8006c36:	701a      	strb	r2, [r3, #0]
			RR_alarm_max_flag = 0;
 8006c38:	4b1a      	ldr	r3, [pc, #104]	@ (8006ca4 <dwin_data+0x1750>)
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	701a      	strb	r2, [r3, #0]
			peep_alarm_max_flag = 0;
 8006c3e:	4b1a      	ldr	r3, [pc, #104]	@ (8006ca8 <dwin_data+0x1754>)
 8006c40:	2200      	movs	r2, #0
 8006c42:	701a      	strb	r2, [r3, #0]
			O2_alarm_max_flag = 1;
 8006c44:	4b19      	ldr	r3, [pc, #100]	@ (8006cac <dwin_data+0x1758>)
 8006c46:	2201      	movs	r2, #1
 8006c48:	701a      	strb	r2, [r3, #0]
			O2_alarm_min_flag = 0;
 8006c4a:	4b19      	ldr	r3, [pc, #100]	@ (8006cb0 <dwin_data+0x175c>)
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	701a      	strb	r2, [r3, #0]
			display_data(0x10, 0x20, 0x00);
 8006c50:	2200      	movs	r2, #0
 8006c52:	2120      	movs	r1, #32
 8006c54:	2010      	movs	r0, #16
 8006c56:	f7fb f8c9 	bl	8001dec <display_data>
			clears_add = 0x20;
 8006c5a:	4b17      	ldr	r3, [pc, #92]	@ (8006cb8 <dwin_data+0x1764>)
 8006c5c:	2220      	movs	r2, #32
 8006c5e:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 8006c60:	2300      	movs	r3, #0
 8006c62:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006c66:	e00a      	b.n	8006c7e <dwin_data+0x172a>
				DISPLAY_INPUT[a] = 0x00;
 8006c68:	4a07      	ldr	r2, [pc, #28]	@ (8006c88 <dwin_data+0x1734>)
 8006c6a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006c6e:	4413      	add	r3, r2
 8006c70:	2200      	movs	r2, #0
 8006c72:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 8006c74:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006c78:	3301      	adds	r3, #1
 8006c7a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006c7e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006c82:	2b08      	cmp	r3, #8
 8006c84:	ddf0      	ble.n	8006c68 <dwin_data+0x1714>
 8006c86:	e05e      	b.n	8006d46 <dwin_data+0x17f2>
 8006c88:	20001938 	.word	0x20001938
 8006c8c:	200019f7 	.word	0x200019f7
 8006c90:	200019f8 	.word	0x200019f8
 8006c94:	200019f9 	.word	0x200019f9
 8006c98:	200019fa 	.word	0x200019fa
 8006c9c:	200019fc 	.word	0x200019fc
 8006ca0:	200019fd 	.word	0x200019fd
 8006ca4:	200019fe 	.word	0x200019fe
 8006ca8:	200019ff 	.word	0x200019ff
 8006cac:	20001a00 	.word	0x20001a00
 8006cb0:	200019fb 	.word	0x200019fb
 8006cb4:	20001952 	.word	0x20001952
 8006cb8:	20001953 	.word	0x20001953
		}

		else if (((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xAE)
 8006cbc:	4ba6      	ldr	r3, [pc, #664]	@ (8006f58 <dwin_data+0x1a04>)
 8006cbe:	791b      	ldrb	r3, [r3, #4]
 8006cc0:	2b10      	cmp	r3, #16
 8006cc2:	d140      	bne.n	8006d46 <dwin_data+0x17f2>
 8006cc4:	4ba4      	ldr	r3, [pc, #656]	@ (8006f58 <dwin_data+0x1a04>)
 8006cc6:	795b      	ldrb	r3, [r3, #5]
 8006cc8:	2bae      	cmp	r3, #174	@ 0xae
 8006cca:	d13c      	bne.n	8006d46 <dwin_data+0x17f2>
				&& (DISPLAY_INPUT[8] == 0x01))) {
 8006ccc:	4ba2      	ldr	r3, [pc, #648]	@ (8006f58 <dwin_data+0x1a04>)
 8006cce:	7a1b      	ldrb	r3, [r3, #8]
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d138      	bne.n	8006d46 <dwin_data+0x17f2>
			P_peak_alarm_min_flag = 0;
 8006cd4:	4ba1      	ldr	r3, [pc, #644]	@ (8006f5c <dwin_data+0x1a08>)
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	701a      	strb	r2, [r3, #0]
			MV_alarm_min_flag = 0;
 8006cda:	4ba1      	ldr	r3, [pc, #644]	@ (8006f60 <dwin_data+0x1a0c>)
 8006cdc:	2200      	movs	r2, #0
 8006cde:	701a      	strb	r2, [r3, #0]
			RR_alarm_min_flag = 0;
 8006ce0:	4ba0      	ldr	r3, [pc, #640]	@ (8006f64 <dwin_data+0x1a10>)
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	701a      	strb	r2, [r3, #0]
			peep_alarm_min_flag = 0;
 8006ce6:	4ba0      	ldr	r3, [pc, #640]	@ (8006f68 <dwin_data+0x1a14>)
 8006ce8:	2200      	movs	r2, #0
 8006cea:	701a      	strb	r2, [r3, #0]
			P_peak_alarm_max_flag = 0;
 8006cec:	4b9f      	ldr	r3, [pc, #636]	@ (8006f6c <dwin_data+0x1a18>)
 8006cee:	2200      	movs	r2, #0
 8006cf0:	701a      	strb	r2, [r3, #0]
			MV_alarm_max_flag = 0;
 8006cf2:	4b9f      	ldr	r3, [pc, #636]	@ (8006f70 <dwin_data+0x1a1c>)
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	701a      	strb	r2, [r3, #0]
			RR_alarm_max_flag = 0;
 8006cf8:	4b9e      	ldr	r3, [pc, #632]	@ (8006f74 <dwin_data+0x1a20>)
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	701a      	strb	r2, [r3, #0]
			peep_alarm_max_flag = 0;
 8006cfe:	4b9e      	ldr	r3, [pc, #632]	@ (8006f78 <dwin_data+0x1a24>)
 8006d00:	2200      	movs	r2, #0
 8006d02:	701a      	strb	r2, [r3, #0]
			O2_alarm_max_flag = 0;
 8006d04:	4b9d      	ldr	r3, [pc, #628]	@ (8006f7c <dwin_data+0x1a28>)
 8006d06:	2200      	movs	r2, #0
 8006d08:	701a      	strb	r2, [r3, #0]
			O2_alarm_min_flag = 1;
 8006d0a:	4b9d      	ldr	r3, [pc, #628]	@ (8006f80 <dwin_data+0x1a2c>)
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	701a      	strb	r2, [r3, #0]
			display_data(0x10, 0x21, 0x00);
 8006d10:	2200      	movs	r2, #0
 8006d12:	2121      	movs	r1, #33	@ 0x21
 8006d14:	2010      	movs	r0, #16
 8006d16:	f7fb f869 	bl	8001dec <display_data>
			clears_add = 0x21;
 8006d1a:	4b9a      	ldr	r3, [pc, #616]	@ (8006f84 <dwin_data+0x1a30>)
 8006d1c:	2221      	movs	r2, #33	@ 0x21
 8006d1e:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 8006d20:	2300      	movs	r3, #0
 8006d22:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006d26:	e00a      	b.n	8006d3e <dwin_data+0x17ea>
				DISPLAY_INPUT[a] = 0x00;
 8006d28:	4a8b      	ldr	r2, [pc, #556]	@ (8006f58 <dwin_data+0x1a04>)
 8006d2a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006d2e:	4413      	add	r3, r2
 8006d30:	2200      	movs	r2, #0
 8006d32:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 9; a++)
 8006d34:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006d38:	3301      	adds	r3, #1
 8006d3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006d3e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006d42:	2b08      	cmp	r3, #8
 8006d44:	ddf0      	ble.n	8006d28 <dwin_data+0x17d4>
		}


		////////////////////This part to increase and dicres all the values////////////////////////////////////
		if (i_flag == 1) {
 8006d46:	4b90      	ldr	r3, [pc, #576]	@ (8006f88 <dwin_data+0x1a34>)
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d053      	beq.n	8006df6 <dwin_data+0x18a2>
			if (((DISPLAY_INPUT[5] == 0xA2) && (DISPLAY_INPUT[8] == 0x01))) {
 8006d4e:	4b82      	ldr	r3, [pc, #520]	@ (8006f58 <dwin_data+0x1a04>)
 8006d50:	795b      	ldrb	r3, [r3, #5]
 8006d52:	2ba2      	cmp	r3, #162	@ 0xa2
 8006d54:	d124      	bne.n	8006da0 <dwin_data+0x184c>
 8006d56:	4b80      	ldr	r3, [pc, #512]	@ (8006f58 <dwin_data+0x1a04>)
 8006d58:	7a1b      	ldrb	r3, [r3, #8]
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d120      	bne.n	8006da0 <dwin_data+0x184c>
				insP_value += 0x01;
 8006d5e:	4b8b      	ldr	r3, [pc, #556]	@ (8006f8c <dwin_data+0x1a38>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	3301      	adds	r3, #1
 8006d64:	4a89      	ldr	r2, [pc, #548]	@ (8006f8c <dwin_data+0x1a38>)
 8006d66:	6013      	str	r3, [r2, #0]
				intiger_val_send(0x24, insP_value);
 8006d68:	4b88      	ldr	r3, [pc, #544]	@ (8006f8c <dwin_data+0x1a38>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	4619      	mov	r1, r3
 8006d70:	2024      	movs	r0, #36	@ 0x24
 8006d72:	f7fb fd2f 	bl	80027d4 <intiger_val_send>
				for (int a = 0; a < 9; a++)
 8006d76:	2300      	movs	r3, #0
 8006d78:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006d7c:	e00a      	b.n	8006d94 <dwin_data+0x1840>
					DISPLAY_INPUT[a] = 0x00;
 8006d7e:	4a76      	ldr	r2, [pc, #472]	@ (8006f58 <dwin_data+0x1a04>)
 8006d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d84:	4413      	add	r3, r2
 8006d86:	2200      	movs	r2, #0
 8006d88:	701a      	strb	r2, [r3, #0]
				for (int a = 0; a < 9; a++)
 8006d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d8e:	3301      	adds	r3, #1
 8006d90:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d98:	2b08      	cmp	r3, #8
 8006d9a:	ddf0      	ble.n	8006d7e <dwin_data+0x182a>
 8006d9c:	f001 b8f7 	b.w	8007f8e <dwin_data+0x2a3a>
			} else if (((DISPLAY_INPUT[5] == 0xA3)
 8006da0:	4b6d      	ldr	r3, [pc, #436]	@ (8006f58 <dwin_data+0x1a04>)
 8006da2:	795b      	ldrb	r3, [r3, #5]
 8006da4:	2ba3      	cmp	r3, #163	@ 0xa3
 8006da6:	f041 80f2 	bne.w	8007f8e <dwin_data+0x2a3a>
					&& (DISPLAY_INPUT[8] == 0x01))) {
 8006daa:	4b6b      	ldr	r3, [pc, #428]	@ (8006f58 <dwin_data+0x1a04>)
 8006dac:	7a1b      	ldrb	r3, [r3, #8]
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	f041 80ed 	bne.w	8007f8e <dwin_data+0x2a3a>
				insP_value -= 0x01;
 8006db4:	4b75      	ldr	r3, [pc, #468]	@ (8006f8c <dwin_data+0x1a38>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	3b01      	subs	r3, #1
 8006dba:	4a74      	ldr	r2, [pc, #464]	@ (8006f8c <dwin_data+0x1a38>)
 8006dbc:	6013      	str	r3, [r2, #0]
				intiger_val_send(0x24, insP_value);
 8006dbe:	4b73      	ldr	r3, [pc, #460]	@ (8006f8c <dwin_data+0x1a38>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	2024      	movs	r0, #36	@ 0x24
 8006dc8:	f7fb fd04 	bl	80027d4 <intiger_val_send>
				for (int a = 0; a < 9; a++)
 8006dcc:	2300      	movs	r3, #0
 8006dce:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006dd2:	e00a      	b.n	8006dea <dwin_data+0x1896>
					DISPLAY_INPUT[a] = 0x00;
 8006dd4:	4a60      	ldr	r2, [pc, #384]	@ (8006f58 <dwin_data+0x1a04>)
 8006dd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006dda:	4413      	add	r3, r2
 8006ddc:	2200      	movs	r2, #0
 8006dde:	701a      	strb	r2, [r3, #0]
				for (int a = 0; a < 9; a++)
 8006de0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006de4:	3301      	adds	r3, #1
 8006de6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006dee:	2b08      	cmp	r3, #8
 8006df0:	ddf0      	ble.n	8006dd4 <dwin_data+0x1880>
 8006df2:	f001 b8cc 	b.w	8007f8e <dwin_data+0x2a3a>
			}
		} else if (e_flag == 1) {
 8006df6:	4b66      	ldr	r3, [pc, #408]	@ (8006f90 <dwin_data+0x1a3c>)
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d053      	beq.n	8006ea6 <dwin_data+0x1952>
			if (((DISPLAY_INPUT[5] == 0xA2) && (DISPLAY_INPUT[8] == 0x01))) {
 8006dfe:	4b56      	ldr	r3, [pc, #344]	@ (8006f58 <dwin_data+0x1a04>)
 8006e00:	795b      	ldrb	r3, [r3, #5]
 8006e02:	2ba2      	cmp	r3, #162	@ 0xa2
 8006e04:	d124      	bne.n	8006e50 <dwin_data+0x18fc>
 8006e06:	4b54      	ldr	r3, [pc, #336]	@ (8006f58 <dwin_data+0x1a04>)
 8006e08:	7a1b      	ldrb	r3, [r3, #8]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d120      	bne.n	8006e50 <dwin_data+0x18fc>
				exp_value += 0x01;
 8006e0e:	4b61      	ldr	r3, [pc, #388]	@ (8006f94 <dwin_data+0x1a40>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	3301      	adds	r3, #1
 8006e14:	4a5f      	ldr	r2, [pc, #380]	@ (8006f94 <dwin_data+0x1a40>)
 8006e16:	6013      	str	r3, [r2, #0]
				intiger_val_send(0x25, exp_value);
 8006e18:	4b5e      	ldr	r3, [pc, #376]	@ (8006f94 <dwin_data+0x1a40>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	4619      	mov	r1, r3
 8006e20:	2025      	movs	r0, #37	@ 0x25
 8006e22:	f7fb fcd7 	bl	80027d4 <intiger_val_send>
				for (int a = 0; a < 9; a++)
 8006e26:	2300      	movs	r3, #0
 8006e28:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006e2c:	e00a      	b.n	8006e44 <dwin_data+0x18f0>
					DISPLAY_INPUT[a] = 0x00;
 8006e2e:	4a4a      	ldr	r2, [pc, #296]	@ (8006f58 <dwin_data+0x1a04>)
 8006e30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e34:	4413      	add	r3, r2
 8006e36:	2200      	movs	r2, #0
 8006e38:	701a      	strb	r2, [r3, #0]
				for (int a = 0; a < 9; a++)
 8006e3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e3e:	3301      	adds	r3, #1
 8006e40:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006e44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e48:	2b08      	cmp	r3, #8
 8006e4a:	ddf0      	ble.n	8006e2e <dwin_data+0x18da>
 8006e4c:	f001 b89f 	b.w	8007f8e <dwin_data+0x2a3a>
			} else if (((DISPLAY_INPUT[5] == 0xA3)
 8006e50:	4b41      	ldr	r3, [pc, #260]	@ (8006f58 <dwin_data+0x1a04>)
 8006e52:	795b      	ldrb	r3, [r3, #5]
 8006e54:	2ba3      	cmp	r3, #163	@ 0xa3
 8006e56:	f041 809a 	bne.w	8007f8e <dwin_data+0x2a3a>
					&& (DISPLAY_INPUT[8] == 0x01))) {
 8006e5a:	4b3f      	ldr	r3, [pc, #252]	@ (8006f58 <dwin_data+0x1a04>)
 8006e5c:	7a1b      	ldrb	r3, [r3, #8]
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	f041 8095 	bne.w	8007f8e <dwin_data+0x2a3a>
				exp_value -= 0x01;
 8006e64:	4b4b      	ldr	r3, [pc, #300]	@ (8006f94 <dwin_data+0x1a40>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	3b01      	subs	r3, #1
 8006e6a:	4a4a      	ldr	r2, [pc, #296]	@ (8006f94 <dwin_data+0x1a40>)
 8006e6c:	6013      	str	r3, [r2, #0]
				intiger_val_send(0x25, exp_value);
 8006e6e:	4b49      	ldr	r3, [pc, #292]	@ (8006f94 <dwin_data+0x1a40>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	4619      	mov	r1, r3
 8006e76:	2025      	movs	r0, #37	@ 0x25
 8006e78:	f7fb fcac 	bl	80027d4 <intiger_val_send>
				for (int a = 0; a < 9; a++)
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006e82:	e00a      	b.n	8006e9a <dwin_data+0x1946>
					DISPLAY_INPUT[a] = 0x00;
 8006e84:	4a34      	ldr	r2, [pc, #208]	@ (8006f58 <dwin_data+0x1a04>)
 8006e86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e8a:	4413      	add	r3, r2
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	701a      	strb	r2, [r3, #0]
				for (int a = 0; a < 9; a++)
 8006e90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e94:	3301      	adds	r3, #1
 8006e96:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006e9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e9e:	2b08      	cmp	r3, #8
 8006ea0:	ddf0      	ble.n	8006e84 <dwin_data+0x1930>
 8006ea2:	f001 b874 	b.w	8007f8e <dwin_data+0x2a3a>
			}
		} else if (vt_flag == 1) {
 8006ea6:	4b3c      	ldr	r3, [pc, #240]	@ (8006f98 <dwin_data+0x1a44>)
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00e      	beq.n	8006ecc <dwin_data+0x1978>
			if (((DISPLAY_INPUT[5] == 0xA2) && (DISPLAY_INPUT[8] == 0x01))) {
 8006eae:	4b2a      	ldr	r3, [pc, #168]	@ (8006f58 <dwin_data+0x1a04>)
 8006eb0:	795b      	ldrb	r3, [r3, #5]
 8006eb2:	2ba2      	cmp	r3, #162	@ 0xa2
 8006eb4:	f041 806b 	bne.w	8007f8e <dwin_data+0x2a3a>
 8006eb8:	4b27      	ldr	r3, [pc, #156]	@ (8006f58 <dwin_data+0x1a04>)
 8006eba:	7a1b      	ldrb	r3, [r3, #8]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	f001 8066 	beq.w	8007f8e <dwin_data+0x2a3a>
				//					vt_value += 10;
				//					intiger_val_vt_send(0x01, vt_value);
				//					for (int a = 0; a < 9; a++)
				//						DISPLAY_INPUT[a] = 0x00;
				//				}
			} else if (((DISPLAY_INPUT[5] == 0xA3) && (DISPLAY_INPUT[8] == 0x01))) {
 8006ec2:	4b25      	ldr	r3, [pc, #148]	@ (8006f58 <dwin_data+0x1a04>)
 8006ec4:	795b      	ldrb	r3, [r3, #5]
 8006ec6:	2ba3      	cmp	r3, #163	@ 0xa3
 8006ec8:	f001 b861 	b.w	8007f8e <dwin_data+0x2a3a>
				//					intiger_val_vt_send(0x01, vt_value);
				//					for (int a = 0; a < 9; a++)
				//						DISPLAY_INPUT[a] = 0x00;
				//				}
			}
		} else if (plt_flag == 1) {
 8006ecc:	4b33      	ldr	r3, [pc, #204]	@ (8006f9c <dwin_data+0x1a48>)
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f000 80af 	beq.w	8007034 <dwin_data+0x1ae0>
			if (((DISPLAY_INPUT[5] == 0xA2) && (DISPLAY_INPUT[8] == 0x01))) {
 8006ed6:	4b20      	ldr	r3, [pc, #128]	@ (8006f58 <dwin_data+0x1a04>)
 8006ed8:	795b      	ldrb	r3, [r3, #5]
 8006eda:	2ba2      	cmp	r3, #162	@ 0xa2
 8006edc:	d168      	bne.n	8006fb0 <dwin_data+0x1a5c>
 8006ede:	4b1e      	ldr	r3, [pc, #120]	@ (8006f58 <dwin_data+0x1a04>)
 8006ee0:	7a1b      	ldrb	r3, [r3, #8]
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d164      	bne.n	8006fb0 <dwin_data+0x1a5c>
				if (PLR_value == 60) {
 8006ee6:	4b2e      	ldr	r3, [pc, #184]	@ (8006fa0 <dwin_data+0x1a4c>)
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	2b3c      	cmp	r3, #60	@ 0x3c
 8006eec:	d105      	bne.n	8006efa <dwin_data+0x19a6>
					PLR_value = PLR_value;
 8006eee:	4b2c      	ldr	r3, [pc, #176]	@ (8006fa0 <dwin_data+0x1a4c>)
 8006ef0:	781a      	ldrb	r2, [r3, #0]
 8006ef2:	4b2b      	ldr	r3, [pc, #172]	@ (8006fa0 <dwin_data+0x1a4c>)
 8006ef4:	701a      	strb	r2, [r3, #0]
				if (PLR_value == 60) {
 8006ef6:	f001 b84a 	b.w	8007f8e <dwin_data+0x2a3a>
				} else {
					Value_reset_flag = 0;
 8006efa:	4b2a      	ldr	r3, [pc, #168]	@ (8006fa4 <dwin_data+0x1a50>)
 8006efc:	2200      	movs	r2, #0
 8006efe:	701a      	strb	r2, [r3, #0]
					plt_value_reset_flag = 1;
 8006f00:	4b29      	ldr	r3, [pc, #164]	@ (8006fa8 <dwin_data+0x1a54>)
 8006f02:	2201      	movs	r2, #1
 8006f04:	701a      	strb	r2, [r3, #0]
					osTimerStart(Touch_value_resetHandle, 5000);
 8006f06:	4b29      	ldr	r3, [pc, #164]	@ (8006fac <dwin_data+0x1a58>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f241 3188 	movw	r1, #5000	@ 0x1388
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f00b fa9c 	bl	801244c <osTimerStart>
					PLR_value += 1;
 8006f14:	4b22      	ldr	r3, [pc, #136]	@ (8006fa0 <dwin_data+0x1a4c>)
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	3301      	adds	r3, #1
 8006f1a:	b2da      	uxtb	r2, r3
 8006f1c:	4b20      	ldr	r3, [pc, #128]	@ (8006fa0 <dwin_data+0x1a4c>)
 8006f1e:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x02, PLR_value);
 8006f20:	4b1f      	ldr	r3, [pc, #124]	@ (8006fa0 <dwin_data+0x1a4c>)
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	4619      	mov	r1, r3
 8006f26:	2002      	movs	r0, #2
 8006f28:	f7fb fc54 	bl	80027d4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006f32:	e00a      	b.n	8006f4a <dwin_data+0x19f6>
						DISPLAY_INPUT[a] = 0x00;
 8006f34:	4a08      	ldr	r2, [pc, #32]	@ (8006f58 <dwin_data+0x1a04>)
 8006f36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f3a:	4413      	add	r3, r2
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 8006f40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f44:	3301      	adds	r3, #1
 8006f46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006f4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f4e:	2b08      	cmp	r3, #8
 8006f50:	ddf0      	ble.n	8006f34 <dwin_data+0x19e0>
				if (PLR_value == 60) {
 8006f52:	f001 b81c 	b.w	8007f8e <dwin_data+0x2a3a>
 8006f56:	bf00      	nop
 8006f58:	20001938 	.word	0x20001938
 8006f5c:	200019f7 	.word	0x200019f7
 8006f60:	200019f8 	.word	0x200019f8
 8006f64:	200019f9 	.word	0x200019f9
 8006f68:	200019fa 	.word	0x200019fa
 8006f6c:	200019fc 	.word	0x200019fc
 8006f70:	200019fd 	.word	0x200019fd
 8006f74:	200019fe 	.word	0x200019fe
 8006f78:	200019ff 	.word	0x200019ff
 8006f7c:	20001a00 	.word	0x20001a00
 8006f80:	200019fb 	.word	0x200019fb
 8006f84:	20001953 	.word	0x20001953
 8006f88:	200019c9 	.word	0x200019c9
 8006f8c:	2000002c 	.word	0x2000002c
 8006f90:	200019ca 	.word	0x200019ca
 8006f94:	20000030 	.word	0x20000030
 8006f98:	200019cb 	.word	0x200019cb
 8006f9c:	200019cc 	.word	0x200019cc
 8006fa0:	20000036 	.word	0x20000036
 8006fa4:	200019c2 	.word	0x200019c2
 8006fa8:	200019d6 	.word	0x200019d6
 8006fac:	20001144 	.word	0x20001144
				}
			} else if ((DISPLAY_INPUT[5] == 0xA3)
 8006fb0:	4ba6      	ldr	r3, [pc, #664]	@ (800724c <dwin_data+0x1cf8>)
 8006fb2:	795b      	ldrb	r3, [r3, #5]
 8006fb4:	2ba3      	cmp	r3, #163	@ 0xa3
 8006fb6:	f040 87ea 	bne.w	8007f8e <dwin_data+0x2a3a>
					&& (DISPLAY_INPUT[8] == 0x01)) {
 8006fba:	4ba4      	ldr	r3, [pc, #656]	@ (800724c <dwin_data+0x1cf8>)
 8006fbc:	7a1b      	ldrb	r3, [r3, #8]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	f040 87e5 	bne.w	8007f8e <dwin_data+0x2a3a>
				if (PLR_value == 5) {
 8006fc4:	4ba2      	ldr	r3, [pc, #648]	@ (8007250 <dwin_data+0x1cfc>)
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	2b05      	cmp	r3, #5
 8006fca:	d105      	bne.n	8006fd8 <dwin_data+0x1a84>
					PLR_value = PLR_value;
 8006fcc:	4ba0      	ldr	r3, [pc, #640]	@ (8007250 <dwin_data+0x1cfc>)
 8006fce:	781a      	ldrb	r2, [r3, #0]
 8006fd0:	4b9f      	ldr	r3, [pc, #636]	@ (8007250 <dwin_data+0x1cfc>)
 8006fd2:	701a      	strb	r2, [r3, #0]
 8006fd4:	f000 bfdb 	b.w	8007f8e <dwin_data+0x2a3a>
				} else {
					Value_reset_flag = 0;
 8006fd8:	4b9e      	ldr	r3, [pc, #632]	@ (8007254 <dwin_data+0x1d00>)
 8006fda:	2200      	movs	r2, #0
 8006fdc:	701a      	strb	r2, [r3, #0]
					plt_value_reset_flag = 1;
 8006fde:	4b9e      	ldr	r3, [pc, #632]	@ (8007258 <dwin_data+0x1d04>)
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	701a      	strb	r2, [r3, #0]
					osTimerStart(Touch_value_resetHandle, 5000);
 8006fe4:	4b9d      	ldr	r3, [pc, #628]	@ (800725c <dwin_data+0x1d08>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f241 3188 	movw	r1, #5000	@ 0x1388
 8006fec:	4618      	mov	r0, r3
 8006fee:	f00b fa2d 	bl	801244c <osTimerStart>
					PLR_value -= 1;
 8006ff2:	4b97      	ldr	r3, [pc, #604]	@ (8007250 <dwin_data+0x1cfc>)
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	3b01      	subs	r3, #1
 8006ff8:	b2da      	uxtb	r2, r3
 8006ffa:	4b95      	ldr	r3, [pc, #596]	@ (8007250 <dwin_data+0x1cfc>)
 8006ffc:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x02, PLR_value);
 8006ffe:	4b94      	ldr	r3, [pc, #592]	@ (8007250 <dwin_data+0x1cfc>)
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	4619      	mov	r1, r3
 8007004:	2002      	movs	r0, #2
 8007006:	f7fb fbe5 	bl	80027d4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 800700a:	2300      	movs	r3, #0
 800700c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007010:	e00a      	b.n	8007028 <dwin_data+0x1ad4>
						DISPLAY_INPUT[a] = 0x00;
 8007012:	4a8e      	ldr	r2, [pc, #568]	@ (800724c <dwin_data+0x1cf8>)
 8007014:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007018:	4413      	add	r3, r2
 800701a:	2200      	movs	r2, #0
 800701c:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 800701e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007022:	3301      	adds	r3, #1
 8007024:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007028:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800702c:	2b08      	cmp	r3, #8
 800702e:	ddf0      	ble.n	8007012 <dwin_data+0x1abe>
 8007030:	f000 bfad 	b.w	8007f8e <dwin_data+0x2a3a>
				}
			}
		} else if (rr_flag == 1) {
 8007034:	4b8a      	ldr	r3, [pc, #552]	@ (8007260 <dwin_data+0x1d0c>)
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d07f      	beq.n	800713c <dwin_data+0x1be8>
			if ((DISPLAY_INPUT[5] == 0xA2) && (DISPLAY_INPUT[8] == 0x01)) {
 800703c:	4b83      	ldr	r3, [pc, #524]	@ (800724c <dwin_data+0x1cf8>)
 800703e:	795b      	ldrb	r3, [r3, #5]
 8007040:	2ba2      	cmp	r3, #162	@ 0xa2
 8007042:	d13a      	bne.n	80070ba <dwin_data+0x1b66>
 8007044:	4b81      	ldr	r3, [pc, #516]	@ (800724c <dwin_data+0x1cf8>)
 8007046:	7a1b      	ldrb	r3, [r3, #8]
 8007048:	2b01      	cmp	r3, #1
 800704a:	d136      	bne.n	80070ba <dwin_data+0x1b66>
				if (RR_value == 100) {
 800704c:	4b85      	ldr	r3, [pc, #532]	@ (8007264 <dwin_data+0x1d10>)
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	2b64      	cmp	r3, #100	@ 0x64
 8007052:	d104      	bne.n	800705e <dwin_data+0x1b0a>
					RR_value = RR_value;
 8007054:	4b83      	ldr	r3, [pc, #524]	@ (8007264 <dwin_data+0x1d10>)
 8007056:	781a      	ldrb	r2, [r3, #0]
 8007058:	4b82      	ldr	r3, [pc, #520]	@ (8007264 <dwin_data+0x1d10>)
 800705a:	701a      	strb	r2, [r3, #0]
 800705c:	e018      	b.n	8007090 <dwin_data+0x1b3c>
				} else {
					Value_reset_flag = 0;
 800705e:	4b7d      	ldr	r3, [pc, #500]	@ (8007254 <dwin_data+0x1d00>)
 8007060:	2200      	movs	r2, #0
 8007062:	701a      	strb	r2, [r3, #0]
					rr_value_reset_flag = 1;
 8007064:	4b80      	ldr	r3, [pc, #512]	@ (8007268 <dwin_data+0x1d14>)
 8007066:	2201      	movs	r2, #1
 8007068:	701a      	strb	r2, [r3, #0]
					osTimerStart(Touch_value_resetHandle, 5000);
 800706a:	4b7c      	ldr	r3, [pc, #496]	@ (800725c <dwin_data+0x1d08>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8007072:	4618      	mov	r0, r3
 8007074:	f00b f9ea 	bl	801244c <osTimerStart>
					RR_value += 1;
 8007078:	4b7a      	ldr	r3, [pc, #488]	@ (8007264 <dwin_data+0x1d10>)
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	3301      	adds	r3, #1
 800707e:	b2da      	uxtb	r2, r3
 8007080:	4b78      	ldr	r3, [pc, #480]	@ (8007264 <dwin_data+0x1d10>)
 8007082:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x03, RR_value);
 8007084:	4b77      	ldr	r3, [pc, #476]	@ (8007264 <dwin_data+0x1d10>)
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	4619      	mov	r1, r3
 800708a:	2003      	movs	r0, #3
 800708c:	f7fb fba2 	bl	80027d4 <intiger_val_send>
					//					rr_alarm(RR_value);
					//					for (int a = 0; a < 9; a++)
					//						DISPLAY_INPUT[a] = 0x00;
				}
				for (int a = 0; a < 9; a++)
 8007090:	2300      	movs	r3, #0
 8007092:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007096:	e00a      	b.n	80070ae <dwin_data+0x1b5a>
					DISPLAY_INPUT[a] = 0x00;
 8007098:	4a6c      	ldr	r2, [pc, #432]	@ (800724c <dwin_data+0x1cf8>)
 800709a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800709e:	4413      	add	r3, r2
 80070a0:	2200      	movs	r2, #0
 80070a2:	701a      	strb	r2, [r3, #0]
				for (int a = 0; a < 9; a++)
 80070a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80070a8:	3301      	adds	r3, #1
 80070aa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80070ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80070b2:	2b08      	cmp	r3, #8
 80070b4:	ddf0      	ble.n	8007098 <dwin_data+0x1b44>
 80070b6:	f000 bf6a 	b.w	8007f8e <dwin_data+0x2a3a>
			} else if (((DISPLAY_INPUT[5] == 0xA3)
 80070ba:	4b64      	ldr	r3, [pc, #400]	@ (800724c <dwin_data+0x1cf8>)
 80070bc:	795b      	ldrb	r3, [r3, #5]
 80070be:	2ba3      	cmp	r3, #163	@ 0xa3
 80070c0:	f040 8765 	bne.w	8007f8e <dwin_data+0x2a3a>
					&& (DISPLAY_INPUT[8] == 0x01))) {
 80070c4:	4b61      	ldr	r3, [pc, #388]	@ (800724c <dwin_data+0x1cf8>)
 80070c6:	7a1b      	ldrb	r3, [r3, #8]
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	f040 8760 	bne.w	8007f8e <dwin_data+0x2a3a>
				if (RR_value == 5) {
 80070ce:	4b65      	ldr	r3, [pc, #404]	@ (8007264 <dwin_data+0x1d10>)
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	2b05      	cmp	r3, #5
 80070d4:	d104      	bne.n	80070e0 <dwin_data+0x1b8c>
					RR_value = RR_value;
 80070d6:	4b63      	ldr	r3, [pc, #396]	@ (8007264 <dwin_data+0x1d10>)
 80070d8:	781a      	ldrb	r2, [r3, #0]
 80070da:	4b62      	ldr	r3, [pc, #392]	@ (8007264 <dwin_data+0x1d10>)
 80070dc:	701a      	strb	r2, [r3, #0]
 80070de:	e018      	b.n	8007112 <dwin_data+0x1bbe>
				} else {
					Value_reset_flag = 0;
 80070e0:	4b5c      	ldr	r3, [pc, #368]	@ (8007254 <dwin_data+0x1d00>)
 80070e2:	2200      	movs	r2, #0
 80070e4:	701a      	strb	r2, [r3, #0]
					rr_value_reset_flag = 1;
 80070e6:	4b60      	ldr	r3, [pc, #384]	@ (8007268 <dwin_data+0x1d14>)
 80070e8:	2201      	movs	r2, #1
 80070ea:	701a      	strb	r2, [r3, #0]
					osTimerStart(Touch_value_resetHandle, 5000);
 80070ec:	4b5b      	ldr	r3, [pc, #364]	@ (800725c <dwin_data+0x1d08>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f241 3188 	movw	r1, #5000	@ 0x1388
 80070f4:	4618      	mov	r0, r3
 80070f6:	f00b f9a9 	bl	801244c <osTimerStart>
					RR_value -= 1;
 80070fa:	4b5a      	ldr	r3, [pc, #360]	@ (8007264 <dwin_data+0x1d10>)
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	3b01      	subs	r3, #1
 8007100:	b2da      	uxtb	r2, r3
 8007102:	4b58      	ldr	r3, [pc, #352]	@ (8007264 <dwin_data+0x1d10>)
 8007104:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x03, RR_value);
 8007106:	4b57      	ldr	r3, [pc, #348]	@ (8007264 <dwin_data+0x1d10>)
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	4619      	mov	r1, r3
 800710c:	2003      	movs	r0, #3
 800710e:	f7fb fb61 	bl	80027d4 <intiger_val_send>
					//					rr_alarm(RR_value);
					//					for (int a = 0; a < 9; a++)
					//						DISPLAY_INPUT[a] = 0x00;
				}
				for (int a = 0; a < 9; a++)
 8007112:	2300      	movs	r3, #0
 8007114:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007118:	e00a      	b.n	8007130 <dwin_data+0x1bdc>
					DISPLAY_INPUT[a] = 0x00;
 800711a:	4a4c      	ldr	r2, [pc, #304]	@ (800724c <dwin_data+0x1cf8>)
 800711c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007120:	4413      	add	r3, r2
 8007122:	2200      	movs	r2, #0
 8007124:	701a      	strb	r2, [r3, #0]
				for (int a = 0; a < 9; a++)
 8007126:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800712a:	3301      	adds	r3, #1
 800712c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007130:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007134:	2b08      	cmp	r3, #8
 8007136:	ddf0      	ble.n	800711a <dwin_data+0x1bc6>
 8007138:	f000 bf29 	b.w	8007f8e <dwin_data+0x2a3a>
			}
		} else if (pu_flag == 1) {
 800713c:	4b4b      	ldr	r3, [pc, #300]	@ (800726c <dwin_data+0x1d18>)
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	2b00      	cmp	r3, #0
 8007142:	f000 8099 	beq.w	8007278 <dwin_data+0x1d24>
			if (((DISPLAY_INPUT[5] == 0xA2) && (DISPLAY_INPUT[8] == 0x01))) {
 8007146:	4b41      	ldr	r3, [pc, #260]	@ (800724c <dwin_data+0x1cf8>)
 8007148:	795b      	ldrb	r3, [r3, #5]
 800714a:	2ba2      	cmp	r3, #162	@ 0xa2
 800714c:	d13b      	bne.n	80071c6 <dwin_data+0x1c72>
 800714e:	4b3f      	ldr	r3, [pc, #252]	@ (800724c <dwin_data+0x1cf8>)
 8007150:	7a1b      	ldrb	r3, [r3, #8]
 8007152:	2b01      	cmp	r3, #1
 8007154:	d137      	bne.n	80071c6 <dwin_data+0x1c72>
				if (PU_value == 50) {
 8007156:	4b46      	ldr	r3, [pc, #280]	@ (8007270 <dwin_data+0x1d1c>)
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	2b32      	cmp	r3, #50	@ 0x32
 800715c:	d105      	bne.n	800716a <dwin_data+0x1c16>
					PU_value = PU_value;
 800715e:	4b44      	ldr	r3, [pc, #272]	@ (8007270 <dwin_data+0x1d1c>)
 8007160:	781a      	ldrb	r2, [r3, #0]
 8007162:	4b43      	ldr	r3, [pc, #268]	@ (8007270 <dwin_data+0x1d1c>)
 8007164:	701a      	strb	r2, [r3, #0]
				if (PU_value == 50) {
 8007166:	f000 bf12 	b.w	8007f8e <dwin_data+0x2a3a>
				} else {
					Value_reset_flag = 0;
 800716a:	4b3a      	ldr	r3, [pc, #232]	@ (8007254 <dwin_data+0x1d00>)
 800716c:	2200      	movs	r2, #0
 800716e:	701a      	strb	r2, [r3, #0]
					pu_value_reset_flag = 1;
 8007170:	4b40      	ldr	r3, [pc, #256]	@ (8007274 <dwin_data+0x1d20>)
 8007172:	2201      	movs	r2, #1
 8007174:	701a      	strb	r2, [r3, #0]
					osTimerStart(Touch_value_resetHandle, 5000);
 8007176:	4b39      	ldr	r3, [pc, #228]	@ (800725c <dwin_data+0x1d08>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800717e:	4618      	mov	r0, r3
 8007180:	f00b f964 	bl	801244c <osTimerStart>
					PU_value += 1;
 8007184:	4b3a      	ldr	r3, [pc, #232]	@ (8007270 <dwin_data+0x1d1c>)
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	3301      	adds	r3, #1
 800718a:	b2da      	uxtb	r2, r3
 800718c:	4b38      	ldr	r3, [pc, #224]	@ (8007270 <dwin_data+0x1d1c>)
 800718e:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x05, PU_value);
 8007190:	4b37      	ldr	r3, [pc, #220]	@ (8007270 <dwin_data+0x1d1c>)
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	4619      	mov	r1, r3
 8007196:	2005      	movs	r0, #5
 8007198:	f7fb fb1c 	bl	80027d4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 800719c:	2300      	movs	r3, #0
 800719e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80071a2:	e00a      	b.n	80071ba <dwin_data+0x1c66>
						DISPLAY_INPUT[a] = 0x00;
 80071a4:	4a29      	ldr	r2, [pc, #164]	@ (800724c <dwin_data+0x1cf8>)
 80071a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80071aa:	4413      	add	r3, r2
 80071ac:	2200      	movs	r2, #0
 80071ae:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 80071b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80071b4:	3301      	adds	r3, #1
 80071b6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80071ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80071be:	2b08      	cmp	r3, #8
 80071c0:	ddf0      	ble.n	80071a4 <dwin_data+0x1c50>
				if (PU_value == 50) {
 80071c2:	f000 bee4 	b.w	8007f8e <dwin_data+0x2a3a>
				}
			} else if (((DISPLAY_INPUT[5] == 0xA3)
 80071c6:	4b21      	ldr	r3, [pc, #132]	@ (800724c <dwin_data+0x1cf8>)
 80071c8:	795b      	ldrb	r3, [r3, #5]
 80071ca:	2ba3      	cmp	r3, #163	@ 0xa3
 80071cc:	f040 86df 	bne.w	8007f8e <dwin_data+0x2a3a>
					&& (DISPLAY_INPUT[8] == 0x01))) {
 80071d0:	4b1e      	ldr	r3, [pc, #120]	@ (800724c <dwin_data+0x1cf8>)
 80071d2:	7a1b      	ldrb	r3, [r3, #8]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	f040 86da 	bne.w	8007f8e <dwin_data+0x2a3a>
				if (PU_value == 0) {
 80071da:	4b25      	ldr	r3, [pc, #148]	@ (8007270 <dwin_data+0x1d1c>)
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d105      	bne.n	80071ee <dwin_data+0x1c9a>
					PU_value = PU_value;
 80071e2:	4b23      	ldr	r3, [pc, #140]	@ (8007270 <dwin_data+0x1d1c>)
 80071e4:	781a      	ldrb	r2, [r3, #0]
 80071e6:	4b22      	ldr	r3, [pc, #136]	@ (8007270 <dwin_data+0x1d1c>)
 80071e8:	701a      	strb	r2, [r3, #0]
 80071ea:	f000 bed0 	b.w	8007f8e <dwin_data+0x2a3a>
				} else {
					Value_reset_flag = 0;
 80071ee:	4b19      	ldr	r3, [pc, #100]	@ (8007254 <dwin_data+0x1d00>)
 80071f0:	2200      	movs	r2, #0
 80071f2:	701a      	strb	r2, [r3, #0]
					pu_value_reset_flag = 1;
 80071f4:	4b1f      	ldr	r3, [pc, #124]	@ (8007274 <dwin_data+0x1d20>)
 80071f6:	2201      	movs	r2, #1
 80071f8:	701a      	strb	r2, [r3, #0]
					osTimerStart(Touch_value_resetHandle, 5000);
 80071fa:	4b18      	ldr	r3, [pc, #96]	@ (800725c <dwin_data+0x1d08>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f241 3188 	movw	r1, #5000	@ 0x1388
 8007202:	4618      	mov	r0, r3
 8007204:	f00b f922 	bl	801244c <osTimerStart>
					PU_value -= 1;
 8007208:	4b19      	ldr	r3, [pc, #100]	@ (8007270 <dwin_data+0x1d1c>)
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	3b01      	subs	r3, #1
 800720e:	b2da      	uxtb	r2, r3
 8007210:	4b17      	ldr	r3, [pc, #92]	@ (8007270 <dwin_data+0x1d1c>)
 8007212:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x05, PU_value);
 8007214:	4b16      	ldr	r3, [pc, #88]	@ (8007270 <dwin_data+0x1d1c>)
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	4619      	mov	r1, r3
 800721a:	2005      	movs	r0, #5
 800721c:	f7fb fada 	bl	80027d4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 8007220:	2300      	movs	r3, #0
 8007222:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007226:	e00a      	b.n	800723e <dwin_data+0x1cea>
						DISPLAY_INPUT[a] = 0x00;
 8007228:	4a08      	ldr	r2, [pc, #32]	@ (800724c <dwin_data+0x1cf8>)
 800722a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800722e:	4413      	add	r3, r2
 8007230:	2200      	movs	r2, #0
 8007232:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 8007234:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007238:	3301      	adds	r3, #1
 800723a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800723e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007242:	2b08      	cmp	r3, #8
 8007244:	ddf0      	ble.n	8007228 <dwin_data+0x1cd4>
 8007246:	f000 bea2 	b.w	8007f8e <dwin_data+0x2a3a>
 800724a:	bf00      	nop
 800724c:	20001938 	.word	0x20001938
 8007250:	20000036 	.word	0x20000036
 8007254:	200019c2 	.word	0x200019c2
 8007258:	200019d6 	.word	0x200019d6
 800725c:	20001144 	.word	0x20001144
 8007260:	200019cd 	.word	0x200019cd
 8007264:	20000037 	.word	0x20000037
 8007268:	200019d7 	.word	0x200019d7
 800726c:	200019ce 	.word	0x200019ce
 8007270:	2000195d 	.word	0x2000195d
 8007274:	200019d8 	.word	0x200019d8
				}
			}
		} else if (trg_flag == 1) {
 8007278:	4ba3      	ldr	r3, [pc, #652]	@ (8007508 <dwin_data+0x1fb4>)
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d053      	beq.n	8007328 <dwin_data+0x1dd4>
			if (((DISPLAY_INPUT[5] == 0xA2) && (DISPLAY_INPUT[8] == 0x01))) {
 8007280:	4ba2      	ldr	r3, [pc, #648]	@ (800750c <dwin_data+0x1fb8>)
 8007282:	795b      	ldrb	r3, [r3, #5]
 8007284:	2ba2      	cmp	r3, #162	@ 0xa2
 8007286:	d124      	bne.n	80072d2 <dwin_data+0x1d7e>
 8007288:	4ba0      	ldr	r3, [pc, #640]	@ (800750c <dwin_data+0x1fb8>)
 800728a:	7a1b      	ldrb	r3, [r3, #8]
 800728c:	2b01      	cmp	r3, #1
 800728e:	d120      	bne.n	80072d2 <dwin_data+0x1d7e>
				TRG_value += 1;
 8007290:	4b9f      	ldr	r3, [pc, #636]	@ (8007510 <dwin_data+0x1fbc>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	3301      	adds	r3, #1
 8007296:	4a9e      	ldr	r2, [pc, #632]	@ (8007510 <dwin_data+0x1fbc>)
 8007298:	6013      	str	r3, [r2, #0]
				intiger_val_send(0x06, TRG_value);
 800729a:	4b9d      	ldr	r3, [pc, #628]	@ (8007510 <dwin_data+0x1fbc>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	4619      	mov	r1, r3
 80072a2:	2006      	movs	r0, #6
 80072a4:	f7fb fa96 	bl	80027d4 <intiger_val_send>
				for (int a = 0; a < 9; a++)
 80072a8:	2300      	movs	r3, #0
 80072aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80072ae:	e00a      	b.n	80072c6 <dwin_data+0x1d72>
					DISPLAY_INPUT[a] = 0x00;
 80072b0:	4a96      	ldr	r2, [pc, #600]	@ (800750c <dwin_data+0x1fb8>)
 80072b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80072b6:	4413      	add	r3, r2
 80072b8:	2200      	movs	r2, #0
 80072ba:	701a      	strb	r2, [r3, #0]
				for (int a = 0; a < 9; a++)
 80072bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80072c0:	3301      	adds	r3, #1
 80072c2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80072c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80072ca:	2b08      	cmp	r3, #8
 80072cc:	ddf0      	ble.n	80072b0 <dwin_data+0x1d5c>
 80072ce:	f000 be5e 	b.w	8007f8e <dwin_data+0x2a3a>
			} else if (((DISPLAY_INPUT[5] == 0xA3)
 80072d2:	4b8e      	ldr	r3, [pc, #568]	@ (800750c <dwin_data+0x1fb8>)
 80072d4:	795b      	ldrb	r3, [r3, #5]
 80072d6:	2ba3      	cmp	r3, #163	@ 0xa3
 80072d8:	f040 8659 	bne.w	8007f8e <dwin_data+0x2a3a>
					&& (DISPLAY_INPUT[8] == 0x01))) {
 80072dc:	4b8b      	ldr	r3, [pc, #556]	@ (800750c <dwin_data+0x1fb8>)
 80072de:	7a1b      	ldrb	r3, [r3, #8]
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	f040 8654 	bne.w	8007f8e <dwin_data+0x2a3a>
				TRG_value -= 1;
 80072e6:	4b8a      	ldr	r3, [pc, #552]	@ (8007510 <dwin_data+0x1fbc>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	3b01      	subs	r3, #1
 80072ec:	4a88      	ldr	r2, [pc, #544]	@ (8007510 <dwin_data+0x1fbc>)
 80072ee:	6013      	str	r3, [r2, #0]
				intiger_val_send(0x06, TRG_value);
 80072f0:	4b87      	ldr	r3, [pc, #540]	@ (8007510 <dwin_data+0x1fbc>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	4619      	mov	r1, r3
 80072f8:	2006      	movs	r0, #6
 80072fa:	f7fb fa6b 	bl	80027d4 <intiger_val_send>
				for (int a = 0; a < 9; a++)
 80072fe:	2300      	movs	r3, #0
 8007300:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007304:	e00a      	b.n	800731c <dwin_data+0x1dc8>
					DISPLAY_INPUT[a] = 0x00;
 8007306:	4a81      	ldr	r2, [pc, #516]	@ (800750c <dwin_data+0x1fb8>)
 8007308:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800730c:	4413      	add	r3, r2
 800730e:	2200      	movs	r2, #0
 8007310:	701a      	strb	r2, [r3, #0]
				for (int a = 0; a < 9; a++)
 8007312:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007316:	3301      	adds	r3, #1
 8007318:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800731c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007320:	2b08      	cmp	r3, #8
 8007322:	ddf0      	ble.n	8007306 <dwin_data+0x1db2>
 8007324:	f000 be33 	b.w	8007f8e <dwin_data+0x2a3a>
			}
		} else if (pip_flag == 1) {
 8007328:	4b7a      	ldr	r3, [pc, #488]	@ (8007514 <dwin_data+0x1fc0>)
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	f000 8091 	beq.w	8007454 <dwin_data+0x1f00>
			if (((DISPLAY_INPUT[5] == 0xA2) && (DISPLAY_INPUT[8] == 0x01))) {
 8007332:	4b76      	ldr	r3, [pc, #472]	@ (800750c <dwin_data+0x1fb8>)
 8007334:	795b      	ldrb	r3, [r3, #5]
 8007336:	2ba2      	cmp	r3, #162	@ 0xa2
 8007338:	d142      	bne.n	80073c0 <dwin_data+0x1e6c>
 800733a:	4b74      	ldr	r3, [pc, #464]	@ (800750c <dwin_data+0x1fb8>)
 800733c:	7a1b      	ldrb	r3, [r3, #8]
 800733e:	2b01      	cmp	r3, #1
 8007340:	d13e      	bne.n	80073c0 <dwin_data+0x1e6c>
				if (PIP_value == 0){
 8007342:	4b75      	ldr	r3, [pc, #468]	@ (8007518 <dwin_data+0x1fc4>)
 8007344:	f993 3000 	ldrsb.w	r3, [r3]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d106      	bne.n	800735a <dwin_data+0x1e06>
					PIP_value = PIP_value;
 800734c:	4b72      	ldr	r3, [pc, #456]	@ (8007518 <dwin_data+0x1fc4>)
 800734e:	f993 2000 	ldrsb.w	r2, [r3]
 8007352:	4b71      	ldr	r3, [pc, #452]	@ (8007518 <dwin_data+0x1fc4>)
 8007354:	701a      	strb	r2, [r3, #0]
				if (PIP_value == 0){
 8007356:	f000 be1a 	b.w	8007f8e <dwin_data+0x2a3a>
				}else{
					Value_reset_flag = 0;
 800735a:	4b70      	ldr	r3, [pc, #448]	@ (800751c <dwin_data+0x1fc8>)
 800735c:	2200      	movs	r2, #0
 800735e:	701a      	strb	r2, [r3, #0]
					pip_value_reset_flag = 1;
 8007360:	4b6f      	ldr	r3, [pc, #444]	@ (8007520 <dwin_data+0x1fcc>)
 8007362:	2201      	movs	r2, #1
 8007364:	701a      	strb	r2, [r3, #0]
					osTimerStart(Touch_value_resetHandle, 5000);
 8007366:	4b6f      	ldr	r3, [pc, #444]	@ (8007524 <dwin_data+0x1fd0>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800736e:	4618      	mov	r0, r3
 8007370:	f00b f86c 	bl	801244c <osTimerStart>
					PIP_value += 1;
 8007374:	4b68      	ldr	r3, [pc, #416]	@ (8007518 <dwin_data+0x1fc4>)
 8007376:	f993 3000 	ldrsb.w	r3, [r3]
 800737a:	b2db      	uxtb	r3, r3
 800737c:	3301      	adds	r3, #1
 800737e:	b2db      	uxtb	r3, r3
 8007380:	b25a      	sxtb	r2, r3
 8007382:	4b65      	ldr	r3, [pc, #404]	@ (8007518 <dwin_data+0x1fc4>)
 8007384:	701a      	strb	r2, [r3, #0]
					//					intiger_val_send(0x07, PIP_value);
					PIP_VAL(0x07, PIP_value);
 8007386:	4b64      	ldr	r3, [pc, #400]	@ (8007518 <dwin_data+0x1fc4>)
 8007388:	f993 3000 	ldrsb.w	r3, [r3]
 800738c:	b2db      	uxtb	r3, r3
 800738e:	4619      	mov	r1, r3
 8007390:	2007      	movs	r0, #7
 8007392:	f7fb fa73 	bl	800287c <PIP_VAL>
					for (int a = 0; a < 9; a++)
 8007396:	2300      	movs	r3, #0
 8007398:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800739c:	e00a      	b.n	80073b4 <dwin_data+0x1e60>
						DISPLAY_INPUT[a] = 0x00;
 800739e:	4a5b      	ldr	r2, [pc, #364]	@ (800750c <dwin_data+0x1fb8>)
 80073a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80073a4:	4413      	add	r3, r2
 80073a6:	2200      	movs	r2, #0
 80073a8:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 80073aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80073ae:	3301      	adds	r3, #1
 80073b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80073b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80073b8:	2b08      	cmp	r3, #8
 80073ba:	ddf0      	ble.n	800739e <dwin_data+0x1e4a>
				if (PIP_value == 0){
 80073bc:	f000 bde7 	b.w	8007f8e <dwin_data+0x2a3a>
				}
			}else if (((DISPLAY_INPUT[5] == 0xA3)
 80073c0:	4b52      	ldr	r3, [pc, #328]	@ (800750c <dwin_data+0x1fb8>)
 80073c2:	795b      	ldrb	r3, [r3, #5]
 80073c4:	2ba3      	cmp	r3, #163	@ 0xa3
 80073c6:	f040 85e2 	bne.w	8007f8e <dwin_data+0x2a3a>
					&& (DISPLAY_INPUT[8] == 0x01))) {
 80073ca:	4b50      	ldr	r3, [pc, #320]	@ (800750c <dwin_data+0x1fb8>)
 80073cc:	7a1b      	ldrb	r3, [r3, #8]
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	f040 85dd 	bne.w	8007f8e <dwin_data+0x2a3a>
				if(PIP_value == -20){
 80073d4:	4b50      	ldr	r3, [pc, #320]	@ (8007518 <dwin_data+0x1fc4>)
 80073d6:	f993 3000 	ldrsb.w	r3, [r3]
 80073da:	f113 0f14 	cmn.w	r3, #20
 80073de:	d106      	bne.n	80073ee <dwin_data+0x1e9a>
					PIP_value = PIP_value;
 80073e0:	4b4d      	ldr	r3, [pc, #308]	@ (8007518 <dwin_data+0x1fc4>)
 80073e2:	f993 2000 	ldrsb.w	r2, [r3]
 80073e6:	4b4c      	ldr	r3, [pc, #304]	@ (8007518 <dwin_data+0x1fc4>)
 80073e8:	701a      	strb	r2, [r3, #0]
 80073ea:	f000 bdd0 	b.w	8007f8e <dwin_data+0x2a3a>
				}else{
					Value_reset_flag = 0;
 80073ee:	4b4b      	ldr	r3, [pc, #300]	@ (800751c <dwin_data+0x1fc8>)
 80073f0:	2200      	movs	r2, #0
 80073f2:	701a      	strb	r2, [r3, #0]
					pip_value_reset_flag = 1;
 80073f4:	4b4a      	ldr	r3, [pc, #296]	@ (8007520 <dwin_data+0x1fcc>)
 80073f6:	2201      	movs	r2, #1
 80073f8:	701a      	strb	r2, [r3, #0]
					osTimerStart(Touch_value_resetHandle, 5000);
 80073fa:	4b4a      	ldr	r3, [pc, #296]	@ (8007524 <dwin_data+0x1fd0>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f241 3188 	movw	r1, #5000	@ 0x1388
 8007402:	4618      	mov	r0, r3
 8007404:	f00b f822 	bl	801244c <osTimerStart>
					PIP_value -= 1;
 8007408:	4b43      	ldr	r3, [pc, #268]	@ (8007518 <dwin_data+0x1fc4>)
 800740a:	f993 3000 	ldrsb.w	r3, [r3]
 800740e:	b2db      	uxtb	r3, r3
 8007410:	3b01      	subs	r3, #1
 8007412:	b2db      	uxtb	r3, r3
 8007414:	b25a      	sxtb	r2, r3
 8007416:	4b40      	ldr	r3, [pc, #256]	@ (8007518 <dwin_data+0x1fc4>)
 8007418:	701a      	strb	r2, [r3, #0]
					//					intiger_val_send(0x07, PIP_value);
					PIP_VAL(0x07, PIP_value);
 800741a:	4b3f      	ldr	r3, [pc, #252]	@ (8007518 <dwin_data+0x1fc4>)
 800741c:	f993 3000 	ldrsb.w	r3, [r3]
 8007420:	b2db      	uxtb	r3, r3
 8007422:	4619      	mov	r1, r3
 8007424:	2007      	movs	r0, #7
 8007426:	f7fb fa29 	bl	800287c <PIP_VAL>
					for (int a = 0; a < 9; a++)
 800742a:	2300      	movs	r3, #0
 800742c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007430:	e00a      	b.n	8007448 <dwin_data+0x1ef4>
						DISPLAY_INPUT[a] = 0x00;
 8007432:	4a36      	ldr	r2, [pc, #216]	@ (800750c <dwin_data+0x1fb8>)
 8007434:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007438:	4413      	add	r3, r2
 800743a:	2200      	movs	r2, #0
 800743c:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 800743e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007442:	3301      	adds	r3, #1
 8007444:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007448:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800744c:	2b08      	cmp	r3, #8
 800744e:	ddf0      	ble.n	8007432 <dwin_data+0x1ede>
 8007450:	f000 bd9d 	b.w	8007f8e <dwin_data+0x2a3a>
				}
			}
		}else if (peep_flag == 1) {
 8007454:	4b34      	ldr	r3, [pc, #208]	@ (8007528 <dwin_data+0x1fd4>)
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	f000 8099 	beq.w	8007590 <dwin_data+0x203c>
			if (((DISPLAY_INPUT[5] == 0xA2) && (DISPLAY_INPUT[8] == 0x01))) {
 800745e:	4b2b      	ldr	r3, [pc, #172]	@ (800750c <dwin_data+0x1fb8>)
 8007460:	795b      	ldrb	r3, [r3, #5]
 8007462:	2ba2      	cmp	r3, #162	@ 0xa2
 8007464:	d13b      	bne.n	80074de <dwin_data+0x1f8a>
 8007466:	4b29      	ldr	r3, [pc, #164]	@ (800750c <dwin_data+0x1fb8>)
 8007468:	7a1b      	ldrb	r3, [r3, #8]
 800746a:	2b01      	cmp	r3, #1
 800746c:	d137      	bne.n	80074de <dwin_data+0x1f8a>
				if (PEEP_value == 30) {
 800746e:	4b2f      	ldr	r3, [pc, #188]	@ (800752c <dwin_data+0x1fd8>)
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	2b1e      	cmp	r3, #30
 8007474:	d105      	bne.n	8007482 <dwin_data+0x1f2e>
					PEEP_value = PEEP_value;
 8007476:	4b2d      	ldr	r3, [pc, #180]	@ (800752c <dwin_data+0x1fd8>)
 8007478:	781a      	ldrb	r2, [r3, #0]
 800747a:	4b2c      	ldr	r3, [pc, #176]	@ (800752c <dwin_data+0x1fd8>)
 800747c:	701a      	strb	r2, [r3, #0]
				if (PEEP_value == 30) {
 800747e:	f000 bd86 	b.w	8007f8e <dwin_data+0x2a3a>
				} else {
					Value_reset_flag = 0;
 8007482:	4b26      	ldr	r3, [pc, #152]	@ (800751c <dwin_data+0x1fc8>)
 8007484:	2200      	movs	r2, #0
 8007486:	701a      	strb	r2, [r3, #0]
					peep_value_reset_flag = 1;
 8007488:	4b29      	ldr	r3, [pc, #164]	@ (8007530 <dwin_data+0x1fdc>)
 800748a:	2201      	movs	r2, #1
 800748c:	701a      	strb	r2, [r3, #0]
					osTimerStart(Touch_value_resetHandle, 5000);
 800748e:	4b25      	ldr	r3, [pc, #148]	@ (8007524 <dwin_data+0x1fd0>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f241 3188 	movw	r1, #5000	@ 0x1388
 8007496:	4618      	mov	r0, r3
 8007498:	f00a ffd8 	bl	801244c <osTimerStart>
					PEEP_value += 1;
 800749c:	4b23      	ldr	r3, [pc, #140]	@ (800752c <dwin_data+0x1fd8>)
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	3301      	adds	r3, #1
 80074a2:	b2da      	uxtb	r2, r3
 80074a4:	4b21      	ldr	r3, [pc, #132]	@ (800752c <dwin_data+0x1fd8>)
 80074a6:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x08, PEEP_value);
 80074a8:	4b20      	ldr	r3, [pc, #128]	@ (800752c <dwin_data+0x1fd8>)
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	4619      	mov	r1, r3
 80074ae:	2008      	movs	r0, #8
 80074b0:	f7fb f990 	bl	80027d4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 80074b4:	2300      	movs	r3, #0
 80074b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80074ba:	e00a      	b.n	80074d2 <dwin_data+0x1f7e>
						DISPLAY_INPUT[a] = 0x00;
 80074bc:	4a13      	ldr	r2, [pc, #76]	@ (800750c <dwin_data+0x1fb8>)
 80074be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074c2:	4413      	add	r3, r2
 80074c4:	2200      	movs	r2, #0
 80074c6:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 80074c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074cc:	3301      	adds	r3, #1
 80074ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80074d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074d6:	2b08      	cmp	r3, #8
 80074d8:	ddf0      	ble.n	80074bc <dwin_data+0x1f68>
				if (PEEP_value == 30) {
 80074da:	f000 bd58 	b.w	8007f8e <dwin_data+0x2a3a>
				}
			} else if (((DISPLAY_INPUT[5] == 0xA3)
 80074de:	4b0b      	ldr	r3, [pc, #44]	@ (800750c <dwin_data+0x1fb8>)
 80074e0:	795b      	ldrb	r3, [r3, #5]
 80074e2:	2ba3      	cmp	r3, #163	@ 0xa3
 80074e4:	f040 8553 	bne.w	8007f8e <dwin_data+0x2a3a>
					&& (DISPLAY_INPUT[8] == 0x01))) {
 80074e8:	4b08      	ldr	r3, [pc, #32]	@ (800750c <dwin_data+0x1fb8>)
 80074ea:	7a1b      	ldrb	r3, [r3, #8]
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	f040 854e 	bne.w	8007f8e <dwin_data+0x2a3a>
				if (PEEP_value == 0) {
 80074f2:	4b0e      	ldr	r3, [pc, #56]	@ (800752c <dwin_data+0x1fd8>)
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d11c      	bne.n	8007534 <dwin_data+0x1fe0>
					PEEP_value = PEEP_value;
 80074fa:	4b0c      	ldr	r3, [pc, #48]	@ (800752c <dwin_data+0x1fd8>)
 80074fc:	781a      	ldrb	r2, [r3, #0]
 80074fe:	4b0b      	ldr	r3, [pc, #44]	@ (800752c <dwin_data+0x1fd8>)
 8007500:	701a      	strb	r2, [r3, #0]
 8007502:	f000 bd44 	b.w	8007f8e <dwin_data+0x2a3a>
 8007506:	bf00      	nop
 8007508:	200019cf 	.word	0x200019cf
 800750c:	20001938 	.word	0x20001938
 8007510:	20001960 	.word	0x20001960
 8007514:	200019d0 	.word	0x200019d0
 8007518:	20000038 	.word	0x20000038
 800751c:	200019c2 	.word	0x200019c2
 8007520:	200019d9 	.word	0x200019d9
 8007524:	20001144 	.word	0x20001144
 8007528:	200019d1 	.word	0x200019d1
 800752c:	20001964 	.word	0x20001964
 8007530:	200019da 	.word	0x200019da
				} else {
					Value_reset_flag = 0;
 8007534:	4ba8      	ldr	r3, [pc, #672]	@ (80077d8 <dwin_data+0x2284>)
 8007536:	2200      	movs	r2, #0
 8007538:	701a      	strb	r2, [r3, #0]
					peep_value_reset_flag = 1;
 800753a:	4ba8      	ldr	r3, [pc, #672]	@ (80077dc <dwin_data+0x2288>)
 800753c:	2201      	movs	r2, #1
 800753e:	701a      	strb	r2, [r3, #0]
					osTimerStart(Touch_value_resetHandle, 5000);
 8007540:	4ba7      	ldr	r3, [pc, #668]	@ (80077e0 <dwin_data+0x228c>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f241 3188 	movw	r1, #5000	@ 0x1388
 8007548:	4618      	mov	r0, r3
 800754a:	f00a ff7f 	bl	801244c <osTimerStart>
					PEEP_value -= 1;
 800754e:	4ba5      	ldr	r3, [pc, #660]	@ (80077e4 <dwin_data+0x2290>)
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	3b01      	subs	r3, #1
 8007554:	b2da      	uxtb	r2, r3
 8007556:	4ba3      	ldr	r3, [pc, #652]	@ (80077e4 <dwin_data+0x2290>)
 8007558:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x08, PEEP_value);
 800755a:	4ba2      	ldr	r3, [pc, #648]	@ (80077e4 <dwin_data+0x2290>)
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	4619      	mov	r1, r3
 8007560:	2008      	movs	r0, #8
 8007562:	f7fb f937 	bl	80027d4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 8007566:	2300      	movs	r3, #0
 8007568:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800756c:	e00a      	b.n	8007584 <dwin_data+0x2030>
						DISPLAY_INPUT[a] = 0x00;
 800756e:	4a9e      	ldr	r2, [pc, #632]	@ (80077e8 <dwin_data+0x2294>)
 8007570:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007574:	4413      	add	r3, r2
 8007576:	2200      	movs	r2, #0
 8007578:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 800757a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800757e:	3301      	adds	r3, #1
 8007580:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007584:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007588:	2b08      	cmp	r3, #8
 800758a:	ddf0      	ble.n	800756e <dwin_data+0x201a>
 800758c:	f000 bcff 	b.w	8007f8e <dwin_data+0x2a3a>
				}
			}
		} 		else if (P_peak_alarm_max_flag == 1){
 8007590:	4b96      	ldr	r3, [pc, #600]	@ (80077ec <dwin_data+0x2298>)
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d070      	beq.n	800767a <dwin_data+0x2126>
			if(((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA2) && (DISPLAY_INPUT[8] == 0x01))){
 8007598:	4b93      	ldr	r3, [pc, #588]	@ (80077e8 <dwin_data+0x2294>)
 800759a:	791b      	ldrb	r3, [r3, #4]
 800759c:	2b10      	cmp	r3, #16
 800759e:	d132      	bne.n	8007606 <dwin_data+0x20b2>
 80075a0:	4b91      	ldr	r3, [pc, #580]	@ (80077e8 <dwin_data+0x2294>)
 80075a2:	795b      	ldrb	r3, [r3, #5]
 80075a4:	2ba2      	cmp	r3, #162	@ 0xa2
 80075a6:	d12e      	bne.n	8007606 <dwin_data+0x20b2>
 80075a8:	4b8f      	ldr	r3, [pc, #572]	@ (80077e8 <dwin_data+0x2294>)
 80075aa:	7a1b      	ldrb	r3, [r3, #8]
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d12a      	bne.n	8007606 <dwin_data+0x20b2>
				if (P_peak_alarm_max_value==60){
 80075b0:	4b8f      	ldr	r3, [pc, #572]	@ (80077f0 <dwin_data+0x229c>)
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	2b3c      	cmp	r3, #60	@ 0x3c
 80075b6:	d105      	bne.n	80075c4 <dwin_data+0x2070>
					P_peak_alarm_max_value=P_peak_alarm_max_value;
 80075b8:	4b8d      	ldr	r3, [pc, #564]	@ (80077f0 <dwin_data+0x229c>)
 80075ba:	781a      	ldrb	r2, [r3, #0]
 80075bc:	4b8c      	ldr	r3, [pc, #560]	@ (80077f0 <dwin_data+0x229c>)
 80075be:	701a      	strb	r2, [r3, #0]
				if (P_peak_alarm_max_value==60){
 80075c0:	f000 bce5 	b.w	8007f8e <dwin_data+0x2a3a>
				}
				else{
					P_peak_alarm_max_value +=1;
 80075c4:	4b8a      	ldr	r3, [pc, #552]	@ (80077f0 <dwin_data+0x229c>)
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	3301      	adds	r3, #1
 80075ca:	b2da      	uxtb	r2, r3
 80075cc:	4b88      	ldr	r3, [pc, #544]	@ (80077f0 <dwin_data+0x229c>)
 80075ce:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x14,P_peak_alarm_max_value);
 80075d0:	4b87      	ldr	r3, [pc, #540]	@ (80077f0 <dwin_data+0x229c>)
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	4619      	mov	r1, r3
 80075d6:	2014      	movs	r0, #20
 80075d8:	f7fb f8fc 	bl	80027d4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 80075dc:	2300      	movs	r3, #0
 80075de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80075e2:	e00a      	b.n	80075fa <dwin_data+0x20a6>
						DISPLAY_INPUT[a] = 0x00;
 80075e4:	4a80      	ldr	r2, [pc, #512]	@ (80077e8 <dwin_data+0x2294>)
 80075e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80075ea:	4413      	add	r3, r2
 80075ec:	2200      	movs	r2, #0
 80075ee:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 80075f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80075f4:	3301      	adds	r3, #1
 80075f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80075fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80075fe:	2b08      	cmp	r3, #8
 8007600:	ddf0      	ble.n	80075e4 <dwin_data+0x2090>
				if (P_peak_alarm_max_value==60){
 8007602:	f000 bcc4 	b.w	8007f8e <dwin_data+0x2a3a>
				}
			}
			else if (((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA3) && (DISPLAY_INPUT[8]== 0x01))){
 8007606:	4b78      	ldr	r3, [pc, #480]	@ (80077e8 <dwin_data+0x2294>)
 8007608:	791b      	ldrb	r3, [r3, #4]
 800760a:	2b10      	cmp	r3, #16
 800760c:	f040 84bf 	bne.w	8007f8e <dwin_data+0x2a3a>
 8007610:	4b75      	ldr	r3, [pc, #468]	@ (80077e8 <dwin_data+0x2294>)
 8007612:	795b      	ldrb	r3, [r3, #5]
 8007614:	2ba3      	cmp	r3, #163	@ 0xa3
 8007616:	f040 84ba 	bne.w	8007f8e <dwin_data+0x2a3a>
 800761a:	4b73      	ldr	r3, [pc, #460]	@ (80077e8 <dwin_data+0x2294>)
 800761c:	7a1b      	ldrb	r3, [r3, #8]
 800761e:	2b01      	cmp	r3, #1
 8007620:	f040 84b5 	bne.w	8007f8e <dwin_data+0x2a3a>
				if (P_peak_alarm_max_value==20){
 8007624:	4b72      	ldr	r3, [pc, #456]	@ (80077f0 <dwin_data+0x229c>)
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	2b14      	cmp	r3, #20
 800762a:	d105      	bne.n	8007638 <dwin_data+0x20e4>
					P_peak_alarm_max_value=P_peak_alarm_max_value;
 800762c:	4b70      	ldr	r3, [pc, #448]	@ (80077f0 <dwin_data+0x229c>)
 800762e:	781a      	ldrb	r2, [r3, #0]
 8007630:	4b6f      	ldr	r3, [pc, #444]	@ (80077f0 <dwin_data+0x229c>)
 8007632:	701a      	strb	r2, [r3, #0]
 8007634:	f000 bcab 	b.w	8007f8e <dwin_data+0x2a3a>
				}
				else{
					P_peak_alarm_max_value -= 1;
 8007638:	4b6d      	ldr	r3, [pc, #436]	@ (80077f0 <dwin_data+0x229c>)
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	3b01      	subs	r3, #1
 800763e:	b2da      	uxtb	r2, r3
 8007640:	4b6b      	ldr	r3, [pc, #428]	@ (80077f0 <dwin_data+0x229c>)
 8007642:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x14,P_peak_alarm_max_value);
 8007644:	4b6a      	ldr	r3, [pc, #424]	@ (80077f0 <dwin_data+0x229c>)
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	4619      	mov	r1, r3
 800764a:	2014      	movs	r0, #20
 800764c:	f7fb f8c2 	bl	80027d4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 8007650:	2300      	movs	r3, #0
 8007652:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007656:	e00a      	b.n	800766e <dwin_data+0x211a>
						DISPLAY_INPUT[a] = 0x00;
 8007658:	4a63      	ldr	r2, [pc, #396]	@ (80077e8 <dwin_data+0x2294>)
 800765a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800765e:	4413      	add	r3, r2
 8007660:	2200      	movs	r2, #0
 8007662:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 8007664:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007668:	3301      	adds	r3, #1
 800766a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800766e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007672:	2b08      	cmp	r3, #8
 8007674:	ddf0      	ble.n	8007658 <dwin_data+0x2104>
 8007676:	f000 bc8a 	b.w	8007f8e <dwin_data+0x2a3a>
				}
			}
		}
		else if (P_peak_alarm_min_flag == 1){
 800767a:	4b5e      	ldr	r3, [pc, #376]	@ (80077f4 <dwin_data+0x22a0>)
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d070      	beq.n	8007764 <dwin_data+0x2210>
			if(((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA2) && (DISPLAY_INPUT[8] == 0x01))){
 8007682:	4b59      	ldr	r3, [pc, #356]	@ (80077e8 <dwin_data+0x2294>)
 8007684:	791b      	ldrb	r3, [r3, #4]
 8007686:	2b10      	cmp	r3, #16
 8007688:	d132      	bne.n	80076f0 <dwin_data+0x219c>
 800768a:	4b57      	ldr	r3, [pc, #348]	@ (80077e8 <dwin_data+0x2294>)
 800768c:	795b      	ldrb	r3, [r3, #5]
 800768e:	2ba2      	cmp	r3, #162	@ 0xa2
 8007690:	d12e      	bne.n	80076f0 <dwin_data+0x219c>
 8007692:	4b55      	ldr	r3, [pc, #340]	@ (80077e8 <dwin_data+0x2294>)
 8007694:	7a1b      	ldrb	r3, [r3, #8]
 8007696:	2b01      	cmp	r3, #1
 8007698:	d12a      	bne.n	80076f0 <dwin_data+0x219c>
				if (P_peak_alarm_min_value==20){
 800769a:	4b57      	ldr	r3, [pc, #348]	@ (80077f8 <dwin_data+0x22a4>)
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	2b14      	cmp	r3, #20
 80076a0:	d105      	bne.n	80076ae <dwin_data+0x215a>
					P_peak_alarm_min_value = P_peak_alarm_min_value;
 80076a2:	4b55      	ldr	r3, [pc, #340]	@ (80077f8 <dwin_data+0x22a4>)
 80076a4:	781a      	ldrb	r2, [r3, #0]
 80076a6:	4b54      	ldr	r3, [pc, #336]	@ (80077f8 <dwin_data+0x22a4>)
 80076a8:	701a      	strb	r2, [r3, #0]
				if (P_peak_alarm_min_value==20){
 80076aa:	f000 bc70 	b.w	8007f8e <dwin_data+0x2a3a>
				}
				else{
					P_peak_alarm_min_value +=1;
 80076ae:	4b52      	ldr	r3, [pc, #328]	@ (80077f8 <dwin_data+0x22a4>)
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	3301      	adds	r3, #1
 80076b4:	b2da      	uxtb	r2, r3
 80076b6:	4b50      	ldr	r3, [pc, #320]	@ (80077f8 <dwin_data+0x22a4>)
 80076b8:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x15,P_peak_alarm_min_value);
 80076ba:	4b4f      	ldr	r3, [pc, #316]	@ (80077f8 <dwin_data+0x22a4>)
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	4619      	mov	r1, r3
 80076c0:	2015      	movs	r0, #21
 80076c2:	f7fb f887 	bl	80027d4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 80076c6:	2300      	movs	r3, #0
 80076c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80076cc:	e00a      	b.n	80076e4 <dwin_data+0x2190>
						DISPLAY_INPUT[a] = 0x00;
 80076ce:	4a46      	ldr	r2, [pc, #280]	@ (80077e8 <dwin_data+0x2294>)
 80076d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80076d4:	4413      	add	r3, r2
 80076d6:	2200      	movs	r2, #0
 80076d8:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 80076da:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80076de:	3301      	adds	r3, #1
 80076e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80076e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80076e8:	2b08      	cmp	r3, #8
 80076ea:	ddf0      	ble.n	80076ce <dwin_data+0x217a>
				if (P_peak_alarm_min_value==20){
 80076ec:	f000 bc4f 	b.w	8007f8e <dwin_data+0x2a3a>
				}
			}
			else if (((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA3) && (DISPLAY_INPUT[8]== 0x01))){
 80076f0:	4b3d      	ldr	r3, [pc, #244]	@ (80077e8 <dwin_data+0x2294>)
 80076f2:	791b      	ldrb	r3, [r3, #4]
 80076f4:	2b10      	cmp	r3, #16
 80076f6:	f040 844a 	bne.w	8007f8e <dwin_data+0x2a3a>
 80076fa:	4b3b      	ldr	r3, [pc, #236]	@ (80077e8 <dwin_data+0x2294>)
 80076fc:	795b      	ldrb	r3, [r3, #5]
 80076fe:	2ba3      	cmp	r3, #163	@ 0xa3
 8007700:	f040 8445 	bne.w	8007f8e <dwin_data+0x2a3a>
 8007704:	4b38      	ldr	r3, [pc, #224]	@ (80077e8 <dwin_data+0x2294>)
 8007706:	7a1b      	ldrb	r3, [r3, #8]
 8007708:	2b01      	cmp	r3, #1
 800770a:	f040 8440 	bne.w	8007f8e <dwin_data+0x2a3a>
				if (P_peak_alarm_min_value==0){
 800770e:	4b3a      	ldr	r3, [pc, #232]	@ (80077f8 <dwin_data+0x22a4>)
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d105      	bne.n	8007722 <dwin_data+0x21ce>
					P_peak_alarm_min_value = P_peak_alarm_min_value;
 8007716:	4b38      	ldr	r3, [pc, #224]	@ (80077f8 <dwin_data+0x22a4>)
 8007718:	781a      	ldrb	r2, [r3, #0]
 800771a:	4b37      	ldr	r3, [pc, #220]	@ (80077f8 <dwin_data+0x22a4>)
 800771c:	701a      	strb	r2, [r3, #0]
 800771e:	f000 bc36 	b.w	8007f8e <dwin_data+0x2a3a>
				}
				else{
					P_peak_alarm_min_value -= 1;
 8007722:	4b35      	ldr	r3, [pc, #212]	@ (80077f8 <dwin_data+0x22a4>)
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	3b01      	subs	r3, #1
 8007728:	b2da      	uxtb	r2, r3
 800772a:	4b33      	ldr	r3, [pc, #204]	@ (80077f8 <dwin_data+0x22a4>)
 800772c:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x15,P_peak_alarm_min_value);
 800772e:	4b32      	ldr	r3, [pc, #200]	@ (80077f8 <dwin_data+0x22a4>)
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	4619      	mov	r1, r3
 8007734:	2015      	movs	r0, #21
 8007736:	f7fb f84d 	bl	80027d4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 800773a:	2300      	movs	r3, #0
 800773c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007740:	e00a      	b.n	8007758 <dwin_data+0x2204>
						DISPLAY_INPUT[a] = 0x00;
 8007742:	4a29      	ldr	r2, [pc, #164]	@ (80077e8 <dwin_data+0x2294>)
 8007744:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007748:	4413      	add	r3, r2
 800774a:	2200      	movs	r2, #0
 800774c:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 800774e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007752:	3301      	adds	r3, #1
 8007754:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007758:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800775c:	2b08      	cmp	r3, #8
 800775e:	ddf0      	ble.n	8007742 <dwin_data+0x21ee>
 8007760:	f000 bc15 	b.w	8007f8e <dwin_data+0x2a3a>
				}
			}
		}
		else if (MV_alarm_max_flag == 1){
 8007764:	4b25      	ldr	r3, [pc, #148]	@ (80077fc <dwin_data+0x22a8>)
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	f000 8083 	beq.w	8007874 <dwin_data+0x2320>
			if(((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA2) && (DISPLAY_INPUT[8] == 0x01))){
 800776e:	4b1e      	ldr	r3, [pc, #120]	@ (80077e8 <dwin_data+0x2294>)
 8007770:	791b      	ldrb	r3, [r3, #4]
 8007772:	2b10      	cmp	r3, #16
 8007774:	d146      	bne.n	8007804 <dwin_data+0x22b0>
 8007776:	4b1c      	ldr	r3, [pc, #112]	@ (80077e8 <dwin_data+0x2294>)
 8007778:	795b      	ldrb	r3, [r3, #5]
 800777a:	2ba2      	cmp	r3, #162	@ 0xa2
 800777c:	d142      	bne.n	8007804 <dwin_data+0x22b0>
 800777e:	4b1a      	ldr	r3, [pc, #104]	@ (80077e8 <dwin_data+0x2294>)
 8007780:	7a1b      	ldrb	r3, [r3, #8]
 8007782:	2b01      	cmp	r3, #1
 8007784:	d13e      	bne.n	8007804 <dwin_data+0x22b0>
				if (MV_alarm_max_value==50){
 8007786:	4b1e      	ldr	r3, [pc, #120]	@ (8007800 <dwin_data+0x22ac>)
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	2b32      	cmp	r3, #50	@ 0x32
 800778c:	d104      	bne.n	8007798 <dwin_data+0x2244>
					MV_alarm_max_value = MV_alarm_max_value;
 800778e:	4b1c      	ldr	r3, [pc, #112]	@ (8007800 <dwin_data+0x22ac>)
 8007790:	781a      	ldrb	r2, [r3, #0]
 8007792:	4b1b      	ldr	r3, [pc, #108]	@ (8007800 <dwin_data+0x22ac>)
 8007794:	701a      	strb	r2, [r3, #0]
				if (MV_alarm_max_value==50){
 8007796:	e3fa      	b.n	8007f8e <dwin_data+0x2a3a>
				}
				else{
					MV_alarm_max_value +=1;
 8007798:	4b19      	ldr	r3, [pc, #100]	@ (8007800 <dwin_data+0x22ac>)
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	3301      	adds	r3, #1
 800779e:	b2da      	uxtb	r2, r3
 80077a0:	4b17      	ldr	r3, [pc, #92]	@ (8007800 <dwin_data+0x22ac>)
 80077a2:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x16,MV_alarm_max_value);
 80077a4:	4b16      	ldr	r3, [pc, #88]	@ (8007800 <dwin_data+0x22ac>)
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	4619      	mov	r1, r3
 80077aa:	2016      	movs	r0, #22
 80077ac:	f7fb f812 	bl	80027d4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 80077b0:	2300      	movs	r3, #0
 80077b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80077b6:	e00a      	b.n	80077ce <dwin_data+0x227a>
						DISPLAY_INPUT[a] = 0x00;
 80077b8:	4a0b      	ldr	r2, [pc, #44]	@ (80077e8 <dwin_data+0x2294>)
 80077ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80077be:	4413      	add	r3, r2
 80077c0:	2200      	movs	r2, #0
 80077c2:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 80077c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80077c8:	3301      	adds	r3, #1
 80077ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80077ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80077d2:	2b08      	cmp	r3, #8
 80077d4:	ddf0      	ble.n	80077b8 <dwin_data+0x2264>
				if (MV_alarm_max_value==50){
 80077d6:	e3da      	b.n	8007f8e <dwin_data+0x2a3a>
 80077d8:	200019c2 	.word	0x200019c2
 80077dc:	200019da 	.word	0x200019da
 80077e0:	20001144 	.word	0x20001144
 80077e4:	20001964 	.word	0x20001964
 80077e8:	20001938 	.word	0x20001938
 80077ec:	200019fc 	.word	0x200019fc
 80077f0:	20000050 	.word	0x20000050
 80077f4:	200019f7 	.word	0x200019f7
 80077f8:	200019e4 	.word	0x200019e4
 80077fc:	200019fd 	.word	0x200019fd
 8007800:	20000051 	.word	0x20000051
				}
			}
			else if (((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA3) && (DISPLAY_INPUT[8]== 0x01))){
 8007804:	4ba0      	ldr	r3, [pc, #640]	@ (8007a88 <dwin_data+0x2534>)
 8007806:	791b      	ldrb	r3, [r3, #4]
 8007808:	2b10      	cmp	r3, #16
 800780a:	f040 83c0 	bne.w	8007f8e <dwin_data+0x2a3a>
 800780e:	4b9e      	ldr	r3, [pc, #632]	@ (8007a88 <dwin_data+0x2534>)
 8007810:	795b      	ldrb	r3, [r3, #5]
 8007812:	2ba3      	cmp	r3, #163	@ 0xa3
 8007814:	f040 83bb 	bne.w	8007f8e <dwin_data+0x2a3a>
 8007818:	4b9b      	ldr	r3, [pc, #620]	@ (8007a88 <dwin_data+0x2534>)
 800781a:	7a1b      	ldrb	r3, [r3, #8]
 800781c:	2b01      	cmp	r3, #1
 800781e:	f040 83b6 	bne.w	8007f8e <dwin_data+0x2a3a>
				if (MV_alarm_max_value==3){
 8007822:	4b9a      	ldr	r3, [pc, #616]	@ (8007a8c <dwin_data+0x2538>)
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	2b03      	cmp	r3, #3
 8007828:	d104      	bne.n	8007834 <dwin_data+0x22e0>
					MV_alarm_max_value = MV_alarm_max_value;
 800782a:	4b98      	ldr	r3, [pc, #608]	@ (8007a8c <dwin_data+0x2538>)
 800782c:	781a      	ldrb	r2, [r3, #0]
 800782e:	4b97      	ldr	r3, [pc, #604]	@ (8007a8c <dwin_data+0x2538>)
 8007830:	701a      	strb	r2, [r3, #0]
 8007832:	e3ac      	b.n	8007f8e <dwin_data+0x2a3a>
				}
				else{
					MV_alarm_max_value -= 1;
 8007834:	4b95      	ldr	r3, [pc, #596]	@ (8007a8c <dwin_data+0x2538>)
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	3b01      	subs	r3, #1
 800783a:	b2da      	uxtb	r2, r3
 800783c:	4b93      	ldr	r3, [pc, #588]	@ (8007a8c <dwin_data+0x2538>)
 800783e:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x16,MV_alarm_max_value);
 8007840:	4b92      	ldr	r3, [pc, #584]	@ (8007a8c <dwin_data+0x2538>)
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	4619      	mov	r1, r3
 8007846:	2016      	movs	r0, #22
 8007848:	f7fa ffc4 	bl	80027d4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 800784c:	2300      	movs	r3, #0
 800784e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007852:	e00a      	b.n	800786a <dwin_data+0x2316>
						DISPLAY_INPUT[a] = 0x00;
 8007854:	4a8c      	ldr	r2, [pc, #560]	@ (8007a88 <dwin_data+0x2534>)
 8007856:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800785a:	4413      	add	r3, r2
 800785c:	2200      	movs	r2, #0
 800785e:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 8007860:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007864:	3301      	adds	r3, #1
 8007866:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800786a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800786e:	2b08      	cmp	r3, #8
 8007870:	ddf0      	ble.n	8007854 <dwin_data+0x2300>
 8007872:	e38c      	b.n	8007f8e <dwin_data+0x2a3a>
				}
			}
		}
		else if (MV_alarm_min_flag == 1){
 8007874:	4b86      	ldr	r3, [pc, #536]	@ (8007a90 <dwin_data+0x253c>)
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d06c      	beq.n	8007956 <dwin_data+0x2402>
			if(((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA2) && (DISPLAY_INPUT[8] == 0x01))){
 800787c:	4b82      	ldr	r3, [pc, #520]	@ (8007a88 <dwin_data+0x2534>)
 800787e:	791b      	ldrb	r3, [r3, #4]
 8007880:	2b10      	cmp	r3, #16
 8007882:	d130      	bne.n	80078e6 <dwin_data+0x2392>
 8007884:	4b80      	ldr	r3, [pc, #512]	@ (8007a88 <dwin_data+0x2534>)
 8007886:	795b      	ldrb	r3, [r3, #5]
 8007888:	2ba2      	cmp	r3, #162	@ 0xa2
 800788a:	d12c      	bne.n	80078e6 <dwin_data+0x2392>
 800788c:	4b7e      	ldr	r3, [pc, #504]	@ (8007a88 <dwin_data+0x2534>)
 800788e:	7a1b      	ldrb	r3, [r3, #8]
 8007890:	2b01      	cmp	r3, #1
 8007892:	d128      	bne.n	80078e6 <dwin_data+0x2392>
				if(MV_alarm_min_value==47){
 8007894:	4b7f      	ldr	r3, [pc, #508]	@ (8007a94 <dwin_data+0x2540>)
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	2b2f      	cmp	r3, #47	@ 0x2f
 800789a:	d104      	bne.n	80078a6 <dwin_data+0x2352>
					MV_alarm_min_value = MV_alarm_min_value;
 800789c:	4b7d      	ldr	r3, [pc, #500]	@ (8007a94 <dwin_data+0x2540>)
 800789e:	781a      	ldrb	r2, [r3, #0]
 80078a0:	4b7c      	ldr	r3, [pc, #496]	@ (8007a94 <dwin_data+0x2540>)
 80078a2:	701a      	strb	r2, [r3, #0]
				if(MV_alarm_min_value==47){
 80078a4:	e373      	b.n	8007f8e <dwin_data+0x2a3a>
				}
				else{
					MV_alarm_min_value +=1;
 80078a6:	4b7b      	ldr	r3, [pc, #492]	@ (8007a94 <dwin_data+0x2540>)
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	3301      	adds	r3, #1
 80078ac:	b2da      	uxtb	r2, r3
 80078ae:	4b79      	ldr	r3, [pc, #484]	@ (8007a94 <dwin_data+0x2540>)
 80078b0:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x17,MV_alarm_min_value);
 80078b2:	4b78      	ldr	r3, [pc, #480]	@ (8007a94 <dwin_data+0x2540>)
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	4619      	mov	r1, r3
 80078b8:	2017      	movs	r0, #23
 80078ba:	f7fa ff8b 	bl	80027d4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 80078be:	2300      	movs	r3, #0
 80078c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80078c4:	e00a      	b.n	80078dc <dwin_data+0x2388>
						DISPLAY_INPUT[a] = 0x00;
 80078c6:	4a70      	ldr	r2, [pc, #448]	@ (8007a88 <dwin_data+0x2534>)
 80078c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80078cc:	4413      	add	r3, r2
 80078ce:	2200      	movs	r2, #0
 80078d0:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 80078d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80078d6:	3301      	adds	r3, #1
 80078d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80078dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80078e0:	2b08      	cmp	r3, #8
 80078e2:	ddf0      	ble.n	80078c6 <dwin_data+0x2372>
				if(MV_alarm_min_value==47){
 80078e4:	e353      	b.n	8007f8e <dwin_data+0x2a3a>
				}
			}
			else if (((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA3) && (DISPLAY_INPUT[8]== 0x01))){
 80078e6:	4b68      	ldr	r3, [pc, #416]	@ (8007a88 <dwin_data+0x2534>)
 80078e8:	791b      	ldrb	r3, [r3, #4]
 80078ea:	2b10      	cmp	r3, #16
 80078ec:	f040 834f 	bne.w	8007f8e <dwin_data+0x2a3a>
 80078f0:	4b65      	ldr	r3, [pc, #404]	@ (8007a88 <dwin_data+0x2534>)
 80078f2:	795b      	ldrb	r3, [r3, #5]
 80078f4:	2ba3      	cmp	r3, #163	@ 0xa3
 80078f6:	f040 834a 	bne.w	8007f8e <dwin_data+0x2a3a>
 80078fa:	4b63      	ldr	r3, [pc, #396]	@ (8007a88 <dwin_data+0x2534>)
 80078fc:	7a1b      	ldrb	r3, [r3, #8]
 80078fe:	2b01      	cmp	r3, #1
 8007900:	f040 8345 	bne.w	8007f8e <dwin_data+0x2a3a>
				if(MV_alarm_min_value==0){
 8007904:	4b63      	ldr	r3, [pc, #396]	@ (8007a94 <dwin_data+0x2540>)
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d104      	bne.n	8007916 <dwin_data+0x23c2>
					MV_alarm_min_value = MV_alarm_min_value;
 800790c:	4b61      	ldr	r3, [pc, #388]	@ (8007a94 <dwin_data+0x2540>)
 800790e:	781a      	ldrb	r2, [r3, #0]
 8007910:	4b60      	ldr	r3, [pc, #384]	@ (8007a94 <dwin_data+0x2540>)
 8007912:	701a      	strb	r2, [r3, #0]
 8007914:	e33b      	b.n	8007f8e <dwin_data+0x2a3a>
				}
				else{
					MV_alarm_min_value -= 1;
 8007916:	4b5f      	ldr	r3, [pc, #380]	@ (8007a94 <dwin_data+0x2540>)
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	3b01      	subs	r3, #1
 800791c:	b2da      	uxtb	r2, r3
 800791e:	4b5d      	ldr	r3, [pc, #372]	@ (8007a94 <dwin_data+0x2540>)
 8007920:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x17,MV_alarm_min_value);
 8007922:	4b5c      	ldr	r3, [pc, #368]	@ (8007a94 <dwin_data+0x2540>)
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	4619      	mov	r1, r3
 8007928:	2017      	movs	r0, #23
 800792a:	f7fa ff53 	bl	80027d4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 800792e:	2300      	movs	r3, #0
 8007930:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007934:	e00a      	b.n	800794c <dwin_data+0x23f8>
						DISPLAY_INPUT[a] = 0x00;
 8007936:	4a54      	ldr	r2, [pc, #336]	@ (8007a88 <dwin_data+0x2534>)
 8007938:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800793c:	4413      	add	r3, r2
 800793e:	2200      	movs	r2, #0
 8007940:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 8007942:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007946:	3301      	adds	r3, #1
 8007948:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800794c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007950:	2b08      	cmp	r3, #8
 8007952:	ddf0      	ble.n	8007936 <dwin_data+0x23e2>
 8007954:	e31b      	b.n	8007f8e <dwin_data+0x2a3a>
				}
			}
		}
		else if (RR_alarm_max_flag == 1){
 8007956:	4b50      	ldr	r3, [pc, #320]	@ (8007a98 <dwin_data+0x2544>)
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d06c      	beq.n	8007a38 <dwin_data+0x24e4>
			if(((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA2) && (DISPLAY_INPUT[8] == 0x01))){
 800795e:	4b4a      	ldr	r3, [pc, #296]	@ (8007a88 <dwin_data+0x2534>)
 8007960:	791b      	ldrb	r3, [r3, #4]
 8007962:	2b10      	cmp	r3, #16
 8007964:	d130      	bne.n	80079c8 <dwin_data+0x2474>
 8007966:	4b48      	ldr	r3, [pc, #288]	@ (8007a88 <dwin_data+0x2534>)
 8007968:	795b      	ldrb	r3, [r3, #5]
 800796a:	2ba2      	cmp	r3, #162	@ 0xa2
 800796c:	d12c      	bne.n	80079c8 <dwin_data+0x2474>
 800796e:	4b46      	ldr	r3, [pc, #280]	@ (8007a88 <dwin_data+0x2534>)
 8007970:	7a1b      	ldrb	r3, [r3, #8]
 8007972:	2b01      	cmp	r3, #1
 8007974:	d128      	bne.n	80079c8 <dwin_data+0x2474>
				if(RR_alarm_max_value==60){
 8007976:	4b49      	ldr	r3, [pc, #292]	@ (8007a9c <dwin_data+0x2548>)
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	2b3c      	cmp	r3, #60	@ 0x3c
 800797c:	d104      	bne.n	8007988 <dwin_data+0x2434>
					RR_alarm_max_value = RR_alarm_max_value;
 800797e:	4b47      	ldr	r3, [pc, #284]	@ (8007a9c <dwin_data+0x2548>)
 8007980:	781a      	ldrb	r2, [r3, #0]
 8007982:	4b46      	ldr	r3, [pc, #280]	@ (8007a9c <dwin_data+0x2548>)
 8007984:	701a      	strb	r2, [r3, #0]
				if(RR_alarm_max_value==60){
 8007986:	e302      	b.n	8007f8e <dwin_data+0x2a3a>
				}
				else{
					RR_alarm_max_value +=1;
 8007988:	4b44      	ldr	r3, [pc, #272]	@ (8007a9c <dwin_data+0x2548>)
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	3301      	adds	r3, #1
 800798e:	b2da      	uxtb	r2, r3
 8007990:	4b42      	ldr	r3, [pc, #264]	@ (8007a9c <dwin_data+0x2548>)
 8007992:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x18,RR_alarm_max_value);
 8007994:	4b41      	ldr	r3, [pc, #260]	@ (8007a9c <dwin_data+0x2548>)
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	4619      	mov	r1, r3
 800799a:	2018      	movs	r0, #24
 800799c:	f7fa ff1a 	bl	80027d4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 80079a0:	2300      	movs	r3, #0
 80079a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80079a6:	e00a      	b.n	80079be <dwin_data+0x246a>
						DISPLAY_INPUT[a] = 0x00;
 80079a8:	4a37      	ldr	r2, [pc, #220]	@ (8007a88 <dwin_data+0x2534>)
 80079aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80079ae:	4413      	add	r3, r2
 80079b0:	2200      	movs	r2, #0
 80079b2:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 80079b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80079b8:	3301      	adds	r3, #1
 80079ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80079be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80079c2:	2b08      	cmp	r3, #8
 80079c4:	ddf0      	ble.n	80079a8 <dwin_data+0x2454>
				if(RR_alarm_max_value==60){
 80079c6:	e2e2      	b.n	8007f8e <dwin_data+0x2a3a>
				}
			}
			else if (((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA3) && (DISPLAY_INPUT[8]== 0x01))){
 80079c8:	4b2f      	ldr	r3, [pc, #188]	@ (8007a88 <dwin_data+0x2534>)
 80079ca:	791b      	ldrb	r3, [r3, #4]
 80079cc:	2b10      	cmp	r3, #16
 80079ce:	f040 82de 	bne.w	8007f8e <dwin_data+0x2a3a>
 80079d2:	4b2d      	ldr	r3, [pc, #180]	@ (8007a88 <dwin_data+0x2534>)
 80079d4:	795b      	ldrb	r3, [r3, #5]
 80079d6:	2ba3      	cmp	r3, #163	@ 0xa3
 80079d8:	f040 82d9 	bne.w	8007f8e <dwin_data+0x2a3a>
 80079dc:	4b2a      	ldr	r3, [pc, #168]	@ (8007a88 <dwin_data+0x2534>)
 80079de:	7a1b      	ldrb	r3, [r3, #8]
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	f040 82d4 	bne.w	8007f8e <dwin_data+0x2a3a>
				if(RR_alarm_max_value==8){
 80079e6:	4b2d      	ldr	r3, [pc, #180]	@ (8007a9c <dwin_data+0x2548>)
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	2b08      	cmp	r3, #8
 80079ec:	d104      	bne.n	80079f8 <dwin_data+0x24a4>
					RR_alarm_max_value = RR_alarm_max_value;
 80079ee:	4b2b      	ldr	r3, [pc, #172]	@ (8007a9c <dwin_data+0x2548>)
 80079f0:	781a      	ldrb	r2, [r3, #0]
 80079f2:	4b2a      	ldr	r3, [pc, #168]	@ (8007a9c <dwin_data+0x2548>)
 80079f4:	701a      	strb	r2, [r3, #0]
 80079f6:	e2ca      	b.n	8007f8e <dwin_data+0x2a3a>
				}
				else{
					RR_alarm_max_value -= 1;
 80079f8:	4b28      	ldr	r3, [pc, #160]	@ (8007a9c <dwin_data+0x2548>)
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	3b01      	subs	r3, #1
 80079fe:	b2da      	uxtb	r2, r3
 8007a00:	4b26      	ldr	r3, [pc, #152]	@ (8007a9c <dwin_data+0x2548>)
 8007a02:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x18,RR_alarm_max_value);
 8007a04:	4b25      	ldr	r3, [pc, #148]	@ (8007a9c <dwin_data+0x2548>)
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	4619      	mov	r1, r3
 8007a0a:	2018      	movs	r0, #24
 8007a0c:	f7fa fee2 	bl	80027d4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 8007a10:	2300      	movs	r3, #0
 8007a12:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007a16:	e00a      	b.n	8007a2e <dwin_data+0x24da>
						DISPLAY_INPUT[a] = 0x00;
 8007a18:	4a1b      	ldr	r2, [pc, #108]	@ (8007a88 <dwin_data+0x2534>)
 8007a1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007a1e:	4413      	add	r3, r2
 8007a20:	2200      	movs	r2, #0
 8007a22:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 8007a24:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007a28:	3301      	adds	r3, #1
 8007a2a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007a2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007a32:	2b08      	cmp	r3, #8
 8007a34:	ddf0      	ble.n	8007a18 <dwin_data+0x24c4>
 8007a36:	e2aa      	b.n	8007f8e <dwin_data+0x2a3a>
				}
			}
		}
		else if (RR_alarm_min_flag == 1){
 8007a38:	4b19      	ldr	r3, [pc, #100]	@ (8007aa0 <dwin_data+0x254c>)
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d072      	beq.n	8007b26 <dwin_data+0x25d2>
			if(((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA2) && (DISPLAY_INPUT[8] == 0x01))){
 8007a40:	4b11      	ldr	r3, [pc, #68]	@ (8007a88 <dwin_data+0x2534>)
 8007a42:	791b      	ldrb	r3, [r3, #4]
 8007a44:	2b10      	cmp	r3, #16
 8007a46:	d13b      	bne.n	8007ac0 <dwin_data+0x256c>
 8007a48:	4b0f      	ldr	r3, [pc, #60]	@ (8007a88 <dwin_data+0x2534>)
 8007a4a:	795b      	ldrb	r3, [r3, #5]
 8007a4c:	2ba2      	cmp	r3, #162	@ 0xa2
 8007a4e:	d137      	bne.n	8007ac0 <dwin_data+0x256c>
 8007a50:	4b0d      	ldr	r3, [pc, #52]	@ (8007a88 <dwin_data+0x2534>)
 8007a52:	7a1b      	ldrb	r3, [r3, #8]
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d133      	bne.n	8007ac0 <dwin_data+0x256c>
				if (RR_alarm_min_value==8){
 8007a58:	4b12      	ldr	r3, [pc, #72]	@ (8007aa4 <dwin_data+0x2550>)
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	2b08      	cmp	r3, #8
 8007a5e:	d104      	bne.n	8007a6a <dwin_data+0x2516>
					RR_alarm_min_value = RR_alarm_min_value;
 8007a60:	4b10      	ldr	r3, [pc, #64]	@ (8007aa4 <dwin_data+0x2550>)
 8007a62:	781a      	ldrb	r2, [r3, #0]
 8007a64:	4b0f      	ldr	r3, [pc, #60]	@ (8007aa4 <dwin_data+0x2550>)
 8007a66:	701a      	strb	r2, [r3, #0]
				if (RR_alarm_min_value==8){
 8007a68:	e291      	b.n	8007f8e <dwin_data+0x2a3a>
				}
				else{
					RR_alarm_min_value +=1;
 8007a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8007aa4 <dwin_data+0x2550>)
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	3301      	adds	r3, #1
 8007a70:	b2da      	uxtb	r2, r3
 8007a72:	4b0c      	ldr	r3, [pc, #48]	@ (8007aa4 <dwin_data+0x2550>)
 8007a74:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x19,RR_alarm_min_value);
 8007a76:	4b0b      	ldr	r3, [pc, #44]	@ (8007aa4 <dwin_data+0x2550>)
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	2019      	movs	r0, #25
 8007a7e:	f7fa fea9 	bl	80027d4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 8007a82:	2300      	movs	r3, #0
 8007a84:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007a86:	e017      	b.n	8007ab8 <dwin_data+0x2564>
 8007a88:	20001938 	.word	0x20001938
 8007a8c:	20000051 	.word	0x20000051
 8007a90:	200019f8 	.word	0x200019f8
 8007a94:	200019e5 	.word	0x200019e5
 8007a98:	200019fe 	.word	0x200019fe
 8007a9c:	20000052 	.word	0x20000052
 8007aa0:	200019f9 	.word	0x200019f9
 8007aa4:	2000004d 	.word	0x2000004d
						DISPLAY_INPUT[a] = 0x00;
 8007aa8:	4a92      	ldr	r2, [pc, #584]	@ (8007cf4 <dwin_data+0x27a0>)
 8007aaa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007aac:	4413      	add	r3, r2
 8007aae:	2200      	movs	r2, #0
 8007ab0:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 8007ab2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007ab8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007aba:	2b08      	cmp	r3, #8
 8007abc:	ddf4      	ble.n	8007aa8 <dwin_data+0x2554>
				if (RR_alarm_min_value==8){
 8007abe:	e266      	b.n	8007f8e <dwin_data+0x2a3a>
				}
			}
			else if (((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA3) && (DISPLAY_INPUT[8]== 0x01))){
 8007ac0:	4b8c      	ldr	r3, [pc, #560]	@ (8007cf4 <dwin_data+0x27a0>)
 8007ac2:	791b      	ldrb	r3, [r3, #4]
 8007ac4:	2b10      	cmp	r3, #16
 8007ac6:	f040 8262 	bne.w	8007f8e <dwin_data+0x2a3a>
 8007aca:	4b8a      	ldr	r3, [pc, #552]	@ (8007cf4 <dwin_data+0x27a0>)
 8007acc:	795b      	ldrb	r3, [r3, #5]
 8007ace:	2ba3      	cmp	r3, #163	@ 0xa3
 8007ad0:	f040 825d 	bne.w	8007f8e <dwin_data+0x2a3a>
 8007ad4:	4b87      	ldr	r3, [pc, #540]	@ (8007cf4 <dwin_data+0x27a0>)
 8007ad6:	7a1b      	ldrb	r3, [r3, #8]
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	f040 8258 	bne.w	8007f8e <dwin_data+0x2a3a>
				if(RR_alarm_min_value==0){
 8007ade:	4b86      	ldr	r3, [pc, #536]	@ (8007cf8 <dwin_data+0x27a4>)
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d104      	bne.n	8007af0 <dwin_data+0x259c>
					RR_alarm_min_value = RR_alarm_min_value;
 8007ae6:	4b84      	ldr	r3, [pc, #528]	@ (8007cf8 <dwin_data+0x27a4>)
 8007ae8:	781a      	ldrb	r2, [r3, #0]
 8007aea:	4b83      	ldr	r3, [pc, #524]	@ (8007cf8 <dwin_data+0x27a4>)
 8007aec:	701a      	strb	r2, [r3, #0]
 8007aee:	e24e      	b.n	8007f8e <dwin_data+0x2a3a>
				}
				else{
					RR_alarm_min_value -= 1;
 8007af0:	4b81      	ldr	r3, [pc, #516]	@ (8007cf8 <dwin_data+0x27a4>)
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	3b01      	subs	r3, #1
 8007af6:	b2da      	uxtb	r2, r3
 8007af8:	4b7f      	ldr	r3, [pc, #508]	@ (8007cf8 <dwin_data+0x27a4>)
 8007afa:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x19,RR_alarm_min_value);
 8007afc:	4b7e      	ldr	r3, [pc, #504]	@ (8007cf8 <dwin_data+0x27a4>)
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	4619      	mov	r1, r3
 8007b02:	2019      	movs	r0, #25
 8007b04:	f7fa fe66 	bl	80027d4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 8007b08:	2300      	movs	r3, #0
 8007b0a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007b0c:	e007      	b.n	8007b1e <dwin_data+0x25ca>
						DISPLAY_INPUT[a] = 0x00;
 8007b0e:	4a79      	ldr	r2, [pc, #484]	@ (8007cf4 <dwin_data+0x27a0>)
 8007b10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b12:	4413      	add	r3, r2
 8007b14:	2200      	movs	r2, #0
 8007b16:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 8007b18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007b1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b20:	2b08      	cmp	r3, #8
 8007b22:	ddf4      	ble.n	8007b0e <dwin_data+0x25ba>
 8007b24:	e233      	b.n	8007f8e <dwin_data+0x2a3a>
				}
			}
		}
		else if (peep_alarm_max_flag == 1){
 8007b26:	4b75      	ldr	r3, [pc, #468]	@ (8007cfc <dwin_data+0x27a8>)
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d062      	beq.n	8007bf4 <dwin_data+0x26a0>
			if(((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA2) && (DISPLAY_INPUT[8] == 0x01))){
 8007b2e:	4b71      	ldr	r3, [pc, #452]	@ (8007cf4 <dwin_data+0x27a0>)
 8007b30:	791b      	ldrb	r3, [r3, #4]
 8007b32:	2b10      	cmp	r3, #16
 8007b34:	d12b      	bne.n	8007b8e <dwin_data+0x263a>
 8007b36:	4b6f      	ldr	r3, [pc, #444]	@ (8007cf4 <dwin_data+0x27a0>)
 8007b38:	795b      	ldrb	r3, [r3, #5]
 8007b3a:	2ba2      	cmp	r3, #162	@ 0xa2
 8007b3c:	d127      	bne.n	8007b8e <dwin_data+0x263a>
 8007b3e:	4b6d      	ldr	r3, [pc, #436]	@ (8007cf4 <dwin_data+0x27a0>)
 8007b40:	7a1b      	ldrb	r3, [r3, #8]
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d123      	bne.n	8007b8e <dwin_data+0x263a>
				if (peep_alarm_max_value==30){
 8007b46:	4b6e      	ldr	r3, [pc, #440]	@ (8007d00 <dwin_data+0x27ac>)
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	2b1e      	cmp	r3, #30
 8007b4c:	d104      	bne.n	8007b58 <dwin_data+0x2604>
					peep_alarm_max_value = peep_alarm_max_value;
 8007b4e:	4b6c      	ldr	r3, [pc, #432]	@ (8007d00 <dwin_data+0x27ac>)
 8007b50:	781a      	ldrb	r2, [r3, #0]
 8007b52:	4b6b      	ldr	r3, [pc, #428]	@ (8007d00 <dwin_data+0x27ac>)
 8007b54:	701a      	strb	r2, [r3, #0]
				if (peep_alarm_max_value==30){
 8007b56:	e21a      	b.n	8007f8e <dwin_data+0x2a3a>
				}
				else{
					peep_alarm_max_value +=1;
 8007b58:	4b69      	ldr	r3, [pc, #420]	@ (8007d00 <dwin_data+0x27ac>)
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	3301      	adds	r3, #1
 8007b5e:	b2da      	uxtb	r2, r3
 8007b60:	4b67      	ldr	r3, [pc, #412]	@ (8007d00 <dwin_data+0x27ac>)
 8007b62:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x1A,peep_alarm_max_value);
 8007b64:	4b66      	ldr	r3, [pc, #408]	@ (8007d00 <dwin_data+0x27ac>)
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	4619      	mov	r1, r3
 8007b6a:	201a      	movs	r0, #26
 8007b6c:	f7fa fe32 	bl	80027d4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 8007b70:	2300      	movs	r3, #0
 8007b72:	677b      	str	r3, [r7, #116]	@ 0x74
 8007b74:	e007      	b.n	8007b86 <dwin_data+0x2632>
						DISPLAY_INPUT[a] = 0x00;
 8007b76:	4a5f      	ldr	r2, [pc, #380]	@ (8007cf4 <dwin_data+0x27a0>)
 8007b78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b7a:	4413      	add	r3, r2
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 8007b80:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b82:	3301      	adds	r3, #1
 8007b84:	677b      	str	r3, [r7, #116]	@ 0x74
 8007b86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b88:	2b08      	cmp	r3, #8
 8007b8a:	ddf4      	ble.n	8007b76 <dwin_data+0x2622>
				if (peep_alarm_max_value==30){
 8007b8c:	e1ff      	b.n	8007f8e <dwin_data+0x2a3a>
				}
			}
			else if (((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA3) && (DISPLAY_INPUT[8]== 0x01))){
 8007b8e:	4b59      	ldr	r3, [pc, #356]	@ (8007cf4 <dwin_data+0x27a0>)
 8007b90:	791b      	ldrb	r3, [r3, #4]
 8007b92:	2b10      	cmp	r3, #16
 8007b94:	f040 81fb 	bne.w	8007f8e <dwin_data+0x2a3a>
 8007b98:	4b56      	ldr	r3, [pc, #344]	@ (8007cf4 <dwin_data+0x27a0>)
 8007b9a:	795b      	ldrb	r3, [r3, #5]
 8007b9c:	2ba3      	cmp	r3, #163	@ 0xa3
 8007b9e:	f040 81f6 	bne.w	8007f8e <dwin_data+0x2a3a>
 8007ba2:	4b54      	ldr	r3, [pc, #336]	@ (8007cf4 <dwin_data+0x27a0>)
 8007ba4:	7a1b      	ldrb	r3, [r3, #8]
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	f040 81f1 	bne.w	8007f8e <dwin_data+0x2a3a>
				if (peep_alarm_max_value==10){
 8007bac:	4b54      	ldr	r3, [pc, #336]	@ (8007d00 <dwin_data+0x27ac>)
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	2b0a      	cmp	r3, #10
 8007bb2:	d104      	bne.n	8007bbe <dwin_data+0x266a>
					peep_alarm_max_value = peep_alarm_max_value;
 8007bb4:	4b52      	ldr	r3, [pc, #328]	@ (8007d00 <dwin_data+0x27ac>)
 8007bb6:	781a      	ldrb	r2, [r3, #0]
 8007bb8:	4b51      	ldr	r3, [pc, #324]	@ (8007d00 <dwin_data+0x27ac>)
 8007bba:	701a      	strb	r2, [r3, #0]
 8007bbc:	e1e7      	b.n	8007f8e <dwin_data+0x2a3a>
				}
				else{
					peep_alarm_max_value -= 1;
 8007bbe:	4b50      	ldr	r3, [pc, #320]	@ (8007d00 <dwin_data+0x27ac>)
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	3b01      	subs	r3, #1
 8007bc4:	b2da      	uxtb	r2, r3
 8007bc6:	4b4e      	ldr	r3, [pc, #312]	@ (8007d00 <dwin_data+0x27ac>)
 8007bc8:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x1A,peep_alarm_max_value);
 8007bca:	4b4d      	ldr	r3, [pc, #308]	@ (8007d00 <dwin_data+0x27ac>)
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	4619      	mov	r1, r3
 8007bd0:	201a      	movs	r0, #26
 8007bd2:	f7fa fdff 	bl	80027d4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	673b      	str	r3, [r7, #112]	@ 0x70
 8007bda:	e007      	b.n	8007bec <dwin_data+0x2698>
						DISPLAY_INPUT[a] = 0x00;
 8007bdc:	4a45      	ldr	r2, [pc, #276]	@ (8007cf4 <dwin_data+0x27a0>)
 8007bde:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007be0:	4413      	add	r3, r2
 8007be2:	2200      	movs	r2, #0
 8007be4:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 8007be6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007be8:	3301      	adds	r3, #1
 8007bea:	673b      	str	r3, [r7, #112]	@ 0x70
 8007bec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007bee:	2b08      	cmp	r3, #8
 8007bf0:	ddf4      	ble.n	8007bdc <dwin_data+0x2688>
 8007bf2:	e1cc      	b.n	8007f8e <dwin_data+0x2a3a>
				}
			}
		}
		else if (peep_alarm_min_flag == 1){
 8007bf4:	4b43      	ldr	r3, [pc, #268]	@ (8007d04 <dwin_data+0x27b0>)
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d062      	beq.n	8007cc2 <dwin_data+0x276e>
			if(((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA2) && (DISPLAY_INPUT[8] == 0x01))){
 8007bfc:	4b3d      	ldr	r3, [pc, #244]	@ (8007cf4 <dwin_data+0x27a0>)
 8007bfe:	791b      	ldrb	r3, [r3, #4]
 8007c00:	2b10      	cmp	r3, #16
 8007c02:	d12b      	bne.n	8007c5c <dwin_data+0x2708>
 8007c04:	4b3b      	ldr	r3, [pc, #236]	@ (8007cf4 <dwin_data+0x27a0>)
 8007c06:	795b      	ldrb	r3, [r3, #5]
 8007c08:	2ba2      	cmp	r3, #162	@ 0xa2
 8007c0a:	d127      	bne.n	8007c5c <dwin_data+0x2708>
 8007c0c:	4b39      	ldr	r3, [pc, #228]	@ (8007cf4 <dwin_data+0x27a0>)
 8007c0e:	7a1b      	ldrb	r3, [r3, #8]
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d123      	bne.n	8007c5c <dwin_data+0x2708>
				if (peep_alarm_min_value==10){
 8007c14:	4b3c      	ldr	r3, [pc, #240]	@ (8007d08 <dwin_data+0x27b4>)
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	2b0a      	cmp	r3, #10
 8007c1a:	d104      	bne.n	8007c26 <dwin_data+0x26d2>
					peep_alarm_min_value = peep_alarm_min_value;
 8007c1c:	4b3a      	ldr	r3, [pc, #232]	@ (8007d08 <dwin_data+0x27b4>)
 8007c1e:	781a      	ldrb	r2, [r3, #0]
 8007c20:	4b39      	ldr	r3, [pc, #228]	@ (8007d08 <dwin_data+0x27b4>)
 8007c22:	701a      	strb	r2, [r3, #0]
				if (peep_alarm_min_value==10){
 8007c24:	e1b3      	b.n	8007f8e <dwin_data+0x2a3a>
				}
				else{
					peep_alarm_min_value +=1;
 8007c26:	4b38      	ldr	r3, [pc, #224]	@ (8007d08 <dwin_data+0x27b4>)
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	b2da      	uxtb	r2, r3
 8007c2e:	4b36      	ldr	r3, [pc, #216]	@ (8007d08 <dwin_data+0x27b4>)
 8007c30:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x21,peep_alarm_min_value);
 8007c32:	4b35      	ldr	r3, [pc, #212]	@ (8007d08 <dwin_data+0x27b4>)
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	4619      	mov	r1, r3
 8007c38:	2021      	movs	r0, #33	@ 0x21
 8007c3a:	f7fa fdcb 	bl	80027d4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 8007c3e:	2300      	movs	r3, #0
 8007c40:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007c42:	e007      	b.n	8007c54 <dwin_data+0x2700>
						DISPLAY_INPUT[a] = 0x00;
 8007c44:	4a2b      	ldr	r2, [pc, #172]	@ (8007cf4 <dwin_data+0x27a0>)
 8007c46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c48:	4413      	add	r3, r2
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 8007c4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c50:	3301      	adds	r3, #1
 8007c52:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007c54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c56:	2b08      	cmp	r3, #8
 8007c58:	ddf4      	ble.n	8007c44 <dwin_data+0x26f0>
				if (peep_alarm_min_value==10){
 8007c5a:	e198      	b.n	8007f8e <dwin_data+0x2a3a>
				}
			}
			else if (((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA3) && (DISPLAY_INPUT[8]== 0x01))){
 8007c5c:	4b25      	ldr	r3, [pc, #148]	@ (8007cf4 <dwin_data+0x27a0>)
 8007c5e:	791b      	ldrb	r3, [r3, #4]
 8007c60:	2b10      	cmp	r3, #16
 8007c62:	f040 8194 	bne.w	8007f8e <dwin_data+0x2a3a>
 8007c66:	4b23      	ldr	r3, [pc, #140]	@ (8007cf4 <dwin_data+0x27a0>)
 8007c68:	795b      	ldrb	r3, [r3, #5]
 8007c6a:	2ba3      	cmp	r3, #163	@ 0xa3
 8007c6c:	f040 818f 	bne.w	8007f8e <dwin_data+0x2a3a>
 8007c70:	4b20      	ldr	r3, [pc, #128]	@ (8007cf4 <dwin_data+0x27a0>)
 8007c72:	7a1b      	ldrb	r3, [r3, #8]
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	f040 818a 	bne.w	8007f8e <dwin_data+0x2a3a>
				if (peep_alarm_min_value==0){
 8007c7a:	4b23      	ldr	r3, [pc, #140]	@ (8007d08 <dwin_data+0x27b4>)
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d104      	bne.n	8007c8c <dwin_data+0x2738>
					peep_alarm_min_value = peep_alarm_min_value;
 8007c82:	4b21      	ldr	r3, [pc, #132]	@ (8007d08 <dwin_data+0x27b4>)
 8007c84:	781a      	ldrb	r2, [r3, #0]
 8007c86:	4b20      	ldr	r3, [pc, #128]	@ (8007d08 <dwin_data+0x27b4>)
 8007c88:	701a      	strb	r2, [r3, #0]
 8007c8a:	e180      	b.n	8007f8e <dwin_data+0x2a3a>
				}
				else{
					peep_alarm_min_value -= 1;
 8007c8c:	4b1e      	ldr	r3, [pc, #120]	@ (8007d08 <dwin_data+0x27b4>)
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	3b01      	subs	r3, #1
 8007c92:	b2da      	uxtb	r2, r3
 8007c94:	4b1c      	ldr	r3, [pc, #112]	@ (8007d08 <dwin_data+0x27b4>)
 8007c96:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x21,peep_alarm_min_value);
 8007c98:	4b1b      	ldr	r3, [pc, #108]	@ (8007d08 <dwin_data+0x27b4>)
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	2021      	movs	r0, #33	@ 0x21
 8007ca0:	f7fa fd98 	bl	80027d4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007ca8:	e007      	b.n	8007cba <dwin_data+0x2766>
						DISPLAY_INPUT[a] = 0x00;
 8007caa:	4a12      	ldr	r2, [pc, #72]	@ (8007cf4 <dwin_data+0x27a0>)
 8007cac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007cae:	4413      	add	r3, r2
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 8007cb4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007cba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007cbc:	2b08      	cmp	r3, #8
 8007cbe:	ddf4      	ble.n	8007caa <dwin_data+0x2756>
 8007cc0:	e165      	b.n	8007f8e <dwin_data+0x2a3a>
				}
			}
		}
		else if (O2_alarm_max_flag == 1){
 8007cc2:	4b12      	ldr	r3, [pc, #72]	@ (8007d0c <dwin_data+0x27b8>)
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d072      	beq.n	8007db0 <dwin_data+0x285c>
			if(((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA2) && (DISPLAY_INPUT[8] == 0x01))){
 8007cca:	4b0a      	ldr	r3, [pc, #40]	@ (8007cf4 <dwin_data+0x27a0>)
 8007ccc:	791b      	ldrb	r3, [r3, #4]
 8007cce:	2b10      	cmp	r3, #16
 8007cd0:	d13b      	bne.n	8007d4a <dwin_data+0x27f6>
 8007cd2:	4b08      	ldr	r3, [pc, #32]	@ (8007cf4 <dwin_data+0x27a0>)
 8007cd4:	795b      	ldrb	r3, [r3, #5]
 8007cd6:	2ba2      	cmp	r3, #162	@ 0xa2
 8007cd8:	d137      	bne.n	8007d4a <dwin_data+0x27f6>
 8007cda:	4b06      	ldr	r3, [pc, #24]	@ (8007cf4 <dwin_data+0x27a0>)
 8007cdc:	7a1b      	ldrb	r3, [r3, #8]
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d133      	bne.n	8007d4a <dwin_data+0x27f6>
				if (O2_alarm_max_value==100){
 8007ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8007d10 <dwin_data+0x27bc>)
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	2b64      	cmp	r3, #100	@ 0x64
 8007ce8:	d114      	bne.n	8007d14 <dwin_data+0x27c0>
					O2_alarm_max_value = O2_alarm_max_value;
 8007cea:	4b09      	ldr	r3, [pc, #36]	@ (8007d10 <dwin_data+0x27bc>)
 8007cec:	781a      	ldrb	r2, [r3, #0]
 8007cee:	4b08      	ldr	r3, [pc, #32]	@ (8007d10 <dwin_data+0x27bc>)
 8007cf0:	701a      	strb	r2, [r3, #0]
				if (O2_alarm_max_value==100){
 8007cf2:	e14c      	b.n	8007f8e <dwin_data+0x2a3a>
 8007cf4:	20001938 	.word	0x20001938
 8007cf8:	2000004d 	.word	0x2000004d
 8007cfc:	200019ff 	.word	0x200019ff
 8007d00:	20000053 	.word	0x20000053
 8007d04:	200019fa 	.word	0x200019fa
 8007d08:	2000004e 	.word	0x2000004e
 8007d0c:	20001a00 	.word	0x20001a00
 8007d10:	20000054 	.word	0x20000054
				}
				else{
					O2_alarm_max_value +=1;
 8007d14:	4b8f      	ldr	r3, [pc, #572]	@ (8007f54 <dwin_data+0x2a00>)
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	3301      	adds	r3, #1
 8007d1a:	b2da      	uxtb	r2, r3
 8007d1c:	4b8d      	ldr	r3, [pc, #564]	@ (8007f54 <dwin_data+0x2a00>)
 8007d1e:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x22,O2_alarm_max_value);
 8007d20:	4b8c      	ldr	r3, [pc, #560]	@ (8007f54 <dwin_data+0x2a00>)
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	4619      	mov	r1, r3
 8007d26:	2022      	movs	r0, #34	@ 0x22
 8007d28:	f7fa fd54 	bl	80027d4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007d30:	e007      	b.n	8007d42 <dwin_data+0x27ee>
						DISPLAY_INPUT[a] = 0x00;
 8007d32:	4a89      	ldr	r2, [pc, #548]	@ (8007f58 <dwin_data+0x2a04>)
 8007d34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d36:	4413      	add	r3, r2
 8007d38:	2200      	movs	r2, #0
 8007d3a:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 8007d3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d3e:	3301      	adds	r3, #1
 8007d40:	667b      	str	r3, [r7, #100]	@ 0x64
 8007d42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d44:	2b08      	cmp	r3, #8
 8007d46:	ddf4      	ble.n	8007d32 <dwin_data+0x27de>
				if (O2_alarm_max_value==100){
 8007d48:	e121      	b.n	8007f8e <dwin_data+0x2a3a>
				}
			}

			else if (((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA3) && (DISPLAY_INPUT[8]== 0x01))){
 8007d4a:	4b83      	ldr	r3, [pc, #524]	@ (8007f58 <dwin_data+0x2a04>)
 8007d4c:	791b      	ldrb	r3, [r3, #4]
 8007d4e:	2b10      	cmp	r3, #16
 8007d50:	f040 811d 	bne.w	8007f8e <dwin_data+0x2a3a>
 8007d54:	4b80      	ldr	r3, [pc, #512]	@ (8007f58 <dwin_data+0x2a04>)
 8007d56:	795b      	ldrb	r3, [r3, #5]
 8007d58:	2ba3      	cmp	r3, #163	@ 0xa3
 8007d5a:	f040 8118 	bne.w	8007f8e <dwin_data+0x2a3a>
 8007d5e:	4b7e      	ldr	r3, [pc, #504]	@ (8007f58 <dwin_data+0x2a04>)
 8007d60:	7a1b      	ldrb	r3, [r3, #8]
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	f040 8113 	bne.w	8007f8e <dwin_data+0x2a3a>
				if (O2_alarm_max_value==60){
 8007d68:	4b7a      	ldr	r3, [pc, #488]	@ (8007f54 <dwin_data+0x2a00>)
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	2b3c      	cmp	r3, #60	@ 0x3c
 8007d6e:	d104      	bne.n	8007d7a <dwin_data+0x2826>
					O2_alarm_max_value = O2_alarm_max_value;
 8007d70:	4b78      	ldr	r3, [pc, #480]	@ (8007f54 <dwin_data+0x2a00>)
 8007d72:	781a      	ldrb	r2, [r3, #0]
 8007d74:	4b77      	ldr	r3, [pc, #476]	@ (8007f54 <dwin_data+0x2a00>)
 8007d76:	701a      	strb	r2, [r3, #0]
 8007d78:	e109      	b.n	8007f8e <dwin_data+0x2a3a>
				}
				else{
					O2_alarm_max_value -= 1;
 8007d7a:	4b76      	ldr	r3, [pc, #472]	@ (8007f54 <dwin_data+0x2a00>)
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	3b01      	subs	r3, #1
 8007d80:	b2da      	uxtb	r2, r3
 8007d82:	4b74      	ldr	r3, [pc, #464]	@ (8007f54 <dwin_data+0x2a00>)
 8007d84:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x22,O2_alarm_max_value);
 8007d86:	4b73      	ldr	r3, [pc, #460]	@ (8007f54 <dwin_data+0x2a00>)
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	2022      	movs	r0, #34	@ 0x22
 8007d8e:	f7fa fd21 	bl	80027d4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 8007d92:	2300      	movs	r3, #0
 8007d94:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d96:	e007      	b.n	8007da8 <dwin_data+0x2854>
						DISPLAY_INPUT[a] = 0x00;
 8007d98:	4a6f      	ldr	r2, [pc, #444]	@ (8007f58 <dwin_data+0x2a04>)
 8007d9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d9c:	4413      	add	r3, r2
 8007d9e:	2200      	movs	r2, #0
 8007da0:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 8007da2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007da4:	3301      	adds	r3, #1
 8007da6:	663b      	str	r3, [r7, #96]	@ 0x60
 8007da8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007daa:	2b08      	cmp	r3, #8
 8007dac:	ddf4      	ble.n	8007d98 <dwin_data+0x2844>
 8007dae:	e0ee      	b.n	8007f8e <dwin_data+0x2a3a>
				}
			}
		}

		else if (O2_alarm_min_flag == 1){
 8007db0:	4b6a      	ldr	r3, [pc, #424]	@ (8007f5c <dwin_data+0x2a08>)
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d062      	beq.n	8007e7e <dwin_data+0x292a>

			if(((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA2) && (DISPLAY_INPUT[8] == 0x01))){
 8007db8:	4b67      	ldr	r3, [pc, #412]	@ (8007f58 <dwin_data+0x2a04>)
 8007dba:	791b      	ldrb	r3, [r3, #4]
 8007dbc:	2b10      	cmp	r3, #16
 8007dbe:	d12b      	bne.n	8007e18 <dwin_data+0x28c4>
 8007dc0:	4b65      	ldr	r3, [pc, #404]	@ (8007f58 <dwin_data+0x2a04>)
 8007dc2:	795b      	ldrb	r3, [r3, #5]
 8007dc4:	2ba2      	cmp	r3, #162	@ 0xa2
 8007dc6:	d127      	bne.n	8007e18 <dwin_data+0x28c4>
 8007dc8:	4b63      	ldr	r3, [pc, #396]	@ (8007f58 <dwin_data+0x2a04>)
 8007dca:	7a1b      	ldrb	r3, [r3, #8]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d123      	bne.n	8007e18 <dwin_data+0x28c4>
				if (O2_alarm_min_value==60){
 8007dd0:	4b63      	ldr	r3, [pc, #396]	@ (8007f60 <dwin_data+0x2a0c>)
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	2b3c      	cmp	r3, #60	@ 0x3c
 8007dd6:	d104      	bne.n	8007de2 <dwin_data+0x288e>
					O2_alarm_min_value = O2_alarm_min_value;
 8007dd8:	4b61      	ldr	r3, [pc, #388]	@ (8007f60 <dwin_data+0x2a0c>)
 8007dda:	781a      	ldrb	r2, [r3, #0]
 8007ddc:	4b60      	ldr	r3, [pc, #384]	@ (8007f60 <dwin_data+0x2a0c>)
 8007dde:	701a      	strb	r2, [r3, #0]
				if (O2_alarm_min_value==60){
 8007de0:	e0d5      	b.n	8007f8e <dwin_data+0x2a3a>
				}
				else{
					O2_alarm_min_value +=1;
 8007de2:	4b5f      	ldr	r3, [pc, #380]	@ (8007f60 <dwin_data+0x2a0c>)
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	3301      	adds	r3, #1
 8007de8:	b2da      	uxtb	r2, r3
 8007dea:	4b5d      	ldr	r3, [pc, #372]	@ (8007f60 <dwin_data+0x2a0c>)
 8007dec:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x23,O2_alarm_min_value);
 8007dee:	4b5c      	ldr	r3, [pc, #368]	@ (8007f60 <dwin_data+0x2a0c>)
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	4619      	mov	r1, r3
 8007df4:	2023      	movs	r0, #35	@ 0x23
 8007df6:	f7fa fced 	bl	80027d4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007dfe:	e007      	b.n	8007e10 <dwin_data+0x28bc>
						DISPLAY_INPUT[a] = 0x00;
 8007e00:	4a55      	ldr	r2, [pc, #340]	@ (8007f58 <dwin_data+0x2a04>)
 8007e02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e04:	4413      	add	r3, r2
 8007e06:	2200      	movs	r2, #0
 8007e08:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 8007e0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e12:	2b08      	cmp	r3, #8
 8007e14:	ddf4      	ble.n	8007e00 <dwin_data+0x28ac>
				if (O2_alarm_min_value==60){
 8007e16:	e0ba      	b.n	8007f8e <dwin_data+0x2a3a>
				}
			}

			else if (((DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0xA3) && (DISPLAY_INPUT[8]== 0x01))){
 8007e18:	4b4f      	ldr	r3, [pc, #316]	@ (8007f58 <dwin_data+0x2a04>)
 8007e1a:	791b      	ldrb	r3, [r3, #4]
 8007e1c:	2b10      	cmp	r3, #16
 8007e1e:	f040 80b6 	bne.w	8007f8e <dwin_data+0x2a3a>
 8007e22:	4b4d      	ldr	r3, [pc, #308]	@ (8007f58 <dwin_data+0x2a04>)
 8007e24:	795b      	ldrb	r3, [r3, #5]
 8007e26:	2ba3      	cmp	r3, #163	@ 0xa3
 8007e28:	f040 80b1 	bne.w	8007f8e <dwin_data+0x2a3a>
 8007e2c:	4b4a      	ldr	r3, [pc, #296]	@ (8007f58 <dwin_data+0x2a04>)
 8007e2e:	7a1b      	ldrb	r3, [r3, #8]
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	f040 80ac 	bne.w	8007f8e <dwin_data+0x2a3a>
				if (O2_alarm_min_value==20){
 8007e36:	4b4a      	ldr	r3, [pc, #296]	@ (8007f60 <dwin_data+0x2a0c>)
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	2b14      	cmp	r3, #20
 8007e3c:	d104      	bne.n	8007e48 <dwin_data+0x28f4>
					O2_alarm_min_value = O2_alarm_min_value;
 8007e3e:	4b48      	ldr	r3, [pc, #288]	@ (8007f60 <dwin_data+0x2a0c>)
 8007e40:	781a      	ldrb	r2, [r3, #0]
 8007e42:	4b47      	ldr	r3, [pc, #284]	@ (8007f60 <dwin_data+0x2a0c>)
 8007e44:	701a      	strb	r2, [r3, #0]
 8007e46:	e0a2      	b.n	8007f8e <dwin_data+0x2a3a>
				}
				else{
					O2_alarm_min_value -= 1;
 8007e48:	4b45      	ldr	r3, [pc, #276]	@ (8007f60 <dwin_data+0x2a0c>)
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	3b01      	subs	r3, #1
 8007e4e:	b2da      	uxtb	r2, r3
 8007e50:	4b43      	ldr	r3, [pc, #268]	@ (8007f60 <dwin_data+0x2a0c>)
 8007e52:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x23,O2_alarm_min_value);
 8007e54:	4b42      	ldr	r3, [pc, #264]	@ (8007f60 <dwin_data+0x2a0c>)
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	4619      	mov	r1, r3
 8007e5a:	2023      	movs	r0, #35	@ 0x23
 8007e5c:	f7fa fcba 	bl	80027d4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 8007e60:	2300      	movs	r3, #0
 8007e62:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007e64:	e007      	b.n	8007e76 <dwin_data+0x2922>
						DISPLAY_INPUT[a] = 0x00;
 8007e66:	4a3c      	ldr	r2, [pc, #240]	@ (8007f58 <dwin_data+0x2a04>)
 8007e68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007e6a:	4413      	add	r3, r2
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 8007e70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007e72:	3301      	adds	r3, #1
 8007e74:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007e76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007e78:	2b08      	cmp	r3, #8
 8007e7a:	ddf4      	ble.n	8007e66 <dwin_data+0x2912>
 8007e7c:	e087      	b.n	8007f8e <dwin_data+0x2a3a>
				}
			}
		}else if (PS_flag == 1) {
 8007e7e:	4b39      	ldr	r3, [pc, #228]	@ (8007f64 <dwin_data+0x2a10>)
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	f000 8083 	beq.w	8007f8e <dwin_data+0x2a3a>
			if (((DISPLAY_INPUT[5] == 0xA2) && (DISPLAY_INPUT[8] == 0x01))) {
 8007e88:	4b33      	ldr	r3, [pc, #204]	@ (8007f58 <dwin_data+0x2a04>)
 8007e8a:	795b      	ldrb	r3, [r3, #5]
 8007e8c:	2ba2      	cmp	r3, #162	@ 0xa2
 8007e8e:	d134      	bne.n	8007efa <dwin_data+0x29a6>
 8007e90:	4b31      	ldr	r3, [pc, #196]	@ (8007f58 <dwin_data+0x2a04>)
 8007e92:	7a1b      	ldrb	r3, [r3, #8]
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d130      	bne.n	8007efa <dwin_data+0x29a6>
				if (PS_value == 60) {
 8007e98:	4b33      	ldr	r3, [pc, #204]	@ (8007f68 <dwin_data+0x2a14>)
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	2b3c      	cmp	r3, #60	@ 0x3c
 8007e9e:	d104      	bne.n	8007eaa <dwin_data+0x2956>
					PS_value = PS_value;
 8007ea0:	4b31      	ldr	r3, [pc, #196]	@ (8007f68 <dwin_data+0x2a14>)
 8007ea2:	781a      	ldrb	r2, [r3, #0]
 8007ea4:	4b30      	ldr	r3, [pc, #192]	@ (8007f68 <dwin_data+0x2a14>)
 8007ea6:	701a      	strb	r2, [r3, #0]
				if (PS_value == 60) {
 8007ea8:	e071      	b.n	8007f8e <dwin_data+0x2a3a>
				} else {
					Value_reset_flag = 0;
 8007eaa:	4b30      	ldr	r3, [pc, #192]	@ (8007f6c <dwin_data+0x2a18>)
 8007eac:	2200      	movs	r2, #0
 8007eae:	701a      	strb	r2, [r3, #0]
					PS_value_reset_flag = 1;
 8007eb0:	4b2f      	ldr	r3, [pc, #188]	@ (8007f70 <dwin_data+0x2a1c>)
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	701a      	strb	r2, [r3, #0]
					osTimerStart(Touch_value_resetHandle, 5000);
 8007eb6:	4b2f      	ldr	r3, [pc, #188]	@ (8007f74 <dwin_data+0x2a20>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f241 3188 	movw	r1, #5000	@ 0x1388
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f00a fac4 	bl	801244c <osTimerStart>
					PS_value += 1;
 8007ec4:	4b28      	ldr	r3, [pc, #160]	@ (8007f68 <dwin_data+0x2a14>)
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	3301      	adds	r3, #1
 8007eca:	b2da      	uxtb	r2, r3
 8007ecc:	4b26      	ldr	r3, [pc, #152]	@ (8007f68 <dwin_data+0x2a14>)
 8007ece:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x09, PS_value);
 8007ed0:	4b25      	ldr	r3, [pc, #148]	@ (8007f68 <dwin_data+0x2a14>)
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	2009      	movs	r0, #9
 8007ed8:	f7fa fc7c 	bl	80027d4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 8007edc:	2300      	movs	r3, #0
 8007ede:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ee0:	e007      	b.n	8007ef2 <dwin_data+0x299e>
						DISPLAY_INPUT[a] = 0x00;
 8007ee2:	4a1d      	ldr	r2, [pc, #116]	@ (8007f58 <dwin_data+0x2a04>)
 8007ee4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ee6:	4413      	add	r3, r2
 8007ee8:	2200      	movs	r2, #0
 8007eea:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 8007eec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007eee:	3301      	adds	r3, #1
 8007ef0:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ef2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ef4:	2b08      	cmp	r3, #8
 8007ef6:	ddf4      	ble.n	8007ee2 <dwin_data+0x298e>
				if (PS_value == 60) {
 8007ef8:	e049      	b.n	8007f8e <dwin_data+0x2a3a>
				}
			} else if ((DISPLAY_INPUT[5] == 0xA3)
 8007efa:	4b17      	ldr	r3, [pc, #92]	@ (8007f58 <dwin_data+0x2a04>)
 8007efc:	795b      	ldrb	r3, [r3, #5]
 8007efe:	2ba3      	cmp	r3, #163	@ 0xa3
 8007f00:	d145      	bne.n	8007f8e <dwin_data+0x2a3a>
					&& (DISPLAY_INPUT[8] == 0x01)) {
 8007f02:	4b15      	ldr	r3, [pc, #84]	@ (8007f58 <dwin_data+0x2a04>)
 8007f04:	7a1b      	ldrb	r3, [r3, #8]
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d141      	bne.n	8007f8e <dwin_data+0x2a3a>
				if (PS_value == 5) {
 8007f0a:	4b17      	ldr	r3, [pc, #92]	@ (8007f68 <dwin_data+0x2a14>)
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	2b05      	cmp	r3, #5
 8007f10:	d104      	bne.n	8007f1c <dwin_data+0x29c8>
					PS_value = PS_value;
 8007f12:	4b15      	ldr	r3, [pc, #84]	@ (8007f68 <dwin_data+0x2a14>)
 8007f14:	781a      	ldrb	r2, [r3, #0]
 8007f16:	4b14      	ldr	r3, [pc, #80]	@ (8007f68 <dwin_data+0x2a14>)
 8007f18:	701a      	strb	r2, [r3, #0]
 8007f1a:	e038      	b.n	8007f8e <dwin_data+0x2a3a>
				} else {
					Value_reset_flag = 0;
 8007f1c:	4b13      	ldr	r3, [pc, #76]	@ (8007f6c <dwin_data+0x2a18>)
 8007f1e:	2200      	movs	r2, #0
 8007f20:	701a      	strb	r2, [r3, #0]
					PS_value_reset_flag = 1;
 8007f22:	4b13      	ldr	r3, [pc, #76]	@ (8007f70 <dwin_data+0x2a1c>)
 8007f24:	2201      	movs	r2, #1
 8007f26:	701a      	strb	r2, [r3, #0]
					osTimerStart(Touch_value_resetHandle, 5000);
 8007f28:	4b12      	ldr	r3, [pc, #72]	@ (8007f74 <dwin_data+0x2a20>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8007f30:	4618      	mov	r0, r3
 8007f32:	f00a fa8b 	bl	801244c <osTimerStart>
					PS_value -= 1;
 8007f36:	4b0c      	ldr	r3, [pc, #48]	@ (8007f68 <dwin_data+0x2a14>)
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	b2da      	uxtb	r2, r3
 8007f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8007f68 <dwin_data+0x2a14>)
 8007f40:	701a      	strb	r2, [r3, #0]
					intiger_val_send(0x09, PS_value);
 8007f42:	4b09      	ldr	r3, [pc, #36]	@ (8007f68 <dwin_data+0x2a14>)
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	4619      	mov	r1, r3
 8007f48:	2009      	movs	r0, #9
 8007f4a:	f7fa fc43 	bl	80027d4 <intiger_val_send>
					for (int a = 0; a < 9; a++)
 8007f4e:	2300      	movs	r3, #0
 8007f50:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f52:	e019      	b.n	8007f88 <dwin_data+0x2a34>
 8007f54:	20000054 	.word	0x20000054
 8007f58:	20001938 	.word	0x20001938
 8007f5c:	200019fb 	.word	0x200019fb
 8007f60:	2000004f 	.word	0x2000004f
 8007f64:	200019d2 	.word	0x200019d2
 8007f68:	20001965 	.word	0x20001965
 8007f6c:	200019c2 	.word	0x200019c2
 8007f70:	200019db 	.word	0x200019db
 8007f74:	20001144 	.word	0x20001144
						DISPLAY_INPUT[a] = 0x00;
 8007f78:	4a9d      	ldr	r2, [pc, #628]	@ (80081f0 <dwin_data+0x2c9c>)
 8007f7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f7c:	4413      	add	r3, r2
 8007f7e:	2200      	movs	r2, #0
 8007f80:	701a      	strb	r2, [r3, #0]
					for (int a = 0; a < 9; a++)
 8007f82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f84:	3301      	adds	r3, #1
 8007f86:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f8a:	2b08      	cmp	r3, #8
 8007f8c:	ddf4      	ble.n	8007f78 <dwin_data+0x2a24>
				}
			}
		}

		if(DISPLAY_INPUT[5] == 0xCD){
 8007f8e:	4b98      	ldr	r3, [pc, #608]	@ (80081f0 <dwin_data+0x2c9c>)
 8007f90:	795b      	ldrb	r3, [r3, #5]
 8007f92:	2bcd      	cmp	r3, #205	@ 0xcd
 8007f94:	d105      	bne.n	8007fa2 <dwin_data+0x2a4e>
			osDelay(30);
 8007f96:	201e      	movs	r0, #30
 8007f98:	f00a fa0f 	bl	80123ba <osDelay>
			O2_flag = 1;
 8007f9c:	4b95      	ldr	r3, [pc, #596]	@ (80081f4 <dwin_data+0x2ca0>)
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	701a      	strb	r2, [r3, #0]
		}
		if(O2_flag == 1){
 8007fa2:	4b94      	ldr	r3, [pc, #592]	@ (80081f4 <dwin_data+0x2ca0>)
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d003      	beq.n	8007fb2 <dwin_data+0x2a5e>
			O2_Sensor(0x00);
 8007faa:	2000      	movs	r0, #0
 8007fac:	f7fb fce8 	bl	8003980 <O2_Sensor>
 8007fb0:	e00f      	b.n	8007fd2 <dwin_data+0x2a7e>
		}
		else if (O2_flag == 0){
 8007fb2:	4b90      	ldr	r3, [pc, #576]	@ (80081f4 <dwin_data+0x2ca0>)
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	f083 0301 	eor.w	r3, r3, #1
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d008      	beq.n	8007fd2 <dwin_data+0x2a7e>
			MCP3551_ReadData();
 8007fc0:	f7fd f8ec 	bl	800519c <MCP3551_ReadData>
			convert_ADC_to_Percentage(adcValue);
 8007fc4:	4b8c      	ldr	r3, [pc, #560]	@ (80081f8 <dwin_data+0x2ca4>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f7fd f991 	bl	80052f0 <convert_ADC_to_Percentage>
			oxy_per();
 8007fce:	f7fd f931 	bl	8005234 <oxy_per>
		}
		if(DISPLAY_INPUT[5] == 0xCC){
 8007fd2:	4b87      	ldr	r3, [pc, #540]	@ (80081f0 <dwin_data+0x2c9c>)
 8007fd4:	795b      	ldrb	r3, [r3, #5]
 8007fd6:	2bcc      	cmp	r3, #204	@ 0xcc
 8007fd8:	d105      	bne.n	8007fe6 <dwin_data+0x2a92>
			osDelay(30);
 8007fda:	201e      	movs	r0, #30
 8007fdc:	f00a f9ed 	bl	80123ba <osDelay>
			O2_flag = 0;
 8007fe0:	4b84      	ldr	r3, [pc, #528]	@ (80081f4 <dwin_data+0x2ca0>)
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	701a      	strb	r2, [r3, #0]
		}

		//play pause icon change
		if (((DISPLAY_INPUT[0] == 0x5A) && (DISPLAY_INPUT[1] == 0xA5)
 8007fe6:	4b82      	ldr	r3, [pc, #520]	@ (80081f0 <dwin_data+0x2c9c>)
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	2b5a      	cmp	r3, #90	@ 0x5a
 8007fec:	d122      	bne.n	8008034 <dwin_data+0x2ae0>
 8007fee:	4b80      	ldr	r3, [pc, #512]	@ (80081f0 <dwin_data+0x2c9c>)
 8007ff0:	785b      	ldrb	r3, [r3, #1]
 8007ff2:	2ba5      	cmp	r3, #165	@ 0xa5
 8007ff4:	d11e      	bne.n	8008034 <dwin_data+0x2ae0>
				&& (DISPLAY_INPUT[2] == 0x06) && (DISPLAY_INPUT[3] == 0x83)
 8007ff6:	4b7e      	ldr	r3, [pc, #504]	@ (80081f0 <dwin_data+0x2c9c>)
 8007ff8:	789b      	ldrb	r3, [r3, #2]
 8007ffa:	2b06      	cmp	r3, #6
 8007ffc:	d11a      	bne.n	8008034 <dwin_data+0x2ae0>
 8007ffe:	4b7c      	ldr	r3, [pc, #496]	@ (80081f0 <dwin_data+0x2c9c>)
 8008000:	78db      	ldrb	r3, [r3, #3]
 8008002:	2b83      	cmp	r3, #131	@ 0x83
 8008004:	d116      	bne.n	8008034 <dwin_data+0x2ae0>
				&& (DISPLAY_INPUT[5] == 0x35))) {
 8008006:	4b7a      	ldr	r3, [pc, #488]	@ (80081f0 <dwin_data+0x2c9c>)
 8008008:	795b      	ldrb	r3, [r3, #5]
 800800a:	2b35      	cmp	r3, #53	@ 0x35
 800800c:	d112      	bne.n	8008034 <dwin_data+0x2ae0>
			if (DISPLAY_INPUT[8] == 0x6A){
 800800e:	4b78      	ldr	r3, [pc, #480]	@ (80081f0 <dwin_data+0x2c9c>)
 8008010:	7a1b      	ldrb	r3, [r3, #8]
 8008012:	2b6a      	cmp	r3, #106	@ 0x6a
 8008014:	d103      	bne.n	800801e <dwin_data+0x2aca>
				play_icon_change(0x6A);
 8008016:	206a      	movs	r0, #106	@ 0x6a
 8008018:	f7fb fd38 	bl	8003a8c <play_icon_change>
 800801c:	e00a      	b.n	8008034 <dwin_data+0x2ae0>
			} else if(DISPLAY_INPUT[8] == 0x69){
 800801e:	4b74      	ldr	r3, [pc, #464]	@ (80081f0 <dwin_data+0x2c9c>)
 8008020:	7a1b      	ldrb	r3, [r3, #8]
 8008022:	2b69      	cmp	r3, #105	@ 0x69
 8008024:	d103      	bne.n	800802e <dwin_data+0x2ada>
				play_icon_change(0x69);
 8008026:	2069      	movs	r0, #105	@ 0x69
 8008028:	f7fb fd30 	bl	8003a8c <play_icon_change>
 800802c:	e002      	b.n	8008034 <dwin_data+0x2ae0>
			}
			else{
				play_icon_change(0x6A);
 800802e:	206a      	movs	r0, #106	@ 0x6a
 8008030:	f7fb fd2c 	bl	8003a8c <play_icon_change>
			}
		}

		if (((DISPLAY_INPUT[0] == 0x5A) && (DISPLAY_INPUT[1] == 0xA5)
 8008034:	4b6e      	ldr	r3, [pc, #440]	@ (80081f0 <dwin_data+0x2c9c>)
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	2b5a      	cmp	r3, #90	@ 0x5a
 800803a:	d11c      	bne.n	8008076 <dwin_data+0x2b22>
 800803c:	4b6c      	ldr	r3, [pc, #432]	@ (80081f0 <dwin_data+0x2c9c>)
 800803e:	785b      	ldrb	r3, [r3, #1]
 8008040:	2ba5      	cmp	r3, #165	@ 0xa5
 8008042:	d118      	bne.n	8008076 <dwin_data+0x2b22>
				&& (DISPLAY_INPUT[2] == 0x06) && (DISPLAY_INPUT[3] == 0x83)
 8008044:	4b6a      	ldr	r3, [pc, #424]	@ (80081f0 <dwin_data+0x2c9c>)
 8008046:	789b      	ldrb	r3, [r3, #2]
 8008048:	2b06      	cmp	r3, #6
 800804a:	d114      	bne.n	8008076 <dwin_data+0x2b22>
 800804c:	4b68      	ldr	r3, [pc, #416]	@ (80081f0 <dwin_data+0x2c9c>)
 800804e:	78db      	ldrb	r3, [r3, #3]
 8008050:	2b83      	cmp	r3, #131	@ 0x83
 8008052:	d110      	bne.n	8008076 <dwin_data+0x2b22>
				&& (DISPLAY_INPUT[5] == 0x0A))) {
 8008054:	4b66      	ldr	r3, [pc, #408]	@ (80081f0 <dwin_data+0x2c9c>)
 8008056:	795b      	ldrb	r3, [r3, #5]
 8008058:	2b0a      	cmp	r3, #10
 800805a:	d10c      	bne.n	8008076 <dwin_data+0x2b22>
			osDelay(40);
 800805c:	2028      	movs	r0, #40	@ 0x28
 800805e:	f00a f9ac 	bl	80123ba <osDelay>
			ap_icon_change(0x79);
 8008062:	2079      	movs	r0, #121	@ 0x79
 8008064:	f7fb fd4e 	bl	8003b04 <ap_icon_change>
			Compliance_Adult_Flag = 1;
 8008068:	4b64      	ldr	r3, [pc, #400]	@ (80081fc <dwin_data+0x2ca8>)
 800806a:	2201      	movs	r2, #1
 800806c:	701a      	strb	r2, [r3, #0]
			Compliance_Neonate_Flag = 0;
 800806e:	4b64      	ldr	r3, [pc, #400]	@ (8008200 <dwin_data+0x2cac>)
 8008070:	2200      	movs	r2, #0
 8008072:	701a      	strb	r2, [r3, #0]
 8008074:	e01f      	b.n	80080b6 <dwin_data+0x2b62>
			//			user_flowe = user_flowe_cal();
		}
		else if (((DISPLAY_INPUT[0] == 0x5A) && (DISPLAY_INPUT[1] == 0xA5)
 8008076:	4b5e      	ldr	r3, [pc, #376]	@ (80081f0 <dwin_data+0x2c9c>)
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	2b5a      	cmp	r3, #90	@ 0x5a
 800807c:	d11b      	bne.n	80080b6 <dwin_data+0x2b62>
 800807e:	4b5c      	ldr	r3, [pc, #368]	@ (80081f0 <dwin_data+0x2c9c>)
 8008080:	785b      	ldrb	r3, [r3, #1]
 8008082:	2ba5      	cmp	r3, #165	@ 0xa5
 8008084:	d117      	bne.n	80080b6 <dwin_data+0x2b62>
				&& (DISPLAY_INPUT[2] == 0x06) && (DISPLAY_INPUT[3] == 0x83)
 8008086:	4b5a      	ldr	r3, [pc, #360]	@ (80081f0 <dwin_data+0x2c9c>)
 8008088:	789b      	ldrb	r3, [r3, #2]
 800808a:	2b06      	cmp	r3, #6
 800808c:	d113      	bne.n	80080b6 <dwin_data+0x2b62>
 800808e:	4b58      	ldr	r3, [pc, #352]	@ (80081f0 <dwin_data+0x2c9c>)
 8008090:	78db      	ldrb	r3, [r3, #3]
 8008092:	2b83      	cmp	r3, #131	@ 0x83
 8008094:	d10f      	bne.n	80080b6 <dwin_data+0x2b62>
				&& (DISPLAY_INPUT[5] == 0x0B))) {
 8008096:	4b56      	ldr	r3, [pc, #344]	@ (80081f0 <dwin_data+0x2c9c>)
 8008098:	795b      	ldrb	r3, [r3, #5]
 800809a:	2b0b      	cmp	r3, #11
 800809c:	d10b      	bne.n	80080b6 <dwin_data+0x2b62>
			osDelay(40);
 800809e:	2028      	movs	r0, #40	@ 0x28
 80080a0:	f00a f98b 	bl	80123ba <osDelay>
			ap_icon_change(0x7A);
 80080a4:	207a      	movs	r0, #122	@ 0x7a
 80080a6:	f7fb fd2d 	bl	8003b04 <ap_icon_change>
			Compliance_Adult_Flag = 0;
 80080aa:	4b54      	ldr	r3, [pc, #336]	@ (80081fc <dwin_data+0x2ca8>)
 80080ac:	2200      	movs	r2, #0
 80080ae:	701a      	strb	r2, [r3, #0]
			Compliance_Neonate_Flag = 1;
 80080b0:	4b53      	ldr	r3, [pc, #332]	@ (8008200 <dwin_data+0x2cac>)
 80080b2:	2201      	movs	r2, #1
 80080b4:	701a      	strb	r2, [r3, #0]
		//			Compliance_Adult_Flag = 1;
		//			//			Compliance_Neonate_Flag = 1;
		//		}

		//  mode selection
		if (DISPLAY_INPUT[5] == 0XB3){
 80080b6:	4b4e      	ldr	r3, [pc, #312]	@ (80081f0 <dwin_data+0x2c9c>)
 80080b8:	795b      	ldrb	r3, [r3, #5]
 80080ba:	2bb3      	cmp	r3, #179	@ 0xb3
 80080bc:	d10c      	bne.n	80080d8 <dwin_data+0x2b84>
			osDelay(50);
 80080be:	2032      	movs	r0, #50	@ 0x32
 80080c0:	f00a f97b 	bl	80123ba <osDelay>
			mode_select_number = 0X01;
 80080c4:	4b4f      	ldr	r3, [pc, #316]	@ (8008204 <dwin_data+0x2cb0>)
 80080c6:	2201      	movs	r2, #1
 80080c8:	701a      	strb	r2, [r3, #0]
			modes_icon_change(0x3B);
 80080ca:	203b      	movs	r0, #59	@ 0x3b
 80080cc:	f7fb fbc2 	bl	8003854 <modes_icon_change>
			play_icon_change(0x69);
 80080d0:	2069      	movs	r0, #105	@ 0x69
 80080d2:	f7fb fcdb 	bl	8003a8c <play_icon_change>
 80080d6:	e0c5      	b.n	8008264 <dwin_data+0x2d10>
		}
		else if (DISPLAY_INPUT[5] == 0XB4){
 80080d8:	4b45      	ldr	r3, [pc, #276]	@ (80081f0 <dwin_data+0x2c9c>)
 80080da:	795b      	ldrb	r3, [r3, #5]
 80080dc:	2bb4      	cmp	r3, #180	@ 0xb4
 80080de:	d11e      	bne.n	800811e <dwin_data+0x2bca>
			osDelay(50);
 80080e0:	2032      	movs	r0, #50	@ 0x32
 80080e2:	f00a f96a 	bl	80123ba <osDelay>
			mode_select_number = 0X02;
 80080e6:	4b47      	ldr	r3, [pc, #284]	@ (8008204 <dwin_data+0x2cb0>)
 80080e8:	2202      	movs	r2, #2
 80080ea:	701a      	strb	r2, [r3, #0]
			modes_icon_change(0x3C);
 80080ec:	203c      	movs	r0, #60	@ 0x3c
 80080ee:	f7fb fbb1 	bl	8003854 <modes_icon_change>
			play_icon_change(0x69);
 80080f2:	2069      	movs	r0, #105	@ 0x69
 80080f4:	f7fb fcca 	bl	8003a8c <play_icon_change>
			PCV_FLAG = 0;
 80080f8:	4b43      	ldr	r3, [pc, #268]	@ (8008208 <dwin_data+0x2cb4>)
 80080fa:	2200      	movs	r2, #0
 80080fc:	701a      	strb	r2, [r3, #0]
			VCV_FLAG = 0;
 80080fe:	4b43      	ldr	r3, [pc, #268]	@ (800820c <dwin_data+0x2cb8>)
 8008100:	2200      	movs	r2, #0
 8008102:	701a      	strb	r2, [r3, #0]
			PSV_FLAG = 0;
 8008104:	4b42      	ldr	r3, [pc, #264]	@ (8008210 <dwin_data+0x2cbc>)
 8008106:	2200      	movs	r2, #0
 8008108:	701a      	strb	r2, [r3, #0]
			SIMV_FLAG = 0;
 800810a:	4b42      	ldr	r3, [pc, #264]	@ (8008214 <dwin_data+0x2cc0>)
 800810c:	2200      	movs	r2, #0
 800810e:	701a      	strb	r2, [r3, #0]
			STAND_BY = 1;
 8008110:	4b41      	ldr	r3, [pc, #260]	@ (8008218 <dwin_data+0x2cc4>)
 8008112:	2201      	movs	r2, #1
 8008114:	701a      	strb	r2, [r3, #0]
			BAG_FLAG = 0;
 8008116:	4b41      	ldr	r3, [pc, #260]	@ (800821c <dwin_data+0x2cc8>)
 8008118:	2200      	movs	r2, #0
 800811a:	701a      	strb	r2, [r3, #0]
 800811c:	e0a2      	b.n	8008264 <dwin_data+0x2d10>
		}
		else if (DISPLAY_INPUT[5] == 0XB5){
 800811e:	4b34      	ldr	r3, [pc, #208]	@ (80081f0 <dwin_data+0x2c9c>)
 8008120:	795b      	ldrb	r3, [r3, #5]
 8008122:	2bb5      	cmp	r3, #181	@ 0xb5
 8008124:	d11e      	bne.n	8008164 <dwin_data+0x2c10>
			osDelay(50);
 8008126:	2032      	movs	r0, #50	@ 0x32
 8008128:	f00a f947 	bl	80123ba <osDelay>
			mode_select_number = 0X03;
 800812c:	4b35      	ldr	r3, [pc, #212]	@ (8008204 <dwin_data+0x2cb0>)
 800812e:	2203      	movs	r2, #3
 8008130:	701a      	strb	r2, [r3, #0]
			modes_icon_change(0x3D);
 8008132:	203d      	movs	r0, #61	@ 0x3d
 8008134:	f7fb fb8e 	bl	8003854 <modes_icon_change>
			play_icon_change(0x69);
 8008138:	2069      	movs	r0, #105	@ 0x69
 800813a:	f7fb fca7 	bl	8003a8c <play_icon_change>
			PCV_FLAG = 0;
 800813e:	4b32      	ldr	r3, [pc, #200]	@ (8008208 <dwin_data+0x2cb4>)
 8008140:	2200      	movs	r2, #0
 8008142:	701a      	strb	r2, [r3, #0]
			VCV_FLAG = 0;
 8008144:	4b31      	ldr	r3, [pc, #196]	@ (800820c <dwin_data+0x2cb8>)
 8008146:	2200      	movs	r2, #0
 8008148:	701a      	strb	r2, [r3, #0]
			PSV_FLAG = 0;
 800814a:	4b31      	ldr	r3, [pc, #196]	@ (8008210 <dwin_data+0x2cbc>)
 800814c:	2200      	movs	r2, #0
 800814e:	701a      	strb	r2, [r3, #0]
			SIMV_FLAG = 0;
 8008150:	4b30      	ldr	r3, [pc, #192]	@ (8008214 <dwin_data+0x2cc0>)
 8008152:	2200      	movs	r2, #0
 8008154:	701a      	strb	r2, [r3, #0]
			STAND_BY = 1;
 8008156:	4b30      	ldr	r3, [pc, #192]	@ (8008218 <dwin_data+0x2cc4>)
 8008158:	2201      	movs	r2, #1
 800815a:	701a      	strb	r2, [r3, #0]
			BAG_FLAG = 0;
 800815c:	4b2f      	ldr	r3, [pc, #188]	@ (800821c <dwin_data+0x2cc8>)
 800815e:	2200      	movs	r2, #0
 8008160:	701a      	strb	r2, [r3, #0]
 8008162:	e07f      	b.n	8008264 <dwin_data+0x2d10>
		}
		else if (DISPLAY_INPUT[5] == 0XB6){
 8008164:	4b22      	ldr	r3, [pc, #136]	@ (80081f0 <dwin_data+0x2c9c>)
 8008166:	795b      	ldrb	r3, [r3, #5]
 8008168:	2bb6      	cmp	r3, #182	@ 0xb6
 800816a:	d11e      	bne.n	80081aa <dwin_data+0x2c56>
			osDelay(50);
 800816c:	2032      	movs	r0, #50	@ 0x32
 800816e:	f00a f924 	bl	80123ba <osDelay>
			mode_select_number = 0X04;
 8008172:	4b24      	ldr	r3, [pc, #144]	@ (8008204 <dwin_data+0x2cb0>)
 8008174:	2204      	movs	r2, #4
 8008176:	701a      	strb	r2, [r3, #0]
			modes_icon_change(0x3E);
 8008178:	203e      	movs	r0, #62	@ 0x3e
 800817a:	f7fb fb6b 	bl	8003854 <modes_icon_change>
			play_icon_change(0x69);
 800817e:	2069      	movs	r0, #105	@ 0x69
 8008180:	f7fb fc84 	bl	8003a8c <play_icon_change>
			PCV_FLAG = 0;
 8008184:	4b20      	ldr	r3, [pc, #128]	@ (8008208 <dwin_data+0x2cb4>)
 8008186:	2200      	movs	r2, #0
 8008188:	701a      	strb	r2, [r3, #0]
			VCV_FLAG = 0;
 800818a:	4b20      	ldr	r3, [pc, #128]	@ (800820c <dwin_data+0x2cb8>)
 800818c:	2200      	movs	r2, #0
 800818e:	701a      	strb	r2, [r3, #0]
			PSV_FLAG = 0;
 8008190:	4b1f      	ldr	r3, [pc, #124]	@ (8008210 <dwin_data+0x2cbc>)
 8008192:	2200      	movs	r2, #0
 8008194:	701a      	strb	r2, [r3, #0]
			SIMV_FLAG = 0;
 8008196:	4b1f      	ldr	r3, [pc, #124]	@ (8008214 <dwin_data+0x2cc0>)
 8008198:	2200      	movs	r2, #0
 800819a:	701a      	strb	r2, [r3, #0]
			STAND_BY = 1;
 800819c:	4b1e      	ldr	r3, [pc, #120]	@ (8008218 <dwin_data+0x2cc4>)
 800819e:	2201      	movs	r2, #1
 80081a0:	701a      	strb	r2, [r3, #0]
			BAG_FLAG = 0;
 80081a2:	4b1e      	ldr	r3, [pc, #120]	@ (800821c <dwin_data+0x2cc8>)
 80081a4:	2200      	movs	r2, #0
 80081a6:	701a      	strb	r2, [r3, #0]
 80081a8:	e05c      	b.n	8008264 <dwin_data+0x2d10>
		}
		else if (DISPLAY_INPUT[5] == 0XB7){
 80081aa:	4b11      	ldr	r3, [pc, #68]	@ (80081f0 <dwin_data+0x2c9c>)
 80081ac:	795b      	ldrb	r3, [r3, #5]
 80081ae:	2bb7      	cmp	r3, #183	@ 0xb7
 80081b0:	d136      	bne.n	8008220 <dwin_data+0x2ccc>
			osDelay(50);
 80081b2:	2032      	movs	r0, #50	@ 0x32
 80081b4:	f00a f901 	bl	80123ba <osDelay>
			mode_select_number = 0X05;
 80081b8:	4b12      	ldr	r3, [pc, #72]	@ (8008204 <dwin_data+0x2cb0>)
 80081ba:	2205      	movs	r2, #5
 80081bc:	701a      	strb	r2, [r3, #0]
			modes_icon_change(0x3F);
 80081be:	203f      	movs	r0, #63	@ 0x3f
 80081c0:	f7fb fb48 	bl	8003854 <modes_icon_change>
			play_icon_change(0x69);
 80081c4:	2069      	movs	r0, #105	@ 0x69
 80081c6:	f7fb fc61 	bl	8003a8c <play_icon_change>
			PCV_FLAG = 0;
 80081ca:	4b0f      	ldr	r3, [pc, #60]	@ (8008208 <dwin_data+0x2cb4>)
 80081cc:	2200      	movs	r2, #0
 80081ce:	701a      	strb	r2, [r3, #0]
			VCV_FLAG = 0;
 80081d0:	4b0e      	ldr	r3, [pc, #56]	@ (800820c <dwin_data+0x2cb8>)
 80081d2:	2200      	movs	r2, #0
 80081d4:	701a      	strb	r2, [r3, #0]
			PSV_FLAG = 0;
 80081d6:	4b0e      	ldr	r3, [pc, #56]	@ (8008210 <dwin_data+0x2cbc>)
 80081d8:	2200      	movs	r2, #0
 80081da:	701a      	strb	r2, [r3, #0]
			SIMV_FLAG = 0;
 80081dc:	4b0d      	ldr	r3, [pc, #52]	@ (8008214 <dwin_data+0x2cc0>)
 80081de:	2200      	movs	r2, #0
 80081e0:	701a      	strb	r2, [r3, #0]
			STAND_BY = 1;
 80081e2:	4b0d      	ldr	r3, [pc, #52]	@ (8008218 <dwin_data+0x2cc4>)
 80081e4:	2201      	movs	r2, #1
 80081e6:	701a      	strb	r2, [r3, #0]
			BAG_FLAG = 0;
 80081e8:	4b0c      	ldr	r3, [pc, #48]	@ (800821c <dwin_data+0x2cc8>)
 80081ea:	2200      	movs	r2, #0
 80081ec:	701a      	strb	r2, [r3, #0]
 80081ee:	e039      	b.n	8008264 <dwin_data+0x2d10>
 80081f0:	20001938 	.word	0x20001938
 80081f4:	200019d4 	.word	0x200019d4
 80081f8:	20001394 	.word	0x20001394
 80081fc:	20001b39 	.word	0x20001b39
 8008200:	20001b38 	.word	0x20001b38
 8008204:	200019ae 	.word	0x200019ae
 8008208:	200019ac 	.word	0x200019ac
 800820c:	200019ab 	.word	0x200019ab
 8008210:	200019aa 	.word	0x200019aa
 8008214:	200019a8 	.word	0x200019a8
 8008218:	200019a9 	.word	0x200019a9
 800821c:	200019ad 	.word	0x200019ad
		}
		else if (DISPLAY_INPUT[5] == 0XB8){
 8008220:	4b98      	ldr	r3, [pc, #608]	@ (8008484 <dwin_data+0x2f30>)
 8008222:	795b      	ldrb	r3, [r3, #5]
 8008224:	2bb8      	cmp	r3, #184	@ 0xb8
 8008226:	d11d      	bne.n	8008264 <dwin_data+0x2d10>
			osDelay(40);
 8008228:	2028      	movs	r0, #40	@ 0x28
 800822a:	f00a f8c6 	bl	80123ba <osDelay>
			mode_select_number = 0X06;
 800822e:	4b96      	ldr	r3, [pc, #600]	@ (8008488 <dwin_data+0x2f34>)
 8008230:	2206      	movs	r2, #6
 8008232:	701a      	strb	r2, [r3, #0]
			modes_icon_change(0x40);
 8008234:	2040      	movs	r0, #64	@ 0x40
 8008236:	f7fb fb0d 	bl	8003854 <modes_icon_change>
			bag_play_icon_change(0x7B);
 800823a:	207b      	movs	r0, #123	@ 0x7b
 800823c:	f7fb fc44 	bl	8003ac8 <bag_play_icon_change>
			PCV_FLAG = 0;
 8008240:	4b92      	ldr	r3, [pc, #584]	@ (800848c <dwin_data+0x2f38>)
 8008242:	2200      	movs	r2, #0
 8008244:	701a      	strb	r2, [r3, #0]
			VCV_FLAG = 0;
 8008246:	4b92      	ldr	r3, [pc, #584]	@ (8008490 <dwin_data+0x2f3c>)
 8008248:	2200      	movs	r2, #0
 800824a:	701a      	strb	r2, [r3, #0]
			PSV_FLAG = 0;
 800824c:	4b91      	ldr	r3, [pc, #580]	@ (8008494 <dwin_data+0x2f40>)
 800824e:	2200      	movs	r2, #0
 8008250:	701a      	strb	r2, [r3, #0]
			SIMV_FLAG = 0;
 8008252:	4b91      	ldr	r3, [pc, #580]	@ (8008498 <dwin_data+0x2f44>)
 8008254:	2200      	movs	r2, #0
 8008256:	701a      	strb	r2, [r3, #0]
			STAND_BY = 1;
 8008258:	4b90      	ldr	r3, [pc, #576]	@ (800849c <dwin_data+0x2f48>)
 800825a:	2201      	movs	r2, #1
 800825c:	701a      	strb	r2, [r3, #0]
			BAG_FLAG = 0;
 800825e:	4b90      	ldr	r3, [pc, #576]	@ (80084a0 <dwin_data+0x2f4c>)
 8008260:	2200      	movs	r2, #0
 8008262:	701a      	strb	r2, [r3, #0]
		}
		if(mode_select_number == 0x01){
 8008264:	4b88      	ldr	r3, [pc, #544]	@ (8008488 <dwin_data+0x2f34>)
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	2b01      	cmp	r3, #1
 800826a:	d103      	bne.n	8008274 <dwin_data+0x2d20>
			modes_icon_change(0x3B);
 800826c:	203b      	movs	r0, #59	@ 0x3b
 800826e:	f7fb faf1 	bl	8003854 <modes_icon_change>
 8008272:	e026      	b.n	80082c2 <dwin_data+0x2d6e>
			//			play_icon_change(0x69);
		}
		else if(mode_select_number == 0x02){
 8008274:	4b84      	ldr	r3, [pc, #528]	@ (8008488 <dwin_data+0x2f34>)
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	2b02      	cmp	r3, #2
 800827a:	d103      	bne.n	8008284 <dwin_data+0x2d30>
			modes_icon_change(0x3C);
 800827c:	203c      	movs	r0, #60	@ 0x3c
 800827e:	f7fb fae9 	bl	8003854 <modes_icon_change>
 8008282:	e01e      	b.n	80082c2 <dwin_data+0x2d6e>
			//			play_icon_change(0x69);
		}
		else if(mode_select_number == 0x03){
 8008284:	4b80      	ldr	r3, [pc, #512]	@ (8008488 <dwin_data+0x2f34>)
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	2b03      	cmp	r3, #3
 800828a:	d103      	bne.n	8008294 <dwin_data+0x2d40>
			modes_icon_change(0x3D);
 800828c:	203d      	movs	r0, #61	@ 0x3d
 800828e:	f7fb fae1 	bl	8003854 <modes_icon_change>
 8008292:	e016      	b.n	80082c2 <dwin_data+0x2d6e>
			//			play_icon_change(0x69);
		}
		else if(mode_select_number == 0x04){
 8008294:	4b7c      	ldr	r3, [pc, #496]	@ (8008488 <dwin_data+0x2f34>)
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	2b04      	cmp	r3, #4
 800829a:	d103      	bne.n	80082a4 <dwin_data+0x2d50>
			modes_icon_change(0x3E);
 800829c:	203e      	movs	r0, #62	@ 0x3e
 800829e:	f7fb fad9 	bl	8003854 <modes_icon_change>
 80082a2:	e00e      	b.n	80082c2 <dwin_data+0x2d6e>
			//			play_icon_change(0x69);
		}
		else if(mode_select_number == 0x05){
 80082a4:	4b78      	ldr	r3, [pc, #480]	@ (8008488 <dwin_data+0x2f34>)
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	2b05      	cmp	r3, #5
 80082aa:	d103      	bne.n	80082b4 <dwin_data+0x2d60>
			modes_icon_change(0x3F);
 80082ac:	203f      	movs	r0, #63	@ 0x3f
 80082ae:	f7fb fad1 	bl	8003854 <modes_icon_change>
 80082b2:	e006      	b.n	80082c2 <dwin_data+0x2d6e>
			//			play_icon_change(0x69);
		}
		else if(mode_select_number == 0x06){
 80082b4:	4b74      	ldr	r3, [pc, #464]	@ (8008488 <dwin_data+0x2f34>)
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	2b06      	cmp	r3, #6
 80082ba:	d102      	bne.n	80082c2 <dwin_data+0x2d6e>
			modes_icon_change(0x40);
 80082bc:	2040      	movs	r0, #64	@ 0x40
 80082be:	f7fb fac9 	bl	8003854 <modes_icon_change>
			//			play_icon_change(0x69);
		}


		if ((DISPLAY_INPUT[0] == 0x5A) && (DISPLAY_INPUT[1] == 0xA5) &&
 80082c2:	4b70      	ldr	r3, [pc, #448]	@ (8008484 <dwin_data+0x2f30>)
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	2b5a      	cmp	r3, #90	@ 0x5a
 80082c8:	d11a      	bne.n	8008300 <dwin_data+0x2dac>
 80082ca:	4b6e      	ldr	r3, [pc, #440]	@ (8008484 <dwin_data+0x2f30>)
 80082cc:	785b      	ldrb	r3, [r3, #1]
 80082ce:	2ba5      	cmp	r3, #165	@ 0xa5
 80082d0:	d116      	bne.n	8008300 <dwin_data+0x2dac>
				(DISPLAY_INPUT[2] == 0x06) && (DISPLAY_INPUT[3] == 0x83) &&
 80082d2:	4b6c      	ldr	r3, [pc, #432]	@ (8008484 <dwin_data+0x2f30>)
 80082d4:	789b      	ldrb	r3, [r3, #2]
		if ((DISPLAY_INPUT[0] == 0x5A) && (DISPLAY_INPUT[1] == 0xA5) &&
 80082d6:	2b06      	cmp	r3, #6
 80082d8:	d112      	bne.n	8008300 <dwin_data+0x2dac>
				(DISPLAY_INPUT[2] == 0x06) && (DISPLAY_INPUT[3] == 0x83) &&
 80082da:	4b6a      	ldr	r3, [pc, #424]	@ (8008484 <dwin_data+0x2f30>)
 80082dc:	78db      	ldrb	r3, [r3, #3]
 80082de:	2b83      	cmp	r3, #131	@ 0x83
 80082e0:	d10e      	bne.n	8008300 <dwin_data+0x2dac>
				(DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0x37) && (DISPLAY_INPUT[8] == 0x4D) ) {
 80082e2:	4b68      	ldr	r3, [pc, #416]	@ (8008484 <dwin_data+0x2f30>)
 80082e4:	791b      	ldrb	r3, [r3, #4]
				(DISPLAY_INPUT[2] == 0x06) && (DISPLAY_INPUT[3] == 0x83) &&
 80082e6:	2b10      	cmp	r3, #16
 80082e8:	d10a      	bne.n	8008300 <dwin_data+0x2dac>
				(DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0x37) && (DISPLAY_INPUT[8] == 0x4D) ) {
 80082ea:	4b66      	ldr	r3, [pc, #408]	@ (8008484 <dwin_data+0x2f30>)
 80082ec:	795b      	ldrb	r3, [r3, #5]
 80082ee:	2b37      	cmp	r3, #55	@ 0x37
 80082f0:	d106      	bne.n	8008300 <dwin_data+0x2dac>
 80082f2:	4b64      	ldr	r3, [pc, #400]	@ (8008484 <dwin_data+0x2f30>)
 80082f4:	7a1b      	ldrb	r3, [r3, #8]
 80082f6:	2b4d      	cmp	r3, #77	@ 0x4d
 80082f8:	d102      	bne.n	8008300 <dwin_data+0x2dac>
			Head = 1;
 80082fa:	4b6a      	ldr	r3, [pc, #424]	@ (80084a4 <dwin_data+0x2f50>)
 80082fc:	2201      	movs	r2, #1
 80082fe:	701a      	strb	r2, [r3, #0]
		}
		if ((DISPLAY_INPUT[0] == 0x5A) && (DISPLAY_INPUT[1] == 0xA5) &&
 8008300:	4b60      	ldr	r3, [pc, #384]	@ (8008484 <dwin_data+0x2f30>)
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	2b5a      	cmp	r3, #90	@ 0x5a
 8008306:	d11a      	bne.n	800833e <dwin_data+0x2dea>
 8008308:	4b5e      	ldr	r3, [pc, #376]	@ (8008484 <dwin_data+0x2f30>)
 800830a:	785b      	ldrb	r3, [r3, #1]
 800830c:	2ba5      	cmp	r3, #165	@ 0xa5
 800830e:	d116      	bne.n	800833e <dwin_data+0x2dea>
				(DISPLAY_INPUT[2] == 0x06) && (DISPLAY_INPUT[3] == 0x83) &&
 8008310:	4b5c      	ldr	r3, [pc, #368]	@ (8008484 <dwin_data+0x2f30>)
 8008312:	789b      	ldrb	r3, [r3, #2]
		if ((DISPLAY_INPUT[0] == 0x5A) && (DISPLAY_INPUT[1] == 0xA5) &&
 8008314:	2b06      	cmp	r3, #6
 8008316:	d112      	bne.n	800833e <dwin_data+0x2dea>
				(DISPLAY_INPUT[2] == 0x06) && (DISPLAY_INPUT[3] == 0x83) &&
 8008318:	4b5a      	ldr	r3, [pc, #360]	@ (8008484 <dwin_data+0x2f30>)
 800831a:	78db      	ldrb	r3, [r3, #3]
 800831c:	2b83      	cmp	r3, #131	@ 0x83
 800831e:	d10e      	bne.n	800833e <dwin_data+0x2dea>
				(DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0x37) && (DISPLAY_INPUT[8] == 0x4C) ) {
 8008320:	4b58      	ldr	r3, [pc, #352]	@ (8008484 <dwin_data+0x2f30>)
 8008322:	791b      	ldrb	r3, [r3, #4]
				(DISPLAY_INPUT[2] == 0x06) && (DISPLAY_INPUT[3] == 0x83) &&
 8008324:	2b10      	cmp	r3, #16
 8008326:	d10a      	bne.n	800833e <dwin_data+0x2dea>
				(DISPLAY_INPUT[4] == 0x10) && (DISPLAY_INPUT[5] == 0x37) && (DISPLAY_INPUT[8] == 0x4C) ) {
 8008328:	4b56      	ldr	r3, [pc, #344]	@ (8008484 <dwin_data+0x2f30>)
 800832a:	795b      	ldrb	r3, [r3, #5]
 800832c:	2b37      	cmp	r3, #55	@ 0x37
 800832e:	d106      	bne.n	800833e <dwin_data+0x2dea>
 8008330:	4b54      	ldr	r3, [pc, #336]	@ (8008484 <dwin_data+0x2f30>)
 8008332:	7a1b      	ldrb	r3, [r3, #8]
 8008334:	2b4c      	cmp	r3, #76	@ 0x4c
 8008336:	d102      	bne.n	800833e <dwin_data+0x2dea>
			Head = 0;
 8008338:	4b5a      	ldr	r3, [pc, #360]	@ (80084a4 <dwin_data+0x2f50>)
 800833a:	2200      	movs	r2, #0
 800833c:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == GPIO_PIN_RESET){
 800833e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008342:	4859      	ldr	r0, [pc, #356]	@ (80084a8 <dwin_data+0x2f54>)
 8008344:	f005 fc60 	bl	800dc08 <HAL_GPIO_ReadPin>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d134      	bne.n	80083b8 <dwin_data+0x2e64>
			//			HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
			//			HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
			//			HAL_PWR_EnterSTANDBYMode();
			//			Enter_Sleep_Mode();
			PCV_FLAG = 0;
 800834e:	4b4f      	ldr	r3, [pc, #316]	@ (800848c <dwin_data+0x2f38>)
 8008350:	2200      	movs	r2, #0
 8008352:	701a      	strb	r2, [r3, #0]
			VCV_FLAG = 0;
 8008354:	4b4e      	ldr	r3, [pc, #312]	@ (8008490 <dwin_data+0x2f3c>)
 8008356:	2200      	movs	r2, #0
 8008358:	701a      	strb	r2, [r3, #0]
			PSV_FLAG = 0;
 800835a:	4b4e      	ldr	r3, [pc, #312]	@ (8008494 <dwin_data+0x2f40>)
 800835c:	2200      	movs	r2, #0
 800835e:	701a      	strb	r2, [r3, #0]
			STAND_BY = 1;
 8008360:	4b4e      	ldr	r3, [pc, #312]	@ (800849c <dwin_data+0x2f48>)
 8008362:	2201      	movs	r2, #1
 8008364:	701a      	strb	r2, [r3, #0]
			SIMV_FLAG = 0;
 8008366:	4b4c      	ldr	r3, [pc, #304]	@ (8008498 <dwin_data+0x2f44>)
 8008368:	2200      	movs	r2, #0
 800836a:	701a      	strb	r2, [r3, #0]
			BAG_FLAG = 0;
 800836c:	4b4c      	ldr	r3, [pc, #304]	@ (80084a0 <dwin_data+0x2f4c>)
 800836e:	2200      	movs	r2, #0
 8008370:	701a      	strb	r2, [r3, #0]
			stand_ppr_set_flag = 1;
 8008372:	4b4e      	ldr	r3, [pc, #312]	@ (80084ac <dwin_data+0x2f58>)
 8008374:	2201      	movs	r2, #1
 8008376:	701a      	strb	r2, [r3, #0]
			vTaskSuspend(NotificationHandle);
 8008378:	4b4d      	ldr	r3, [pc, #308]	@ (80084b0 <dwin_data+0x2f5c>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4618      	mov	r0, r3
 800837e:	f00b f8e3 	bl	8013548 <vTaskSuspend>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8008382:	2201      	movs	r2, #1
 8008384:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008388:	484a      	ldr	r0, [pc, #296]	@ (80084b4 <dwin_data+0x2f60>)
 800838a:	f005 fc55 	bl	800dc38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 800838e:	2200      	movs	r2, #0
 8008390:	2102      	movs	r1, #2
 8008392:	4848      	ldr	r0, [pc, #288]	@ (80084b4 <dwin_data+0x2f60>)
 8008394:	f005 fc50 	bl	800dc38 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8008398:	4b47      	ldr	r3, [pc, #284]	@ (80084b8 <dwin_data+0x2f64>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2200      	movs	r2, #0
 800839e:	635a      	str	r2, [r3, #52]	@ 0x34
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80083a0:	2200      	movs	r2, #0
 80083a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80083a6:	4845      	ldr	r0, [pc, #276]	@ (80084bc <dwin_data+0x2f68>)
 80083a8:	f005 fc46 	bl	800dc38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80083ac:	2200      	movs	r2, #0
 80083ae:	2104      	movs	r1, #4
 80083b0:	483d      	ldr	r0, [pc, #244]	@ (80084a8 <dwin_data+0x2f54>)
 80083b2:	f005 fc41 	bl	800dc38 <HAL_GPIO_WritePin>
 80083b6:	e01d      	b.n	80083f4 <dwin_data+0x2ea0>
			//			buzz_flag = 0;
		}
		else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == GPIO_PIN_SET){
 80083b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80083bc:	483a      	ldr	r0, [pc, #232]	@ (80084a8 <dwin_data+0x2f54>)
 80083be:	f005 fc23 	bl	800dc08 <HAL_GPIO_ReadPin>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d115      	bne.n	80083f4 <dwin_data+0x2ea0>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 80083c8:	2200      	movs	r2, #0
 80083ca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80083ce:	4839      	ldr	r0, [pc, #228]	@ (80084b4 <dwin_data+0x2f60>)
 80083d0:	f005 fc32 	bl	800dc38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80083d4:	2201      	movs	r2, #1
 80083d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80083da:	4838      	ldr	r0, [pc, #224]	@ (80084bc <dwin_data+0x2f68>)
 80083dc:	f005 fc2c 	bl	800dc38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80083e0:	2201      	movs	r2, #1
 80083e2:	2104      	movs	r1, #4
 80083e4:	4830      	ldr	r0, [pc, #192]	@ (80084a8 <dwin_data+0x2f54>)
 80083e6:	f005 fc27 	bl	800dc38 <HAL_GPIO_WritePin>
			vTaskResume(NotificationHandle);
 80083ea:	4b31      	ldr	r3, [pc, #196]	@ (80084b0 <dwin_data+0x2f5c>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4618      	mov	r0, r3
 80083f0:	f00b f970 	bl	80136d4 <vTaskResume>

		}
		if ((DISPLAY_INPUT[5] == 0xBC) || (DISPLAY_INPUT[5] == 0xBD) || (DISPLAY_INPUT[5] == 0xBE) || (DISPLAY_INPUT[5] == 0xBF) ||
 80083f4:	4b23      	ldr	r3, [pc, #140]	@ (8008484 <dwin_data+0x2f30>)
 80083f6:	795b      	ldrb	r3, [r3, #5]
 80083f8:	2bbc      	cmp	r3, #188	@ 0xbc
 80083fa:	d017      	beq.n	800842c <dwin_data+0x2ed8>
 80083fc:	4b21      	ldr	r3, [pc, #132]	@ (8008484 <dwin_data+0x2f30>)
 80083fe:	795b      	ldrb	r3, [r3, #5]
 8008400:	2bbd      	cmp	r3, #189	@ 0xbd
 8008402:	d013      	beq.n	800842c <dwin_data+0x2ed8>
 8008404:	4b1f      	ldr	r3, [pc, #124]	@ (8008484 <dwin_data+0x2f30>)
 8008406:	795b      	ldrb	r3, [r3, #5]
 8008408:	2bbe      	cmp	r3, #190	@ 0xbe
 800840a:	d00f      	beq.n	800842c <dwin_data+0x2ed8>
 800840c:	4b1d      	ldr	r3, [pc, #116]	@ (8008484 <dwin_data+0x2f30>)
 800840e:	795b      	ldrb	r3, [r3, #5]
 8008410:	2bbf      	cmp	r3, #191	@ 0xbf
 8008412:	d00b      	beq.n	800842c <dwin_data+0x2ed8>
				(DISPLAY_INPUT[5] == 0xC0) || (DISPLAY_INPUT[5] == 0xC1) || (DISPLAY_INPUT[5] == 0xC8)){
 8008414:	4b1b      	ldr	r3, [pc, #108]	@ (8008484 <dwin_data+0x2f30>)
 8008416:	795b      	ldrb	r3, [r3, #5]
		if ((DISPLAY_INPUT[5] == 0xBC) || (DISPLAY_INPUT[5] == 0xBD) || (DISPLAY_INPUT[5] == 0xBE) || (DISPLAY_INPUT[5] == 0xBF) ||
 8008418:	2bc0      	cmp	r3, #192	@ 0xc0
 800841a:	d007      	beq.n	800842c <dwin_data+0x2ed8>
				(DISPLAY_INPUT[5] == 0xC0) || (DISPLAY_INPUT[5] == 0xC1) || (DISPLAY_INPUT[5] == 0xC8)){
 800841c:	4b19      	ldr	r3, [pc, #100]	@ (8008484 <dwin_data+0x2f30>)
 800841e:	795b      	ldrb	r3, [r3, #5]
 8008420:	2bc1      	cmp	r3, #193	@ 0xc1
 8008422:	d003      	beq.n	800842c <dwin_data+0x2ed8>
 8008424:	4b17      	ldr	r3, [pc, #92]	@ (8008484 <dwin_data+0x2f30>)
 8008426:	795b      	ldrb	r3, [r3, #5]
 8008428:	2bc8      	cmp	r3, #200	@ 0xc8
 800842a:	d120      	bne.n	800846e <dwin_data+0x2f1a>
			osDelay(30);
 800842c:	201e      	movs	r0, #30
 800842e:	f009 ffc4 	bl	80123ba <osDelay>
			uint8_t clear_graph[8] = { 0x5A, 0xA5, 0x05, 0x82, 0x03, 0x05, 0x00, 0x00 };
 8008432:	4a23      	ldr	r2, [pc, #140]	@ (80084c0 <dwin_data+0x2f6c>)
 8008434:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8008438:	e892 0003 	ldmia.w	r2, {r0, r1}
 800843c:	e883 0003 	stmia.w	r3, {r0, r1}
			uint8_t clear_graph2[8] = { 0x5A, 0xA5, 0x05, 0x82, 0x03, 0x0B, 0x00, 0x00 };
 8008440:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008444:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008448:	4a1e      	ldr	r2, [pc, #120]	@ (80084c4 <dwin_data+0x2f70>)
 800844a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800844e:	e883 0003 	stmia.w	r3, {r0, r1}
			HAL_UART_Transmit(&huart1, clear_graph, sizeof(clear_graph),
 8008452:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8008456:	2301      	movs	r3, #1
 8008458:	2208      	movs	r2, #8
 800845a:	481b      	ldr	r0, [pc, #108]	@ (80084c8 <dwin_data+0x2f74>)
 800845c:	f008 fc5a 	bl	8010d14 <HAL_UART_Transmit>
					1);
			HAL_UART_Transmit(&huart1, clear_graph2, sizeof(clear_graph2),
 8008460:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8008464:	2301      	movs	r3, #1
 8008466:	2208      	movs	r2, #8
 8008468:	4817      	ldr	r0, [pc, #92]	@ (80084c8 <dwin_data+0x2f74>)
 800846a:	f008 fc53 	bl	8010d14 <HAL_UART_Transmit>
					1);
		}

		cls_cmd(temp_add);
 800846e:	4b17      	ldr	r3, [pc, #92]	@ (80084cc <dwin_data+0x2f78>)
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	4618      	mov	r0, r3
 8008474:	f7fa fa28 	bl	80028c8 <cls_cmd>

		vTaskDelay(pdMS_TO_TICKS(5));
 8008478:	2005      	movs	r0, #5
 800847a:	f00b f82f 	bl	80134dc <vTaskDelay>
		if(Trigger_Display){
 800847e:	f7fd ba6e 	b.w	800595e <dwin_data+0x40a>
 8008482:	bf00      	nop
 8008484:	20001938 	.word	0x20001938
 8008488:	200019ae 	.word	0x200019ae
 800848c:	200019ac 	.word	0x200019ac
 8008490:	200019ab 	.word	0x200019ab
 8008494:	200019aa 	.word	0x200019aa
 8008498:	200019a8 	.word	0x200019a8
 800849c:	200019a9 	.word	0x200019a9
 80084a0:	200019ad 	.word	0x200019ad
 80084a4:	200019e6 	.word	0x200019e6
 80084a8:	40020800 	.word	0x40020800
 80084ac:	200019c3 	.word	0x200019c3
 80084b0:	2000112c 	.word	0x2000112c
 80084b4:	40021000 	.word	0x40021000
 80084b8:	20000f88 	.word	0x20000f88
 80084bc:	40020c00 	.word	0x40020c00
 80084c0:	080161b0 	.word	0x080161b0
 80084c4:	080161b8 	.word	0x080161b8
 80084c8:	20000fd0 	.word	0x20000fd0
 80084cc:	20001951 	.word	0x20001951

080084d0 <sensor_one>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_sensor_one */
void sensor_one(void const * argument)
{
 80084d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80084d4:	b086      	sub	sp, #24
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	6078      	str	r0, [r7, #4]

		////.......oxygen_sensor..............
		//		MCP3551_ReadData();
		//		convert_ADC_to_Percentage(adcValue);
		//		oxy_per();
		uint8_t sensor_data_counter = 0;
 80084da:	2300      	movs	r3, #0
 80084dc:	75fb      	strb	r3, [r7, #23]
		for(int a = 0; a < 24; a++){
 80084de:	2300      	movs	r3, #0
 80084e0:	613b      	str	r3, [r7, #16]
 80084e2:	e01d      	b.n	8008520 <sensor_one+0x50>
			if(sensor_data[a] == 0x11){
 80084e4:	4a78      	ldr	r2, [pc, #480]	@ (80086c8 <sensor_one+0x1f8>)
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	4413      	add	r3, r2
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	2b11      	cmp	r3, #17
 80084ee:	d114      	bne.n	800851a <sensor_one+0x4a>
				for(int b = a; b < (a+ 12); b++){
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	60fb      	str	r3, [r7, #12]
 80084f4:	e00c      	b.n	8008510 <sensor_one+0x40>
					final_sensor_data[sensor_data_counter] = sensor_data[b];
 80084f6:	7dfb      	ldrb	r3, [r7, #23]
 80084f8:	4973      	ldr	r1, [pc, #460]	@ (80086c8 <sensor_one+0x1f8>)
 80084fa:	68fa      	ldr	r2, [r7, #12]
 80084fc:	440a      	add	r2, r1
 80084fe:	7811      	ldrb	r1, [r2, #0]
 8008500:	4a72      	ldr	r2, [pc, #456]	@ (80086cc <sensor_one+0x1fc>)
 8008502:	54d1      	strb	r1, [r2, r3]
					sensor_data_counter++;
 8008504:	7dfb      	ldrb	r3, [r7, #23]
 8008506:	3301      	adds	r3, #1
 8008508:	75fb      	strb	r3, [r7, #23]
				for(int b = a; b < (a+ 12); b++){
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	3301      	adds	r3, #1
 800850e:	60fb      	str	r3, [r7, #12]
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	330b      	adds	r3, #11
 8008514:	68fa      	ldr	r2, [r7, #12]
 8008516:	429a      	cmp	r2, r3
 8008518:	dded      	ble.n	80084f6 <sensor_one+0x26>
		for(int a = 0; a < 24; a++){
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	3301      	adds	r3, #1
 800851e:	613b      	str	r3, [r7, #16]
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	2b17      	cmp	r3, #23
 8008524:	ddde      	ble.n	80084e4 <sensor_one+0x14>
				}
			}
		}
		pressure_adc = (((final_sensor_data[3] << 8)) | final_sensor_data[4]);
 8008526:	4b69      	ldr	r3, [pc, #420]	@ (80086cc <sensor_one+0x1fc>)
 8008528:	78db      	ldrb	r3, [r3, #3]
 800852a:	b21b      	sxth	r3, r3
 800852c:	021b      	lsls	r3, r3, #8
 800852e:	b21a      	sxth	r2, r3
 8008530:	4b66      	ldr	r3, [pc, #408]	@ (80086cc <sensor_one+0x1fc>)
 8008532:	791b      	ldrb	r3, [r3, #4]
 8008534:	b21b      	sxth	r3, r3
 8008536:	4313      	orrs	r3, r2
 8008538:	b21b      	sxth	r3, r3
 800853a:	b29a      	uxth	r2, r3
 800853c:	4b64      	ldr	r3, [pc, #400]	@ (80086d0 <sensor_one+0x200>)
 800853e:	801a      	strh	r2, [r3, #0]
		//		pressure_adc = ((final_sensor_data[3] << 8));
		pressure_data = ((pressure_adc - DigoutP_Min)/Sensp) - 1.496;
 8008540:	4b63      	ldr	r3, [pc, #396]	@ (80086d0 <sensor_one+0x200>)
 8008542:	881b      	ldrh	r3, [r3, #0]
 8008544:	f6a3 43cd 	subw	r3, r3, #3277	@ 0xccd
 8008548:	4618      	mov	r0, r3
 800854a:	f7f7 ffe3 	bl	8000514 <__aeabi_i2d>
 800854e:	a358      	add	r3, pc, #352	@ (adr r3, 80086b0 <sensor_one+0x1e0>)
 8008550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008554:	f7f8 f972 	bl	800083c <__aeabi_ddiv>
 8008558:	4602      	mov	r2, r0
 800855a:	460b      	mov	r3, r1
 800855c:	4610      	mov	r0, r2
 800855e:	4619      	mov	r1, r3
 8008560:	a355      	add	r3, pc, #340	@ (adr r3, 80086b8 <sensor_one+0x1e8>)
 8008562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008566:	f7f7 fe87 	bl	8000278 <__aeabi_dsub>
 800856a:	4602      	mov	r2, r0
 800856c:	460b      	mov	r3, r1
 800856e:	4610      	mov	r0, r2
 8008570:	4619      	mov	r1, r3
 8008572:	f7f8 fb31 	bl	8000bd8 <__aeabi_d2f>
 8008576:	4603      	mov	r3, r0
 8008578:	4a56      	ldr	r2, [pc, #344]	@ (80086d4 <sensor_one+0x204>)
 800857a:	6013      	str	r3, [r2, #0]
		mbar = pressure_data * 70.307;
 800857c:	4b55      	ldr	r3, [pc, #340]	@ (80086d4 <sensor_one+0x204>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4618      	mov	r0, r3
 8008582:	f7f7 ffd9 	bl	8000538 <__aeabi_f2d>
 8008586:	a34e      	add	r3, pc, #312	@ (adr r3, 80086c0 <sensor_one+0x1f0>)
 8008588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858c:	f7f8 f82c 	bl	80005e8 <__aeabi_dmul>
 8008590:	4602      	mov	r2, r0
 8008592:	460b      	mov	r3, r1
 8008594:	4610      	mov	r0, r2
 8008596:	4619      	mov	r1, r3
 8008598:	f7f8 fb1e 	bl	8000bd8 <__aeabi_d2f>
 800859c:	4603      	mov	r3, r0
 800859e:	4a4e      	ldr	r2, [pc, #312]	@ (80086d8 <sensor_one+0x208>)
 80085a0:	6013      	str	r3, [r2, #0]
		pressure = mbar;
 80085a2:	4b4d      	ldr	r3, [pc, #308]	@ (80086d8 <sensor_one+0x208>)
 80085a4:	edd3 7a00 	vldr	s15, [r3]
 80085a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80085ac:	ee17 2a90 	vmov	r2, s15
 80085b0:	4b4a      	ldr	r3, [pc, #296]	@ (80086dc <sensor_one+0x20c>)
 80085b2:	601a      	str	r2, [r3, #0]

		sprintf(pressure_string, "%X", pressure);
 80085b4:	4b49      	ldr	r3, [pc, #292]	@ (80086dc <sensor_one+0x20c>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	461a      	mov	r2, r3
 80085ba:	4949      	ldr	r1, [pc, #292]	@ (80086e0 <sensor_one+0x210>)
 80085bc:	4849      	ldr	r0, [pc, #292]	@ (80086e4 <sensor_one+0x214>)
 80085be:	f00c ffb5 	bl	801552c <siprintf>
		sprintf("hex %s", pressure_string);
 80085c2:	4948      	ldr	r1, [pc, #288]	@ (80086e4 <sensor_one+0x214>)
 80085c4:	4848      	ldr	r0, [pc, #288]	@ (80086e8 <sensor_one+0x218>)
 80085c6:	f00c ffb1 	bl	801552c <siprintf>
		strtohex[0] = pressure_string[0];
 80085ca:	4b46      	ldr	r3, [pc, #280]	@ (80086e4 <sensor_one+0x214>)
 80085cc:	781a      	ldrb	r2, [r3, #0]
 80085ce:	4b47      	ldr	r3, [pc, #284]	@ (80086ec <sensor_one+0x21c>)
 80085d0:	701a      	strb	r2, [r3, #0]
		strtohex[1] = pressure_string[1];
 80085d2:	4b44      	ldr	r3, [pc, #272]	@ (80086e4 <sensor_one+0x214>)
 80085d4:	785a      	ldrb	r2, [r3, #1]
 80085d6:	4b45      	ldr	r3, [pc, #276]	@ (80086ec <sensor_one+0x21c>)
 80085d8:	705a      	strb	r2, [r3, #1]
		strtohex[2] = '\0';
 80085da:	4b44      	ldr	r3, [pc, #272]	@ (80086ec <sensor_one+0x21c>)
 80085dc:	2200      	movs	r2, #0
 80085de:	709a      	strb	r2, [r3, #2]
		result2 = (uint8_t) strtol(strtohex, NULL, 16);
 80085e0:	2210      	movs	r2, #16
 80085e2:	2100      	movs	r1, #0
 80085e4:	4841      	ldr	r0, [pc, #260]	@ (80086ec <sensor_one+0x21c>)
 80085e6:	f00c ff97 	bl	8015518 <strtol>
 80085ea:	4603      	mov	r3, r0
 80085ec:	b2da      	uxtb	r2, r3
 80085ee:	4b40      	ldr	r3, [pc, #256]	@ (80086f0 <sensor_one+0x220>)
 80085f0:	701a      	strb	r2, [r3, #0]

		if(Peep_control_flag == 1){
 80085f2:	4b40      	ldr	r3, [pc, #256]	@ (80086f4 <sensor_one+0x224>)
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d01e      	beq.n	8008638 <sensor_one+0x168>
			static int value = 0;
			value = result2 - PEEP_temp_value;
 80085fa:	4b3d      	ldr	r3, [pc, #244]	@ (80086f0 <sensor_one+0x220>)
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	461a      	mov	r2, r3
 8008600:	4b3d      	ldr	r3, [pc, #244]	@ (80086f8 <sensor_one+0x228>)
 8008602:	781b      	ldrb	r3, [r3, #0]
 8008604:	1ad3      	subs	r3, r2, r3
 8008606:	4a3d      	ldr	r2, [pc, #244]	@ (80086fc <sensor_one+0x22c>)
 8008608:	6013      	str	r3, [r2, #0]
			if(((value <= 2)&&(value>=0))||((value <= 0)&&(value>=-2))){
 800860a:	4b3c      	ldr	r3, [pc, #240]	@ (80086fc <sensor_one+0x22c>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2b02      	cmp	r3, #2
 8008610:	dc03      	bgt.n	800861a <sensor_one+0x14a>
 8008612:	4b3a      	ldr	r3, [pc, #232]	@ (80086fc <sensor_one+0x22c>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	da08      	bge.n	800862c <sensor_one+0x15c>
 800861a:	4b38      	ldr	r3, [pc, #224]	@ (80086fc <sensor_one+0x22c>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	2b00      	cmp	r3, #0
 8008620:	dc0a      	bgt.n	8008638 <sensor_one+0x168>
 8008622:	4b36      	ldr	r3, [pc, #216]	@ (80086fc <sensor_one+0x22c>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f113 0f02 	cmn.w	r3, #2
 800862a:	db05      	blt.n	8008638 <sensor_one+0x168>
				//			if(PEEP_temp_value == result2){
				//			if((PEEP_temp_value == result2 + 1)||(PEEP_temp_value == result2 - 1)|| (PEEP_temp_value == result2)){

				//				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PIDOut);
				//				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 800862c:	2201      	movs	r2, #1
 800862e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008632:	4833      	ldr	r0, [pc, #204]	@ (8008700 <sensor_one+0x230>)
 8008634:	f005 fb00 	bl	800dc38 <HAL_GPIO_WritePin>

			}
		}

		if(P_HI<=result2)
 8008638:	4b32      	ldr	r3, [pc, #200]	@ (8008704 <sensor_one+0x234>)
 800863a:	781a      	ldrb	r2, [r3, #0]
 800863c:	4b2c      	ldr	r3, [pc, #176]	@ (80086f0 <sensor_one+0x220>)
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	429a      	cmp	r2, r3
 8008642:	d804      	bhi.n	800864e <sensor_one+0x17e>
		{
			P_HI=result2;
 8008644:	4b2a      	ldr	r3, [pc, #168]	@ (80086f0 <sensor_one+0x220>)
 8008646:	781a      	ldrb	r2, [r3, #0]
 8008648:	4b2e      	ldr	r3, [pc, #184]	@ (8008704 <sensor_one+0x234>)
 800864a:	701a      	strb	r2, [r3, #0]
 800864c:	e003      	b.n	8008656 <sensor_one+0x186>
		}
		else
		{
			P_HI=result2;
 800864e:	4b28      	ldr	r3, [pc, #160]	@ (80086f0 <sensor_one+0x220>)
 8008650:	781a      	ldrb	r2, [r3, #0]
 8008652:	4b2c      	ldr	r3, [pc, #176]	@ (8008704 <sensor_one+0x234>)
 8008654:	701a      	strb	r2, [r3, #0]
		}

		if(P_HI==255)
 8008656:	4b2b      	ldr	r3, [pc, #172]	@ (8008704 <sensor_one+0x234>)
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	2bff      	cmp	r3, #255	@ 0xff
 800865c:	d102      	bne.n	8008664 <sensor_one+0x194>
		{
			P_HI=0;
 800865e:	4b29      	ldr	r3, [pc, #164]	@ (8008704 <sensor_one+0x234>)
 8008660:	2200      	movs	r2, #0
 8008662:	701a      	strb	r2, [r3, #0]
		}

		// flow Sensor code
		flow_byts = (final_sensor_data[1] << 8) | final_sensor_data[2];
 8008664:	4b19      	ldr	r3, [pc, #100]	@ (80086cc <sensor_one+0x1fc>)
 8008666:	785b      	ldrb	r3, [r3, #1]
 8008668:	b21b      	sxth	r3, r3
 800866a:	021b      	lsls	r3, r3, #8
 800866c:	b21a      	sxth	r2, r3
 800866e:	4b17      	ldr	r3, [pc, #92]	@ (80086cc <sensor_one+0x1fc>)
 8008670:	789b      	ldrb	r3, [r3, #2]
 8008672:	b21b      	sxth	r3, r3
 8008674:	4313      	orrs	r3, r2
 8008676:	b21b      	sxth	r3, r3
 8008678:	b29a      	uxth	r2, r3
 800867a:	4b23      	ldr	r3, [pc, #140]	@ (8008708 <sensor_one+0x238>)
 800867c:	801a      	strh	r2, [r3, #0]
		if (flow_byts < offset) {
 800867e:	4b22      	ldr	r3, [pc, #136]	@ (8008708 <sensor_one+0x238>)
 8008680:	881b      	ldrh	r3, [r3, #0]
 8008682:	461a      	mov	r2, r3
 8008684:	4b21      	ldr	r3, [pc, #132]	@ (800870c <sensor_one+0x23c>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	429a      	cmp	r2, r3
 800868a:	da45      	bge.n	8008718 <sensor_one+0x248>
			data = (offset - flow_byts) / scal_fact; // Array to hold the resulting hexadecimal string
 800868c:	4b1f      	ldr	r3, [pc, #124]	@ (800870c <sensor_one+0x23c>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a1d      	ldr	r2, [pc, #116]	@ (8008708 <sensor_one+0x238>)
 8008692:	8812      	ldrh	r2, [r2, #0]
 8008694:	1a9a      	subs	r2, r3, r2
 8008696:	4b1e      	ldr	r3, [pc, #120]	@ (8008710 <sensor_one+0x240>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	fb92 f3f3 	sdiv	r3, r2, r3
 800869e:	4a1d      	ldr	r2, [pc, #116]	@ (8008714 <sensor_one+0x244>)
 80086a0:	6013      	str	r3, [r2, #0]
			data = 100 - data;
 80086a2:	4b1c      	ldr	r3, [pc, #112]	@ (8008714 <sensor_one+0x244>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80086aa:	4a1a      	ldr	r2, [pc, #104]	@ (8008714 <sensor_one+0x244>)
 80086ac:	6013      	str	r3, [r2, #0]
 80086ae:	e048      	b.n	8008742 <sensor_one+0x272>
 80086b0:	00000000 	.word	0x00000000
 80086b4:	40c11100 	.word	0x40c11100
 80086b8:	b22d0e56 	.word	0xb22d0e56
 80086bc:	3ff7ef9d 	.word	0x3ff7ef9d
 80086c0:	e353f7cf 	.word	0xe353f7cf
 80086c4:	405193a5 	.word	0x405193a5
 80086c8:	20001320 	.word	0x20001320
 80086cc:	20001338 	.word	0x20001338
 80086d0:	20001344 	.word	0x20001344
 80086d4:	2000134c 	.word	0x2000134c
 80086d8:	2000136c 	.word	0x2000136c
 80086dc:	20001374 	.word	0x20001374
 80086e0:	08016124 	.word	0x08016124
 80086e4:	20001a78 	.word	0x20001a78
 80086e8:	08016128 	.word	0x08016128
 80086ec:	20001a7c 	.word	0x20001a7c
 80086f0:	20001a90 	.word	0x20001a90
 80086f4:	20001a01 	.word	0x20001a01
 80086f8:	20001968 	.word	0x20001968
 80086fc:	20001b5c 	.word	0x20001b5c
 8008700:	40021000 	.word	0x40021000
 8008704:	2000191c 	.word	0x2000191c
 8008708:	20001314 	.word	0x20001314
 800870c:	20000010 	.word	0x20000010
 8008710:	20000014 	.word	0x20000014
 8008714:	20001318 	.word	0x20001318
		} else {
			data = (flow_byts - offset) / scal_fact;
 8008718:	4bc1      	ldr	r3, [pc, #772]	@ (8008a20 <sensor_one+0x550>)
 800871a:	881b      	ldrh	r3, [r3, #0]
 800871c:	461a      	mov	r2, r3
 800871e:	4bc1      	ldr	r3, [pc, #772]	@ (8008a24 <sensor_one+0x554>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	1ad2      	subs	r2, r2, r3
 8008724:	4bc0      	ldr	r3, [pc, #768]	@ (8008a28 <sensor_one+0x558>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	fb92 f3f3 	sdiv	r3, r2, r3
 800872c:	4abf      	ldr	r2, [pc, #764]	@ (8008a2c <sensor_one+0x55c>)
 800872e:	6013      	str	r3, [r2, #0]
			data += 100;
 8008730:	4bbe      	ldr	r3, [pc, #760]	@ (8008a2c <sensor_one+0x55c>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	3364      	adds	r3, #100	@ 0x64
 8008736:	4abd      	ldr	r2, [pc, #756]	@ (8008a2c <sensor_one+0x55c>)
 8008738:	6013      	str	r3, [r2, #0]
			raw_flow_val = data;
 800873a:	4bbc      	ldr	r3, [pc, #752]	@ (8008a2c <sensor_one+0x55c>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4abc      	ldr	r2, [pc, #752]	@ (8008a30 <sensor_one+0x560>)
 8008740:	6013      	str	r3, [r2, #0]
		}
		//		ppr_flow_data = data;
		flow_adc = ((final_sensor_data[5] << 8) | final_sensor_data[6]);
 8008742:	4bbc      	ldr	r3, [pc, #752]	@ (8008a34 <sensor_one+0x564>)
 8008744:	795b      	ldrb	r3, [r3, #5]
 8008746:	b21b      	sxth	r3, r3
 8008748:	021b      	lsls	r3, r3, #8
 800874a:	b21a      	sxth	r2, r3
 800874c:	4bb9      	ldr	r3, [pc, #740]	@ (8008a34 <sensor_one+0x564>)
 800874e:	799b      	ldrb	r3, [r3, #6]
 8008750:	b21b      	sxth	r3, r3
 8008752:	4313      	orrs	r3, r2
 8008754:	b21b      	sxth	r3, r3
 8008756:	b29a      	uxth	r2, r3
 8008758:	4bb7      	ldr	r3, [pc, #732]	@ (8008a38 <sensor_one+0x568>)
 800875a:	801a      	strh	r2, [r3, #0]
		flow_data = ((flow_adc - DigoutP_Min)/Sensitivity) - 0.075;
 800875c:	4bb6      	ldr	r3, [pc, #728]	@ (8008a38 <sensor_one+0x568>)
 800875e:	881b      	ldrh	r3, [r3, #0]
 8008760:	f6a3 43cd 	subw	r3, r3, #3277	@ 0xccd
 8008764:	4618      	mov	r0, r3
 8008766:	f7f7 fed5 	bl	8000514 <__aeabi_i2d>
 800876a:	a3a3      	add	r3, pc, #652	@ (adr r3, 80089f8 <sensor_one+0x528>)
 800876c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008770:	f7f8 f864 	bl	800083c <__aeabi_ddiv>
 8008774:	4602      	mov	r2, r0
 8008776:	460b      	mov	r3, r1
 8008778:	4610      	mov	r0, r2
 800877a:	4619      	mov	r1, r3
 800877c:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8008780:	4bae      	ldr	r3, [pc, #696]	@ (8008a3c <sensor_one+0x56c>)
 8008782:	f7f7 fd79 	bl	8000278 <__aeabi_dsub>
 8008786:	4602      	mov	r2, r0
 8008788:	460b      	mov	r3, r1
 800878a:	4610      	mov	r0, r2
 800878c:	4619      	mov	r1, r3
 800878e:	f7f8 fa23 	bl	8000bd8 <__aeabi_d2f>
 8008792:	4603      	mov	r3, r0
 8008794:	4aaa      	ldr	r2, [pc, #680]	@ (8008a40 <sensor_one+0x570>)
 8008796:	6013      	str	r3, [r2, #0]
		dp = flow_data * 69; // cmH2O
 8008798:	4ba9      	ldr	r3, [pc, #676]	@ (8008a40 <sensor_one+0x570>)
 800879a:	edd3 7a00 	vldr	s15, [r3]
 800879e:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8008a44 <sensor_one+0x574>
 80087a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80087a6:	4ba8      	ldr	r3, [pc, #672]	@ (8008a48 <sensor_one+0x578>)
 80087a8:	edc3 7a00 	vstr	s15, [r3]
		update_mbar_history(dp);  // Smooth the value
 80087ac:	4ba6      	ldr	r3, [pc, #664]	@ (8008a48 <sensor_one+0x578>)
 80087ae:	edd3 7a00 	vldr	s15, [r3]
 80087b2:	eeb0 0a67 	vmov.f32	s0, s15
 80087b6:	f7fb f91f 	bl	80039f8 <update_mbar_history>
		p_flow = mbar2_smooth;
 80087ba:	4ba4      	ldr	r3, [pc, #656]	@ (8008a4c <sensor_one+0x57c>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4aa4      	ldr	r2, [pc, #656]	@ (8008a50 <sensor_one+0x580>)
 80087c0:	6013      	str	r3, [r2, #0]

		computeFlowFromPressure(dp);
 80087c2:	4ba1      	ldr	r3, [pc, #644]	@ (8008a48 <sensor_one+0x578>)
 80087c4:	edd3 7a00 	vldr	s15, [r3]
 80087c8:	eeb0 0a67 	vmov.f32	s0, s15
 80087cc:	f7fc fdd8 	bl	8005380 <computeFlowFromPressure>

		//		update_mbar_history(flow);  // Smooth the value

		//		        pressure_graph2 = (int)mbar2_smooth;

		if (VT_UPDATE_FLAG == 1){
 80087d0:	4ba0      	ldr	r3, [pc, #640]	@ (8008a54 <sensor_one+0x584>)
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	f000 81a7 	beq.w	8008b28 <sensor_one+0x658>
			//			Q = (0.1512 * dp * dp * dp) - (3.3424 * dp * dp) + (41.65 * dp);
			//			Q = (0.05 * p_flow * p_flow * p_flow) - (0.5 * p_flow * p_flow) + (41.65 * p_flow);
			Q = (0.15 * p_flow * p_flow * p_flow) - (3.3 * p_flow * p_flow) + (41.65 * p_flow);
 80087da:	4b9d      	ldr	r3, [pc, #628]	@ (8008a50 <sensor_one+0x580>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4618      	mov	r0, r3
 80087e0:	f7f7 feaa 	bl	8000538 <__aeabi_f2d>
 80087e4:	a386      	add	r3, pc, #536	@ (adr r3, 8008a00 <sensor_one+0x530>)
 80087e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ea:	f7f7 fefd 	bl	80005e8 <__aeabi_dmul>
 80087ee:	4602      	mov	r2, r0
 80087f0:	460b      	mov	r3, r1
 80087f2:	4614      	mov	r4, r2
 80087f4:	461d      	mov	r5, r3
 80087f6:	4b96      	ldr	r3, [pc, #600]	@ (8008a50 <sensor_one+0x580>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7f7 fe9c 	bl	8000538 <__aeabi_f2d>
 8008800:	4602      	mov	r2, r0
 8008802:	460b      	mov	r3, r1
 8008804:	4620      	mov	r0, r4
 8008806:	4629      	mov	r1, r5
 8008808:	f7f7 feee 	bl	80005e8 <__aeabi_dmul>
 800880c:	4602      	mov	r2, r0
 800880e:	460b      	mov	r3, r1
 8008810:	4614      	mov	r4, r2
 8008812:	461d      	mov	r5, r3
 8008814:	4b8e      	ldr	r3, [pc, #568]	@ (8008a50 <sensor_one+0x580>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4618      	mov	r0, r3
 800881a:	f7f7 fe8d 	bl	8000538 <__aeabi_f2d>
 800881e:	4602      	mov	r2, r0
 8008820:	460b      	mov	r3, r1
 8008822:	4620      	mov	r0, r4
 8008824:	4629      	mov	r1, r5
 8008826:	f7f7 fedf 	bl	80005e8 <__aeabi_dmul>
 800882a:	4602      	mov	r2, r0
 800882c:	460b      	mov	r3, r1
 800882e:	4614      	mov	r4, r2
 8008830:	461d      	mov	r5, r3
 8008832:	4b87      	ldr	r3, [pc, #540]	@ (8008a50 <sensor_one+0x580>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4618      	mov	r0, r3
 8008838:	f7f7 fe7e 	bl	8000538 <__aeabi_f2d>
 800883c:	a372      	add	r3, pc, #456	@ (adr r3, 8008a08 <sensor_one+0x538>)
 800883e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008842:	f7f7 fed1 	bl	80005e8 <__aeabi_dmul>
 8008846:	4602      	mov	r2, r0
 8008848:	460b      	mov	r3, r1
 800884a:	4690      	mov	r8, r2
 800884c:	4699      	mov	r9, r3
 800884e:	4b80      	ldr	r3, [pc, #512]	@ (8008a50 <sensor_one+0x580>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4618      	mov	r0, r3
 8008854:	f7f7 fe70 	bl	8000538 <__aeabi_f2d>
 8008858:	4602      	mov	r2, r0
 800885a:	460b      	mov	r3, r1
 800885c:	4640      	mov	r0, r8
 800885e:	4649      	mov	r1, r9
 8008860:	f7f7 fec2 	bl	80005e8 <__aeabi_dmul>
 8008864:	4602      	mov	r2, r0
 8008866:	460b      	mov	r3, r1
 8008868:	4620      	mov	r0, r4
 800886a:	4629      	mov	r1, r5
 800886c:	f7f7 fd04 	bl	8000278 <__aeabi_dsub>
 8008870:	4602      	mov	r2, r0
 8008872:	460b      	mov	r3, r1
 8008874:	4614      	mov	r4, r2
 8008876:	461d      	mov	r5, r3
 8008878:	4b75      	ldr	r3, [pc, #468]	@ (8008a50 <sensor_one+0x580>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4618      	mov	r0, r3
 800887e:	f7f7 fe5b 	bl	8000538 <__aeabi_f2d>
 8008882:	a363      	add	r3, pc, #396	@ (adr r3, 8008a10 <sensor_one+0x540>)
 8008884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008888:	f7f7 feae 	bl	80005e8 <__aeabi_dmul>
 800888c:	4602      	mov	r2, r0
 800888e:	460b      	mov	r3, r1
 8008890:	4620      	mov	r0, r4
 8008892:	4629      	mov	r1, r5
 8008894:	f7f7 fcf2 	bl	800027c <__adddf3>
 8008898:	4602      	mov	r2, r0
 800889a:	460b      	mov	r3, r1
 800889c:	4610      	mov	r0, r2
 800889e:	4619      	mov	r1, r3
 80088a0:	f7f8 f99a 	bl	8000bd8 <__aeabi_d2f>
 80088a4:	4603      	mov	r3, r0
 80088a6:	4a6c      	ldr	r2, [pc, #432]	@ (8008a58 <sensor_one+0x588>)
 80088a8:	6013      	str	r3, [r2, #0]
			mlsQ = Q * 16.67;
 80088aa:	4b6b      	ldr	r3, [pc, #428]	@ (8008a58 <sensor_one+0x588>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7f7 fe42 	bl	8000538 <__aeabi_f2d>
 80088b4:	a358      	add	r3, pc, #352	@ (adr r3, 8008a18 <sensor_one+0x548>)
 80088b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ba:	f7f7 fe95 	bl	80005e8 <__aeabi_dmul>
 80088be:	4602      	mov	r2, r0
 80088c0:	460b      	mov	r3, r1
 80088c2:	4610      	mov	r0, r2
 80088c4:	4619      	mov	r1, r3
 80088c6:	f7f8 f93f 	bl	8000b48 <__aeabi_d2iz>
 80088ca:	4603      	mov	r3, r0
 80088cc:	4a63      	ldr	r2, [pc, #396]	@ (8008a5c <sensor_one+0x58c>)
 80088ce:	6013      	str	r3, [r2, #0]
			Qin = (0.15 * p_flow * p_flow * p_flow) - (3.3 * p_flow * p_flow) + (41.65 * p_flow) * (-1);
 80088d0:	4b5f      	ldr	r3, [pc, #380]	@ (8008a50 <sensor_one+0x580>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4618      	mov	r0, r3
 80088d6:	f7f7 fe2f 	bl	8000538 <__aeabi_f2d>
 80088da:	a349      	add	r3, pc, #292	@ (adr r3, 8008a00 <sensor_one+0x530>)
 80088dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e0:	f7f7 fe82 	bl	80005e8 <__aeabi_dmul>
 80088e4:	4602      	mov	r2, r0
 80088e6:	460b      	mov	r3, r1
 80088e8:	4614      	mov	r4, r2
 80088ea:	461d      	mov	r5, r3
 80088ec:	4b58      	ldr	r3, [pc, #352]	@ (8008a50 <sensor_one+0x580>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4618      	mov	r0, r3
 80088f2:	f7f7 fe21 	bl	8000538 <__aeabi_f2d>
 80088f6:	4602      	mov	r2, r0
 80088f8:	460b      	mov	r3, r1
 80088fa:	4620      	mov	r0, r4
 80088fc:	4629      	mov	r1, r5
 80088fe:	f7f7 fe73 	bl	80005e8 <__aeabi_dmul>
 8008902:	4602      	mov	r2, r0
 8008904:	460b      	mov	r3, r1
 8008906:	4614      	mov	r4, r2
 8008908:	461d      	mov	r5, r3
 800890a:	4b51      	ldr	r3, [pc, #324]	@ (8008a50 <sensor_one+0x580>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4618      	mov	r0, r3
 8008910:	f7f7 fe12 	bl	8000538 <__aeabi_f2d>
 8008914:	4602      	mov	r2, r0
 8008916:	460b      	mov	r3, r1
 8008918:	4620      	mov	r0, r4
 800891a:	4629      	mov	r1, r5
 800891c:	f7f7 fe64 	bl	80005e8 <__aeabi_dmul>
 8008920:	4602      	mov	r2, r0
 8008922:	460b      	mov	r3, r1
 8008924:	4614      	mov	r4, r2
 8008926:	461d      	mov	r5, r3
 8008928:	4b49      	ldr	r3, [pc, #292]	@ (8008a50 <sensor_one+0x580>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4618      	mov	r0, r3
 800892e:	f7f7 fe03 	bl	8000538 <__aeabi_f2d>
 8008932:	a335      	add	r3, pc, #212	@ (adr r3, 8008a08 <sensor_one+0x538>)
 8008934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008938:	f7f7 fe56 	bl	80005e8 <__aeabi_dmul>
 800893c:	4602      	mov	r2, r0
 800893e:	460b      	mov	r3, r1
 8008940:	4690      	mov	r8, r2
 8008942:	4699      	mov	r9, r3
 8008944:	4b42      	ldr	r3, [pc, #264]	@ (8008a50 <sensor_one+0x580>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4618      	mov	r0, r3
 800894a:	f7f7 fdf5 	bl	8000538 <__aeabi_f2d>
 800894e:	4602      	mov	r2, r0
 8008950:	460b      	mov	r3, r1
 8008952:	4640      	mov	r0, r8
 8008954:	4649      	mov	r1, r9
 8008956:	f7f7 fe47 	bl	80005e8 <__aeabi_dmul>
 800895a:	4602      	mov	r2, r0
 800895c:	460b      	mov	r3, r1
 800895e:	4620      	mov	r0, r4
 8008960:	4629      	mov	r1, r5
 8008962:	f7f7 fc89 	bl	8000278 <__aeabi_dsub>
 8008966:	4602      	mov	r2, r0
 8008968:	460b      	mov	r3, r1
 800896a:	4614      	mov	r4, r2
 800896c:	461d      	mov	r5, r3
 800896e:	4b38      	ldr	r3, [pc, #224]	@ (8008a50 <sensor_one+0x580>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4618      	mov	r0, r3
 8008974:	f7f7 fde0 	bl	8000538 <__aeabi_f2d>
 8008978:	a325      	add	r3, pc, #148	@ (adr r3, 8008a10 <sensor_one+0x540>)
 800897a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800897e:	f7f7 fe33 	bl	80005e8 <__aeabi_dmul>
 8008982:	4602      	mov	r2, r0
 8008984:	460b      	mov	r3, r1
 8008986:	4620      	mov	r0, r4
 8008988:	4629      	mov	r1, r5
 800898a:	f7f7 fc75 	bl	8000278 <__aeabi_dsub>
 800898e:	4602      	mov	r2, r0
 8008990:	460b      	mov	r3, r1
 8008992:	4610      	mov	r0, r2
 8008994:	4619      	mov	r1, r3
 8008996:	f7f8 f8d7 	bl	8000b48 <__aeabi_d2iz>
 800899a:	4603      	mov	r3, r0
 800899c:	4a30      	ldr	r2, [pc, #192]	@ (8008a60 <sensor_one+0x590>)
 800899e:	6013      	str	r3, [r2, #0]
			Qin = 100 - Qin;
 80089a0:	4b2f      	ldr	r3, [pc, #188]	@ (8008a60 <sensor_one+0x590>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80089a8:	4a2d      	ldr	r2, [pc, #180]	@ (8008a60 <sensor_one+0x590>)
 80089aa:	6013      	str	r3, [r2, #0]
			sprintf(hex_string, "%X", Qin);
 80089ac:	4b2c      	ldr	r3, [pc, #176]	@ (8008a60 <sensor_one+0x590>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	461a      	mov	r2, r3
 80089b2:	492c      	ldr	r1, [pc, #176]	@ (8008a64 <sensor_one+0x594>)
 80089b4:	482c      	ldr	r0, [pc, #176]	@ (8008a68 <sensor_one+0x598>)
 80089b6:	f00c fdb9 	bl	801552c <siprintf>
			sprintf("hex %s", hex_string);
 80089ba:	492b      	ldr	r1, [pc, #172]	@ (8008a68 <sensor_one+0x598>)
 80089bc:	482b      	ldr	r0, [pc, #172]	@ (8008a6c <sensor_one+0x59c>)
 80089be:	f00c fdb5 	bl	801552c <siprintf>
			hexStr[0] = hex_string[0];
 80089c2:	4b29      	ldr	r3, [pc, #164]	@ (8008a68 <sensor_one+0x598>)
 80089c4:	781a      	ldrb	r2, [r3, #0]
 80089c6:	4b2a      	ldr	r3, [pc, #168]	@ (8008a70 <sensor_one+0x5a0>)
 80089c8:	701a      	strb	r2, [r3, #0]
			hexStr[1] = hex_string[1];
 80089ca:	4b27      	ldr	r3, [pc, #156]	@ (8008a68 <sensor_one+0x598>)
 80089cc:	785a      	ldrb	r2, [r3, #1]
 80089ce:	4b28      	ldr	r3, [pc, #160]	@ (8008a70 <sensor_one+0x5a0>)
 80089d0:	705a      	strb	r2, [r3, #1]
			hexStr[2] = '\0';
 80089d2:	4b27      	ldr	r3, [pc, #156]	@ (8008a70 <sensor_one+0x5a0>)
 80089d4:	2200      	movs	r2, #0
 80089d6:	709a      	strb	r2, [r3, #2]
			result = (uint8_t) strtol(hexStr, NULL, 16);
 80089d8:	2210      	movs	r2, #16
 80089da:	2100      	movs	r1, #0
 80089dc:	4824      	ldr	r0, [pc, #144]	@ (8008a70 <sensor_one+0x5a0>)
 80089de:	f00c fd9b 	bl	8015518 <strtol>
 80089e2:	4603      	mov	r3, r0
 80089e4:	b2da      	uxtb	r2, r3
 80089e6:	4b23      	ldr	r3, [pc, #140]	@ (8008a74 <sensor_one+0x5a4>)
 80089e8:	701a      	strb	r2, [r3, #0]
			//			Qin = 100 - Qin;
			Fdata = 100 - Fdata;
 80089ea:	4b23      	ldr	r3, [pc, #140]	@ (8008a78 <sensor_one+0x5a8>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80089f2:	e043      	b.n	8008a7c <sensor_one+0x5ac>
 80089f4:	f3af 8000 	nop.w
 80089f8:	00000000 	.word	0x00000000
 80089fc:	41055540 	.word	0x41055540
 8008a00:	33333333 	.word	0x33333333
 8008a04:	3fc33333 	.word	0x3fc33333
 8008a08:	66666666 	.word	0x66666666
 8008a0c:	400a6666 	.word	0x400a6666
 8008a10:	33333333 	.word	0x33333333
 8008a14:	4044d333 	.word	0x4044d333
 8008a18:	1eb851ec 	.word	0x1eb851ec
 8008a1c:	4030ab85 	.word	0x4030ab85
 8008a20:	20001314 	.word	0x20001314
 8008a24:	20000010 	.word	0x20000010
 8008a28:	20000014 	.word	0x20000014
 8008a2c:	20001318 	.word	0x20001318
 8008a30:	2000131c 	.word	0x2000131c
 8008a34:	20001338 	.word	0x20001338
 8008a38:	2000134a 	.word	0x2000134a
 8008a3c:	3fb33333 	.word	0x3fb33333
 8008a40:	20001350 	.word	0x20001350
 8008a44:	428a0000 	.word	0x428a0000
 8008a48:	20001368 	.word	0x20001368
 8008a4c:	20001390 	.word	0x20001390
 8008a50:	2000139c 	.word	0x2000139c
 8008a54:	20001414 	.word	0x20001414
 8008a58:	20001354 	.word	0x20001354
 8008a5c:	2000135c 	.word	0x2000135c
 8008a60:	20001358 	.word	0x20001358
 8008a64:	08016124 	.word	0x08016124
 8008a68:	20001a80 	.word	0x20001a80
 8008a6c:	08016128 	.word	0x08016128
 8008a70:	20001a88 	.word	0x20001a88
 8008a74:	20001a8f 	.word	0x20001a8f
 8008a78:	20000018 	.word	0x20000018
 8008a7c:	4a21      	ldr	r2, [pc, #132]	@ (8008b04 <sensor_one+0x634>)
 8008a7e:	6013      	str	r3, [r2, #0]
			R = p_flow / mlsQ;
 8008a80:	4b21      	ldr	r3, [pc, #132]	@ (8008b08 <sensor_one+0x638>)
 8008a82:	edd3 6a00 	vldr	s13, [r3]
 8008a86:	4b21      	ldr	r3, [pc, #132]	@ (8008b0c <sensor_one+0x63c>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	ee07 3a90 	vmov	s15, r3
 8008a8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008a92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a96:	4b1e      	ldr	r3, [pc, #120]	@ (8008b10 <sensor_one+0x640>)
 8008a98:	edc3 7a00 	vstr	s15, [r3]
			rootP = sqrt(p_flow);
 8008a9c:	4b1a      	ldr	r3, [pc, #104]	@ (8008b08 <sensor_one+0x638>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f7f7 fd49 	bl	8000538 <__aeabi_f2d>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	ec43 2b10 	vmov	d0, r2, r3
 8008aae:	f00d f98d 	bl	8015dcc <sqrt>
 8008ab2:	ec53 2b10 	vmov	r2, r3, d0
 8008ab6:	4610      	mov	r0, r2
 8008ab8:	4619      	mov	r1, r3
 8008aba:	f7f8 f88d 	bl	8000bd8 <__aeabi_d2f>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	4a14      	ldr	r2, [pc, #80]	@ (8008b14 <sensor_one+0x644>)
 8008ac2:	6013      	str	r3, [r2, #0]
			K = flow_input / rootP;
 8008ac4:	4b14      	ldr	r3, [pc, #80]	@ (8008b18 <sensor_one+0x648>)
 8008ac6:	edd3 6a00 	vldr	s13, [r3]
 8008aca:	4b12      	ldr	r3, [pc, #72]	@ (8008b14 <sensor_one+0x644>)
 8008acc:	ed93 7a00 	vldr	s14, [r3]
 8008ad0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ad4:	4b11      	ldr	r3, [pc, #68]	@ (8008b1c <sensor_one+0x64c>)
 8008ad6:	edc3 7a00 	vstr	s15, [r3]
			Final_T = (K * rootP * Ti * 10);
 8008ada:	4b10      	ldr	r3, [pc, #64]	@ (8008b1c <sensor_one+0x64c>)
 8008adc:	ed93 7a00 	vldr	s14, [r3]
 8008ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8008b14 <sensor_one+0x644>)
 8008ae2:	edd3 7a00 	vldr	s15, [r3]
 8008ae6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008aea:	4b0d      	ldr	r3, [pc, #52]	@ (8008b20 <sensor_one+0x650>)
 8008aec:	edd3 7a00 	vldr	s15, [r3]
 8008af0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008af4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008af8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008afc:	4b09      	ldr	r3, [pc, #36]	@ (8008b24 <sensor_one+0x654>)
 8008afe:	edc3 7a00 	vstr	s15, [r3]
 8008b02:	e173      	b.n	8008dec <sensor_one+0x91c>
 8008b04:	20000018 	.word	0x20000018
 8008b08:	2000139c 	.word	0x2000139c
 8008b0c:	2000135c 	.word	0x2000135c
 8008b10:	200013b0 	.word	0x200013b0
 8008b14:	200013e4 	.word	0x200013e4
 8008b18:	200012e0 	.word	0x200012e0
 8008b1c:	200013bc 	.word	0x200013bc
 8008b20:	200013a8 	.word	0x200013a8
 8008b24:	200013e8 	.word	0x200013e8
		}
		else {

			//			Q = (0.1512 * dp * dp * dp) - (3.3424 * dp * dp) + (41.65 * dp);
			//			Q = (0.05 * p_flow * p_flow * p_flow) - (0.5 * p_flow * p_flow) + (41.65 * p_flow);
			Q = (0.15 * ventro * ventro * ventro) - (3.3 * ventro * ventro) + (41.65 * ventro);
 8008b28:	4bc3      	ldr	r3, [pc, #780]	@ (8008e38 <sensor_one+0x968>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f7f7 fd03 	bl	8000538 <__aeabi_f2d>
 8008b32:	a3b9      	add	r3, pc, #740	@ (adr r3, 8008e18 <sensor_one+0x948>)
 8008b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b38:	f7f7 fd56 	bl	80005e8 <__aeabi_dmul>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	460b      	mov	r3, r1
 8008b40:	4614      	mov	r4, r2
 8008b42:	461d      	mov	r5, r3
 8008b44:	4bbc      	ldr	r3, [pc, #752]	@ (8008e38 <sensor_one+0x968>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f7f7 fcf5 	bl	8000538 <__aeabi_f2d>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	460b      	mov	r3, r1
 8008b52:	4620      	mov	r0, r4
 8008b54:	4629      	mov	r1, r5
 8008b56:	f7f7 fd47 	bl	80005e8 <__aeabi_dmul>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	4614      	mov	r4, r2
 8008b60:	461d      	mov	r5, r3
 8008b62:	4bb5      	ldr	r3, [pc, #724]	@ (8008e38 <sensor_one+0x968>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4618      	mov	r0, r3
 8008b68:	f7f7 fce6 	bl	8000538 <__aeabi_f2d>
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	460b      	mov	r3, r1
 8008b70:	4620      	mov	r0, r4
 8008b72:	4629      	mov	r1, r5
 8008b74:	f7f7 fd38 	bl	80005e8 <__aeabi_dmul>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	4614      	mov	r4, r2
 8008b7e:	461d      	mov	r5, r3
 8008b80:	4bad      	ldr	r3, [pc, #692]	@ (8008e38 <sensor_one+0x968>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4618      	mov	r0, r3
 8008b86:	f7f7 fcd7 	bl	8000538 <__aeabi_f2d>
 8008b8a:	a3a5      	add	r3, pc, #660	@ (adr r3, 8008e20 <sensor_one+0x950>)
 8008b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b90:	f7f7 fd2a 	bl	80005e8 <__aeabi_dmul>
 8008b94:	4602      	mov	r2, r0
 8008b96:	460b      	mov	r3, r1
 8008b98:	4690      	mov	r8, r2
 8008b9a:	4699      	mov	r9, r3
 8008b9c:	4ba6      	ldr	r3, [pc, #664]	@ (8008e38 <sensor_one+0x968>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f7f7 fcc9 	bl	8000538 <__aeabi_f2d>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	460b      	mov	r3, r1
 8008baa:	4640      	mov	r0, r8
 8008bac:	4649      	mov	r1, r9
 8008bae:	f7f7 fd1b 	bl	80005e8 <__aeabi_dmul>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	4620      	mov	r0, r4
 8008bb8:	4629      	mov	r1, r5
 8008bba:	f7f7 fb5d 	bl	8000278 <__aeabi_dsub>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	4614      	mov	r4, r2
 8008bc4:	461d      	mov	r5, r3
 8008bc6:	4b9c      	ldr	r3, [pc, #624]	@ (8008e38 <sensor_one+0x968>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7f7 fcb4 	bl	8000538 <__aeabi_f2d>
 8008bd0:	a395      	add	r3, pc, #596	@ (adr r3, 8008e28 <sensor_one+0x958>)
 8008bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd6:	f7f7 fd07 	bl	80005e8 <__aeabi_dmul>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	460b      	mov	r3, r1
 8008bde:	4620      	mov	r0, r4
 8008be0:	4629      	mov	r1, r5
 8008be2:	f7f7 fb4b 	bl	800027c <__adddf3>
 8008be6:	4602      	mov	r2, r0
 8008be8:	460b      	mov	r3, r1
 8008bea:	4610      	mov	r0, r2
 8008bec:	4619      	mov	r1, r3
 8008bee:	f7f7 fff3 	bl	8000bd8 <__aeabi_d2f>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	4a91      	ldr	r2, [pc, #580]	@ (8008e3c <sensor_one+0x96c>)
 8008bf6:	6013      	str	r3, [r2, #0]
			mlsQ = Q * 16.67;
 8008bf8:	4b90      	ldr	r3, [pc, #576]	@ (8008e3c <sensor_one+0x96c>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f7f7 fc9b 	bl	8000538 <__aeabi_f2d>
 8008c02:	a38b      	add	r3, pc, #556	@ (adr r3, 8008e30 <sensor_one+0x960>)
 8008c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c08:	f7f7 fcee 	bl	80005e8 <__aeabi_dmul>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	460b      	mov	r3, r1
 8008c10:	4610      	mov	r0, r2
 8008c12:	4619      	mov	r1, r3
 8008c14:	f7f7 ff98 	bl	8000b48 <__aeabi_d2iz>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	4a89      	ldr	r2, [pc, #548]	@ (8008e40 <sensor_one+0x970>)
 8008c1c:	6013      	str	r3, [r2, #0]

			Qin = (0.15 * p_flow * p_flow * p_flow) - (3.3 * p_flow * p_flow) + (41.65 * p_flow);
 8008c1e:	4b89      	ldr	r3, [pc, #548]	@ (8008e44 <sensor_one+0x974>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7f7 fc88 	bl	8000538 <__aeabi_f2d>
 8008c28:	a37b      	add	r3, pc, #492	@ (adr r3, 8008e18 <sensor_one+0x948>)
 8008c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c2e:	f7f7 fcdb 	bl	80005e8 <__aeabi_dmul>
 8008c32:	4602      	mov	r2, r0
 8008c34:	460b      	mov	r3, r1
 8008c36:	4614      	mov	r4, r2
 8008c38:	461d      	mov	r5, r3
 8008c3a:	4b82      	ldr	r3, [pc, #520]	@ (8008e44 <sensor_one+0x974>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7f7 fc7a 	bl	8000538 <__aeabi_f2d>
 8008c44:	4602      	mov	r2, r0
 8008c46:	460b      	mov	r3, r1
 8008c48:	4620      	mov	r0, r4
 8008c4a:	4629      	mov	r1, r5
 8008c4c:	f7f7 fccc 	bl	80005e8 <__aeabi_dmul>
 8008c50:	4602      	mov	r2, r0
 8008c52:	460b      	mov	r3, r1
 8008c54:	4614      	mov	r4, r2
 8008c56:	461d      	mov	r5, r3
 8008c58:	4b7a      	ldr	r3, [pc, #488]	@ (8008e44 <sensor_one+0x974>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f7f7 fc6b 	bl	8000538 <__aeabi_f2d>
 8008c62:	4602      	mov	r2, r0
 8008c64:	460b      	mov	r3, r1
 8008c66:	4620      	mov	r0, r4
 8008c68:	4629      	mov	r1, r5
 8008c6a:	f7f7 fcbd 	bl	80005e8 <__aeabi_dmul>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	460b      	mov	r3, r1
 8008c72:	4614      	mov	r4, r2
 8008c74:	461d      	mov	r5, r3
 8008c76:	4b73      	ldr	r3, [pc, #460]	@ (8008e44 <sensor_one+0x974>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f7f7 fc5c 	bl	8000538 <__aeabi_f2d>
 8008c80:	a367      	add	r3, pc, #412	@ (adr r3, 8008e20 <sensor_one+0x950>)
 8008c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c86:	f7f7 fcaf 	bl	80005e8 <__aeabi_dmul>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	4690      	mov	r8, r2
 8008c90:	4699      	mov	r9, r3
 8008c92:	4b6c      	ldr	r3, [pc, #432]	@ (8008e44 <sensor_one+0x974>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7f7 fc4e 	bl	8000538 <__aeabi_f2d>
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	460b      	mov	r3, r1
 8008ca0:	4640      	mov	r0, r8
 8008ca2:	4649      	mov	r1, r9
 8008ca4:	f7f7 fca0 	bl	80005e8 <__aeabi_dmul>
 8008ca8:	4602      	mov	r2, r0
 8008caa:	460b      	mov	r3, r1
 8008cac:	4620      	mov	r0, r4
 8008cae:	4629      	mov	r1, r5
 8008cb0:	f7f7 fae2 	bl	8000278 <__aeabi_dsub>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	4614      	mov	r4, r2
 8008cba:	461d      	mov	r5, r3
 8008cbc:	4b61      	ldr	r3, [pc, #388]	@ (8008e44 <sensor_one+0x974>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7f7 fc39 	bl	8000538 <__aeabi_f2d>
 8008cc6:	a358      	add	r3, pc, #352	@ (adr r3, 8008e28 <sensor_one+0x958>)
 8008cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ccc:	f7f7 fc8c 	bl	80005e8 <__aeabi_dmul>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	4620      	mov	r0, r4
 8008cd6:	4629      	mov	r1, r5
 8008cd8:	f7f7 fad0 	bl	800027c <__adddf3>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	460b      	mov	r3, r1
 8008ce0:	4610      	mov	r0, r2
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	f7f7 ff30 	bl	8000b48 <__aeabi_d2iz>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	4a57      	ldr	r2, [pc, #348]	@ (8008e48 <sensor_one+0x978>)
 8008cec:	6013      	str	r3, [r2, #0]
			Qin += 100;
 8008cee:	4b56      	ldr	r3, [pc, #344]	@ (8008e48 <sensor_one+0x978>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	3364      	adds	r3, #100	@ 0x64
 8008cf4:	4a54      	ldr	r2, [pc, #336]	@ (8008e48 <sensor_one+0x978>)
 8008cf6:	6013      	str	r3, [r2, #0]
			//			Qin = hI;
			ppr_flow_data = Qin;
 8008cf8:	4b53      	ldr	r3, [pc, #332]	@ (8008e48 <sensor_one+0x978>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	ee07 3a90 	vmov	s15, r3
 8008d00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008d04:	4b51      	ldr	r3, [pc, #324]	@ (8008e4c <sensor_one+0x97c>)
 8008d06:	edc3 7a00 	vstr	s15, [r3]
			sprintf(hex_string, "%X", Qin);
 8008d0a:	4b4f      	ldr	r3, [pc, #316]	@ (8008e48 <sensor_one+0x978>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	461a      	mov	r2, r3
 8008d10:	494f      	ldr	r1, [pc, #316]	@ (8008e50 <sensor_one+0x980>)
 8008d12:	4850      	ldr	r0, [pc, #320]	@ (8008e54 <sensor_one+0x984>)
 8008d14:	f00c fc0a 	bl	801552c <siprintf>
			sprintf("hex %s", hex_string);
 8008d18:	494e      	ldr	r1, [pc, #312]	@ (8008e54 <sensor_one+0x984>)
 8008d1a:	484f      	ldr	r0, [pc, #316]	@ (8008e58 <sensor_one+0x988>)
 8008d1c:	f00c fc06 	bl	801552c <siprintf>
			hexStr[0] = hex_string[0];
 8008d20:	4b4c      	ldr	r3, [pc, #304]	@ (8008e54 <sensor_one+0x984>)
 8008d22:	781a      	ldrb	r2, [r3, #0]
 8008d24:	4b4d      	ldr	r3, [pc, #308]	@ (8008e5c <sensor_one+0x98c>)
 8008d26:	701a      	strb	r2, [r3, #0]
			hexStr[1] = hex_string[1];
 8008d28:	4b4a      	ldr	r3, [pc, #296]	@ (8008e54 <sensor_one+0x984>)
 8008d2a:	785a      	ldrb	r2, [r3, #1]
 8008d2c:	4b4b      	ldr	r3, [pc, #300]	@ (8008e5c <sensor_one+0x98c>)
 8008d2e:	705a      	strb	r2, [r3, #1]
			hexStr[2] = '\0';
 8008d30:	4b4a      	ldr	r3, [pc, #296]	@ (8008e5c <sensor_one+0x98c>)
 8008d32:	2200      	movs	r2, #0
 8008d34:	709a      	strb	r2, [r3, #2]
			result = (uint8_t) strtol(hexStr, NULL, 16);
 8008d36:	2210      	movs	r2, #16
 8008d38:	2100      	movs	r1, #0
 8008d3a:	4848      	ldr	r0, [pc, #288]	@ (8008e5c <sensor_one+0x98c>)
 8008d3c:	f00c fbec 	bl	8015518 <strtol>
 8008d40:	4603      	mov	r3, r0
 8008d42:	b2da      	uxtb	r2, r3
 8008d44:	4b46      	ldr	r3, [pc, #280]	@ (8008e60 <sensor_one+0x990>)
 8008d46:	701a      	strb	r2, [r3, #0]
			//			Qin = hI;
			flow_input = get_filtered_flow(Q);
 8008d48:	4b3c      	ldr	r3, [pc, #240]	@ (8008e3c <sensor_one+0x96c>)
 8008d4a:	edd3 7a00 	vldr	s15, [r3]
 8008d4e:	eeb0 0a67 	vmov.f32	s0, s15
 8008d52:	f7fb f949 	bl	8003fe8 <get_filtered_flow>
 8008d56:	eef0 7a40 	vmov.f32	s15, s0
 8008d5a:	4b42      	ldr	r3, [pc, #264]	@ (8008e64 <sensor_one+0x994>)
 8008d5c:	edc3 7a00 	vstr	s15, [r3]
			//			Qin += 100;
			Fdata += 94;
 8008d60:	4b41      	ldr	r3, [pc, #260]	@ (8008e68 <sensor_one+0x998>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	335e      	adds	r3, #94	@ 0x5e
 8008d66:	4a40      	ldr	r2, [pc, #256]	@ (8008e68 <sensor_one+0x998>)
 8008d68:	6013      	str	r3, [r2, #0]
			R = p_flow / mlsQ;
 8008d6a:	4b36      	ldr	r3, [pc, #216]	@ (8008e44 <sensor_one+0x974>)
 8008d6c:	edd3 6a00 	vldr	s13, [r3]
 8008d70:	4b33      	ldr	r3, [pc, #204]	@ (8008e40 <sensor_one+0x970>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	ee07 3a90 	vmov	s15, r3
 8008d78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008d7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d80:	4b3a      	ldr	r3, [pc, #232]	@ (8008e6c <sensor_one+0x99c>)
 8008d82:	edc3 7a00 	vstr	s15, [r3]
			rootP = sqrt(p_flow);
 8008d86:	4b2f      	ldr	r3, [pc, #188]	@ (8008e44 <sensor_one+0x974>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f7f7 fbd4 	bl	8000538 <__aeabi_f2d>
 8008d90:	4602      	mov	r2, r0
 8008d92:	460b      	mov	r3, r1
 8008d94:	ec43 2b10 	vmov	d0, r2, r3
 8008d98:	f00d f818 	bl	8015dcc <sqrt>
 8008d9c:	ec53 2b10 	vmov	r2, r3, d0
 8008da0:	4610      	mov	r0, r2
 8008da2:	4619      	mov	r1, r3
 8008da4:	f7f7 ff18 	bl	8000bd8 <__aeabi_d2f>
 8008da8:	4603      	mov	r3, r0
 8008daa:	4a31      	ldr	r2, [pc, #196]	@ (8008e70 <sensor_one+0x9a0>)
 8008dac:	6013      	str	r3, [r2, #0]
			K = flow_input / rootP;
 8008dae:	4b2d      	ldr	r3, [pc, #180]	@ (8008e64 <sensor_one+0x994>)
 8008db0:	edd3 6a00 	vldr	s13, [r3]
 8008db4:	4b2e      	ldr	r3, [pc, #184]	@ (8008e70 <sensor_one+0x9a0>)
 8008db6:	ed93 7a00 	vldr	s14, [r3]
 8008dba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dbe:	4b2d      	ldr	r3, [pc, #180]	@ (8008e74 <sensor_one+0x9a4>)
 8008dc0:	edc3 7a00 	vstr	s15, [r3]
			Final_T = (K * rootP * Ti * 10);
 8008dc4:	4b2b      	ldr	r3, [pc, #172]	@ (8008e74 <sensor_one+0x9a4>)
 8008dc6:	ed93 7a00 	vldr	s14, [r3]
 8008dca:	4b29      	ldr	r3, [pc, #164]	@ (8008e70 <sensor_one+0x9a0>)
 8008dcc:	edd3 7a00 	vldr	s15, [r3]
 8008dd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008dd4:	4b28      	ldr	r3, [pc, #160]	@ (8008e78 <sensor_one+0x9a8>)
 8008dd6:	edd3 7a00 	vldr	s15, [r3]
 8008dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dde:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008de2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008de6:	4b25      	ldr	r3, [pc, #148]	@ (8008e7c <sensor_one+0x9ac>)
 8008de8:	edc3 7a00 	vstr	s15, [r3]

		}

		if(hI>=ppr_flow_data)
 8008dec:	4b24      	ldr	r3, [pc, #144]	@ (8008e80 <sensor_one+0x9b0>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	ee07 3a90 	vmov	s15, r3
 8008df4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008df8:	4b14      	ldr	r3, [pc, #80]	@ (8008e4c <sensor_one+0x97c>)
 8008dfa:	edd3 7a00 	vldr	s15, [r3]
 8008dfe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e06:	db3d      	blt.n	8008e84 <sensor_one+0x9b4>
		{
			hI=hI;
 8008e08:	4b1d      	ldr	r3, [pc, #116]	@ (8008e80 <sensor_one+0x9b0>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4a1c      	ldr	r2, [pc, #112]	@ (8008e80 <sensor_one+0x9b0>)
 8008e0e:	6013      	str	r3, [r2, #0]
 8008e10:	e041      	b.n	8008e96 <sensor_one+0x9c6>
 8008e12:	bf00      	nop
 8008e14:	f3af 8000 	nop.w
 8008e18:	33333333 	.word	0x33333333
 8008e1c:	3fc33333 	.word	0x3fc33333
 8008e20:	66666666 	.word	0x66666666
 8008e24:	400a6666 	.word	0x400a6666
 8008e28:	33333333 	.word	0x33333333
 8008e2c:	4044d333 	.word	0x4044d333
 8008e30:	1eb851ec 	.word	0x1eb851ec
 8008e34:	4030ab85 	.word	0x4030ab85
 8008e38:	20001b44 	.word	0x20001b44
 8008e3c:	20001354 	.word	0x20001354
 8008e40:	2000135c 	.word	0x2000135c
 8008e44:	2000139c 	.word	0x2000139c
 8008e48:	20001358 	.word	0x20001358
 8008e4c:	20001398 	.word	0x20001398
 8008e50:	08016124 	.word	0x08016124
 8008e54:	20001a80 	.word	0x20001a80
 8008e58:	08016128 	.word	0x08016128
 8008e5c:	20001a88 	.word	0x20001a88
 8008e60:	20001a8f 	.word	0x20001a8f
 8008e64:	200012e0 	.word	0x200012e0
 8008e68:	20000018 	.word	0x20000018
 8008e6c:	200013b0 	.word	0x200013b0
 8008e70:	200013e4 	.word	0x200013e4
 8008e74:	200013bc 	.word	0x200013bc
 8008e78:	200013a8 	.word	0x200013a8
 8008e7c:	200013e8 	.word	0x200013e8
 8008e80:	20000028 	.word	0x20000028
		}
		else
		{
			hI=ppr_flow_data;
 8008e84:	4bb0      	ldr	r3, [pc, #704]	@ (8009148 <sensor_one+0xc78>)
 8008e86:	edd3 7a00 	vldr	s15, [r3]
 8008e8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008e8e:	ee17 2a90 	vmov	r2, s15
 8008e92:	4bae      	ldr	r3, [pc, #696]	@ (800914c <sensor_one+0xc7c>)
 8008e94:	601a      	str	r2, [r3, #0]
		}
		if(hI==255)
 8008e96:	4bad      	ldr	r3, [pc, #692]	@ (800914c <sensor_one+0xc7c>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	2bff      	cmp	r3, #255	@ 0xff
 8008e9c:	d102      	bne.n	8008ea4 <sensor_one+0x9d4>
		{
			hI=0;
 8008e9e:	4bab      	ldr	r3, [pc, #684]	@ (800914c <sensor_one+0xc7c>)
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	601a      	str	r2, [r3, #0]
		//		hexStr[0] = hex_string[0];
		//		hexStr[1] = hex_string[1];
		//		hexStr[2] = '\0';
		//		result = (uint8_t) strtol(hexStr, NULL, 16);

		V1 = result2 * Tidal_vol;
 8008ea4:	4baa      	ldr	r3, [pc, #680]	@ (8009150 <sensor_one+0xc80>)
 8008ea6:	781b      	ldrb	r3, [r3, #0]
 8008ea8:	ee07 3a90 	vmov	s15, r3
 8008eac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008eb0:	4ba8      	ldr	r3, [pc, #672]	@ (8009154 <sensor_one+0xc84>)
 8008eb2:	edd3 7a00 	vldr	s15, [r3]
 8008eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eba:	4ba7      	ldr	r3, [pc, #668]	@ (8009158 <sensor_one+0xc88>)
 8008ebc:	edc3 7a00 	vstr	s15, [r3]
		Volume = (V1 / previous_pressure_first);
 8008ec0:	4ba5      	ldr	r3, [pc, #660]	@ (8009158 <sensor_one+0xc88>)
 8008ec2:	edd3 6a00 	vldr	s13, [r3]
 8008ec6:	4ba5      	ldr	r3, [pc, #660]	@ (800915c <sensor_one+0xc8c>)
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	ee07 3a90 	vmov	s15, r3
 8008ece:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008ed2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ed6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008eda:	ee17 2a90 	vmov	r2, s15
 8008ede:	4ba0      	ldr	r3, [pc, #640]	@ (8009160 <sensor_one+0xc90>)
 8008ee0:	601a      	str	r2, [r3, #0]

		sprintf(PV_string, "%X", Volume);
 8008ee2:	4b9f      	ldr	r3, [pc, #636]	@ (8009160 <sensor_one+0xc90>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	461a      	mov	r2, r3
 8008ee8:	499e      	ldr	r1, [pc, #632]	@ (8009164 <sensor_one+0xc94>)
 8008eea:	489f      	ldr	r0, [pc, #636]	@ (8009168 <sensor_one+0xc98>)
 8008eec:	f00c fb1e 	bl	801552c <siprintf>
		sprintf("hex %s", PV_string);
 8008ef0:	499d      	ldr	r1, [pc, #628]	@ (8009168 <sensor_one+0xc98>)
 8008ef2:	489e      	ldr	r0, [pc, #632]	@ (800916c <sensor_one+0xc9c>)
 8008ef4:	f00c fb1a 	bl	801552c <siprintf>
		PV[0] = PV_string[0];
 8008ef8:	4b9b      	ldr	r3, [pc, #620]	@ (8009168 <sensor_one+0xc98>)
 8008efa:	781a      	ldrb	r2, [r3, #0]
 8008efc:	4b9c      	ldr	r3, [pc, #624]	@ (8009170 <sensor_one+0xca0>)
 8008efe:	701a      	strb	r2, [r3, #0]
		PV[1] = PV_string[1];
 8008f00:	4b99      	ldr	r3, [pc, #612]	@ (8009168 <sensor_one+0xc98>)
 8008f02:	785a      	ldrb	r2, [r3, #1]
 8008f04:	4b9a      	ldr	r3, [pc, #616]	@ (8009170 <sensor_one+0xca0>)
 8008f06:	705a      	strb	r2, [r3, #1]
		PV[2] = '\0';
 8008f08:	4b99      	ldr	r3, [pc, #612]	@ (8009170 <sensor_one+0xca0>)
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	709a      	strb	r2, [r3, #2]
		PV_Graph = (uint8_t) strtol(PV, NULL, 16);
 8008f0e:	2210      	movs	r2, #16
 8008f10:	2100      	movs	r1, #0
 8008f12:	4897      	ldr	r0, [pc, #604]	@ (8009170 <sensor_one+0xca0>)
 8008f14:	f00c fb00 	bl	8015518 <strtol>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	b2da      	uxtb	r2, r3
 8008f1c:	4b95      	ldr	r3, [pc, #596]	@ (8009174 <sensor_one+0xca4>)
 8008f1e:	701a      	strb	r2, [r3, #0]

		v_y = Volume/ y_coor;
 8008f20:	4b8f      	ldr	r3, [pc, #572]	@ (8009160 <sensor_one+0xc90>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	ee07 3a90 	vmov	s15, r3
 8008f28:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008f2c:	4b92      	ldr	r3, [pc, #584]	@ (8009178 <sensor_one+0xca8>)
 8008f2e:	ed93 7a00 	vldr	s14, [r3]
 8008f32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f36:	4b91      	ldr	r3, [pc, #580]	@ (800917c <sensor_one+0xcac>)
 8008f38:	edc3 7a00 	vstr	s15, [r3]
		p_x = mbar / x_coor;
 8008f3c:	4b90      	ldr	r3, [pc, #576]	@ (8009180 <sensor_one+0xcb0>)
 8008f3e:	edd3 6a00 	vldr	s13, [r3]
 8008f42:	4b90      	ldr	r3, [pc, #576]	@ (8009184 <sensor_one+0xcb4>)
 8008f44:	ed93 7a00 	vldr	s14, [r3]
 8008f48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f4c:	4b8e      	ldr	r3, [pc, #568]	@ (8009188 <sensor_one+0xcb8>)
 8008f4e:	edc3 7a00 	vstr	s15, [r3]
		p_x1 = mbar / 0.35;
 8008f52:	4b8b      	ldr	r3, [pc, #556]	@ (8009180 <sensor_one+0xcb0>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4618      	mov	r0, r3
 8008f58:	f7f7 faee 	bl	8000538 <__aeabi_f2d>
 8008f5c:	a378      	add	r3, pc, #480	@ (adr r3, 8009140 <sensor_one+0xc70>)
 8008f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f62:	f7f7 fc6b 	bl	800083c <__aeabi_ddiv>
 8008f66:	4602      	mov	r2, r0
 8008f68:	460b      	mov	r3, r1
 8008f6a:	4610      	mov	r0, r2
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	f7f7 fe33 	bl	8000bd8 <__aeabi_d2f>
 8008f72:	4603      	mov	r3, r0
 8008f74:	4a85      	ldr	r2, [pc, #532]	@ (800918c <sensor_one+0xcbc>)
 8008f76:	6013      	str	r3, [r2, #0]
		FV = Tidal_vol / result;
 8008f78:	4b76      	ldr	r3, [pc, #472]	@ (8009154 <sensor_one+0xc84>)
 8008f7a:	edd3 6a00 	vldr	s13, [r3]
 8008f7e:	4b84      	ldr	r3, [pc, #528]	@ (8009190 <sensor_one+0xcc0>)
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	ee07 3a90 	vmov	s15, r3
 8008f86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008f8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f8e:	4b81      	ldr	r3, [pc, #516]	@ (8009194 <sensor_one+0xcc4>)
 8008f90:	edc3 7a00 	vstr	s15, [r3]
		vt_x = Volume * vt_coor;
 8008f94:	4b72      	ldr	r3, [pc, #456]	@ (8009160 <sensor_one+0xc90>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	ee07 3a90 	vmov	s15, r3
 8008f9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008fa0:	4b7d      	ldr	r3, [pc, #500]	@ (8009198 <sensor_one+0xcc8>)
 8008fa2:	edd3 7a00 	vldr	s15, [r3]
 8008fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008faa:	4b7c      	ldr	r3, [pc, #496]	@ (800919c <sensor_one+0xccc>)
 8008fac:	edc3 7a00 	vstr	s15, [r3]
		fl_y = (hI - 100) * fl_coor;
 8008fb0:	4b66      	ldr	r3, [pc, #408]	@ (800914c <sensor_one+0xc7c>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	3b64      	subs	r3, #100	@ 0x64
 8008fb6:	ee07 3a90 	vmov	s15, r3
 8008fba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008fbe:	4b78      	ldr	r3, [pc, #480]	@ (80091a0 <sensor_one+0xcd0>)
 8008fc0:	edd3 7a00 	vldr	s15, [r3]
 8008fc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fc8:	4b76      	ldr	r3, [pc, #472]	@ (80091a4 <sensor_one+0xcd4>)
 8008fca:	edc3 7a00 	vstr	s15, [r3]
		fl_ny = (100 - PID_FLOW_VAR) * fl_coor;
 8008fce:	4b76      	ldr	r3, [pc, #472]	@ (80091a8 <sensor_one+0xcd8>)
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8008fd6:	ee07 3a90 	vmov	s15, r3
 8008fda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008fde:	4b70      	ldr	r3, [pc, #448]	@ (80091a0 <sensor_one+0xcd0>)
 8008fe0:	edd3 7a00 	vldr	s15, [r3]
 8008fe4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fe8:	4b70      	ldr	r3, [pc, #448]	@ (80091ac <sensor_one+0xcdc>)
 8008fea:	edc3 7a00 	vstr	s15, [r3]
		//		}
		//		if(hI==255)
		//		{
		//			hI=0;
		//		}
		if(PhI>=Final_T)
 8008fee:	4b70      	ldr	r3, [pc, #448]	@ (80091b0 <sensor_one+0xce0>)
 8008ff0:	ed93 7a00 	vldr	s14, [r3]
 8008ff4:	4b6f      	ldr	r3, [pc, #444]	@ (80091b4 <sensor_one+0xce4>)
 8008ff6:	edd3 7a00 	vldr	s15, [r3]
 8008ffa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009002:	db04      	blt.n	800900e <sensor_one+0xb3e>
		{
			PhI=PhI;
 8009004:	4b6a      	ldr	r3, [pc, #424]	@ (80091b0 <sensor_one+0xce0>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4a69      	ldr	r2, [pc, #420]	@ (80091b0 <sensor_one+0xce0>)
 800900a:	6013      	str	r3, [r2, #0]
 800900c:	e003      	b.n	8009016 <sensor_one+0xb46>
		}
		else
		{
			PhI=Final_T;
 800900e:	4b69      	ldr	r3, [pc, #420]	@ (80091b4 <sensor_one+0xce4>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4a67      	ldr	r2, [pc, #412]	@ (80091b0 <sensor_one+0xce0>)
 8009014:	6013      	str	r3, [r2, #0]
		}
		if(PhI==255)
 8009016:	4b66      	ldr	r3, [pc, #408]	@ (80091b0 <sensor_one+0xce0>)
 8009018:	edd3 7a00 	vldr	s15, [r3]
 800901c:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 80091b8 <sensor_one+0xce8>
 8009020:	eef4 7a47 	vcmp.f32	s15, s14
 8009024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009028:	d103      	bne.n	8009032 <sensor_one+0xb62>
		{
			PhI=0;
 800902a:	4b61      	ldr	r3, [pc, #388]	@ (80091b0 <sensor_one+0xce0>)
 800902c:	f04f 0200 	mov.w	r2, #0
 8009030:	601a      	str	r2, [r3, #0]
		}
		if(ventro>=dp)
 8009032:	4b62      	ldr	r3, [pc, #392]	@ (80091bc <sensor_one+0xcec>)
 8009034:	ed93 7a00 	vldr	s14, [r3]
 8009038:	4b61      	ldr	r3, [pc, #388]	@ (80091c0 <sensor_one+0xcf0>)
 800903a:	edd3 7a00 	vldr	s15, [r3]
 800903e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009046:	db04      	blt.n	8009052 <sensor_one+0xb82>
		{
			ventro=ventro;
 8009048:	4b5c      	ldr	r3, [pc, #368]	@ (80091bc <sensor_one+0xcec>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a5b      	ldr	r2, [pc, #364]	@ (80091bc <sensor_one+0xcec>)
 800904e:	6013      	str	r3, [r2, #0]
 8009050:	e003      	b.n	800905a <sensor_one+0xb8a>
		}
		else
		{
			ventro=dp;
 8009052:	4b5b      	ldr	r3, [pc, #364]	@ (80091c0 <sensor_one+0xcf0>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a59      	ldr	r2, [pc, #356]	@ (80091bc <sensor_one+0xcec>)
 8009058:	6013      	str	r3, [r2, #0]
		}
		if(flow2>=flow_input)
 800905a:	4b5a      	ldr	r3, [pc, #360]	@ (80091c4 <sensor_one+0xcf4>)
 800905c:	ed93 7a00 	vldr	s14, [r3]
 8009060:	4b59      	ldr	r3, [pc, #356]	@ (80091c8 <sensor_one+0xcf8>)
 8009062:	edd3 7a00 	vldr	s15, [r3]
 8009066:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800906a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800906e:	db04      	blt.n	800907a <sensor_one+0xbaa>
		{
			flow2=flow2;
 8009070:	4b54      	ldr	r3, [pc, #336]	@ (80091c4 <sensor_one+0xcf4>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a53      	ldr	r2, [pc, #332]	@ (80091c4 <sensor_one+0xcf4>)
 8009076:	6013      	str	r3, [r2, #0]
 8009078:	e003      	b.n	8009082 <sensor_one+0xbb2>
		}
		else
		{
			flow2=flow_input;
 800907a:	4b53      	ldr	r3, [pc, #332]	@ (80091c8 <sensor_one+0xcf8>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a51      	ldr	r2, [pc, #324]	@ (80091c4 <sensor_one+0xcf4>)
 8009080:	6013      	str	r3, [r2, #0]
		}
		if(PeakP>=mbar)
 8009082:	4b52      	ldr	r3, [pc, #328]	@ (80091cc <sensor_one+0xcfc>)
 8009084:	ed93 7a00 	vldr	s14, [r3]
 8009088:	4b3d      	ldr	r3, [pc, #244]	@ (8009180 <sensor_one+0xcb0>)
 800908a:	edd3 7a00 	vldr	s15, [r3]
 800908e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009096:	db04      	blt.n	80090a2 <sensor_one+0xbd2>
		{
			PeakP=PeakP;
 8009098:	4b4c      	ldr	r3, [pc, #304]	@ (80091cc <sensor_one+0xcfc>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4a4b      	ldr	r2, [pc, #300]	@ (80091cc <sensor_one+0xcfc>)
 800909e:	6013      	str	r3, [r2, #0]
 80090a0:	e003      	b.n	80090aa <sensor_one+0xbda>
		}
		else
		{
			PeakP=mbar;
 80090a2:	4b37      	ldr	r3, [pc, #220]	@ (8009180 <sensor_one+0xcb0>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4a49      	ldr	r2, [pc, #292]	@ (80091cc <sensor_one+0xcfc>)
 80090a8:	6013      	str	r3, [r2, #0]
		}
		if(Resistance>=R)
 80090aa:	4b49      	ldr	r3, [pc, #292]	@ (80091d0 <sensor_one+0xd00>)
 80090ac:	ed93 7a00 	vldr	s14, [r3]
 80090b0:	4b48      	ldr	r3, [pc, #288]	@ (80091d4 <sensor_one+0xd04>)
 80090b2:	edd3 7a00 	vldr	s15, [r3]
 80090b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80090ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090be:	db04      	blt.n	80090ca <sensor_one+0xbfa>
		{
			Resistance=Resistance;
 80090c0:	4b43      	ldr	r3, [pc, #268]	@ (80091d0 <sensor_one+0xd00>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4a42      	ldr	r2, [pc, #264]	@ (80091d0 <sensor_one+0xd00>)
 80090c6:	6013      	str	r3, [r2, #0]
 80090c8:	e003      	b.n	80090d2 <sensor_one+0xc02>
		}
		else
		{
			Resistance=R;
 80090ca:	4b42      	ldr	r3, [pc, #264]	@ (80091d4 <sensor_one+0xd04>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4a40      	ldr	r2, [pc, #256]	@ (80091d0 <sensor_one+0xd00>)
 80090d0:	6013      	str	r3, [r2, #0]
		}

		////LEAK TEST ICON////
		if(CLT_FLAG == 1){
 80090d2:	4b41      	ldr	r3, [pc, #260]	@ (80091d8 <sensor_one+0xd08>)
 80090d4:	781b      	ldrb	r3, [r3, #0]
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d103      	bne.n	80090e2 <sensor_one+0xc12>
			leak_icon_change(0x72);
 80090da:	2072      	movs	r0, #114	@ 0x72
 80090dc:	f7fa fc32 	bl	8003944 <leak_icon_change>
 80090e0:	e085      	b.n	80091ee <sensor_one+0xd1e>
		}
		else if(CLT_FLAG == 2){
 80090e2:	4b3d      	ldr	r3, [pc, #244]	@ (80091d8 <sensor_one+0xd08>)
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	2b02      	cmp	r3, #2
 80090e8:	d17e      	bne.n	80091e8 <sensor_one+0xd18>
			if(previous_pressure_second <= 17500){
 80090ea:	4b3c      	ldr	r3, [pc, #240]	@ (80091dc <sensor_one+0xd0c>)
 80090ec:	881b      	ldrh	r3, [r3, #0]
 80090ee:	f244 425c 	movw	r2, #17500	@ 0x445c
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d80d      	bhi.n	8009112 <sensor_one+0xc42>
				leak_icon_change(0x73);
 80090f6:	2073      	movs	r0, #115	@ 0x73
 80090f8:	f7fa fc24 	bl	8003944 <leak_icon_change>
				osDelay(3000);
 80090fc:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8009100:	f009 f95b 	bl	80123ba <osDelay>
				CLT_FLAG = 0;
 8009104:	4b34      	ldr	r3, [pc, #208]	@ (80091d8 <sensor_one+0xd08>)
 8009106:	2200      	movs	r2, #0
 8009108:	701a      	strb	r2, [r3, #0]
				leak_icon_change(0x00);
 800910a:	2000      	movs	r0, #0
 800910c:	f7fa fc1a 	bl	8003944 <leak_icon_change>
 8009110:	e06d      	b.n	80091ee <sensor_one+0xd1e>
			}
			else if(previous_pressure_second > 17500){
 8009112:	4b32      	ldr	r3, [pc, #200]	@ (80091dc <sensor_one+0xd0c>)
 8009114:	881b      	ldrh	r3, [r3, #0]
 8009116:	f244 425c 	movw	r2, #17500	@ 0x445c
 800911a:	4293      	cmp	r3, r2
 800911c:	d960      	bls.n	80091e0 <sensor_one+0xd10>
				leak_icon_change(0x74);
 800911e:	2074      	movs	r0, #116	@ 0x74
 8009120:	f7fa fc10 	bl	8003944 <leak_icon_change>
				osDelay(3000);
 8009124:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8009128:	f009 f947 	bl	80123ba <osDelay>
				CLT_FLAG = 0;
 800912c:	4b2a      	ldr	r3, [pc, #168]	@ (80091d8 <sensor_one+0xd08>)
 800912e:	2200      	movs	r2, #0
 8009130:	701a      	strb	r2, [r3, #0]
				leak_icon_change(0x00);
 8009132:	2000      	movs	r0, #0
 8009134:	f7fa fc06 	bl	8003944 <leak_icon_change>
 8009138:	e059      	b.n	80091ee <sensor_one+0xd1e>
 800913a:	bf00      	nop
 800913c:	f3af 8000 	nop.w
 8009140:	66666666 	.word	0x66666666
 8009144:	3fd66666 	.word	0x3fd66666
 8009148:	20001398 	.word	0x20001398
 800914c:	20000028 	.word	0x20000028
 8009150:	20001a90 	.word	0x20001a90
 8009154:	200013b4 	.word	0x200013b4
 8009158:	2000140c 	.word	0x2000140c
 800915c:	20001b28 	.word	0x20001b28
 8009160:	20001410 	.word	0x20001410
 8009164:	08016124 	.word	0x08016124
 8009168:	20001a84 	.word	0x20001a84
 800916c:	08016128 	.word	0x08016128
 8009170:	20001a8c 	.word	0x20001a8c
 8009174:	20001a94 	.word	0x20001a94
 8009178:	20000000 	.word	0x20000000
 800917c:	200012ec 	.word	0x200012ec
 8009180:	2000136c 	.word	0x2000136c
 8009184:	20000004 	.word	0x20000004
 8009188:	200012f0 	.word	0x200012f0
 800918c:	200012f4 	.word	0x200012f4
 8009190:	20001a8f 	.word	0x20001a8f
 8009194:	20001300 	.word	0x20001300
 8009198:	20000008 	.word	0x20000008
 800919c:	20001304 	.word	0x20001304
 80091a0:	2000000c 	.word	0x2000000c
 80091a4:	20001308 	.word	0x20001308
 80091a8:	2000141c 	.word	0x2000141c
 80091ac:	2000130c 	.word	0x2000130c
 80091b0:	20001920 	.word	0x20001920
 80091b4:	200013e8 	.word	0x200013e8
 80091b8:	437f0000 	.word	0x437f0000
 80091bc:	20001b44 	.word	0x20001b44
 80091c0:	20001368 	.word	0x20001368
 80091c4:	200013c4 	.word	0x200013c4
 80091c8:	200012e0 	.word	0x200012e0
 80091cc:	200013f8 	.word	0x200013f8
 80091d0:	20001400 	.word	0x20001400
 80091d4:	200013b0 	.word	0x200013b0
 80091d8:	200019af 	.word	0x200019af
 80091dc:	20001b2a 	.word	0x20001b2a
			}
			else
				leak_icon_change(0x00);
 80091e0:	2000      	movs	r0, #0
 80091e2:	f7fa fbaf 	bl	8003944 <leak_icon_change>
 80091e6:	e002      	b.n	80091ee <sensor_one+0xd1e>
		}
		else
			leak_icon_change(0x00);
 80091e8:	2000      	movs	r0, #0
 80091ea:	f7fa fbab 	bl	8003944 <leak_icon_change>

		T_total -= T_readings[T_readIndex];
 80091ee:	4bb2      	ldr	r3, [pc, #712]	@ (80094b8 <sensor_one+0xfe8>)
 80091f0:	ed93 7a00 	vldr	s14, [r3]
 80091f4:	4bb1      	ldr	r3, [pc, #708]	@ (80094bc <sensor_one+0xfec>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4ab1      	ldr	r2, [pc, #708]	@ (80094c0 <sensor_one+0xff0>)
 80091fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091fe:	ee07 3a90 	vmov	s15, r3
 8009202:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009206:	ee77 7a67 	vsub.f32	s15, s14, s15
 800920a:	4bab      	ldr	r3, [pc, #684]	@ (80094b8 <sensor_one+0xfe8>)
 800920c:	edc3 7a00 	vstr	s15, [r3]
		T_readings[T_readIndex] = differential_flow();
 8009210:	f7fc f902 	bl	8005418 <differential_flow>
 8009214:	eef0 7a40 	vmov.f32	s15, s0
 8009218:	4ba8      	ldr	r3, [pc, #672]	@ (80094bc <sensor_one+0xfec>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009220:	ee17 2a90 	vmov	r2, s15
 8009224:	b291      	uxth	r1, r2
 8009226:	4aa6      	ldr	r2, [pc, #664]	@ (80094c0 <sensor_one+0xff0>)
 8009228:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		T_total += T_readings[T_readIndex];
 800922c:	4ba3      	ldr	r3, [pc, #652]	@ (80094bc <sensor_one+0xfec>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4aa3      	ldr	r2, [pc, #652]	@ (80094c0 <sensor_one+0xff0>)
 8009232:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009236:	ee07 3a90 	vmov	s15, r3
 800923a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800923e:	4b9e      	ldr	r3, [pc, #632]	@ (80094b8 <sensor_one+0xfe8>)
 8009240:	edd3 7a00 	vldr	s15, [r3]
 8009244:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009248:	4b9b      	ldr	r3, [pc, #620]	@ (80094b8 <sensor_one+0xfe8>)
 800924a:	edc3 7a00 	vstr	s15, [r3]
		T_readIndex = (T_readIndex + 1) % T_NUM_READINGS;
 800924e:	4b9b      	ldr	r3, [pc, #620]	@ (80094bc <sensor_one+0xfec>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	1c5a      	adds	r2, r3, #1
 8009254:	4b9b      	ldr	r3, [pc, #620]	@ (80094c4 <sensor_one+0xff4>)
 8009256:	fb83 1302 	smull	r1, r3, r3, r2
 800925a:	1199      	asrs	r1, r3, #6
 800925c:	17d3      	asrs	r3, r2, #31
 800925e:	1acb      	subs	r3, r1, r3
 8009260:	21c8      	movs	r1, #200	@ 0xc8
 8009262:	fb01 f303 	mul.w	r3, r1, r3
 8009266:	1ad3      	subs	r3, r2, r3
 8009268:	4a94      	ldr	r2, [pc, #592]	@ (80094bc <sensor_one+0xfec>)
 800926a:	6013      	str	r3, [r2, #0]
		T_avg = T_total / T_NUM_READINGS;
 800926c:	4b92      	ldr	r3, [pc, #584]	@ (80094b8 <sensor_one+0xfe8>)
 800926e:	ed93 7a00 	vldr	s14, [r3]
 8009272:	eddf 6a95 	vldr	s13, [pc, #596]	@ 80094c8 <sensor_one+0xff8>
 8009276:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800927a:	4b94      	ldr	r3, [pc, #592]	@ (80094cc <sensor_one+0xffc>)
 800927c:	edc3 7a00 	vstr	s15, [r3]
		if(Tidal>=mlsQt)
 8009280:	4b93      	ldr	r3, [pc, #588]	@ (80094d0 <sensor_one+0x1000>)
 8009282:	ed93 7a00 	vldr	s14, [r3]
 8009286:	4b93      	ldr	r3, [pc, #588]	@ (80094d4 <sensor_one+0x1004>)
 8009288:	edd3 7a00 	vldr	s15, [r3]
 800928c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009294:	db04      	blt.n	80092a0 <sensor_one+0xdd0>
		{
			Tidal=Tidal;
 8009296:	4b8e      	ldr	r3, [pc, #568]	@ (80094d0 <sensor_one+0x1000>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4a8d      	ldr	r2, [pc, #564]	@ (80094d0 <sensor_one+0x1000>)
 800929c:	6013      	str	r3, [r2, #0]
 800929e:	e003      	b.n	80092a8 <sensor_one+0xdd8>
		}
		else
		{
			Tidal=mlsQt;
 80092a0:	4b8c      	ldr	r3, [pc, #560]	@ (80094d4 <sensor_one+0x1004>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a8a      	ldr	r2, [pc, #552]	@ (80094d0 <sensor_one+0x1000>)
 80092a6:	6013      	str	r3, [r2, #0]
		}

		if ((VT_UPDATE_FLAG == 1)&&(Spontaneous_FLAG == 0)){
 80092a8:	4b8b      	ldr	r3, [pc, #556]	@ (80094d8 <sensor_one+0x1008>)
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	f000 80a2 	beq.w	80093f6 <sensor_one+0xf26>
 80092b2:	4b8a      	ldr	r3, [pc, #552]	@ (80094dc <sensor_one+0x100c>)
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	f083 0301 	eor.w	r3, r3, #1
 80092ba:	b2db      	uxtb	r3, r3
 80092bc:	2b00      	cmp	r3, #0
 80092be:	f000 809a 	beq.w	80093f6 <sensor_one+0xf26>

			mv_alarm();
 80092c2:	f7fa fd03 	bl	8003ccc <mv_alarm>
			Tidal_vol = (flow2 * 16.67 * Ti) - 15;
 80092c6:	4b86      	ldr	r3, [pc, #536]	@ (80094e0 <sensor_one+0x1010>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4618      	mov	r0, r3
 80092cc:	f7f7 f934 	bl	8000538 <__aeabi_f2d>
 80092d0:	a377      	add	r3, pc, #476	@ (adr r3, 80094b0 <sensor_one+0xfe0>)
 80092d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d6:	f7f7 f987 	bl	80005e8 <__aeabi_dmul>
 80092da:	4602      	mov	r2, r0
 80092dc:	460b      	mov	r3, r1
 80092de:	4614      	mov	r4, r2
 80092e0:	461d      	mov	r5, r3
 80092e2:	4b80      	ldr	r3, [pc, #512]	@ (80094e4 <sensor_one+0x1014>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4618      	mov	r0, r3
 80092e8:	f7f7 f926 	bl	8000538 <__aeabi_f2d>
 80092ec:	4602      	mov	r2, r0
 80092ee:	460b      	mov	r3, r1
 80092f0:	4620      	mov	r0, r4
 80092f2:	4629      	mov	r1, r5
 80092f4:	f7f7 f978 	bl	80005e8 <__aeabi_dmul>
 80092f8:	4602      	mov	r2, r0
 80092fa:	460b      	mov	r3, r1
 80092fc:	4610      	mov	r0, r2
 80092fe:	4619      	mov	r1, r3
 8009300:	f04f 0200 	mov.w	r2, #0
 8009304:	4b78      	ldr	r3, [pc, #480]	@ (80094e8 <sensor_one+0x1018>)
 8009306:	f7f6 ffb7 	bl	8000278 <__aeabi_dsub>
 800930a:	4602      	mov	r2, r0
 800930c:	460b      	mov	r3, r1
 800930e:	4610      	mov	r0, r2
 8009310:	4619      	mov	r1, r3
 8009312:	f7f7 fc61 	bl	8000bd8 <__aeabi_d2f>
 8009316:	4603      	mov	r3, r0
 8009318:	4a74      	ldr	r2, [pc, #464]	@ (80094ec <sensor_one+0x101c>)
 800931a:	6013      	str	r3, [r2, #0]
			//			Tidal_vol *= Tidal_vol * 16.67;
			vt_alarm((uint16_t)Tidal_vol);
 800931c:	4b73      	ldr	r3, [pc, #460]	@ (80094ec <sensor_one+0x101c>)
 800931e:	edd3 7a00 	vldr	s15, [r3]
 8009322:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009326:	ee17 3a90 	vmov	r3, s15
 800932a:	b29b      	uxth	r3, r3
 800932c:	4618      	mov	r0, r3
 800932e:	f7fa fca3 	bl	8003c78 <vt_alarm>
			//			Tinsp = Tidal_vol / (flow2 * 16.667);
			Compliance(Tidal_vol/previous_pressure_first);
 8009332:	4b6e      	ldr	r3, [pc, #440]	@ (80094ec <sensor_one+0x101c>)
 8009334:	edd3 6a00 	vldr	s13, [r3]
 8009338:	4b6d      	ldr	r3, [pc, #436]	@ (80094f0 <sensor_one+0x1020>)
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	ee07 3a90 	vmov	s15, r3
 8009340:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009344:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009348:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800934c:	edc7 7a00 	vstr	s15, [r7]
 8009350:	783b      	ldrb	r3, [r7, #0]
 8009352:	b2db      	uxtb	r3, r3
 8009354:	4618      	mov	r0, r3
 8009356:	f7fa fe11 	bl	8003f7c <Compliance>
			Compliance_value = Tidal_vol / previous_pressure_first;
 800935a:	4b64      	ldr	r3, [pc, #400]	@ (80094ec <sensor_one+0x101c>)
 800935c:	edd3 6a00 	vldr	s13, [r3]
 8009360:	4b63      	ldr	r3, [pc, #396]	@ (80094f0 <sensor_one+0x1020>)
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	ee07 3a90 	vmov	s15, r3
 8009368:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800936c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009370:	4b60      	ldr	r3, [pc, #384]	@ (80094f4 <sensor_one+0x1024>)
 8009372:	edc3 7a00 	vstr	s15, [r3]
			vol = Compliance_value * pressure;
 8009376:	4b60      	ldr	r3, [pc, #384]	@ (80094f8 <sensor_one+0x1028>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	ee07 3a90 	vmov	s15, r3
 800937e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009382:	4b5c      	ldr	r3, [pc, #368]	@ (80094f4 <sensor_one+0x1024>)
 8009384:	edd3 7a00 	vldr	s15, [r3]
 8009388:	ee67 7a27 	vmul.f32	s15, s14, s15
 800938c:	4b5b      	ldr	r3, [pc, #364]	@ (80094fc <sensor_one+0x102c>)
 800938e:	edc3 7a00 	vstr	s15, [r3]
			Comp2 = vt_temp_value / previous_pressure_first;
 8009392:	4b5b      	ldr	r3, [pc, #364]	@ (8009500 <sensor_one+0x1030>)
 8009394:	881b      	ldrh	r3, [r3, #0]
 8009396:	461a      	mov	r2, r3
 8009398:	4b55      	ldr	r3, [pc, #340]	@ (80094f0 <sensor_one+0x1020>)
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	fb92 f3f3 	sdiv	r3, r2, r3
 80093a0:	ee07 3a90 	vmov	s15, r3
 80093a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80093a8:	4b56      	ldr	r3, [pc, #344]	@ (8009504 <sensor_one+0x1034>)
 80093aa:	edc3 7a00 	vstr	s15, [r3]
			Minute_V = (Tidal_vol * RR_temp_value);
 80093ae:	4b56      	ldr	r3, [pc, #344]	@ (8009508 <sensor_one+0x1038>)
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	ee07 3a90 	vmov	s15, r3
 80093b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80093ba:	4b4c      	ldr	r3, [pc, #304]	@ (80094ec <sensor_one+0x101c>)
 80093bc:	edd3 7a00 	vldr	s15, [r3]
 80093c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093c4:	4b51      	ldr	r3, [pc, #324]	@ (800950c <sensor_one+0x103c>)
 80093c6:	edc3 7a00 	vstr	s15, [r3]
			live_rr_value = ((Minute_V / Tidal_vol));
 80093ca:	4b50      	ldr	r3, [pc, #320]	@ (800950c <sensor_one+0x103c>)
 80093cc:	edd3 6a00 	vldr	s13, [r3]
 80093d0:	4b46      	ldr	r3, [pc, #280]	@ (80094ec <sensor_one+0x101c>)
 80093d2:	ed93 7a00 	vldr	s14, [r3]
 80093d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093de:	edc7 7a00 	vstr	s15, [r7]
 80093e2:	783b      	ldrb	r3, [r7, #0]
 80093e4:	b2da      	uxtb	r2, r3
 80093e6:	4b4a      	ldr	r3, [pc, #296]	@ (8009510 <sensor_one+0x1040>)
 80093e8:	701a      	strb	r2, [r3, #0]
			rr_alarm(live_rr_value);
 80093ea:	4b49      	ldr	r3, [pc, #292]	@ (8009510 <sensor_one+0x1040>)
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7fa fd6a 	bl	8003ec8 <rr_alarm>
 80093f4:	e126      	b.n	8009644 <sensor_one+0x1174>
			//			rr_alarm(RR_temp_value);

		}
		else if((BAG_FLAG == 1)||(PSV_FLAG == 1)){
 80093f6:	4b47      	ldr	r3, [pc, #284]	@ (8009514 <sensor_one+0x1044>)
 80093f8:	781b      	ldrb	r3, [r3, #0]
 80093fa:	b2db      	uxtb	r3, r3
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d105      	bne.n	800940c <sensor_one+0xf3c>
 8009400:	4b45      	ldr	r3, [pc, #276]	@ (8009518 <sensor_one+0x1048>)
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	b2db      	uxtb	r3, r3
 8009406:	2b00      	cmp	r3, #0
 8009408:	f000 811c 	beq.w	8009644 <sensor_one+0x1174>
			Bag_vol = ((result2 / R));
 800940c:	4b43      	ldr	r3, [pc, #268]	@ (800951c <sensor_one+0x104c>)
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	ee07 3a90 	vmov	s15, r3
 8009414:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009418:	4b41      	ldr	r3, [pc, #260]	@ (8009520 <sensor_one+0x1050>)
 800941a:	ed93 7a00 	vldr	s14, [r3]
 800941e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009422:	4b40      	ldr	r3, [pc, #256]	@ (8009524 <sensor_one+0x1054>)
 8009424:	edc3 7a00 	vstr	s15, [r3]
			Bag_vol = Bag_vol / 16.67;
 8009428:	4b3e      	ldr	r3, [pc, #248]	@ (8009524 <sensor_one+0x1054>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4618      	mov	r0, r3
 800942e:	f7f7 f883 	bl	8000538 <__aeabi_f2d>
 8009432:	a31f      	add	r3, pc, #124	@ (adr r3, 80094b0 <sensor_one+0xfe0>)
 8009434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009438:	f7f7 fa00 	bl	800083c <__aeabi_ddiv>
 800943c:	4602      	mov	r2, r0
 800943e:	460b      	mov	r3, r1
 8009440:	4610      	mov	r0, r2
 8009442:	4619      	mov	r1, r3
 8009444:	f7f7 fbc8 	bl	8000bd8 <__aeabi_d2f>
 8009448:	4603      	mov	r3, r0
 800944a:	4a36      	ldr	r2, [pc, #216]	@ (8009524 <sensor_one+0x1054>)
 800944c:	6013      	str	r3, [r2, #0]
			//			Qls = Q / 60;
			Tinsp = Bag_vol / (Q * 16.67);
 800944e:	4b35      	ldr	r3, [pc, #212]	@ (8009524 <sensor_one+0x1054>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4618      	mov	r0, r3
 8009454:	f7f7 f870 	bl	8000538 <__aeabi_f2d>
 8009458:	4604      	mov	r4, r0
 800945a:	460d      	mov	r5, r1
 800945c:	4b32      	ldr	r3, [pc, #200]	@ (8009528 <sensor_one+0x1058>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4618      	mov	r0, r3
 8009462:	f7f7 f869 	bl	8000538 <__aeabi_f2d>
 8009466:	a312      	add	r3, pc, #72	@ (adr r3, 80094b0 <sensor_one+0xfe0>)
 8009468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800946c:	f7f7 f8bc 	bl	80005e8 <__aeabi_dmul>
 8009470:	4602      	mov	r2, r0
 8009472:	460b      	mov	r3, r1
 8009474:	4620      	mov	r0, r4
 8009476:	4629      	mov	r1, r5
 8009478:	f7f7 f9e0 	bl	800083c <__aeabi_ddiv>
 800947c:	4602      	mov	r2, r0
 800947e:	460b      	mov	r3, r1
 8009480:	4610      	mov	r0, r2
 8009482:	4619      	mov	r1, r3
 8009484:	f7f7 fba8 	bl	8000bd8 <__aeabi_d2f>
 8009488:	4603      	mov	r3, r0
 800948a:	4a28      	ldr	r2, [pc, #160]	@ (800952c <sensor_one+0x105c>)
 800948c:	6013      	str	r3, [r2, #0]
			if(TP>=Tinsp)
 800948e:	4b28      	ldr	r3, [pc, #160]	@ (8009530 <sensor_one+0x1060>)
 8009490:	ed93 7a00 	vldr	s14, [r3]
 8009494:	4b25      	ldr	r3, [pc, #148]	@ (800952c <sensor_one+0x105c>)
 8009496:	edd3 7a00 	vldr	s15, [r3]
 800949a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800949e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094a2:	db47      	blt.n	8009534 <sensor_one+0x1064>
			{
				TP=TP;
 80094a4:	4b22      	ldr	r3, [pc, #136]	@ (8009530 <sensor_one+0x1060>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a21      	ldr	r2, [pc, #132]	@ (8009530 <sensor_one+0x1060>)
 80094aa:	6013      	str	r3, [r2, #0]
 80094ac:	e046      	b.n	800953c <sensor_one+0x106c>
 80094ae:	bf00      	nop
 80094b0:	1eb851ec 	.word	0x1eb851ec
 80094b4:	4030ab85 	.word	0x4030ab85
 80094b8:	20001780 	.word	0x20001780
 80094bc:	20001914 	.word	0x20001914
 80094c0:	20001784 	.word	0x20001784
 80094c4:	51eb851f 	.word	0x51eb851f
 80094c8:	43480000 	.word	0x43480000
 80094cc:	2000177c 	.word	0x2000177c
 80094d0:	20001918 	.word	0x20001918
 80094d4:	20001364 	.word	0x20001364
 80094d8:	20001414 	.word	0x20001414
 80094dc:	200019b1 	.word	0x200019b1
 80094e0:	200013c4 	.word	0x200013c4
 80094e4:	200013a8 	.word	0x200013a8
 80094e8:	402e0000 	.word	0x402e0000
 80094ec:	200013b4 	.word	0x200013b4
 80094f0:	20001b28 	.word	0x20001b28
 80094f4:	20001b34 	.word	0x20001b34
 80094f8:	20001374 	.word	0x20001374
 80094fc:	200013c0 	.word	0x200013c0
 8009500:	20000044 	.word	0x20000044
 8009504:	200013c8 	.word	0x200013c8
 8009508:	2000004c 	.word	0x2000004c
 800950c:	200013f0 	.word	0x200013f0
 8009510:	20001966 	.word	0x20001966
 8009514:	200019ad 	.word	0x200019ad
 8009518:	200019aa 	.word	0x200019aa
 800951c:	20001a90 	.word	0x20001a90
 8009520:	200013b0 	.word	0x200013b0
 8009524:	200013d4 	.word	0x200013d4
 8009528:	20001354 	.word	0x20001354
 800952c:	200013d0 	.word	0x200013d0
 8009530:	200013fc 	.word	0x200013fc
			}
			else
			{
				TP=Tinsp;
 8009534:	4b94      	ldr	r3, [pc, #592]	@ (8009788 <sensor_one+0x12b8>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4a94      	ldr	r2, [pc, #592]	@ (800978c <sensor_one+0x12bc>)
 800953a:	6013      	str	r3, [r2, #0]
			}
			//			Tidal_vol = Tidal_vol2;

			if(Qin > 102){
 800953c:	4b94      	ldr	r3, [pc, #592]	@ (8009790 <sensor_one+0x12c0>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	2b66      	cmp	r3, #102	@ 0x66
 8009542:	dd2f      	ble.n	80095a4 <sensor_one+0x10d4>
				//				vt_alarm(Bag_vol);
				static int bagdelay=0;
				if((bagdelay++ >= 9)||(Bag_vol > previous_bag)){
 8009544:	4b93      	ldr	r3, [pc, #588]	@ (8009794 <sensor_one+0x12c4>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	1c5a      	adds	r2, r3, #1
 800954a:	4992      	ldr	r1, [pc, #584]	@ (8009794 <sensor_one+0x12c4>)
 800954c:	600a      	str	r2, [r1, #0]
 800954e:	2b08      	cmp	r3, #8
 8009550:	dc0a      	bgt.n	8009568 <sensor_one+0x1098>
 8009552:	4b91      	ldr	r3, [pc, #580]	@ (8009798 <sensor_one+0x12c8>)
 8009554:	ed93 7a00 	vldr	s14, [r3]
 8009558:	4b90      	ldr	r3, [pc, #576]	@ (800979c <sensor_one+0x12cc>)
 800955a:	edd3 7a00 	vldr	s15, [r3]
 800955e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009566:	dd19      	ble.n	800959c <sensor_one+0x10cc>
					previous_bag = Bag_vol;
 8009568:	4b8b      	ldr	r3, [pc, #556]	@ (8009798 <sensor_one+0x12c8>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a8b      	ldr	r2, [pc, #556]	@ (800979c <sensor_one+0x12cc>)
 800956e:	6013      	str	r3, [r2, #0]
					previous_pressure_first = PeakP;
 8009570:	4b8b      	ldr	r3, [pc, #556]	@ (80097a0 <sensor_one+0x12d0>)
 8009572:	edd3 7a00 	vldr	s15, [r3]
 8009576:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800957a:	edc7 7a00 	vstr	s15, [r7]
 800957e:	783b      	ldrb	r3, [r7, #0]
 8009580:	b2da      	uxtb	r2, r3
 8009582:	4b88      	ldr	r3, [pc, #544]	@ (80097a4 <sensor_one+0x12d4>)
 8009584:	701a      	strb	r2, [r3, #0]
					prev_insp = Tinsp;
 8009586:	4b80      	ldr	r3, [pc, #512]	@ (8009788 <sensor_one+0x12b8>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4a87      	ldr	r2, [pc, #540]	@ (80097a8 <sensor_one+0x12d8>)
 800958c:	6013      	str	r3, [r2, #0]
					prev_MV = Bag_Minute_V;
 800958e:	4b87      	ldr	r3, [pc, #540]	@ (80097ac <sensor_one+0x12dc>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4a87      	ldr	r2, [pc, #540]	@ (80097b0 <sensor_one+0x12e0>)
 8009594:	6013      	str	r3, [r2, #0]
					bagdelay=0;
 8009596:	4b7f      	ldr	r3, [pc, #508]	@ (8009794 <sensor_one+0x12c4>)
 8009598:	2200      	movs	r2, #0
 800959a:	601a      	str	r2, [r3, #0]
				}
				bk=10;
 800959c:	4b85      	ldr	r3, [pc, #532]	@ (80097b4 <sensor_one+0x12e4>)
 800959e:	220a      	movs	r2, #10
 80095a0:	601a      	str	r2, [r3, #0]
 80095a2:	e00d      	b.n	80095c0 <sensor_one+0x10f0>
			}
			else{
				vt_alarm((uint16_t)previous_bag);
 80095a4:	4b7d      	ldr	r3, [pc, #500]	@ (800979c <sensor_one+0x12cc>)
 80095a6:	edd3 7a00 	vldr	s15, [r3]
 80095aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095ae:	ee17 3a90 	vmov	r3, s15
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	4618      	mov	r0, r3
 80095b6:	f7fa fb5f 	bl	8003c78 <vt_alarm>
				bk=111;
 80095ba:	4b7e      	ldr	r3, [pc, #504]	@ (80097b4 <sensor_one+0x12e4>)
 80095bc:	226f      	movs	r2, #111	@ 0x6f
 80095be:	601a      	str	r2, [r3, #0]
			}
			Bag_Minute_V = (previous_bag * (60 / (2*Tinsp)));
 80095c0:	4b71      	ldr	r3, [pc, #452]	@ (8009788 <sensor_one+0x12b8>)
 80095c2:	edd3 7a00 	vldr	s15, [r3]
 80095c6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80095ca:	eddf 6a7b 	vldr	s13, [pc, #492]	@ 80097b8 <sensor_one+0x12e8>
 80095ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095d2:	4b72      	ldr	r3, [pc, #456]	@ (800979c <sensor_one+0x12cc>)
 80095d4:	edd3 7a00 	vldr	s15, [r3]
 80095d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095dc:	4b73      	ldr	r3, [pc, #460]	@ (80097ac <sensor_one+0x12dc>)
 80095de:	edc3 7a00 	vstr	s15, [r3]
			live_rr_value = ((prev_MV / previous_bag));
 80095e2:	4b73      	ldr	r3, [pc, #460]	@ (80097b0 <sensor_one+0x12e0>)
 80095e4:	edd3 6a00 	vldr	s13, [r3]
 80095e8:	4b6c      	ldr	r3, [pc, #432]	@ (800979c <sensor_one+0x12cc>)
 80095ea:	ed93 7a00 	vldr	s14, [r3]
 80095ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095f6:	edc7 7a00 	vstr	s15, [r7]
 80095fa:	783b      	ldrb	r3, [r7, #0]
 80095fc:	b2da      	uxtb	r2, r3
 80095fe:	4b6f      	ldr	r3, [pc, #444]	@ (80097bc <sensor_one+0x12ec>)
 8009600:	701a      	strb	r2, [r3, #0]
			rr_alarm(live_rr_value);
 8009602:	4b6e      	ldr	r3, [pc, #440]	@ (80097bc <sensor_one+0x12ec>)
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	4618      	mov	r0, r3
 8009608:	f7fa fc5e 	bl	8003ec8 <rr_alarm>
			Compliance(previous_bag/previous_pressure_first);
 800960c:	4b63      	ldr	r3, [pc, #396]	@ (800979c <sensor_one+0x12cc>)
 800960e:	edd3 6a00 	vldr	s13, [r3]
 8009612:	4b64      	ldr	r3, [pc, #400]	@ (80097a4 <sensor_one+0x12d4>)
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	ee07 3a90 	vmov	s15, r3
 800961a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800961e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009622:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009626:	edc7 7a00 	vstr	s15, [r7]
 800962a:	783b      	ldrb	r3, [r7, #0]
 800962c:	b2db      	uxtb	r3, r3
 800962e:	4618      	mov	r0, r3
 8009630:	f7fa fca4 	bl	8003f7c <Compliance>
			bag_mv_alarm();
 8009634:	f7fa fbc6 	bl	8003dc4 <bag_mv_alarm>
			bag_test++;
 8009638:	4b61      	ldr	r3, [pc, #388]	@ (80097c0 <sensor_one+0x12f0>)
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	3301      	adds	r3, #1
 800963e:	b2da      	uxtb	r2, r3
 8009640:	4b5f      	ldr	r3, [pc, #380]	@ (80097c0 <sensor_one+0x12f0>)
 8009642:	701a      	strb	r2, [r3, #0]
		}
		if ((VCV_FLAG == 1)&&(PID_CALIBRATE_FLAG == 1)) {
 8009644:	4b5f      	ldr	r3, [pc, #380]	@ (80097c4 <sensor_one+0x12f4>)
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	b2db      	uxtb	r3, r3
 800964a:	2b00      	cmp	r3, #0
 800964c:	d075      	beq.n	800973a <sensor_one+0x126a>
 800964e:	4b5e      	ldr	r3, [pc, #376]	@ (80097c8 <sensor_one+0x12f8>)
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d071      	beq.n	800973a <sensor_one+0x126a>
			static int cooper=0;
			if((cooper++ <= 100) && (vt_temp_value <= 150)&&(Tidal_vol<=10)){
 8009656:	4b5d      	ldr	r3, [pc, #372]	@ (80097cc <sensor_one+0x12fc>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	1c5a      	adds	r2, r3, #1
 800965c:	495b      	ldr	r1, [pc, #364]	@ (80097cc <sensor_one+0x12fc>)
 800965e:	600a      	str	r2, [r1, #0]
 8009660:	2b64      	cmp	r3, #100	@ 0x64
 8009662:	dc51      	bgt.n	8009708 <sensor_one+0x1238>
 8009664:	4b5a      	ldr	r3, [pc, #360]	@ (80097d0 <sensor_one+0x1300>)
 8009666:	881b      	ldrh	r3, [r3, #0]
 8009668:	2b96      	cmp	r3, #150	@ 0x96
 800966a:	d84d      	bhi.n	8009708 <sensor_one+0x1238>
 800966c:	4b59      	ldr	r3, [pc, #356]	@ (80097d4 <sensor_one+0x1304>)
 800966e:	edd3 7a00 	vldr	s15, [r3]
 8009672:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8009676:	eef4 7ac7 	vcmpe.f32	s15, s14
 800967a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800967e:	d843      	bhi.n	8009708 <sensor_one+0x1238>
				if((vt_temp_value > 40)&&(vt_temp_value<=60)){
 8009680:	4b53      	ldr	r3, [pc, #332]	@ (80097d0 <sensor_one+0x1300>)
 8009682:	881b      	ldrh	r3, [r3, #0]
 8009684:	2b28      	cmp	r3, #40	@ 0x28
 8009686:	d90a      	bls.n	800969e <sensor_one+0x11ce>
 8009688:	4b51      	ldr	r3, [pc, #324]	@ (80097d0 <sensor_one+0x1300>)
 800968a:	881b      	ldrh	r3, [r3, #0]
 800968c:	2b3c      	cmp	r3, #60	@ 0x3c
 800968e:	d806      	bhi.n	800969e <sensor_one+0x11ce>
					Temp = -85;
 8009690:	4951      	ldr	r1, [pc, #324]	@ (80097d8 <sensor_one+0x1308>)
 8009692:	a339      	add	r3, pc, #228	@ (adr r3, 8009778 <sensor_one+0x12a8>)
 8009694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009698:	e9c1 2300 	strd	r2, r3, [r1]
 800969c:	e033      	b.n	8009706 <sensor_one+0x1236>
				}
				else if((vt_temp_value > 61)&&(vt_temp_value<=75)){
 800969e:	4b4c      	ldr	r3, [pc, #304]	@ (80097d0 <sensor_one+0x1300>)
 80096a0:	881b      	ldrh	r3, [r3, #0]
 80096a2:	2b3d      	cmp	r3, #61	@ 0x3d
 80096a4:	d90a      	bls.n	80096bc <sensor_one+0x11ec>
 80096a6:	4b4a      	ldr	r3, [pc, #296]	@ (80097d0 <sensor_one+0x1300>)
 80096a8:	881b      	ldrh	r3, [r3, #0]
 80096aa:	2b4b      	cmp	r3, #75	@ 0x4b
 80096ac:	d806      	bhi.n	80096bc <sensor_one+0x11ec>
					Temp = -65;
 80096ae:	494a      	ldr	r1, [pc, #296]	@ (80097d8 <sensor_one+0x1308>)
 80096b0:	a333      	add	r3, pc, #204	@ (adr r3, 8009780 <sensor_one+0x12b0>)
 80096b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b6:	e9c1 2300 	strd	r2, r3, [r1]
 80096ba:	e024      	b.n	8009706 <sensor_one+0x1236>
				}
				else if((vt_temp_value >= 76)&&(vt_temp_value<=90)){
 80096bc:	4b44      	ldr	r3, [pc, #272]	@ (80097d0 <sensor_one+0x1300>)
 80096be:	881b      	ldrh	r3, [r3, #0]
 80096c0:	2b4b      	cmp	r3, #75	@ 0x4b
 80096c2:	d90a      	bls.n	80096da <sensor_one+0x120a>
 80096c4:	4b42      	ldr	r3, [pc, #264]	@ (80097d0 <sensor_one+0x1300>)
 80096c6:	881b      	ldrh	r3, [r3, #0]
 80096c8:	2b5a      	cmp	r3, #90	@ 0x5a
 80096ca:	d806      	bhi.n	80096da <sensor_one+0x120a>
					Temp = -35;
 80096cc:	4942      	ldr	r1, [pc, #264]	@ (80097d8 <sensor_one+0x1308>)
 80096ce:	f04f 0200 	mov.w	r2, #0
 80096d2:	4b42      	ldr	r3, [pc, #264]	@ (80097dc <sensor_one+0x130c>)
 80096d4:	e9c1 2300 	strd	r2, r3, [r1]
 80096d8:	e015      	b.n	8009706 <sensor_one+0x1236>
				}
				else if((vt_temp_value >= 91)&&(vt_temp_value<=150)){
 80096da:	4b3d      	ldr	r3, [pc, #244]	@ (80097d0 <sensor_one+0x1300>)
 80096dc:	881b      	ldrh	r3, [r3, #0]
 80096de:	2b5a      	cmp	r3, #90	@ 0x5a
 80096e0:	d90a      	bls.n	80096f8 <sensor_one+0x1228>
 80096e2:	4b3b      	ldr	r3, [pc, #236]	@ (80097d0 <sensor_one+0x1300>)
 80096e4:	881b      	ldrh	r3, [r3, #0]
 80096e6:	2b96      	cmp	r3, #150	@ 0x96
 80096e8:	d806      	bhi.n	80096f8 <sensor_one+0x1228>
					Temp = -20;
 80096ea:	493b      	ldr	r1, [pc, #236]	@ (80097d8 <sensor_one+0x1308>)
 80096ec:	f04f 0200 	mov.w	r2, #0
 80096f0:	4b3b      	ldr	r3, [pc, #236]	@ (80097e0 <sensor_one+0x1310>)
 80096f2:	e9c1 2300 	strd	r2, r3, [r1]
 80096f6:	e006      	b.n	8009706 <sensor_one+0x1236>
				}
				else
					Temp= -123;
 80096f8:	4937      	ldr	r1, [pc, #220]	@ (80097d8 <sensor_one+0x1308>)
 80096fa:	f04f 0200 	mov.w	r2, #0
 80096fe:	4b39      	ldr	r3, [pc, #228]	@ (80097e4 <sensor_one+0x1314>)
 8009700:	e9c1 2300 	strd	r2, r3, [r1]
				if((vt_temp_value > 40)&&(vt_temp_value<=60)){
 8009704:	e00a      	b.n	800971c <sensor_one+0x124c>
 8009706:	e009      	b.n	800971c <sensor_one+0x124c>
			}
			else{
				Temp = Tidal_vol;
 8009708:	4b32      	ldr	r3, [pc, #200]	@ (80097d4 <sensor_one+0x1304>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4618      	mov	r0, r3
 800970e:	f7f6 ff13 	bl	8000538 <__aeabi_f2d>
 8009712:	4602      	mov	r2, r0
 8009714:	460b      	mov	r3, r1
 8009716:	4930      	ldr	r1, [pc, #192]	@ (80097d8 <sensor_one+0x1308>)
 8009718:	e9c1 2300 	strd	r2, r3, [r1]

			}
			//			Temp = Tidal_vol;
			PID_Compute(&TPID);
 800971c:	4832      	ldr	r0, [pc, #200]	@ (80097e8 <sensor_one+0x1318>)
 800971e:	f002 f893 	bl	800b848 <PID_Compute>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PIDOut);
 8009722:	4b32      	ldr	r3, [pc, #200]	@ (80097ec <sensor_one+0x131c>)
 8009724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009728:	4931      	ldr	r1, [pc, #196]	@ (80097f0 <sensor_one+0x1320>)
 800972a:	680c      	ldr	r4, [r1, #0]
 800972c:	4610      	mov	r0, r2
 800972e:	4619      	mov	r1, r3
 8009730:	f7f7 fa32 	bl	8000b98 <__aeabi_d2uiz>
 8009734:	4603      	mov	r3, r0
 8009736:	6363      	str	r3, [r4, #52]	@ 0x34
		if ((VCV_FLAG == 1)&&(PID_CALIBRATE_FLAG == 1)) {
 8009738:	e09c      	b.n	8009874 <sensor_one+0x13a4>

		}
		else if (PCV_FLAG == 1) {
 800973a:	4b2e      	ldr	r3, [pc, #184]	@ (80097f4 <sensor_one+0x1324>)
 800973c:	781b      	ldrb	r3, [r3, #0]
 800973e:	b2db      	uxtb	r3, r3
 8009740:	2b00      	cmp	r3, #0
 8009742:	d059      	beq.n	80097f8 <sensor_one+0x1328>

			Temp = previous_pressure_first;
 8009744:	4b17      	ldr	r3, [pc, #92]	@ (80097a4 <sensor_one+0x12d4>)
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	4618      	mov	r0, r3
 800974a:	f7f6 fed3 	bl	80004f4 <__aeabi_ui2d>
 800974e:	4602      	mov	r2, r0
 8009750:	460b      	mov	r3, r1
 8009752:	4921      	ldr	r1, [pc, #132]	@ (80097d8 <sensor_one+0x1308>)
 8009754:	e9c1 2300 	strd	r2, r3, [r1]
			PID_Compute(&TPID);
 8009758:	4823      	ldr	r0, [pc, #140]	@ (80097e8 <sensor_one+0x1318>)
 800975a:	f002 f875 	bl	800b848 <PID_Compute>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PIDOut);
 800975e:	4b23      	ldr	r3, [pc, #140]	@ (80097ec <sensor_one+0x131c>)
 8009760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009764:	4922      	ldr	r1, [pc, #136]	@ (80097f0 <sensor_one+0x1320>)
 8009766:	680c      	ldr	r4, [r1, #0]
 8009768:	4610      	mov	r0, r2
 800976a:	4619      	mov	r1, r3
 800976c:	f7f7 fa14 	bl	8000b98 <__aeabi_d2uiz>
 8009770:	4603      	mov	r3, r0
 8009772:	6363      	str	r3, [r4, #52]	@ 0x34
 8009774:	e07e      	b.n	8009874 <sensor_one+0x13a4>
 8009776:	bf00      	nop
 8009778:	00000000 	.word	0x00000000
 800977c:	c0554000 	.word	0xc0554000
 8009780:	00000000 	.word	0x00000000
 8009784:	c0504000 	.word	0xc0504000
 8009788:	200013d0 	.word	0x200013d0
 800978c:	200013fc 	.word	0x200013fc
 8009790:	20001358 	.word	0x20001358
 8009794:	20001b60 	.word	0x20001b60
 8009798:	200013d4 	.word	0x200013d4
 800979c:	200013d8 	.word	0x200013d8
 80097a0:	200013f8 	.word	0x200013f8
 80097a4:	20001b28 	.word	0x20001b28
 80097a8:	200013dc 	.word	0x200013dc
 80097ac:	200013f4 	.word	0x200013f4
 80097b0:	200013e0 	.word	0x200013e0
 80097b4:	200013cc 	.word	0x200013cc
 80097b8:	42700000 	.word	0x42700000
 80097bc:	20001966 	.word	0x20001966
 80097c0:	20001aec 	.word	0x20001aec
 80097c4:	200019ab 	.word	0x200019ab
 80097c8:	20001416 	.word	0x20001416
 80097cc:	20001b64 	.word	0x20001b64
 80097d0:	20000044 	.word	0x20000044
 80097d4:	200013b4 	.word	0x200013b4
 80097d8:	20000020 	.word	0x20000020
 80097dc:	c0418000 	.word	0xc0418000
 80097e0:	c0340000 	.word	0xc0340000
 80097e4:	c05ec000 	.word	0xc05ec000
 80097e8:	20000d28 	.word	0x20000d28
 80097ec:	20001428 	.word	0x20001428
 80097f0:	20000f40 	.word	0x20000f40
 80097f4:	200019ac 	.word	0x200019ac

		}
		else if ((Mandatory_FLAG == 1) && (PID_CALIBRATE_FLAG == 1)) {
 80097f8:	4b37      	ldr	r3, [pc, #220]	@ (80098d8 <sensor_one+0x1408>)
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d01c      	beq.n	800983a <sensor_one+0x136a>
 8009800:	4b36      	ldr	r3, [pc, #216]	@ (80098dc <sensor_one+0x140c>)
 8009802:	781b      	ldrb	r3, [r3, #0]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d018      	beq.n	800983a <sensor_one+0x136a>
			Temp = Tidal_vol;
 8009808:	4b35      	ldr	r3, [pc, #212]	@ (80098e0 <sensor_one+0x1410>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4618      	mov	r0, r3
 800980e:	f7f6 fe93 	bl	8000538 <__aeabi_f2d>
 8009812:	4602      	mov	r2, r0
 8009814:	460b      	mov	r3, r1
 8009816:	4933      	ldr	r1, [pc, #204]	@ (80098e4 <sensor_one+0x1414>)
 8009818:	e9c1 2300 	strd	r2, r3, [r1]
			PID_Compute(&TPID);
 800981c:	4832      	ldr	r0, [pc, #200]	@ (80098e8 <sensor_one+0x1418>)
 800981e:	f002 f813 	bl	800b848 <PID_Compute>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PIDOut);
 8009822:	4b32      	ldr	r3, [pc, #200]	@ (80098ec <sensor_one+0x141c>)
 8009824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009828:	4931      	ldr	r1, [pc, #196]	@ (80098f0 <sensor_one+0x1420>)
 800982a:	680c      	ldr	r4, [r1, #0]
 800982c:	4610      	mov	r0, r2
 800982e:	4619      	mov	r1, r3
 8009830:	f7f7 f9b2 	bl	8000b98 <__aeabi_d2uiz>
 8009834:	4603      	mov	r3, r0
 8009836:	6363      	str	r3, [r4, #52]	@ 0x34
 8009838:	e01c      	b.n	8009874 <sensor_one+0x13a4>
			//				PID_Compute(&TPID);
			//				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PIDOut);
			//			}

		}
		else if (PSV_FLAG == 1) {
 800983a:	4b2e      	ldr	r3, [pc, #184]	@ (80098f4 <sensor_one+0x1424>)
 800983c:	781b      	ldrb	r3, [r3, #0]
 800983e:	b2db      	uxtb	r3, r3
 8009840:	2b00      	cmp	r3, #0
 8009842:	d017      	beq.n	8009874 <sensor_one+0x13a4>

			Temp = previous_pressure_first;
 8009844:	4b2c      	ldr	r3, [pc, #176]	@ (80098f8 <sensor_one+0x1428>)
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	4618      	mov	r0, r3
 800984a:	f7f6 fe53 	bl	80004f4 <__aeabi_ui2d>
 800984e:	4602      	mov	r2, r0
 8009850:	460b      	mov	r3, r1
 8009852:	4924      	ldr	r1, [pc, #144]	@ (80098e4 <sensor_one+0x1414>)
 8009854:	e9c1 2300 	strd	r2, r3, [r1]
			PID_Compute(&TPID);
 8009858:	4823      	ldr	r0, [pc, #140]	@ (80098e8 <sensor_one+0x1418>)
 800985a:	f001 fff5 	bl	800b848 <PID_Compute>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PIDOut);
 800985e:	4b23      	ldr	r3, [pc, #140]	@ (80098ec <sensor_one+0x141c>)
 8009860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009864:	4922      	ldr	r1, [pc, #136]	@ (80098f0 <sensor_one+0x1420>)
 8009866:	680c      	ldr	r4, [r1, #0]
 8009868:	4610      	mov	r0, r2
 800986a:	4619      	mov	r1, r3
 800986c:	f7f7 f994 	bl	8000b98 <__aeabi_d2uiz>
 8009870:	4603      	mov	r3, r0
 8009872:	6363      	str	r3, [r4, #52]	@ 0x34
		//			Temp = previous_pressure_first;
		//			PID_Compute(&TPID);
		//			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PIDOut);
		//		}

		P_Peak_pressure(previous_pressure_first);
 8009874:	4b20      	ldr	r3, [pc, #128]	@ (80098f8 <sensor_one+0x1428>)
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	4618      	mov	r0, r3
 800987a:	f7fa fb43 	bl	8003f04 <P_Peak_pressure>
		PeakP = 0;
 800987e:	4b1f      	ldr	r3, [pc, #124]	@ (80098fc <sensor_one+0x142c>)
 8009880:	f04f 0200 	mov.w	r2, #0
 8009884:	601a      	str	r2, [r3, #0]
		data_val2[19] = 0x64;
 8009886:	4b1e      	ldr	r3, [pc, #120]	@ (8009900 <sensor_one+0x1430>)
 8009888:	2264      	movs	r2, #100	@ 0x64
 800988a:	74da      	strb	r2, [r3, #19]
		//		data_val2[25] = 0x64;
		//        data_val2[25] = 0x64;
		data_val2[21] = result;
 800988c:	4b1d      	ldr	r3, [pc, #116]	@ (8009904 <sensor_one+0x1434>)
 800988e:	781a      	ldrb	r2, [r3, #0]
 8009890:	4b1b      	ldr	r3, [pc, #108]	@ (8009900 <sensor_one+0x1430>)
 8009892:	755a      	strb	r2, [r3, #21]
		//		data_val2[14] = 0x01;
		data_val2[15] = result2;
 8009894:	4b1c      	ldr	r3, [pc, #112]	@ (8009908 <sensor_one+0x1438>)
 8009896:	781a      	ldrb	r2, [r3, #0]
 8009898:	4b19      	ldr	r3, [pc, #100]	@ (8009900 <sensor_one+0x1430>)
 800989a:	73da      	strb	r2, [r3, #15]
		//							HAL_MAX_DELAY);
		//        data_val2[27] = PV_Graph;
		//        data_val2[21] = result;
		//                data_val2[21] = 0x64;
		//                data_val2[15] = 0x00;
		for (int a = 0; a < 22; a++){
 800989c:	2300      	movs	r3, #0
 800989e:	60bb      	str	r3, [r7, #8]
 80098a0:	e00b      	b.n	80098ba <sensor_one+0x13ea>
			display_payload[a] = data_val2[a];
 80098a2:	4a17      	ldr	r2, [pc, #92]	@ (8009900 <sensor_one+0x1430>)
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	4413      	add	r3, r2
 80098a8:	7819      	ldrb	r1, [r3, #0]
 80098aa:	4a18      	ldr	r2, [pc, #96]	@ (800990c <sensor_one+0x143c>)
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	4413      	add	r3, r2
 80098b0:	460a      	mov	r2, r1
 80098b2:	701a      	strb	r2, [r3, #0]
		for (int a = 0; a < 22; a++){
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	3301      	adds	r3, #1
 80098b8:	60bb      	str	r3, [r7, #8]
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	2b15      	cmp	r3, #21
 80098be:	ddf0      	ble.n	80098a2 <sensor_one+0x13d2>
		}
		HAL_UART_Transmit(&huart1, display_payload, sizeof(display_payload),
 80098c0:	2303      	movs	r3, #3
 80098c2:	2216      	movs	r2, #22
 80098c4:	4911      	ldr	r1, [pc, #68]	@ (800990c <sensor_one+0x143c>)
 80098c6:	4812      	ldr	r0, [pc, #72]	@ (8009910 <sensor_one+0x1440>)
 80098c8:	f007 fa24 	bl	8010d14 <HAL_UART_Transmit>
				3);

		vTaskDelay(pdMS_TO_TICKS(50));
 80098cc:	2032      	movs	r0, #50	@ 0x32
 80098ce:	f009 fe05 	bl	80134dc <vTaskDelay>
	{
 80098d2:	f7fe be02 	b.w	80084da <sensor_one+0xa>
 80098d6:	bf00      	nop
 80098d8:	200019b0 	.word	0x200019b0
 80098dc:	20001416 	.word	0x20001416
 80098e0:	200013b4 	.word	0x200013b4
 80098e4:	20000020 	.word	0x20000020
 80098e8:	20000d28 	.word	0x20000d28
 80098ec:	20001428 	.word	0x20001428
 80098f0:	20000f40 	.word	0x20000f40
 80098f4:	200019aa 	.word	0x200019aa
 80098f8:	20001b28 	.word	0x20001b28
 80098fc:	200013f8 	.word	0x200013f8
 8009900:	20000058 	.word	0x20000058
 8009904:	20001a8f 	.word	0x20001a8f
 8009908:	20001a90 	.word	0x20001a90
 800990c:	20001a04 	.word	0x20001a04
 8009910:	20000fd0 	.word	0x20000fd0
 8009914:	00000000 	.word	0x00000000

08009918 <mode_ctr>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_mode_ctr */
void mode_ctr(void const * argument)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b082      	sub	sp, #8
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN mode_ctr */
	/* Infinite loop */
	for(;;)
	{

		if (VCV_FLAG == 1) {
 8009920:	4b9d      	ldr	r3, [pc, #628]	@ (8009b98 <mode_ctr+0x280>)
 8009922:	781b      	ldrb	r3, [r3, #0]
 8009924:	b2db      	uxtb	r3, r3
 8009926:	2b00      	cmp	r3, #0
 8009928:	f000 80d2 	beq.w	8009ad0 <mode_ctr+0x1b8>
			PID_VALUE_SET_FLAG = 1;
 800992c:	4b9b      	ldr	r3, [pc, #620]	@ (8009b9c <mode_ctr+0x284>)
 800992e:	2201      	movs	r2, #1
 8009930:	701a      	strb	r2, [r3, #0]
			if(PID_VALUE_SET_FLAG == 1){
 8009932:	4b9a      	ldr	r3, [pc, #616]	@ (8009b9c <mode_ctr+0x284>)
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	2b00      	cmp	r3, #0
 8009938:	f000 80c7 	beq.w	8009aca <mode_ctr+0x1b2>
				//				}
				//				else if(Compliance_Neonate_Flag == 1){
				//					PID_FLOW_SET_VALUE(user_flowe, 1.0, 0.1, 0, 0.01);
				//				}
				//				PID_FLOW_SET_VALUE(user_flowe, 1.0, 1.0, 0, 10);
				if ((vt_temp_value >= 0) && (vt_temp_value <=180)){
 800993c:	4b98      	ldr	r3, [pc, #608]	@ (8009ba0 <mode_ctr+0x288>)
 800993e:	881b      	ldrh	r3, [r3, #0]
 8009940:	2bb4      	cmp	r3, #180	@ 0xb4
 8009942:	d811      	bhi.n	8009968 <mode_ctr+0x50>
					PID_FLOW_SET_VALUE(vt_temp_value, 0.03, 0.018, 0, 4);
 8009944:	4b96      	ldr	r3, [pc, #600]	@ (8009ba0 <mode_ctr+0x288>)
 8009946:	881b      	ldrh	r3, [r3, #0]
 8009948:	4618      	mov	r0, r3
 800994a:	f7f6 fdd3 	bl	80004f4 <__aeabi_ui2d>
 800994e:	4602      	mov	r2, r0
 8009950:	460b      	mov	r3, r1
 8009952:	2004      	movs	r0, #4
 8009954:	ed9f 3b7e 	vldr	d3, [pc, #504]	@ 8009b50 <mode_ctr+0x238>
 8009958:	ed9f 2b7f 	vldr	d2, [pc, #508]	@ 8009b58 <mode_ctr+0x240>
 800995c:	ed9f 1b80 	vldr	d1, [pc, #512]	@ 8009b60 <mode_ctr+0x248>
 8009960:	ec43 2b10 	vmov	d0, r2, r3
 8009964:	f7fb fa3c 	bl	8004de0 <PID_FLOW_SET_VALUE>
				}
				if ((vt_temp_value >= 181) && (vt_temp_value <=399)){
 8009968:	4b8d      	ldr	r3, [pc, #564]	@ (8009ba0 <mode_ctr+0x288>)
 800996a:	881b      	ldrh	r3, [r3, #0]
 800996c:	2bb4      	cmp	r3, #180	@ 0xb4
 800996e:	d916      	bls.n	800999e <mode_ctr+0x86>
 8009970:	4b8b      	ldr	r3, [pc, #556]	@ (8009ba0 <mode_ctr+0x288>)
 8009972:	881b      	ldrh	r3, [r3, #0]
 8009974:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8009978:	d211      	bcs.n	800999e <mode_ctr+0x86>
					PID_FLOW_SET_VALUE(vt_temp_value, 0.011, 0.02, 0, 4);
 800997a:	4b89      	ldr	r3, [pc, #548]	@ (8009ba0 <mode_ctr+0x288>)
 800997c:	881b      	ldrh	r3, [r3, #0]
 800997e:	4618      	mov	r0, r3
 8009980:	f7f6 fdb8 	bl	80004f4 <__aeabi_ui2d>
 8009984:	4602      	mov	r2, r0
 8009986:	460b      	mov	r3, r1
 8009988:	2004      	movs	r0, #4
 800998a:	ed9f 3b71 	vldr	d3, [pc, #452]	@ 8009b50 <mode_ctr+0x238>
 800998e:	ed9f 2b76 	vldr	d2, [pc, #472]	@ 8009b68 <mode_ctr+0x250>
 8009992:	ed9f 1b77 	vldr	d1, [pc, #476]	@ 8009b70 <mode_ctr+0x258>
 8009996:	ec43 2b10 	vmov	d0, r2, r3
 800999a:	f7fb fa21 	bl	8004de0 <PID_FLOW_SET_VALUE>
				}
				if ((vt_temp_value >= 400) && (vt_temp_value <=650)){
 800999e:	4b80      	ldr	r3, [pc, #512]	@ (8009ba0 <mode_ctr+0x288>)
 80099a0:	881b      	ldrh	r3, [r3, #0]
 80099a2:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80099a6:	d317      	bcc.n	80099d8 <mode_ctr+0xc0>
 80099a8:	4b7d      	ldr	r3, [pc, #500]	@ (8009ba0 <mode_ctr+0x288>)
 80099aa:	881b      	ldrh	r3, [r3, #0]
 80099ac:	f240 228a 	movw	r2, #650	@ 0x28a
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d811      	bhi.n	80099d8 <mode_ctr+0xc0>
					PID_FLOW_SET_VALUE(vt_temp_value, 0.011, 0.02, 0, 4);
 80099b4:	4b7a      	ldr	r3, [pc, #488]	@ (8009ba0 <mode_ctr+0x288>)
 80099b6:	881b      	ldrh	r3, [r3, #0]
 80099b8:	4618      	mov	r0, r3
 80099ba:	f7f6 fd9b 	bl	80004f4 <__aeabi_ui2d>
 80099be:	4602      	mov	r2, r0
 80099c0:	460b      	mov	r3, r1
 80099c2:	2004      	movs	r0, #4
 80099c4:	ed9f 3b62 	vldr	d3, [pc, #392]	@ 8009b50 <mode_ctr+0x238>
 80099c8:	ed9f 2b67 	vldr	d2, [pc, #412]	@ 8009b68 <mode_ctr+0x250>
 80099cc:	ed9f 1b68 	vldr	d1, [pc, #416]	@ 8009b70 <mode_ctr+0x258>
 80099d0:	ec43 2b10 	vmov	d0, r2, r3
 80099d4:	f7fb fa04 	bl	8004de0 <PID_FLOW_SET_VALUE>
				}
				if ((vt_temp_value >= 651) && (vt_temp_value <=750)){
 80099d8:	4b71      	ldr	r3, [pc, #452]	@ (8009ba0 <mode_ctr+0x288>)
 80099da:	881b      	ldrh	r3, [r3, #0]
 80099dc:	f240 228a 	movw	r2, #650	@ 0x28a
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d917      	bls.n	8009a14 <mode_ctr+0xfc>
 80099e4:	4b6e      	ldr	r3, [pc, #440]	@ (8009ba0 <mode_ctr+0x288>)
 80099e6:	881b      	ldrh	r3, [r3, #0]
 80099e8:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d811      	bhi.n	8009a14 <mode_ctr+0xfc>
					PID_FLOW_SET_VALUE(vt_temp_value, 0.011, 0.02, 0, 4);
 80099f0:	4b6b      	ldr	r3, [pc, #428]	@ (8009ba0 <mode_ctr+0x288>)
 80099f2:	881b      	ldrh	r3, [r3, #0]
 80099f4:	4618      	mov	r0, r3
 80099f6:	f7f6 fd7d 	bl	80004f4 <__aeabi_ui2d>
 80099fa:	4602      	mov	r2, r0
 80099fc:	460b      	mov	r3, r1
 80099fe:	2004      	movs	r0, #4
 8009a00:	ed9f 3b53 	vldr	d3, [pc, #332]	@ 8009b50 <mode_ctr+0x238>
 8009a04:	ed9f 2b58 	vldr	d2, [pc, #352]	@ 8009b68 <mode_ctr+0x250>
 8009a08:	ed9f 1b59 	vldr	d1, [pc, #356]	@ 8009b70 <mode_ctr+0x258>
 8009a0c:	ec43 2b10 	vmov	d0, r2, r3
 8009a10:	f7fb f9e6 	bl	8004de0 <PID_FLOW_SET_VALUE>
				}
				if ((vt_temp_value >= 751) && (vt_temp_value <= 870)){
 8009a14:	4b62      	ldr	r3, [pc, #392]	@ (8009ba0 <mode_ctr+0x288>)
 8009a16:	881b      	ldrh	r3, [r3, #0]
 8009a18:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d917      	bls.n	8009a50 <mode_ctr+0x138>
 8009a20:	4b5f      	ldr	r3, [pc, #380]	@ (8009ba0 <mode_ctr+0x288>)
 8009a22:	881b      	ldrh	r3, [r3, #0]
 8009a24:	f240 3266 	movw	r2, #870	@ 0x366
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d811      	bhi.n	8009a50 <mode_ctr+0x138>
					PID_FLOW_SET_VALUE(vt_temp_value, 0.011, 0.02, 0, 4);
 8009a2c:	4b5c      	ldr	r3, [pc, #368]	@ (8009ba0 <mode_ctr+0x288>)
 8009a2e:	881b      	ldrh	r3, [r3, #0]
 8009a30:	4618      	mov	r0, r3
 8009a32:	f7f6 fd5f 	bl	80004f4 <__aeabi_ui2d>
 8009a36:	4602      	mov	r2, r0
 8009a38:	460b      	mov	r3, r1
 8009a3a:	2004      	movs	r0, #4
 8009a3c:	ed9f 3b44 	vldr	d3, [pc, #272]	@ 8009b50 <mode_ctr+0x238>
 8009a40:	ed9f 2b49 	vldr	d2, [pc, #292]	@ 8009b68 <mode_ctr+0x250>
 8009a44:	ed9f 1b4a 	vldr	d1, [pc, #296]	@ 8009b70 <mode_ctr+0x258>
 8009a48:	ec43 2b10 	vmov	d0, r2, r3
 8009a4c:	f7fb f9c8 	bl	8004de0 <PID_FLOW_SET_VALUE>
				}
				if((vt_temp_value >= 871) && (vt_temp_value <= 1080)){
 8009a50:	4b53      	ldr	r3, [pc, #332]	@ (8009ba0 <mode_ctr+0x288>)
 8009a52:	881b      	ldrh	r3, [r3, #0]
 8009a54:	f240 3266 	movw	r2, #870	@ 0x366
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d916      	bls.n	8009a8a <mode_ctr+0x172>
 8009a5c:	4b50      	ldr	r3, [pc, #320]	@ (8009ba0 <mode_ctr+0x288>)
 8009a5e:	881b      	ldrh	r3, [r3, #0]
 8009a60:	f5b3 6f87 	cmp.w	r3, #1080	@ 0x438
 8009a64:	d811      	bhi.n	8009a8a <mode_ctr+0x172>
					PID_FLOW_SET_VALUE(vt_temp_value, 0.01, 0.01, 0, 4);
 8009a66:	4b4e      	ldr	r3, [pc, #312]	@ (8009ba0 <mode_ctr+0x288>)
 8009a68:	881b      	ldrh	r3, [r3, #0]
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7f6 fd42 	bl	80004f4 <__aeabi_ui2d>
 8009a70:	4602      	mov	r2, r0
 8009a72:	460b      	mov	r3, r1
 8009a74:	2004      	movs	r0, #4
 8009a76:	ed9f 3b36 	vldr	d3, [pc, #216]	@ 8009b50 <mode_ctr+0x238>
 8009a7a:	ed9f 2b3f 	vldr	d2, [pc, #252]	@ 8009b78 <mode_ctr+0x260>
 8009a7e:	ed9f 1b3e 	vldr	d1, [pc, #248]	@ 8009b78 <mode_ctr+0x260>
 8009a82:	ec43 2b10 	vmov	d0, r2, r3
 8009a86:	f7fb f9ab 	bl	8004de0 <PID_FLOW_SET_VALUE>
				}
				if((vt_temp_value >= 1081) && (vt_temp_value <= 1500)){
 8009a8a:	4b45      	ldr	r3, [pc, #276]	@ (8009ba0 <mode_ctr+0x288>)
 8009a8c:	881b      	ldrh	r3, [r3, #0]
 8009a8e:	f5b3 6f87 	cmp.w	r3, #1080	@ 0x438
 8009a92:	d917      	bls.n	8009ac4 <mode_ctr+0x1ac>
 8009a94:	4b42      	ldr	r3, [pc, #264]	@ (8009ba0 <mode_ctr+0x288>)
 8009a96:	881b      	ldrh	r3, [r3, #0]
 8009a98:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d811      	bhi.n	8009ac4 <mode_ctr+0x1ac>
					PID_FLOW_SET_VALUE(vt_temp_value, 0.001, 0.002, 0, 4);
 8009aa0:	4b3f      	ldr	r3, [pc, #252]	@ (8009ba0 <mode_ctr+0x288>)
 8009aa2:	881b      	ldrh	r3, [r3, #0]
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f7f6 fd25 	bl	80004f4 <__aeabi_ui2d>
 8009aaa:	4602      	mov	r2, r0
 8009aac:	460b      	mov	r3, r1
 8009aae:	2004      	movs	r0, #4
 8009ab0:	ed9f 3b27 	vldr	d3, [pc, #156]	@ 8009b50 <mode_ctr+0x238>
 8009ab4:	ed9f 2b32 	vldr	d2, [pc, #200]	@ 8009b80 <mode_ctr+0x268>
 8009ab8:	ed9f 1b33 	vldr	d1, [pc, #204]	@ 8009b88 <mode_ctr+0x270>
 8009abc:	ec43 2b10 	vmov	d0, r2, r3
 8009ac0:	f7fb f98e 	bl	8004de0 <PID_FLOW_SET_VALUE>
				//					PID_FLOW_SET_VALUE(user1_flow, 2.0, 2.0, 0, 5);
				//				}
				//				if(vt_value > 100){
				//				PID_FLOW_SET_VALUE(user_flowe, 0.4, 0.1, 0, 5);
				//				}
				PID_VALUE_SET_FLAG = 0;
 8009ac4:	4b35      	ldr	r3, [pc, #212]	@ (8009b9c <mode_ctr+0x284>)
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	701a      	strb	r2, [r3, #0]
			}
			VCV_MODE();
 8009aca:	f7fa fad5 	bl	8004078 <VCV_MODE>
 8009ace:	e18f      	b.n	8009df0 <mode_ctr+0x4d8>
		}
		else if (PCV_FLAG == 1) {
 8009ad0:	4b34      	ldr	r3, [pc, #208]	@ (8009ba4 <mode_ctr+0x28c>)
 8009ad2:	781b      	ldrb	r3, [r3, #0]
 8009ad4:	b2db      	uxtb	r3, r3
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d06a      	beq.n	8009bb0 <mode_ctr+0x298>
			//			PID_VALUE_SET_FLAG = 1;
			if ((RR_temp_value >= 5) && (RR_temp_value < 12)) {
 8009ada:	4b33      	ldr	r3, [pc, #204]	@ (8009ba8 <mode_ctr+0x290>)
 8009adc:	781b      	ldrb	r3, [r3, #0]
 8009ade:	2b04      	cmp	r3, #4
 8009ae0:	d916      	bls.n	8009b10 <mode_ctr+0x1f8>
 8009ae2:	4b31      	ldr	r3, [pc, #196]	@ (8009ba8 <mode_ctr+0x290>)
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	2b0b      	cmp	r3, #11
 8009ae8:	d812      	bhi.n	8009b10 <mode_ctr+0x1f8>
				PID_FLOW_SET_VALUE(PLR_temp_value, 0.1, 0.1, 0, 5);
 8009aea:	4b30      	ldr	r3, [pc, #192]	@ (8009bac <mode_ctr+0x294>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	4618      	mov	r0, r3
 8009af0:	f7f6 fd10 	bl	8000514 <__aeabi_i2d>
 8009af4:	4602      	mov	r2, r0
 8009af6:	460b      	mov	r3, r1
 8009af8:	2005      	movs	r0, #5
 8009afa:	ed9f 3b15 	vldr	d3, [pc, #84]	@ 8009b50 <mode_ctr+0x238>
 8009afe:	ed9f 2b24 	vldr	d2, [pc, #144]	@ 8009b90 <mode_ctr+0x278>
 8009b02:	ed9f 1b23 	vldr	d1, [pc, #140]	@ 8009b90 <mode_ctr+0x278>
 8009b06:	ec43 2b10 	vmov	d0, r2, r3
 8009b0a:	f7fb f969 	bl	8004de0 <PID_FLOW_SET_VALUE>
 8009b0e:	e019      	b.n	8009b44 <mode_ctr+0x22c>
			} else if ((RR_temp_value >= 12) && (RR_temp_value <= 30)) {
 8009b10:	4b25      	ldr	r3, [pc, #148]	@ (8009ba8 <mode_ctr+0x290>)
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	2b0b      	cmp	r3, #11
 8009b16:	d915      	bls.n	8009b44 <mode_ctr+0x22c>
 8009b18:	4b23      	ldr	r3, [pc, #140]	@ (8009ba8 <mode_ctr+0x290>)
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	2b1e      	cmp	r3, #30
 8009b1e:	d811      	bhi.n	8009b44 <mode_ctr+0x22c>
				PID_FLOW_SET_VALUE(PLR_temp_value, 0.1, 0.1, 0, 5);
 8009b20:	4b22      	ldr	r3, [pc, #136]	@ (8009bac <mode_ctr+0x294>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4618      	mov	r0, r3
 8009b26:	f7f6 fcf5 	bl	8000514 <__aeabi_i2d>
 8009b2a:	4602      	mov	r2, r0
 8009b2c:	460b      	mov	r3, r1
 8009b2e:	2005      	movs	r0, #5
 8009b30:	ed9f 3b07 	vldr	d3, [pc, #28]	@ 8009b50 <mode_ctr+0x238>
 8009b34:	ed9f 2b16 	vldr	d2, [pc, #88]	@ 8009b90 <mode_ctr+0x278>
 8009b38:	ed9f 1b15 	vldr	d1, [pc, #84]	@ 8009b90 <mode_ctr+0x278>
 8009b3c:	ec43 2b10 	vmov	d0, r2, r3
 8009b40:	f7fb f94e 	bl	8004de0 <PID_FLOW_SET_VALUE>
			}
			PCV_MODE();
 8009b44:	f7fa fc42 	bl	80043cc <PCV_MODE>
 8009b48:	e152      	b.n	8009df0 <mode_ctr+0x4d8>
 8009b4a:	bf00      	nop
 8009b4c:	f3af 8000 	nop.w
	...
 8009b58:	8d4fdf3b 	.word	0x8d4fdf3b
 8009b5c:	3f926e97 	.word	0x3f926e97
 8009b60:	eb851eb8 	.word	0xeb851eb8
 8009b64:	3f9eb851 	.word	0x3f9eb851
 8009b68:	47ae147b 	.word	0x47ae147b
 8009b6c:	3f947ae1 	.word	0x3f947ae1
 8009b70:	020c49ba 	.word	0x020c49ba
 8009b74:	3f86872b 	.word	0x3f86872b
 8009b78:	47ae147b 	.word	0x47ae147b
 8009b7c:	3f847ae1 	.word	0x3f847ae1
 8009b80:	d2f1a9fc 	.word	0xd2f1a9fc
 8009b84:	3f60624d 	.word	0x3f60624d
 8009b88:	d2f1a9fc 	.word	0xd2f1a9fc
 8009b8c:	3f50624d 	.word	0x3f50624d
 8009b90:	9999999a 	.word	0x9999999a
 8009b94:	3fb99999 	.word	0x3fb99999
 8009b98:	200019ab 	.word	0x200019ab
 8009b9c:	20001415 	.word	0x20001415
 8009ba0:	20000044 	.word	0x20000044
 8009ba4:	200019ac 	.word	0x200019ac
 8009ba8:	2000004c 	.word	0x2000004c
 8009bac:	20000048 	.word	0x20000048
		}
		else if (SIMV_FLAG == 1){
 8009bb0:	4ba1      	ldr	r3, [pc, #644]	@ (8009e38 <mode_ctr+0x520>)
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	b2db      	uxtb	r3, r3
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	f000 80c2 	beq.w	8009d40 <mode_ctr+0x428>
			//			Mandatory_FLAG = 1;
			if (Mandatory_FLAG == 1){
 8009bbc:	4b9f      	ldr	r3, [pc, #636]	@ (8009e3c <mode_ctr+0x524>)
 8009bbe:	781b      	ldrb	r3, [r3, #0]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	f000 80b0 	beq.w	8009d26 <mode_ctr+0x40e>
				PID_VALUE_SET_FLAG = 1;
 8009bc6:	4b9e      	ldr	r3, [pc, #632]	@ (8009e40 <mode_ctr+0x528>)
 8009bc8:	2201      	movs	r2, #1
 8009bca:	701a      	strb	r2, [r3, #0]
				if(PID_VALUE_SET_FLAG == 1){
 8009bcc:	4b9c      	ldr	r3, [pc, #624]	@ (8009e40 <mode_ctr+0x528>)
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	f000 80a5 	beq.w	8009d20 <mode_ctr+0x408>
					if ((vt_temp_value >= 0) && (vt_temp_value <=180)){
 8009bd6:	4b9b      	ldr	r3, [pc, #620]	@ (8009e44 <mode_ctr+0x52c>)
 8009bd8:	881b      	ldrh	r3, [r3, #0]
 8009bda:	2bb4      	cmp	r3, #180	@ 0xb4
 8009bdc:	d811      	bhi.n	8009c02 <mode_ctr+0x2ea>
						PID_FLOW_SET_VALUE(vt_temp_value, 0.03, 0.018, 0, 4);
 8009bde:	4b99      	ldr	r3, [pc, #612]	@ (8009e44 <mode_ctr+0x52c>)
 8009be0:	881b      	ldrh	r3, [r3, #0]
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7f6 fc86 	bl	80004f4 <__aeabi_ui2d>
 8009be8:	4602      	mov	r2, r0
 8009bea:	460b      	mov	r3, r1
 8009bec:	2004      	movs	r0, #4
 8009bee:	ed9f 3b82 	vldr	d3, [pc, #520]	@ 8009df8 <mode_ctr+0x4e0>
 8009bf2:	ed9f 2b83 	vldr	d2, [pc, #524]	@ 8009e00 <mode_ctr+0x4e8>
 8009bf6:	ed9f 1b84 	vldr	d1, [pc, #528]	@ 8009e08 <mode_ctr+0x4f0>
 8009bfa:	ec43 2b10 	vmov	d0, r2, r3
 8009bfe:	f7fb f8ef 	bl	8004de0 <PID_FLOW_SET_VALUE>
					}
					if ((vt_temp_value >= 181) && (vt_temp_value <=399)){
 8009c02:	4b90      	ldr	r3, [pc, #576]	@ (8009e44 <mode_ctr+0x52c>)
 8009c04:	881b      	ldrh	r3, [r3, #0]
 8009c06:	2bb4      	cmp	r3, #180	@ 0xb4
 8009c08:	d916      	bls.n	8009c38 <mode_ctr+0x320>
 8009c0a:	4b8e      	ldr	r3, [pc, #568]	@ (8009e44 <mode_ctr+0x52c>)
 8009c0c:	881b      	ldrh	r3, [r3, #0]
 8009c0e:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8009c12:	d211      	bcs.n	8009c38 <mode_ctr+0x320>
						PID_FLOW_SET_VALUE(vt_temp_value, 0.015, 0.05, 0, 4);
 8009c14:	4b8b      	ldr	r3, [pc, #556]	@ (8009e44 <mode_ctr+0x52c>)
 8009c16:	881b      	ldrh	r3, [r3, #0]
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f7f6 fc6b 	bl	80004f4 <__aeabi_ui2d>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	460b      	mov	r3, r1
 8009c22:	2004      	movs	r0, #4
 8009c24:	ed9f 3b74 	vldr	d3, [pc, #464]	@ 8009df8 <mode_ctr+0x4e0>
 8009c28:	ed9f 2b79 	vldr	d2, [pc, #484]	@ 8009e10 <mode_ctr+0x4f8>
 8009c2c:	ed9f 1b7a 	vldr	d1, [pc, #488]	@ 8009e18 <mode_ctr+0x500>
 8009c30:	ec43 2b10 	vmov	d0, r2, r3
 8009c34:	f7fb f8d4 	bl	8004de0 <PID_FLOW_SET_VALUE>
					}
					if ((vt_temp_value >= 400) && (vt_temp_value <=650)){
 8009c38:	4b82      	ldr	r3, [pc, #520]	@ (8009e44 <mode_ctr+0x52c>)
 8009c3a:	881b      	ldrh	r3, [r3, #0]
 8009c3c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8009c40:	d317      	bcc.n	8009c72 <mode_ctr+0x35a>
 8009c42:	4b80      	ldr	r3, [pc, #512]	@ (8009e44 <mode_ctr+0x52c>)
 8009c44:	881b      	ldrh	r3, [r3, #0]
 8009c46:	f240 228a 	movw	r2, #650	@ 0x28a
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d811      	bhi.n	8009c72 <mode_ctr+0x35a>
						PID_FLOW_SET_VALUE(vt_temp_value, 0.015, 0.05, 0, 4);
 8009c4e:	4b7d      	ldr	r3, [pc, #500]	@ (8009e44 <mode_ctr+0x52c>)
 8009c50:	881b      	ldrh	r3, [r3, #0]
 8009c52:	4618      	mov	r0, r3
 8009c54:	f7f6 fc4e 	bl	80004f4 <__aeabi_ui2d>
 8009c58:	4602      	mov	r2, r0
 8009c5a:	460b      	mov	r3, r1
 8009c5c:	2004      	movs	r0, #4
 8009c5e:	ed9f 3b66 	vldr	d3, [pc, #408]	@ 8009df8 <mode_ctr+0x4e0>
 8009c62:	ed9f 2b6b 	vldr	d2, [pc, #428]	@ 8009e10 <mode_ctr+0x4f8>
 8009c66:	ed9f 1b6c 	vldr	d1, [pc, #432]	@ 8009e18 <mode_ctr+0x500>
 8009c6a:	ec43 2b10 	vmov	d0, r2, r3
 8009c6e:	f7fb f8b7 	bl	8004de0 <PID_FLOW_SET_VALUE>
					}
					if ((vt_temp_value >= 651) && (vt_temp_value <=750)){
 8009c72:	4b74      	ldr	r3, [pc, #464]	@ (8009e44 <mode_ctr+0x52c>)
 8009c74:	881b      	ldrh	r3, [r3, #0]
 8009c76:	f240 228a 	movw	r2, #650	@ 0x28a
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d917      	bls.n	8009cae <mode_ctr+0x396>
 8009c7e:	4b71      	ldr	r3, [pc, #452]	@ (8009e44 <mode_ctr+0x52c>)
 8009c80:	881b      	ldrh	r3, [r3, #0]
 8009c82:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d811      	bhi.n	8009cae <mode_ctr+0x396>
						PID_FLOW_SET_VALUE(vt_temp_value, 0.015, 0.073, 0.001, 4);
 8009c8a:	4b6e      	ldr	r3, [pc, #440]	@ (8009e44 <mode_ctr+0x52c>)
 8009c8c:	881b      	ldrh	r3, [r3, #0]
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f7f6 fc30 	bl	80004f4 <__aeabi_ui2d>
 8009c94:	4602      	mov	r2, r0
 8009c96:	460b      	mov	r3, r1
 8009c98:	2004      	movs	r0, #4
 8009c9a:	ed9f 3b61 	vldr	d3, [pc, #388]	@ 8009e20 <mode_ctr+0x508>
 8009c9e:	ed9f 2b62 	vldr	d2, [pc, #392]	@ 8009e28 <mode_ctr+0x510>
 8009ca2:	ed9f 1b5d 	vldr	d1, [pc, #372]	@ 8009e18 <mode_ctr+0x500>
 8009ca6:	ec43 2b10 	vmov	d0, r2, r3
 8009caa:	f7fb f899 	bl	8004de0 <PID_FLOW_SET_VALUE>
					}
					if ((vt_temp_value >= 751) && (vt_temp_value <= 870)){
 8009cae:	4b65      	ldr	r3, [pc, #404]	@ (8009e44 <mode_ctr+0x52c>)
 8009cb0:	881b      	ldrh	r3, [r3, #0]
 8009cb2:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d917      	bls.n	8009cea <mode_ctr+0x3d2>
 8009cba:	4b62      	ldr	r3, [pc, #392]	@ (8009e44 <mode_ctr+0x52c>)
 8009cbc:	881b      	ldrh	r3, [r3, #0]
 8009cbe:	f240 3266 	movw	r2, #870	@ 0x366
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d811      	bhi.n	8009cea <mode_ctr+0x3d2>
						PID_FLOW_SET_VALUE(vt_temp_value, 0.015, 0.073, 0.001, 4);
 8009cc6:	4b5f      	ldr	r3, [pc, #380]	@ (8009e44 <mode_ctr+0x52c>)
 8009cc8:	881b      	ldrh	r3, [r3, #0]
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f7f6 fc12 	bl	80004f4 <__aeabi_ui2d>
 8009cd0:	4602      	mov	r2, r0
 8009cd2:	460b      	mov	r3, r1
 8009cd4:	2004      	movs	r0, #4
 8009cd6:	ed9f 3b52 	vldr	d3, [pc, #328]	@ 8009e20 <mode_ctr+0x508>
 8009cda:	ed9f 2b53 	vldr	d2, [pc, #332]	@ 8009e28 <mode_ctr+0x510>
 8009cde:	ed9f 1b4e 	vldr	d1, [pc, #312]	@ 8009e18 <mode_ctr+0x500>
 8009ce2:	ec43 2b10 	vmov	d0, r2, r3
 8009ce6:	f7fb f87b 	bl	8004de0 <PID_FLOW_SET_VALUE>
					}
					if(vt_temp_value >= 871){
 8009cea:	4b56      	ldr	r3, [pc, #344]	@ (8009e44 <mode_ctr+0x52c>)
 8009cec:	881b      	ldrh	r3, [r3, #0]
 8009cee:	f240 3266 	movw	r2, #870	@ 0x366
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d911      	bls.n	8009d1a <mode_ctr+0x402>
						PID_FLOW_SET_VALUE(vt_temp_value, 0.01, 0.01, 0, 4);
 8009cf6:	4b53      	ldr	r3, [pc, #332]	@ (8009e44 <mode_ctr+0x52c>)
 8009cf8:	881b      	ldrh	r3, [r3, #0]
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f7f6 fbfa 	bl	80004f4 <__aeabi_ui2d>
 8009d00:	4602      	mov	r2, r0
 8009d02:	460b      	mov	r3, r1
 8009d04:	2004      	movs	r0, #4
 8009d06:	ed9f 3b3c 	vldr	d3, [pc, #240]	@ 8009df8 <mode_ctr+0x4e0>
 8009d0a:	ed9f 2b49 	vldr	d2, [pc, #292]	@ 8009e30 <mode_ctr+0x518>
 8009d0e:	ed9f 1b48 	vldr	d1, [pc, #288]	@ 8009e30 <mode_ctr+0x518>
 8009d12:	ec43 2b10 	vmov	d0, r2, r3
 8009d16:	f7fb f863 	bl	8004de0 <PID_FLOW_SET_VALUE>
					}
					PID_VALUE_SET_FLAG = 0;
 8009d1a:	4b49      	ldr	r3, [pc, #292]	@ (8009e40 <mode_ctr+0x528>)
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	701a      	strb	r2, [r3, #0]
				}
				SIMV_MODE();
 8009d20:	f7fa feae 	bl	8004a80 <SIMV_MODE>
 8009d24:	e064      	b.n	8009df0 <mode_ctr+0x4d8>
			}
			else if(Mandatory_FLAG == 0){
 8009d26:	4b45      	ldr	r3, [pc, #276]	@ (8009e3c <mode_ctr+0x524>)
 8009d28:	781b      	ldrb	r3, [r3, #0]
 8009d2a:	f083 0301 	eor.w	r3, r3, #1
 8009d2e:	b2db      	uxtb	r3, r3
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d05d      	beq.n	8009df0 <mode_ctr+0x4d8>
				Spontaneous_FLAG = 1;
 8009d34:	4b44      	ldr	r3, [pc, #272]	@ (8009e48 <mode_ctr+0x530>)
 8009d36:	2201      	movs	r2, #1
 8009d38:	701a      	strb	r2, [r3, #0]
				SIMV_MODE();
 8009d3a:	f7fa fea1 	bl	8004a80 <SIMV_MODE>
 8009d3e:	e057      	b.n	8009df0 <mode_ctr+0x4d8>
			}
			//			SIMV_MODE();
			//			Mandatory_MODE();
		}
		else if (PSV_FLAG == 1) {
 8009d40:	4b42      	ldr	r3, [pc, #264]	@ (8009e4c <mode_ctr+0x534>)
 8009d42:	781b      	ldrb	r3, [r3, #0]
 8009d44:	b2db      	uxtb	r3, r3
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d005      	beq.n	8009d56 <mode_ctr+0x43e>
			PID_VALUE_SET_FLAG = 1;
 8009d4a:	4b3d      	ldr	r3, [pc, #244]	@ (8009e40 <mode_ctr+0x528>)
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	701a      	strb	r2, [r3, #0]
			PSV_MODE();
 8009d50:	f7fa fdc6 	bl	80048e0 <PSV_MODE>
 8009d54:	e04c      	b.n	8009df0 <mode_ctr+0x4d8>
		}

		else if (CLT_FLAG == 1) {
 8009d56:	4b3e      	ldr	r3, [pc, #248]	@ (8009e50 <mode_ctr+0x538>)
 8009d58:	781b      	ldrb	r3, [r3, #0]
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d116      	bne.n	8009d8c <mode_ctr+0x474>
			mbar = 0;
 8009d5e:	4b3d      	ldr	r3, [pc, #244]	@ (8009e54 <mode_ctr+0x53c>)
 8009d60:	f04f 0200 	mov.w	r2, #0
 8009d64:	601a      	str	r2, [r3, #0]
			previous_pressure_first = 0;
 8009d66:	4b3c      	ldr	r3, [pc, #240]	@ (8009e58 <mode_ctr+0x540>)
 8009d68:	2200      	movs	r2, #0
 8009d6a:	701a      	strb	r2, [r3, #0]
			PIDOut = 0;
 8009d6c:	493b      	ldr	r1, [pc, #236]	@ (8009e5c <mode_ctr+0x544>)
 8009d6e:	f04f 0200 	mov.w	r2, #0
 8009d72:	f04f 0300 	mov.w	r3, #0
 8009d76:	e9c1 2300 	strd	r2, r3, [r1]
			PID_VALUE_SET_FLAG = 1;
 8009d7a:	4b31      	ldr	r3, [pc, #196]	@ (8009e40 <mode_ctr+0x528>)
 8009d7c:	2201      	movs	r2, #1
 8009d7e:	701a      	strb	r2, [r3, #0]
			osDelay(200);
 8009d80:	20c8      	movs	r0, #200	@ 0xc8
 8009d82:	f008 fb1a 	bl	80123ba <osDelay>
			CLT_MODE();
 8009d86:	f7fa ff13 	bl	8004bb0 <CLT_MODE>
 8009d8a:	e031      	b.n	8009df0 <mode_ctr+0x4d8>
		//		else if ((PSV_FLAG == 1) && (SIMV_FLAG == 1)){
		//			PID_VALUE_SET_FLAG = 1;
		//			PSV_MODE();
		//			PSV_FLAG = 0;
		//		}
		else if (BAG_FLAG == 1) {
 8009d8c:	4b34      	ldr	r3, [pc, #208]	@ (8009e60 <mode_ctr+0x548>)
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	b2db      	uxtb	r3, r3
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d02c      	beq.n	8009df0 <mode_ctr+0x4d8>
			static int count = 0;
			if(count++ == 0){
 8009d96:	4b33      	ldr	r3, [pc, #204]	@ (8009e64 <mode_ctr+0x54c>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	1c5a      	adds	r2, r3, #1
 8009d9c:	4931      	ldr	r1, [pc, #196]	@ (8009e64 <mode_ctr+0x54c>)
 8009d9e:	600a      	str	r2, [r1, #0]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d123      	bne.n	8009dec <mode_ctr+0x4d4>
				Temp = 0;
 8009da4:	4930      	ldr	r1, [pc, #192]	@ (8009e68 <mode_ctr+0x550>)
 8009da6:	f04f 0200 	mov.w	r2, #0
 8009daa:	f04f 0300 	mov.w	r3, #0
 8009dae:	e9c1 2300 	strd	r2, r3, [r1]
				PIDOut = 0;
 8009db2:	492a      	ldr	r1, [pc, #168]	@ (8009e5c <mode_ctr+0x544>)
 8009db4:	f04f 0200 	mov.w	r2, #0
 8009db8:	f04f 0300 	mov.w	r3, #0
 8009dbc:	e9c1 2300 	strd	r2, r3, [r1]
				VT_UPDATE_FLAG = 0;
 8009dc0:	4b2a      	ldr	r3, [pc, #168]	@ (8009e6c <mode_ctr+0x554>)
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009dcc:	4828      	ldr	r0, [pc, #160]	@ (8009e70 <mode_ctr+0x558>)
 8009dce:	f003 ff33 	bl	800dc38 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009dd8:	4825      	ldr	r0, [pc, #148]	@ (8009e70 <mode_ctr+0x558>)
 8009dda:	f003 ff2d 	bl	800dc38 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8009dde:	4b25      	ldr	r3, [pc, #148]	@ (8009e74 <mode_ctr+0x55c>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	2200      	movs	r2, #0
 8009de4:	635a      	str	r2, [r3, #52]	@ 0x34
				//				reset_variables();
				osDelay(200);
 8009de6:	20c8      	movs	r0, #200	@ 0xc8
 8009de8:	f008 fae7 	bl	80123ba <osDelay>
			}

			//			PID_VALUE_SET_FLAG = 1;
			BAG_MODE();
 8009dec:	f7fa ffaa 	bl	8004d44 <BAG_MODE>
		}

		vTaskDelay(pdMS_TO_TICKS(50));
 8009df0:	2032      	movs	r0, #50	@ 0x32
 8009df2:	f009 fb73 	bl	80134dc <vTaskDelay>
		if (VCV_FLAG == 1) {
 8009df6:	e593      	b.n	8009920 <mode_ctr+0x8>
	...
 8009e00:	8d4fdf3b 	.word	0x8d4fdf3b
 8009e04:	3f926e97 	.word	0x3f926e97
 8009e08:	eb851eb8 	.word	0xeb851eb8
 8009e0c:	3f9eb851 	.word	0x3f9eb851
 8009e10:	9999999a 	.word	0x9999999a
 8009e14:	3fa99999 	.word	0x3fa99999
 8009e18:	eb851eb8 	.word	0xeb851eb8
 8009e1c:	3f8eb851 	.word	0x3f8eb851
 8009e20:	d2f1a9fc 	.word	0xd2f1a9fc
 8009e24:	3f50624d 	.word	0x3f50624d
 8009e28:	c49ba5e3 	.word	0xc49ba5e3
 8009e2c:	3fb2b020 	.word	0x3fb2b020
 8009e30:	47ae147b 	.word	0x47ae147b
 8009e34:	3f847ae1 	.word	0x3f847ae1
 8009e38:	200019a8 	.word	0x200019a8
 8009e3c:	200019b0 	.word	0x200019b0
 8009e40:	20001415 	.word	0x20001415
 8009e44:	20000044 	.word	0x20000044
 8009e48:	200019b1 	.word	0x200019b1
 8009e4c:	200019aa 	.word	0x200019aa
 8009e50:	200019af 	.word	0x200019af
 8009e54:	2000136c 	.word	0x2000136c
 8009e58:	20001b28 	.word	0x20001b28
 8009e5c:	20001428 	.word	0x20001428
 8009e60:	200019ad 	.word	0x200019ad
 8009e64:	20001b68 	.word	0x20001b68
 8009e68:	20000020 	.word	0x20000020
 8009e6c:	20001414 	.word	0x20001414
 8009e70:	40021000 	.word	0x40021000
 8009e74:	20000f40 	.word	0x20000f40

08009e78 <Icon>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Icon */
void Icon(void const * argument)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Icon */
	muteUnmute_icon_change(0x4C);
 8009e80:	204c      	movs	r0, #76	@ 0x4c
 8009e82:	f7f9 fd23 	bl	80038cc <muteUnmute_icon_change>
	modes_icon_change(0x3A);
 8009e86:	203a      	movs	r0, #58	@ 0x3a
 8009e88:	f7f9 fce4 	bl	8003854 <modes_icon_change>
	play_icon_change(0x69);
 8009e8c:	2069      	movs	r0, #105	@ 0x69
 8009e8e:	f7f9 fdfd 	bl	8003a8c <play_icon_change>
	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8009e92:	2200      	movs	r2, #0
 8009e94:	2102      	movs	r1, #2
 8009e96:	4878      	ldr	r0, [pc, #480]	@ (800a078 <Icon+0x200>)
 8009e98:	f003 fece 	bl	800dc38 <HAL_GPIO_WritePin>
		if (pressure_adc<16550){
 8009e9c:	4b77      	ldr	r3, [pc, #476]	@ (800a07c <Icon+0x204>)
 8009e9e:	881b      	ldrh	r3, [r3, #0]
 8009ea0:	f244 02a5 	movw	r2, #16549	@ 0x40a5
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d817      	bhi.n	8009ed8 <Icon+0x60>
			update_flag = 1;
 8009ea8:	4b75      	ldr	r3, [pc, #468]	@ (800a080 <Icon+0x208>)
 8009eaa:	2201      	movs	r2, #1
 8009eac:	701a      	strb	r2, [r3, #0]
			if (update_flag == 1 ){
 8009eae:	4b74      	ldr	r3, [pc, #464]	@ (800a080 <Icon+0x208>)
 8009eb0:	781b      	ldrb	r3, [r3, #0]
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d110      	bne.n	8009ed8 <Icon+0x60>
				storevalue = pressure_adc;
 8009eb6:	4b71      	ldr	r3, [pc, #452]	@ (800a07c <Icon+0x204>)
 8009eb8:	881b      	ldrh	r3, [r3, #0]
 8009eba:	b2da      	uxtb	r2, r3
 8009ebc:	4b71      	ldr	r3, [pc, #452]	@ (800a084 <Icon+0x20c>)
 8009ebe:	701a      	strb	r2, [r3, #0]
				storevalue1 = storevalue - pressure_adc;
 8009ec0:	4b70      	ldr	r3, [pc, #448]	@ (800a084 <Icon+0x20c>)
 8009ec2:	781a      	ldrb	r2, [r3, #0]
 8009ec4:	4b6d      	ldr	r3, [pc, #436]	@ (800a07c <Icon+0x204>)
 8009ec6:	881b      	ldrh	r3, [r3, #0]
 8009ec8:	b2db      	uxtb	r3, r3
 8009eca:	1ad3      	subs	r3, r2, r3
 8009ecc:	b2da      	uxtb	r2, r3
 8009ece:	4b6e      	ldr	r3, [pc, #440]	@ (800a088 <Icon+0x210>)
 8009ed0:	701a      	strb	r2, [r3, #0]
				update_flag = 0;
 8009ed2:	4b6b      	ldr	r3, [pc, #428]	@ (800a080 <Icon+0x208>)
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	701a      	strb	r2, [r3, #0]
			}
		}
		if(((previous_pressure_first<P_peak_alarm_min_value)||(previous_pressure_first>P_peak_alarm_max_value))||
 8009ed8:	4b6c      	ldr	r3, [pc, #432]	@ (800a08c <Icon+0x214>)
 8009eda:	781a      	ldrb	r2, [r3, #0]
 8009edc:	4b6c      	ldr	r3, [pc, #432]	@ (800a090 <Icon+0x218>)
 8009ede:	781b      	ldrb	r3, [r3, #0]
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d35e      	bcc.n	8009fa2 <Icon+0x12a>
 8009ee4:	4b69      	ldr	r3, [pc, #420]	@ (800a08c <Icon+0x214>)
 8009ee6:	781a      	ldrb	r2, [r3, #0]
 8009ee8:	4b6a      	ldr	r3, [pc, #424]	@ (800a094 <Icon+0x21c>)
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d858      	bhi.n	8009fa2 <Icon+0x12a>
				((MV_value_var < MV_alarm_min_value) || (MV_value_var > MV_alarm_max_value))||
 8009ef0:	4b69      	ldr	r3, [pc, #420]	@ (800a098 <Icon+0x220>)
 8009ef2:	781b      	ldrb	r3, [r3, #0]
 8009ef4:	ee07 3a90 	vmov	s15, r3
 8009ef8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009efc:	4b67      	ldr	r3, [pc, #412]	@ (800a09c <Icon+0x224>)
 8009efe:	edd3 7a00 	vldr	s15, [r3]
		if(((previous_pressure_first<P_peak_alarm_min_value)||(previous_pressure_first>P_peak_alarm_max_value))||
 8009f02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f0a:	dc4a      	bgt.n	8009fa2 <Icon+0x12a>
				((MV_value_var < MV_alarm_min_value) || (MV_value_var > MV_alarm_max_value))||
 8009f0c:	4b64      	ldr	r3, [pc, #400]	@ (800a0a0 <Icon+0x228>)
 8009f0e:	781b      	ldrb	r3, [r3, #0]
 8009f10:	ee07 3a90 	vmov	s15, r3
 8009f14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009f18:	4b60      	ldr	r3, [pc, #384]	@ (800a09c <Icon+0x224>)
 8009f1a:	edd3 7a00 	vldr	s15, [r3]
 8009f1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f26:	d43c      	bmi.n	8009fa2 <Icon+0x12a>
				((RR_temp_value < RR_alarm_min_value) || (RR_temp_value > RR_alarm_max_value))
 8009f28:	4b5e      	ldr	r3, [pc, #376]	@ (800a0a4 <Icon+0x22c>)
 8009f2a:	781a      	ldrb	r2, [r3, #0]
 8009f2c:	4b5e      	ldr	r3, [pc, #376]	@ (800a0a8 <Icon+0x230>)
 8009f2e:	781b      	ldrb	r3, [r3, #0]
				((MV_value_var < MV_alarm_min_value) || (MV_value_var > MV_alarm_max_value))||
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d336      	bcc.n	8009fa2 <Icon+0x12a>
				((RR_temp_value < RR_alarm_min_value) || (RR_temp_value > RR_alarm_max_value))
 8009f34:	4b5b      	ldr	r3, [pc, #364]	@ (800a0a4 <Icon+0x22c>)
 8009f36:	781a      	ldrb	r2, [r3, #0]
 8009f38:	4b5c      	ldr	r3, [pc, #368]	@ (800a0ac <Icon+0x234>)
 8009f3a:	781b      	ldrb	r3, [r3, #0]
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d830      	bhi.n	8009fa2 <Icon+0x12a>
				||(((Oxygen < O2_alarm_min_value) || (Oxygen > O2_alarm_max_value))&& (O2_flag == 0))||(pressure_adc<16550)
 8009f40:	4b5b      	ldr	r3, [pc, #364]	@ (800a0b0 <Icon+0x238>)
 8009f42:	781b      	ldrb	r3, [r3, #0]
 8009f44:	ee07 3a90 	vmov	s15, r3
 8009f48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009f4c:	4b59      	ldr	r3, [pc, #356]	@ (800a0b4 <Icon+0x23c>)
 8009f4e:	edd3 7a00 	vldr	s15, [r3]
 8009f52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f5a:	dc0d      	bgt.n	8009f78 <Icon+0x100>
 8009f5c:	4b56      	ldr	r3, [pc, #344]	@ (800a0b8 <Icon+0x240>)
 8009f5e:	781b      	ldrb	r3, [r3, #0]
 8009f60:	ee07 3a90 	vmov	s15, r3
 8009f64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009f68:	4b52      	ldr	r3, [pc, #328]	@ (800a0b4 <Icon+0x23c>)
 8009f6a:	edd3 7a00 	vldr	s15, [r3]
 8009f6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f76:	d506      	bpl.n	8009f86 <Icon+0x10e>
 8009f78:	4b50      	ldr	r3, [pc, #320]	@ (800a0bc <Icon+0x244>)
 8009f7a:	781b      	ldrb	r3, [r3, #0]
 8009f7c:	f083 0301 	eor.w	r3, r3, #1
 8009f80:	b2db      	uxtb	r3, r3
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d10d      	bne.n	8009fa2 <Icon+0x12a>
 8009f86:	4b3d      	ldr	r3, [pc, #244]	@ (800a07c <Icon+0x204>)
 8009f88:	881b      	ldrh	r3, [r3, #0]
 8009f8a:	f244 02a5 	movw	r2, #16549	@ 0x40a5
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d907      	bls.n	8009fa2 <Icon+0x12a>
				||(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13) == GPIO_PIN_RESET))
 8009f92:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8009f96:	4838      	ldr	r0, [pc, #224]	@ (800a078 <Icon+0x200>)
 8009f98:	f003 fe36 	bl	800dc08 <HAL_GPIO_ReadPin>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d103      	bne.n	8009faa <Icon+0x132>
		{
			Alarm_Condition_Flag = 1;
 8009fa2:	4b47      	ldr	r3, [pc, #284]	@ (800a0c0 <Icon+0x248>)
 8009fa4:	2201      	movs	r2, #1
 8009fa6:	701a      	strb	r2, [r3, #0]
 8009fa8:	e05a      	b.n	800a060 <Icon+0x1e8>
		}
		else if (((previous_pressure_first>P_peak_alarm_min_value)||(previous_pressure_first<P_peak_alarm_max_value))||
 8009faa:	4b38      	ldr	r3, [pc, #224]	@ (800a08c <Icon+0x214>)
 8009fac:	781a      	ldrb	r2, [r3, #0]
 8009fae:	4b38      	ldr	r3, [pc, #224]	@ (800a090 <Icon+0x218>)
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d851      	bhi.n	800a05a <Icon+0x1e2>
 8009fb6:	4b35      	ldr	r3, [pc, #212]	@ (800a08c <Icon+0x214>)
 8009fb8:	781a      	ldrb	r2, [r3, #0]
 8009fba:	4b36      	ldr	r3, [pc, #216]	@ (800a094 <Icon+0x21c>)
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	d34b      	bcc.n	800a05a <Icon+0x1e2>
				((MV_value_var > MV_alarm_min_value) || (MV_value_var < MV_alarm_max_value))||
 8009fc2:	4b35      	ldr	r3, [pc, #212]	@ (800a098 <Icon+0x220>)
 8009fc4:	781b      	ldrb	r3, [r3, #0]
 8009fc6:	ee07 3a90 	vmov	s15, r3
 8009fca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009fce:	4b33      	ldr	r3, [pc, #204]	@ (800a09c <Icon+0x224>)
 8009fd0:	edd3 7a00 	vldr	s15, [r3]
		else if (((previous_pressure_first>P_peak_alarm_min_value)||(previous_pressure_first<P_peak_alarm_max_value))||
 8009fd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fdc:	d43d      	bmi.n	800a05a <Icon+0x1e2>
				((MV_value_var > MV_alarm_min_value) || (MV_value_var < MV_alarm_max_value))||
 8009fde:	4b30      	ldr	r3, [pc, #192]	@ (800a0a0 <Icon+0x228>)
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	ee07 3a90 	vmov	s15, r3
 8009fe6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009fea:	4b2c      	ldr	r3, [pc, #176]	@ (800a09c <Icon+0x224>)
 8009fec:	edd3 7a00 	vldr	s15, [r3]
 8009ff0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ff8:	dc2f      	bgt.n	800a05a <Icon+0x1e2>
				((RR_temp_value > RR_alarm_min_value) || (RR_temp_value < RR_alarm_max_value))
 8009ffa:	4b2a      	ldr	r3, [pc, #168]	@ (800a0a4 <Icon+0x22c>)
 8009ffc:	781a      	ldrb	r2, [r3, #0]
 8009ffe:	4b2a      	ldr	r3, [pc, #168]	@ (800a0a8 <Icon+0x230>)
 800a000:	781b      	ldrb	r3, [r3, #0]
				((MV_value_var > MV_alarm_min_value) || (MV_value_var < MV_alarm_max_value))||
 800a002:	429a      	cmp	r2, r3
 800a004:	d829      	bhi.n	800a05a <Icon+0x1e2>
				((RR_temp_value > RR_alarm_min_value) || (RR_temp_value < RR_alarm_max_value))
 800a006:	4b27      	ldr	r3, [pc, #156]	@ (800a0a4 <Icon+0x22c>)
 800a008:	781a      	ldrb	r2, [r3, #0]
 800a00a:	4b28      	ldr	r3, [pc, #160]	@ (800a0ac <Icon+0x234>)
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	429a      	cmp	r2, r3
 800a010:	d323      	bcc.n	800a05a <Icon+0x1e2>
				||((Oxygen > O2_alarm_min_value) || (Oxygen < O2_alarm_max_value))||(storevalue1<0)
 800a012:	4b27      	ldr	r3, [pc, #156]	@ (800a0b0 <Icon+0x238>)
 800a014:	781b      	ldrb	r3, [r3, #0]
 800a016:	ee07 3a90 	vmov	s15, r3
 800a01a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a01e:	4b25      	ldr	r3, [pc, #148]	@ (800a0b4 <Icon+0x23c>)
 800a020:	edd3 7a00 	vldr	s15, [r3]
 800a024:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a02c:	d415      	bmi.n	800a05a <Icon+0x1e2>
 800a02e:	4b22      	ldr	r3, [pc, #136]	@ (800a0b8 <Icon+0x240>)
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	ee07 3a90 	vmov	s15, r3
 800a036:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a03a:	4b1e      	ldr	r3, [pc, #120]	@ (800a0b4 <Icon+0x23c>)
 800a03c:	edd3 7a00 	vldr	s15, [r3]
 800a040:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a048:	dc07      	bgt.n	800a05a <Icon+0x1e2>
				||(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13) == GPIO_PIN_SET))
 800a04a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800a04e:	480a      	ldr	r0, [pc, #40]	@ (800a078 <Icon+0x200>)
 800a050:	f003 fdda 	bl	800dc08 <HAL_GPIO_ReadPin>
 800a054:	4603      	mov	r3, r0
 800a056:	2b01      	cmp	r3, #1
 800a058:	d102      	bne.n	800a060 <Icon+0x1e8>
		{
			Alarm_Condition_Flag = 0;
 800a05a:	4b19      	ldr	r3, [pc, #100]	@ (800a0c0 <Icon+0x248>)
 800a05c:	2200      	movs	r2, #0
 800a05e:	701a      	strb	r2, [r3, #0]
		}
		if((Head == 0) && (Alarm_Condition_Flag == 1)){
 800a060:	4b18      	ldr	r3, [pc, #96]	@ (800a0c4 <Icon+0x24c>)
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d12f      	bne.n	800a0c8 <Icon+0x250>
 800a068:	4b15      	ldr	r3, [pc, #84]	@ (800a0c0 <Icon+0x248>)
 800a06a:	781b      	ldrb	r3, [r3, #0]
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	d12b      	bne.n	800a0c8 <Icon+0x250>
			BUZZ_PWM();
 800a070:	f7f9 ffa2 	bl	8003fb8 <BUZZ_PWM>
 800a074:	e034      	b.n	800a0e0 <Icon+0x268>
 800a076:	bf00      	nop
 800a078:	40021000 	.word	0x40021000
 800a07c:	20001344 	.word	0x20001344
 800a080:	20001346 	.word	0x20001346
 800a084:	20001347 	.word	0x20001347
 800a088:	20001348 	.word	0x20001348
 800a08c:	20001b28 	.word	0x20001b28
 800a090:	200019e4 	.word	0x200019e4
 800a094:	20000050 	.word	0x20000050
 800a098:	200019e5 	.word	0x200019e5
 800a09c:	200019e0 	.word	0x200019e0
 800a0a0:	20000051 	.word	0x20000051
 800a0a4:	2000004c 	.word	0x2000004c
 800a0a8:	2000004d 	.word	0x2000004d
 800a0ac:	20000052 	.word	0x20000052
 800a0b0:	2000004f 	.word	0x2000004f
 800a0b4:	20001928 	.word	0x20001928
 800a0b8:	20000054 	.word	0x20000054
 800a0bc:	200019d4 	.word	0x200019d4
 800a0c0:	200019e7 	.word	0x200019e7
 800a0c4:	200019e6 	.word	0x200019e6
		}
		else if((Head == 1) && (Alarm_Condition_Flag == 0)){
 800a0c8:	4ba2      	ldr	r3, [pc, #648]	@ (800a354 <Icon+0x4dc>)
 800a0ca:	781b      	ldrb	r3, [r3, #0]
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	d107      	bne.n	800a0e0 <Icon+0x268>
 800a0d0:	4ba1      	ldr	r3, [pc, #644]	@ (800a358 <Icon+0x4e0>)
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d103      	bne.n	800a0e0 <Icon+0x268>
			__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 800a0d8:	4ba0      	ldr	r3, [pc, #640]	@ (800a35c <Icon+0x4e4>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	635a      	str	r2, [r3, #52]	@ 0x34
		}

		alarm_count = 0; // Reset alarm list
 800a0e0:	4b9f      	ldr	r3, [pc, #636]	@ (800a360 <Icon+0x4e8>)
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	701a      	strb	r2, [r3, #0]

		if (previous_pressure_first > P_peak_alarm_max_value)
 800a0e6:	4b9f      	ldr	r3, [pc, #636]	@ (800a364 <Icon+0x4ec>)
 800a0e8:	781a      	ldrb	r2, [r3, #0]
 800a0ea:	4b9f      	ldr	r3, [pc, #636]	@ (800a368 <Icon+0x4f0>)
 800a0ec:	781b      	ldrb	r3, [r3, #0]
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d909      	bls.n	800a106 <Icon+0x28e>
			alarm_icons[alarm_count++] = 0x5B;
 800a0f2:	4b9b      	ldr	r3, [pc, #620]	@ (800a360 <Icon+0x4e8>)
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	1c5a      	adds	r2, r3, #1
 800a0f8:	b2d1      	uxtb	r1, r2
 800a0fa:	4a99      	ldr	r2, [pc, #612]	@ (800a360 <Icon+0x4e8>)
 800a0fc:	7011      	strb	r1, [r2, #0]
 800a0fe:	461a      	mov	r2, r3
 800a100:	4b9a      	ldr	r3, [pc, #616]	@ (800a36c <Icon+0x4f4>)
 800a102:	215b      	movs	r1, #91	@ 0x5b
 800a104:	5499      	strb	r1, [r3, r2]

		if (previous_pressure_first < P_peak_alarm_min_value)
 800a106:	4b97      	ldr	r3, [pc, #604]	@ (800a364 <Icon+0x4ec>)
 800a108:	781a      	ldrb	r2, [r3, #0]
 800a10a:	4b99      	ldr	r3, [pc, #612]	@ (800a370 <Icon+0x4f8>)
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	429a      	cmp	r2, r3
 800a110:	d209      	bcs.n	800a126 <Icon+0x2ae>
			alarm_icons[alarm_count++] = 0x5C;
 800a112:	4b93      	ldr	r3, [pc, #588]	@ (800a360 <Icon+0x4e8>)
 800a114:	781b      	ldrb	r3, [r3, #0]
 800a116:	1c5a      	adds	r2, r3, #1
 800a118:	b2d1      	uxtb	r1, r2
 800a11a:	4a91      	ldr	r2, [pc, #580]	@ (800a360 <Icon+0x4e8>)
 800a11c:	7011      	strb	r1, [r2, #0]
 800a11e:	461a      	mov	r2, r3
 800a120:	4b92      	ldr	r3, [pc, #584]	@ (800a36c <Icon+0x4f4>)
 800a122:	215c      	movs	r1, #92	@ 0x5c
 800a124:	5499      	strb	r1, [r3, r2]

		if (MV_value_var > MV_alarm_max_value)
 800a126:	4b93      	ldr	r3, [pc, #588]	@ (800a374 <Icon+0x4fc>)
 800a128:	781b      	ldrb	r3, [r3, #0]
 800a12a:	ee07 3a90 	vmov	s15, r3
 800a12e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a132:	4b91      	ldr	r3, [pc, #580]	@ (800a378 <Icon+0x500>)
 800a134:	edd3 7a00 	vldr	s15, [r3]
 800a138:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a13c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a140:	d509      	bpl.n	800a156 <Icon+0x2de>
			alarm_icons[alarm_count++] = 0x5D;
 800a142:	4b87      	ldr	r3, [pc, #540]	@ (800a360 <Icon+0x4e8>)
 800a144:	781b      	ldrb	r3, [r3, #0]
 800a146:	1c5a      	adds	r2, r3, #1
 800a148:	b2d1      	uxtb	r1, r2
 800a14a:	4a85      	ldr	r2, [pc, #532]	@ (800a360 <Icon+0x4e8>)
 800a14c:	7011      	strb	r1, [r2, #0]
 800a14e:	461a      	mov	r2, r3
 800a150:	4b86      	ldr	r3, [pc, #536]	@ (800a36c <Icon+0x4f4>)
 800a152:	215d      	movs	r1, #93	@ 0x5d
 800a154:	5499      	strb	r1, [r3, r2]

		if (MV_value_var < MV_alarm_min_value)
 800a156:	4b89      	ldr	r3, [pc, #548]	@ (800a37c <Icon+0x504>)
 800a158:	781b      	ldrb	r3, [r3, #0]
 800a15a:	ee07 3a90 	vmov	s15, r3
 800a15e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a162:	4b85      	ldr	r3, [pc, #532]	@ (800a378 <Icon+0x500>)
 800a164:	edd3 7a00 	vldr	s15, [r3]
 800a168:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a16c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a170:	dd09      	ble.n	800a186 <Icon+0x30e>
			alarm_icons[alarm_count++] = 0x5E;
 800a172:	4b7b      	ldr	r3, [pc, #492]	@ (800a360 <Icon+0x4e8>)
 800a174:	781b      	ldrb	r3, [r3, #0]
 800a176:	1c5a      	adds	r2, r3, #1
 800a178:	b2d1      	uxtb	r1, r2
 800a17a:	4a79      	ldr	r2, [pc, #484]	@ (800a360 <Icon+0x4e8>)
 800a17c:	7011      	strb	r1, [r2, #0]
 800a17e:	461a      	mov	r2, r3
 800a180:	4b7a      	ldr	r3, [pc, #488]	@ (800a36c <Icon+0x4f4>)
 800a182:	215e      	movs	r1, #94	@ 0x5e
 800a184:	5499      	strb	r1, [r3, r2]

		if (RR_temp_value > RR_alarm_max_value)
 800a186:	4b7e      	ldr	r3, [pc, #504]	@ (800a380 <Icon+0x508>)
 800a188:	781a      	ldrb	r2, [r3, #0]
 800a18a:	4b7e      	ldr	r3, [pc, #504]	@ (800a384 <Icon+0x50c>)
 800a18c:	781b      	ldrb	r3, [r3, #0]
 800a18e:	429a      	cmp	r2, r3
 800a190:	d909      	bls.n	800a1a6 <Icon+0x32e>
			alarm_icons[alarm_count++] = 0x5F;
 800a192:	4b73      	ldr	r3, [pc, #460]	@ (800a360 <Icon+0x4e8>)
 800a194:	781b      	ldrb	r3, [r3, #0]
 800a196:	1c5a      	adds	r2, r3, #1
 800a198:	b2d1      	uxtb	r1, r2
 800a19a:	4a71      	ldr	r2, [pc, #452]	@ (800a360 <Icon+0x4e8>)
 800a19c:	7011      	strb	r1, [r2, #0]
 800a19e:	461a      	mov	r2, r3
 800a1a0:	4b72      	ldr	r3, [pc, #456]	@ (800a36c <Icon+0x4f4>)
 800a1a2:	215f      	movs	r1, #95	@ 0x5f
 800a1a4:	5499      	strb	r1, [r3, r2]

		if (RR_temp_value < RR_alarm_min_value)
 800a1a6:	4b76      	ldr	r3, [pc, #472]	@ (800a380 <Icon+0x508>)
 800a1a8:	781a      	ldrb	r2, [r3, #0]
 800a1aa:	4b77      	ldr	r3, [pc, #476]	@ (800a388 <Icon+0x510>)
 800a1ac:	781b      	ldrb	r3, [r3, #0]
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	d209      	bcs.n	800a1c6 <Icon+0x34e>
			alarm_icons[alarm_count++] = 0x60;
 800a1b2:	4b6b      	ldr	r3, [pc, #428]	@ (800a360 <Icon+0x4e8>)
 800a1b4:	781b      	ldrb	r3, [r3, #0]
 800a1b6:	1c5a      	adds	r2, r3, #1
 800a1b8:	b2d1      	uxtb	r1, r2
 800a1ba:	4a69      	ldr	r2, [pc, #420]	@ (800a360 <Icon+0x4e8>)
 800a1bc:	7011      	strb	r1, [r2, #0]
 800a1be:	461a      	mov	r2, r3
 800a1c0:	4b6a      	ldr	r3, [pc, #424]	@ (800a36c <Icon+0x4f4>)
 800a1c2:	2160      	movs	r1, #96	@ 0x60
 800a1c4:	5499      	strb	r1, [r3, r2]

		if ((Oxygen > O2_alarm_max_value) && (O2_flag == 0))
 800a1c6:	4b71      	ldr	r3, [pc, #452]	@ (800a38c <Icon+0x514>)
 800a1c8:	781b      	ldrb	r3, [r3, #0]
 800a1ca:	ee07 3a90 	vmov	s15, r3
 800a1ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a1d2:	4b6f      	ldr	r3, [pc, #444]	@ (800a390 <Icon+0x518>)
 800a1d4:	edd3 7a00 	vldr	s15, [r3]
 800a1d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a1dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1e0:	d510      	bpl.n	800a204 <Icon+0x38c>
 800a1e2:	4b6c      	ldr	r3, [pc, #432]	@ (800a394 <Icon+0x51c>)
 800a1e4:	781b      	ldrb	r3, [r3, #0]
 800a1e6:	f083 0301 	eor.w	r3, r3, #1
 800a1ea:	b2db      	uxtb	r3, r3
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d009      	beq.n	800a204 <Icon+0x38c>
			alarm_icons[alarm_count++] = 0x61;
 800a1f0:	4b5b      	ldr	r3, [pc, #364]	@ (800a360 <Icon+0x4e8>)
 800a1f2:	781b      	ldrb	r3, [r3, #0]
 800a1f4:	1c5a      	adds	r2, r3, #1
 800a1f6:	b2d1      	uxtb	r1, r2
 800a1f8:	4a59      	ldr	r2, [pc, #356]	@ (800a360 <Icon+0x4e8>)
 800a1fa:	7011      	strb	r1, [r2, #0]
 800a1fc:	461a      	mov	r2, r3
 800a1fe:	4b5b      	ldr	r3, [pc, #364]	@ (800a36c <Icon+0x4f4>)
 800a200:	2161      	movs	r1, #97	@ 0x61
 800a202:	5499      	strb	r1, [r3, r2]

		if ((Oxygen < O2_alarm_min_value) && (O2_flag == 0))
 800a204:	4b64      	ldr	r3, [pc, #400]	@ (800a398 <Icon+0x520>)
 800a206:	781b      	ldrb	r3, [r3, #0]
 800a208:	ee07 3a90 	vmov	s15, r3
 800a20c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a210:	4b5f      	ldr	r3, [pc, #380]	@ (800a390 <Icon+0x518>)
 800a212:	edd3 7a00 	vldr	s15, [r3]
 800a216:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a21a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a21e:	dd10      	ble.n	800a242 <Icon+0x3ca>
 800a220:	4b5c      	ldr	r3, [pc, #368]	@ (800a394 <Icon+0x51c>)
 800a222:	781b      	ldrb	r3, [r3, #0]
 800a224:	f083 0301 	eor.w	r3, r3, #1
 800a228:	b2db      	uxtb	r3, r3
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d009      	beq.n	800a242 <Icon+0x3ca>
			alarm_icons[alarm_count++] = 0x62;
 800a22e:	4b4c      	ldr	r3, [pc, #304]	@ (800a360 <Icon+0x4e8>)
 800a230:	781b      	ldrb	r3, [r3, #0]
 800a232:	1c5a      	adds	r2, r3, #1
 800a234:	b2d1      	uxtb	r1, r2
 800a236:	4a4a      	ldr	r2, [pc, #296]	@ (800a360 <Icon+0x4e8>)
 800a238:	7011      	strb	r1, [r2, #0]
 800a23a:	461a      	mov	r2, r3
 800a23c:	4b4b      	ldr	r3, [pc, #300]	@ (800a36c <Icon+0x4f4>)
 800a23e:	2162      	movs	r1, #98	@ 0x62
 800a240:	5499      	strb	r1, [r3, r2]

		if (pressure_adc < 16555)
 800a242:	4b56      	ldr	r3, [pc, #344]	@ (800a39c <Icon+0x524>)
 800a244:	881b      	ldrh	r3, [r3, #0]
 800a246:	f244 02aa 	movw	r2, #16554	@ 0x40aa
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d809      	bhi.n	800a262 <Icon+0x3ea>
			alarm_icons[alarm_count++] = 0x65;
 800a24e:	4b44      	ldr	r3, [pc, #272]	@ (800a360 <Icon+0x4e8>)
 800a250:	781b      	ldrb	r3, [r3, #0]
 800a252:	1c5a      	adds	r2, r3, #1
 800a254:	b2d1      	uxtb	r1, r2
 800a256:	4a42      	ldr	r2, [pc, #264]	@ (800a360 <Icon+0x4e8>)
 800a258:	7011      	strb	r1, [r2, #0]
 800a25a:	461a      	mov	r2, r3
 800a25c:	4b43      	ldr	r3, [pc, #268]	@ (800a36c <Icon+0x4f4>)
 800a25e:	2165      	movs	r1, #101	@ 0x65
 800a260:	5499      	strb	r1, [r3, r2]

		if (storevalue1 < 0)
			alarm_icons[alarm_count++] = 0x00;

		if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13) == GPIO_PIN_RESET) {
 800a262:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800a266:	484e      	ldr	r0, [pc, #312]	@ (800a3a0 <Icon+0x528>)
 800a268:	f003 fcce 	bl	800dc08 <HAL_GPIO_ReadPin>
 800a26c:	4603      	mov	r3, r0
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d10d      	bne.n	800a28e <Icon+0x416>
			PSW = 1;
 800a272:	4b4c      	ldr	r3, [pc, #304]	@ (800a3a4 <Icon+0x52c>)
 800a274:	2201      	movs	r2, #1
 800a276:	701a      	strb	r2, [r3, #0]
			alarm_icons[alarm_count++] = 0x67;
 800a278:	4b39      	ldr	r3, [pc, #228]	@ (800a360 <Icon+0x4e8>)
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	1c5a      	adds	r2, r3, #1
 800a27e:	b2d1      	uxtb	r1, r2
 800a280:	4a37      	ldr	r2, [pc, #220]	@ (800a360 <Icon+0x4e8>)
 800a282:	7011      	strb	r1, [r2, #0]
 800a284:	461a      	mov	r2, r3
 800a286:	4b39      	ldr	r3, [pc, #228]	@ (800a36c <Icon+0x4f4>)
 800a288:	2167      	movs	r1, #103	@ 0x67
 800a28a:	5499      	strb	r1, [r3, r2]
 800a28c:	e014      	b.n	800a2b8 <Icon+0x440>
		}
		else if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13) == GPIO_PIN_RESET) {
 800a28e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800a292:	4843      	ldr	r0, [pc, #268]	@ (800a3a0 <Icon+0x528>)
 800a294:	f003 fcb8 	bl	800dc08 <HAL_GPIO_ReadPin>
 800a298:	4603      	mov	r3, r0
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d10c      	bne.n	800a2b8 <Icon+0x440>
			PSW = 0;
 800a29e:	4b41      	ldr	r3, [pc, #260]	@ (800a3a4 <Icon+0x52c>)
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	701a      	strb	r2, [r3, #0]
			alarm_icons[alarm_count++] = 0x00;
 800a2a4:	4b2e      	ldr	r3, [pc, #184]	@ (800a360 <Icon+0x4e8>)
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	1c5a      	adds	r2, r3, #1
 800a2aa:	b2d1      	uxtb	r1, r2
 800a2ac:	4a2c      	ldr	r2, [pc, #176]	@ (800a360 <Icon+0x4e8>)
 800a2ae:	7011      	strb	r1, [r2, #0]
 800a2b0:	461a      	mov	r2, r3
 800a2b2:	4b2e      	ldr	r3, [pc, #184]	@ (800a36c <Icon+0x4f4>)
 800a2b4:	2100      	movs	r1, #0
 800a2b6:	5499      	strb	r1, [r3, r2]
		}
		if ((HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11)== GPIO_PIN_RESET) && (Battery_average >= 3222 && Battery_average <= 3260)) {
 800a2b8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a2bc:	483a      	ldr	r0, [pc, #232]	@ (800a3a8 <Icon+0x530>)
 800a2be:	f003 fca3 	bl	800dc08 <HAL_GPIO_ReadPin>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d11d      	bne.n	800a304 <Icon+0x48c>
 800a2c8:	4b38      	ldr	r3, [pc, #224]	@ (800a3ac <Icon+0x534>)
 800a2ca:	edd3 7a00 	vldr	s15, [r3]
 800a2ce:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800a3b0 <Icon+0x538>
 800a2d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a2d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2da:	db13      	blt.n	800a304 <Icon+0x48c>
 800a2dc:	4b33      	ldr	r3, [pc, #204]	@ (800a3ac <Icon+0x534>)
 800a2de:	edd3 7a00 	vldr	s15, [r3]
 800a2e2:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800a3b4 <Icon+0x53c>
 800a2e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a2ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2ee:	d809      	bhi.n	800a304 <Icon+0x48c>
			alarm_icons[alarm_count++] = 0x5A;
 800a2f0:	4b1b      	ldr	r3, [pc, #108]	@ (800a360 <Icon+0x4e8>)
 800a2f2:	781b      	ldrb	r3, [r3, #0]
 800a2f4:	1c5a      	adds	r2, r3, #1
 800a2f6:	b2d1      	uxtb	r1, r2
 800a2f8:	4a19      	ldr	r2, [pc, #100]	@ (800a360 <Icon+0x4e8>)
 800a2fa:	7011      	strb	r1, [r2, #0]
 800a2fc:	461a      	mov	r2, r3
 800a2fe:	4b1b      	ldr	r3, [pc, #108]	@ (800a36c <Icon+0x4f4>)
 800a300:	215a      	movs	r1, #90	@ 0x5a
 800a302:	5499      	strb	r1, [r3, r2]
		}

		static uint8_t current_alarm_index = 0;
		static uint32_t last_switch_time = 0;
		uint32_t now = HAL_GetTick();
 800a304:	f002 f9d0 	bl	800c6a8 <HAL_GetTick>
 800a308:	60f8      	str	r0, [r7, #12]

		if (alarm_count > 0) {
 800a30a:	4b15      	ldr	r3, [pc, #84]	@ (800a360 <Icon+0x4e8>)
 800a30c:	781b      	ldrb	r3, [r3, #0]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d056      	beq.n	800a3c0 <Icon+0x548>
			if (now - last_switch_time >= 1000) { // 1 second per icon
 800a312:	4b29      	ldr	r3, [pc, #164]	@ (800a3b8 <Icon+0x540>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	68fa      	ldr	r2, [r7, #12]
 800a318:	1ad3      	subs	r3, r2, r3
 800a31a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a31e:	d355      	bcc.n	800a3cc <Icon+0x554>
				alarm_icon_change(alarm_icons[current_alarm_index]);
 800a320:	4b26      	ldr	r3, [pc, #152]	@ (800a3bc <Icon+0x544>)
 800a322:	781b      	ldrb	r3, [r3, #0]
 800a324:	461a      	mov	r2, r3
 800a326:	4b11      	ldr	r3, [pc, #68]	@ (800a36c <Icon+0x4f4>)
 800a328:	5c9b      	ldrb	r3, [r3, r2]
 800a32a:	4618      	mov	r0, r3
 800a32c:	f7f9 faec 	bl	8003908 <alarm_icon_change>
				current_alarm_index = (current_alarm_index + 1) % alarm_count;
 800a330:	4b22      	ldr	r3, [pc, #136]	@ (800a3bc <Icon+0x544>)
 800a332:	781b      	ldrb	r3, [r3, #0]
 800a334:	3301      	adds	r3, #1
 800a336:	4a0a      	ldr	r2, [pc, #40]	@ (800a360 <Icon+0x4e8>)
 800a338:	7812      	ldrb	r2, [r2, #0]
 800a33a:	fb93 f1f2 	sdiv	r1, r3, r2
 800a33e:	fb01 f202 	mul.w	r2, r1, r2
 800a342:	1a9b      	subs	r3, r3, r2
 800a344:	b2da      	uxtb	r2, r3
 800a346:	4b1d      	ldr	r3, [pc, #116]	@ (800a3bc <Icon+0x544>)
 800a348:	701a      	strb	r2, [r3, #0]
				last_switch_time = now;
 800a34a:	4a1b      	ldr	r2, [pc, #108]	@ (800a3b8 <Icon+0x540>)
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	6013      	str	r3, [r2, #0]
 800a350:	e03c      	b.n	800a3cc <Icon+0x554>
 800a352:	bf00      	nop
 800a354:	200019e6 	.word	0x200019e6
 800a358:	200019e7 	.word	0x200019e7
 800a35c:	20000f88 	.word	0x20000f88
 800a360:	200019f6 	.word	0x200019f6
 800a364:	20001b28 	.word	0x20001b28
 800a368:	20000050 	.word	0x20000050
 800a36c:	200019ec 	.word	0x200019ec
 800a370:	200019e4 	.word	0x200019e4
 800a374:	20000051 	.word	0x20000051
 800a378:	200019e0 	.word	0x200019e0
 800a37c:	200019e5 	.word	0x200019e5
 800a380:	2000004c 	.word	0x2000004c
 800a384:	20000052 	.word	0x20000052
 800a388:	2000004d 	.word	0x2000004d
 800a38c:	20000054 	.word	0x20000054
 800a390:	20001928 	.word	0x20001928
 800a394:	200019d4 	.word	0x200019d4
 800a398:	2000004f 	.word	0x2000004f
 800a39c:	20001344 	.word	0x20001344
 800a3a0:	40021000 	.word	0x40021000
 800a3a4:	20001417 	.word	0x20001417
 800a3a8:	40020c00 	.word	0x40020c00
 800a3ac:	200015e0 	.word	0x200015e0
 800a3b0:	45496000 	.word	0x45496000
 800a3b4:	454bc000 	.word	0x454bc000
 800a3b8:	20001b6c 	.word	0x20001b6c
 800a3bc:	20001b70 	.word	0x20001b70
			}
		} else {
			alarm_icon_change(0x00); // No alarms
 800a3c0:	2000      	movs	r0, #0
 800a3c2:	f7f9 faa1 	bl	8003908 <alarm_icon_change>
			current_alarm_index = 0;
 800a3c6:	4b03      	ldr	r3, [pc, #12]	@ (800a3d4 <Icon+0x55c>)
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	701a      	strb	r2, [r3, #0]
		}

		//    osDelay(1);
		vTaskDelay(pdMS_TO_TICKS(50));  // Delay before re-checking
 800a3cc:	2032      	movs	r0, #50	@ 0x32
 800a3ce:	f009 f885 	bl	80134dc <vTaskDelay>
	{
 800a3d2:	e55e      	b.n	8009e92 <Icon+0x1a>
 800a3d4:	20001b70 	.word	0x20001b70

0800a3d8 <Battery>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Battery */
void Battery(void const * argument)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b082      	sub	sp, #8
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for(;;)
	{


		HAL_ADC_Start(&hadc1);
 800a3e0:	48b3      	ldr	r0, [pc, #716]	@ (800a6b0 <Battery+0x2d8>)
 800a3e2:	f002 f9d5 	bl	800c790 <HAL_ADC_Start>
		HAL_ADC_Start(&hadc2);
 800a3e6:	48b3      	ldr	r0, [pc, #716]	@ (800a6b4 <Battery+0x2dc>)
 800a3e8:	f002 f9d2 	bl	800c790 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800a3ec:	f04f 31ff 	mov.w	r1, #4294967295
 800a3f0:	48af      	ldr	r0, [pc, #700]	@ (800a6b0 <Battery+0x2d8>)
 800a3f2:	f002 fad2 	bl	800c99a <HAL_ADC_PollForConversion>
		HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 800a3f6:	f04f 31ff 	mov.w	r1, #4294967295
 800a3fa:	48ae      	ldr	r0, [pc, #696]	@ (800a6b4 <Battery+0x2dc>)
 800a3fc:	f002 facd 	bl	800c99a <HAL_ADC_PollForConversion>
		Battery_Adc_Value = HAL_ADC_GetValue(&hadc1);
 800a400:	48ab      	ldr	r0, [pc, #684]	@ (800a6b0 <Battery+0x2d8>)
 800a402:	f002 fb55 	bl	800cab0 <HAL_ADC_GetValue>
 800a406:	4603      	mov	r3, r0
 800a408:	b29a      	uxth	r2, r3
 800a40a:	4bab      	ldr	r3, [pc, #684]	@ (800a6b8 <Battery+0x2e0>)
 800a40c:	801a      	strh	r2, [r3, #0]
		ACS_Adc_Value = HAL_ADC_GetValue(&hadc2);
 800a40e:	48a9      	ldr	r0, [pc, #676]	@ (800a6b4 <Battery+0x2dc>)
 800a410:	f002 fb4e 	bl	800cab0 <HAL_ADC_GetValue>
 800a414:	4603      	mov	r3, r0
 800a416:	b29a      	uxth	r2, r3
 800a418:	4ba8      	ldr	r3, [pc, #672]	@ (800a6bc <Battery+0x2e4>)
 800a41a:	801a      	strh	r2, [r3, #0]
		total -= readings[readIndex];
 800a41c:	4ba8      	ldr	r3, [pc, #672]	@ (800a6c0 <Battery+0x2e8>)
 800a41e:	ed93 7a00 	vldr	s14, [r3]
 800a422:	4ba8      	ldr	r3, [pc, #672]	@ (800a6c4 <Battery+0x2ec>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	4aa8      	ldr	r2, [pc, #672]	@ (800a6c8 <Battery+0x2f0>)
 800a428:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a42c:	ee07 3a90 	vmov	s15, r3
 800a430:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a434:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a438:	4ba1      	ldr	r3, [pc, #644]	@ (800a6c0 <Battery+0x2e8>)
 800a43a:	edc3 7a00 	vstr	s15, [r3]
		readings[readIndex] = ACS_Adc_Value;
 800a43e:	4ba1      	ldr	r3, [pc, #644]	@ (800a6c4 <Battery+0x2ec>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	4a9e      	ldr	r2, [pc, #632]	@ (800a6bc <Battery+0x2e4>)
 800a444:	8811      	ldrh	r1, [r2, #0]
 800a446:	4aa0      	ldr	r2, [pc, #640]	@ (800a6c8 <Battery+0x2f0>)
 800a448:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		total += readings[readIndex];
 800a44c:	4b9d      	ldr	r3, [pc, #628]	@ (800a6c4 <Battery+0x2ec>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4a9d      	ldr	r2, [pc, #628]	@ (800a6c8 <Battery+0x2f0>)
 800a452:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a456:	ee07 3a90 	vmov	s15, r3
 800a45a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a45e:	4b98      	ldr	r3, [pc, #608]	@ (800a6c0 <Battery+0x2e8>)
 800a460:	edd3 7a00 	vldr	s15, [r3]
 800a464:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a468:	4b95      	ldr	r3, [pc, #596]	@ (800a6c0 <Battery+0x2e8>)
 800a46a:	edc3 7a00 	vstr	s15, [r3]
		readIndex = (readIndex + 1) % NUM_READINGS;
 800a46e:	4b95      	ldr	r3, [pc, #596]	@ (800a6c4 <Battery+0x2ec>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	1c5a      	adds	r2, r3, #1
 800a474:	4b95      	ldr	r3, [pc, #596]	@ (800a6cc <Battery+0x2f4>)
 800a476:	fb83 1302 	smull	r1, r3, r3, r2
 800a47a:	1199      	asrs	r1, r3, #6
 800a47c:	17d3      	asrs	r3, r2, #31
 800a47e:	1acb      	subs	r3, r1, r3
 800a480:	21c8      	movs	r1, #200	@ 0xc8
 800a482:	fb01 f303 	mul.w	r3, r1, r3
 800a486:	1ad3      	subs	r3, r2, r3
 800a488:	4a8e      	ldr	r2, [pc, #568]	@ (800a6c4 <Battery+0x2ec>)
 800a48a:	6013      	str	r3, [r2, #0]
		average = total / NUM_READINGS;
 800a48c:	4b8c      	ldr	r3, [pc, #560]	@ (800a6c0 <Battery+0x2e8>)
 800a48e:	ed93 7a00 	vldr	s14, [r3]
 800a492:	eddf 6a8f 	vldr	s13, [pc, #572]	@ 800a6d0 <Battery+0x2f8>
 800a496:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a49a:	4b8e      	ldr	r3, [pc, #568]	@ (800a6d4 <Battery+0x2fc>)
 800a49c:	edc3 7a00 	vstr	s15, [r3]

		total1 -= readings1[readIndex1];
 800a4a0:	4b8d      	ldr	r3, [pc, #564]	@ (800a6d8 <Battery+0x300>)
 800a4a2:	ed93 7a00 	vldr	s14, [r3]
 800a4a6:	4b8d      	ldr	r3, [pc, #564]	@ (800a6dc <Battery+0x304>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	4a8d      	ldr	r2, [pc, #564]	@ (800a6e0 <Battery+0x308>)
 800a4ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4b0:	ee07 3a90 	vmov	s15, r3
 800a4b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a4b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a4bc:	4b86      	ldr	r3, [pc, #536]	@ (800a6d8 <Battery+0x300>)
 800a4be:	edc3 7a00 	vstr	s15, [r3]
		readings1[readIndex1] = Battery_Adc_Value;
 800a4c2:	4b86      	ldr	r3, [pc, #536]	@ (800a6dc <Battery+0x304>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4a7c      	ldr	r2, [pc, #496]	@ (800a6b8 <Battery+0x2e0>)
 800a4c8:	8811      	ldrh	r1, [r2, #0]
 800a4ca:	4a85      	ldr	r2, [pc, #532]	@ (800a6e0 <Battery+0x308>)
 800a4cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		total1 += readings1[readIndex1];
 800a4d0:	4b82      	ldr	r3, [pc, #520]	@ (800a6dc <Battery+0x304>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	4a82      	ldr	r2, [pc, #520]	@ (800a6e0 <Battery+0x308>)
 800a4d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4da:	ee07 3a90 	vmov	s15, r3
 800a4de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a4e2:	4b7d      	ldr	r3, [pc, #500]	@ (800a6d8 <Battery+0x300>)
 800a4e4:	edd3 7a00 	vldr	s15, [r3]
 800a4e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a4ec:	4b7a      	ldr	r3, [pc, #488]	@ (800a6d8 <Battery+0x300>)
 800a4ee:	edc3 7a00 	vstr	s15, [r3]
		readIndex1 = (readIndex1 + 1) % NUM_READINGS1;
 800a4f2:	4b7a      	ldr	r3, [pc, #488]	@ (800a6dc <Battery+0x304>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	1c5a      	adds	r2, r3, #1
 800a4f8:	4b74      	ldr	r3, [pc, #464]	@ (800a6cc <Battery+0x2f4>)
 800a4fa:	fb83 1302 	smull	r1, r3, r3, r2
 800a4fe:	1199      	asrs	r1, r3, #6
 800a500:	17d3      	asrs	r3, r2, #31
 800a502:	1acb      	subs	r3, r1, r3
 800a504:	21c8      	movs	r1, #200	@ 0xc8
 800a506:	fb01 f303 	mul.w	r3, r1, r3
 800a50a:	1ad3      	subs	r3, r2, r3
 800a50c:	4a73      	ldr	r2, [pc, #460]	@ (800a6dc <Battery+0x304>)
 800a50e:	6013      	str	r3, [r2, #0]
		Battery_average = total1 / NUM_READINGS1;
 800a510:	4b71      	ldr	r3, [pc, #452]	@ (800a6d8 <Battery+0x300>)
 800a512:	ed93 7a00 	vldr	s14, [r3]
 800a516:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800a6d0 <Battery+0x2f8>
 800a51a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a51e:	4b71      	ldr	r3, [pc, #452]	@ (800a6e4 <Battery+0x30c>)
 800a520:	edc3 7a00 	vstr	s15, [r3]

		rawVoltage = (float) average * 3.3 * 2 / 4095;
 800a524:	4b6b      	ldr	r3, [pc, #428]	@ (800a6d4 <Battery+0x2fc>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	4618      	mov	r0, r3
 800a52a:	f7f6 f805 	bl	8000538 <__aeabi_f2d>
 800a52e:	a35c      	add	r3, pc, #368	@ (adr r3, 800a6a0 <Battery+0x2c8>)
 800a530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a534:	f7f6 f858 	bl	80005e8 <__aeabi_dmul>
 800a538:	4602      	mov	r2, r0
 800a53a:	460b      	mov	r3, r1
 800a53c:	4610      	mov	r0, r2
 800a53e:	4619      	mov	r1, r3
 800a540:	4602      	mov	r2, r0
 800a542:	460b      	mov	r3, r1
 800a544:	f7f5 fe9a 	bl	800027c <__adddf3>
 800a548:	4602      	mov	r2, r0
 800a54a:	460b      	mov	r3, r1
 800a54c:	4610      	mov	r0, r2
 800a54e:	4619      	mov	r1, r3
 800a550:	a355      	add	r3, pc, #340	@ (adr r3, 800a6a8 <Battery+0x2d0>)
 800a552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a556:	f7f6 f971 	bl	800083c <__aeabi_ddiv>
 800a55a:	4602      	mov	r2, r0
 800a55c:	460b      	mov	r3, r1
 800a55e:	4610      	mov	r0, r2
 800a560:	4619      	mov	r1, r3
 800a562:	f7f6 fb39 	bl	8000bd8 <__aeabi_d2f>
 800a566:	4603      	mov	r3, r0
 800a568:	4a5f      	ldr	r2, [pc, #380]	@ (800a6e8 <Battery+0x310>)
 800a56a:	6013      	str	r3, [r2, #0]
		//If rawVolatage is not 2.5 volt, multiply by a factor.
		current = (rawVoltage - 2.5);
 800a56c:	4b5e      	ldr	r3, [pc, #376]	@ (800a6e8 <Battery+0x310>)
 800a56e:	edd3 7a00 	vldr	s15, [r3]
 800a572:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 800a576:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a57a:	4b5c      	ldr	r3, [pc, #368]	@ (800a6ec <Battery+0x314>)
 800a57c:	edc3 7a00 	vstr	s15, [r3]

		if((HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11) == GPIO_PIN_SET) && (average >=1590)){
 800a580:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a584:	485a      	ldr	r0, [pc, #360]	@ (800a6f0 <Battery+0x318>)
 800a586:	f003 fb3f 	bl	800dc08 <HAL_GPIO_ReadPin>
 800a58a:	4603      	mov	r3, r0
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	d10e      	bne.n	800a5ae <Battery+0x1d6>
 800a590:	4b50      	ldr	r3, [pc, #320]	@ (800a6d4 <Battery+0x2fc>)
 800a592:	edd3 7a00 	vldr	s15, [r3]
 800a596:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 800a6f4 <Battery+0x31c>
 800a59a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a59e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5a2:	db04      	blt.n	800a5ae <Battery+0x1d6>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	2140      	movs	r1, #64	@ 0x40
 800a5a8:	4853      	ldr	r0, [pc, #332]	@ (800a6f8 <Battery+0x320>)
 800a5aa:	f003 fb45 	bl	800dc38 <HAL_GPIO_WritePin>
		}
		if((HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11) == GPIO_PIN_RESET) || (average < 1590)){
 800a5ae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a5b2:	484f      	ldr	r0, [pc, #316]	@ (800a6f0 <Battery+0x318>)
 800a5b4:	f003 fb28 	bl	800dc08 <HAL_GPIO_ReadPin>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d009      	beq.n	800a5d2 <Battery+0x1fa>
 800a5be:	4b45      	ldr	r3, [pc, #276]	@ (800a6d4 <Battery+0x2fc>)
 800a5c0:	edd3 7a00 	vldr	s15, [r3]
 800a5c4:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 800a6f4 <Battery+0x31c>
 800a5c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a5cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5d0:	d504      	bpl.n	800a5dc <Battery+0x204>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	2140      	movs	r1, #64	@ 0x40
 800a5d6:	4848      	ldr	r0, [pc, #288]	@ (800a6f8 <Battery+0x320>)
 800a5d8:	f003 fb2e 	bl	800dc38 <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11) == GPIO_PIN_SET) && (Battery_average > 3000 && Battery_average < 3222)){
 800a5dc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a5e0:	4843      	ldr	r0, [pc, #268]	@ (800a6f0 <Battery+0x318>)
 800a5e2:	f003 fb11 	bl	800dc08 <HAL_GPIO_ReadPin>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d117      	bne.n	800a61c <Battery+0x244>
 800a5ec:	4b3d      	ldr	r3, [pc, #244]	@ (800a6e4 <Battery+0x30c>)
 800a5ee:	edd3 7a00 	vldr	s15, [r3]
 800a5f2:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 800a6fc <Battery+0x324>
 800a5f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a5fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5fe:	dd0d      	ble.n	800a61c <Battery+0x244>
 800a600:	4b38      	ldr	r3, [pc, #224]	@ (800a6e4 <Battery+0x30c>)
 800a602:	edd3 7a00 	vldr	s15, [r3]
 800a606:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 800a700 <Battery+0x328>
 800a60a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a60e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a612:	d503      	bpl.n	800a61c <Battery+0x244>
			battery_icon_change(0x54);
 800a614:	2054      	movs	r0, #84	@ 0x54
 800a616:	f7f9 f93b 	bl	8003890 <battery_icon_change>
 800a61a:	e1ab      	b.n	800a974 <Battery+0x59c>
		}
		else if((HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11) == GPIO_PIN_SET) && (Battery_average >= 3222 && Battery_average <= 3382)){
 800a61c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a620:	4833      	ldr	r0, [pc, #204]	@ (800a6f0 <Battery+0x318>)
 800a622:	f003 faf1 	bl	800dc08 <HAL_GPIO_ReadPin>
 800a626:	4603      	mov	r3, r0
 800a628:	2b01      	cmp	r3, #1
 800a62a:	d117      	bne.n	800a65c <Battery+0x284>
 800a62c:	4b2d      	ldr	r3, [pc, #180]	@ (800a6e4 <Battery+0x30c>)
 800a62e:	edd3 7a00 	vldr	s15, [r3]
 800a632:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800a700 <Battery+0x328>
 800a636:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a63a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a63e:	db0d      	blt.n	800a65c <Battery+0x284>
 800a640:	4b28      	ldr	r3, [pc, #160]	@ (800a6e4 <Battery+0x30c>)
 800a642:	edd3 7a00 	vldr	s15, [r3]
 800a646:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800a704 <Battery+0x32c>
 800a64a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a64e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a652:	d803      	bhi.n	800a65c <Battery+0x284>
			battery_icon_change(0x55);
 800a654:	2055      	movs	r0, #85	@ 0x55
 800a656:	f7f9 f91b 	bl	8003890 <battery_icon_change>
 800a65a:	e18b      	b.n	800a974 <Battery+0x59c>
		}
		else if((HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11) == GPIO_PIN_SET) && (Battery_average >= 3383 && Battery_average <= 3542)){
 800a65c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a660:	4823      	ldr	r0, [pc, #140]	@ (800a6f0 <Battery+0x318>)
 800a662:	f003 fad1 	bl	800dc08 <HAL_GPIO_ReadPin>
 800a666:	4603      	mov	r3, r0
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d151      	bne.n	800a710 <Battery+0x338>
 800a66c:	4b1d      	ldr	r3, [pc, #116]	@ (800a6e4 <Battery+0x30c>)
 800a66e:	edd3 7a00 	vldr	s15, [r3]
 800a672:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 800a708 <Battery+0x330>
 800a676:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a67a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a67e:	db47      	blt.n	800a710 <Battery+0x338>
 800a680:	4b18      	ldr	r3, [pc, #96]	@ (800a6e4 <Battery+0x30c>)
 800a682:	edd3 7a00 	vldr	s15, [r3]
 800a686:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800a70c <Battery+0x334>
 800a68a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a68e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a692:	d83d      	bhi.n	800a710 <Battery+0x338>
			battery_icon_change(0x56);
 800a694:	2056      	movs	r0, #86	@ 0x56
 800a696:	f7f9 f8fb 	bl	8003890 <battery_icon_change>
 800a69a:	e16b      	b.n	800a974 <Battery+0x59c>
 800a69c:	f3af 8000 	nop.w
 800a6a0:	66666666 	.word	0x66666666
 800a6a4:	400a6666 	.word	0x400a6666
 800a6a8:	00000000 	.word	0x00000000
 800a6ac:	40affe00 	.word	0x40affe00
 800a6b0:	20000d98 	.word	0x20000d98
 800a6b4:	20000de0 	.word	0x20000de0
 800a6b8:	20001438 	.word	0x20001438
 800a6bc:	2000143a 	.word	0x2000143a
 800a6c0:	20001448 	.word	0x20001448
 800a6c4:	200015dc 	.word	0x200015dc
 800a6c8:	2000144c 	.word	0x2000144c
 800a6cc:	51eb851f 	.word	0x51eb851f
 800a6d0:	43480000 	.word	0x43480000
 800a6d4:	20001444 	.word	0x20001444
 800a6d8:	200015e4 	.word	0x200015e4
 800a6dc:	20001778 	.word	0x20001778
 800a6e0:	200015e8 	.word	0x200015e8
 800a6e4:	200015e0 	.word	0x200015e0
 800a6e8:	2000143c 	.word	0x2000143c
 800a6ec:	20001440 	.word	0x20001440
 800a6f0:	40020c00 	.word	0x40020c00
 800a6f4:	44c6c000 	.word	0x44c6c000
 800a6f8:	40020800 	.word	0x40020800
 800a6fc:	453b8000 	.word	0x453b8000
 800a700:	45496000 	.word	0x45496000
 800a704:	45536000 	.word	0x45536000
 800a708:	45537000 	.word	0x45537000
 800a70c:	455d6000 	.word	0x455d6000
		}
		else if((HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11) == GPIO_PIN_SET) && (Battery_average >= 3543 && Battery_average <= 3702)){
 800a710:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a714:	489c      	ldr	r0, [pc, #624]	@ (800a988 <Battery+0x5b0>)
 800a716:	f003 fa77 	bl	800dc08 <HAL_GPIO_ReadPin>
 800a71a:	4603      	mov	r3, r0
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d117      	bne.n	800a750 <Battery+0x378>
 800a720:	4b9a      	ldr	r3, [pc, #616]	@ (800a98c <Battery+0x5b4>)
 800a722:	edd3 7a00 	vldr	s15, [r3]
 800a726:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800a990 <Battery+0x5b8>
 800a72a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a72e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a732:	db0d      	blt.n	800a750 <Battery+0x378>
 800a734:	4b95      	ldr	r3, [pc, #596]	@ (800a98c <Battery+0x5b4>)
 800a736:	edd3 7a00 	vldr	s15, [r3]
 800a73a:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 800a994 <Battery+0x5bc>
 800a73e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a746:	d803      	bhi.n	800a750 <Battery+0x378>
			battery_icon_change(0x57);
 800a748:	2057      	movs	r0, #87	@ 0x57
 800a74a:	f7f9 f8a1 	bl	8003890 <battery_icon_change>
 800a74e:	e111      	b.n	800a974 <Battery+0x59c>
		}
		else if((HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11) == GPIO_PIN_SET) && (Battery_average >= 3703 && Battery_average <= 3862)){
 800a750:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a754:	488c      	ldr	r0, [pc, #560]	@ (800a988 <Battery+0x5b0>)
 800a756:	f003 fa57 	bl	800dc08 <HAL_GPIO_ReadPin>
 800a75a:	4603      	mov	r3, r0
 800a75c:	2b01      	cmp	r3, #1
 800a75e:	d117      	bne.n	800a790 <Battery+0x3b8>
 800a760:	4b8a      	ldr	r3, [pc, #552]	@ (800a98c <Battery+0x5b4>)
 800a762:	edd3 7a00 	vldr	s15, [r3]
 800a766:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 800a998 <Battery+0x5c0>
 800a76a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a76e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a772:	db0d      	blt.n	800a790 <Battery+0x3b8>
 800a774:	4b85      	ldr	r3, [pc, #532]	@ (800a98c <Battery+0x5b4>)
 800a776:	edd3 7a00 	vldr	s15, [r3]
 800a77a:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 800a99c <Battery+0x5c4>
 800a77e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a786:	d803      	bhi.n	800a790 <Battery+0x3b8>
			battery_icon_change(0x58);
 800a788:	2058      	movs	r0, #88	@ 0x58
 800a78a:	f7f9 f881 	bl	8003890 <battery_icon_change>
 800a78e:	e0f1      	b.n	800a974 <Battery+0x59c>
		}
		else if((HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11) == GPIO_PIN_SET) && (Battery_average >= 3863 && Battery_average <= 4095)){
 800a790:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a794:	487c      	ldr	r0, [pc, #496]	@ (800a988 <Battery+0x5b0>)
 800a796:	f003 fa37 	bl	800dc08 <HAL_GPIO_ReadPin>
 800a79a:	4603      	mov	r3, r0
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	d117      	bne.n	800a7d0 <Battery+0x3f8>
 800a7a0:	4b7a      	ldr	r3, [pc, #488]	@ (800a98c <Battery+0x5b4>)
 800a7a2:	edd3 7a00 	vldr	s15, [r3]
 800a7a6:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 800a9a0 <Battery+0x5c8>
 800a7aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a7ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7b2:	db0d      	blt.n	800a7d0 <Battery+0x3f8>
 800a7b4:	4b75      	ldr	r3, [pc, #468]	@ (800a98c <Battery+0x5b4>)
 800a7b6:	edd3 7a00 	vldr	s15, [r3]
 800a7ba:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 800a9a4 <Battery+0x5cc>
 800a7be:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a7c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7c6:	d803      	bhi.n	800a7d0 <Battery+0x3f8>
			battery_icon_change(0x59);
 800a7c8:	2059      	movs	r0, #89	@ 0x59
 800a7ca:	f7f9 f861 	bl	8003890 <battery_icon_change>
 800a7ce:	e0d1      	b.n	800a974 <Battery+0x59c>
		}
		else if((HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11) == GPIO_PIN_SET) && (Battery_average <=3000)){
 800a7d0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a7d4:	486c      	ldr	r0, [pc, #432]	@ (800a988 <Battery+0x5b0>)
 800a7d6:	f003 fa17 	bl	800dc08 <HAL_GPIO_ReadPin>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	2b01      	cmp	r3, #1
 800a7de:	d10d      	bne.n	800a7fc <Battery+0x424>
 800a7e0:	4b6a      	ldr	r3, [pc, #424]	@ (800a98c <Battery+0x5b4>)
 800a7e2:	edd3 7a00 	vldr	s15, [r3]
 800a7e6:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 800a9a8 <Battery+0x5d0>
 800a7ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a7ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7f2:	d803      	bhi.n	800a7fc <Battery+0x424>
			battery_icon_change(0x4E);
 800a7f4:	204e      	movs	r0, #78	@ 0x4e
 800a7f6:	f7f9 f84b 	bl	8003890 <battery_icon_change>
 800a7fa:	e0bb      	b.n	800a974 <Battery+0x59c>
		}
		else if ((HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11) == GPIO_PIN_RESET)&&(Battery_average >= 3863 && Battery_average <= 4030)) {
 800a7fc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a800:	4861      	ldr	r0, [pc, #388]	@ (800a988 <Battery+0x5b0>)
 800a802:	f003 fa01 	bl	800dc08 <HAL_GPIO_ReadPin>
 800a806:	4603      	mov	r3, r0
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d117      	bne.n	800a83c <Battery+0x464>
 800a80c:	4b5f      	ldr	r3, [pc, #380]	@ (800a98c <Battery+0x5b4>)
 800a80e:	edd3 7a00 	vldr	s15, [r3]
 800a812:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 800a9a0 <Battery+0x5c8>
 800a816:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a81a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a81e:	db0d      	blt.n	800a83c <Battery+0x464>
 800a820:	4b5a      	ldr	r3, [pc, #360]	@ (800a98c <Battery+0x5b4>)
 800a822:	edd3 7a00 	vldr	s15, [r3]
 800a826:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 800a9ac <Battery+0x5d4>
 800a82a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a82e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a832:	d803      	bhi.n	800a83c <Battery+0x464>
			battery_icon_change(0x53);
 800a834:	2053      	movs	r0, #83	@ 0x53
 800a836:	f7f9 f82b 	bl	8003890 <battery_icon_change>
 800a83a:	e09b      	b.n	800a974 <Battery+0x59c>
		}
		else if ((HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11) == GPIO_PIN_RESET) && (Battery_average >= 3703 && Battery_average <= 3862)) {
 800a83c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a840:	4851      	ldr	r0, [pc, #324]	@ (800a988 <Battery+0x5b0>)
 800a842:	f003 f9e1 	bl	800dc08 <HAL_GPIO_ReadPin>
 800a846:	4603      	mov	r3, r0
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d117      	bne.n	800a87c <Battery+0x4a4>
 800a84c:	4b4f      	ldr	r3, [pc, #316]	@ (800a98c <Battery+0x5b4>)
 800a84e:	edd3 7a00 	vldr	s15, [r3]
 800a852:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 800a998 <Battery+0x5c0>
 800a856:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a85a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a85e:	db0d      	blt.n	800a87c <Battery+0x4a4>
 800a860:	4b4a      	ldr	r3, [pc, #296]	@ (800a98c <Battery+0x5b4>)
 800a862:	edd3 7a00 	vldr	s15, [r3]
 800a866:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800a99c <Battery+0x5c4>
 800a86a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a86e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a872:	d803      	bhi.n	800a87c <Battery+0x4a4>

			battery_icon_change(0x52);
 800a874:	2052      	movs	r0, #82	@ 0x52
 800a876:	f7f9 f80b 	bl	8003890 <battery_icon_change>
 800a87a:	e07b      	b.n	800a974 <Battery+0x59c>
		}
		else if ((HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11) == GPIO_PIN_RESET) && (Battery_average >= 3543 && Battery_average <= 3702)) {
 800a87c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a880:	4841      	ldr	r0, [pc, #260]	@ (800a988 <Battery+0x5b0>)
 800a882:	f003 f9c1 	bl	800dc08 <HAL_GPIO_ReadPin>
 800a886:	4603      	mov	r3, r0
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d117      	bne.n	800a8bc <Battery+0x4e4>
 800a88c:	4b3f      	ldr	r3, [pc, #252]	@ (800a98c <Battery+0x5b4>)
 800a88e:	edd3 7a00 	vldr	s15, [r3]
 800a892:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800a990 <Battery+0x5b8>
 800a896:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a89a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a89e:	db0d      	blt.n	800a8bc <Battery+0x4e4>
 800a8a0:	4b3a      	ldr	r3, [pc, #232]	@ (800a98c <Battery+0x5b4>)
 800a8a2:	edd3 7a00 	vldr	s15, [r3]
 800a8a6:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800a994 <Battery+0x5bc>
 800a8aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a8ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8b2:	d803      	bhi.n	800a8bc <Battery+0x4e4>

			battery_icon_change(0x51);
 800a8b4:	2051      	movs	r0, #81	@ 0x51
 800a8b6:	f7f8 ffeb 	bl	8003890 <battery_icon_change>
 800a8ba:	e05b      	b.n	800a974 <Battery+0x59c>
		}
		else if ((HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11) == GPIO_PIN_RESET) && (Battery_average >= 3383 && Battery_average <= 3542)) {
 800a8bc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a8c0:	4831      	ldr	r0, [pc, #196]	@ (800a988 <Battery+0x5b0>)
 800a8c2:	f003 f9a1 	bl	800dc08 <HAL_GPIO_ReadPin>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d117      	bne.n	800a8fc <Battery+0x524>
 800a8cc:	4b2f      	ldr	r3, [pc, #188]	@ (800a98c <Battery+0x5b4>)
 800a8ce:	edd3 7a00 	vldr	s15, [r3]
 800a8d2:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 800a9b0 <Battery+0x5d8>
 800a8d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a8da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8de:	db0d      	blt.n	800a8fc <Battery+0x524>
 800a8e0:	4b2a      	ldr	r3, [pc, #168]	@ (800a98c <Battery+0x5b4>)
 800a8e2:	edd3 7a00 	vldr	s15, [r3]
 800a8e6:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800a9b4 <Battery+0x5dc>
 800a8ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a8ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8f2:	d803      	bhi.n	800a8fc <Battery+0x524>

			battery_icon_change(0x50);
 800a8f4:	2050      	movs	r0, #80	@ 0x50
 800a8f6:	f7f8 ffcb 	bl	8003890 <battery_icon_change>
 800a8fa:	e03b      	b.n	800a974 <Battery+0x59c>
		}
		else if ((HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11)== GPIO_PIN_RESET) && (Battery_average >= 3222 && Battery_average <= 3382)) {
 800a8fc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a900:	4821      	ldr	r0, [pc, #132]	@ (800a988 <Battery+0x5b0>)
 800a902:	f003 f981 	bl	800dc08 <HAL_GPIO_ReadPin>
 800a906:	4603      	mov	r3, r0
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d117      	bne.n	800a93c <Battery+0x564>
 800a90c:	4b1f      	ldr	r3, [pc, #124]	@ (800a98c <Battery+0x5b4>)
 800a90e:	edd3 7a00 	vldr	s15, [r3]
 800a912:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800a9b8 <Battery+0x5e0>
 800a916:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a91a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a91e:	db0d      	blt.n	800a93c <Battery+0x564>
 800a920:	4b1a      	ldr	r3, [pc, #104]	@ (800a98c <Battery+0x5b4>)
 800a922:	edd3 7a00 	vldr	s15, [r3]
 800a926:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 800a9bc <Battery+0x5e4>
 800a92a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a92e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a932:	d803      	bhi.n	800a93c <Battery+0x564>
			battery_icon_change(0x4F);
 800a934:	204f      	movs	r0, #79	@ 0x4f
 800a936:	f7f8 ffab 	bl	8003890 <battery_icon_change>
 800a93a:	e01b      	b.n	800a974 <Battery+0x59c>
		}
		else if ((HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11)== GPIO_PIN_RESET) && (Battery_average <=3222)) {
 800a93c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a940:	4811      	ldr	r0, [pc, #68]	@ (800a988 <Battery+0x5b0>)
 800a942:	f003 f961 	bl	800dc08 <HAL_GPIO_ReadPin>
 800a946:	4603      	mov	r3, r0
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d110      	bne.n	800a96e <Battery+0x596>
 800a94c:	4b0f      	ldr	r3, [pc, #60]	@ (800a98c <Battery+0x5b4>)
 800a94e:	edd3 7a00 	vldr	s15, [r3]
 800a952:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800a9b8 <Battery+0x5e0>
 800a956:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a95a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a95e:	d806      	bhi.n	800a96e <Battery+0x596>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800a960:	2201      	movs	r2, #1
 800a962:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a966:	4816      	ldr	r0, [pc, #88]	@ (800a9c0 <Battery+0x5e8>)
 800a968:	f003 f966 	bl	800dc38 <HAL_GPIO_WritePin>
 800a96c:	e002      	b.n	800a974 <Battery+0x59c>
		}

		else {
			battery_icon_change(0x00);
 800a96e:	2000      	movs	r0, #0
 800a970:	f7f8 ff8e 	bl	8003890 <battery_icon_change>
		}
		HAL_ADC_Stop(&hadc1);
 800a974:	4813      	ldr	r0, [pc, #76]	@ (800a9c4 <Battery+0x5ec>)
 800a976:	f001 ffdd 	bl	800c934 <HAL_ADC_Stop>
		HAL_ADC_Stop(&hadc2);
 800a97a:	4813      	ldr	r0, [pc, #76]	@ (800a9c8 <Battery+0x5f0>)
 800a97c:	f001 ffda 	bl	800c934 <HAL_ADC_Stop>
		vTaskDelay(pdMS_TO_TICKS(100));
 800a980:	2064      	movs	r0, #100	@ 0x64
 800a982:	f008 fdab 	bl	80134dc <vTaskDelay>
		HAL_ADC_Start(&hadc1);
 800a986:	e52b      	b.n	800a3e0 <Battery+0x8>
 800a988:	40020c00 	.word	0x40020c00
 800a98c:	200015e0 	.word	0x200015e0
 800a990:	455d7000 	.word	0x455d7000
 800a994:	45676000 	.word	0x45676000
 800a998:	45677000 	.word	0x45677000
 800a99c:	45716000 	.word	0x45716000
 800a9a0:	45717000 	.word	0x45717000
 800a9a4:	457ff000 	.word	0x457ff000
 800a9a8:	453b8000 	.word	0x453b8000
 800a9ac:	457be000 	.word	0x457be000
 800a9b0:	45537000 	.word	0x45537000
 800a9b4:	455d6000 	.word	0x455d6000
 800a9b8:	45496000 	.word	0x45496000
 800a9bc:	45536000 	.word	0x45536000
 800a9c0:	40020800 	.word	0x40020800
 800a9c4:	20000d98 	.word	0x20000d98
 800a9c8:	20000de0 	.word	0x20000de0

0800a9cc <Loop>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Loop */
void Loop(void const * argument)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b084      	sub	sp, #16
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for(;;)
	{

		//		loop_flag = 1;
		ab = 262 - v_y;
 800a9d4:	4b91      	ldr	r3, [pc, #580]	@ (800ac1c <Loop+0x250>)
 800a9d6:	edd3 7a00 	vldr	s15, [r3]
 800a9da:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 800ac20 <Loop+0x254>
 800a9de:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a9e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9e6:	ee17 3a90 	vmov	r3, s15
 800a9ea:	b29a      	uxth	r2, r3
 800a9ec:	4b8d      	ldr	r3, [pc, #564]	@ (800ac24 <Loop+0x258>)
 800a9ee:	801a      	strh	r2, [r3, #0]
		sprintf(v_xString, "%X", ab);
 800a9f0:	4b8c      	ldr	r3, [pc, #560]	@ (800ac24 <Loop+0x258>)
 800a9f2:	881b      	ldrh	r3, [r3, #0]
 800a9f4:	461a      	mov	r2, r3
 800a9f6:	498c      	ldr	r1, [pc, #560]	@ (800ac28 <Loop+0x25c>)
 800a9f8:	488c      	ldr	r0, [pc, #560]	@ (800ac2c <Loop+0x260>)
 800a9fa:	f00a fd97 	bl	801552c <siprintf>
		sprintf("hex %s", v_xString);
 800a9fe:	498b      	ldr	r1, [pc, #556]	@ (800ac2c <Loop+0x260>)
 800aa00:	488b      	ldr	r0, [pc, #556]	@ (800ac30 <Loop+0x264>)
 800aa02:	f00a fd93 	bl	801552c <siprintf>
		//		v_x1[0] = v_xString[0];
		//		v_x1[1] = v_xString[1];
		//		v_x1[2] = '\0';
		v_x1[0] = '0';
 800aa06:	4b8b      	ldr	r3, [pc, #556]	@ (800ac34 <Loop+0x268>)
 800aa08:	2230      	movs	r2, #48	@ 0x30
 800aa0a:	701a      	strb	r2, [r3, #0]
		v_x1[1] = '0';
 800aa0c:	4b89      	ldr	r3, [pc, #548]	@ (800ac34 <Loop+0x268>)
 800aa0e:	2230      	movs	r2, #48	@ 0x30
 800aa10:	705a      	strb	r2, [r3, #1]
		v_x1[2] = '\0';
 800aa12:	4b88      	ldr	r3, [pc, #544]	@ (800ac34 <Loop+0x268>)
 800aa14:	2200      	movs	r2, #0
 800aa16:	709a      	strb	r2, [r3, #2]

		v_x3[0] = v_xString[0];
 800aa18:	4b84      	ldr	r3, [pc, #528]	@ (800ac2c <Loop+0x260>)
 800aa1a:	781a      	ldrb	r2, [r3, #0]
 800aa1c:	4b86      	ldr	r3, [pc, #536]	@ (800ac38 <Loop+0x26c>)
 800aa1e:	701a      	strb	r2, [r3, #0]
		v_x3[1] = v_xString[1];
 800aa20:	4b82      	ldr	r3, [pc, #520]	@ (800ac2c <Loop+0x260>)
 800aa22:	785a      	ldrb	r2, [r3, #1]
 800aa24:	4b84      	ldr	r3, [pc, #528]	@ (800ac38 <Loop+0x26c>)
 800aa26:	705a      	strb	r2, [r3, #1]
		v_x3[2] = '\0';
 800aa28:	4b83      	ldr	r3, [pc, #524]	@ (800ac38 <Loop+0x26c>)
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	709a      	strb	r2, [r3, #2]

		a1 = (uint8_t) strtol(v_x1, NULL, 16);
 800aa2e:	2210      	movs	r2, #16
 800aa30:	2100      	movs	r1, #0
 800aa32:	4880      	ldr	r0, [pc, #512]	@ (800ac34 <Loop+0x268>)
 800aa34:	f00a fd70 	bl	8015518 <strtol>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	b2da      	uxtb	r2, r3
 800aa3c:	4b7f      	ldr	r3, [pc, #508]	@ (800ac3c <Loop+0x270>)
 800aa3e:	701a      	strb	r2, [r3, #0]
		a2 = (uint8_t) strtol(v_x3, NULL, 16);
 800aa40:	2210      	movs	r2, #16
 800aa42:	2100      	movs	r1, #0
 800aa44:	487c      	ldr	r0, [pc, #496]	@ (800ac38 <Loop+0x26c>)
 800aa46:	f00a fd67 	bl	8015518 <strtol>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	b2da      	uxtb	r2, r3
 800aa4e:	4b7c      	ldr	r3, [pc, #496]	@ (800ac40 <Loop+0x274>)
 800aa50:	701a      	strb	r2, [r3, #0]


		cd = 673 + p_x;
 800aa52:	4b7c      	ldr	r3, [pc, #496]	@ (800ac44 <Loop+0x278>)
 800aa54:	edd3 7a00 	vldr	s15, [r3]
 800aa58:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 800ac48 <Loop+0x27c>
 800aa5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aa60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa64:	ee17 3a90 	vmov	r3, s15
 800aa68:	b29a      	uxth	r2, r3
 800aa6a:	4b78      	ldr	r3, [pc, #480]	@ (800ac4c <Loop+0x280>)
 800aa6c:	801a      	strh	r2, [r3, #0]
		sprintf(v_yString, "%X", cd);
 800aa6e:	4b77      	ldr	r3, [pc, #476]	@ (800ac4c <Loop+0x280>)
 800aa70:	881b      	ldrh	r3, [r3, #0]
 800aa72:	461a      	mov	r2, r3
 800aa74:	496c      	ldr	r1, [pc, #432]	@ (800ac28 <Loop+0x25c>)
 800aa76:	4876      	ldr	r0, [pc, #472]	@ (800ac50 <Loop+0x284>)
 800aa78:	f00a fd58 	bl	801552c <siprintf>
		sprintf("hex %s", v_yString);
 800aa7c:	4974      	ldr	r1, [pc, #464]	@ (800ac50 <Loop+0x284>)
 800aa7e:	486c      	ldr	r0, [pc, #432]	@ (800ac30 <Loop+0x264>)
 800aa80:	f00a fd54 	bl	801552c <siprintf>
		v_y1[0] = '0';
 800aa84:	4b73      	ldr	r3, [pc, #460]	@ (800ac54 <Loop+0x288>)
 800aa86:	2230      	movs	r2, #48	@ 0x30
 800aa88:	701a      	strb	r2, [r3, #0]
		v_y1[1] = v_yString[0];
 800aa8a:	4b71      	ldr	r3, [pc, #452]	@ (800ac50 <Loop+0x284>)
 800aa8c:	781a      	ldrb	r2, [r3, #0]
 800aa8e:	4b71      	ldr	r3, [pc, #452]	@ (800ac54 <Loop+0x288>)
 800aa90:	705a      	strb	r2, [r3, #1]
		v_y1[2] = '\0';
 800aa92:	4b70      	ldr	r3, [pc, #448]	@ (800ac54 <Loop+0x288>)
 800aa94:	2200      	movs	r2, #0
 800aa96:	709a      	strb	r2, [r3, #2]

		v_y3[0] = v_yString[1];
 800aa98:	4b6d      	ldr	r3, [pc, #436]	@ (800ac50 <Loop+0x284>)
 800aa9a:	785a      	ldrb	r2, [r3, #1]
 800aa9c:	4b6e      	ldr	r3, [pc, #440]	@ (800ac58 <Loop+0x28c>)
 800aa9e:	701a      	strb	r2, [r3, #0]
		v_y3[1] = v_yString[2];
 800aaa0:	4b6b      	ldr	r3, [pc, #428]	@ (800ac50 <Loop+0x284>)
 800aaa2:	789a      	ldrb	r2, [r3, #2]
 800aaa4:	4b6c      	ldr	r3, [pc, #432]	@ (800ac58 <Loop+0x28c>)
 800aaa6:	705a      	strb	r2, [r3, #1]
		v_y3[2] = '\0';
 800aaa8:	4b6b      	ldr	r3, [pc, #428]	@ (800ac58 <Loop+0x28c>)
 800aaaa:	2200      	movs	r2, #0
 800aaac:	709a      	strb	r2, [r3, #2]
		y12 = (uint8_t) strtol(v_y1, NULL, 16);
 800aaae:	2210      	movs	r2, #16
 800aab0:	2100      	movs	r1, #0
 800aab2:	4868      	ldr	r0, [pc, #416]	@ (800ac54 <Loop+0x288>)
 800aab4:	f00a fd30 	bl	8015518 <strtol>
 800aab8:	4603      	mov	r3, r0
 800aaba:	b2da      	uxtb	r2, r3
 800aabc:	4b67      	ldr	r3, [pc, #412]	@ (800ac5c <Loop+0x290>)
 800aabe:	701a      	strb	r2, [r3, #0]
		y2 = (uint8_t) strtol(v_y3, NULL, 16);
 800aac0:	2210      	movs	r2, #16
 800aac2:	2100      	movs	r1, #0
 800aac4:	4864      	ldr	r0, [pc, #400]	@ (800ac58 <Loop+0x28c>)
 800aac6:	f00a fd27 	bl	8015518 <strtol>
 800aaca:	4603      	mov	r3, r0
 800aacc:	b2da      	uxtb	r2, r3
 800aace:	4b64      	ldr	r3, [pc, #400]	@ (800ac60 <Loop+0x294>)
 800aad0:	701a      	strb	r2, [r3, #0]
		//		y4 = (uint8_t) strtol(v_y4, NULL, 16);




		line[16] = y12;
 800aad2:	4b62      	ldr	r3, [pc, #392]	@ (800ac5c <Loop+0x290>)
 800aad4:	781a      	ldrb	r2, [r3, #0]
 800aad6:	4b63      	ldr	r3, [pc, #396]	@ (800ac64 <Loop+0x298>)
 800aad8:	741a      	strb	r2, [r3, #16]
		line[17] = y2;
 800aada:	4b61      	ldr	r3, [pc, #388]	@ (800ac60 <Loop+0x294>)
 800aadc:	781a      	ldrb	r2, [r3, #0]
 800aade:	4b61      	ldr	r3, [pc, #388]	@ (800ac64 <Loop+0x298>)
 800aae0:	745a      	strb	r2, [r3, #17]
		line[18] = a1;
 800aae2:	4b56      	ldr	r3, [pc, #344]	@ (800ac3c <Loop+0x270>)
 800aae4:	781a      	ldrb	r2, [r3, #0]
 800aae6:	4b5f      	ldr	r3, [pc, #380]	@ (800ac64 <Loop+0x298>)
 800aae8:	749a      	strb	r2, [r3, #18]
		line[19] = a2;
 800aaea:	4b55      	ldr	r3, [pc, #340]	@ (800ac40 <Loop+0x274>)
 800aaec:	781a      	ldrb	r2, [r3, #0]
 800aaee:	4b5d      	ldr	r3, [pc, #372]	@ (800ac64 <Loop+0x298>)
 800aaf0:	74da      	strb	r2, [r3, #19]
		line_graph[16] = y12;
 800aaf2:	4b5a      	ldr	r3, [pc, #360]	@ (800ac5c <Loop+0x290>)
 800aaf4:	781a      	ldrb	r2, [r3, #0]
 800aaf6:	4b5c      	ldr	r3, [pc, #368]	@ (800ac68 <Loop+0x29c>)
 800aaf8:	741a      	strb	r2, [r3, #16]
		line_graph[17] = y2;
 800aafa:	4b59      	ldr	r3, [pc, #356]	@ (800ac60 <Loop+0x294>)
 800aafc:	781a      	ldrb	r2, [r3, #0]
 800aafe:	4b5a      	ldr	r3, [pc, #360]	@ (800ac68 <Loop+0x29c>)
 800ab00:	745a      	strb	r2, [r3, #17]
		line_graph[18] = a1;
 800ab02:	4b4e      	ldr	r3, [pc, #312]	@ (800ac3c <Loop+0x270>)
 800ab04:	781a      	ldrb	r2, [r3, #0]
 800ab06:	4b58      	ldr	r3, [pc, #352]	@ (800ac68 <Loop+0x29c>)
 800ab08:	749a      	strb	r2, [r3, #18]
		line_graph[19] = a2;
 800ab0a:	4b4d      	ldr	r3, [pc, #308]	@ (800ac40 <Loop+0x274>)
 800ab0c:	781a      	ldrb	r2, [r3, #0]
 800ab0e:	4b56      	ldr	r3, [pc, #344]	@ (800ac68 <Loop+0x29c>)
 800ab10:	74da      	strb	r2, [r3, #19]
		line_graph[20] = 0x02;
 800ab12:	4b55      	ldr	r3, [pc, #340]	@ (800ac68 <Loop+0x29c>)
 800ab14:	2202      	movs	r2, #2
 800ab16:	751a      	strb	r2, [r3, #20]
		line_graph[21] = 0xA2;
 800ab18:	4b53      	ldr	r3, [pc, #332]	@ (800ac68 <Loop+0x29c>)
 800ab1a:	22a2      	movs	r2, #162	@ 0xa2
 800ab1c:	755a      	strb	r2, [r3, #21]
		line_graph[22] = 0x01;
 800ab1e:	4b52      	ldr	r3, [pc, #328]	@ (800ac68 <Loop+0x29c>)
 800ab20:	2201      	movs	r2, #1
 800ab22:	759a      	strb	r2, [r3, #22]
		line_graph[23] = 0x06;
 800ab24:	4b50      	ldr	r3, [pc, #320]	@ (800ac68 <Loop+0x29c>)
 800ab26:	2206      	movs	r2, #6
 800ab28:	75da      	strb	r2, [r3, #23]

		line_gr8[16] = y12;
 800ab2a:	4b4c      	ldr	r3, [pc, #304]	@ (800ac5c <Loop+0x290>)
 800ab2c:	781a      	ldrb	r2, [r3, #0]
 800ab2e:	4b4f      	ldr	r3, [pc, #316]	@ (800ac6c <Loop+0x2a0>)
 800ab30:	741a      	strb	r2, [r3, #16]
		line_gr8[17] = y2;
 800ab32:	4b4b      	ldr	r3, [pc, #300]	@ (800ac60 <Loop+0x294>)
 800ab34:	781a      	ldrb	r2, [r3, #0]
 800ab36:	4b4d      	ldr	r3, [pc, #308]	@ (800ac6c <Loop+0x2a0>)
 800ab38:	745a      	strb	r2, [r3, #17]
		line_gr8[18] = a1;
 800ab3a:	4b40      	ldr	r3, [pc, #256]	@ (800ac3c <Loop+0x270>)
 800ab3c:	781a      	ldrb	r2, [r3, #0]
 800ab3e:	4b4b      	ldr	r3, [pc, #300]	@ (800ac6c <Loop+0x2a0>)
 800ab40:	749a      	strb	r2, [r3, #18]
		line_gr8[19] = a2;
 800ab42:	4b3f      	ldr	r3, [pc, #252]	@ (800ac40 <Loop+0x274>)
 800ab44:	781a      	ldrb	r2, [r3, #0]
 800ab46:	4b49      	ldr	r3, [pc, #292]	@ (800ac6c <Loop+0x2a0>)
 800ab48:	74da      	strb	r2, [r3, #19]
		line_gr8[20] = 0x02;
 800ab4a:	4b48      	ldr	r3, [pc, #288]	@ (800ac6c <Loop+0x2a0>)
 800ab4c:	2202      	movs	r2, #2
 800ab4e:	751a      	strb	r2, [r3, #20]
		line_gr8[21] = 0xA2;
 800ab50:	4b46      	ldr	r3, [pc, #280]	@ (800ac6c <Loop+0x2a0>)
 800ab52:	22a2      	movs	r2, #162	@ 0xa2
 800ab54:	755a      	strb	r2, [r3, #21]
		line_gr8[22] = 0x01;
 800ab56:	4b45      	ldr	r3, [pc, #276]	@ (800ac6c <Loop+0x2a0>)
 800ab58:	2201      	movs	r2, #1
 800ab5a:	759a      	strb	r2, [r3, #22]
		line_gr8[23] = 0x07;
 800ab5c:	4b43      	ldr	r3, [pc, #268]	@ (800ac6c <Loop+0x2a0>)
 800ab5e:	2207      	movs	r2, #7
 800ab60:	75da      	strb	r2, [r3, #23]
		line_gr8[24] = y12;
 800ab62:	4b3e      	ldr	r3, [pc, #248]	@ (800ac5c <Loop+0x290>)
 800ab64:	781a      	ldrb	r2, [r3, #0]
 800ab66:	4b41      	ldr	r3, [pc, #260]	@ (800ac6c <Loop+0x2a0>)
 800ab68:	761a      	strb	r2, [r3, #24]
		line_gr8[25] = y2;
 800ab6a:	4b3d      	ldr	r3, [pc, #244]	@ (800ac60 <Loop+0x294>)
 800ab6c:	781a      	ldrb	r2, [r3, #0]
 800ab6e:	4b3f      	ldr	r3, [pc, #252]	@ (800ac6c <Loop+0x2a0>)
 800ab70:	765a      	strb	r2, [r3, #25]
		line_gr8[26] = a1;
 800ab72:	4b32      	ldr	r3, [pc, #200]	@ (800ac3c <Loop+0x270>)
 800ab74:	781a      	ldrb	r2, [r3, #0]
 800ab76:	4b3d      	ldr	r3, [pc, #244]	@ (800ac6c <Loop+0x2a0>)
 800ab78:	769a      	strb	r2, [r3, #26]
		line_gr8[27] = a2 + 1;
 800ab7a:	4b31      	ldr	r3, [pc, #196]	@ (800ac40 <Loop+0x274>)
 800ab7c:	781b      	ldrb	r3, [r3, #0]
 800ab7e:	3301      	adds	r3, #1
 800ab80:	b2da      	uxtb	r2, r3
 800ab82:	4b3a      	ldr	r3, [pc, #232]	@ (800ac6c <Loop+0x2a0>)
 800ab84:	76da      	strb	r2, [r3, #27]
		line_gr8[28] = 0x02;
 800ab86:	4b39      	ldr	r3, [pc, #228]	@ (800ac6c <Loop+0x2a0>)
 800ab88:	2202      	movs	r2, #2
 800ab8a:	771a      	strb	r2, [r3, #28]
		line_gr8[29] = 0xA2;
 800ab8c:	4b37      	ldr	r3, [pc, #220]	@ (800ac6c <Loop+0x2a0>)
 800ab8e:	22a2      	movs	r2, #162	@ 0xa2
 800ab90:	775a      	strb	r2, [r3, #29]
		line_gr8[30] = 0x01;
 800ab92:	4b36      	ldr	r3, [pc, #216]	@ (800ac6c <Loop+0x2a0>)
 800ab94:	2201      	movs	r2, #1
 800ab96:	779a      	strb	r2, [r3, #30]
		line_gr8[31] = 0x08;
 800ab98:	4b34      	ldr	r3, [pc, #208]	@ (800ac6c <Loop+0x2a0>)
 800ab9a:	2208      	movs	r2, #8
 800ab9c:	77da      	strb	r2, [r3, #31]
		line_gr8[32] = y12;
 800ab9e:	4b2f      	ldr	r3, [pc, #188]	@ (800ac5c <Loop+0x290>)
 800aba0:	781a      	ldrb	r2, [r3, #0]
 800aba2:	4b32      	ldr	r3, [pc, #200]	@ (800ac6c <Loop+0x2a0>)
 800aba4:	f883 2020 	strb.w	r2, [r3, #32]
		line_gr8[33] = y2;
 800aba8:	4b2d      	ldr	r3, [pc, #180]	@ (800ac60 <Loop+0x294>)
 800abaa:	781a      	ldrb	r2, [r3, #0]
 800abac:	4b2f      	ldr	r3, [pc, #188]	@ (800ac6c <Loop+0x2a0>)
 800abae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		line_gr8[34] = a1;
 800abb2:	4b22      	ldr	r3, [pc, #136]	@ (800ac3c <Loop+0x270>)
 800abb4:	781a      	ldrb	r2, [r3, #0]
 800abb6:	4b2d      	ldr	r3, [pc, #180]	@ (800ac6c <Loop+0x2a0>)
 800abb8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		line_gr8[35] = a2 + 2;
 800abbc:	4b20      	ldr	r3, [pc, #128]	@ (800ac40 <Loop+0x274>)
 800abbe:	781b      	ldrb	r3, [r3, #0]
 800abc0:	3302      	adds	r3, #2
 800abc2:	b2da      	uxtb	r2, r3
 800abc4:	4b29      	ldr	r3, [pc, #164]	@ (800ac6c <Loop+0x2a0>)
 800abc6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		line_gr8[36] = 0x02;
 800abca:	4b28      	ldr	r3, [pc, #160]	@ (800ac6c <Loop+0x2a0>)
 800abcc:	2202      	movs	r2, #2
 800abce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		line_gr8[37] = 0xA2;
 800abd2:	4b26      	ldr	r3, [pc, #152]	@ (800ac6c <Loop+0x2a0>)
 800abd4:	22a2      	movs	r2, #162	@ 0xa2
 800abd6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
		line_gr8[38] = 0x01;
 800abda:	4b24      	ldr	r3, [pc, #144]	@ (800ac6c <Loop+0x2a0>)
 800abdc:	2201      	movs	r2, #1
 800abde:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		line_gr8[39] = 0x09;
 800abe2:	4b22      	ldr	r3, [pc, #136]	@ (800ac6c <Loop+0x2a0>)
 800abe4:	2209      	movs	r2, #9
 800abe6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		line_gr8[40] = y12;
 800abea:	4b1c      	ldr	r3, [pc, #112]	@ (800ac5c <Loop+0x290>)
 800abec:	781a      	ldrb	r2, [r3, #0]
 800abee:	4b1f      	ldr	r3, [pc, #124]	@ (800ac6c <Loop+0x2a0>)
 800abf0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		line_gr8[41] = y2;
 800abf4:	4b1a      	ldr	r3, [pc, #104]	@ (800ac60 <Loop+0x294>)
 800abf6:	781a      	ldrb	r2, [r3, #0]
 800abf8:	4b1c      	ldr	r3, [pc, #112]	@ (800ac6c <Loop+0x2a0>)
 800abfa:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		line_gr8[42] = a1;
 800abfe:	4b0f      	ldr	r3, [pc, #60]	@ (800ac3c <Loop+0x270>)
 800ac00:	781a      	ldrb	r2, [r3, #0]
 800ac02:	4b1a      	ldr	r3, [pc, #104]	@ (800ac6c <Loop+0x2a0>)
 800ac04:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		line_gr8[43] = a2 + 3;
 800ac08:	4b0d      	ldr	r3, [pc, #52]	@ (800ac40 <Loop+0x274>)
 800ac0a:	781b      	ldrb	r3, [r3, #0]
 800ac0c:	3303      	adds	r3, #3
 800ac0e:	b2da      	uxtb	r2, r3
 800ac10:	4b16      	ldr	r3, [pc, #88]	@ (800ac6c <Loop+0x2a0>)
 800ac12:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

		for (int a = 0; a < 46; a++){
 800ac16:	2300      	movs	r3, #0
 800ac18:	60fb      	str	r3, [r7, #12]
 800ac1a:	e038      	b.n	800ac8e <Loop+0x2c2>
 800ac1c:	200012ec 	.word	0x200012ec
 800ac20:	43830000 	.word	0x43830000
 800ac24:	200012e4 	.word	0x200012e4
 800ac28:	08016124 	.word	0x08016124
 800ac2c:	20001a98 	.word	0x20001a98
 800ac30:	08016128 	.word	0x08016128
 800ac34:	20001aa0 	.word	0x20001aa0
 800ac38:	20001aa4 	.word	0x20001aa4
 800ac3c:	20001aa7 	.word	0x20001aa7
 800ac40:	20001aa8 	.word	0x20001aa8
 800ac44:	200012f0 	.word	0x200012f0
 800ac48:	44284000 	.word	0x44284000
 800ac4c:	200012e8 	.word	0x200012e8
 800ac50:	20001aac 	.word	0x20001aac
 800ac54:	20001ab4 	.word	0x20001ab4
 800ac58:	20001ab8 	.word	0x20001ab8
 800ac5c:	20001abb 	.word	0x20001abb
 800ac60:	20001abc 	.word	0x20001abc
 800ac64:	20000070 	.word	0x20000070
 800ac68:	20000088 	.word	0x20000088
 800ac6c:	200000a4 	.word	0x200000a4
			line_graph2[a] = line_gr8[a];
 800ac70:	4aa4      	ldr	r2, [pc, #656]	@ (800af04 <Loop+0x538>)
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	4413      	add	r3, r2
 800ac76:	7819      	ldrb	r1, [r3, #0]
 800ac78:	4aa3      	ldr	r2, [pc, #652]	@ (800af08 <Loop+0x53c>)
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	4413      	add	r3, r2
 800ac7e:	460a      	mov	r2, r1
 800ac80:	701a      	strb	r2, [r3, #0]
			loop_flag = 1;
 800ac82:	4ba2      	ldr	r3, [pc, #648]	@ (800af0c <Loop+0x540>)
 800ac84:	2201      	movs	r2, #1
 800ac86:	701a      	strb	r2, [r3, #0]
		for (int a = 0; a < 46; a++){
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	3301      	adds	r3, #1
 800ac8c:	60fb      	str	r3, [r7, #12]
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	2b2d      	cmp	r3, #45	@ 0x2d
 800ac92:	dded      	ble.n	800ac70 <Loop+0x2a4>
		}

		HAL_UART_Transmit(&huart1, line_graph2, sizeof(line_graph2), 6);
 800ac94:	2306      	movs	r3, #6
 800ac96:	222e      	movs	r2, #46	@ 0x2e
 800ac98:	499b      	ldr	r1, [pc, #620]	@ (800af08 <Loop+0x53c>)
 800ac9a:	489d      	ldr	r0, [pc, #628]	@ (800af10 <Loop+0x544>)
 800ac9c:	f006 f83a 	bl	8010d14 <HAL_UART_Transmit>

		if (VT_UPDATE_FLAG == 0){
 800aca0:	4b9c      	ldr	r3, [pc, #624]	@ (800af14 <Loop+0x548>)
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	f083 0301 	eor.w	r3, r3, #1
 800aca8:	b2db      	uxtb	r3, r3
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d025      	beq.n	800acfa <Loop+0x32e>
			m1 = y12;
 800acae:	4b9a      	ldr	r3, [pc, #616]	@ (800af18 <Loop+0x54c>)
 800acb0:	781a      	ldrb	r2, [r3, #0]
 800acb2:	4b9a      	ldr	r3, [pc, #616]	@ (800af1c <Loop+0x550>)
 800acb4:	701a      	strb	r2, [r3, #0]
			m2 = y2;
 800acb6:	4b9a      	ldr	r3, [pc, #616]	@ (800af20 <Loop+0x554>)
 800acb8:	781a      	ldrb	r2, [r3, #0]
 800acba:	4b9a      	ldr	r3, [pc, #616]	@ (800af24 <Loop+0x558>)
 800acbc:	701a      	strb	r2, [r3, #0]
			n1 = a1;
 800acbe:	4b9a      	ldr	r3, [pc, #616]	@ (800af28 <Loop+0x55c>)
 800acc0:	781a      	ldrb	r2, [r3, #0]
 800acc2:	4b9a      	ldr	r3, [pc, #616]	@ (800af2c <Loop+0x560>)
 800acc4:	701a      	strb	r2, [r3, #0]
			n2 = a2;
 800acc6:	4b9a      	ldr	r3, [pc, #616]	@ (800af30 <Loop+0x564>)
 800acc8:	781a      	ldrb	r2, [r3, #0]
 800acca:	4b9a      	ldr	r3, [pc, #616]	@ (800af34 <Loop+0x568>)
 800accc:	701a      	strb	r2, [r3, #0]
			o1 = p_x;
 800acce:	4b9a      	ldr	r3, [pc, #616]	@ (800af38 <Loop+0x56c>)
 800acd0:	edd3 7a00 	vldr	s15, [r3]
 800acd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800acd8:	edc7 7a00 	vstr	s15, [r7]
 800acdc:	783b      	ldrb	r3, [r7, #0]
 800acde:	b2da      	uxtb	r2, r3
 800ace0:	4b96      	ldr	r3, [pc, #600]	@ (800af3c <Loop+0x570>)
 800ace2:	701a      	strb	r2, [r3, #0]
			o2 = v_y;
 800ace4:	4b96      	ldr	r3, [pc, #600]	@ (800af40 <Loop+0x574>)
 800ace6:	edd3 7a00 	vldr	s15, [r3]
 800acea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800acee:	edc7 7a00 	vstr	s15, [r7]
 800acf2:	783b      	ldrb	r3, [r7, #0]
 800acf4:	b2da      	uxtb	r2, r3
 800acf6:	4b93      	ldr	r3, [pc, #588]	@ (800af44 <Loop+0x578>)
 800acf8:	701a      	strb	r2, [r3, #0]
			//			HAL_UART_Transmit(&huart1, line2, sizeof(line2), HAL_MAX_DELAY);

		}
		if(VT_UPDATE_FLAG == 1){
 800acfa:	4b86      	ldr	r3, [pc, #536]	@ (800af14 <Loop+0x548>)
 800acfc:	781b      	ldrb	r3, [r3, #0]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	f000 817d 	beq.w	800affe <Loop+0x632>
			n1n2 = (n1<<8) | n2;
 800ad04:	4b89      	ldr	r3, [pc, #548]	@ (800af2c <Loop+0x560>)
 800ad06:	781b      	ldrb	r3, [r3, #0]
 800ad08:	021b      	lsls	r3, r3, #8
 800ad0a:	4a8a      	ldr	r2, [pc, #552]	@ (800af34 <Loop+0x568>)
 800ad0c:	7812      	ldrb	r2, [r2, #0]
 800ad0e:	4313      	orrs	r3, r2
 800ad10:	461a      	mov	r2, r3
 800ad12:	4b8d      	ldr	r3, [pc, #564]	@ (800af48 <Loop+0x57c>)
 800ad14:	601a      	str	r2, [r3, #0]
			m1m2 = (m1<<8) | m2;
 800ad16:	4b81      	ldr	r3, [pc, #516]	@ (800af1c <Loop+0x550>)
 800ad18:	781b      	ldrb	r3, [r3, #0]
 800ad1a:	021b      	lsls	r3, r3, #8
 800ad1c:	4a81      	ldr	r2, [pc, #516]	@ (800af24 <Loop+0x558>)
 800ad1e:	7812      	ldrb	r2, [r2, #0]
 800ad20:	4313      	orrs	r3, r2
 800ad22:	461a      	mov	r2, r3
 800ad24:	4b89      	ldr	r3, [pc, #548]	@ (800af4c <Loop+0x580>)
 800ad26:	601a      	str	r2, [r3, #0]
			bc = 262 - v_y;
 800ad28:	4b85      	ldr	r3, [pc, #532]	@ (800af40 <Loop+0x574>)
 800ad2a:	edd3 7a00 	vldr	s15, [r3]
 800ad2e:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 800af50 <Loop+0x584>
 800ad32:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad3a:	ee17 3a90 	vmov	r3, s15
 800ad3e:	b29a      	uxth	r2, r3
 800ad40:	4b84      	ldr	r3, [pc, #528]	@ (800af54 <Loop+0x588>)
 800ad42:	801a      	strh	r2, [r3, #0]
			sprintf(v_x2String, "%X", bc);
 800ad44:	4b83      	ldr	r3, [pc, #524]	@ (800af54 <Loop+0x588>)
 800ad46:	881b      	ldrh	r3, [r3, #0]
 800ad48:	461a      	mov	r2, r3
 800ad4a:	4983      	ldr	r1, [pc, #524]	@ (800af58 <Loop+0x58c>)
 800ad4c:	4883      	ldr	r0, [pc, #524]	@ (800af5c <Loop+0x590>)
 800ad4e:	f00a fbed 	bl	801552c <siprintf>
			sprintf("hex %s", v_x2String);
 800ad52:	4982      	ldr	r1, [pc, #520]	@ (800af5c <Loop+0x590>)
 800ad54:	4882      	ldr	r0, [pc, #520]	@ (800af60 <Loop+0x594>)
 800ad56:	f00a fbe9 	bl	801552c <siprintf>
			v_x2[0] = '0';
 800ad5a:	4b82      	ldr	r3, [pc, #520]	@ (800af64 <Loop+0x598>)
 800ad5c:	2230      	movs	r2, #48	@ 0x30
 800ad5e:	701a      	strb	r2, [r3, #0]
			v_x2[1] = '0';
 800ad60:	4b80      	ldr	r3, [pc, #512]	@ (800af64 <Loop+0x598>)
 800ad62:	2230      	movs	r2, #48	@ 0x30
 800ad64:	705a      	strb	r2, [r3, #1]
			v_x2[2] = '\0';
 800ad66:	4b7f      	ldr	r3, [pc, #508]	@ (800af64 <Loop+0x598>)
 800ad68:	2200      	movs	r2, #0
 800ad6a:	709a      	strb	r2, [r3, #2]

			v_x4[0] = v_x2String[0];
 800ad6c:	4b7b      	ldr	r3, [pc, #492]	@ (800af5c <Loop+0x590>)
 800ad6e:	781a      	ldrb	r2, [r3, #0]
 800ad70:	4b7d      	ldr	r3, [pc, #500]	@ (800af68 <Loop+0x59c>)
 800ad72:	701a      	strb	r2, [r3, #0]
			v_x4[1] = v_x2String[1];
 800ad74:	4b79      	ldr	r3, [pc, #484]	@ (800af5c <Loop+0x590>)
 800ad76:	785a      	ldrb	r2, [r3, #1]
 800ad78:	4b7b      	ldr	r3, [pc, #492]	@ (800af68 <Loop+0x59c>)
 800ad7a:	705a      	strb	r2, [r3, #1]
			v_x4[2] = '\0';
 800ad7c:	4b7a      	ldr	r3, [pc, #488]	@ (800af68 <Loop+0x59c>)
 800ad7e:	2200      	movs	r2, #0
 800ad80:	709a      	strb	r2, [r3, #2]
			a3 = (uint8_t) strtol(v_x2, NULL, 16);
 800ad82:	2210      	movs	r2, #16
 800ad84:	2100      	movs	r1, #0
 800ad86:	4877      	ldr	r0, [pc, #476]	@ (800af64 <Loop+0x598>)
 800ad88:	f00a fbc6 	bl	8015518 <strtol>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	b2da      	uxtb	r2, r3
 800ad90:	4b76      	ldr	r3, [pc, #472]	@ (800af6c <Loop+0x5a0>)
 800ad92:	701a      	strb	r2, [r3, #0]
			a4 = (uint8_t) strtol(v_x4, NULL, 16);
 800ad94:	2210      	movs	r2, #16
 800ad96:	2100      	movs	r1, #0
 800ad98:	4873      	ldr	r0, [pc, #460]	@ (800af68 <Loop+0x59c>)
 800ad9a:	f00a fbbd 	bl	8015518 <strtol>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	b2da      	uxtb	r2, r3
 800ada2:	4b73      	ldr	r3, [pc, #460]	@ (800af70 <Loop+0x5a4>)
 800ada4:	701a      	strb	r2, [r3, #0]

			de = 684 + p_x1;
 800ada6:	4b73      	ldr	r3, [pc, #460]	@ (800af74 <Loop+0x5a8>)
 800ada8:	edd3 7a00 	vldr	s15, [r3]
 800adac:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 800af78 <Loop+0x5ac>
 800adb0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800adb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adb8:	ee17 3a90 	vmov	r3, s15
 800adbc:	b29a      	uxth	r2, r3
 800adbe:	4b6f      	ldr	r3, [pc, #444]	@ (800af7c <Loop+0x5b0>)
 800adc0:	801a      	strh	r2, [r3, #0]
			sprintf(v_y2String, "%X", de);
 800adc2:	4b6e      	ldr	r3, [pc, #440]	@ (800af7c <Loop+0x5b0>)
 800adc4:	881b      	ldrh	r3, [r3, #0]
 800adc6:	461a      	mov	r2, r3
 800adc8:	4963      	ldr	r1, [pc, #396]	@ (800af58 <Loop+0x58c>)
 800adca:	486d      	ldr	r0, [pc, #436]	@ (800af80 <Loop+0x5b4>)
 800adcc:	f00a fbae 	bl	801552c <siprintf>
			sprintf("hex %s", v_y2String);
 800add0:	496b      	ldr	r1, [pc, #428]	@ (800af80 <Loop+0x5b4>)
 800add2:	4863      	ldr	r0, [pc, #396]	@ (800af60 <Loop+0x594>)
 800add4:	f00a fbaa 	bl	801552c <siprintf>
			v_y2[0] = '0';
 800add8:	4b6a      	ldr	r3, [pc, #424]	@ (800af84 <Loop+0x5b8>)
 800adda:	2230      	movs	r2, #48	@ 0x30
 800addc:	701a      	strb	r2, [r3, #0]
			v_y2[1] = v_y2String[0];
 800adde:	4b68      	ldr	r3, [pc, #416]	@ (800af80 <Loop+0x5b4>)
 800ade0:	781a      	ldrb	r2, [r3, #0]
 800ade2:	4b68      	ldr	r3, [pc, #416]	@ (800af84 <Loop+0x5b8>)
 800ade4:	705a      	strb	r2, [r3, #1]
			v_y2[2] = '\0';
 800ade6:	4b67      	ldr	r3, [pc, #412]	@ (800af84 <Loop+0x5b8>)
 800ade8:	2200      	movs	r2, #0
 800adea:	709a      	strb	r2, [r3, #2]

			v_y4[0] = v_y2String[1];
 800adec:	4b64      	ldr	r3, [pc, #400]	@ (800af80 <Loop+0x5b4>)
 800adee:	785a      	ldrb	r2, [r3, #1]
 800adf0:	4b65      	ldr	r3, [pc, #404]	@ (800af88 <Loop+0x5bc>)
 800adf2:	701a      	strb	r2, [r3, #0]
			v_y4[1] = v_y2String[2];
 800adf4:	4b62      	ldr	r3, [pc, #392]	@ (800af80 <Loop+0x5b4>)
 800adf6:	789a      	ldrb	r2, [r3, #2]
 800adf8:	4b63      	ldr	r3, [pc, #396]	@ (800af88 <Loop+0x5bc>)
 800adfa:	705a      	strb	r2, [r3, #1]
			v_y4[2] = '\0';
 800adfc:	4b62      	ldr	r3, [pc, #392]	@ (800af88 <Loop+0x5bc>)
 800adfe:	2200      	movs	r2, #0
 800ae00:	709a      	strb	r2, [r3, #2]
			y3 = (uint8_t) strtol(v_y2, NULL, 16);
 800ae02:	2210      	movs	r2, #16
 800ae04:	2100      	movs	r1, #0
 800ae06:	485f      	ldr	r0, [pc, #380]	@ (800af84 <Loop+0x5b8>)
 800ae08:	f00a fb86 	bl	8015518 <strtol>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	b2da      	uxtb	r2, r3
 800ae10:	4b5e      	ldr	r3, [pc, #376]	@ (800af8c <Loop+0x5c0>)
 800ae12:	701a      	strb	r2, [r3, #0]
			y4 = (uint8_t) strtol(v_y4, NULL, 16);
 800ae14:	2210      	movs	r2, #16
 800ae16:	2100      	movs	r1, #0
 800ae18:	485b      	ldr	r0, [pc, #364]	@ (800af88 <Loop+0x5bc>)
 800ae1a:	f00a fb7d 	bl	8015518 <strtol>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	b2da      	uxtb	r2, r3
 800ae22:	4b5b      	ldr	r3, [pc, #364]	@ (800af90 <Loop+0x5c4>)
 800ae24:	701a      	strb	r2, [r3, #0]
			//			line_graph3[19] = n2;
			//			line_graph3[20] = y3;
			//			line_graph3[21] = y4;
			//			line_graph3[22] = a3;
			//			line_graph3[23] = a4;
			line_gr81[16] = m1;
 800ae26:	4b3d      	ldr	r3, [pc, #244]	@ (800af1c <Loop+0x550>)
 800ae28:	781a      	ldrb	r2, [r3, #0]
 800ae2a:	4b5a      	ldr	r3, [pc, #360]	@ (800af94 <Loop+0x5c8>)
 800ae2c:	741a      	strb	r2, [r3, #16]
			line_gr81[17] = m2;
 800ae2e:	4b3d      	ldr	r3, [pc, #244]	@ (800af24 <Loop+0x558>)
 800ae30:	781a      	ldrb	r2, [r3, #0]
 800ae32:	4b58      	ldr	r3, [pc, #352]	@ (800af94 <Loop+0x5c8>)
 800ae34:	745a      	strb	r2, [r3, #17]
			line_gr81[18] = n1;
 800ae36:	4b3d      	ldr	r3, [pc, #244]	@ (800af2c <Loop+0x560>)
 800ae38:	781a      	ldrb	r2, [r3, #0]
 800ae3a:	4b56      	ldr	r3, [pc, #344]	@ (800af94 <Loop+0x5c8>)
 800ae3c:	749a      	strb	r2, [r3, #18]
			line_gr81[19] = n2;
 800ae3e:	4b3d      	ldr	r3, [pc, #244]	@ (800af34 <Loop+0x568>)
 800ae40:	781a      	ldrb	r2, [r3, #0]
 800ae42:	4b54      	ldr	r3, [pc, #336]	@ (800af94 <Loop+0x5c8>)
 800ae44:	74da      	strb	r2, [r3, #19]
			line_gr81[20] = y3;
 800ae46:	4b51      	ldr	r3, [pc, #324]	@ (800af8c <Loop+0x5c0>)
 800ae48:	781a      	ldrb	r2, [r3, #0]
 800ae4a:	4b52      	ldr	r3, [pc, #328]	@ (800af94 <Loop+0x5c8>)
 800ae4c:	751a      	strb	r2, [r3, #20]
			line_gr81[21] = y4;
 800ae4e:	4b50      	ldr	r3, [pc, #320]	@ (800af90 <Loop+0x5c4>)
 800ae50:	781a      	ldrb	r2, [r3, #0]
 800ae52:	4b50      	ldr	r3, [pc, #320]	@ (800af94 <Loop+0x5c8>)
 800ae54:	755a      	strb	r2, [r3, #21]
			line_gr81[22] = a3;
 800ae56:	4b45      	ldr	r3, [pc, #276]	@ (800af6c <Loop+0x5a0>)
 800ae58:	781a      	ldrb	r2, [r3, #0]
 800ae5a:	4b4e      	ldr	r3, [pc, #312]	@ (800af94 <Loop+0x5c8>)
 800ae5c:	759a      	strb	r2, [r3, #22]
			line_gr81[23] = a4+1;
 800ae5e:	4b44      	ldr	r3, [pc, #272]	@ (800af70 <Loop+0x5a4>)
 800ae60:	781b      	ldrb	r3, [r3, #0]
 800ae62:	3301      	adds	r3, #1
 800ae64:	b2da      	uxtb	r2, r3
 800ae66:	4b4b      	ldr	r3, [pc, #300]	@ (800af94 <Loop+0x5c8>)
 800ae68:	75da      	strb	r2, [r3, #23]
			line_gr81[24] = m1;
 800ae6a:	4b2c      	ldr	r3, [pc, #176]	@ (800af1c <Loop+0x550>)
 800ae6c:	781a      	ldrb	r2, [r3, #0]
 800ae6e:	4b49      	ldr	r3, [pc, #292]	@ (800af94 <Loop+0x5c8>)
 800ae70:	761a      	strb	r2, [r3, #24]
			line_gr81[25] = m2;
 800ae72:	4b2c      	ldr	r3, [pc, #176]	@ (800af24 <Loop+0x558>)
 800ae74:	781a      	ldrb	r2, [r3, #0]
 800ae76:	4b47      	ldr	r3, [pc, #284]	@ (800af94 <Loop+0x5c8>)
 800ae78:	765a      	strb	r2, [r3, #25]
			line_gr81[26] = n1;
 800ae7a:	4b2c      	ldr	r3, [pc, #176]	@ (800af2c <Loop+0x560>)
 800ae7c:	781a      	ldrb	r2, [r3, #0]
 800ae7e:	4b45      	ldr	r3, [pc, #276]	@ (800af94 <Loop+0x5c8>)
 800ae80:	769a      	strb	r2, [r3, #26]
			line_gr81[27] = n2+1;
 800ae82:	4b2c      	ldr	r3, [pc, #176]	@ (800af34 <Loop+0x568>)
 800ae84:	781b      	ldrb	r3, [r3, #0]
 800ae86:	3301      	adds	r3, #1
 800ae88:	b2da      	uxtb	r2, r3
 800ae8a:	4b42      	ldr	r3, [pc, #264]	@ (800af94 <Loop+0x5c8>)
 800ae8c:	76da      	strb	r2, [r3, #27]
			line_gr81[28] = y3;
 800ae8e:	4b3f      	ldr	r3, [pc, #252]	@ (800af8c <Loop+0x5c0>)
 800ae90:	781a      	ldrb	r2, [r3, #0]
 800ae92:	4b40      	ldr	r3, [pc, #256]	@ (800af94 <Loop+0x5c8>)
 800ae94:	771a      	strb	r2, [r3, #28]
			line_gr81[29] = y4;
 800ae96:	4b3e      	ldr	r3, [pc, #248]	@ (800af90 <Loop+0x5c4>)
 800ae98:	781a      	ldrb	r2, [r3, #0]
 800ae9a:	4b3e      	ldr	r3, [pc, #248]	@ (800af94 <Loop+0x5c8>)
 800ae9c:	775a      	strb	r2, [r3, #29]
			line_gr81[30] = a3;
 800ae9e:	4b33      	ldr	r3, [pc, #204]	@ (800af6c <Loop+0x5a0>)
 800aea0:	781a      	ldrb	r2, [r3, #0]
 800aea2:	4b3c      	ldr	r3, [pc, #240]	@ (800af94 <Loop+0x5c8>)
 800aea4:	779a      	strb	r2, [r3, #30]
			line_gr81[31] = a4+2;
 800aea6:	4b32      	ldr	r3, [pc, #200]	@ (800af70 <Loop+0x5a4>)
 800aea8:	781b      	ldrb	r3, [r3, #0]
 800aeaa:	3302      	adds	r3, #2
 800aeac:	b2da      	uxtb	r2, r3
 800aeae:	4b39      	ldr	r3, [pc, #228]	@ (800af94 <Loop+0x5c8>)
 800aeb0:	77da      	strb	r2, [r3, #31]
			line_gr81[32] = m1;
 800aeb2:	4b1a      	ldr	r3, [pc, #104]	@ (800af1c <Loop+0x550>)
 800aeb4:	781a      	ldrb	r2, [r3, #0]
 800aeb6:	4b37      	ldr	r3, [pc, #220]	@ (800af94 <Loop+0x5c8>)
 800aeb8:	f883 2020 	strb.w	r2, [r3, #32]
			line_gr81[33] = m2;
 800aebc:	4b19      	ldr	r3, [pc, #100]	@ (800af24 <Loop+0x558>)
 800aebe:	781a      	ldrb	r2, [r3, #0]
 800aec0:	4b34      	ldr	r3, [pc, #208]	@ (800af94 <Loop+0x5c8>)
 800aec2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			line_gr81[34] = n1;
 800aec6:	4b19      	ldr	r3, [pc, #100]	@ (800af2c <Loop+0x560>)
 800aec8:	781a      	ldrb	r2, [r3, #0]
 800aeca:	4b32      	ldr	r3, [pc, #200]	@ (800af94 <Loop+0x5c8>)
 800aecc:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
			line_gr81[35] = n2+2;
 800aed0:	4b18      	ldr	r3, [pc, #96]	@ (800af34 <Loop+0x568>)
 800aed2:	781b      	ldrb	r3, [r3, #0]
 800aed4:	3302      	adds	r3, #2
 800aed6:	b2da      	uxtb	r2, r3
 800aed8:	4b2e      	ldr	r3, [pc, #184]	@ (800af94 <Loop+0x5c8>)
 800aeda:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
			line_gr81[36] = y3;
 800aede:	4b2b      	ldr	r3, [pc, #172]	@ (800af8c <Loop+0x5c0>)
 800aee0:	781a      	ldrb	r2, [r3, #0]
 800aee2:	4b2c      	ldr	r3, [pc, #176]	@ (800af94 <Loop+0x5c8>)
 800aee4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			line_gr81[37] = y4;
 800aee8:	4b29      	ldr	r3, [pc, #164]	@ (800af90 <Loop+0x5c4>)
 800aeea:	781a      	ldrb	r2, [r3, #0]
 800aeec:	4b29      	ldr	r3, [pc, #164]	@ (800af94 <Loop+0x5c8>)
 800aeee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			line_gr81[38] = a3;
 800aef2:	4b1e      	ldr	r3, [pc, #120]	@ (800af6c <Loop+0x5a0>)
 800aef4:	781a      	ldrb	r2, [r3, #0]
 800aef6:	4b27      	ldr	r3, [pc, #156]	@ (800af94 <Loop+0x5c8>)
 800aef8:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			line_gr81[39] = a4+3;
 800aefc:	4b1c      	ldr	r3, [pc, #112]	@ (800af70 <Loop+0x5a4>)
 800aefe:	781b      	ldrb	r3, [r3, #0]
 800af00:	e04a      	b.n	800af98 <Loop+0x5cc>
 800af02:	bf00      	nop
 800af04:	200000a4 	.word	0x200000a4
 800af08:	20001a1c 	.word	0x20001a1c
 800af0c:	20001ae5 	.word	0x20001ae5
 800af10:	20000fd0 	.word	0x20000fd0
 800af14:	20001414 	.word	0x20001414
 800af18:	20001abb 	.word	0x20001abb
 800af1c:	20001ae6 	.word	0x20001ae6
 800af20:	20001abc 	.word	0x20001abc
 800af24:	20001ae7 	.word	0x20001ae7
 800af28:	20001aa7 	.word	0x20001aa7
 800af2c:	20001ae8 	.word	0x20001ae8
 800af30:	20001aa8 	.word	0x20001aa8
 800af34:	20001ae9 	.word	0x20001ae9
 800af38:	200012f0 	.word	0x200012f0
 800af3c:	20001aea 	.word	0x20001aea
 800af40:	200012ec 	.word	0x200012ec
 800af44:	20001aeb 	.word	0x20001aeb
 800af48:	200012f8 	.word	0x200012f8
 800af4c:	200012fc 	.word	0x200012fc
 800af50:	43830000 	.word	0x43830000
 800af54:	200012e6 	.word	0x200012e6
 800af58:	08016124 	.word	0x08016124
 800af5c:	20001ac0 	.word	0x20001ac0
 800af60:	08016128 	.word	0x08016128
 800af64:	20001ac8 	.word	0x20001ac8
 800af68:	20001acc 	.word	0x20001acc
 800af6c:	20001acf 	.word	0x20001acf
 800af70:	20001ad0 	.word	0x20001ad0
 800af74:	200012f4 	.word	0x200012f4
 800af78:	442b0000 	.word	0x442b0000
 800af7c:	200012ea 	.word	0x200012ea
 800af80:	20001ad4 	.word	0x20001ad4
 800af84:	20001adc 	.word	0x20001adc
 800af88:	20001ae0 	.word	0x20001ae0
 800af8c:	20001ae3 	.word	0x20001ae3
 800af90:	20001ae4 	.word	0x20001ae4
 800af94:	200000d4 	.word	0x200000d4
 800af98:	3303      	adds	r3, #3
 800af9a:	b2da      	uxtb	r2, r3
 800af9c:	4b1a      	ldr	r3, [pc, #104]	@ (800b008 <Loop+0x63c>)
 800af9e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			line_gr81[40] = m1;
 800afa2:	4b1a      	ldr	r3, [pc, #104]	@ (800b00c <Loop+0x640>)
 800afa4:	781a      	ldrb	r2, [r3, #0]
 800afa6:	4b18      	ldr	r3, [pc, #96]	@ (800b008 <Loop+0x63c>)
 800afa8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			line_gr81[41] = m2;
 800afac:	4b18      	ldr	r3, [pc, #96]	@ (800b010 <Loop+0x644>)
 800afae:	781a      	ldrb	r2, [r3, #0]
 800afb0:	4b15      	ldr	r3, [pc, #84]	@ (800b008 <Loop+0x63c>)
 800afb2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			line_gr81[42] = n1;
 800afb6:	4b17      	ldr	r3, [pc, #92]	@ (800b014 <Loop+0x648>)
 800afb8:	781a      	ldrb	r2, [r3, #0]
 800afba:	4b13      	ldr	r3, [pc, #76]	@ (800b008 <Loop+0x63c>)
 800afbc:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			line_gr81[43] = n2+3;
 800afc0:	4b15      	ldr	r3, [pc, #84]	@ (800b018 <Loop+0x64c>)
 800afc2:	781b      	ldrb	r3, [r3, #0]
 800afc4:	3303      	adds	r3, #3
 800afc6:	b2da      	uxtb	r2, r3
 800afc8:	4b0f      	ldr	r3, [pc, #60]	@ (800b008 <Loop+0x63c>)
 800afca:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

			for (int a = 0; a < 46; a++){
 800afce:	2300      	movs	r3, #0
 800afd0:	60bb      	str	r3, [r7, #8]
 800afd2:	e00b      	b.n	800afec <Loop+0x620>
				//						line4[a] = line3[a];
				//				line_graph2[a] = line_graph3[a];
				line_graph2[a] = line_gr81[a];
 800afd4:	4a0c      	ldr	r2, [pc, #48]	@ (800b008 <Loop+0x63c>)
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	4413      	add	r3, r2
 800afda:	7819      	ldrb	r1, [r3, #0]
 800afdc:	4a0f      	ldr	r2, [pc, #60]	@ (800b01c <Loop+0x650>)
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	4413      	add	r3, r2
 800afe2:	460a      	mov	r2, r1
 800afe4:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 46; a++){
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	3301      	adds	r3, #1
 800afea:	60bb      	str	r3, [r7, #8]
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	2b2d      	cmp	r3, #45	@ 0x2d
 800aff0:	ddf0      	ble.n	800afd4 <Loop+0x608>
			}
			HAL_UART_Transmit(&huart1, line_graph2, sizeof(line_graph2), 6);
 800aff2:	2306      	movs	r3, #6
 800aff4:	222e      	movs	r2, #46	@ 0x2e
 800aff6:	4909      	ldr	r1, [pc, #36]	@ (800b01c <Loop+0x650>)
 800aff8:	4809      	ldr	r0, [pc, #36]	@ (800b020 <Loop+0x654>)
 800affa:	f005 fe8b 	bl	8010d14 <HAL_UART_Transmit>
		}

		vTaskDelay(pdMS_TO_TICKS(100));
 800affe:	2064      	movs	r0, #100	@ 0x64
 800b000:	f008 fa6c 	bl	80134dc <vTaskDelay>
		ab = 262 - v_y;
 800b004:	e4e6      	b.n	800a9d4 <Loop+0x8>
 800b006:	bf00      	nop
 800b008:	200000d4 	.word	0x200000d4
 800b00c:	20001ae6 	.word	0x20001ae6
 800b010:	20001ae7 	.word	0x20001ae7
 800b014:	20001ae8 	.word	0x20001ae8
 800b018:	20001ae9 	.word	0x20001ae9
 800b01c:	20001a1c 	.word	0x20001a1c
 800b020:	20000fd0 	.word	0x20000fd0

0800b024 <FVG>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_FVG */
void FVG(void const * argument)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b084      	sub	sp, #16
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN FVG */
	/* Infinite loop */
	for(;;)
	{
		vt_xc = 676 + vt_x;
 800b02c:	4b71      	ldr	r3, [pc, #452]	@ (800b1f4 <FVG+0x1d0>)
 800b02e:	edd3 7a00 	vldr	s15, [r3]
 800b032:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 800b1f8 <FVG+0x1d4>
 800b036:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b03a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b03e:	ee17 3a90 	vmov	r3, s15
 800b042:	b29a      	uxth	r2, r3
 800b044:	4b6d      	ldr	r3, [pc, #436]	@ (800b1fc <FVG+0x1d8>)
 800b046:	801a      	strh	r2, [r3, #0]
		sprintf(vt_xString, "%X", vt_xc);
 800b048:	4b6c      	ldr	r3, [pc, #432]	@ (800b1fc <FVG+0x1d8>)
 800b04a:	881b      	ldrh	r3, [r3, #0]
 800b04c:	461a      	mov	r2, r3
 800b04e:	496c      	ldr	r1, [pc, #432]	@ (800b200 <FVG+0x1dc>)
 800b050:	486c      	ldr	r0, [pc, #432]	@ (800b204 <FVG+0x1e0>)
 800b052:	f00a fa6b 	bl	801552c <siprintf>
		sprintf("hex %s", vt_xString);
 800b056:	496b      	ldr	r1, [pc, #428]	@ (800b204 <FVG+0x1e0>)
 800b058:	486b      	ldr	r0, [pc, #428]	@ (800b208 <FVG+0x1e4>)
 800b05a:	f00a fa67 	bl	801552c <siprintf>

		vt_x1[0] = '0';
 800b05e:	4b6b      	ldr	r3, [pc, #428]	@ (800b20c <FVG+0x1e8>)
 800b060:	2230      	movs	r2, #48	@ 0x30
 800b062:	701a      	strb	r2, [r3, #0]
		vt_x1[1] = vt_xString[0];
 800b064:	4b67      	ldr	r3, [pc, #412]	@ (800b204 <FVG+0x1e0>)
 800b066:	781a      	ldrb	r2, [r3, #0]
 800b068:	4b68      	ldr	r3, [pc, #416]	@ (800b20c <FVG+0x1e8>)
 800b06a:	705a      	strb	r2, [r3, #1]
		vt_x1[2] = '\0';
 800b06c:	4b67      	ldr	r3, [pc, #412]	@ (800b20c <FVG+0x1e8>)
 800b06e:	2200      	movs	r2, #0
 800b070:	709a      	strb	r2, [r3, #2]

		vt_x3[0] = vt_xString[1];
 800b072:	4b64      	ldr	r3, [pc, #400]	@ (800b204 <FVG+0x1e0>)
 800b074:	785a      	ldrb	r2, [r3, #1]
 800b076:	4b66      	ldr	r3, [pc, #408]	@ (800b210 <FVG+0x1ec>)
 800b078:	701a      	strb	r2, [r3, #0]
		vt_x3[1] = vt_xString[2];
 800b07a:	4b62      	ldr	r3, [pc, #392]	@ (800b204 <FVG+0x1e0>)
 800b07c:	789a      	ldrb	r2, [r3, #2]
 800b07e:	4b64      	ldr	r3, [pc, #400]	@ (800b210 <FVG+0x1ec>)
 800b080:	705a      	strb	r2, [r3, #1]
		vt_x3[2] = '\0';
 800b082:	4b63      	ldr	r3, [pc, #396]	@ (800b210 <FVG+0x1ec>)
 800b084:	2200      	movs	r2, #0
 800b086:	709a      	strb	r2, [r3, #2]

		v1 = (uint8_t) strtol(vt_x1, NULL, 16);
 800b088:	2210      	movs	r2, #16
 800b08a:	2100      	movs	r1, #0
 800b08c:	485f      	ldr	r0, [pc, #380]	@ (800b20c <FVG+0x1e8>)
 800b08e:	f00a fa43 	bl	8015518 <strtol>
 800b092:	4603      	mov	r3, r0
 800b094:	b2da      	uxtb	r2, r3
 800b096:	4b5f      	ldr	r3, [pc, #380]	@ (800b214 <FVG+0x1f0>)
 800b098:	701a      	strb	r2, [r3, #0]
		v2 = (uint8_t) strtol(vt_x3, NULL, 16);
 800b09a:	2210      	movs	r2, #16
 800b09c:	2100      	movs	r1, #0
 800b09e:	485c      	ldr	r0, [pc, #368]	@ (800b210 <FVG+0x1ec>)
 800b0a0:	f00a fa3a 	bl	8015518 <strtol>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	b2da      	uxtb	r2, r3
 800b0a8:	4b5b      	ldr	r3, [pc, #364]	@ (800b218 <FVG+0x1f4>)
 800b0aa:	701a      	strb	r2, [r3, #0]

		fl_yc = 422 - fl_y;
 800b0ac:	4b5b      	ldr	r3, [pc, #364]	@ (800b21c <FVG+0x1f8>)
 800b0ae:	edd3 7a00 	vldr	s15, [r3]
 800b0b2:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 800b220 <FVG+0x1fc>
 800b0b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b0ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0be:	ee17 3a90 	vmov	r3, s15
 800b0c2:	b29a      	uxth	r2, r3
 800b0c4:	4b57      	ldr	r3, [pc, #348]	@ (800b224 <FVG+0x200>)
 800b0c6:	801a      	strh	r2, [r3, #0]
		sprintf(f_yString, "%X", fl_yc);
 800b0c8:	4b56      	ldr	r3, [pc, #344]	@ (800b224 <FVG+0x200>)
 800b0ca:	881b      	ldrh	r3, [r3, #0]
 800b0cc:	461a      	mov	r2, r3
 800b0ce:	494c      	ldr	r1, [pc, #304]	@ (800b200 <FVG+0x1dc>)
 800b0d0:	4855      	ldr	r0, [pc, #340]	@ (800b228 <FVG+0x204>)
 800b0d2:	f00a fa2b 	bl	801552c <siprintf>
		sprintf("hex %s", f_yString);
 800b0d6:	4954      	ldr	r1, [pc, #336]	@ (800b228 <FVG+0x204>)
 800b0d8:	484b      	ldr	r0, [pc, #300]	@ (800b208 <FVG+0x1e4>)
 800b0da:	f00a fa27 	bl	801552c <siprintf>

		f_y1[0] = '0';
 800b0de:	4b53      	ldr	r3, [pc, #332]	@ (800b22c <FVG+0x208>)
 800b0e0:	2230      	movs	r2, #48	@ 0x30
 800b0e2:	701a      	strb	r2, [r3, #0]
		f_y1[1] = f_yString[0];
 800b0e4:	4b50      	ldr	r3, [pc, #320]	@ (800b228 <FVG+0x204>)
 800b0e6:	781a      	ldrb	r2, [r3, #0]
 800b0e8:	4b50      	ldr	r3, [pc, #320]	@ (800b22c <FVG+0x208>)
 800b0ea:	705a      	strb	r2, [r3, #1]
		f_y1[2] = '\0';
 800b0ec:	4b4f      	ldr	r3, [pc, #316]	@ (800b22c <FVG+0x208>)
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	709a      	strb	r2, [r3, #2]

		f_y3[0] = f_yString[1];
 800b0f2:	4b4d      	ldr	r3, [pc, #308]	@ (800b228 <FVG+0x204>)
 800b0f4:	785a      	ldrb	r2, [r3, #1]
 800b0f6:	4b4e      	ldr	r3, [pc, #312]	@ (800b230 <FVG+0x20c>)
 800b0f8:	701a      	strb	r2, [r3, #0]
		f_y3[1] = f_yString[2];
 800b0fa:	4b4b      	ldr	r3, [pc, #300]	@ (800b228 <FVG+0x204>)
 800b0fc:	789a      	ldrb	r2, [r3, #2]
 800b0fe:	4b4c      	ldr	r3, [pc, #304]	@ (800b230 <FVG+0x20c>)
 800b100:	705a      	strb	r2, [r3, #1]
		f_y3[2] = '\0';
 800b102:	4b4b      	ldr	r3, [pc, #300]	@ (800b230 <FVG+0x20c>)
 800b104:	2200      	movs	r2, #0
 800b106:	709a      	strb	r2, [r3, #2]

		f1 = (uint8_t) strtol(f_y1, NULL, 16);
 800b108:	2210      	movs	r2, #16
 800b10a:	2100      	movs	r1, #0
 800b10c:	4847      	ldr	r0, [pc, #284]	@ (800b22c <FVG+0x208>)
 800b10e:	f00a fa03 	bl	8015518 <strtol>
 800b112:	4603      	mov	r3, r0
 800b114:	b2da      	uxtb	r2, r3
 800b116:	4b47      	ldr	r3, [pc, #284]	@ (800b234 <FVG+0x210>)
 800b118:	701a      	strb	r2, [r3, #0]
		f2 = (uint8_t) strtol(f_y3, NULL, 16);
 800b11a:	2210      	movs	r2, #16
 800b11c:	2100      	movs	r1, #0
 800b11e:	4844      	ldr	r0, [pc, #272]	@ (800b230 <FVG+0x20c>)
 800b120:	f00a f9fa 	bl	8015518 <strtol>
 800b124:	4603      	mov	r3, r0
 800b126:	b2da      	uxtb	r2, r3
 800b128:	4b43      	ldr	r3, [pc, #268]	@ (800b238 <FVG+0x214>)
 800b12a:	701a      	strb	r2, [r3, #0]

		flowvt[16] = v1;
 800b12c:	4b39      	ldr	r3, [pc, #228]	@ (800b214 <FVG+0x1f0>)
 800b12e:	781a      	ldrb	r2, [r3, #0]
 800b130:	4b42      	ldr	r3, [pc, #264]	@ (800b23c <FVG+0x218>)
 800b132:	741a      	strb	r2, [r3, #16]
		flowvt[17] = v2;
 800b134:	4b38      	ldr	r3, [pc, #224]	@ (800b218 <FVG+0x1f4>)
 800b136:	781a      	ldrb	r2, [r3, #0]
 800b138:	4b40      	ldr	r3, [pc, #256]	@ (800b23c <FVG+0x218>)
 800b13a:	745a      	strb	r2, [r3, #17]
		flowvt[18] = f1;
 800b13c:	4b3d      	ldr	r3, [pc, #244]	@ (800b234 <FVG+0x210>)
 800b13e:	781a      	ldrb	r2, [r3, #0]
 800b140:	4b3e      	ldr	r3, [pc, #248]	@ (800b23c <FVG+0x218>)
 800b142:	749a      	strb	r2, [r3, #18]
		flowvt[19] = f2;
 800b144:	4b3c      	ldr	r3, [pc, #240]	@ (800b238 <FVG+0x214>)
 800b146:	781a      	ldrb	r2, [r3, #0]
 800b148:	4b3c      	ldr	r3, [pc, #240]	@ (800b23c <FVG+0x218>)
 800b14a:	74da      	strb	r2, [r3, #19]
		flowvt[20] = 0x02;
 800b14c:	4b3b      	ldr	r3, [pc, #236]	@ (800b23c <FVG+0x218>)
 800b14e:	2202      	movs	r2, #2
 800b150:	751a      	strb	r2, [r3, #20]
		flowvt[21] = 0xA4;
 800b152:	4b3a      	ldr	r3, [pc, #232]	@ (800b23c <FVG+0x218>)
 800b154:	22a4      	movs	r2, #164	@ 0xa4
 800b156:	755a      	strb	r2, [r3, #21]
		flowvt[22] = 0x01;
 800b158:	4b38      	ldr	r3, [pc, #224]	@ (800b23c <FVG+0x218>)
 800b15a:	2201      	movs	r2, #1
 800b15c:	759a      	strb	r2, [r3, #22]
		flowvt[23] = 0xA6;
 800b15e:	4b37      	ldr	r3, [pc, #220]	@ (800b23c <FVG+0x218>)
 800b160:	22a6      	movs	r2, #166	@ 0xa6
 800b162:	75da      	strb	r2, [r3, #23]
		flowvt[24] = v1;
 800b164:	4b2b      	ldr	r3, [pc, #172]	@ (800b214 <FVG+0x1f0>)
 800b166:	781a      	ldrb	r2, [r3, #0]
 800b168:	4b34      	ldr	r3, [pc, #208]	@ (800b23c <FVG+0x218>)
 800b16a:	761a      	strb	r2, [r3, #24]
		flowvt[25] = v2;
 800b16c:	4b2a      	ldr	r3, [pc, #168]	@ (800b218 <FVG+0x1f4>)
 800b16e:	781a      	ldrb	r2, [r3, #0]
 800b170:	4b32      	ldr	r3, [pc, #200]	@ (800b23c <FVG+0x218>)
 800b172:	765a      	strb	r2, [r3, #25]
		flowvt[26] = f1;
 800b174:	4b2f      	ldr	r3, [pc, #188]	@ (800b234 <FVG+0x210>)
 800b176:	781a      	ldrb	r2, [r3, #0]
 800b178:	4b30      	ldr	r3, [pc, #192]	@ (800b23c <FVG+0x218>)
 800b17a:	769a      	strb	r2, [r3, #26]
		flowvt[27] = f2+1;
 800b17c:	4b2e      	ldr	r3, [pc, #184]	@ (800b238 <FVG+0x214>)
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	3301      	adds	r3, #1
 800b182:	b2da      	uxtb	r2, r3
 800b184:	4b2d      	ldr	r3, [pc, #180]	@ (800b23c <FVG+0x218>)
 800b186:	76da      	strb	r2, [r3, #27]
		flowvt[28] = 0x02;
 800b188:	4b2c      	ldr	r3, [pc, #176]	@ (800b23c <FVG+0x218>)
 800b18a:	2202      	movs	r2, #2
 800b18c:	771a      	strb	r2, [r3, #28]
		flowvt[29] = 0xA4;
 800b18e:	4b2b      	ldr	r3, [pc, #172]	@ (800b23c <FVG+0x218>)
 800b190:	22a4      	movs	r2, #164	@ 0xa4
 800b192:	775a      	strb	r2, [r3, #29]
		flowvt[30] = 0x01;
 800b194:	4b29      	ldr	r3, [pc, #164]	@ (800b23c <FVG+0x218>)
 800b196:	2201      	movs	r2, #1
 800b198:	779a      	strb	r2, [r3, #30]
		flowvt[31] = 0xA7;
 800b19a:	4b28      	ldr	r3, [pc, #160]	@ (800b23c <FVG+0x218>)
 800b19c:	22a7      	movs	r2, #167	@ 0xa7
 800b19e:	77da      	strb	r2, [r3, #31]
		flowvt[32] = v1;
 800b1a0:	4b1c      	ldr	r3, [pc, #112]	@ (800b214 <FVG+0x1f0>)
 800b1a2:	781a      	ldrb	r2, [r3, #0]
 800b1a4:	4b25      	ldr	r3, [pc, #148]	@ (800b23c <FVG+0x218>)
 800b1a6:	f883 2020 	strb.w	r2, [r3, #32]
		flowvt[33] = v2;
 800b1aa:	4b1b      	ldr	r3, [pc, #108]	@ (800b218 <FVG+0x1f4>)
 800b1ac:	781a      	ldrb	r2, [r3, #0]
 800b1ae:	4b23      	ldr	r3, [pc, #140]	@ (800b23c <FVG+0x218>)
 800b1b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		flowvt[34] = f1;
 800b1b4:	4b1f      	ldr	r3, [pc, #124]	@ (800b234 <FVG+0x210>)
 800b1b6:	781a      	ldrb	r2, [r3, #0]
 800b1b8:	4b20      	ldr	r3, [pc, #128]	@ (800b23c <FVG+0x218>)
 800b1ba:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		flowvt[35] = f2+2;
 800b1be:	4b1e      	ldr	r3, [pc, #120]	@ (800b238 <FVG+0x214>)
 800b1c0:	781b      	ldrb	r3, [r3, #0]
 800b1c2:	3302      	adds	r3, #2
 800b1c4:	b2da      	uxtb	r2, r3
 800b1c6:	4b1d      	ldr	r3, [pc, #116]	@ (800b23c <FVG+0x218>)
 800b1c8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		flowvt[36] = 0x02;
 800b1cc:	4b1b      	ldr	r3, [pc, #108]	@ (800b23c <FVG+0x218>)
 800b1ce:	2202      	movs	r2, #2
 800b1d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		flowvt[37] = 0xA4;
 800b1d4:	4b19      	ldr	r3, [pc, #100]	@ (800b23c <FVG+0x218>)
 800b1d6:	22a4      	movs	r2, #164	@ 0xa4
 800b1d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
		flowvt[38] = 0x01;
 800b1dc:	4b17      	ldr	r3, [pc, #92]	@ (800b23c <FVG+0x218>)
 800b1de:	2201      	movs	r2, #1
 800b1e0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		flowvt[39] = 0xA8;
 800b1e4:	4b15      	ldr	r3, [pc, #84]	@ (800b23c <FVG+0x218>)
 800b1e6:	22a8      	movs	r2, #168	@ 0xa8
 800b1e8:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27


		for (int a = 0; a < 42; a++){
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	60fb      	str	r3, [r7, #12]
 800b1f0:	e032      	b.n	800b258 <FVG+0x234>
 800b1f2:	bf00      	nop
 800b1f4:	20001304 	.word	0x20001304
 800b1f8:	44290000 	.word	0x44290000
 800b1fc:	20001310 	.word	0x20001310
 800b200:	08016124 	.word	0x08016124
 800b204:	20001af0 	.word	0x20001af0
 800b208:	08016128 	.word	0x08016128
 800b20c:	20001af8 	.word	0x20001af8
 800b210:	20001afc 	.word	0x20001afc
 800b214:	20001aff 	.word	0x20001aff
 800b218:	20001b00 	.word	0x20001b00
 800b21c:	20001308 	.word	0x20001308
 800b220:	43d30000 	.word	0x43d30000
 800b224:	20001312 	.word	0x20001312
 800b228:	20001b04 	.word	0x20001b04
 800b22c:	20001b0c 	.word	0x20001b0c
 800b230:	20001b10 	.word	0x20001b10
 800b234:	20001b13 	.word	0x20001b13
 800b238:	20001b14 	.word	0x20001b14
 800b23c:	20000104 	.word	0x20000104
			//						line4[a] = line3[a];
			//				line_graph2[a] = line_graph3[a];
			fvg[a] = flowvt[a];
 800b240:	4a5e      	ldr	r2, [pc, #376]	@ (800b3bc <FVG+0x398>)
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	4413      	add	r3, r2
 800b246:	7819      	ldrb	r1, [r3, #0]
 800b248:	4a5d      	ldr	r2, [pc, #372]	@ (800b3c0 <FVG+0x39c>)
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	4413      	add	r3, r2
 800b24e:	460a      	mov	r2, r1
 800b250:	701a      	strb	r2, [r3, #0]
		for (int a = 0; a < 42; a++){
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	3301      	adds	r3, #1
 800b256:	60fb      	str	r3, [r7, #12]
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	2b29      	cmp	r3, #41	@ 0x29
 800b25c:	ddf0      	ble.n	800b240 <FVG+0x21c>
		}
		HAL_UART_Transmit(&huart1, fvg, sizeof(fvg), 6);
 800b25e:	2306      	movs	r3, #6
 800b260:	222a      	movs	r2, #42	@ 0x2a
 800b262:	4957      	ldr	r1, [pc, #348]	@ (800b3c0 <FVG+0x39c>)
 800b264:	4857      	ldr	r0, [pc, #348]	@ (800b3c4 <FVG+0x3a0>)
 800b266:	f005 fd55 	bl	8010d14 <HAL_UART_Transmit>

		if (VT_UPDATE_FLAG == 0){
 800b26a:	4b57      	ldr	r3, [pc, #348]	@ (800b3c8 <FVG+0x3a4>)
 800b26c:	781b      	ldrb	r3, [r3, #0]
 800b26e:	f083 0301 	eor.w	r3, r3, #1
 800b272:	b2db      	uxtb	r3, r3
 800b274:	2b00      	cmp	r3, #0
 800b276:	d00f      	beq.n	800b298 <FVG+0x274>
			i1 = v1;
 800b278:	4b54      	ldr	r3, [pc, #336]	@ (800b3cc <FVG+0x3a8>)
 800b27a:	781a      	ldrb	r2, [r3, #0]
 800b27c:	4b54      	ldr	r3, [pc, #336]	@ (800b3d0 <FVG+0x3ac>)
 800b27e:	701a      	strb	r2, [r3, #0]
			i2 = v2;
 800b280:	4b54      	ldr	r3, [pc, #336]	@ (800b3d4 <FVG+0x3b0>)
 800b282:	781a      	ldrb	r2, [r3, #0]
 800b284:	4b54      	ldr	r3, [pc, #336]	@ (800b3d8 <FVG+0x3b4>)
 800b286:	701a      	strb	r2, [r3, #0]
			k1 = f1;
 800b288:	4b54      	ldr	r3, [pc, #336]	@ (800b3dc <FVG+0x3b8>)
 800b28a:	781a      	ldrb	r2, [r3, #0]
 800b28c:	4b54      	ldr	r3, [pc, #336]	@ (800b3e0 <FVG+0x3bc>)
 800b28e:	701a      	strb	r2, [r3, #0]
			k2 = f2;
 800b290:	4b54      	ldr	r3, [pc, #336]	@ (800b3e4 <FVG+0x3c0>)
 800b292:	781a      	ldrb	r2, [r3, #0]
 800b294:	4b54      	ldr	r3, [pc, #336]	@ (800b3e8 <FVG+0x3c4>)
 800b296:	701a      	strb	r2, [r3, #0]
		}
		if (VT_UPDATE_FLAG == 1){
 800b298:	4b4b      	ldr	r3, [pc, #300]	@ (800b3c8 <FVG+0x3a4>)
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	f000 8088 	beq.w	800b3b2 <FVG+0x38e>
			flowvt[16] = i1;
 800b2a2:	4b4b      	ldr	r3, [pc, #300]	@ (800b3d0 <FVG+0x3ac>)
 800b2a4:	781a      	ldrb	r2, [r3, #0]
 800b2a6:	4b45      	ldr	r3, [pc, #276]	@ (800b3bc <FVG+0x398>)
 800b2a8:	741a      	strb	r2, [r3, #16]
			flowvt[17] = i2;
 800b2aa:	4b4b      	ldr	r3, [pc, #300]	@ (800b3d8 <FVG+0x3b4>)
 800b2ac:	781a      	ldrb	r2, [r3, #0]
 800b2ae:	4b43      	ldr	r3, [pc, #268]	@ (800b3bc <FVG+0x398>)
 800b2b0:	745a      	strb	r2, [r3, #17]
			flowvt[18] = k1;
 800b2b2:	4b4b      	ldr	r3, [pc, #300]	@ (800b3e0 <FVG+0x3bc>)
 800b2b4:	781a      	ldrb	r2, [r3, #0]
 800b2b6:	4b41      	ldr	r3, [pc, #260]	@ (800b3bc <FVG+0x398>)
 800b2b8:	749a      	strb	r2, [r3, #18]
			flowvt[19] = k2;
 800b2ba:	4b4b      	ldr	r3, [pc, #300]	@ (800b3e8 <FVG+0x3c4>)
 800b2bc:	781a      	ldrb	r2, [r3, #0]
 800b2be:	4b3f      	ldr	r3, [pc, #252]	@ (800b3bc <FVG+0x398>)
 800b2c0:	74da      	strb	r2, [r3, #19]
			flowvt[20] = v1;
 800b2c2:	4b42      	ldr	r3, [pc, #264]	@ (800b3cc <FVG+0x3a8>)
 800b2c4:	781a      	ldrb	r2, [r3, #0]
 800b2c6:	4b3d      	ldr	r3, [pc, #244]	@ (800b3bc <FVG+0x398>)
 800b2c8:	751a      	strb	r2, [r3, #20]
			flowvt[21] = v2;
 800b2ca:	4b42      	ldr	r3, [pc, #264]	@ (800b3d4 <FVG+0x3b0>)
 800b2cc:	781a      	ldrb	r2, [r3, #0]
 800b2ce:	4b3b      	ldr	r3, [pc, #236]	@ (800b3bc <FVG+0x398>)
 800b2d0:	755a      	strb	r2, [r3, #21]
			flowvt[22] = f1;
 800b2d2:	4b42      	ldr	r3, [pc, #264]	@ (800b3dc <FVG+0x3b8>)
 800b2d4:	781a      	ldrb	r2, [r3, #0]
 800b2d6:	4b39      	ldr	r3, [pc, #228]	@ (800b3bc <FVG+0x398>)
 800b2d8:	759a      	strb	r2, [r3, #22]
			flowvt[23] = f2;
 800b2da:	4b42      	ldr	r3, [pc, #264]	@ (800b3e4 <FVG+0x3c0>)
 800b2dc:	781a      	ldrb	r2, [r3, #0]
 800b2de:	4b37      	ldr	r3, [pc, #220]	@ (800b3bc <FVG+0x398>)
 800b2e0:	75da      	strb	r2, [r3, #23]
			flowvt[24] = i1;
 800b2e2:	4b3b      	ldr	r3, [pc, #236]	@ (800b3d0 <FVG+0x3ac>)
 800b2e4:	781a      	ldrb	r2, [r3, #0]
 800b2e6:	4b35      	ldr	r3, [pc, #212]	@ (800b3bc <FVG+0x398>)
 800b2e8:	761a      	strb	r2, [r3, #24]
			flowvt[25] = i2;
 800b2ea:	4b3b      	ldr	r3, [pc, #236]	@ (800b3d8 <FVG+0x3b4>)
 800b2ec:	781a      	ldrb	r2, [r3, #0]
 800b2ee:	4b33      	ldr	r3, [pc, #204]	@ (800b3bc <FVG+0x398>)
 800b2f0:	765a      	strb	r2, [r3, #25]
			flowvt[26] = k1;
 800b2f2:	4b3b      	ldr	r3, [pc, #236]	@ (800b3e0 <FVG+0x3bc>)
 800b2f4:	781a      	ldrb	r2, [r3, #0]
 800b2f6:	4b31      	ldr	r3, [pc, #196]	@ (800b3bc <FVG+0x398>)
 800b2f8:	769a      	strb	r2, [r3, #26]
			flowvt[27] = k2+1;
 800b2fa:	4b3b      	ldr	r3, [pc, #236]	@ (800b3e8 <FVG+0x3c4>)
 800b2fc:	781b      	ldrb	r3, [r3, #0]
 800b2fe:	3301      	adds	r3, #1
 800b300:	b2da      	uxtb	r2, r3
 800b302:	4b2e      	ldr	r3, [pc, #184]	@ (800b3bc <FVG+0x398>)
 800b304:	76da      	strb	r2, [r3, #27]
			flowvt[28] = v1;
 800b306:	4b31      	ldr	r3, [pc, #196]	@ (800b3cc <FVG+0x3a8>)
 800b308:	781a      	ldrb	r2, [r3, #0]
 800b30a:	4b2c      	ldr	r3, [pc, #176]	@ (800b3bc <FVG+0x398>)
 800b30c:	771a      	strb	r2, [r3, #28]
			flowvt[29] = v2;
 800b30e:	4b31      	ldr	r3, [pc, #196]	@ (800b3d4 <FVG+0x3b0>)
 800b310:	781a      	ldrb	r2, [r3, #0]
 800b312:	4b2a      	ldr	r3, [pc, #168]	@ (800b3bc <FVG+0x398>)
 800b314:	775a      	strb	r2, [r3, #29]
			flowvt[30] = f1;
 800b316:	4b31      	ldr	r3, [pc, #196]	@ (800b3dc <FVG+0x3b8>)
 800b318:	781a      	ldrb	r2, [r3, #0]
 800b31a:	4b28      	ldr	r3, [pc, #160]	@ (800b3bc <FVG+0x398>)
 800b31c:	779a      	strb	r2, [r3, #30]
			flowvt[31] = f2+1;
 800b31e:	4b31      	ldr	r3, [pc, #196]	@ (800b3e4 <FVG+0x3c0>)
 800b320:	781b      	ldrb	r3, [r3, #0]
 800b322:	3301      	adds	r3, #1
 800b324:	b2da      	uxtb	r2, r3
 800b326:	4b25      	ldr	r3, [pc, #148]	@ (800b3bc <FVG+0x398>)
 800b328:	77da      	strb	r2, [r3, #31]
			flowvt[32] = i1;
 800b32a:	4b29      	ldr	r3, [pc, #164]	@ (800b3d0 <FVG+0x3ac>)
 800b32c:	781a      	ldrb	r2, [r3, #0]
 800b32e:	4b23      	ldr	r3, [pc, #140]	@ (800b3bc <FVG+0x398>)
 800b330:	f883 2020 	strb.w	r2, [r3, #32]
			flowvt[33] = i2;
 800b334:	4b28      	ldr	r3, [pc, #160]	@ (800b3d8 <FVG+0x3b4>)
 800b336:	781a      	ldrb	r2, [r3, #0]
 800b338:	4b20      	ldr	r3, [pc, #128]	@ (800b3bc <FVG+0x398>)
 800b33a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			flowvt[34] = k1;
 800b33e:	4b28      	ldr	r3, [pc, #160]	@ (800b3e0 <FVG+0x3bc>)
 800b340:	781a      	ldrb	r2, [r3, #0]
 800b342:	4b1e      	ldr	r3, [pc, #120]	@ (800b3bc <FVG+0x398>)
 800b344:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
			flowvt[35] = k2+2;
 800b348:	4b27      	ldr	r3, [pc, #156]	@ (800b3e8 <FVG+0x3c4>)
 800b34a:	781b      	ldrb	r3, [r3, #0]
 800b34c:	3302      	adds	r3, #2
 800b34e:	b2da      	uxtb	r2, r3
 800b350:	4b1a      	ldr	r3, [pc, #104]	@ (800b3bc <FVG+0x398>)
 800b352:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
			flowvt[36] = v1;
 800b356:	4b1d      	ldr	r3, [pc, #116]	@ (800b3cc <FVG+0x3a8>)
 800b358:	781a      	ldrb	r2, [r3, #0]
 800b35a:	4b18      	ldr	r3, [pc, #96]	@ (800b3bc <FVG+0x398>)
 800b35c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			flowvt[37] = v2;
 800b360:	4b1c      	ldr	r3, [pc, #112]	@ (800b3d4 <FVG+0x3b0>)
 800b362:	781a      	ldrb	r2, [r3, #0]
 800b364:	4b15      	ldr	r3, [pc, #84]	@ (800b3bc <FVG+0x398>)
 800b366:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			flowvt[38] = f1;
 800b36a:	4b1c      	ldr	r3, [pc, #112]	@ (800b3dc <FVG+0x3b8>)
 800b36c:	781a      	ldrb	r2, [r3, #0]
 800b36e:	4b13      	ldr	r3, [pc, #76]	@ (800b3bc <FVG+0x398>)
 800b370:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			flowvt[39] = f2+2;
 800b374:	4b1b      	ldr	r3, [pc, #108]	@ (800b3e4 <FVG+0x3c0>)
 800b376:	781b      	ldrb	r3, [r3, #0]
 800b378:	3302      	adds	r3, #2
 800b37a:	b2da      	uxtb	r2, r3
 800b37c:	4b0f      	ldr	r3, [pc, #60]	@ (800b3bc <FVG+0x398>)
 800b37e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27


			for (int a = 0; a < 42; a++){
 800b382:	2300      	movs	r3, #0
 800b384:	60bb      	str	r3, [r7, #8]
 800b386:	e00b      	b.n	800b3a0 <FVG+0x37c>
				//						line4[a] = line3[a];
				//				line_graph2[a] = line_graph3[a];
				fvg[a] = flowvt[a];
 800b388:	4a0c      	ldr	r2, [pc, #48]	@ (800b3bc <FVG+0x398>)
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	4413      	add	r3, r2
 800b38e:	7819      	ldrb	r1, [r3, #0]
 800b390:	4a0b      	ldr	r2, [pc, #44]	@ (800b3c0 <FVG+0x39c>)
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	4413      	add	r3, r2
 800b396:	460a      	mov	r2, r1
 800b398:	701a      	strb	r2, [r3, #0]
			for (int a = 0; a < 42; a++){
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	3301      	adds	r3, #1
 800b39e:	60bb      	str	r3, [r7, #8]
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	2b29      	cmp	r3, #41	@ 0x29
 800b3a4:	ddf0      	ble.n	800b388 <FVG+0x364>
			}

			HAL_UART_Transmit(&huart1, fvg, sizeof(fvg), 6);
 800b3a6:	2306      	movs	r3, #6
 800b3a8:	222a      	movs	r2, #42	@ 0x2a
 800b3aa:	4905      	ldr	r1, [pc, #20]	@ (800b3c0 <FVG+0x39c>)
 800b3ac:	4805      	ldr	r0, [pc, #20]	@ (800b3c4 <FVG+0x3a0>)
 800b3ae:	f005 fcb1 	bl	8010d14 <HAL_UART_Transmit>

		}
		vTaskDelay(pdMS_TO_TICKS(100));
 800b3b2:	2064      	movs	r0, #100	@ 0x64
 800b3b4:	f008 f892 	bl	80134dc <vTaskDelay>
		vt_xc = 676 + vt_x;
 800b3b8:	e638      	b.n	800b02c <FVG+0x8>
 800b3ba:	bf00      	nop
 800b3bc:	20000104 	.word	0x20000104
 800b3c0:	20001a4c 	.word	0x20001a4c
 800b3c4:	20000fd0 	.word	0x20000fd0
 800b3c8:	20001414 	.word	0x20001414
 800b3cc:	20001aff 	.word	0x20001aff
 800b3d0:	20001b15 	.word	0x20001b15
 800b3d4:	20001b00 	.word	0x20001b00
 800b3d8:	20001b16 	.word	0x20001b16
 800b3dc:	20001b13 	.word	0x20001b13
 800b3e0:	20001b17 	.word	0x20001b17
 800b3e4:	20001b14 	.word	0x20001b14
 800b3e8:	20001b18 	.word	0x20001b18

0800b3ec <backup>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_backup */
void backup(void const * argument)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b092      	sub	sp, #72	@ 0x48
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN backup */
	/* Infinite loop */
	for(;;)
	{

		uint8_t arr[50] = {PLR_value, RR_value, insP_value, exp_value, PU_value, TRG_value, PIP_value, PEEP_value, P_peak_alarm_max_value, P_peak_alarm_min_value, MV_alarm_max_value, MV_alarm_min_value, RR_alarm_max_value, RR_alarm_min_value, peep_alarm_max_value, peep_alarm_min_value, O2_alarm_max_value, O2_alarm_min_value, PS_value, RR_temp_value, mode_select_number, m_icon_add, O2_flag, Compliance_Adult_Flag, Compliance_Neonate_Flag};
 800b3f4:	f107 0308 	add.w	r3, r7, #8
 800b3f8:	2232      	movs	r2, #50	@ 0x32
 800b3fa:	2100      	movs	r1, #0
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f00a f8b7 	bl	8015570 <memset>
 800b402:	4b2f      	ldr	r3, [pc, #188]	@ (800b4c0 <backup+0xd4>)
 800b404:	781b      	ldrb	r3, [r3, #0]
 800b406:	723b      	strb	r3, [r7, #8]
 800b408:	4b2e      	ldr	r3, [pc, #184]	@ (800b4c4 <backup+0xd8>)
 800b40a:	781b      	ldrb	r3, [r3, #0]
 800b40c:	727b      	strb	r3, [r7, #9]
 800b40e:	4b2e      	ldr	r3, [pc, #184]	@ (800b4c8 <backup+0xdc>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	b2db      	uxtb	r3, r3
 800b414:	72bb      	strb	r3, [r7, #10]
 800b416:	4b2d      	ldr	r3, [pc, #180]	@ (800b4cc <backup+0xe0>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	b2db      	uxtb	r3, r3
 800b41c:	72fb      	strb	r3, [r7, #11]
 800b41e:	4b2c      	ldr	r3, [pc, #176]	@ (800b4d0 <backup+0xe4>)
 800b420:	781b      	ldrb	r3, [r3, #0]
 800b422:	733b      	strb	r3, [r7, #12]
 800b424:	4b2b      	ldr	r3, [pc, #172]	@ (800b4d4 <backup+0xe8>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	b2db      	uxtb	r3, r3
 800b42a:	737b      	strb	r3, [r7, #13]
 800b42c:	4b2a      	ldr	r3, [pc, #168]	@ (800b4d8 <backup+0xec>)
 800b42e:	f993 3000 	ldrsb.w	r3, [r3]
 800b432:	b2db      	uxtb	r3, r3
 800b434:	73bb      	strb	r3, [r7, #14]
 800b436:	4b29      	ldr	r3, [pc, #164]	@ (800b4dc <backup+0xf0>)
 800b438:	781b      	ldrb	r3, [r3, #0]
 800b43a:	73fb      	strb	r3, [r7, #15]
 800b43c:	4b28      	ldr	r3, [pc, #160]	@ (800b4e0 <backup+0xf4>)
 800b43e:	781b      	ldrb	r3, [r3, #0]
 800b440:	743b      	strb	r3, [r7, #16]
 800b442:	4b28      	ldr	r3, [pc, #160]	@ (800b4e4 <backup+0xf8>)
 800b444:	781b      	ldrb	r3, [r3, #0]
 800b446:	747b      	strb	r3, [r7, #17]
 800b448:	4b27      	ldr	r3, [pc, #156]	@ (800b4e8 <backup+0xfc>)
 800b44a:	781b      	ldrb	r3, [r3, #0]
 800b44c:	74bb      	strb	r3, [r7, #18]
 800b44e:	4b27      	ldr	r3, [pc, #156]	@ (800b4ec <backup+0x100>)
 800b450:	781b      	ldrb	r3, [r3, #0]
 800b452:	74fb      	strb	r3, [r7, #19]
 800b454:	4b26      	ldr	r3, [pc, #152]	@ (800b4f0 <backup+0x104>)
 800b456:	781b      	ldrb	r3, [r3, #0]
 800b458:	753b      	strb	r3, [r7, #20]
 800b45a:	4b26      	ldr	r3, [pc, #152]	@ (800b4f4 <backup+0x108>)
 800b45c:	781b      	ldrb	r3, [r3, #0]
 800b45e:	757b      	strb	r3, [r7, #21]
 800b460:	4b25      	ldr	r3, [pc, #148]	@ (800b4f8 <backup+0x10c>)
 800b462:	781b      	ldrb	r3, [r3, #0]
 800b464:	75bb      	strb	r3, [r7, #22]
 800b466:	4b25      	ldr	r3, [pc, #148]	@ (800b4fc <backup+0x110>)
 800b468:	781b      	ldrb	r3, [r3, #0]
 800b46a:	75fb      	strb	r3, [r7, #23]
 800b46c:	4b24      	ldr	r3, [pc, #144]	@ (800b500 <backup+0x114>)
 800b46e:	781b      	ldrb	r3, [r3, #0]
 800b470:	763b      	strb	r3, [r7, #24]
 800b472:	4b24      	ldr	r3, [pc, #144]	@ (800b504 <backup+0x118>)
 800b474:	781b      	ldrb	r3, [r3, #0]
 800b476:	767b      	strb	r3, [r7, #25]
 800b478:	4b23      	ldr	r3, [pc, #140]	@ (800b508 <backup+0x11c>)
 800b47a:	781b      	ldrb	r3, [r3, #0]
 800b47c:	76bb      	strb	r3, [r7, #26]
 800b47e:	4b23      	ldr	r3, [pc, #140]	@ (800b50c <backup+0x120>)
 800b480:	781b      	ldrb	r3, [r3, #0]
 800b482:	76fb      	strb	r3, [r7, #27]
 800b484:	4b22      	ldr	r3, [pc, #136]	@ (800b510 <backup+0x124>)
 800b486:	781b      	ldrb	r3, [r3, #0]
 800b488:	773b      	strb	r3, [r7, #28]
 800b48a:	4b22      	ldr	r3, [pc, #136]	@ (800b514 <backup+0x128>)
 800b48c:	781b      	ldrb	r3, [r3, #0]
 800b48e:	777b      	strb	r3, [r7, #29]
 800b490:	4b21      	ldr	r3, [pc, #132]	@ (800b518 <backup+0x12c>)
 800b492:	781b      	ldrb	r3, [r3, #0]
 800b494:	77bb      	strb	r3, [r7, #30]
 800b496:	4b21      	ldr	r3, [pc, #132]	@ (800b51c <backup+0x130>)
 800b498:	781b      	ldrb	r3, [r3, #0]
 800b49a:	77fb      	strb	r3, [r7, #31]
 800b49c:	4b20      	ldr	r3, [pc, #128]	@ (800b520 <backup+0x134>)
 800b49e:	781b      	ldrb	r3, [r3, #0]
 800b4a0:	f887 3020 	strb.w	r3, [r7, #32]
		uint16_t arr1[5] = {vt_value};
 800b4a4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	601a      	str	r2, [r3, #0]
 800b4ac:	605a      	str	r2, [r3, #4]
 800b4ae:	811a      	strh	r2, [r3, #8]
 800b4b0:	4b1c      	ldr	r3, [pc, #112]	@ (800b524 <backup+0x138>)
 800b4b2:	881b      	ldrh	r3, [r3, #0]
 800b4b4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
		//			Compliance_Adult_Flag = Compliance_Adult_Flag_backup;
		//			Compliance_Neonate_Flag = Compliance_Neonate_Flag_backup;
		//			osDelay(100);
		//			Backup_flag1 = 0;
		//		}
		vTaskDelay(pdMS_TO_TICKS(100));
 800b4b6:	2064      	movs	r0, #100	@ 0x64
 800b4b8:	f008 f810 	bl	80134dc <vTaskDelay>
	{
 800b4bc:	bf00      	nop
 800b4be:	e799      	b.n	800b3f4 <backup+0x8>
 800b4c0:	20000036 	.word	0x20000036
 800b4c4:	20000037 	.word	0x20000037
 800b4c8:	2000002c 	.word	0x2000002c
 800b4cc:	20000030 	.word	0x20000030
 800b4d0:	2000195d 	.word	0x2000195d
 800b4d4:	20001960 	.word	0x20001960
 800b4d8:	20000038 	.word	0x20000038
 800b4dc:	20001964 	.word	0x20001964
 800b4e0:	20000050 	.word	0x20000050
 800b4e4:	200019e4 	.word	0x200019e4
 800b4e8:	20000051 	.word	0x20000051
 800b4ec:	200019e5 	.word	0x200019e5
 800b4f0:	20000052 	.word	0x20000052
 800b4f4:	2000004d 	.word	0x2000004d
 800b4f8:	20000053 	.word	0x20000053
 800b4fc:	2000004e 	.word	0x2000004e
 800b500:	20000054 	.word	0x20000054
 800b504:	2000004f 	.word	0x2000004f
 800b508:	20001965 	.word	0x20001965
 800b50c:	2000004c 	.word	0x2000004c
 800b510:	200019ae 	.word	0x200019ae
 800b514:	200019e8 	.word	0x200019e8
 800b518:	200019d4 	.word	0x200019d4
 800b51c:	20001b39 	.word	0x20001b39
 800b520:	20001b38 	.word	0x20001b38
 800b524:	20000034 	.word	0x20000034

0800b528 <Clear_Button>:
	/* USER CODE END backup */
}

/* Clear_Button function */
void Clear_Button(void const * argument)
{
 800b528:	b480      	push	{r7}
 800b52a:	b083      	sub	sp, #12
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Clear_Button */
	if (PID_CALIBRATE_FLAG == 1) {
 800b530:	4b06      	ldr	r3, [pc, #24]	@ (800b54c <Clear_Button+0x24>)
 800b532:	781b      	ldrb	r3, [r3, #0]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d003      	beq.n	800b540 <Clear_Button+0x18>
		previous_pressure_first = result2;
 800b538:	4b05      	ldr	r3, [pc, #20]	@ (800b550 <Clear_Button+0x28>)
 800b53a:	781a      	ldrb	r2, [r3, #0]
 800b53c:	4b05      	ldr	r3, [pc, #20]	@ (800b554 <Clear_Button+0x2c>)
 800b53e:	701a      	strb	r2, [r3, #0]
	}
	/* USER CODE END Clear_Button */
}
 800b540:	bf00      	nop
 800b542:	370c      	adds	r7, #12
 800b544:	46bd      	mov	sp, r7
 800b546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54a:	4770      	bx	lr
 800b54c:	20001416 	.word	0x20001416
 800b550:	20001a90 	.word	0x20001a90
 800b554:	20001b28 	.word	0x20001b28

0800b558 <value_reset>:

/* value_reset function */
void value_reset(void const * argument)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b082      	sub	sp, #8
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN value_reset */
	test++;
 800b560:	4b56      	ldr	r3, [pc, #344]	@ (800b6bc <value_reset+0x164>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	3301      	adds	r3, #1
 800b566:	4a55      	ldr	r2, [pc, #340]	@ (800b6bc <value_reset+0x164>)
 800b568:	6013      	str	r3, [r2, #0]
	if ((Value_reset_flag == 0) && (vt_value_reset_flag == 1)) {
 800b56a:	4b55      	ldr	r3, [pc, #340]	@ (800b6c0 <value_reset+0x168>)
 800b56c:	781b      	ldrb	r3, [r3, #0]
 800b56e:	f083 0301 	eor.w	r3, r3, #1
 800b572:	b2db      	uxtb	r3, r3
 800b574:	2b00      	cmp	r3, #0
 800b576:	d01b      	beq.n	800b5b0 <value_reset+0x58>
 800b578:	4b52      	ldr	r3, [pc, #328]	@ (800b6c4 <value_reset+0x16c>)
 800b57a:	781b      	ldrb	r3, [r3, #0]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d017      	beq.n	800b5b0 <value_reset+0x58>
		test2++;
 800b580:	4b51      	ldr	r3, [pc, #324]	@ (800b6c8 <value_reset+0x170>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	3301      	adds	r3, #1
 800b586:	4a50      	ldr	r2, [pc, #320]	@ (800b6c8 <value_reset+0x170>)
 800b588:	6013      	str	r3, [r2, #0]
		vt_value = vt_temp_value;
 800b58a:	4b50      	ldr	r3, [pc, #320]	@ (800b6cc <value_reset+0x174>)
 800b58c:	881a      	ldrh	r2, [r3, #0]
 800b58e:	4b50      	ldr	r3, [pc, #320]	@ (800b6d0 <value_reset+0x178>)
 800b590:	801a      	strh	r2, [r3, #0]
		intiger_val_vt_send(0x01, vt_value);
 800b592:	4b4f      	ldr	r3, [pc, #316]	@ (800b6d0 <value_reset+0x178>)
 800b594:	881b      	ldrh	r3, [r3, #0]
 800b596:	4619      	mov	r1, r3
 800b598:	2001      	movs	r0, #1
 800b59a:	f7f7 f93f 	bl	800281c <intiger_val_vt_send>
		vt_value_reset_flag = 0;
 800b59e:	4b49      	ldr	r3, [pc, #292]	@ (800b6c4 <value_reset+0x16c>)
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	701a      	strb	r2, [r3, #0]
		osTimerStop(Touch_value_resetHandle);
 800b5a4:	4b4b      	ldr	r3, [pc, #300]	@ (800b6d4 <value_reset+0x17c>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f006 ff93 	bl	80124d4 <osTimerStop>
 800b5ae:	e07d      	b.n	800b6ac <value_reset+0x154>
	} else if ((Value_reset_flag == 0) && (plt_value_reset_flag == 1)) {
 800b5b0:	4b43      	ldr	r3, [pc, #268]	@ (800b6c0 <value_reset+0x168>)
 800b5b2:	781b      	ldrb	r3, [r3, #0]
 800b5b4:	f083 0301 	eor.w	r3, r3, #1
 800b5b8:	b2db      	uxtb	r3, r3
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d017      	beq.n	800b5ee <value_reset+0x96>
 800b5be:	4b46      	ldr	r3, [pc, #280]	@ (800b6d8 <value_reset+0x180>)
 800b5c0:	781b      	ldrb	r3, [r3, #0]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d013      	beq.n	800b5ee <value_reset+0x96>
		PLR_value = PLR_temp_value;
 800b5c6:	4b45      	ldr	r3, [pc, #276]	@ (800b6dc <value_reset+0x184>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	b2da      	uxtb	r2, r3
 800b5cc:	4b44      	ldr	r3, [pc, #272]	@ (800b6e0 <value_reset+0x188>)
 800b5ce:	701a      	strb	r2, [r3, #0]
		intiger_val_send(0x02, PLR_value);
 800b5d0:	4b43      	ldr	r3, [pc, #268]	@ (800b6e0 <value_reset+0x188>)
 800b5d2:	781b      	ldrb	r3, [r3, #0]
 800b5d4:	4619      	mov	r1, r3
 800b5d6:	2002      	movs	r0, #2
 800b5d8:	f7f7 f8fc 	bl	80027d4 <intiger_val_send>
		plt_value_reset_flag = 0;
 800b5dc:	4b3e      	ldr	r3, [pc, #248]	@ (800b6d8 <value_reset+0x180>)
 800b5de:	2200      	movs	r2, #0
 800b5e0:	701a      	strb	r2, [r3, #0]
		osTimerStop(Touch_value_resetHandle);
 800b5e2:	4b3c      	ldr	r3, [pc, #240]	@ (800b6d4 <value_reset+0x17c>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f006 ff74 	bl	80124d4 <osTimerStop>
 800b5ec:	e05e      	b.n	800b6ac <value_reset+0x154>
	} else if ((Value_reset_flag == 0) && (rr_value_reset_flag == 1)) {
 800b5ee:	4b34      	ldr	r3, [pc, #208]	@ (800b6c0 <value_reset+0x168>)
 800b5f0:	781b      	ldrb	r3, [r3, #0]
 800b5f2:	f083 0301 	eor.w	r3, r3, #1
 800b5f6:	b2db      	uxtb	r3, r3
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d016      	beq.n	800b62a <value_reset+0xd2>
 800b5fc:	4b39      	ldr	r3, [pc, #228]	@ (800b6e4 <value_reset+0x18c>)
 800b5fe:	781b      	ldrb	r3, [r3, #0]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d012      	beq.n	800b62a <value_reset+0xd2>
		RR_value = RR_temp_value;
 800b604:	4b38      	ldr	r3, [pc, #224]	@ (800b6e8 <value_reset+0x190>)
 800b606:	781a      	ldrb	r2, [r3, #0]
 800b608:	4b38      	ldr	r3, [pc, #224]	@ (800b6ec <value_reset+0x194>)
 800b60a:	701a      	strb	r2, [r3, #0]
		intiger_val_send(0x03, RR_value);
 800b60c:	4b37      	ldr	r3, [pc, #220]	@ (800b6ec <value_reset+0x194>)
 800b60e:	781b      	ldrb	r3, [r3, #0]
 800b610:	4619      	mov	r1, r3
 800b612:	2003      	movs	r0, #3
 800b614:	f7f7 f8de 	bl	80027d4 <intiger_val_send>
		rr_value_reset_flag = 0;
 800b618:	4b32      	ldr	r3, [pc, #200]	@ (800b6e4 <value_reset+0x18c>)
 800b61a:	2200      	movs	r2, #0
 800b61c:	701a      	strb	r2, [r3, #0]
		osTimerStop(Touch_value_resetHandle);
 800b61e:	4b2d      	ldr	r3, [pc, #180]	@ (800b6d4 <value_reset+0x17c>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	4618      	mov	r0, r3
 800b624:	f006 ff56 	bl	80124d4 <osTimerStop>
 800b628:	e040      	b.n	800b6ac <value_reset+0x154>
	} else if ((Value_reset_flag == 0) && (pu_value_reset_flag == 1)) {
 800b62a:	4b25      	ldr	r3, [pc, #148]	@ (800b6c0 <value_reset+0x168>)
 800b62c:	781b      	ldrb	r3, [r3, #0]
 800b62e:	f083 0301 	eor.w	r3, r3, #1
 800b632:	b2db      	uxtb	r3, r3
 800b634:	2b00      	cmp	r3, #0
 800b636:	d016      	beq.n	800b666 <value_reset+0x10e>
 800b638:	4b2d      	ldr	r3, [pc, #180]	@ (800b6f0 <value_reset+0x198>)
 800b63a:	781b      	ldrb	r3, [r3, #0]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d012      	beq.n	800b666 <value_reset+0x10e>
		PU_value = PU_temp_value;
 800b640:	4b2c      	ldr	r3, [pc, #176]	@ (800b6f4 <value_reset+0x19c>)
 800b642:	781a      	ldrb	r2, [r3, #0]
 800b644:	4b2c      	ldr	r3, [pc, #176]	@ (800b6f8 <value_reset+0x1a0>)
 800b646:	701a      	strb	r2, [r3, #0]
		intiger_val_send(0x05, PU_value);
 800b648:	4b2b      	ldr	r3, [pc, #172]	@ (800b6f8 <value_reset+0x1a0>)
 800b64a:	781b      	ldrb	r3, [r3, #0]
 800b64c:	4619      	mov	r1, r3
 800b64e:	2005      	movs	r0, #5
 800b650:	f7f7 f8c0 	bl	80027d4 <intiger_val_send>
		rr_value_reset_flag = 0;
 800b654:	4b23      	ldr	r3, [pc, #140]	@ (800b6e4 <value_reset+0x18c>)
 800b656:	2200      	movs	r2, #0
 800b658:	701a      	strb	r2, [r3, #0]
		osTimerStop(Touch_value_resetHandle);
 800b65a:	4b1e      	ldr	r3, [pc, #120]	@ (800b6d4 <value_reset+0x17c>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	4618      	mov	r0, r3
 800b660:	f006 ff38 	bl	80124d4 <osTimerStop>
 800b664:	e022      	b.n	800b6ac <value_reset+0x154>
	} else if ((Value_reset_flag == 0) && (peep_value_reset_flag == 1)) {
 800b666:	4b16      	ldr	r3, [pc, #88]	@ (800b6c0 <value_reset+0x168>)
 800b668:	781b      	ldrb	r3, [r3, #0]
 800b66a:	f083 0301 	eor.w	r3, r3, #1
 800b66e:	b2db      	uxtb	r3, r3
 800b670:	2b00      	cmp	r3, #0
 800b672:	d016      	beq.n	800b6a2 <value_reset+0x14a>
 800b674:	4b21      	ldr	r3, [pc, #132]	@ (800b6fc <value_reset+0x1a4>)
 800b676:	781b      	ldrb	r3, [r3, #0]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d012      	beq.n	800b6a2 <value_reset+0x14a>
		PEEP_value = PEEP_temp_value;
 800b67c:	4b20      	ldr	r3, [pc, #128]	@ (800b700 <value_reset+0x1a8>)
 800b67e:	781a      	ldrb	r2, [r3, #0]
 800b680:	4b20      	ldr	r3, [pc, #128]	@ (800b704 <value_reset+0x1ac>)
 800b682:	701a      	strb	r2, [r3, #0]
		intiger_val_send(0x08, PEEP_value);
 800b684:	4b1f      	ldr	r3, [pc, #124]	@ (800b704 <value_reset+0x1ac>)
 800b686:	781b      	ldrb	r3, [r3, #0]
 800b688:	4619      	mov	r1, r3
 800b68a:	2008      	movs	r0, #8
 800b68c:	f7f7 f8a2 	bl	80027d4 <intiger_val_send>
		peep_value_reset_flag = 0;
 800b690:	4b1a      	ldr	r3, [pc, #104]	@ (800b6fc <value_reset+0x1a4>)
 800b692:	2200      	movs	r2, #0
 800b694:	701a      	strb	r2, [r3, #0]
		osTimerStop(Touch_value_resetHandle);
 800b696:	4b0f      	ldr	r3, [pc, #60]	@ (800b6d4 <value_reset+0x17c>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	4618      	mov	r0, r3
 800b69c:	f006 ff1a 	bl	80124d4 <osTimerStop>
 800b6a0:	e004      	b.n	800b6ac <value_reset+0x154>
	} else {
		osTimerStop(Touch_value_resetHandle);
 800b6a2:	4b0c      	ldr	r3, [pc, #48]	@ (800b6d4 <value_reset+0x17c>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f006 ff14 	bl	80124d4 <osTimerStop>
	}
	Value_reset_flag = 0;
 800b6ac:	4b04      	ldr	r3, [pc, #16]	@ (800b6c0 <value_reset+0x168>)
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	701a      	strb	r2, [r3, #0]
	/* USER CODE END value_reset */
}
 800b6b2:	bf00      	nop
 800b6b4:	3708      	adds	r7, #8
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}
 800b6ba:	bf00      	nop
 800b6bc:	20001b20 	.word	0x20001b20
 800b6c0:	200019c2 	.word	0x200019c2
 800b6c4:	200019d5 	.word	0x200019d5
 800b6c8:	20001b1c 	.word	0x20001b1c
 800b6cc:	20000044 	.word	0x20000044
 800b6d0:	20000034 	.word	0x20000034
 800b6d4:	20001144 	.word	0x20001144
 800b6d8:	200019d6 	.word	0x200019d6
 800b6dc:	20000048 	.word	0x20000048
 800b6e0:	20000036 	.word	0x20000036
 800b6e4:	200019d7 	.word	0x200019d7
 800b6e8:	2000004c 	.word	0x2000004c
 800b6ec:	20000037 	.word	0x20000037
 800b6f0:	200019d8 	.word	0x200019d8
 800b6f4:	20001967 	.word	0x20001967
 800b6f8:	2000195d 	.word	0x2000195d
 800b6fc:	200019da 	.word	0x200019da
 800b700:	20001968 	.word	0x20001968
 800b704:	20001964 	.word	0x20001964

0800b708 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b082      	sub	sp, #8
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6)
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	4a04      	ldr	r2, [pc, #16]	@ (800b728 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800b716:	4293      	cmp	r3, r2
 800b718:	d101      	bne.n	800b71e <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 800b71a:	f000 ffb1 	bl	800c680 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800b71e:	bf00      	nop
 800b720:	3708      	adds	r7, #8
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
 800b726:	bf00      	nop
 800b728:	40001000 	.word	0x40001000

0800b72c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800b72c:	b480      	push	{r7}
 800b72e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800b730:	b672      	cpsid	i
}
 800b732:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800b734:	bf00      	nop
 800b736:	e7fd      	b.n	800b734 <Error_Handler+0x8>

0800b738 <PID_Init>:
#include "pid_h.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b082      	sub	sp, #8
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b748:	6879      	ldr	r1, [r7, #4]
 800b74a:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	uPID->LastInput = *uPID->MyInput;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b756:	6879      	ldr	r1, [r7, #4]
 800b758:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	if (uPID->OutputSum > uPID->OutMax)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800b768:	f7f5 f9ce 	bl	8000b08 <__aeabi_dcmpgt>
 800b76c:	4603      	mov	r3, r0
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d006      	beq.n	800b780 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800b778:	6879      	ldr	r1, [r7, #4]
 800b77a:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }

}
 800b77e:	e011      	b.n	800b7a4 <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800b78c:	f7f5 f99e 	bl	8000acc <__aeabi_dcmplt>
 800b790:	4603      	mov	r3, r0
 800b792:	2b00      	cmp	r3, #0
 800b794:	d100      	bne.n	800b798 <PID_Init+0x60>
}
 800b796:	e005      	b.n	800b7a4 <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800b79e:	6879      	ldr	r1, [r7, #4]
 800b7a0:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
}
 800b7a4:	bf00      	nop
 800b7a6:	3708      	adds	r7, #8
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}
 800b7ac:	0000      	movs	r0, r0
	...

0800b7b0 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b08a      	sub	sp, #40	@ 0x28
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6278      	str	r0, [r7, #36]	@ 0x24
 800b7b8:	6239      	str	r1, [r7, #32]
 800b7ba:	61fa      	str	r2, [r7, #28]
 800b7bc:	61bb      	str	r3, [r7, #24]
 800b7be:	ed87 0b04 	vstr	d0, [r7, #16]
 800b7c2:	ed87 1b02 	vstr	d1, [r7, #8]
 800b7c6:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 800b7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7cc:	69fa      	ldr	r2, [r7, #28]
 800b7ce:	645a      	str	r2, [r3, #68]	@ 0x44
	uPID->MyInput    = Input;
 800b7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7d2:	6a3a      	ldr	r2, [r7, #32]
 800b7d4:	641a      	str	r2, [r3, #64]	@ 0x40
	uPID->MySetpoint = Setpoint;
 800b7d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7d8:	69ba      	ldr	r2, [r7, #24]
 800b7da:	649a      	str	r2, [r3, #72]	@ 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 800b7dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7de:	2200      	movs	r2, #0
 800b7e0:	705a      	strb	r2, [r3, #1]

	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 800b7e2:	ed9f 1b15 	vldr	d1, [pc, #84]	@ 800b838 <PID+0x88>
 800b7e6:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800b840 <PID+0x90>
 800b7ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b7ec:	f000 f934 	bl	800ba58 <PID_SetOutputLimits>

	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 800b7f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7f2:	2264      	movs	r2, #100	@ 0x64
 800b7f4:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 800b7f6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800b7fa:	4619      	mov	r1, r3
 800b7fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b7fe:	f000 fa41 	bl	800bc84 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 800b802:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800b806:	4619      	mov	r1, r3
 800b808:	ed97 2b00 	vldr	d2, [r7]
 800b80c:	ed97 1b02 	vldr	d1, [r7, #8]
 800b810:	ed97 0b04 	vldr	d0, [r7, #16]
 800b814:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b816:	f000 f98d 	bl	800bb34 <PID_SetTunings2>

	uPID->LastTime = GetTime() - uPID->SampleTime;
 800b81a:	f000 ff45 	bl	800c6a8 <HAL_GetTick>
 800b81e:	4602      	mov	r2, r0
 800b820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b822:	689b      	ldr	r3, [r3, #8]
 800b824:	1ad2      	subs	r2, r2, r3
 800b826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b828:	605a      	str	r2, [r3, #4]

}
 800b82a:	bf00      	nop
 800b82c:	3728      	adds	r7, #40	@ 0x28
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}
 800b832:	bf00      	nop
 800b834:	f3af 8000 	nop.w
 800b838:	00000000 	.word	0x00000000
 800b83c:	406fe000 	.word	0x406fe000
	...

0800b848 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 800b848:	b5b0      	push	{r4, r5, r7, lr}
 800b84a:	b08c      	sub	sp, #48	@ 0x30
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;

	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	785b      	ldrb	r3, [r3, #1]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d101      	bne.n	800b85c <PID_Compute+0x14>
	{
		return _FALSE;
 800b858:	2300      	movs	r3, #0
 800b85a:	e0db      	b.n	800ba14 <PID_Compute+0x1cc>
	}

	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 800b85c:	f000 ff24 	bl	800c6a8 <HAL_GetTick>
 800b860:	6278      	str	r0, [r7, #36]	@ 0x24
	timeChange = (now - uPID->LastTime);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	685b      	ldr	r3, [r3, #4]
 800b866:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b868:	1ad3      	subs	r3, r2, r3
 800b86a:	623b      	str	r3, [r7, #32]

	if (timeChange >= uPID->SampleTime)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	689b      	ldr	r3, [r3, #8]
 800b870:	6a3a      	ldr	r2, [r7, #32]
 800b872:	429a      	cmp	r2, r3
 800b874:	f0c0 80cd 	bcc.w	800ba12 <PID_Compute+0x1ca>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b880:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b888:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b88c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b890:	f7f4 fcf2 	bl	8000278 <__aeabi_dsub>
 800b894:	4602      	mov	r2, r0
 800b896:	460b      	mov	r3, r1
 800b898:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800b8a2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b8a6:	f7f4 fce7 	bl	8000278 <__aeabi_dsub>
 800b8aa:	4602      	mov	r2, r0
 800b8ac:	460b      	mov	r3, r1
 800b8ae:	e9c7 2302 	strd	r2, r3, [r7, #8]

		uPID->OutputSum     += (uPID->Ki * error);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800b8be:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b8c2:	f7f4 fe91 	bl	80005e8 <__aeabi_dmul>
 800b8c6:	4602      	mov	r2, r0
 800b8c8:	460b      	mov	r3, r1
 800b8ca:	4620      	mov	r0, r4
 800b8cc:	4629      	mov	r1, r5
 800b8ce:	f7f4 fcd5 	bl	800027c <__adddf3>
 800b8d2:	4602      	mov	r2, r0
 800b8d4:	460b      	mov	r3, r1
 800b8d6:	6879      	ldr	r1, [r7, #4]
 800b8d8:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50

		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	781b      	ldrb	r3, [r3, #0]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d114      	bne.n	800b90e <PID_Compute+0xc6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800b8f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b8f4:	f7f4 fe78 	bl	80005e8 <__aeabi_dmul>
 800b8f8:	4602      	mov	r2, r0
 800b8fa:	460b      	mov	r3, r1
 800b8fc:	4620      	mov	r0, r4
 800b8fe:	4629      	mov	r1, r5
 800b900:	f7f4 fcba 	bl	8000278 <__aeabi_dsub>
 800b904:	4602      	mov	r2, r0
 800b906:	460b      	mov	r3, r1
 800b908:	6879      	ldr	r1, [r7, #4]
 800b90a:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		}

		if (uPID->OutputSum > uPID->OutMax)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800b91a:	f7f5 f8f5 	bl	8000b08 <__aeabi_dcmpgt>
 800b91e:	4603      	mov	r3, r0
 800b920:	2b00      	cmp	r3, #0
 800b922:	d006      	beq.n	800b932 <PID_Compute+0xea>
		{
			uPID->OutputSum = uPID->OutMax;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800b92a:	6879      	ldr	r1, [r7, #4]
 800b92c:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 800b930:	e010      	b.n	800b954 <PID_Compute+0x10c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800b93e:	f7f5 f8c5 	bl	8000acc <__aeabi_dcmplt>
 800b942:	4603      	mov	r3, r0
 800b944:	2b00      	cmp	r3, #0
 800b946:	d005      	beq.n	800b954 <PID_Compute+0x10c>
		{
			uPID->OutputSum = uPID->OutMin;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800b94e:	6879      	ldr	r1, [r7, #4]
 800b950:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		}
		else { }

		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	781b      	ldrb	r3, [r3, #0]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d00b      	beq.n	800b974 <PID_Compute+0x12c>
		{
			output = uPID->Kp * error;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800b962:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b966:	f7f4 fe3f 	bl	80005e8 <__aeabi_dmul>
 800b96a:	4602      	mov	r2, r0
 800b96c:	460b      	mov	r3, r1
 800b96e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800b972:	e005      	b.n	800b980 <PID_Compute+0x138>
		}
		else
		{
			output = 0;
 800b974:	f04f 0200 	mov.w	r2, #0
 800b978:	f04f 0300 	mov.w	r3, #0
 800b97c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		}

		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800b98c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b990:	f7f4 fe2a 	bl	80005e8 <__aeabi_dmul>
 800b994:	4602      	mov	r2, r0
 800b996:	460b      	mov	r3, r1
 800b998:	4620      	mov	r0, r4
 800b99a:	4629      	mov	r1, r5
 800b99c:	f7f4 fc6c 	bl	8000278 <__aeabi_dsub>
 800b9a0:	4602      	mov	r2, r0
 800b9a2:	460b      	mov	r3, r1
 800b9a4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800b9a8:	f7f4 fc68 	bl	800027c <__adddf3>
 800b9ac:	4602      	mov	r2, r0
 800b9ae:	460b      	mov	r3, r1
 800b9b0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

		if (output > uPID->OutMax)
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800b9ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800b9be:	f7f5 f8a3 	bl	8000b08 <__aeabi_dcmpgt>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d005      	beq.n	800b9d4 <PID_Compute+0x18c>
		{
			output = uPID->OutMax;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800b9ce:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800b9d2:	e00e      	b.n	800b9f2 <PID_Compute+0x1aa>
		}
		else if (output < uPID->OutMin)
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800b9da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800b9de:	f7f5 f875 	bl	8000acc <__aeabi_dcmplt>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d004      	beq.n	800b9f2 <PID_Compute+0x1aa>
		{
			output = uPID->OutMin;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800b9ee:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		}
		else { }

		*uPID->MyOutput = output;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800b9f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b9fa:	e9c1 2300 	strd	r2, r3, [r1]

		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 800b9fe:	6879      	ldr	r1, [r7, #4]
 800ba00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ba04:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		uPID->LastTime = now;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba0c:	605a      	str	r2, [r3, #4]

		return _TRUE;
 800ba0e:	2301      	movs	r3, #1
 800ba10:	e000      	b.n	800ba14 <PID_Compute+0x1cc>

	}
	else
	{
		return _FALSE;
 800ba12:	2300      	movs	r3, #0
	}

}
 800ba14:	4618      	mov	r0, r3
 800ba16:	3730      	adds	r7, #48	@ 0x30
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bdb0      	pop	{r4, r5, r7, pc}

0800ba1c <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b084      	sub	sp, #16
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
 800ba24:	460b      	mov	r3, r1
 800ba26:	70fb      	strb	r3, [r7, #3]

	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 800ba28:	78fb      	ldrb	r3, [r7, #3]
 800ba2a:	2b01      	cmp	r3, #1
 800ba2c:	bf0c      	ite	eq
 800ba2e:	2301      	moveq	r3, #1
 800ba30:	2300      	movne	r3, #0
 800ba32:	b2db      	uxtb	r3, r3
 800ba34:	73fb      	strb	r3, [r7, #15]

	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 800ba36:	7bfb      	ldrb	r3, [r7, #15]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d006      	beq.n	800ba4a <PID_SetMode+0x2e>
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	785b      	ldrb	r3, [r3, #1]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d102      	bne.n	800ba4a <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f7ff fe77 	bl	800b738 <PID_Init>
	}

	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	7bfa      	ldrb	r2, [r7, #15]
 800ba4e:	705a      	strb	r2, [r3, #1]

}
 800ba50:	bf00      	nop
 800ba52:	3710      	adds	r7, #16
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}

0800ba58 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b086      	sub	sp, #24
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6178      	str	r0, [r7, #20]
 800ba60:	ed87 0b02 	vstr	d0, [r7, #8]
 800ba64:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 800ba68:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba6c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ba70:	f7f5 f840 	bl	8000af4 <__aeabi_dcmpge>
 800ba74:	4603      	mov	r3, r0
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d158      	bne.n	800bb2c <PID_SetOutputLimits+0xd4>
	{
		return;
	}

	uPID->OutMin = Min;
 800ba7a:	6979      	ldr	r1, [r7, #20]
 800ba7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ba80:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	uPID->OutMax = Max;
 800ba84:	6979      	ldr	r1, [r7, #20]
 800ba86:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba8a:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68

	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 800ba8e:	697b      	ldr	r3, [r7, #20]
 800ba90:	785b      	ldrb	r3, [r3, #1]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d04b      	beq.n	800bb2e <PID_SetOutputLimits+0xd6>
	{

		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ba9e:	697b      	ldr	r3, [r7, #20]
 800baa0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800baa4:	f7f5 f830 	bl	8000b08 <__aeabi_dcmpgt>
 800baa8:	4603      	mov	r3, r0
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d007      	beq.n	800babe <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800bab2:	697b      	ldr	r3, [r7, #20]
 800bab4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800bab8:	e9c1 2300 	strd	r2, r3, [r1]
 800babc:	e012      	b.n	800bae4 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bac2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bac6:	697b      	ldr	r3, [r7, #20]
 800bac8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800bacc:	f7f4 fffe 	bl	8000acc <__aeabi_dcmplt>
 800bad0:	4603      	mov	r3, r0
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d006      	beq.n	800bae4 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800bada:	697b      	ldr	r3, [r7, #20]
 800badc:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800bae0:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }

		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800baf0:	f7f5 f80a 	bl	8000b08 <__aeabi_dcmpgt>
 800baf4:	4603      	mov	r3, r0
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d006      	beq.n	800bb08 <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800bb00:	6979      	ldr	r1, [r7, #20]
 800bb02:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 800bb06:	e012      	b.n	800bb2e <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 800bb08:	697b      	ldr	r3, [r7, #20]
 800bb0a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800bb14:	f7f4 ffda 	bl	8000acc <__aeabi_dcmplt>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d007      	beq.n	800bb2e <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800bb24:	6979      	ldr	r1, [r7, #20]
 800bb26:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 800bb2a:	e000      	b.n	800bb2e <PID_SetOutputLimits+0xd6>
		return;
 800bb2c:	bf00      	nop
		}
		else { }

	}

}
 800bb2e:	3718      	adds	r7, #24
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}

0800bb34 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b08a      	sub	sp, #40	@ 0x28
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	61f8      	str	r0, [r7, #28]
 800bb3c:	ed87 0b04 	vstr	d0, [r7, #16]
 800bb40:	ed87 1b02 	vstr	d1, [r7, #8]
 800bb44:	ed87 2b00 	vstr	d2, [r7]
 800bb48:	460b      	mov	r3, r1
 800bb4a:	76fb      	strb	r3, [r7, #27]

	double SampleTimeInSec;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 800bb4c:	f04f 0200 	mov.w	r2, #0
 800bb50:	f04f 0300 	mov.w	r3, #0
 800bb54:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800bb58:	f7f4 ffb8 	bl	8000acc <__aeabi_dcmplt>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	f040 8089 	bne.w	800bc76 <PID_SetTunings2+0x142>
 800bb64:	f04f 0200 	mov.w	r2, #0
 800bb68:	f04f 0300 	mov.w	r3, #0
 800bb6c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bb70:	f7f4 ffac 	bl	8000acc <__aeabi_dcmplt>
 800bb74:	4603      	mov	r3, r0
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d17d      	bne.n	800bc76 <PID_SetTunings2+0x142>
 800bb7a:	f04f 0200 	mov.w	r2, #0
 800bb7e:	f04f 0300 	mov.w	r3, #0
 800bb82:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bb86:	f7f4 ffa1 	bl	8000acc <__aeabi_dcmplt>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d172      	bne.n	800bc76 <PID_SetTunings2+0x142>
	{
		return;
	}

	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 800bb90:	69fb      	ldr	r3, [r7, #28]
 800bb92:	7efa      	ldrb	r2, [r7, #27]
 800bb94:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 800bb96:	7efb      	ldrb	r3, [r7, #27]
 800bb98:	2b01      	cmp	r3, #1
 800bb9a:	bf0c      	ite	eq
 800bb9c:	2301      	moveq	r3, #1
 800bb9e:	2300      	movne	r3, #0
 800bba0:	b2db      	uxtb	r3, r3
 800bba2:	461a      	mov	r2, r3
 800bba4:	69fb      	ldr	r3, [r7, #28]
 800bba6:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 800bba8:	69f9      	ldr	r1, [r7, #28]
 800bbaa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bbae:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 800bbb2:	69f9      	ldr	r1, [r7, #28]
 800bbb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bbb8:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 800bbbc:	69f9      	ldr	r1, [r7, #28]
 800bbbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbc2:	e9c1 2308 	strd	r2, r3, [r1, #32]

	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 800bbc6:	69fb      	ldr	r3, [r7, #28]
 800bbc8:	689b      	ldr	r3, [r3, #8]
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f7f4 fc92 	bl	80004f4 <__aeabi_ui2d>
 800bbd0:	f04f 0200 	mov.w	r2, #0
 800bbd4:	4b2a      	ldr	r3, [pc, #168]	@ (800bc80 <PID_SetTunings2+0x14c>)
 800bbd6:	f7f4 fe31 	bl	800083c <__aeabi_ddiv>
 800bbda:	4602      	mov	r2, r0
 800bbdc:	460b      	mov	r3, r1
 800bbde:	e9c7 2308 	strd	r2, r3, [r7, #32]

	uPID->Kp = Kp;
 800bbe2:	69f9      	ldr	r1, [r7, #28]
 800bbe4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bbe8:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 800bbec:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bbf0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bbf4:	f7f4 fcf8 	bl	80005e8 <__aeabi_dmul>
 800bbf8:	4602      	mov	r2, r0
 800bbfa:	460b      	mov	r3, r1
 800bbfc:	69f9      	ldr	r1, [r7, #28]
 800bbfe:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 800bc02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bc06:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bc0a:	f7f4 fe17 	bl	800083c <__aeabi_ddiv>
 800bc0e:	4602      	mov	r2, r0
 800bc10:	460b      	mov	r3, r1
 800bc12:	69f9      	ldr	r1, [r7, #28]
 800bc14:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 800bc18:	69fb      	ldr	r3, [r7, #28]
 800bc1a:	78db      	ldrb	r3, [r3, #3]
 800bc1c:	2b01      	cmp	r3, #1
 800bc1e:	d12b      	bne.n	800bc78 <PID_SetTunings2+0x144>
	{

		uPID->Kp = (0 - uPID->Kp);
 800bc20:	69fb      	ldr	r3, [r7, #28]
 800bc22:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800bc26:	f04f 0000 	mov.w	r0, #0
 800bc2a:	f04f 0100 	mov.w	r1, #0
 800bc2e:	f7f4 fb23 	bl	8000278 <__aeabi_dsub>
 800bc32:	4602      	mov	r2, r0
 800bc34:	460b      	mov	r3, r1
 800bc36:	69f9      	ldr	r1, [r7, #28]
 800bc38:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		uPID->Ki = (0 - uPID->Ki);
 800bc3c:	69fb      	ldr	r3, [r7, #28]
 800bc3e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800bc42:	f04f 0000 	mov.w	r0, #0
 800bc46:	f04f 0100 	mov.w	r1, #0
 800bc4a:	f7f4 fb15 	bl	8000278 <__aeabi_dsub>
 800bc4e:	4602      	mov	r2, r0
 800bc50:	460b      	mov	r3, r1
 800bc52:	69f9      	ldr	r1, [r7, #28]
 800bc54:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd = (0 - uPID->Kd);
 800bc58:	69fb      	ldr	r3, [r7, #28]
 800bc5a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800bc5e:	f04f 0000 	mov.w	r0, #0
 800bc62:	f04f 0100 	mov.w	r1, #0
 800bc66:	f7f4 fb07 	bl	8000278 <__aeabi_dsub>
 800bc6a:	4602      	mov	r2, r0
 800bc6c:	460b      	mov	r3, r1
 800bc6e:	69f9      	ldr	r1, [r7, #28]
 800bc70:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
 800bc74:	e000      	b.n	800bc78 <PID_SetTunings2+0x144>
		return;
 800bc76:	bf00      	nop

	}

}
 800bc78:	3728      	adds	r7, #40	@ 0x28
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}
 800bc7e:	bf00      	nop
 800bc80:	408f4000 	.word	0x408f4000

0800bc84 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b082      	sub	sp, #8
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
 800bc8c:	460b      	mov	r3, r1
 800bc8e:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	785b      	ldrb	r3, [r3, #1]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d02e      	beq.n	800bcf6 <PID_SetControllerDirection+0x72>
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	78db      	ldrb	r3, [r3, #3]
 800bc9c:	78fa      	ldrb	r2, [r7, #3]
 800bc9e:	429a      	cmp	r2, r3
 800bca0:	d029      	beq.n	800bcf6 <PID_SetControllerDirection+0x72>
	{

		uPID->Kp = (0 - uPID->Kp);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800bca8:	f04f 0000 	mov.w	r0, #0
 800bcac:	f04f 0100 	mov.w	r1, #0
 800bcb0:	f7f4 fae2 	bl	8000278 <__aeabi_dsub>
 800bcb4:	4602      	mov	r2, r0
 800bcb6:	460b      	mov	r3, r1
 800bcb8:	6879      	ldr	r1, [r7, #4]
 800bcba:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		uPID->Ki = (0 - uPID->Ki);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800bcc4:	f04f 0000 	mov.w	r0, #0
 800bcc8:	f04f 0100 	mov.w	r1, #0
 800bccc:	f7f4 fad4 	bl	8000278 <__aeabi_dsub>
 800bcd0:	4602      	mov	r2, r0
 800bcd2:	460b      	mov	r3, r1
 800bcd4:	6879      	ldr	r1, [r7, #4]
 800bcd6:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd = (0 - uPID->Kd);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800bce0:	f04f 0000 	mov.w	r0, #0
 800bce4:	f04f 0100 	mov.w	r1, #0
 800bce8:	f7f4 fac6 	bl	8000278 <__aeabi_dsub>
 800bcec:	4602      	mov	r2, r0
 800bcee:	460b      	mov	r3, r1
 800bcf0:	6879      	ldr	r1, [r7, #4]
 800bcf2:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

	}

	uPID->ControllerDirection = Direction;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	78fa      	ldrb	r2, [r7, #3]
 800bcfa:	70da      	strb	r2, [r3, #3]

}
 800bcfc:	bf00      	nop
 800bcfe:	3708      	adds	r7, #8
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}

0800bd04 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 800bd04:	b5b0      	push	{r4, r5, r7, lr}
 800bd06:	b084      	sub	sp, #16
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
 800bd0c:	6039      	str	r1, [r7, #0]

	double ratio;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	dd2e      	ble.n	800bd72 <PID_SetSampleTime+0x6e>
	{

		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 800bd14:	6838      	ldr	r0, [r7, #0]
 800bd16:	f7f4 fbfd 	bl	8000514 <__aeabi_i2d>
 800bd1a:	4604      	mov	r4, r0
 800bd1c:	460d      	mov	r5, r1
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	689b      	ldr	r3, [r3, #8]
 800bd22:	4618      	mov	r0, r3
 800bd24:	f7f4 fbe6 	bl	80004f4 <__aeabi_ui2d>
 800bd28:	4602      	mov	r2, r0
 800bd2a:	460b      	mov	r3, r1
 800bd2c:	4620      	mov	r0, r4
 800bd2e:	4629      	mov	r1, r5
 800bd30:	f7f4 fd84 	bl	800083c <__aeabi_ddiv>
 800bd34:	4602      	mov	r2, r0
 800bd36:	460b      	mov	r3, r1
 800bd38:	e9c7 2302 	strd	r2, r3, [r7, #8]

		uPID->Ki *= ratio;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800bd42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bd46:	f7f4 fc4f 	bl	80005e8 <__aeabi_dmul>
 800bd4a:	4602      	mov	r2, r0
 800bd4c:	460b      	mov	r3, r1
 800bd4e:	6879      	ldr	r1, [r7, #4]
 800bd50:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		uPID->Kd /= ratio;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800bd5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bd5e:	f7f4 fd6d 	bl	800083c <__aeabi_ddiv>
 800bd62:	4602      	mov	r2, r0
 800bd64:	460b      	mov	r3, r1
 800bd66:	6879      	ldr	r1, [r7, #4]
 800bd68:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 800bd6c:	683a      	ldr	r2, [r7, #0]
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	609a      	str	r2, [r3, #8]

	}

}
 800bd72:	bf00      	nop
 800bd74:	3710      	adds	r7, #16
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800bd7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b082      	sub	sp, #8
 800bd80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bd82:	2300      	movs	r3, #0
 800bd84:	607b      	str	r3, [r7, #4]
 800bd86:	4b12      	ldr	r3, [pc, #72]	@ (800bdd0 <HAL_MspInit+0x54>)
 800bd88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd8a:	4a11      	ldr	r2, [pc, #68]	@ (800bdd0 <HAL_MspInit+0x54>)
 800bd8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bd90:	6453      	str	r3, [r2, #68]	@ 0x44
 800bd92:	4b0f      	ldr	r3, [pc, #60]	@ (800bdd0 <HAL_MspInit+0x54>)
 800bd94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bd9a:	607b      	str	r3, [r7, #4]
 800bd9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800bd9e:	2300      	movs	r3, #0
 800bda0:	603b      	str	r3, [r7, #0]
 800bda2:	4b0b      	ldr	r3, [pc, #44]	@ (800bdd0 <HAL_MspInit+0x54>)
 800bda4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bda6:	4a0a      	ldr	r2, [pc, #40]	@ (800bdd0 <HAL_MspInit+0x54>)
 800bda8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bdac:	6413      	str	r3, [r2, #64]	@ 0x40
 800bdae:	4b08      	ldr	r3, [pc, #32]	@ (800bdd0 <HAL_MspInit+0x54>)
 800bdb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bdb6:	603b      	str	r3, [r7, #0]
 800bdb8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800bdba:	2200      	movs	r2, #0
 800bdbc:	210f      	movs	r1, #15
 800bdbe:	f06f 0001 	mvn.w	r0, #1
 800bdc2:	f001 f959 	bl	800d078 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800bdc6:	bf00      	nop
 800bdc8:	3708      	adds	r7, #8
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}
 800bdce:	bf00      	nop
 800bdd0:	40023800 	.word	0x40023800

0800bdd4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b08e      	sub	sp, #56	@ 0x38
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bddc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bde0:	2200      	movs	r2, #0
 800bde2:	601a      	str	r2, [r3, #0]
 800bde4:	605a      	str	r2, [r3, #4]
 800bde6:	609a      	str	r2, [r3, #8]
 800bde8:	60da      	str	r2, [r3, #12]
 800bdea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	4a45      	ldr	r2, [pc, #276]	@ (800bf08 <HAL_ADC_MspInit+0x134>)
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	d128      	bne.n	800be48 <HAL_ADC_MspInit+0x74>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	623b      	str	r3, [r7, #32]
 800bdfa:	4b44      	ldr	r3, [pc, #272]	@ (800bf0c <HAL_ADC_MspInit+0x138>)
 800bdfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdfe:	4a43      	ldr	r2, [pc, #268]	@ (800bf0c <HAL_ADC_MspInit+0x138>)
 800be00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800be04:	6453      	str	r3, [r2, #68]	@ 0x44
 800be06:	4b41      	ldr	r3, [pc, #260]	@ (800bf0c <HAL_ADC_MspInit+0x138>)
 800be08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800be0e:	623b      	str	r3, [r7, #32]
 800be10:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800be12:	2300      	movs	r3, #0
 800be14:	61fb      	str	r3, [r7, #28]
 800be16:	4b3d      	ldr	r3, [pc, #244]	@ (800bf0c <HAL_ADC_MspInit+0x138>)
 800be18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be1a:	4a3c      	ldr	r2, [pc, #240]	@ (800bf0c <HAL_ADC_MspInit+0x138>)
 800be1c:	f043 0302 	orr.w	r3, r3, #2
 800be20:	6313      	str	r3, [r2, #48]	@ 0x30
 800be22:	4b3a      	ldr	r3, [pc, #232]	@ (800bf0c <HAL_ADC_MspInit+0x138>)
 800be24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be26:	f003 0302 	and.w	r3, r3, #2
 800be2a:	61fb      	str	r3, [r7, #28]
 800be2c:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800be2e:	2302      	movs	r3, #2
 800be30:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800be32:	2303      	movs	r3, #3
 800be34:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be36:	2300      	movs	r3, #0
 800be38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800be3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800be3e:	4619      	mov	r1, r3
 800be40:	4833      	ldr	r0, [pc, #204]	@ (800bf10 <HAL_ADC_MspInit+0x13c>)
 800be42:	f001 fd45 	bl	800d8d0 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC3_MspInit 1 */

    /* USER CODE END ADC3_MspInit 1 */
  }

}
 800be46:	e05a      	b.n	800befe <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	4a31      	ldr	r2, [pc, #196]	@ (800bf14 <HAL_ADC_MspInit+0x140>)
 800be4e:	4293      	cmp	r3, r2
 800be50:	d128      	bne.n	800bea4 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800be52:	2300      	movs	r3, #0
 800be54:	61bb      	str	r3, [r7, #24]
 800be56:	4b2d      	ldr	r3, [pc, #180]	@ (800bf0c <HAL_ADC_MspInit+0x138>)
 800be58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be5a:	4a2c      	ldr	r2, [pc, #176]	@ (800bf0c <HAL_ADC_MspInit+0x138>)
 800be5c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800be60:	6453      	str	r3, [r2, #68]	@ 0x44
 800be62:	4b2a      	ldr	r3, [pc, #168]	@ (800bf0c <HAL_ADC_MspInit+0x138>)
 800be64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800be6a:	61bb      	str	r3, [r7, #24]
 800be6c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800be6e:	2300      	movs	r3, #0
 800be70:	617b      	str	r3, [r7, #20]
 800be72:	4b26      	ldr	r3, [pc, #152]	@ (800bf0c <HAL_ADC_MspInit+0x138>)
 800be74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be76:	4a25      	ldr	r2, [pc, #148]	@ (800bf0c <HAL_ADC_MspInit+0x138>)
 800be78:	f043 0301 	orr.w	r3, r3, #1
 800be7c:	6313      	str	r3, [r2, #48]	@ 0x30
 800be7e:	4b23      	ldr	r3, [pc, #140]	@ (800bf0c <HAL_ADC_MspInit+0x138>)
 800be80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be82:	f003 0301 	and.w	r3, r3, #1
 800be86:	617b      	str	r3, [r7, #20]
 800be88:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800be8a:	2301      	movs	r3, #1
 800be8c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800be8e:	2303      	movs	r3, #3
 800be90:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be92:	2300      	movs	r3, #0
 800be94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800be96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800be9a:	4619      	mov	r1, r3
 800be9c:	481e      	ldr	r0, [pc, #120]	@ (800bf18 <HAL_ADC_MspInit+0x144>)
 800be9e:	f001 fd17 	bl	800d8d0 <HAL_GPIO_Init>
}
 800bea2:	e02c      	b.n	800befe <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	4a1c      	ldr	r2, [pc, #112]	@ (800bf1c <HAL_ADC_MspInit+0x148>)
 800beaa:	4293      	cmp	r3, r2
 800beac:	d127      	bne.n	800befe <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800beae:	2300      	movs	r3, #0
 800beb0:	613b      	str	r3, [r7, #16]
 800beb2:	4b16      	ldr	r3, [pc, #88]	@ (800bf0c <HAL_ADC_MspInit+0x138>)
 800beb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800beb6:	4a15      	ldr	r2, [pc, #84]	@ (800bf0c <HAL_ADC_MspInit+0x138>)
 800beb8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800bebc:	6453      	str	r3, [r2, #68]	@ 0x44
 800bebe:	4b13      	ldr	r3, [pc, #76]	@ (800bf0c <HAL_ADC_MspInit+0x138>)
 800bec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bec2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bec6:	613b      	str	r3, [r7, #16]
 800bec8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800beca:	2300      	movs	r3, #0
 800becc:	60fb      	str	r3, [r7, #12]
 800bece:	4b0f      	ldr	r3, [pc, #60]	@ (800bf0c <HAL_ADC_MspInit+0x138>)
 800bed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bed2:	4a0e      	ldr	r2, [pc, #56]	@ (800bf0c <HAL_ADC_MspInit+0x138>)
 800bed4:	f043 0301 	orr.w	r3, r3, #1
 800bed8:	6313      	str	r3, [r2, #48]	@ 0x30
 800beda:	4b0c      	ldr	r3, [pc, #48]	@ (800bf0c <HAL_ADC_MspInit+0x138>)
 800bedc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bede:	f003 0301 	and.w	r3, r3, #1
 800bee2:	60fb      	str	r3, [r7, #12]
 800bee4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800bee6:	2302      	movs	r3, #2
 800bee8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800beea:	2303      	movs	r3, #3
 800beec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800beee:	2300      	movs	r3, #0
 800bef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bef2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bef6:	4619      	mov	r1, r3
 800bef8:	4807      	ldr	r0, [pc, #28]	@ (800bf18 <HAL_ADC_MspInit+0x144>)
 800befa:	f001 fce9 	bl	800d8d0 <HAL_GPIO_Init>
}
 800befe:	bf00      	nop
 800bf00:	3738      	adds	r7, #56	@ 0x38
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}
 800bf06:	bf00      	nop
 800bf08:	40012000 	.word	0x40012000
 800bf0c:	40023800 	.word	0x40023800
 800bf10:	40020400 	.word	0x40020400
 800bf14:	40012100 	.word	0x40012100
 800bf18:	40020000 	.word	0x40020000
 800bf1c:	40012200 	.word	0x40012200

0800bf20 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b086      	sub	sp, #24
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800bf28:	f107 0308 	add.w	r3, r7, #8
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	601a      	str	r2, [r3, #0]
 800bf30:	605a      	str	r2, [r3, #4]
 800bf32:	609a      	str	r2, [r3, #8]
 800bf34:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	4a10      	ldr	r2, [pc, #64]	@ (800bf7c <HAL_RTC_MspInit+0x5c>)
 800bf3c:	4293      	cmp	r3, r2
 800bf3e:	d119      	bne.n	800bf74 <HAL_RTC_MspInit+0x54>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800bf40:	2302      	movs	r3, #2
 800bf42:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800bf44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bf48:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bf4a:	f107 0308 	add.w	r3, r7, #8
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f002 fb7a 	bl	800e648 <HAL_RCCEx_PeriphCLKConfig>
 800bf54:	4603      	mov	r3, r0
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d001      	beq.n	800bf5e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800bf5a:	f7ff fbe7 	bl	800b72c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800bf5e:	4b08      	ldr	r3, [pc, #32]	@ (800bf80 <HAL_RTC_MspInit+0x60>)
 800bf60:	2201      	movs	r2, #1
 800bf62:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 800bf64:	2200      	movs	r2, #0
 800bf66:	2105      	movs	r1, #5
 800bf68:	2029      	movs	r0, #41	@ 0x29
 800bf6a:	f001 f885 	bl	800d078 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800bf6e:	2029      	movs	r0, #41	@ 0x29
 800bf70:	f001 f89e 	bl	800d0b0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 800bf74:	bf00      	nop
 800bf76:	3718      	adds	r7, #24
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}
 800bf7c:	40002800 	.word	0x40002800
 800bf80:	42470e3c 	.word	0x42470e3c

0800bf84 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b08c      	sub	sp, #48	@ 0x30
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bf8c:	f107 031c 	add.w	r3, r7, #28
 800bf90:	2200      	movs	r2, #0
 800bf92:	601a      	str	r2, [r3, #0]
 800bf94:	605a      	str	r2, [r3, #4]
 800bf96:	609a      	str	r2, [r3, #8]
 800bf98:	60da      	str	r2, [r3, #12]
 800bf9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	4a32      	ldr	r2, [pc, #200]	@ (800c06c <HAL_SPI_MspInit+0xe8>)
 800bfa2:	4293      	cmp	r3, r2
 800bfa4:	d12c      	bne.n	800c000 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	61bb      	str	r3, [r7, #24]
 800bfaa:	4b31      	ldr	r3, [pc, #196]	@ (800c070 <HAL_SPI_MspInit+0xec>)
 800bfac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bfae:	4a30      	ldr	r2, [pc, #192]	@ (800c070 <HAL_SPI_MspInit+0xec>)
 800bfb0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800bfb4:	6453      	str	r3, [r2, #68]	@ 0x44
 800bfb6:	4b2e      	ldr	r3, [pc, #184]	@ (800c070 <HAL_SPI_MspInit+0xec>)
 800bfb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bfba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800bfbe:	61bb      	str	r3, [r7, #24]
 800bfc0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	617b      	str	r3, [r7, #20]
 800bfc6:	4b2a      	ldr	r3, [pc, #168]	@ (800c070 <HAL_SPI_MspInit+0xec>)
 800bfc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfca:	4a29      	ldr	r2, [pc, #164]	@ (800c070 <HAL_SPI_MspInit+0xec>)
 800bfcc:	f043 0302 	orr.w	r3, r3, #2
 800bfd0:	6313      	str	r3, [r2, #48]	@ 0x30
 800bfd2:	4b27      	ldr	r3, [pc, #156]	@ (800c070 <HAL_SPI_MspInit+0xec>)
 800bfd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfd6:	f003 0302 	and.w	r3, r3, #2
 800bfda:	617b      	str	r3, [r7, #20]
 800bfdc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800bfde:	2338      	movs	r3, #56	@ 0x38
 800bfe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bfe2:	2302      	movs	r3, #2
 800bfe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bfea:	2303      	movs	r3, #3
 800bfec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800bfee:	2305      	movs	r3, #5
 800bff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bff2:	f107 031c 	add.w	r3, r7, #28
 800bff6:	4619      	mov	r1, r3
 800bff8:	481e      	ldr	r0, [pc, #120]	@ (800c074 <HAL_SPI_MspInit+0xf0>)
 800bffa:	f001 fc69 	bl	800d8d0 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 800bffe:	e031      	b.n	800c064 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI3)
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	4a1c      	ldr	r2, [pc, #112]	@ (800c078 <HAL_SPI_MspInit+0xf4>)
 800c006:	4293      	cmp	r3, r2
 800c008:	d12c      	bne.n	800c064 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800c00a:	2300      	movs	r3, #0
 800c00c:	613b      	str	r3, [r7, #16]
 800c00e:	4b18      	ldr	r3, [pc, #96]	@ (800c070 <HAL_SPI_MspInit+0xec>)
 800c010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c012:	4a17      	ldr	r2, [pc, #92]	@ (800c070 <HAL_SPI_MspInit+0xec>)
 800c014:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c018:	6413      	str	r3, [r2, #64]	@ 0x40
 800c01a:	4b15      	ldr	r3, [pc, #84]	@ (800c070 <HAL_SPI_MspInit+0xec>)
 800c01c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c01e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c022:	613b      	str	r3, [r7, #16]
 800c024:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c026:	2300      	movs	r3, #0
 800c028:	60fb      	str	r3, [r7, #12]
 800c02a:	4b11      	ldr	r3, [pc, #68]	@ (800c070 <HAL_SPI_MspInit+0xec>)
 800c02c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c02e:	4a10      	ldr	r2, [pc, #64]	@ (800c070 <HAL_SPI_MspInit+0xec>)
 800c030:	f043 0304 	orr.w	r3, r3, #4
 800c034:	6313      	str	r3, [r2, #48]	@ 0x30
 800c036:	4b0e      	ldr	r3, [pc, #56]	@ (800c070 <HAL_SPI_MspInit+0xec>)
 800c038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c03a:	f003 0304 	and.w	r3, r3, #4
 800c03e:	60fb      	str	r3, [r7, #12]
 800c040:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800c042:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800c046:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c048:	2302      	movs	r3, #2
 800c04a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c04c:	2300      	movs	r3, #0
 800c04e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c050:	2303      	movs	r3, #3
 800c052:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800c054:	2306      	movs	r3, #6
 800c056:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c058:	f107 031c 	add.w	r3, r7, #28
 800c05c:	4619      	mov	r1, r3
 800c05e:	4807      	ldr	r0, [pc, #28]	@ (800c07c <HAL_SPI_MspInit+0xf8>)
 800c060:	f001 fc36 	bl	800d8d0 <HAL_GPIO_Init>
}
 800c064:	bf00      	nop
 800c066:	3730      	adds	r7, #48	@ 0x30
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}
 800c06c:	40013000 	.word	0x40013000
 800c070:	40023800 	.word	0x40023800
 800c074:	40020400 	.word	0x40020400
 800c078:	40003c00 	.word	0x40003c00
 800c07c:	40020800 	.word	0x40020800

0800c080 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800c080:	b480      	push	{r7}
 800c082:	b085      	sub	sp, #20
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	4a15      	ldr	r2, [pc, #84]	@ (800c0e4 <HAL_TIM_Base_MspInit+0x64>)
 800c08e:	4293      	cmp	r3, r2
 800c090:	d10e      	bne.n	800c0b0 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800c092:	2300      	movs	r3, #0
 800c094:	60fb      	str	r3, [r7, #12]
 800c096:	4b14      	ldr	r3, [pc, #80]	@ (800c0e8 <HAL_TIM_Base_MspInit+0x68>)
 800c098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c09a:	4a13      	ldr	r2, [pc, #76]	@ (800c0e8 <HAL_TIM_Base_MspInit+0x68>)
 800c09c:	f043 0301 	orr.w	r3, r3, #1
 800c0a0:	6453      	str	r3, [r2, #68]	@ 0x44
 800c0a2:	4b11      	ldr	r3, [pc, #68]	@ (800c0e8 <HAL_TIM_Base_MspInit+0x68>)
 800c0a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c0a6:	f003 0301 	and.w	r3, r3, #1
 800c0aa:	60fb      	str	r3, [r7, #12]
 800c0ac:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 800c0ae:	e012      	b.n	800c0d6 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	4a0d      	ldr	r2, [pc, #52]	@ (800c0ec <HAL_TIM_Base_MspInit+0x6c>)
 800c0b6:	4293      	cmp	r3, r2
 800c0b8:	d10d      	bne.n	800c0d6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	60bb      	str	r3, [r7, #8]
 800c0be:	4b0a      	ldr	r3, [pc, #40]	@ (800c0e8 <HAL_TIM_Base_MspInit+0x68>)
 800c0c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0c2:	4a09      	ldr	r2, [pc, #36]	@ (800c0e8 <HAL_TIM_Base_MspInit+0x68>)
 800c0c4:	f043 0304 	orr.w	r3, r3, #4
 800c0c8:	6413      	str	r3, [r2, #64]	@ 0x40
 800c0ca:	4b07      	ldr	r3, [pc, #28]	@ (800c0e8 <HAL_TIM_Base_MspInit+0x68>)
 800c0cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0ce:	f003 0304 	and.w	r3, r3, #4
 800c0d2:	60bb      	str	r3, [r7, #8]
 800c0d4:	68bb      	ldr	r3, [r7, #8]
}
 800c0d6:	bf00      	nop
 800c0d8:	3714      	adds	r7, #20
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e0:	4770      	bx	lr
 800c0e2:	bf00      	nop
 800c0e4:	40010000 	.word	0x40010000
 800c0e8:	40023800 	.word	0x40023800
 800c0ec:	40000800 	.word	0x40000800

0800c0f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b08a      	sub	sp, #40	@ 0x28
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c0f8:	f107 0314 	add.w	r3, r7, #20
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	601a      	str	r2, [r3, #0]
 800c100:	605a      	str	r2, [r3, #4]
 800c102:	609a      	str	r2, [r3, #8]
 800c104:	60da      	str	r2, [r3, #12]
 800c106:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	4a25      	ldr	r2, [pc, #148]	@ (800c1a4 <HAL_TIM_MspPostInit+0xb4>)
 800c10e:	4293      	cmp	r3, r2
 800c110:	d11f      	bne.n	800c152 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800c112:	2300      	movs	r3, #0
 800c114:	613b      	str	r3, [r7, #16]
 800c116:	4b24      	ldr	r3, [pc, #144]	@ (800c1a8 <HAL_TIM_MspPostInit+0xb8>)
 800c118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c11a:	4a23      	ldr	r2, [pc, #140]	@ (800c1a8 <HAL_TIM_MspPostInit+0xb8>)
 800c11c:	f043 0310 	orr.w	r3, r3, #16
 800c120:	6313      	str	r3, [r2, #48]	@ 0x30
 800c122:	4b21      	ldr	r3, [pc, #132]	@ (800c1a8 <HAL_TIM_MspPostInit+0xb8>)
 800c124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c126:	f003 0310 	and.w	r3, r3, #16
 800c12a:	613b      	str	r3, [r7, #16]
 800c12c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800c12e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c132:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c134:	2302      	movs	r3, #2
 800c136:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c138:	2300      	movs	r3, #0
 800c13a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c13c:	2300      	movs	r3, #0
 800c13e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800c140:	2301      	movs	r3, #1
 800c142:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800c144:	f107 0314 	add.w	r3, r7, #20
 800c148:	4619      	mov	r1, r3
 800c14a:	4818      	ldr	r0, [pc, #96]	@ (800c1ac <HAL_TIM_MspPostInit+0xbc>)
 800c14c:	f001 fbc0 	bl	800d8d0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800c150:	e023      	b.n	800c19a <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM4)
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	4a16      	ldr	r2, [pc, #88]	@ (800c1b0 <HAL_TIM_MspPostInit+0xc0>)
 800c158:	4293      	cmp	r3, r2
 800c15a:	d11e      	bne.n	800c19a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800c15c:	2300      	movs	r3, #0
 800c15e:	60fb      	str	r3, [r7, #12]
 800c160:	4b11      	ldr	r3, [pc, #68]	@ (800c1a8 <HAL_TIM_MspPostInit+0xb8>)
 800c162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c164:	4a10      	ldr	r2, [pc, #64]	@ (800c1a8 <HAL_TIM_MspPostInit+0xb8>)
 800c166:	f043 0308 	orr.w	r3, r3, #8
 800c16a:	6313      	str	r3, [r2, #48]	@ 0x30
 800c16c:	4b0e      	ldr	r3, [pc, #56]	@ (800c1a8 <HAL_TIM_MspPostInit+0xb8>)
 800c16e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c170:	f003 0308 	and.w	r3, r3, #8
 800c174:	60fb      	str	r3, [r7, #12]
 800c176:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800c178:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c17c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c17e:	2302      	movs	r3, #2
 800c180:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c182:	2300      	movs	r3, #0
 800c184:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c186:	2300      	movs	r3, #0
 800c188:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800c18a:	2302      	movs	r3, #2
 800c18c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c18e:	f107 0314 	add.w	r3, r7, #20
 800c192:	4619      	mov	r1, r3
 800c194:	4807      	ldr	r0, [pc, #28]	@ (800c1b4 <HAL_TIM_MspPostInit+0xc4>)
 800c196:	f001 fb9b 	bl	800d8d0 <HAL_GPIO_Init>
}
 800c19a:	bf00      	nop
 800c19c:	3728      	adds	r7, #40	@ 0x28
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}
 800c1a2:	bf00      	nop
 800c1a4:	40010000 	.word	0x40010000
 800c1a8:	40023800 	.word	0x40023800
 800c1ac:	40021000 	.word	0x40021000
 800c1b0:	40000800 	.word	0x40000800
 800c1b4:	40020c00 	.word	0x40020c00

0800c1b8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b08c      	sub	sp, #48	@ 0x30
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c1c0:	f107 031c 	add.w	r3, r7, #28
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	601a      	str	r2, [r3, #0]
 800c1c8:	605a      	str	r2, [r3, #4]
 800c1ca:	609a      	str	r2, [r3, #8]
 800c1cc:	60da      	str	r2, [r3, #12]
 800c1ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	4a69      	ldr	r2, [pc, #420]	@ (800c37c <HAL_UART_MspInit+0x1c4>)
 800c1d6:	4293      	cmp	r3, r2
 800c1d8:	d164      	bne.n	800c2a4 <HAL_UART_MspInit+0xec>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800c1da:	2300      	movs	r3, #0
 800c1dc:	61bb      	str	r3, [r7, #24]
 800c1de:	4b68      	ldr	r3, [pc, #416]	@ (800c380 <HAL_UART_MspInit+0x1c8>)
 800c1e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1e2:	4a67      	ldr	r2, [pc, #412]	@ (800c380 <HAL_UART_MspInit+0x1c8>)
 800c1e4:	f043 0310 	orr.w	r3, r3, #16
 800c1e8:	6453      	str	r3, [r2, #68]	@ 0x44
 800c1ea:	4b65      	ldr	r3, [pc, #404]	@ (800c380 <HAL_UART_MspInit+0x1c8>)
 800c1ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1ee:	f003 0310 	and.w	r3, r3, #16
 800c1f2:	61bb      	str	r3, [r7, #24]
 800c1f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	617b      	str	r3, [r7, #20]
 800c1fa:	4b61      	ldr	r3, [pc, #388]	@ (800c380 <HAL_UART_MspInit+0x1c8>)
 800c1fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1fe:	4a60      	ldr	r2, [pc, #384]	@ (800c380 <HAL_UART_MspInit+0x1c8>)
 800c200:	f043 0301 	orr.w	r3, r3, #1
 800c204:	6313      	str	r3, [r2, #48]	@ 0x30
 800c206:	4b5e      	ldr	r3, [pc, #376]	@ (800c380 <HAL_UART_MspInit+0x1c8>)
 800c208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c20a:	f003 0301 	and.w	r3, r3, #1
 800c20e:	617b      	str	r3, [r7, #20]
 800c210:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800c212:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800c216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c218:	2302      	movs	r3, #2
 800c21a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c21c:	2300      	movs	r3, #0
 800c21e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c220:	2303      	movs	r3, #3
 800c222:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800c224:	2307      	movs	r3, #7
 800c226:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c228:	f107 031c 	add.w	r3, r7, #28
 800c22c:	4619      	mov	r1, r3
 800c22e:	4855      	ldr	r0, [pc, #340]	@ (800c384 <HAL_UART_MspInit+0x1cc>)
 800c230:	f001 fb4e 	bl	800d8d0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800c234:	4b54      	ldr	r3, [pc, #336]	@ (800c388 <HAL_UART_MspInit+0x1d0>)
 800c236:	4a55      	ldr	r2, [pc, #340]	@ (800c38c <HAL_UART_MspInit+0x1d4>)
 800c238:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800c23a:	4b53      	ldr	r3, [pc, #332]	@ (800c388 <HAL_UART_MspInit+0x1d0>)
 800c23c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800c240:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c242:	4b51      	ldr	r3, [pc, #324]	@ (800c388 <HAL_UART_MspInit+0x1d0>)
 800c244:	2200      	movs	r2, #0
 800c246:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c248:	4b4f      	ldr	r3, [pc, #316]	@ (800c388 <HAL_UART_MspInit+0x1d0>)
 800c24a:	2200      	movs	r2, #0
 800c24c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c24e:	4b4e      	ldr	r3, [pc, #312]	@ (800c388 <HAL_UART_MspInit+0x1d0>)
 800c250:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c254:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c256:	4b4c      	ldr	r3, [pc, #304]	@ (800c388 <HAL_UART_MspInit+0x1d0>)
 800c258:	2200      	movs	r2, #0
 800c25a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c25c:	4b4a      	ldr	r3, [pc, #296]	@ (800c388 <HAL_UART_MspInit+0x1d0>)
 800c25e:	2200      	movs	r2, #0
 800c260:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800c262:	4b49      	ldr	r3, [pc, #292]	@ (800c388 <HAL_UART_MspInit+0x1d0>)
 800c264:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c268:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800c26a:	4b47      	ldr	r3, [pc, #284]	@ (800c388 <HAL_UART_MspInit+0x1d0>)
 800c26c:	2200      	movs	r2, #0
 800c26e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c270:	4b45      	ldr	r3, [pc, #276]	@ (800c388 <HAL_UART_MspInit+0x1d0>)
 800c272:	2200      	movs	r2, #0
 800c274:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800c276:	4844      	ldr	r0, [pc, #272]	@ (800c388 <HAL_UART_MspInit+0x1d0>)
 800c278:	f000 ff28 	bl	800d0cc <HAL_DMA_Init>
 800c27c:	4603      	mov	r3, r0
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d001      	beq.n	800c286 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800c282:	f7ff fa53 	bl	800b72c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	4a3f      	ldr	r2, [pc, #252]	@ (800c388 <HAL_UART_MspInit+0x1d0>)
 800c28a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800c28c:	4a3e      	ldr	r2, [pc, #248]	@ (800c388 <HAL_UART_MspInit+0x1d0>)
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800c292:	2200      	movs	r2, #0
 800c294:	2105      	movs	r1, #5
 800c296:	2025      	movs	r0, #37	@ 0x25
 800c298:	f000 feee 	bl	800d078 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800c29c:	2025      	movs	r0, #37	@ 0x25
 800c29e:	f000 ff07 	bl	800d0b0 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 800c2a2:	e067      	b.n	800c374 <HAL_UART_MspInit+0x1bc>
  else if(huart->Instance==USART2)
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	4a39      	ldr	r2, [pc, #228]	@ (800c390 <HAL_UART_MspInit+0x1d8>)
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	d162      	bne.n	800c374 <HAL_UART_MspInit+0x1bc>
    __HAL_RCC_USART2_CLK_ENABLE();
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	613b      	str	r3, [r7, #16]
 800c2b2:	4b33      	ldr	r3, [pc, #204]	@ (800c380 <HAL_UART_MspInit+0x1c8>)
 800c2b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2b6:	4a32      	ldr	r2, [pc, #200]	@ (800c380 <HAL_UART_MspInit+0x1c8>)
 800c2b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c2bc:	6413      	str	r3, [r2, #64]	@ 0x40
 800c2be:	4b30      	ldr	r3, [pc, #192]	@ (800c380 <HAL_UART_MspInit+0x1c8>)
 800c2c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c2c6:	613b      	str	r3, [r7, #16]
 800c2c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	60fb      	str	r3, [r7, #12]
 800c2ce:	4b2c      	ldr	r3, [pc, #176]	@ (800c380 <HAL_UART_MspInit+0x1c8>)
 800c2d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2d2:	4a2b      	ldr	r2, [pc, #172]	@ (800c380 <HAL_UART_MspInit+0x1c8>)
 800c2d4:	f043 0301 	orr.w	r3, r3, #1
 800c2d8:	6313      	str	r3, [r2, #48]	@ 0x30
 800c2da:	4b29      	ldr	r3, [pc, #164]	@ (800c380 <HAL_UART_MspInit+0x1c8>)
 800c2dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2de:	f003 0301 	and.w	r3, r3, #1
 800c2e2:	60fb      	str	r3, [r7, #12]
 800c2e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800c2e6:	230c      	movs	r3, #12
 800c2e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c2ea:	2302      	movs	r3, #2
 800c2ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c2f2:	2303      	movs	r3, #3
 800c2f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800c2f6:	2307      	movs	r3, #7
 800c2f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c2fa:	f107 031c 	add.w	r3, r7, #28
 800c2fe:	4619      	mov	r1, r3
 800c300:	4820      	ldr	r0, [pc, #128]	@ (800c384 <HAL_UART_MspInit+0x1cc>)
 800c302:	f001 fae5 	bl	800d8d0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800c306:	4b23      	ldr	r3, [pc, #140]	@ (800c394 <HAL_UART_MspInit+0x1dc>)
 800c308:	4a23      	ldr	r2, [pc, #140]	@ (800c398 <HAL_UART_MspInit+0x1e0>)
 800c30a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800c30c:	4b21      	ldr	r3, [pc, #132]	@ (800c394 <HAL_UART_MspInit+0x1dc>)
 800c30e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800c312:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c314:	4b1f      	ldr	r3, [pc, #124]	@ (800c394 <HAL_UART_MspInit+0x1dc>)
 800c316:	2200      	movs	r2, #0
 800c318:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c31a:	4b1e      	ldr	r3, [pc, #120]	@ (800c394 <HAL_UART_MspInit+0x1dc>)
 800c31c:	2200      	movs	r2, #0
 800c31e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c320:	4b1c      	ldr	r3, [pc, #112]	@ (800c394 <HAL_UART_MspInit+0x1dc>)
 800c322:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c326:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c328:	4b1a      	ldr	r3, [pc, #104]	@ (800c394 <HAL_UART_MspInit+0x1dc>)
 800c32a:	2200      	movs	r2, #0
 800c32c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c32e:	4b19      	ldr	r3, [pc, #100]	@ (800c394 <HAL_UART_MspInit+0x1dc>)
 800c330:	2200      	movs	r2, #0
 800c332:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800c334:	4b17      	ldr	r3, [pc, #92]	@ (800c394 <HAL_UART_MspInit+0x1dc>)
 800c336:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c33a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800c33c:	4b15      	ldr	r3, [pc, #84]	@ (800c394 <HAL_UART_MspInit+0x1dc>)
 800c33e:	2200      	movs	r2, #0
 800c340:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c342:	4b14      	ldr	r3, [pc, #80]	@ (800c394 <HAL_UART_MspInit+0x1dc>)
 800c344:	2200      	movs	r2, #0
 800c346:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800c348:	4812      	ldr	r0, [pc, #72]	@ (800c394 <HAL_UART_MspInit+0x1dc>)
 800c34a:	f000 febf 	bl	800d0cc <HAL_DMA_Init>
 800c34e:	4603      	mov	r3, r0
 800c350:	2b00      	cmp	r3, #0
 800c352:	d001      	beq.n	800c358 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 800c354:	f7ff f9ea 	bl	800b72c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	4a0e      	ldr	r2, [pc, #56]	@ (800c394 <HAL_UART_MspInit+0x1dc>)
 800c35c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800c35e:	4a0d      	ldr	r2, [pc, #52]	@ (800c394 <HAL_UART_MspInit+0x1dc>)
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800c364:	2200      	movs	r2, #0
 800c366:	2105      	movs	r1, #5
 800c368:	2026      	movs	r0, #38	@ 0x26
 800c36a:	f000 fe85 	bl	800d078 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800c36e:	2026      	movs	r0, #38	@ 0x26
 800c370:	f000 fe9e 	bl	800d0b0 <HAL_NVIC_EnableIRQ>
}
 800c374:	bf00      	nop
 800c376:	3730      	adds	r7, #48	@ 0x30
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd80      	pop	{r7, pc}
 800c37c:	40011000 	.word	0x40011000
 800c380:	40023800 	.word	0x40023800
 800c384:	40020000 	.word	0x40020000
 800c388:	20001060 	.word	0x20001060
 800c38c:	40026440 	.word	0x40026440
 800c390:	40004400 	.word	0x40004400
 800c394:	200010c0 	.word	0x200010c0
 800c398:	40026088 	.word	0x40026088

0800c39c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b08e      	sub	sp, #56	@ 0x38
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	60fb      	str	r3, [r7, #12]
 800c3b0:	4b33      	ldr	r3, [pc, #204]	@ (800c480 <HAL_InitTick+0xe4>)
 800c3b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3b4:	4a32      	ldr	r2, [pc, #200]	@ (800c480 <HAL_InitTick+0xe4>)
 800c3b6:	f043 0310 	orr.w	r3, r3, #16
 800c3ba:	6413      	str	r3, [r2, #64]	@ 0x40
 800c3bc:	4b30      	ldr	r3, [pc, #192]	@ (800c480 <HAL_InitTick+0xe4>)
 800c3be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3c0:	f003 0310 	and.w	r3, r3, #16
 800c3c4:	60fb      	str	r3, [r7, #12]
 800c3c6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800c3c8:	f107 0210 	add.w	r2, r7, #16
 800c3cc:	f107 0314 	add.w	r3, r7, #20
 800c3d0:	4611      	mov	r1, r2
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f002 f906 	bl	800e5e4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800c3d8:	6a3b      	ldr	r3, [r7, #32]
 800c3da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800c3dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d103      	bne.n	800c3ea <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800c3e2:	f002 f8d7 	bl	800e594 <HAL_RCC_GetPCLK1Freq>
 800c3e6:	6378      	str	r0, [r7, #52]	@ 0x34
 800c3e8:	e004      	b.n	800c3f4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800c3ea:	f002 f8d3 	bl	800e594 <HAL_RCC_GetPCLK1Freq>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	005b      	lsls	r3, r3, #1
 800c3f2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800c3f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3f6:	4a23      	ldr	r2, [pc, #140]	@ (800c484 <HAL_InitTick+0xe8>)
 800c3f8:	fba2 2303 	umull	r2, r3, r2, r3
 800c3fc:	0c9b      	lsrs	r3, r3, #18
 800c3fe:	3b01      	subs	r3, #1
 800c400:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800c402:	4b21      	ldr	r3, [pc, #132]	@ (800c488 <HAL_InitTick+0xec>)
 800c404:	4a21      	ldr	r2, [pc, #132]	@ (800c48c <HAL_InitTick+0xf0>)
 800c406:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800c408:	4b1f      	ldr	r3, [pc, #124]	@ (800c488 <HAL_InitTick+0xec>)
 800c40a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800c40e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800c410:	4a1d      	ldr	r2, [pc, #116]	@ (800c488 <HAL_InitTick+0xec>)
 800c412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c414:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800c416:	4b1c      	ldr	r3, [pc, #112]	@ (800c488 <HAL_InitTick+0xec>)
 800c418:	2200      	movs	r2, #0
 800c41a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c41c:	4b1a      	ldr	r3, [pc, #104]	@ (800c488 <HAL_InitTick+0xec>)
 800c41e:	2200      	movs	r2, #0
 800c420:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c422:	4b19      	ldr	r3, [pc, #100]	@ (800c488 <HAL_InitTick+0xec>)
 800c424:	2200      	movs	r2, #0
 800c426:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800c428:	4817      	ldr	r0, [pc, #92]	@ (800c488 <HAL_InitTick+0xec>)
 800c42a:	f003 fba1 	bl	800fb70 <HAL_TIM_Base_Init>
 800c42e:	4603      	mov	r3, r0
 800c430:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800c434:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d11b      	bne.n	800c474 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800c43c:	4812      	ldr	r0, [pc, #72]	@ (800c488 <HAL_InitTick+0xec>)
 800c43e:	f003 fbe7 	bl	800fc10 <HAL_TIM_Base_Start_IT>
 800c442:	4603      	mov	r3, r0
 800c444:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800c448:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d111      	bne.n	800c474 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800c450:	2036      	movs	r0, #54	@ 0x36
 800c452:	f000 fe2d 	bl	800d0b0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2b0f      	cmp	r3, #15
 800c45a:	d808      	bhi.n	800c46e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800c45c:	2200      	movs	r2, #0
 800c45e:	6879      	ldr	r1, [r7, #4]
 800c460:	2036      	movs	r0, #54	@ 0x36
 800c462:	f000 fe09 	bl	800d078 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800c466:	4a0a      	ldr	r2, [pc, #40]	@ (800c490 <HAL_InitTick+0xf4>)
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	6013      	str	r3, [r2, #0]
 800c46c:	e002      	b.n	800c474 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800c46e:	2301      	movs	r3, #1
 800c470:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800c474:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800c478:	4618      	mov	r0, r3
 800c47a:	3738      	adds	r7, #56	@ 0x38
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}
 800c480:	40023800 	.word	0x40023800
 800c484:	431bde83 	.word	0x431bde83
 800c488:	20001b74 	.word	0x20001b74
 800c48c:	40001000 	.word	0x40001000
 800c490:	20000168 	.word	0x20000168

0800c494 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800c494:	b480      	push	{r7}
 800c496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 800c498:	bf00      	nop
 800c49a:	e7fd      	b.n	800c498 <NMI_Handler+0x4>

0800c49c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800c49c:	b480      	push	{r7}
 800c49e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800c4a0:	bf00      	nop
 800c4a2:	e7fd      	b.n	800c4a0 <MemManage_Handler+0x4>

0800c4a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800c4a4:	b480      	push	{r7}
 800c4a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800c4a8:	bf00      	nop
 800c4aa:	e7fd      	b.n	800c4a8 <BusFault_Handler+0x4>

0800c4ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800c4ac:	b480      	push	{r7}
 800c4ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800c4b0:	bf00      	nop
 800c4b2:	e7fd      	b.n	800c4b0 <UsageFault_Handler+0x4>

0800c4b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800c4b8:	bf00      	nop
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c0:	4770      	bx	lr
	...

0800c4c4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800c4c8:	4802      	ldr	r0, [pc, #8]	@ (800c4d4 <DMA1_Stream5_IRQHandler+0x10>)
 800c4ca:	f000 ff97 	bl	800d3fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800c4ce:	bf00      	nop
 800c4d0:	bd80      	pop	{r7, pc}
 800c4d2:	bf00      	nop
 800c4d4:	200010c0 	.word	0x200010c0

0800c4d8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800c4dc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800c4e0:	f001 fbc4 	bl	800dc6c <HAL_GPIO_EXTI_IRQHandler>
   Trigger_Display=1;
 800c4e4:	4b02      	ldr	r3, [pc, #8]	@ (800c4f0 <EXTI9_5_IRQHandler+0x18>)
 800c4e6:	2201      	movs	r2, #1
 800c4e8:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800c4ea:	bf00      	nop
 800c4ec:	bd80      	pop	{r7, pc}
 800c4ee:	bf00      	nop
 800c4f0:	200019a7 	.word	0x200019a7

0800c4f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800c4f8:	4802      	ldr	r0, [pc, #8]	@ (800c504 <USART1_IRQHandler+0x10>)
 800c4fa:	f004 fd93 	bl	8011024 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800c4fe:	bf00      	nop
 800c500:	bd80      	pop	{r7, pc}
 800c502:	bf00      	nop
 800c504:	20000fd0 	.word	0x20000fd0

0800c508 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800c50c:	4802      	ldr	r0, [pc, #8]	@ (800c518 <USART2_IRQHandler+0x10>)
 800c50e:	f004 fd89 	bl	8011024 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800c512:	bf00      	nop
 800c514:	bd80      	pop	{r7, pc}
 800c516:	bf00      	nop
 800c518:	20001018 	.word	0x20001018

0800c51c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800c520:	4802      	ldr	r0, [pc, #8]	@ (800c52c <RTC_Alarm_IRQHandler+0x10>)
 800c522:	f002 fc59 	bl	800edd8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800c526:	bf00      	nop
 800c528:	bd80      	pop	{r7, pc}
 800c52a:	bf00      	nop
 800c52c:	20000e70 	.word	0x20000e70

0800c530 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800c534:	4802      	ldr	r0, [pc, #8]	@ (800c540 <TIM6_DAC_IRQHandler+0x10>)
 800c536:	f003 fcfd 	bl	800ff34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800c53a:	bf00      	nop
 800c53c:	bd80      	pop	{r7, pc}
 800c53e:	bf00      	nop
 800c540:	20001b74 	.word	0x20001b74

0800c544 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800c548:	4802      	ldr	r0, [pc, #8]	@ (800c554 <DMA2_Stream2_IRQHandler+0x10>)
 800c54a:	f000 ff57 	bl	800d3fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800c54e:	bf00      	nop
 800c550:	bd80      	pop	{r7, pc}
 800c552:	bf00      	nop
 800c554:	20001060 	.word	0x20001060

0800c558 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b086      	sub	sp, #24
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800c560:	4a14      	ldr	r2, [pc, #80]	@ (800c5b4 <_sbrk+0x5c>)
 800c562:	4b15      	ldr	r3, [pc, #84]	@ (800c5b8 <_sbrk+0x60>)
 800c564:	1ad3      	subs	r3, r2, r3
 800c566:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800c568:	697b      	ldr	r3, [r7, #20]
 800c56a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800c56c:	4b13      	ldr	r3, [pc, #76]	@ (800c5bc <_sbrk+0x64>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d102      	bne.n	800c57a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800c574:	4b11      	ldr	r3, [pc, #68]	@ (800c5bc <_sbrk+0x64>)
 800c576:	4a12      	ldr	r2, [pc, #72]	@ (800c5c0 <_sbrk+0x68>)
 800c578:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800c57a:	4b10      	ldr	r3, [pc, #64]	@ (800c5bc <_sbrk+0x64>)
 800c57c:	681a      	ldr	r2, [r3, #0]
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	4413      	add	r3, r2
 800c582:	693a      	ldr	r2, [r7, #16]
 800c584:	429a      	cmp	r2, r3
 800c586:	d207      	bcs.n	800c598 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800c588:	f009 f868 	bl	801565c <__errno>
 800c58c:	4603      	mov	r3, r0
 800c58e:	220c      	movs	r2, #12
 800c590:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800c592:	f04f 33ff 	mov.w	r3, #4294967295
 800c596:	e009      	b.n	800c5ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800c598:	4b08      	ldr	r3, [pc, #32]	@ (800c5bc <_sbrk+0x64>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800c59e:	4b07      	ldr	r3, [pc, #28]	@ (800c5bc <_sbrk+0x64>)
 800c5a0:	681a      	ldr	r2, [r3, #0]
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	4413      	add	r3, r2
 800c5a6:	4a05      	ldr	r2, [pc, #20]	@ (800c5bc <_sbrk+0x64>)
 800c5a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
}
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	3718      	adds	r7, #24
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}
 800c5b4:	20020000 	.word	0x20020000
 800c5b8:	00000400 	.word	0x00000400
 800c5bc:	20001bbc 	.word	0x20001bbc
 800c5c0:	20005ba0 	.word	0x20005ba0

0800c5c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800c5c4:	b480      	push	{r7}
 800c5c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800c5c8:	4b06      	ldr	r3, [pc, #24]	@ (800c5e4 <SystemInit+0x20>)
 800c5ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c5ce:	4a05      	ldr	r2, [pc, #20]	@ (800c5e4 <SystemInit+0x20>)
 800c5d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c5d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800c5d8:	bf00      	nop
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e0:	4770      	bx	lr
 800c5e2:	bf00      	nop
 800c5e4:	e000ed00 	.word	0xe000ed00

0800c5e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
	  ldr   sp, =_estack     /* set stack pointer */
 800c5e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800c620 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800c5ec:	f7ff ffea 	bl	800c5c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800c5f0:	480c      	ldr	r0, [pc, #48]	@ (800c624 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800c5f2:	490d      	ldr	r1, [pc, #52]	@ (800c628 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800c5f4:	4a0d      	ldr	r2, [pc, #52]	@ (800c62c <LoopFillZerobss+0x1a>)
  movs r3, #0
 800c5f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800c5f8:	e002      	b.n	800c600 <LoopCopyDataInit>

0800c5fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800c5fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800c5fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800c5fe:	3304      	adds	r3, #4

0800c600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800c600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800c602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800c604:	d3f9      	bcc.n	800c5fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800c606:	4a0a      	ldr	r2, [pc, #40]	@ (800c630 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800c608:	4c0a      	ldr	r4, [pc, #40]	@ (800c634 <LoopFillZerobss+0x22>)
  movs r3, #0
 800c60a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800c60c:	e001      	b.n	800c612 <LoopFillZerobss>

0800c60e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800c60e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800c610:	3204      	adds	r2, #4

0800c612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800c612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800c614:	d3fb      	bcc.n	800c60e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800c616:	f009 f827 	bl	8015668 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800c61a:	f7f4 fd11 	bl	8001040 <main>
  bx  lr    
 800c61e:	4770      	bx	lr
	  ldr   sp, =_estack     /* set stack pointer */
 800c620:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800c624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800c628:	200001c4 	.word	0x200001c4
  ldr r2, =_sidata
 800c62c:	08016350 	.word	0x08016350
  ldr r2, =_sbss
 800c630:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 800c634:	20005b9c 	.word	0x20005b9c

0800c638 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c638:	e7fe      	b.n	800c638 <ADC_IRQHandler>
	...

0800c63c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800c640:	4b0e      	ldr	r3, [pc, #56]	@ (800c67c <HAL_Init+0x40>)
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	4a0d      	ldr	r2, [pc, #52]	@ (800c67c <HAL_Init+0x40>)
 800c646:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c64a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800c64c:	4b0b      	ldr	r3, [pc, #44]	@ (800c67c <HAL_Init+0x40>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	4a0a      	ldr	r2, [pc, #40]	@ (800c67c <HAL_Init+0x40>)
 800c652:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c656:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800c658:	4b08      	ldr	r3, [pc, #32]	@ (800c67c <HAL_Init+0x40>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	4a07      	ldr	r2, [pc, #28]	@ (800c67c <HAL_Init+0x40>)
 800c65e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c662:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c664:	2003      	movs	r0, #3
 800c666:	f000 fcfc 	bl	800d062 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800c66a:	2000      	movs	r0, #0
 800c66c:	f7ff fe96 	bl	800c39c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800c670:	f7ff fb84 	bl	800bd7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800c674:	2300      	movs	r3, #0
}
 800c676:	4618      	mov	r0, r3
 800c678:	bd80      	pop	{r7, pc}
 800c67a:	bf00      	nop
 800c67c:	40023c00 	.word	0x40023c00

0800c680 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800c680:	b480      	push	{r7}
 800c682:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800c684:	4b06      	ldr	r3, [pc, #24]	@ (800c6a0 <HAL_IncTick+0x20>)
 800c686:	781b      	ldrb	r3, [r3, #0]
 800c688:	461a      	mov	r2, r3
 800c68a:	4b06      	ldr	r3, [pc, #24]	@ (800c6a4 <HAL_IncTick+0x24>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	4413      	add	r3, r2
 800c690:	4a04      	ldr	r2, [pc, #16]	@ (800c6a4 <HAL_IncTick+0x24>)
 800c692:	6013      	str	r3, [r2, #0]
}
 800c694:	bf00      	nop
 800c696:	46bd      	mov	sp, r7
 800c698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69c:	4770      	bx	lr
 800c69e:	bf00      	nop
 800c6a0:	2000016c 	.word	0x2000016c
 800c6a4:	20001bc0 	.word	0x20001bc0

0800c6a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800c6a8:	b480      	push	{r7}
 800c6aa:	af00      	add	r7, sp, #0
  return uwTick;
 800c6ac:	4b03      	ldr	r3, [pc, #12]	@ (800c6bc <HAL_GetTick+0x14>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
}
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b8:	4770      	bx	lr
 800c6ba:	bf00      	nop
 800c6bc:	20001bc0 	.word	0x20001bc0

0800c6c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b084      	sub	sp, #16
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800c6c8:	f7ff ffee 	bl	800c6a8 <HAL_GetTick>
 800c6cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6d8:	d005      	beq.n	800c6e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800c6da:	4b0a      	ldr	r3, [pc, #40]	@ (800c704 <HAL_Delay+0x44>)
 800c6dc:	781b      	ldrb	r3, [r3, #0]
 800c6de:	461a      	mov	r2, r3
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	4413      	add	r3, r2
 800c6e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800c6e6:	bf00      	nop
 800c6e8:	f7ff ffde 	bl	800c6a8 <HAL_GetTick>
 800c6ec:	4602      	mov	r2, r0
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	1ad3      	subs	r3, r2, r3
 800c6f2:	68fa      	ldr	r2, [r7, #12]
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	d8f7      	bhi.n	800c6e8 <HAL_Delay+0x28>
  {
  }
}
 800c6f8:	bf00      	nop
 800c6fa:	bf00      	nop
 800c6fc:	3710      	adds	r7, #16
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}
 800c702:	bf00      	nop
 800c704:	2000016c 	.word	0x2000016c

0800c708 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b084      	sub	sp, #16
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c710:	2300      	movs	r3, #0
 800c712:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d101      	bne.n	800c71e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800c71a:	2301      	movs	r3, #1
 800c71c:	e033      	b.n	800c786 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c722:	2b00      	cmp	r3, #0
 800c724:	d109      	bne.n	800c73a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f7ff fb54 	bl	800bdd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2200      	movs	r2, #0
 800c730:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2200      	movs	r2, #0
 800c736:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c73e:	f003 0310 	and.w	r3, r3, #16
 800c742:	2b00      	cmp	r3, #0
 800c744:	d118      	bne.n	800c778 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c74a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800c74e:	f023 0302 	bic.w	r3, r3, #2
 800c752:	f043 0202 	orr.w	r2, r3, #2
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f000 fad8 	bl	800cd10 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2200      	movs	r2, #0
 800c764:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c76a:	f023 0303 	bic.w	r3, r3, #3
 800c76e:	f043 0201 	orr.w	r2, r3, #1
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	641a      	str	r2, [r3, #64]	@ 0x40
 800c776:	e001      	b.n	800c77c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800c778:	2301      	movs	r3, #1
 800c77a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2200      	movs	r2, #0
 800c780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800c784:	7bfb      	ldrb	r3, [r7, #15]
}
 800c786:	4618      	mov	r0, r3
 800c788:	3710      	adds	r7, #16
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}
	...

0800c790 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800c790:	b480      	push	{r7}
 800c792:	b085      	sub	sp, #20
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800c798:	2300      	movs	r3, #0
 800c79a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c7a2:	2b01      	cmp	r3, #1
 800c7a4:	d101      	bne.n	800c7aa <HAL_ADC_Start+0x1a>
 800c7a6:	2302      	movs	r3, #2
 800c7a8:	e0b2      	b.n	800c910 <HAL_ADC_Start+0x180>
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2201      	movs	r2, #1
 800c7ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	689b      	ldr	r3, [r3, #8]
 800c7b8:	f003 0301 	and.w	r3, r3, #1
 800c7bc:	2b01      	cmp	r3, #1
 800c7be:	d018      	beq.n	800c7f2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	689a      	ldr	r2, [r3, #8]
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	f042 0201 	orr.w	r2, r2, #1
 800c7ce:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800c7d0:	4b52      	ldr	r3, [pc, #328]	@ (800c91c <HAL_ADC_Start+0x18c>)
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	4a52      	ldr	r2, [pc, #328]	@ (800c920 <HAL_ADC_Start+0x190>)
 800c7d6:	fba2 2303 	umull	r2, r3, r2, r3
 800c7da:	0c9a      	lsrs	r2, r3, #18
 800c7dc:	4613      	mov	r3, r2
 800c7de:	005b      	lsls	r3, r3, #1
 800c7e0:	4413      	add	r3, r2
 800c7e2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800c7e4:	e002      	b.n	800c7ec <HAL_ADC_Start+0x5c>
    {
      counter--;
 800c7e6:	68bb      	ldr	r3, [r7, #8]
 800c7e8:	3b01      	subs	r3, #1
 800c7ea:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d1f9      	bne.n	800c7e6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	689b      	ldr	r3, [r3, #8]
 800c7f8:	f003 0301 	and.w	r3, r3, #1
 800c7fc:	2b01      	cmp	r3, #1
 800c7fe:	d17a      	bne.n	800c8f6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c804:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800c808:	f023 0301 	bic.w	r3, r3, #1
 800c80c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	685b      	ldr	r3, [r3, #4]
 800c81a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d007      	beq.n	800c832 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c826:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800c82a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c836:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c83a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c83e:	d106      	bne.n	800c84e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c844:	f023 0206 	bic.w	r2, r3, #6
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	645a      	str	r2, [r3, #68]	@ 0x44
 800c84c:	e002      	b.n	800c854 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2200      	movs	r2, #0
 800c852:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2200      	movs	r2, #0
 800c858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800c85c:	4b31      	ldr	r3, [pc, #196]	@ (800c924 <HAL_ADC_Start+0x194>)
 800c85e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800c868:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	685b      	ldr	r3, [r3, #4]
 800c86e:	f003 031f 	and.w	r3, r3, #31
 800c872:	2b00      	cmp	r3, #0
 800c874:	d12a      	bne.n	800c8cc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	4a2b      	ldr	r2, [pc, #172]	@ (800c928 <HAL_ADC_Start+0x198>)
 800c87c:	4293      	cmp	r3, r2
 800c87e:	d015      	beq.n	800c8ac <HAL_ADC_Start+0x11c>
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	4a29      	ldr	r2, [pc, #164]	@ (800c92c <HAL_ADC_Start+0x19c>)
 800c886:	4293      	cmp	r3, r2
 800c888:	d105      	bne.n	800c896 <HAL_ADC_Start+0x106>
 800c88a:	4b26      	ldr	r3, [pc, #152]	@ (800c924 <HAL_ADC_Start+0x194>)
 800c88c:	685b      	ldr	r3, [r3, #4]
 800c88e:	f003 031f 	and.w	r3, r3, #31
 800c892:	2b00      	cmp	r3, #0
 800c894:	d00a      	beq.n	800c8ac <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	4a25      	ldr	r2, [pc, #148]	@ (800c930 <HAL_ADC_Start+0x1a0>)
 800c89c:	4293      	cmp	r3, r2
 800c89e:	d136      	bne.n	800c90e <HAL_ADC_Start+0x17e>
 800c8a0:	4b20      	ldr	r3, [pc, #128]	@ (800c924 <HAL_ADC_Start+0x194>)
 800c8a2:	685b      	ldr	r3, [r3, #4]
 800c8a4:	f003 0310 	and.w	r3, r3, #16
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d130      	bne.n	800c90e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	689b      	ldr	r3, [r3, #8]
 800c8b2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d129      	bne.n	800c90e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	689a      	ldr	r2, [r3, #8]
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800c8c8:	609a      	str	r2, [r3, #8]
 800c8ca:	e020      	b.n	800c90e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	4a15      	ldr	r2, [pc, #84]	@ (800c928 <HAL_ADC_Start+0x198>)
 800c8d2:	4293      	cmp	r3, r2
 800c8d4:	d11b      	bne.n	800c90e <HAL_ADC_Start+0x17e>
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	689b      	ldr	r3, [r3, #8]
 800c8dc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d114      	bne.n	800c90e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	689a      	ldr	r2, [r3, #8]
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800c8f2:	609a      	str	r2, [r3, #8]
 800c8f4:	e00b      	b.n	800c90e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8fa:	f043 0210 	orr.w	r2, r3, #16
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c906:	f043 0201 	orr.w	r2, r3, #1
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800c90e:	2300      	movs	r3, #0
}
 800c910:	4618      	mov	r0, r3
 800c912:	3714      	adds	r7, #20
 800c914:	46bd      	mov	sp, r7
 800c916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91a:	4770      	bx	lr
 800c91c:	20000164 	.word	0x20000164
 800c920:	431bde83 	.word	0x431bde83
 800c924:	40012300 	.word	0x40012300
 800c928:	40012000 	.word	0x40012000
 800c92c:	40012100 	.word	0x40012100
 800c930:	40012200 	.word	0x40012200

0800c934 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800c934:	b480      	push	{r7}
 800c936:	b083      	sub	sp, #12
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c942:	2b01      	cmp	r3, #1
 800c944:	d101      	bne.n	800c94a <HAL_ADC_Stop+0x16>
 800c946:	2302      	movs	r3, #2
 800c948:	e021      	b.n	800c98e <HAL_ADC_Stop+0x5a>
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	2201      	movs	r2, #1
 800c94e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	689a      	ldr	r2, [r3, #8]
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	f022 0201 	bic.w	r2, r2, #1
 800c960:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	689b      	ldr	r3, [r3, #8]
 800c968:	f003 0301 	and.w	r3, r3, #1
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d109      	bne.n	800c984 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c974:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800c978:	f023 0301 	bic.w	r3, r3, #1
 800c97c:	f043 0201 	orr.w	r2, r3, #1
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2200      	movs	r2, #0
 800c988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800c98c:	2300      	movs	r3, #0
}
 800c98e:	4618      	mov	r0, r3
 800c990:	370c      	adds	r7, #12
 800c992:	46bd      	mov	sp, r7
 800c994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c998:	4770      	bx	lr

0800c99a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800c99a:	b580      	push	{r7, lr}
 800c99c:	b084      	sub	sp, #16
 800c99e:	af00      	add	r7, sp, #0
 800c9a0:	6078      	str	r0, [r7, #4]
 800c9a2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	689b      	ldr	r3, [r3, #8]
 800c9ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c9b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c9b6:	d113      	bne.n	800c9e0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	689b      	ldr	r3, [r3, #8]
 800c9be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800c9c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c9c6:	d10b      	bne.n	800c9e0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9cc:	f043 0220 	orr.w	r2, r3, #32
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800c9dc:	2301      	movs	r3, #1
 800c9de:	e063      	b.n	800caa8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800c9e0:	f7ff fe62 	bl	800c6a8 <HAL_GetTick>
 800c9e4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800c9e6:	e021      	b.n	800ca2c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9ee:	d01d      	beq.n	800ca2c <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d007      	beq.n	800ca06 <HAL_ADC_PollForConversion+0x6c>
 800c9f6:	f7ff fe57 	bl	800c6a8 <HAL_GetTick>
 800c9fa:	4602      	mov	r2, r0
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	1ad3      	subs	r3, r2, r3
 800ca00:	683a      	ldr	r2, [r7, #0]
 800ca02:	429a      	cmp	r2, r3
 800ca04:	d212      	bcs.n	800ca2c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	f003 0302 	and.w	r3, r3, #2
 800ca10:	2b02      	cmp	r3, #2
 800ca12:	d00b      	beq.n	800ca2c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca18:	f043 0204 	orr.w	r2, r3, #4
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	2200      	movs	r2, #0
 800ca24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800ca28:	2303      	movs	r3, #3
 800ca2a:	e03d      	b.n	800caa8 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	f003 0302 	and.w	r3, r3, #2
 800ca36:	2b02      	cmp	r3, #2
 800ca38:	d1d6      	bne.n	800c9e8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f06f 0212 	mvn.w	r2, #18
 800ca42:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca48:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	689b      	ldr	r3, [r3, #8]
 800ca56:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d123      	bne.n	800caa6 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d11f      	bne.n	800caa6 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca6c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d006      	beq.n	800ca82 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	689b      	ldr	r3, [r3, #8]
 800ca7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d111      	bne.n	800caa6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca86:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d105      	bne.n	800caa6 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca9e:	f043 0201 	orr.w	r2, r3, #1
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800caa6:	2300      	movs	r3, #0
}
 800caa8:	4618      	mov	r0, r3
 800caaa:	3710      	adds	r7, #16
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}

0800cab0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800cab0:	b480      	push	{r7}
 800cab2:	b083      	sub	sp, #12
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	370c      	adds	r7, #12
 800cac2:	46bd      	mov	sp, r7
 800cac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac8:	4770      	bx	lr
	...

0800cacc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800cacc:	b480      	push	{r7}
 800cace:	b085      	sub	sp, #20
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
 800cad4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800cad6:	2300      	movs	r3, #0
 800cad8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cae0:	2b01      	cmp	r3, #1
 800cae2:	d101      	bne.n	800cae8 <HAL_ADC_ConfigChannel+0x1c>
 800cae4:	2302      	movs	r3, #2
 800cae6:	e105      	b.n	800ccf4 <HAL_ADC_ConfigChannel+0x228>
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2201      	movs	r2, #1
 800caec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	2b09      	cmp	r3, #9
 800caf6:	d925      	bls.n	800cb44 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	68d9      	ldr	r1, [r3, #12]
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	b29b      	uxth	r3, r3
 800cb04:	461a      	mov	r2, r3
 800cb06:	4613      	mov	r3, r2
 800cb08:	005b      	lsls	r3, r3, #1
 800cb0a:	4413      	add	r3, r2
 800cb0c:	3b1e      	subs	r3, #30
 800cb0e:	2207      	movs	r2, #7
 800cb10:	fa02 f303 	lsl.w	r3, r2, r3
 800cb14:	43da      	mvns	r2, r3
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	400a      	ands	r2, r1
 800cb1c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	68d9      	ldr	r1, [r3, #12]
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	689a      	ldr	r2, [r3, #8]
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	b29b      	uxth	r3, r3
 800cb2e:	4618      	mov	r0, r3
 800cb30:	4603      	mov	r3, r0
 800cb32:	005b      	lsls	r3, r3, #1
 800cb34:	4403      	add	r3, r0
 800cb36:	3b1e      	subs	r3, #30
 800cb38:	409a      	lsls	r2, r3
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	430a      	orrs	r2, r1
 800cb40:	60da      	str	r2, [r3, #12]
 800cb42:	e022      	b.n	800cb8a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	6919      	ldr	r1, [r3, #16]
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	b29b      	uxth	r3, r3
 800cb50:	461a      	mov	r2, r3
 800cb52:	4613      	mov	r3, r2
 800cb54:	005b      	lsls	r3, r3, #1
 800cb56:	4413      	add	r3, r2
 800cb58:	2207      	movs	r2, #7
 800cb5a:	fa02 f303 	lsl.w	r3, r2, r3
 800cb5e:	43da      	mvns	r2, r3
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	400a      	ands	r2, r1
 800cb66:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	6919      	ldr	r1, [r3, #16]
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	689a      	ldr	r2, [r3, #8]
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	b29b      	uxth	r3, r3
 800cb78:	4618      	mov	r0, r3
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	005b      	lsls	r3, r3, #1
 800cb7e:	4403      	add	r3, r0
 800cb80:	409a      	lsls	r2, r3
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	430a      	orrs	r2, r1
 800cb88:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	685b      	ldr	r3, [r3, #4]
 800cb8e:	2b06      	cmp	r3, #6
 800cb90:	d824      	bhi.n	800cbdc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	685a      	ldr	r2, [r3, #4]
 800cb9c:	4613      	mov	r3, r2
 800cb9e:	009b      	lsls	r3, r3, #2
 800cba0:	4413      	add	r3, r2
 800cba2:	3b05      	subs	r3, #5
 800cba4:	221f      	movs	r2, #31
 800cba6:	fa02 f303 	lsl.w	r3, r2, r3
 800cbaa:	43da      	mvns	r2, r3
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	400a      	ands	r2, r1
 800cbb2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	b29b      	uxth	r3, r3
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	685a      	ldr	r2, [r3, #4]
 800cbc6:	4613      	mov	r3, r2
 800cbc8:	009b      	lsls	r3, r3, #2
 800cbca:	4413      	add	r3, r2
 800cbcc:	3b05      	subs	r3, #5
 800cbce:	fa00 f203 	lsl.w	r2, r0, r3
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	430a      	orrs	r2, r1
 800cbd8:	635a      	str	r2, [r3, #52]	@ 0x34
 800cbda:	e04c      	b.n	800cc76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	685b      	ldr	r3, [r3, #4]
 800cbe0:	2b0c      	cmp	r3, #12
 800cbe2:	d824      	bhi.n	800cc2e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	685a      	ldr	r2, [r3, #4]
 800cbee:	4613      	mov	r3, r2
 800cbf0:	009b      	lsls	r3, r3, #2
 800cbf2:	4413      	add	r3, r2
 800cbf4:	3b23      	subs	r3, #35	@ 0x23
 800cbf6:	221f      	movs	r2, #31
 800cbf8:	fa02 f303 	lsl.w	r3, r2, r3
 800cbfc:	43da      	mvns	r2, r3
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	400a      	ands	r2, r1
 800cc04:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	b29b      	uxth	r3, r3
 800cc12:	4618      	mov	r0, r3
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	685a      	ldr	r2, [r3, #4]
 800cc18:	4613      	mov	r3, r2
 800cc1a:	009b      	lsls	r3, r3, #2
 800cc1c:	4413      	add	r3, r2
 800cc1e:	3b23      	subs	r3, #35	@ 0x23
 800cc20:	fa00 f203 	lsl.w	r2, r0, r3
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	430a      	orrs	r2, r1
 800cc2a:	631a      	str	r2, [r3, #48]	@ 0x30
 800cc2c:	e023      	b.n	800cc76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	685a      	ldr	r2, [r3, #4]
 800cc38:	4613      	mov	r3, r2
 800cc3a:	009b      	lsls	r3, r3, #2
 800cc3c:	4413      	add	r3, r2
 800cc3e:	3b41      	subs	r3, #65	@ 0x41
 800cc40:	221f      	movs	r2, #31
 800cc42:	fa02 f303 	lsl.w	r3, r2, r3
 800cc46:	43da      	mvns	r2, r3
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	400a      	ands	r2, r1
 800cc4e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800cc56:	683b      	ldr	r3, [r7, #0]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	b29b      	uxth	r3, r3
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	685a      	ldr	r2, [r3, #4]
 800cc62:	4613      	mov	r3, r2
 800cc64:	009b      	lsls	r3, r3, #2
 800cc66:	4413      	add	r3, r2
 800cc68:	3b41      	subs	r3, #65	@ 0x41
 800cc6a:	fa00 f203 	lsl.w	r2, r0, r3
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	430a      	orrs	r2, r1
 800cc74:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800cc76:	4b22      	ldr	r3, [pc, #136]	@ (800cd00 <HAL_ADC_ConfigChannel+0x234>)
 800cc78:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	4a21      	ldr	r2, [pc, #132]	@ (800cd04 <HAL_ADC_ConfigChannel+0x238>)
 800cc80:	4293      	cmp	r3, r2
 800cc82:	d109      	bne.n	800cc98 <HAL_ADC_ConfigChannel+0x1cc>
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	2b12      	cmp	r3, #18
 800cc8a:	d105      	bne.n	800cc98 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	685b      	ldr	r3, [r3, #4]
 800cc90:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	4a19      	ldr	r2, [pc, #100]	@ (800cd04 <HAL_ADC_ConfigChannel+0x238>)
 800cc9e:	4293      	cmp	r3, r2
 800cca0:	d123      	bne.n	800ccea <HAL_ADC_ConfigChannel+0x21e>
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	2b10      	cmp	r3, #16
 800cca8:	d003      	beq.n	800ccb2 <HAL_ADC_ConfigChannel+0x1e6>
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	2b11      	cmp	r3, #17
 800ccb0:	d11b      	bne.n	800ccea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	685b      	ldr	r3, [r3, #4]
 800ccb6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	2b10      	cmp	r3, #16
 800ccc4:	d111      	bne.n	800ccea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800ccc6:	4b10      	ldr	r3, [pc, #64]	@ (800cd08 <HAL_ADC_ConfigChannel+0x23c>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	4a10      	ldr	r2, [pc, #64]	@ (800cd0c <HAL_ADC_ConfigChannel+0x240>)
 800cccc:	fba2 2303 	umull	r2, r3, r2, r3
 800ccd0:	0c9a      	lsrs	r2, r3, #18
 800ccd2:	4613      	mov	r3, r2
 800ccd4:	009b      	lsls	r3, r3, #2
 800ccd6:	4413      	add	r3, r2
 800ccd8:	005b      	lsls	r3, r3, #1
 800ccda:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800ccdc:	e002      	b.n	800cce4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	3b01      	subs	r3, #1
 800cce2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d1f9      	bne.n	800ccde <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	2200      	movs	r2, #0
 800ccee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800ccf2:	2300      	movs	r3, #0
}
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	3714      	adds	r7, #20
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfe:	4770      	bx	lr
 800cd00:	40012300 	.word	0x40012300
 800cd04:	40012000 	.word	0x40012000
 800cd08:	20000164 	.word	0x20000164
 800cd0c:	431bde83 	.word	0x431bde83

0800cd10 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800cd10:	b480      	push	{r7}
 800cd12:	b085      	sub	sp, #20
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800cd18:	4b79      	ldr	r3, [pc, #484]	@ (800cf00 <ADC_Init+0x1f0>)
 800cd1a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	685b      	ldr	r3, [r3, #4]
 800cd20:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	685a      	ldr	r2, [r3, #4]
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	685b      	ldr	r3, [r3, #4]
 800cd30:	431a      	orrs	r2, r3
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	685a      	ldr	r2, [r3, #4]
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cd44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	6859      	ldr	r1, [r3, #4]
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	691b      	ldr	r3, [r3, #16]
 800cd50:	021a      	lsls	r2, r3, #8
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	430a      	orrs	r2, r1
 800cd58:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	685a      	ldr	r2, [r3, #4]
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800cd68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	6859      	ldr	r1, [r3, #4]
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	689a      	ldr	r2, [r3, #8]
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	430a      	orrs	r2, r1
 800cd7a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	689a      	ldr	r2, [r3, #8]
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800cd8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	6899      	ldr	r1, [r3, #8]
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	68da      	ldr	r2, [r3, #12]
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	430a      	orrs	r2, r1
 800cd9c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cda2:	4a58      	ldr	r2, [pc, #352]	@ (800cf04 <ADC_Init+0x1f4>)
 800cda4:	4293      	cmp	r3, r2
 800cda6:	d022      	beq.n	800cdee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	689a      	ldr	r2, [r3, #8]
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800cdb6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	6899      	ldr	r1, [r3, #8]
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	430a      	orrs	r2, r1
 800cdc8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	689a      	ldr	r2, [r3, #8]
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800cdd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	6899      	ldr	r1, [r3, #8]
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	430a      	orrs	r2, r1
 800cdea:	609a      	str	r2, [r3, #8]
 800cdec:	e00f      	b.n	800ce0e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	689a      	ldr	r2, [r3, #8]
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800cdfc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	689a      	ldr	r2, [r3, #8]
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800ce0c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	689a      	ldr	r2, [r3, #8]
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	f022 0202 	bic.w	r2, r2, #2
 800ce1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	6899      	ldr	r1, [r3, #8]
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	7e1b      	ldrb	r3, [r3, #24]
 800ce28:	005a      	lsls	r2, r3, #1
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	430a      	orrs	r2, r1
 800ce30:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d01b      	beq.n	800ce74 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	685a      	ldr	r2, [r3, #4]
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ce4a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	685a      	ldr	r2, [r3, #4]
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800ce5a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	6859      	ldr	r1, [r3, #4]
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce66:	3b01      	subs	r3, #1
 800ce68:	035a      	lsls	r2, r3, #13
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	430a      	orrs	r2, r1
 800ce70:	605a      	str	r2, [r3, #4]
 800ce72:	e007      	b.n	800ce84 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	685a      	ldr	r2, [r3, #4]
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ce82:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800ce92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	69db      	ldr	r3, [r3, #28]
 800ce9e:	3b01      	subs	r3, #1
 800cea0:	051a      	lsls	r2, r3, #20
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	430a      	orrs	r2, r1
 800cea8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	689a      	ldr	r2, [r3, #8]
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800ceb8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	6899      	ldr	r1, [r3, #8]
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cec6:	025a      	lsls	r2, r3, #9
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	430a      	orrs	r2, r1
 800cece:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	689a      	ldr	r2, [r3, #8]
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cede:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	6899      	ldr	r1, [r3, #8]
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	695b      	ldr	r3, [r3, #20]
 800ceea:	029a      	lsls	r2, r3, #10
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	430a      	orrs	r2, r1
 800cef2:	609a      	str	r2, [r3, #8]
}
 800cef4:	bf00      	nop
 800cef6:	3714      	adds	r7, #20
 800cef8:	46bd      	mov	sp, r7
 800cefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefe:	4770      	bx	lr
 800cf00:	40012300 	.word	0x40012300
 800cf04:	0f000001 	.word	0x0f000001

0800cf08 <__NVIC_SetPriorityGrouping>:
{
 800cf08:	b480      	push	{r7}
 800cf0a:	b085      	sub	sp, #20
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f003 0307 	and.w	r3, r3, #7
 800cf16:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800cf18:	4b0c      	ldr	r3, [pc, #48]	@ (800cf4c <__NVIC_SetPriorityGrouping+0x44>)
 800cf1a:	68db      	ldr	r3, [r3, #12]
 800cf1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800cf1e:	68ba      	ldr	r2, [r7, #8]
 800cf20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800cf24:	4013      	ands	r3, r2
 800cf26:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800cf2c:	68bb      	ldr	r3, [r7, #8]
 800cf2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800cf30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800cf34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cf38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800cf3a:	4a04      	ldr	r2, [pc, #16]	@ (800cf4c <__NVIC_SetPriorityGrouping+0x44>)
 800cf3c:	68bb      	ldr	r3, [r7, #8]
 800cf3e:	60d3      	str	r3, [r2, #12]
}
 800cf40:	bf00      	nop
 800cf42:	3714      	adds	r7, #20
 800cf44:	46bd      	mov	sp, r7
 800cf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4a:	4770      	bx	lr
 800cf4c:	e000ed00 	.word	0xe000ed00

0800cf50 <__NVIC_GetPriorityGrouping>:
{
 800cf50:	b480      	push	{r7}
 800cf52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800cf54:	4b04      	ldr	r3, [pc, #16]	@ (800cf68 <__NVIC_GetPriorityGrouping+0x18>)
 800cf56:	68db      	ldr	r3, [r3, #12]
 800cf58:	0a1b      	lsrs	r3, r3, #8
 800cf5a:	f003 0307 	and.w	r3, r3, #7
}
 800cf5e:	4618      	mov	r0, r3
 800cf60:	46bd      	mov	sp, r7
 800cf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf66:	4770      	bx	lr
 800cf68:	e000ed00 	.word	0xe000ed00

0800cf6c <__NVIC_EnableIRQ>:
{
 800cf6c:	b480      	push	{r7}
 800cf6e:	b083      	sub	sp, #12
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	4603      	mov	r3, r0
 800cf74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cf76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	db0b      	blt.n	800cf96 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800cf7e:	79fb      	ldrb	r3, [r7, #7]
 800cf80:	f003 021f 	and.w	r2, r3, #31
 800cf84:	4907      	ldr	r1, [pc, #28]	@ (800cfa4 <__NVIC_EnableIRQ+0x38>)
 800cf86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cf8a:	095b      	lsrs	r3, r3, #5
 800cf8c:	2001      	movs	r0, #1
 800cf8e:	fa00 f202 	lsl.w	r2, r0, r2
 800cf92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800cf96:	bf00      	nop
 800cf98:	370c      	adds	r7, #12
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa0:	4770      	bx	lr
 800cfa2:	bf00      	nop
 800cfa4:	e000e100 	.word	0xe000e100

0800cfa8 <__NVIC_SetPriority>:
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	b083      	sub	sp, #12
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	4603      	mov	r3, r0
 800cfb0:	6039      	str	r1, [r7, #0]
 800cfb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cfb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	db0a      	blt.n	800cfd2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cfbc:	683b      	ldr	r3, [r7, #0]
 800cfbe:	b2da      	uxtb	r2, r3
 800cfc0:	490c      	ldr	r1, [pc, #48]	@ (800cff4 <__NVIC_SetPriority+0x4c>)
 800cfc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cfc6:	0112      	lsls	r2, r2, #4
 800cfc8:	b2d2      	uxtb	r2, r2
 800cfca:	440b      	add	r3, r1
 800cfcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800cfd0:	e00a      	b.n	800cfe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	b2da      	uxtb	r2, r3
 800cfd6:	4908      	ldr	r1, [pc, #32]	@ (800cff8 <__NVIC_SetPriority+0x50>)
 800cfd8:	79fb      	ldrb	r3, [r7, #7]
 800cfda:	f003 030f 	and.w	r3, r3, #15
 800cfde:	3b04      	subs	r3, #4
 800cfe0:	0112      	lsls	r2, r2, #4
 800cfe2:	b2d2      	uxtb	r2, r2
 800cfe4:	440b      	add	r3, r1
 800cfe6:	761a      	strb	r2, [r3, #24]
}
 800cfe8:	bf00      	nop
 800cfea:	370c      	adds	r7, #12
 800cfec:	46bd      	mov	sp, r7
 800cfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff2:	4770      	bx	lr
 800cff4:	e000e100 	.word	0xe000e100
 800cff8:	e000ed00 	.word	0xe000ed00

0800cffc <NVIC_EncodePriority>:
{
 800cffc:	b480      	push	{r7}
 800cffe:	b089      	sub	sp, #36	@ 0x24
 800d000:	af00      	add	r7, sp, #0
 800d002:	60f8      	str	r0, [r7, #12]
 800d004:	60b9      	str	r1, [r7, #8]
 800d006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	f003 0307 	and.w	r3, r3, #7
 800d00e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d010:	69fb      	ldr	r3, [r7, #28]
 800d012:	f1c3 0307 	rsb	r3, r3, #7
 800d016:	2b04      	cmp	r3, #4
 800d018:	bf28      	it	cs
 800d01a:	2304      	movcs	r3, #4
 800d01c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d01e:	69fb      	ldr	r3, [r7, #28]
 800d020:	3304      	adds	r3, #4
 800d022:	2b06      	cmp	r3, #6
 800d024:	d902      	bls.n	800d02c <NVIC_EncodePriority+0x30>
 800d026:	69fb      	ldr	r3, [r7, #28]
 800d028:	3b03      	subs	r3, #3
 800d02a:	e000      	b.n	800d02e <NVIC_EncodePriority+0x32>
 800d02c:	2300      	movs	r3, #0
 800d02e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d030:	f04f 32ff 	mov.w	r2, #4294967295
 800d034:	69bb      	ldr	r3, [r7, #24]
 800d036:	fa02 f303 	lsl.w	r3, r2, r3
 800d03a:	43da      	mvns	r2, r3
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	401a      	ands	r2, r3
 800d040:	697b      	ldr	r3, [r7, #20]
 800d042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800d044:	f04f 31ff 	mov.w	r1, #4294967295
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	fa01 f303 	lsl.w	r3, r1, r3
 800d04e:	43d9      	mvns	r1, r3
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d054:	4313      	orrs	r3, r2
}
 800d056:	4618      	mov	r0, r3
 800d058:	3724      	adds	r7, #36	@ 0x24
 800d05a:	46bd      	mov	sp, r7
 800d05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d060:	4770      	bx	lr

0800d062 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d062:	b580      	push	{r7, lr}
 800d064:	b082      	sub	sp, #8
 800d066:	af00      	add	r7, sp, #0
 800d068:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	f7ff ff4c 	bl	800cf08 <__NVIC_SetPriorityGrouping>
}
 800d070:	bf00      	nop
 800d072:	3708      	adds	r7, #8
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}

0800d078 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800d078:	b580      	push	{r7, lr}
 800d07a:	b086      	sub	sp, #24
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	4603      	mov	r3, r0
 800d080:	60b9      	str	r1, [r7, #8]
 800d082:	607a      	str	r2, [r7, #4]
 800d084:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800d086:	2300      	movs	r3, #0
 800d088:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800d08a:	f7ff ff61 	bl	800cf50 <__NVIC_GetPriorityGrouping>
 800d08e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800d090:	687a      	ldr	r2, [r7, #4]
 800d092:	68b9      	ldr	r1, [r7, #8]
 800d094:	6978      	ldr	r0, [r7, #20]
 800d096:	f7ff ffb1 	bl	800cffc <NVIC_EncodePriority>
 800d09a:	4602      	mov	r2, r0
 800d09c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d0a0:	4611      	mov	r1, r2
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f7ff ff80 	bl	800cfa8 <__NVIC_SetPriority>
}
 800d0a8:	bf00      	nop
 800d0aa:	3718      	adds	r7, #24
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bd80      	pop	{r7, pc}

0800d0b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b082      	sub	sp, #8
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800d0ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f7ff ff54 	bl	800cf6c <__NVIC_EnableIRQ>
}
 800d0c4:	bf00      	nop
 800d0c6:	3708      	adds	r7, #8
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	bd80      	pop	{r7, pc}

0800d0cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b086      	sub	sp, #24
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800d0d8:	f7ff fae6 	bl	800c6a8 <HAL_GetTick>
 800d0dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d101      	bne.n	800d0e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800d0e4:	2301      	movs	r3, #1
 800d0e6:	e099      	b.n	800d21c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2202      	movs	r2, #2
 800d0ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	681a      	ldr	r2, [r3, #0]
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	f022 0201 	bic.w	r2, r2, #1
 800d106:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800d108:	e00f      	b.n	800d12a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800d10a:	f7ff facd 	bl	800c6a8 <HAL_GetTick>
 800d10e:	4602      	mov	r2, r0
 800d110:	693b      	ldr	r3, [r7, #16]
 800d112:	1ad3      	subs	r3, r2, r3
 800d114:	2b05      	cmp	r3, #5
 800d116:	d908      	bls.n	800d12a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2220      	movs	r2, #32
 800d11c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2203      	movs	r2, #3
 800d122:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800d126:	2303      	movs	r3, #3
 800d128:	e078      	b.n	800d21c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	f003 0301 	and.w	r3, r3, #1
 800d134:	2b00      	cmp	r3, #0
 800d136:	d1e8      	bne.n	800d10a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800d140:	697a      	ldr	r2, [r7, #20]
 800d142:	4b38      	ldr	r3, [pc, #224]	@ (800d224 <HAL_DMA_Init+0x158>)
 800d144:	4013      	ands	r3, r2
 800d146:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	685a      	ldr	r2, [r3, #4]
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	689b      	ldr	r3, [r3, #8]
 800d150:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800d156:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	691b      	ldr	r3, [r3, #16]
 800d15c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d162:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	699b      	ldr	r3, [r3, #24]
 800d168:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d16e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	6a1b      	ldr	r3, [r3, #32]
 800d174:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800d176:	697a      	ldr	r2, [r7, #20]
 800d178:	4313      	orrs	r3, r2
 800d17a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d180:	2b04      	cmp	r3, #4
 800d182:	d107      	bne.n	800d194 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d18c:	4313      	orrs	r3, r2
 800d18e:	697a      	ldr	r2, [r7, #20]
 800d190:	4313      	orrs	r3, r2
 800d192:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	697a      	ldr	r2, [r7, #20]
 800d19a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	695b      	ldr	r3, [r3, #20]
 800d1a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800d1a4:	697b      	ldr	r3, [r7, #20]
 800d1a6:	f023 0307 	bic.w	r3, r3, #7
 800d1aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1b0:	697a      	ldr	r2, [r7, #20]
 800d1b2:	4313      	orrs	r3, r2
 800d1b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1ba:	2b04      	cmp	r3, #4
 800d1bc:	d117      	bne.n	800d1ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1c2:	697a      	ldr	r2, [r7, #20]
 800d1c4:	4313      	orrs	r3, r2
 800d1c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d00e      	beq.n	800d1ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800d1d0:	6878      	ldr	r0, [r7, #4]
 800d1d2:	f000 fb01 	bl	800d7d8 <DMA_CheckFifoParam>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d008      	beq.n	800d1ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2240      	movs	r2, #64	@ 0x40
 800d1e0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2201      	movs	r2, #1
 800d1e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800d1ea:	2301      	movs	r3, #1
 800d1ec:	e016      	b.n	800d21c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	697a      	ldr	r2, [r7, #20]
 800d1f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800d1f6:	6878      	ldr	r0, [r7, #4]
 800d1f8:	f000 fab8 	bl	800d76c <DMA_CalcBaseAndBitshift>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d204:	223f      	movs	r2, #63	@ 0x3f
 800d206:	409a      	lsls	r2, r3
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2200      	movs	r2, #0
 800d210:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	2201      	movs	r2, #1
 800d216:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800d21a:	2300      	movs	r3, #0
}
 800d21c:	4618      	mov	r0, r3
 800d21e:	3718      	adds	r7, #24
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}
 800d224:	f010803f 	.word	0xf010803f

0800d228 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b086      	sub	sp, #24
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	60f8      	str	r0, [r7, #12]
 800d230:	60b9      	str	r1, [r7, #8]
 800d232:	607a      	str	r2, [r7, #4]
 800d234:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d236:	2300      	movs	r3, #0
 800d238:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d23e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d246:	2b01      	cmp	r3, #1
 800d248:	d101      	bne.n	800d24e <HAL_DMA_Start_IT+0x26>
 800d24a:	2302      	movs	r3, #2
 800d24c:	e040      	b.n	800d2d0 <HAL_DMA_Start_IT+0xa8>
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	2201      	movs	r2, #1
 800d252:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d25c:	b2db      	uxtb	r3, r3
 800d25e:	2b01      	cmp	r3, #1
 800d260:	d12f      	bne.n	800d2c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	2202      	movs	r2, #2
 800d266:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	2200      	movs	r2, #0
 800d26e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	687a      	ldr	r2, [r7, #4]
 800d274:	68b9      	ldr	r1, [r7, #8]
 800d276:	68f8      	ldr	r0, [r7, #12]
 800d278:	f000 fa4a 	bl	800d710 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d280:	223f      	movs	r2, #63	@ 0x3f
 800d282:	409a      	lsls	r2, r3
 800d284:	693b      	ldr	r3, [r7, #16]
 800d286:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	681a      	ldr	r2, [r3, #0]
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	f042 0216 	orr.w	r2, r2, #22
 800d296:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d007      	beq.n	800d2b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	681a      	ldr	r2, [r3, #0]
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	f042 0208 	orr.w	r2, r2, #8
 800d2ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	681a      	ldr	r2, [r3, #0]
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	f042 0201 	orr.w	r2, r2, #1
 800d2be:	601a      	str	r2, [r3, #0]
 800d2c0:	e005      	b.n	800d2ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800d2ca:	2302      	movs	r3, #2
 800d2cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800d2ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	3718      	adds	r7, #24
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd80      	pop	{r7, pc}

0800d2d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b084      	sub	sp, #16
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d2e4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800d2e6:	f7ff f9df 	bl	800c6a8 <HAL_GetTick>
 800d2ea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d2f2:	b2db      	uxtb	r3, r3
 800d2f4:	2b02      	cmp	r3, #2
 800d2f6:	d008      	beq.n	800d30a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2280      	movs	r2, #128	@ 0x80
 800d2fc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	2200      	movs	r2, #0
 800d302:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800d306:	2301      	movs	r3, #1
 800d308:	e052      	b.n	800d3b0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	681a      	ldr	r2, [r3, #0]
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	f022 0216 	bic.w	r2, r2, #22
 800d318:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	695a      	ldr	r2, [r3, #20]
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d328:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d103      	bne.n	800d33a <HAL_DMA_Abort+0x62>
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d336:	2b00      	cmp	r3, #0
 800d338:	d007      	beq.n	800d34a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	681a      	ldr	r2, [r3, #0]
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	f022 0208 	bic.w	r2, r2, #8
 800d348:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	681a      	ldr	r2, [r3, #0]
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	f022 0201 	bic.w	r2, r2, #1
 800d358:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800d35a:	e013      	b.n	800d384 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800d35c:	f7ff f9a4 	bl	800c6a8 <HAL_GetTick>
 800d360:	4602      	mov	r2, r0
 800d362:	68bb      	ldr	r3, [r7, #8]
 800d364:	1ad3      	subs	r3, r2, r3
 800d366:	2b05      	cmp	r3, #5
 800d368:	d90c      	bls.n	800d384 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	2220      	movs	r2, #32
 800d36e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2203      	movs	r2, #3
 800d374:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2200      	movs	r2, #0
 800d37c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800d380:	2303      	movs	r3, #3
 800d382:	e015      	b.n	800d3b0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	f003 0301 	and.w	r3, r3, #1
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d1e4      	bne.n	800d35c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d396:	223f      	movs	r2, #63	@ 0x3f
 800d398:	409a      	lsls	r2, r3
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	2201      	movs	r2, #1
 800d3a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800d3ae:	2300      	movs	r3, #0
}
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	3710      	adds	r7, #16
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}

0800d3b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800d3b8:	b480      	push	{r7}
 800d3ba:	b083      	sub	sp, #12
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d3c6:	b2db      	uxtb	r3, r3
 800d3c8:	2b02      	cmp	r3, #2
 800d3ca:	d004      	beq.n	800d3d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2280      	movs	r2, #128	@ 0x80
 800d3d0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800d3d2:	2301      	movs	r3, #1
 800d3d4:	e00c      	b.n	800d3f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2205      	movs	r2, #5
 800d3da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	681a      	ldr	r2, [r3, #0]
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	f022 0201 	bic.w	r2, r2, #1
 800d3ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800d3ee:	2300      	movs	r3, #0
}
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	370c      	adds	r7, #12
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fa:	4770      	bx	lr

0800d3fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b086      	sub	sp, #24
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800d404:	2300      	movs	r3, #0
 800d406:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800d408:	4b8e      	ldr	r3, [pc, #568]	@ (800d644 <HAL_DMA_IRQHandler+0x248>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	4a8e      	ldr	r2, [pc, #568]	@ (800d648 <HAL_DMA_IRQHandler+0x24c>)
 800d40e:	fba2 2303 	umull	r2, r3, r2, r3
 800d412:	0a9b      	lsrs	r3, r3, #10
 800d414:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d41a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800d41c:	693b      	ldr	r3, [r7, #16]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d426:	2208      	movs	r2, #8
 800d428:	409a      	lsls	r2, r3
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	4013      	ands	r3, r2
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d01a      	beq.n	800d468 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	f003 0304 	and.w	r3, r3, #4
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d013      	beq.n	800d468 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	681a      	ldr	r2, [r3, #0]
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	f022 0204 	bic.w	r2, r2, #4
 800d44e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d454:	2208      	movs	r2, #8
 800d456:	409a      	lsls	r2, r3
 800d458:	693b      	ldr	r3, [r7, #16]
 800d45a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d460:	f043 0201 	orr.w	r2, r3, #1
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d46c:	2201      	movs	r2, #1
 800d46e:	409a      	lsls	r2, r3
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	4013      	ands	r3, r2
 800d474:	2b00      	cmp	r3, #0
 800d476:	d012      	beq.n	800d49e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	695b      	ldr	r3, [r3, #20]
 800d47e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d482:	2b00      	cmp	r3, #0
 800d484:	d00b      	beq.n	800d49e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d48a:	2201      	movs	r2, #1
 800d48c:	409a      	lsls	r2, r3
 800d48e:	693b      	ldr	r3, [r7, #16]
 800d490:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d496:	f043 0202 	orr.w	r2, r3, #2
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d4a2:	2204      	movs	r2, #4
 800d4a4:	409a      	lsls	r2, r3
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	4013      	ands	r3, r2
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d012      	beq.n	800d4d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	f003 0302 	and.w	r3, r3, #2
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d00b      	beq.n	800d4d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d4c0:	2204      	movs	r2, #4
 800d4c2:	409a      	lsls	r2, r3
 800d4c4:	693b      	ldr	r3, [r7, #16]
 800d4c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d4cc:	f043 0204 	orr.w	r2, r3, #4
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d4d8:	2210      	movs	r2, #16
 800d4da:	409a      	lsls	r2, r3
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	4013      	ands	r3, r2
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d043      	beq.n	800d56c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	f003 0308 	and.w	r3, r3, #8
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d03c      	beq.n	800d56c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d4f6:	2210      	movs	r2, #16
 800d4f8:	409a      	lsls	r2, r3
 800d4fa:	693b      	ldr	r3, [r7, #16]
 800d4fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d018      	beq.n	800d53e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d516:	2b00      	cmp	r3, #0
 800d518:	d108      	bne.n	800d52c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d024      	beq.n	800d56c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d526:	6878      	ldr	r0, [r7, #4]
 800d528:	4798      	blx	r3
 800d52a:	e01f      	b.n	800d56c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d530:	2b00      	cmp	r3, #0
 800d532:	d01b      	beq.n	800d56c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d538:	6878      	ldr	r0, [r7, #4]
 800d53a:	4798      	blx	r3
 800d53c:	e016      	b.n	800d56c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d107      	bne.n	800d55c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	681a      	ldr	r2, [r3, #0]
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	f022 0208 	bic.w	r2, r2, #8
 800d55a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d560:	2b00      	cmp	r3, #0
 800d562:	d003      	beq.n	800d56c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d570:	2220      	movs	r2, #32
 800d572:	409a      	lsls	r2, r3
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	4013      	ands	r3, r2
 800d578:	2b00      	cmp	r3, #0
 800d57a:	f000 808f 	beq.w	800d69c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	f003 0310 	and.w	r3, r3, #16
 800d588:	2b00      	cmp	r3, #0
 800d58a:	f000 8087 	beq.w	800d69c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d592:	2220      	movs	r2, #32
 800d594:	409a      	lsls	r2, r3
 800d596:	693b      	ldr	r3, [r7, #16]
 800d598:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800d5a0:	b2db      	uxtb	r3, r3
 800d5a2:	2b05      	cmp	r3, #5
 800d5a4:	d136      	bne.n	800d614 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	681a      	ldr	r2, [r3, #0]
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	f022 0216 	bic.w	r2, r2, #22
 800d5b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	695a      	ldr	r2, [r3, #20]
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d5c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d103      	bne.n	800d5d6 <HAL_DMA_IRQHandler+0x1da>
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d007      	beq.n	800d5e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	681a      	ldr	r2, [r3, #0]
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	f022 0208 	bic.w	r2, r2, #8
 800d5e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d5ea:	223f      	movs	r2, #63	@ 0x3f
 800d5ec:	409a      	lsls	r2, r3
 800d5ee:	693b      	ldr	r3, [r7, #16]
 800d5f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	2201      	movs	r2, #1
 800d5f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d606:	2b00      	cmp	r3, #0
 800d608:	d07e      	beq.n	800d708 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d60e:	6878      	ldr	r0, [r7, #4]
 800d610:	4798      	blx	r3
        }
        return;
 800d612:	e079      	b.n	800d708 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d01d      	beq.n	800d65e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d10d      	bne.n	800d64c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d634:	2b00      	cmp	r3, #0
 800d636:	d031      	beq.n	800d69c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	4798      	blx	r3
 800d640:	e02c      	b.n	800d69c <HAL_DMA_IRQHandler+0x2a0>
 800d642:	bf00      	nop
 800d644:	20000164 	.word	0x20000164
 800d648:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d650:	2b00      	cmp	r3, #0
 800d652:	d023      	beq.n	800d69c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d658:	6878      	ldr	r0, [r7, #4]
 800d65a:	4798      	blx	r3
 800d65c:	e01e      	b.n	800d69c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d10f      	bne.n	800d68c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	681a      	ldr	r2, [r3, #0]
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	f022 0210 	bic.w	r2, r2, #16
 800d67a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2201      	movs	r2, #1
 800d680:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2200      	movs	r2, #0
 800d688:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d690:	2b00      	cmp	r3, #0
 800d692:	d003      	beq.n	800d69c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d698:	6878      	ldr	r0, [r7, #4]
 800d69a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d032      	beq.n	800d70a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d6a8:	f003 0301 	and.w	r3, r3, #1
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d022      	beq.n	800d6f6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2205      	movs	r2, #5
 800d6b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	681a      	ldr	r2, [r3, #0]
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	f022 0201 	bic.w	r2, r2, #1
 800d6c6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800d6c8:	68bb      	ldr	r3, [r7, #8]
 800d6ca:	3301      	adds	r3, #1
 800d6cc:	60bb      	str	r3, [r7, #8]
 800d6ce:	697a      	ldr	r2, [r7, #20]
 800d6d0:	429a      	cmp	r2, r3
 800d6d2:	d307      	bcc.n	800d6e4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	f003 0301 	and.w	r3, r3, #1
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d1f2      	bne.n	800d6c8 <HAL_DMA_IRQHandler+0x2cc>
 800d6e2:	e000      	b.n	800d6e6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 800d6e4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	2201      	movs	r2, #1
 800d6ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d005      	beq.n	800d70a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	4798      	blx	r3
 800d706:	e000      	b.n	800d70a <HAL_DMA_IRQHandler+0x30e>
        return;
 800d708:	bf00      	nop
    }
  }
}
 800d70a:	3718      	adds	r7, #24
 800d70c:	46bd      	mov	sp, r7
 800d70e:	bd80      	pop	{r7, pc}

0800d710 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800d710:	b480      	push	{r7}
 800d712:	b085      	sub	sp, #20
 800d714:	af00      	add	r7, sp, #0
 800d716:	60f8      	str	r0, [r7, #12]
 800d718:	60b9      	str	r1, [r7, #8]
 800d71a:	607a      	str	r2, [r7, #4]
 800d71c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	681a      	ldr	r2, [r3, #0]
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800d72c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	683a      	ldr	r2, [r7, #0]
 800d734:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	689b      	ldr	r3, [r3, #8]
 800d73a:	2b40      	cmp	r3, #64	@ 0x40
 800d73c:	d108      	bne.n	800d750 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	687a      	ldr	r2, [r7, #4]
 800d744:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	68ba      	ldr	r2, [r7, #8]
 800d74c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800d74e:	e007      	b.n	800d760 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	68ba      	ldr	r2, [r7, #8]
 800d756:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	687a      	ldr	r2, [r7, #4]
 800d75e:	60da      	str	r2, [r3, #12]
}
 800d760:	bf00      	nop
 800d762:	3714      	adds	r7, #20
 800d764:	46bd      	mov	sp, r7
 800d766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76a:	4770      	bx	lr

0800d76c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800d76c:	b480      	push	{r7}
 800d76e:	b085      	sub	sp, #20
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	b2db      	uxtb	r3, r3
 800d77a:	3b10      	subs	r3, #16
 800d77c:	4a14      	ldr	r2, [pc, #80]	@ (800d7d0 <DMA_CalcBaseAndBitshift+0x64>)
 800d77e:	fba2 2303 	umull	r2, r3, r2, r3
 800d782:	091b      	lsrs	r3, r3, #4
 800d784:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800d786:	4a13      	ldr	r2, [pc, #76]	@ (800d7d4 <DMA_CalcBaseAndBitshift+0x68>)
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	4413      	add	r3, r2
 800d78c:	781b      	ldrb	r3, [r3, #0]
 800d78e:	461a      	mov	r2, r3
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	2b03      	cmp	r3, #3
 800d798:	d909      	bls.n	800d7ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800d7a2:	f023 0303 	bic.w	r3, r3, #3
 800d7a6:	1d1a      	adds	r2, r3, #4
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	659a      	str	r2, [r3, #88]	@ 0x58
 800d7ac:	e007      	b.n	800d7be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800d7b6:	f023 0303 	bic.w	r3, r3, #3
 800d7ba:	687a      	ldr	r2, [r7, #4]
 800d7bc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	3714      	adds	r7, #20
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7cc:	4770      	bx	lr
 800d7ce:	bf00      	nop
 800d7d0:	aaaaaaab 	.word	0xaaaaaaab
 800d7d4:	080161f4 	.word	0x080161f4

0800d7d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800d7d8:	b480      	push	{r7}
 800d7da:	b085      	sub	sp, #20
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	699b      	ldr	r3, [r3, #24]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d11f      	bne.n	800d832 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800d7f2:	68bb      	ldr	r3, [r7, #8]
 800d7f4:	2b03      	cmp	r3, #3
 800d7f6:	d856      	bhi.n	800d8a6 <DMA_CheckFifoParam+0xce>
 800d7f8:	a201      	add	r2, pc, #4	@ (adr r2, 800d800 <DMA_CheckFifoParam+0x28>)
 800d7fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7fe:	bf00      	nop
 800d800:	0800d811 	.word	0x0800d811
 800d804:	0800d823 	.word	0x0800d823
 800d808:	0800d811 	.word	0x0800d811
 800d80c:	0800d8a7 	.word	0x0800d8a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d814:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d046      	beq.n	800d8aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800d81c:	2301      	movs	r3, #1
 800d81e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d820:	e043      	b.n	800d8aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d826:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800d82a:	d140      	bne.n	800d8ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800d82c:	2301      	movs	r3, #1
 800d82e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d830:	e03d      	b.n	800d8ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	699b      	ldr	r3, [r3, #24]
 800d836:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d83a:	d121      	bne.n	800d880 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800d83c:	68bb      	ldr	r3, [r7, #8]
 800d83e:	2b03      	cmp	r3, #3
 800d840:	d837      	bhi.n	800d8b2 <DMA_CheckFifoParam+0xda>
 800d842:	a201      	add	r2, pc, #4	@ (adr r2, 800d848 <DMA_CheckFifoParam+0x70>)
 800d844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d848:	0800d859 	.word	0x0800d859
 800d84c:	0800d85f 	.word	0x0800d85f
 800d850:	0800d859 	.word	0x0800d859
 800d854:	0800d871 	.word	0x0800d871
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800d858:	2301      	movs	r3, #1
 800d85a:	73fb      	strb	r3, [r7, #15]
      break;
 800d85c:	e030      	b.n	800d8c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d862:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d866:	2b00      	cmp	r3, #0
 800d868:	d025      	beq.n	800d8b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800d86a:	2301      	movs	r3, #1
 800d86c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d86e:	e022      	b.n	800d8b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d874:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800d878:	d11f      	bne.n	800d8ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800d87a:	2301      	movs	r3, #1
 800d87c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800d87e:	e01c      	b.n	800d8ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800d880:	68bb      	ldr	r3, [r7, #8]
 800d882:	2b02      	cmp	r3, #2
 800d884:	d903      	bls.n	800d88e <DMA_CheckFifoParam+0xb6>
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	2b03      	cmp	r3, #3
 800d88a:	d003      	beq.n	800d894 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800d88c:	e018      	b.n	800d8c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800d88e:	2301      	movs	r3, #1
 800d890:	73fb      	strb	r3, [r7, #15]
      break;
 800d892:	e015      	b.n	800d8c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d898:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d00e      	beq.n	800d8be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800d8a0:	2301      	movs	r3, #1
 800d8a2:	73fb      	strb	r3, [r7, #15]
      break;
 800d8a4:	e00b      	b.n	800d8be <DMA_CheckFifoParam+0xe6>
      break;
 800d8a6:	bf00      	nop
 800d8a8:	e00a      	b.n	800d8c0 <DMA_CheckFifoParam+0xe8>
      break;
 800d8aa:	bf00      	nop
 800d8ac:	e008      	b.n	800d8c0 <DMA_CheckFifoParam+0xe8>
      break;
 800d8ae:	bf00      	nop
 800d8b0:	e006      	b.n	800d8c0 <DMA_CheckFifoParam+0xe8>
      break;
 800d8b2:	bf00      	nop
 800d8b4:	e004      	b.n	800d8c0 <DMA_CheckFifoParam+0xe8>
      break;
 800d8b6:	bf00      	nop
 800d8b8:	e002      	b.n	800d8c0 <DMA_CheckFifoParam+0xe8>
      break;   
 800d8ba:	bf00      	nop
 800d8bc:	e000      	b.n	800d8c0 <DMA_CheckFifoParam+0xe8>
      break;
 800d8be:	bf00      	nop
    }
  } 
  
  return status; 
 800d8c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	3714      	adds	r7, #20
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8cc:	4770      	bx	lr
 800d8ce:	bf00      	nop

0800d8d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d8d0:	b480      	push	{r7}
 800d8d2:	b089      	sub	sp, #36	@ 0x24
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
 800d8d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800d8da:	2300      	movs	r3, #0
 800d8dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800d8de:	2300      	movs	r3, #0
 800d8e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	61fb      	str	r3, [r7, #28]
 800d8ea:	e16b      	b.n	800dbc4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800d8ec:	2201      	movs	r2, #1
 800d8ee:	69fb      	ldr	r3, [r7, #28]
 800d8f0:	fa02 f303 	lsl.w	r3, r2, r3
 800d8f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	697a      	ldr	r2, [r7, #20]
 800d8fc:	4013      	ands	r3, r2
 800d8fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800d900:	693a      	ldr	r2, [r7, #16]
 800d902:	697b      	ldr	r3, [r7, #20]
 800d904:	429a      	cmp	r2, r3
 800d906:	f040 815a 	bne.w	800dbbe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	685b      	ldr	r3, [r3, #4]
 800d90e:	f003 0303 	and.w	r3, r3, #3
 800d912:	2b01      	cmp	r3, #1
 800d914:	d005      	beq.n	800d922 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	685b      	ldr	r3, [r3, #4]
 800d91a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800d91e:	2b02      	cmp	r3, #2
 800d920:	d130      	bne.n	800d984 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	689b      	ldr	r3, [r3, #8]
 800d926:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800d928:	69fb      	ldr	r3, [r7, #28]
 800d92a:	005b      	lsls	r3, r3, #1
 800d92c:	2203      	movs	r2, #3
 800d92e:	fa02 f303 	lsl.w	r3, r2, r3
 800d932:	43db      	mvns	r3, r3
 800d934:	69ba      	ldr	r2, [r7, #24]
 800d936:	4013      	ands	r3, r2
 800d938:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d93a:	683b      	ldr	r3, [r7, #0]
 800d93c:	68da      	ldr	r2, [r3, #12]
 800d93e:	69fb      	ldr	r3, [r7, #28]
 800d940:	005b      	lsls	r3, r3, #1
 800d942:	fa02 f303 	lsl.w	r3, r2, r3
 800d946:	69ba      	ldr	r2, [r7, #24]
 800d948:	4313      	orrs	r3, r2
 800d94a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	69ba      	ldr	r2, [r7, #24]
 800d950:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	685b      	ldr	r3, [r3, #4]
 800d956:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800d958:	2201      	movs	r2, #1
 800d95a:	69fb      	ldr	r3, [r7, #28]
 800d95c:	fa02 f303 	lsl.w	r3, r2, r3
 800d960:	43db      	mvns	r3, r3
 800d962:	69ba      	ldr	r2, [r7, #24]
 800d964:	4013      	ands	r3, r2
 800d966:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	685b      	ldr	r3, [r3, #4]
 800d96c:	091b      	lsrs	r3, r3, #4
 800d96e:	f003 0201 	and.w	r2, r3, #1
 800d972:	69fb      	ldr	r3, [r7, #28]
 800d974:	fa02 f303 	lsl.w	r3, r2, r3
 800d978:	69ba      	ldr	r2, [r7, #24]
 800d97a:	4313      	orrs	r3, r2
 800d97c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	69ba      	ldr	r2, [r7, #24]
 800d982:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	685b      	ldr	r3, [r3, #4]
 800d988:	f003 0303 	and.w	r3, r3, #3
 800d98c:	2b03      	cmp	r3, #3
 800d98e:	d017      	beq.n	800d9c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	68db      	ldr	r3, [r3, #12]
 800d994:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800d996:	69fb      	ldr	r3, [r7, #28]
 800d998:	005b      	lsls	r3, r3, #1
 800d99a:	2203      	movs	r2, #3
 800d99c:	fa02 f303 	lsl.w	r3, r2, r3
 800d9a0:	43db      	mvns	r3, r3
 800d9a2:	69ba      	ldr	r2, [r7, #24]
 800d9a4:	4013      	ands	r3, r2
 800d9a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	689a      	ldr	r2, [r3, #8]
 800d9ac:	69fb      	ldr	r3, [r7, #28]
 800d9ae:	005b      	lsls	r3, r3, #1
 800d9b0:	fa02 f303 	lsl.w	r3, r2, r3
 800d9b4:	69ba      	ldr	r2, [r7, #24]
 800d9b6:	4313      	orrs	r3, r2
 800d9b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	69ba      	ldr	r2, [r7, #24]
 800d9be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	685b      	ldr	r3, [r3, #4]
 800d9c4:	f003 0303 	and.w	r3, r3, #3
 800d9c8:	2b02      	cmp	r3, #2
 800d9ca:	d123      	bne.n	800da14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d9cc:	69fb      	ldr	r3, [r7, #28]
 800d9ce:	08da      	lsrs	r2, r3, #3
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	3208      	adds	r2, #8
 800d9d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800d9da:	69fb      	ldr	r3, [r7, #28]
 800d9dc:	f003 0307 	and.w	r3, r3, #7
 800d9e0:	009b      	lsls	r3, r3, #2
 800d9e2:	220f      	movs	r2, #15
 800d9e4:	fa02 f303 	lsl.w	r3, r2, r3
 800d9e8:	43db      	mvns	r3, r3
 800d9ea:	69ba      	ldr	r2, [r7, #24]
 800d9ec:	4013      	ands	r3, r2
 800d9ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	691a      	ldr	r2, [r3, #16]
 800d9f4:	69fb      	ldr	r3, [r7, #28]
 800d9f6:	f003 0307 	and.w	r3, r3, #7
 800d9fa:	009b      	lsls	r3, r3, #2
 800d9fc:	fa02 f303 	lsl.w	r3, r2, r3
 800da00:	69ba      	ldr	r2, [r7, #24]
 800da02:	4313      	orrs	r3, r2
 800da04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800da06:	69fb      	ldr	r3, [r7, #28]
 800da08:	08da      	lsrs	r2, r3, #3
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	3208      	adds	r2, #8
 800da0e:	69b9      	ldr	r1, [r7, #24]
 800da10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800da1a:	69fb      	ldr	r3, [r7, #28]
 800da1c:	005b      	lsls	r3, r3, #1
 800da1e:	2203      	movs	r2, #3
 800da20:	fa02 f303 	lsl.w	r3, r2, r3
 800da24:	43db      	mvns	r3, r3
 800da26:	69ba      	ldr	r2, [r7, #24]
 800da28:	4013      	ands	r3, r2
 800da2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	685b      	ldr	r3, [r3, #4]
 800da30:	f003 0203 	and.w	r2, r3, #3
 800da34:	69fb      	ldr	r3, [r7, #28]
 800da36:	005b      	lsls	r3, r3, #1
 800da38:	fa02 f303 	lsl.w	r3, r2, r3
 800da3c:	69ba      	ldr	r2, [r7, #24]
 800da3e:	4313      	orrs	r3, r2
 800da40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	69ba      	ldr	r2, [r7, #24]
 800da46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800da48:	683b      	ldr	r3, [r7, #0]
 800da4a:	685b      	ldr	r3, [r3, #4]
 800da4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800da50:	2b00      	cmp	r3, #0
 800da52:	f000 80b4 	beq.w	800dbbe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800da56:	2300      	movs	r3, #0
 800da58:	60fb      	str	r3, [r7, #12]
 800da5a:	4b60      	ldr	r3, [pc, #384]	@ (800dbdc <HAL_GPIO_Init+0x30c>)
 800da5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da5e:	4a5f      	ldr	r2, [pc, #380]	@ (800dbdc <HAL_GPIO_Init+0x30c>)
 800da60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800da64:	6453      	str	r3, [r2, #68]	@ 0x44
 800da66:	4b5d      	ldr	r3, [pc, #372]	@ (800dbdc <HAL_GPIO_Init+0x30c>)
 800da68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800da6e:	60fb      	str	r3, [r7, #12]
 800da70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800da72:	4a5b      	ldr	r2, [pc, #364]	@ (800dbe0 <HAL_GPIO_Init+0x310>)
 800da74:	69fb      	ldr	r3, [r7, #28]
 800da76:	089b      	lsrs	r3, r3, #2
 800da78:	3302      	adds	r3, #2
 800da7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800da80:	69fb      	ldr	r3, [r7, #28]
 800da82:	f003 0303 	and.w	r3, r3, #3
 800da86:	009b      	lsls	r3, r3, #2
 800da88:	220f      	movs	r2, #15
 800da8a:	fa02 f303 	lsl.w	r3, r2, r3
 800da8e:	43db      	mvns	r3, r3
 800da90:	69ba      	ldr	r2, [r7, #24]
 800da92:	4013      	ands	r3, r2
 800da94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	4a52      	ldr	r2, [pc, #328]	@ (800dbe4 <HAL_GPIO_Init+0x314>)
 800da9a:	4293      	cmp	r3, r2
 800da9c:	d02b      	beq.n	800daf6 <HAL_GPIO_Init+0x226>
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	4a51      	ldr	r2, [pc, #324]	@ (800dbe8 <HAL_GPIO_Init+0x318>)
 800daa2:	4293      	cmp	r3, r2
 800daa4:	d025      	beq.n	800daf2 <HAL_GPIO_Init+0x222>
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	4a50      	ldr	r2, [pc, #320]	@ (800dbec <HAL_GPIO_Init+0x31c>)
 800daaa:	4293      	cmp	r3, r2
 800daac:	d01f      	beq.n	800daee <HAL_GPIO_Init+0x21e>
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	4a4f      	ldr	r2, [pc, #316]	@ (800dbf0 <HAL_GPIO_Init+0x320>)
 800dab2:	4293      	cmp	r3, r2
 800dab4:	d019      	beq.n	800daea <HAL_GPIO_Init+0x21a>
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	4a4e      	ldr	r2, [pc, #312]	@ (800dbf4 <HAL_GPIO_Init+0x324>)
 800daba:	4293      	cmp	r3, r2
 800dabc:	d013      	beq.n	800dae6 <HAL_GPIO_Init+0x216>
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	4a4d      	ldr	r2, [pc, #308]	@ (800dbf8 <HAL_GPIO_Init+0x328>)
 800dac2:	4293      	cmp	r3, r2
 800dac4:	d00d      	beq.n	800dae2 <HAL_GPIO_Init+0x212>
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	4a4c      	ldr	r2, [pc, #304]	@ (800dbfc <HAL_GPIO_Init+0x32c>)
 800daca:	4293      	cmp	r3, r2
 800dacc:	d007      	beq.n	800dade <HAL_GPIO_Init+0x20e>
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	4a4b      	ldr	r2, [pc, #300]	@ (800dc00 <HAL_GPIO_Init+0x330>)
 800dad2:	4293      	cmp	r3, r2
 800dad4:	d101      	bne.n	800dada <HAL_GPIO_Init+0x20a>
 800dad6:	2307      	movs	r3, #7
 800dad8:	e00e      	b.n	800daf8 <HAL_GPIO_Init+0x228>
 800dada:	2308      	movs	r3, #8
 800dadc:	e00c      	b.n	800daf8 <HAL_GPIO_Init+0x228>
 800dade:	2306      	movs	r3, #6
 800dae0:	e00a      	b.n	800daf8 <HAL_GPIO_Init+0x228>
 800dae2:	2305      	movs	r3, #5
 800dae4:	e008      	b.n	800daf8 <HAL_GPIO_Init+0x228>
 800dae6:	2304      	movs	r3, #4
 800dae8:	e006      	b.n	800daf8 <HAL_GPIO_Init+0x228>
 800daea:	2303      	movs	r3, #3
 800daec:	e004      	b.n	800daf8 <HAL_GPIO_Init+0x228>
 800daee:	2302      	movs	r3, #2
 800daf0:	e002      	b.n	800daf8 <HAL_GPIO_Init+0x228>
 800daf2:	2301      	movs	r3, #1
 800daf4:	e000      	b.n	800daf8 <HAL_GPIO_Init+0x228>
 800daf6:	2300      	movs	r3, #0
 800daf8:	69fa      	ldr	r2, [r7, #28]
 800dafa:	f002 0203 	and.w	r2, r2, #3
 800dafe:	0092      	lsls	r2, r2, #2
 800db00:	4093      	lsls	r3, r2
 800db02:	69ba      	ldr	r2, [r7, #24]
 800db04:	4313      	orrs	r3, r2
 800db06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800db08:	4935      	ldr	r1, [pc, #212]	@ (800dbe0 <HAL_GPIO_Init+0x310>)
 800db0a:	69fb      	ldr	r3, [r7, #28]
 800db0c:	089b      	lsrs	r3, r3, #2
 800db0e:	3302      	adds	r3, #2
 800db10:	69ba      	ldr	r2, [r7, #24]
 800db12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800db16:	4b3b      	ldr	r3, [pc, #236]	@ (800dc04 <HAL_GPIO_Init+0x334>)
 800db18:	689b      	ldr	r3, [r3, #8]
 800db1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800db1c:	693b      	ldr	r3, [r7, #16]
 800db1e:	43db      	mvns	r3, r3
 800db20:	69ba      	ldr	r2, [r7, #24]
 800db22:	4013      	ands	r3, r2
 800db24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	685b      	ldr	r3, [r3, #4]
 800db2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d003      	beq.n	800db3a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800db32:	69ba      	ldr	r2, [r7, #24]
 800db34:	693b      	ldr	r3, [r7, #16]
 800db36:	4313      	orrs	r3, r2
 800db38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800db3a:	4a32      	ldr	r2, [pc, #200]	@ (800dc04 <HAL_GPIO_Init+0x334>)
 800db3c:	69bb      	ldr	r3, [r7, #24]
 800db3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800db40:	4b30      	ldr	r3, [pc, #192]	@ (800dc04 <HAL_GPIO_Init+0x334>)
 800db42:	68db      	ldr	r3, [r3, #12]
 800db44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800db46:	693b      	ldr	r3, [r7, #16]
 800db48:	43db      	mvns	r3, r3
 800db4a:	69ba      	ldr	r2, [r7, #24]
 800db4c:	4013      	ands	r3, r2
 800db4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	685b      	ldr	r3, [r3, #4]
 800db54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d003      	beq.n	800db64 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800db5c:	69ba      	ldr	r2, [r7, #24]
 800db5e:	693b      	ldr	r3, [r7, #16]
 800db60:	4313      	orrs	r3, r2
 800db62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800db64:	4a27      	ldr	r2, [pc, #156]	@ (800dc04 <HAL_GPIO_Init+0x334>)
 800db66:	69bb      	ldr	r3, [r7, #24]
 800db68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800db6a:	4b26      	ldr	r3, [pc, #152]	@ (800dc04 <HAL_GPIO_Init+0x334>)
 800db6c:	685b      	ldr	r3, [r3, #4]
 800db6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800db70:	693b      	ldr	r3, [r7, #16]
 800db72:	43db      	mvns	r3, r3
 800db74:	69ba      	ldr	r2, [r7, #24]
 800db76:	4013      	ands	r3, r2
 800db78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	685b      	ldr	r3, [r3, #4]
 800db7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800db82:	2b00      	cmp	r3, #0
 800db84:	d003      	beq.n	800db8e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800db86:	69ba      	ldr	r2, [r7, #24]
 800db88:	693b      	ldr	r3, [r7, #16]
 800db8a:	4313      	orrs	r3, r2
 800db8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800db8e:	4a1d      	ldr	r2, [pc, #116]	@ (800dc04 <HAL_GPIO_Init+0x334>)
 800db90:	69bb      	ldr	r3, [r7, #24]
 800db92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800db94:	4b1b      	ldr	r3, [pc, #108]	@ (800dc04 <HAL_GPIO_Init+0x334>)
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800db9a:	693b      	ldr	r3, [r7, #16]
 800db9c:	43db      	mvns	r3, r3
 800db9e:	69ba      	ldr	r2, [r7, #24]
 800dba0:	4013      	ands	r3, r2
 800dba2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	685b      	ldr	r3, [r3, #4]
 800dba8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d003      	beq.n	800dbb8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800dbb0:	69ba      	ldr	r2, [r7, #24]
 800dbb2:	693b      	ldr	r3, [r7, #16]
 800dbb4:	4313      	orrs	r3, r2
 800dbb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800dbb8:	4a12      	ldr	r2, [pc, #72]	@ (800dc04 <HAL_GPIO_Init+0x334>)
 800dbba:	69bb      	ldr	r3, [r7, #24]
 800dbbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800dbbe:	69fb      	ldr	r3, [r7, #28]
 800dbc0:	3301      	adds	r3, #1
 800dbc2:	61fb      	str	r3, [r7, #28]
 800dbc4:	69fb      	ldr	r3, [r7, #28]
 800dbc6:	2b0f      	cmp	r3, #15
 800dbc8:	f67f ae90 	bls.w	800d8ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800dbcc:	bf00      	nop
 800dbce:	bf00      	nop
 800dbd0:	3724      	adds	r7, #36	@ 0x24
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd8:	4770      	bx	lr
 800dbda:	bf00      	nop
 800dbdc:	40023800 	.word	0x40023800
 800dbe0:	40013800 	.word	0x40013800
 800dbe4:	40020000 	.word	0x40020000
 800dbe8:	40020400 	.word	0x40020400
 800dbec:	40020800 	.word	0x40020800
 800dbf0:	40020c00 	.word	0x40020c00
 800dbf4:	40021000 	.word	0x40021000
 800dbf8:	40021400 	.word	0x40021400
 800dbfc:	40021800 	.word	0x40021800
 800dc00:	40021c00 	.word	0x40021c00
 800dc04:	40013c00 	.word	0x40013c00

0800dc08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800dc08:	b480      	push	{r7}
 800dc0a:	b085      	sub	sp, #20
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
 800dc10:	460b      	mov	r3, r1
 800dc12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	691a      	ldr	r2, [r3, #16]
 800dc18:	887b      	ldrh	r3, [r7, #2]
 800dc1a:	4013      	ands	r3, r2
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d002      	beq.n	800dc26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800dc20:	2301      	movs	r3, #1
 800dc22:	73fb      	strb	r3, [r7, #15]
 800dc24:	e001      	b.n	800dc2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800dc26:	2300      	movs	r3, #0
 800dc28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800dc2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	3714      	adds	r7, #20
 800dc30:	46bd      	mov	sp, r7
 800dc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc36:	4770      	bx	lr

0800dc38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800dc38:	b480      	push	{r7}
 800dc3a:	b083      	sub	sp, #12
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
 800dc40:	460b      	mov	r3, r1
 800dc42:	807b      	strh	r3, [r7, #2]
 800dc44:	4613      	mov	r3, r2
 800dc46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800dc48:	787b      	ldrb	r3, [r7, #1]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d003      	beq.n	800dc56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800dc4e:	887a      	ldrh	r2, [r7, #2]
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800dc54:	e003      	b.n	800dc5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800dc56:	887b      	ldrh	r3, [r7, #2]
 800dc58:	041a      	lsls	r2, r3, #16
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	619a      	str	r2, [r3, #24]
}
 800dc5e:	bf00      	nop
 800dc60:	370c      	adds	r7, #12
 800dc62:	46bd      	mov	sp, r7
 800dc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc68:	4770      	bx	lr
	...

0800dc6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b082      	sub	sp, #8
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	4603      	mov	r3, r0
 800dc74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800dc76:	4b08      	ldr	r3, [pc, #32]	@ (800dc98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800dc78:	695a      	ldr	r2, [r3, #20]
 800dc7a:	88fb      	ldrh	r3, [r7, #6]
 800dc7c:	4013      	ands	r3, r2
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d006      	beq.n	800dc90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800dc82:	4a05      	ldr	r2, [pc, #20]	@ (800dc98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800dc84:	88fb      	ldrh	r3, [r7, #6]
 800dc86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800dc88:	88fb      	ldrh	r3, [r7, #6]
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f000 f806 	bl	800dc9c <HAL_GPIO_EXTI_Callback>
  }
}
 800dc90:	bf00      	nop
 800dc92:	3708      	adds	r7, #8
 800dc94:	46bd      	mov	sp, r7
 800dc96:	bd80      	pop	{r7, pc}
 800dc98:	40013c00 	.word	0x40013c00

0800dc9c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800dc9c:	b480      	push	{r7}
 800dc9e:	b083      	sub	sp, #12
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	4603      	mov	r3, r0
 800dca4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800dca6:	bf00      	nop
 800dca8:	370c      	adds	r7, #12
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb0:	4770      	bx	lr
	...

0800dcb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b086      	sub	sp, #24
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d101      	bne.n	800dcc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800dcc2:	2301      	movs	r3, #1
 800dcc4:	e267      	b.n	800e196 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	f003 0301 	and.w	r3, r3, #1
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d075      	beq.n	800ddbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800dcd2:	4b88      	ldr	r3, [pc, #544]	@ (800def4 <HAL_RCC_OscConfig+0x240>)
 800dcd4:	689b      	ldr	r3, [r3, #8]
 800dcd6:	f003 030c 	and.w	r3, r3, #12
 800dcda:	2b04      	cmp	r3, #4
 800dcdc:	d00c      	beq.n	800dcf8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800dcde:	4b85      	ldr	r3, [pc, #532]	@ (800def4 <HAL_RCC_OscConfig+0x240>)
 800dce0:	689b      	ldr	r3, [r3, #8]
 800dce2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800dce6:	2b08      	cmp	r3, #8
 800dce8:	d112      	bne.n	800dd10 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800dcea:	4b82      	ldr	r3, [pc, #520]	@ (800def4 <HAL_RCC_OscConfig+0x240>)
 800dcec:	685b      	ldr	r3, [r3, #4]
 800dcee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800dcf2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800dcf6:	d10b      	bne.n	800dd10 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dcf8:	4b7e      	ldr	r3, [pc, #504]	@ (800def4 <HAL_RCC_OscConfig+0x240>)
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d05b      	beq.n	800ddbc <HAL_RCC_OscConfig+0x108>
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	685b      	ldr	r3, [r3, #4]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d157      	bne.n	800ddbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800dd0c:	2301      	movs	r3, #1
 800dd0e:	e242      	b.n	800e196 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	685b      	ldr	r3, [r3, #4]
 800dd14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dd18:	d106      	bne.n	800dd28 <HAL_RCC_OscConfig+0x74>
 800dd1a:	4b76      	ldr	r3, [pc, #472]	@ (800def4 <HAL_RCC_OscConfig+0x240>)
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	4a75      	ldr	r2, [pc, #468]	@ (800def4 <HAL_RCC_OscConfig+0x240>)
 800dd20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800dd24:	6013      	str	r3, [r2, #0]
 800dd26:	e01d      	b.n	800dd64 <HAL_RCC_OscConfig+0xb0>
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	685b      	ldr	r3, [r3, #4]
 800dd2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800dd30:	d10c      	bne.n	800dd4c <HAL_RCC_OscConfig+0x98>
 800dd32:	4b70      	ldr	r3, [pc, #448]	@ (800def4 <HAL_RCC_OscConfig+0x240>)
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	4a6f      	ldr	r2, [pc, #444]	@ (800def4 <HAL_RCC_OscConfig+0x240>)
 800dd38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800dd3c:	6013      	str	r3, [r2, #0]
 800dd3e:	4b6d      	ldr	r3, [pc, #436]	@ (800def4 <HAL_RCC_OscConfig+0x240>)
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	4a6c      	ldr	r2, [pc, #432]	@ (800def4 <HAL_RCC_OscConfig+0x240>)
 800dd44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800dd48:	6013      	str	r3, [r2, #0]
 800dd4a:	e00b      	b.n	800dd64 <HAL_RCC_OscConfig+0xb0>
 800dd4c:	4b69      	ldr	r3, [pc, #420]	@ (800def4 <HAL_RCC_OscConfig+0x240>)
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	4a68      	ldr	r2, [pc, #416]	@ (800def4 <HAL_RCC_OscConfig+0x240>)
 800dd52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800dd56:	6013      	str	r3, [r2, #0]
 800dd58:	4b66      	ldr	r3, [pc, #408]	@ (800def4 <HAL_RCC_OscConfig+0x240>)
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	4a65      	ldr	r2, [pc, #404]	@ (800def4 <HAL_RCC_OscConfig+0x240>)
 800dd5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800dd62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	685b      	ldr	r3, [r3, #4]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d013      	beq.n	800dd94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dd6c:	f7fe fc9c 	bl	800c6a8 <HAL_GetTick>
 800dd70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dd72:	e008      	b.n	800dd86 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800dd74:	f7fe fc98 	bl	800c6a8 <HAL_GetTick>
 800dd78:	4602      	mov	r2, r0
 800dd7a:	693b      	ldr	r3, [r7, #16]
 800dd7c:	1ad3      	subs	r3, r2, r3
 800dd7e:	2b64      	cmp	r3, #100	@ 0x64
 800dd80:	d901      	bls.n	800dd86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800dd82:	2303      	movs	r3, #3
 800dd84:	e207      	b.n	800e196 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dd86:	4b5b      	ldr	r3, [pc, #364]	@ (800def4 <HAL_RCC_OscConfig+0x240>)
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d0f0      	beq.n	800dd74 <HAL_RCC_OscConfig+0xc0>
 800dd92:	e014      	b.n	800ddbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dd94:	f7fe fc88 	bl	800c6a8 <HAL_GetTick>
 800dd98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800dd9a:	e008      	b.n	800ddae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800dd9c:	f7fe fc84 	bl	800c6a8 <HAL_GetTick>
 800dda0:	4602      	mov	r2, r0
 800dda2:	693b      	ldr	r3, [r7, #16]
 800dda4:	1ad3      	subs	r3, r2, r3
 800dda6:	2b64      	cmp	r3, #100	@ 0x64
 800dda8:	d901      	bls.n	800ddae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ddaa:	2303      	movs	r3, #3
 800ddac:	e1f3      	b.n	800e196 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ddae:	4b51      	ldr	r3, [pc, #324]	@ (800def4 <HAL_RCC_OscConfig+0x240>)
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d1f0      	bne.n	800dd9c <HAL_RCC_OscConfig+0xe8>
 800ddba:	e000      	b.n	800ddbe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ddbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	f003 0302 	and.w	r3, r3, #2
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d063      	beq.n	800de92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800ddca:	4b4a      	ldr	r3, [pc, #296]	@ (800def4 <HAL_RCC_OscConfig+0x240>)
 800ddcc:	689b      	ldr	r3, [r3, #8]
 800ddce:	f003 030c 	and.w	r3, r3, #12
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d00b      	beq.n	800ddee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ddd6:	4b47      	ldr	r3, [pc, #284]	@ (800def4 <HAL_RCC_OscConfig+0x240>)
 800ddd8:	689b      	ldr	r3, [r3, #8]
 800ddda:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800ddde:	2b08      	cmp	r3, #8
 800dde0:	d11c      	bne.n	800de1c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800dde2:	4b44      	ldr	r3, [pc, #272]	@ (800def4 <HAL_RCC_OscConfig+0x240>)
 800dde4:	685b      	ldr	r3, [r3, #4]
 800dde6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d116      	bne.n	800de1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ddee:	4b41      	ldr	r3, [pc, #260]	@ (800def4 <HAL_RCC_OscConfig+0x240>)
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	f003 0302 	and.w	r3, r3, #2
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d005      	beq.n	800de06 <HAL_RCC_OscConfig+0x152>
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	68db      	ldr	r3, [r3, #12]
 800ddfe:	2b01      	cmp	r3, #1
 800de00:	d001      	beq.n	800de06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800de02:	2301      	movs	r3, #1
 800de04:	e1c7      	b.n	800e196 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800de06:	4b3b      	ldr	r3, [pc, #236]	@ (800def4 <HAL_RCC_OscConfig+0x240>)
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	691b      	ldr	r3, [r3, #16]
 800de12:	00db      	lsls	r3, r3, #3
 800de14:	4937      	ldr	r1, [pc, #220]	@ (800def4 <HAL_RCC_OscConfig+0x240>)
 800de16:	4313      	orrs	r3, r2
 800de18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800de1a:	e03a      	b.n	800de92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	68db      	ldr	r3, [r3, #12]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d020      	beq.n	800de66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800de24:	4b34      	ldr	r3, [pc, #208]	@ (800def8 <HAL_RCC_OscConfig+0x244>)
 800de26:	2201      	movs	r2, #1
 800de28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800de2a:	f7fe fc3d 	bl	800c6a8 <HAL_GetTick>
 800de2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800de30:	e008      	b.n	800de44 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800de32:	f7fe fc39 	bl	800c6a8 <HAL_GetTick>
 800de36:	4602      	mov	r2, r0
 800de38:	693b      	ldr	r3, [r7, #16]
 800de3a:	1ad3      	subs	r3, r2, r3
 800de3c:	2b02      	cmp	r3, #2
 800de3e:	d901      	bls.n	800de44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800de40:	2303      	movs	r3, #3
 800de42:	e1a8      	b.n	800e196 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800de44:	4b2b      	ldr	r3, [pc, #172]	@ (800def4 <HAL_RCC_OscConfig+0x240>)
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	f003 0302 	and.w	r3, r3, #2
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d0f0      	beq.n	800de32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800de50:	4b28      	ldr	r3, [pc, #160]	@ (800def4 <HAL_RCC_OscConfig+0x240>)
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	691b      	ldr	r3, [r3, #16]
 800de5c:	00db      	lsls	r3, r3, #3
 800de5e:	4925      	ldr	r1, [pc, #148]	@ (800def4 <HAL_RCC_OscConfig+0x240>)
 800de60:	4313      	orrs	r3, r2
 800de62:	600b      	str	r3, [r1, #0]
 800de64:	e015      	b.n	800de92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800de66:	4b24      	ldr	r3, [pc, #144]	@ (800def8 <HAL_RCC_OscConfig+0x244>)
 800de68:	2200      	movs	r2, #0
 800de6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800de6c:	f7fe fc1c 	bl	800c6a8 <HAL_GetTick>
 800de70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800de72:	e008      	b.n	800de86 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800de74:	f7fe fc18 	bl	800c6a8 <HAL_GetTick>
 800de78:	4602      	mov	r2, r0
 800de7a:	693b      	ldr	r3, [r7, #16]
 800de7c:	1ad3      	subs	r3, r2, r3
 800de7e:	2b02      	cmp	r3, #2
 800de80:	d901      	bls.n	800de86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800de82:	2303      	movs	r3, #3
 800de84:	e187      	b.n	800e196 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800de86:	4b1b      	ldr	r3, [pc, #108]	@ (800def4 <HAL_RCC_OscConfig+0x240>)
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	f003 0302 	and.w	r3, r3, #2
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d1f0      	bne.n	800de74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	f003 0308 	and.w	r3, r3, #8
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d036      	beq.n	800df0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	695b      	ldr	r3, [r3, #20]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d016      	beq.n	800ded4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800dea6:	4b15      	ldr	r3, [pc, #84]	@ (800defc <HAL_RCC_OscConfig+0x248>)
 800dea8:	2201      	movs	r2, #1
 800deaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800deac:	f7fe fbfc 	bl	800c6a8 <HAL_GetTick>
 800deb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800deb2:	e008      	b.n	800dec6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800deb4:	f7fe fbf8 	bl	800c6a8 <HAL_GetTick>
 800deb8:	4602      	mov	r2, r0
 800deba:	693b      	ldr	r3, [r7, #16]
 800debc:	1ad3      	subs	r3, r2, r3
 800debe:	2b02      	cmp	r3, #2
 800dec0:	d901      	bls.n	800dec6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800dec2:	2303      	movs	r3, #3
 800dec4:	e167      	b.n	800e196 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800dec6:	4b0b      	ldr	r3, [pc, #44]	@ (800def4 <HAL_RCC_OscConfig+0x240>)
 800dec8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800deca:	f003 0302 	and.w	r3, r3, #2
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d0f0      	beq.n	800deb4 <HAL_RCC_OscConfig+0x200>
 800ded2:	e01b      	b.n	800df0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ded4:	4b09      	ldr	r3, [pc, #36]	@ (800defc <HAL_RCC_OscConfig+0x248>)
 800ded6:	2200      	movs	r2, #0
 800ded8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800deda:	f7fe fbe5 	bl	800c6a8 <HAL_GetTick>
 800dede:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800dee0:	e00e      	b.n	800df00 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800dee2:	f7fe fbe1 	bl	800c6a8 <HAL_GetTick>
 800dee6:	4602      	mov	r2, r0
 800dee8:	693b      	ldr	r3, [r7, #16]
 800deea:	1ad3      	subs	r3, r2, r3
 800deec:	2b02      	cmp	r3, #2
 800deee:	d907      	bls.n	800df00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800def0:	2303      	movs	r3, #3
 800def2:	e150      	b.n	800e196 <HAL_RCC_OscConfig+0x4e2>
 800def4:	40023800 	.word	0x40023800
 800def8:	42470000 	.word	0x42470000
 800defc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800df00:	4b88      	ldr	r3, [pc, #544]	@ (800e124 <HAL_RCC_OscConfig+0x470>)
 800df02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800df04:	f003 0302 	and.w	r3, r3, #2
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d1ea      	bne.n	800dee2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	f003 0304 	and.w	r3, r3, #4
 800df14:	2b00      	cmp	r3, #0
 800df16:	f000 8097 	beq.w	800e048 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800df1a:	2300      	movs	r3, #0
 800df1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800df1e:	4b81      	ldr	r3, [pc, #516]	@ (800e124 <HAL_RCC_OscConfig+0x470>)
 800df20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800df26:	2b00      	cmp	r3, #0
 800df28:	d10f      	bne.n	800df4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800df2a:	2300      	movs	r3, #0
 800df2c:	60bb      	str	r3, [r7, #8]
 800df2e:	4b7d      	ldr	r3, [pc, #500]	@ (800e124 <HAL_RCC_OscConfig+0x470>)
 800df30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df32:	4a7c      	ldr	r2, [pc, #496]	@ (800e124 <HAL_RCC_OscConfig+0x470>)
 800df34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800df38:	6413      	str	r3, [r2, #64]	@ 0x40
 800df3a:	4b7a      	ldr	r3, [pc, #488]	@ (800e124 <HAL_RCC_OscConfig+0x470>)
 800df3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800df42:	60bb      	str	r3, [r7, #8]
 800df44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800df46:	2301      	movs	r3, #1
 800df48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800df4a:	4b77      	ldr	r3, [pc, #476]	@ (800e128 <HAL_RCC_OscConfig+0x474>)
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800df52:	2b00      	cmp	r3, #0
 800df54:	d118      	bne.n	800df88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800df56:	4b74      	ldr	r3, [pc, #464]	@ (800e128 <HAL_RCC_OscConfig+0x474>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	4a73      	ldr	r2, [pc, #460]	@ (800e128 <HAL_RCC_OscConfig+0x474>)
 800df5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800df60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800df62:	f7fe fba1 	bl	800c6a8 <HAL_GetTick>
 800df66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800df68:	e008      	b.n	800df7c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800df6a:	f7fe fb9d 	bl	800c6a8 <HAL_GetTick>
 800df6e:	4602      	mov	r2, r0
 800df70:	693b      	ldr	r3, [r7, #16]
 800df72:	1ad3      	subs	r3, r2, r3
 800df74:	2b02      	cmp	r3, #2
 800df76:	d901      	bls.n	800df7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800df78:	2303      	movs	r3, #3
 800df7a:	e10c      	b.n	800e196 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800df7c:	4b6a      	ldr	r3, [pc, #424]	@ (800e128 <HAL_RCC_OscConfig+0x474>)
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800df84:	2b00      	cmp	r3, #0
 800df86:	d0f0      	beq.n	800df6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	689b      	ldr	r3, [r3, #8]
 800df8c:	2b01      	cmp	r3, #1
 800df8e:	d106      	bne.n	800df9e <HAL_RCC_OscConfig+0x2ea>
 800df90:	4b64      	ldr	r3, [pc, #400]	@ (800e124 <HAL_RCC_OscConfig+0x470>)
 800df92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df94:	4a63      	ldr	r2, [pc, #396]	@ (800e124 <HAL_RCC_OscConfig+0x470>)
 800df96:	f043 0301 	orr.w	r3, r3, #1
 800df9a:	6713      	str	r3, [r2, #112]	@ 0x70
 800df9c:	e01c      	b.n	800dfd8 <HAL_RCC_OscConfig+0x324>
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	689b      	ldr	r3, [r3, #8]
 800dfa2:	2b05      	cmp	r3, #5
 800dfa4:	d10c      	bne.n	800dfc0 <HAL_RCC_OscConfig+0x30c>
 800dfa6:	4b5f      	ldr	r3, [pc, #380]	@ (800e124 <HAL_RCC_OscConfig+0x470>)
 800dfa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dfaa:	4a5e      	ldr	r2, [pc, #376]	@ (800e124 <HAL_RCC_OscConfig+0x470>)
 800dfac:	f043 0304 	orr.w	r3, r3, #4
 800dfb0:	6713      	str	r3, [r2, #112]	@ 0x70
 800dfb2:	4b5c      	ldr	r3, [pc, #368]	@ (800e124 <HAL_RCC_OscConfig+0x470>)
 800dfb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dfb6:	4a5b      	ldr	r2, [pc, #364]	@ (800e124 <HAL_RCC_OscConfig+0x470>)
 800dfb8:	f043 0301 	orr.w	r3, r3, #1
 800dfbc:	6713      	str	r3, [r2, #112]	@ 0x70
 800dfbe:	e00b      	b.n	800dfd8 <HAL_RCC_OscConfig+0x324>
 800dfc0:	4b58      	ldr	r3, [pc, #352]	@ (800e124 <HAL_RCC_OscConfig+0x470>)
 800dfc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dfc4:	4a57      	ldr	r2, [pc, #348]	@ (800e124 <HAL_RCC_OscConfig+0x470>)
 800dfc6:	f023 0301 	bic.w	r3, r3, #1
 800dfca:	6713      	str	r3, [r2, #112]	@ 0x70
 800dfcc:	4b55      	ldr	r3, [pc, #340]	@ (800e124 <HAL_RCC_OscConfig+0x470>)
 800dfce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dfd0:	4a54      	ldr	r2, [pc, #336]	@ (800e124 <HAL_RCC_OscConfig+0x470>)
 800dfd2:	f023 0304 	bic.w	r3, r3, #4
 800dfd6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	689b      	ldr	r3, [r3, #8]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d015      	beq.n	800e00c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dfe0:	f7fe fb62 	bl	800c6a8 <HAL_GetTick>
 800dfe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dfe6:	e00a      	b.n	800dffe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dfe8:	f7fe fb5e 	bl	800c6a8 <HAL_GetTick>
 800dfec:	4602      	mov	r2, r0
 800dfee:	693b      	ldr	r3, [r7, #16]
 800dff0:	1ad3      	subs	r3, r2, r3
 800dff2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dff6:	4293      	cmp	r3, r2
 800dff8:	d901      	bls.n	800dffe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800dffa:	2303      	movs	r3, #3
 800dffc:	e0cb      	b.n	800e196 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dffe:	4b49      	ldr	r3, [pc, #292]	@ (800e124 <HAL_RCC_OscConfig+0x470>)
 800e000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e002:	f003 0302 	and.w	r3, r3, #2
 800e006:	2b00      	cmp	r3, #0
 800e008:	d0ee      	beq.n	800dfe8 <HAL_RCC_OscConfig+0x334>
 800e00a:	e014      	b.n	800e036 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e00c:	f7fe fb4c 	bl	800c6a8 <HAL_GetTick>
 800e010:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e012:	e00a      	b.n	800e02a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e014:	f7fe fb48 	bl	800c6a8 <HAL_GetTick>
 800e018:	4602      	mov	r2, r0
 800e01a:	693b      	ldr	r3, [r7, #16]
 800e01c:	1ad3      	subs	r3, r2, r3
 800e01e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e022:	4293      	cmp	r3, r2
 800e024:	d901      	bls.n	800e02a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800e026:	2303      	movs	r3, #3
 800e028:	e0b5      	b.n	800e196 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e02a:	4b3e      	ldr	r3, [pc, #248]	@ (800e124 <HAL_RCC_OscConfig+0x470>)
 800e02c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e02e:	f003 0302 	and.w	r3, r3, #2
 800e032:	2b00      	cmp	r3, #0
 800e034:	d1ee      	bne.n	800e014 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800e036:	7dfb      	ldrb	r3, [r7, #23]
 800e038:	2b01      	cmp	r3, #1
 800e03a:	d105      	bne.n	800e048 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e03c:	4b39      	ldr	r3, [pc, #228]	@ (800e124 <HAL_RCC_OscConfig+0x470>)
 800e03e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e040:	4a38      	ldr	r2, [pc, #224]	@ (800e124 <HAL_RCC_OscConfig+0x470>)
 800e042:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e046:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	699b      	ldr	r3, [r3, #24]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	f000 80a1 	beq.w	800e194 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800e052:	4b34      	ldr	r3, [pc, #208]	@ (800e124 <HAL_RCC_OscConfig+0x470>)
 800e054:	689b      	ldr	r3, [r3, #8]
 800e056:	f003 030c 	and.w	r3, r3, #12
 800e05a:	2b08      	cmp	r3, #8
 800e05c:	d05c      	beq.n	800e118 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	699b      	ldr	r3, [r3, #24]
 800e062:	2b02      	cmp	r3, #2
 800e064:	d141      	bne.n	800e0ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e066:	4b31      	ldr	r3, [pc, #196]	@ (800e12c <HAL_RCC_OscConfig+0x478>)
 800e068:	2200      	movs	r2, #0
 800e06a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e06c:	f7fe fb1c 	bl	800c6a8 <HAL_GetTick>
 800e070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e072:	e008      	b.n	800e086 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e074:	f7fe fb18 	bl	800c6a8 <HAL_GetTick>
 800e078:	4602      	mov	r2, r0
 800e07a:	693b      	ldr	r3, [r7, #16]
 800e07c:	1ad3      	subs	r3, r2, r3
 800e07e:	2b02      	cmp	r3, #2
 800e080:	d901      	bls.n	800e086 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800e082:	2303      	movs	r3, #3
 800e084:	e087      	b.n	800e196 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e086:	4b27      	ldr	r3, [pc, #156]	@ (800e124 <HAL_RCC_OscConfig+0x470>)
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d1f0      	bne.n	800e074 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	69da      	ldr	r2, [r3, #28]
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	6a1b      	ldr	r3, [r3, #32]
 800e09a:	431a      	orrs	r2, r3
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0a0:	019b      	lsls	r3, r3, #6
 800e0a2:	431a      	orrs	r2, r3
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0a8:	085b      	lsrs	r3, r3, #1
 800e0aa:	3b01      	subs	r3, #1
 800e0ac:	041b      	lsls	r3, r3, #16
 800e0ae:	431a      	orrs	r2, r3
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0b4:	061b      	lsls	r3, r3, #24
 800e0b6:	491b      	ldr	r1, [pc, #108]	@ (800e124 <HAL_RCC_OscConfig+0x470>)
 800e0b8:	4313      	orrs	r3, r2
 800e0ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e0bc:	4b1b      	ldr	r3, [pc, #108]	@ (800e12c <HAL_RCC_OscConfig+0x478>)
 800e0be:	2201      	movs	r2, #1
 800e0c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e0c2:	f7fe faf1 	bl	800c6a8 <HAL_GetTick>
 800e0c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e0c8:	e008      	b.n	800e0dc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e0ca:	f7fe faed 	bl	800c6a8 <HAL_GetTick>
 800e0ce:	4602      	mov	r2, r0
 800e0d0:	693b      	ldr	r3, [r7, #16]
 800e0d2:	1ad3      	subs	r3, r2, r3
 800e0d4:	2b02      	cmp	r3, #2
 800e0d6:	d901      	bls.n	800e0dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800e0d8:	2303      	movs	r3, #3
 800e0da:	e05c      	b.n	800e196 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e0dc:	4b11      	ldr	r3, [pc, #68]	@ (800e124 <HAL_RCC_OscConfig+0x470>)
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d0f0      	beq.n	800e0ca <HAL_RCC_OscConfig+0x416>
 800e0e8:	e054      	b.n	800e194 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e0ea:	4b10      	ldr	r3, [pc, #64]	@ (800e12c <HAL_RCC_OscConfig+0x478>)
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e0f0:	f7fe fada 	bl	800c6a8 <HAL_GetTick>
 800e0f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e0f6:	e008      	b.n	800e10a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e0f8:	f7fe fad6 	bl	800c6a8 <HAL_GetTick>
 800e0fc:	4602      	mov	r2, r0
 800e0fe:	693b      	ldr	r3, [r7, #16]
 800e100:	1ad3      	subs	r3, r2, r3
 800e102:	2b02      	cmp	r3, #2
 800e104:	d901      	bls.n	800e10a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800e106:	2303      	movs	r3, #3
 800e108:	e045      	b.n	800e196 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e10a:	4b06      	ldr	r3, [pc, #24]	@ (800e124 <HAL_RCC_OscConfig+0x470>)
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e112:	2b00      	cmp	r3, #0
 800e114:	d1f0      	bne.n	800e0f8 <HAL_RCC_OscConfig+0x444>
 800e116:	e03d      	b.n	800e194 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	699b      	ldr	r3, [r3, #24]
 800e11c:	2b01      	cmp	r3, #1
 800e11e:	d107      	bne.n	800e130 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800e120:	2301      	movs	r3, #1
 800e122:	e038      	b.n	800e196 <HAL_RCC_OscConfig+0x4e2>
 800e124:	40023800 	.word	0x40023800
 800e128:	40007000 	.word	0x40007000
 800e12c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800e130:	4b1b      	ldr	r3, [pc, #108]	@ (800e1a0 <HAL_RCC_OscConfig+0x4ec>)
 800e132:	685b      	ldr	r3, [r3, #4]
 800e134:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	699b      	ldr	r3, [r3, #24]
 800e13a:	2b01      	cmp	r3, #1
 800e13c:	d028      	beq.n	800e190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e148:	429a      	cmp	r2, r3
 800e14a:	d121      	bne.n	800e190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e156:	429a      	cmp	r2, r3
 800e158:	d11a      	bne.n	800e190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800e15a:	68fa      	ldr	r2, [r7, #12]
 800e15c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800e160:	4013      	ands	r3, r2
 800e162:	687a      	ldr	r2, [r7, #4]
 800e164:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800e166:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800e168:	4293      	cmp	r3, r2
 800e16a:	d111      	bne.n	800e190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e176:	085b      	lsrs	r3, r3, #1
 800e178:	3b01      	subs	r3, #1
 800e17a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800e17c:	429a      	cmp	r2, r3
 800e17e:	d107      	bne.n	800e190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e18a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800e18c:	429a      	cmp	r2, r3
 800e18e:	d001      	beq.n	800e194 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800e190:	2301      	movs	r3, #1
 800e192:	e000      	b.n	800e196 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800e194:	2300      	movs	r3, #0
}
 800e196:	4618      	mov	r0, r3
 800e198:	3718      	adds	r7, #24
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}
 800e19e:	bf00      	nop
 800e1a0:	40023800 	.word	0x40023800

0800e1a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b084      	sub	sp, #16
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
 800e1ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d101      	bne.n	800e1b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	e0cc      	b.n	800e352 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e1b8:	4b68      	ldr	r3, [pc, #416]	@ (800e35c <HAL_RCC_ClockConfig+0x1b8>)
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	f003 0307 	and.w	r3, r3, #7
 800e1c0:	683a      	ldr	r2, [r7, #0]
 800e1c2:	429a      	cmp	r2, r3
 800e1c4:	d90c      	bls.n	800e1e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e1c6:	4b65      	ldr	r3, [pc, #404]	@ (800e35c <HAL_RCC_ClockConfig+0x1b8>)
 800e1c8:	683a      	ldr	r2, [r7, #0]
 800e1ca:	b2d2      	uxtb	r2, r2
 800e1cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e1ce:	4b63      	ldr	r3, [pc, #396]	@ (800e35c <HAL_RCC_ClockConfig+0x1b8>)
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	f003 0307 	and.w	r3, r3, #7
 800e1d6:	683a      	ldr	r2, [r7, #0]
 800e1d8:	429a      	cmp	r2, r3
 800e1da:	d001      	beq.n	800e1e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800e1dc:	2301      	movs	r3, #1
 800e1de:	e0b8      	b.n	800e352 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	f003 0302 	and.w	r3, r3, #2
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d020      	beq.n	800e22e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	f003 0304 	and.w	r3, r3, #4
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d005      	beq.n	800e204 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800e1f8:	4b59      	ldr	r3, [pc, #356]	@ (800e360 <HAL_RCC_ClockConfig+0x1bc>)
 800e1fa:	689b      	ldr	r3, [r3, #8]
 800e1fc:	4a58      	ldr	r2, [pc, #352]	@ (800e360 <HAL_RCC_ClockConfig+0x1bc>)
 800e1fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800e202:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	f003 0308 	and.w	r3, r3, #8
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d005      	beq.n	800e21c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800e210:	4b53      	ldr	r3, [pc, #332]	@ (800e360 <HAL_RCC_ClockConfig+0x1bc>)
 800e212:	689b      	ldr	r3, [r3, #8]
 800e214:	4a52      	ldr	r2, [pc, #328]	@ (800e360 <HAL_RCC_ClockConfig+0x1bc>)
 800e216:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800e21a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e21c:	4b50      	ldr	r3, [pc, #320]	@ (800e360 <HAL_RCC_ClockConfig+0x1bc>)
 800e21e:	689b      	ldr	r3, [r3, #8]
 800e220:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	689b      	ldr	r3, [r3, #8]
 800e228:	494d      	ldr	r1, [pc, #308]	@ (800e360 <HAL_RCC_ClockConfig+0x1bc>)
 800e22a:	4313      	orrs	r3, r2
 800e22c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	f003 0301 	and.w	r3, r3, #1
 800e236:	2b00      	cmp	r3, #0
 800e238:	d044      	beq.n	800e2c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	685b      	ldr	r3, [r3, #4]
 800e23e:	2b01      	cmp	r3, #1
 800e240:	d107      	bne.n	800e252 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e242:	4b47      	ldr	r3, [pc, #284]	@ (800e360 <HAL_RCC_ClockConfig+0x1bc>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d119      	bne.n	800e282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e24e:	2301      	movs	r3, #1
 800e250:	e07f      	b.n	800e352 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	685b      	ldr	r3, [r3, #4]
 800e256:	2b02      	cmp	r3, #2
 800e258:	d003      	beq.n	800e262 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e25e:	2b03      	cmp	r3, #3
 800e260:	d107      	bne.n	800e272 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e262:	4b3f      	ldr	r3, [pc, #252]	@ (800e360 <HAL_RCC_ClockConfig+0x1bc>)
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d109      	bne.n	800e282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e26e:	2301      	movs	r3, #1
 800e270:	e06f      	b.n	800e352 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e272:	4b3b      	ldr	r3, [pc, #236]	@ (800e360 <HAL_RCC_ClockConfig+0x1bc>)
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	f003 0302 	and.w	r3, r3, #2
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d101      	bne.n	800e282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e27e:	2301      	movs	r3, #1
 800e280:	e067      	b.n	800e352 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800e282:	4b37      	ldr	r3, [pc, #220]	@ (800e360 <HAL_RCC_ClockConfig+0x1bc>)
 800e284:	689b      	ldr	r3, [r3, #8]
 800e286:	f023 0203 	bic.w	r2, r3, #3
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	685b      	ldr	r3, [r3, #4]
 800e28e:	4934      	ldr	r1, [pc, #208]	@ (800e360 <HAL_RCC_ClockConfig+0x1bc>)
 800e290:	4313      	orrs	r3, r2
 800e292:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800e294:	f7fe fa08 	bl	800c6a8 <HAL_GetTick>
 800e298:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e29a:	e00a      	b.n	800e2b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e29c:	f7fe fa04 	bl	800c6a8 <HAL_GetTick>
 800e2a0:	4602      	mov	r2, r0
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	1ad3      	subs	r3, r2, r3
 800e2a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e2aa:	4293      	cmp	r3, r2
 800e2ac:	d901      	bls.n	800e2b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800e2ae:	2303      	movs	r3, #3
 800e2b0:	e04f      	b.n	800e352 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e2b2:	4b2b      	ldr	r3, [pc, #172]	@ (800e360 <HAL_RCC_ClockConfig+0x1bc>)
 800e2b4:	689b      	ldr	r3, [r3, #8]
 800e2b6:	f003 020c 	and.w	r2, r3, #12
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	685b      	ldr	r3, [r3, #4]
 800e2be:	009b      	lsls	r3, r3, #2
 800e2c0:	429a      	cmp	r2, r3
 800e2c2:	d1eb      	bne.n	800e29c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e2c4:	4b25      	ldr	r3, [pc, #148]	@ (800e35c <HAL_RCC_ClockConfig+0x1b8>)
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	f003 0307 	and.w	r3, r3, #7
 800e2cc:	683a      	ldr	r2, [r7, #0]
 800e2ce:	429a      	cmp	r2, r3
 800e2d0:	d20c      	bcs.n	800e2ec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e2d2:	4b22      	ldr	r3, [pc, #136]	@ (800e35c <HAL_RCC_ClockConfig+0x1b8>)
 800e2d4:	683a      	ldr	r2, [r7, #0]
 800e2d6:	b2d2      	uxtb	r2, r2
 800e2d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e2da:	4b20      	ldr	r3, [pc, #128]	@ (800e35c <HAL_RCC_ClockConfig+0x1b8>)
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	f003 0307 	and.w	r3, r3, #7
 800e2e2:	683a      	ldr	r2, [r7, #0]
 800e2e4:	429a      	cmp	r2, r3
 800e2e6:	d001      	beq.n	800e2ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800e2e8:	2301      	movs	r3, #1
 800e2ea:	e032      	b.n	800e352 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	f003 0304 	and.w	r3, r3, #4
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d008      	beq.n	800e30a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e2f8:	4b19      	ldr	r3, [pc, #100]	@ (800e360 <HAL_RCC_ClockConfig+0x1bc>)
 800e2fa:	689b      	ldr	r3, [r3, #8]
 800e2fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	68db      	ldr	r3, [r3, #12]
 800e304:	4916      	ldr	r1, [pc, #88]	@ (800e360 <HAL_RCC_ClockConfig+0x1bc>)
 800e306:	4313      	orrs	r3, r2
 800e308:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	f003 0308 	and.w	r3, r3, #8
 800e312:	2b00      	cmp	r3, #0
 800e314:	d009      	beq.n	800e32a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800e316:	4b12      	ldr	r3, [pc, #72]	@ (800e360 <HAL_RCC_ClockConfig+0x1bc>)
 800e318:	689b      	ldr	r3, [r3, #8]
 800e31a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	691b      	ldr	r3, [r3, #16]
 800e322:	00db      	lsls	r3, r3, #3
 800e324:	490e      	ldr	r1, [pc, #56]	@ (800e360 <HAL_RCC_ClockConfig+0x1bc>)
 800e326:	4313      	orrs	r3, r2
 800e328:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800e32a:	f000 f821 	bl	800e370 <HAL_RCC_GetSysClockFreq>
 800e32e:	4602      	mov	r2, r0
 800e330:	4b0b      	ldr	r3, [pc, #44]	@ (800e360 <HAL_RCC_ClockConfig+0x1bc>)
 800e332:	689b      	ldr	r3, [r3, #8]
 800e334:	091b      	lsrs	r3, r3, #4
 800e336:	f003 030f 	and.w	r3, r3, #15
 800e33a:	490a      	ldr	r1, [pc, #40]	@ (800e364 <HAL_RCC_ClockConfig+0x1c0>)
 800e33c:	5ccb      	ldrb	r3, [r1, r3]
 800e33e:	fa22 f303 	lsr.w	r3, r2, r3
 800e342:	4a09      	ldr	r2, [pc, #36]	@ (800e368 <HAL_RCC_ClockConfig+0x1c4>)
 800e344:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800e346:	4b09      	ldr	r3, [pc, #36]	@ (800e36c <HAL_RCC_ClockConfig+0x1c8>)
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	4618      	mov	r0, r3
 800e34c:	f7fe f826 	bl	800c39c <HAL_InitTick>

  return HAL_OK;
 800e350:	2300      	movs	r3, #0
}
 800e352:	4618      	mov	r0, r3
 800e354:	3710      	adds	r7, #16
 800e356:	46bd      	mov	sp, r7
 800e358:	bd80      	pop	{r7, pc}
 800e35a:	bf00      	nop
 800e35c:	40023c00 	.word	0x40023c00
 800e360:	40023800 	.word	0x40023800
 800e364:	080161dc 	.word	0x080161dc
 800e368:	20000164 	.word	0x20000164
 800e36c:	20000168 	.word	0x20000168

0800e370 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e374:	b094      	sub	sp, #80	@ 0x50
 800e376:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800e378:	2300      	movs	r3, #0
 800e37a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800e37c:	2300      	movs	r3, #0
 800e37e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800e380:	2300      	movs	r3, #0
 800e382:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800e384:	2300      	movs	r3, #0
 800e386:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e388:	4b79      	ldr	r3, [pc, #484]	@ (800e570 <HAL_RCC_GetSysClockFreq+0x200>)
 800e38a:	689b      	ldr	r3, [r3, #8]
 800e38c:	f003 030c 	and.w	r3, r3, #12
 800e390:	2b08      	cmp	r3, #8
 800e392:	d00d      	beq.n	800e3b0 <HAL_RCC_GetSysClockFreq+0x40>
 800e394:	2b08      	cmp	r3, #8
 800e396:	f200 80e1 	bhi.w	800e55c <HAL_RCC_GetSysClockFreq+0x1ec>
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d002      	beq.n	800e3a4 <HAL_RCC_GetSysClockFreq+0x34>
 800e39e:	2b04      	cmp	r3, #4
 800e3a0:	d003      	beq.n	800e3aa <HAL_RCC_GetSysClockFreq+0x3a>
 800e3a2:	e0db      	b.n	800e55c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800e3a4:	4b73      	ldr	r3, [pc, #460]	@ (800e574 <HAL_RCC_GetSysClockFreq+0x204>)
 800e3a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800e3a8:	e0db      	b.n	800e562 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800e3aa:	4b73      	ldr	r3, [pc, #460]	@ (800e578 <HAL_RCC_GetSysClockFreq+0x208>)
 800e3ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800e3ae:	e0d8      	b.n	800e562 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e3b0:	4b6f      	ldr	r3, [pc, #444]	@ (800e570 <HAL_RCC_GetSysClockFreq+0x200>)
 800e3b2:	685b      	ldr	r3, [r3, #4]
 800e3b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e3b8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e3ba:	4b6d      	ldr	r3, [pc, #436]	@ (800e570 <HAL_RCC_GetSysClockFreq+0x200>)
 800e3bc:	685b      	ldr	r3, [r3, #4]
 800e3be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d063      	beq.n	800e48e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e3c6:	4b6a      	ldr	r3, [pc, #424]	@ (800e570 <HAL_RCC_GetSysClockFreq+0x200>)
 800e3c8:	685b      	ldr	r3, [r3, #4]
 800e3ca:	099b      	lsrs	r3, r3, #6
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e3d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800e3d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e3d8:	633b      	str	r3, [r7, #48]	@ 0x30
 800e3da:	2300      	movs	r3, #0
 800e3dc:	637b      	str	r3, [r7, #52]	@ 0x34
 800e3de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800e3e2:	4622      	mov	r2, r4
 800e3e4:	462b      	mov	r3, r5
 800e3e6:	f04f 0000 	mov.w	r0, #0
 800e3ea:	f04f 0100 	mov.w	r1, #0
 800e3ee:	0159      	lsls	r1, r3, #5
 800e3f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e3f4:	0150      	lsls	r0, r2, #5
 800e3f6:	4602      	mov	r2, r0
 800e3f8:	460b      	mov	r3, r1
 800e3fa:	4621      	mov	r1, r4
 800e3fc:	1a51      	subs	r1, r2, r1
 800e3fe:	6139      	str	r1, [r7, #16]
 800e400:	4629      	mov	r1, r5
 800e402:	eb63 0301 	sbc.w	r3, r3, r1
 800e406:	617b      	str	r3, [r7, #20]
 800e408:	f04f 0200 	mov.w	r2, #0
 800e40c:	f04f 0300 	mov.w	r3, #0
 800e410:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800e414:	4659      	mov	r1, fp
 800e416:	018b      	lsls	r3, r1, #6
 800e418:	4651      	mov	r1, sl
 800e41a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800e41e:	4651      	mov	r1, sl
 800e420:	018a      	lsls	r2, r1, #6
 800e422:	4651      	mov	r1, sl
 800e424:	ebb2 0801 	subs.w	r8, r2, r1
 800e428:	4659      	mov	r1, fp
 800e42a:	eb63 0901 	sbc.w	r9, r3, r1
 800e42e:	f04f 0200 	mov.w	r2, #0
 800e432:	f04f 0300 	mov.w	r3, #0
 800e436:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e43a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e43e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e442:	4690      	mov	r8, r2
 800e444:	4699      	mov	r9, r3
 800e446:	4623      	mov	r3, r4
 800e448:	eb18 0303 	adds.w	r3, r8, r3
 800e44c:	60bb      	str	r3, [r7, #8]
 800e44e:	462b      	mov	r3, r5
 800e450:	eb49 0303 	adc.w	r3, r9, r3
 800e454:	60fb      	str	r3, [r7, #12]
 800e456:	f04f 0200 	mov.w	r2, #0
 800e45a:	f04f 0300 	mov.w	r3, #0
 800e45e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800e462:	4629      	mov	r1, r5
 800e464:	024b      	lsls	r3, r1, #9
 800e466:	4621      	mov	r1, r4
 800e468:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800e46c:	4621      	mov	r1, r4
 800e46e:	024a      	lsls	r2, r1, #9
 800e470:	4610      	mov	r0, r2
 800e472:	4619      	mov	r1, r3
 800e474:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e476:	2200      	movs	r2, #0
 800e478:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e47a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e47c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800e480:	f7f2 fbfa 	bl	8000c78 <__aeabi_uldivmod>
 800e484:	4602      	mov	r2, r0
 800e486:	460b      	mov	r3, r1
 800e488:	4613      	mov	r3, r2
 800e48a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e48c:	e058      	b.n	800e540 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e48e:	4b38      	ldr	r3, [pc, #224]	@ (800e570 <HAL_RCC_GetSysClockFreq+0x200>)
 800e490:	685b      	ldr	r3, [r3, #4]
 800e492:	099b      	lsrs	r3, r3, #6
 800e494:	2200      	movs	r2, #0
 800e496:	4618      	mov	r0, r3
 800e498:	4611      	mov	r1, r2
 800e49a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800e49e:	623b      	str	r3, [r7, #32]
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	627b      	str	r3, [r7, #36]	@ 0x24
 800e4a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800e4a8:	4642      	mov	r2, r8
 800e4aa:	464b      	mov	r3, r9
 800e4ac:	f04f 0000 	mov.w	r0, #0
 800e4b0:	f04f 0100 	mov.w	r1, #0
 800e4b4:	0159      	lsls	r1, r3, #5
 800e4b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e4ba:	0150      	lsls	r0, r2, #5
 800e4bc:	4602      	mov	r2, r0
 800e4be:	460b      	mov	r3, r1
 800e4c0:	4641      	mov	r1, r8
 800e4c2:	ebb2 0a01 	subs.w	sl, r2, r1
 800e4c6:	4649      	mov	r1, r9
 800e4c8:	eb63 0b01 	sbc.w	fp, r3, r1
 800e4cc:	f04f 0200 	mov.w	r2, #0
 800e4d0:	f04f 0300 	mov.w	r3, #0
 800e4d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800e4d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800e4dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800e4e0:	ebb2 040a 	subs.w	r4, r2, sl
 800e4e4:	eb63 050b 	sbc.w	r5, r3, fp
 800e4e8:	f04f 0200 	mov.w	r2, #0
 800e4ec:	f04f 0300 	mov.w	r3, #0
 800e4f0:	00eb      	lsls	r3, r5, #3
 800e4f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e4f6:	00e2      	lsls	r2, r4, #3
 800e4f8:	4614      	mov	r4, r2
 800e4fa:	461d      	mov	r5, r3
 800e4fc:	4643      	mov	r3, r8
 800e4fe:	18e3      	adds	r3, r4, r3
 800e500:	603b      	str	r3, [r7, #0]
 800e502:	464b      	mov	r3, r9
 800e504:	eb45 0303 	adc.w	r3, r5, r3
 800e508:	607b      	str	r3, [r7, #4]
 800e50a:	f04f 0200 	mov.w	r2, #0
 800e50e:	f04f 0300 	mov.w	r3, #0
 800e512:	e9d7 4500 	ldrd	r4, r5, [r7]
 800e516:	4629      	mov	r1, r5
 800e518:	028b      	lsls	r3, r1, #10
 800e51a:	4621      	mov	r1, r4
 800e51c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800e520:	4621      	mov	r1, r4
 800e522:	028a      	lsls	r2, r1, #10
 800e524:	4610      	mov	r0, r2
 800e526:	4619      	mov	r1, r3
 800e528:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e52a:	2200      	movs	r2, #0
 800e52c:	61bb      	str	r3, [r7, #24]
 800e52e:	61fa      	str	r2, [r7, #28]
 800e530:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e534:	f7f2 fba0 	bl	8000c78 <__aeabi_uldivmod>
 800e538:	4602      	mov	r2, r0
 800e53a:	460b      	mov	r3, r1
 800e53c:	4613      	mov	r3, r2
 800e53e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800e540:	4b0b      	ldr	r3, [pc, #44]	@ (800e570 <HAL_RCC_GetSysClockFreq+0x200>)
 800e542:	685b      	ldr	r3, [r3, #4]
 800e544:	0c1b      	lsrs	r3, r3, #16
 800e546:	f003 0303 	and.w	r3, r3, #3
 800e54a:	3301      	adds	r3, #1
 800e54c:	005b      	lsls	r3, r3, #1
 800e54e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800e550:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e552:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e554:	fbb2 f3f3 	udiv	r3, r2, r3
 800e558:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800e55a:	e002      	b.n	800e562 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e55c:	4b05      	ldr	r3, [pc, #20]	@ (800e574 <HAL_RCC_GetSysClockFreq+0x204>)
 800e55e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800e560:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e562:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800e564:	4618      	mov	r0, r3
 800e566:	3750      	adds	r7, #80	@ 0x50
 800e568:	46bd      	mov	sp, r7
 800e56a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e56e:	bf00      	nop
 800e570:	40023800 	.word	0x40023800
 800e574:	00f42400 	.word	0x00f42400
 800e578:	007a1200 	.word	0x007a1200

0800e57c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e57c:	b480      	push	{r7}
 800e57e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e580:	4b03      	ldr	r3, [pc, #12]	@ (800e590 <HAL_RCC_GetHCLKFreq+0x14>)
 800e582:	681b      	ldr	r3, [r3, #0]
}
 800e584:	4618      	mov	r0, r3
 800e586:	46bd      	mov	sp, r7
 800e588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58c:	4770      	bx	lr
 800e58e:	bf00      	nop
 800e590:	20000164 	.word	0x20000164

0800e594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800e598:	f7ff fff0 	bl	800e57c <HAL_RCC_GetHCLKFreq>
 800e59c:	4602      	mov	r2, r0
 800e59e:	4b05      	ldr	r3, [pc, #20]	@ (800e5b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e5a0:	689b      	ldr	r3, [r3, #8]
 800e5a2:	0a9b      	lsrs	r3, r3, #10
 800e5a4:	f003 0307 	and.w	r3, r3, #7
 800e5a8:	4903      	ldr	r1, [pc, #12]	@ (800e5b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e5aa:	5ccb      	ldrb	r3, [r1, r3]
 800e5ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	bd80      	pop	{r7, pc}
 800e5b4:	40023800 	.word	0x40023800
 800e5b8:	080161ec 	.word	0x080161ec

0800e5bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800e5c0:	f7ff ffdc 	bl	800e57c <HAL_RCC_GetHCLKFreq>
 800e5c4:	4602      	mov	r2, r0
 800e5c6:	4b05      	ldr	r3, [pc, #20]	@ (800e5dc <HAL_RCC_GetPCLK2Freq+0x20>)
 800e5c8:	689b      	ldr	r3, [r3, #8]
 800e5ca:	0b5b      	lsrs	r3, r3, #13
 800e5cc:	f003 0307 	and.w	r3, r3, #7
 800e5d0:	4903      	ldr	r1, [pc, #12]	@ (800e5e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e5d2:	5ccb      	ldrb	r3, [r1, r3]
 800e5d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e5d8:	4618      	mov	r0, r3
 800e5da:	bd80      	pop	{r7, pc}
 800e5dc:	40023800 	.word	0x40023800
 800e5e0:	080161ec 	.word	0x080161ec

0800e5e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800e5e4:	b480      	push	{r7}
 800e5e6:	b083      	sub	sp, #12
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
 800e5ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	220f      	movs	r2, #15
 800e5f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800e5f4:	4b12      	ldr	r3, [pc, #72]	@ (800e640 <HAL_RCC_GetClockConfig+0x5c>)
 800e5f6:	689b      	ldr	r3, [r3, #8]
 800e5f8:	f003 0203 	and.w	r2, r3, #3
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800e600:	4b0f      	ldr	r3, [pc, #60]	@ (800e640 <HAL_RCC_GetClockConfig+0x5c>)
 800e602:	689b      	ldr	r3, [r3, #8]
 800e604:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800e60c:	4b0c      	ldr	r3, [pc, #48]	@ (800e640 <HAL_RCC_GetClockConfig+0x5c>)
 800e60e:	689b      	ldr	r3, [r3, #8]
 800e610:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800e618:	4b09      	ldr	r3, [pc, #36]	@ (800e640 <HAL_RCC_GetClockConfig+0x5c>)
 800e61a:	689b      	ldr	r3, [r3, #8]
 800e61c:	08db      	lsrs	r3, r3, #3
 800e61e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800e626:	4b07      	ldr	r3, [pc, #28]	@ (800e644 <HAL_RCC_GetClockConfig+0x60>)
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	f003 0207 	and.w	r2, r3, #7
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	601a      	str	r2, [r3, #0]
}
 800e632:	bf00      	nop
 800e634:	370c      	adds	r7, #12
 800e636:	46bd      	mov	sp, r7
 800e638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63c:	4770      	bx	lr
 800e63e:	bf00      	nop
 800e640:	40023800 	.word	0x40023800
 800e644:	40023c00 	.word	0x40023c00

0800e648 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b086      	sub	sp, #24
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800e650:	2300      	movs	r3, #0
 800e652:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800e654:	2300      	movs	r3, #0
 800e656:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	f003 0301 	and.w	r3, r3, #1
 800e660:	2b00      	cmp	r3, #0
 800e662:	d105      	bne.n	800e670 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d035      	beq.n	800e6dc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800e670:	4b62      	ldr	r3, [pc, #392]	@ (800e7fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800e672:	2200      	movs	r2, #0
 800e674:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800e676:	f7fe f817 	bl	800c6a8 <HAL_GetTick>
 800e67a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e67c:	e008      	b.n	800e690 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800e67e:	f7fe f813 	bl	800c6a8 <HAL_GetTick>
 800e682:	4602      	mov	r2, r0
 800e684:	697b      	ldr	r3, [r7, #20]
 800e686:	1ad3      	subs	r3, r2, r3
 800e688:	2b02      	cmp	r3, #2
 800e68a:	d901      	bls.n	800e690 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e68c:	2303      	movs	r3, #3
 800e68e:	e0b0      	b.n	800e7f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e690:	4b5b      	ldr	r3, [pc, #364]	@ (800e800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d1f0      	bne.n	800e67e <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	685b      	ldr	r3, [r3, #4]
 800e6a0:	019a      	lsls	r2, r3, #6
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	689b      	ldr	r3, [r3, #8]
 800e6a6:	071b      	lsls	r3, r3, #28
 800e6a8:	4955      	ldr	r1, [pc, #340]	@ (800e800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800e6aa:	4313      	orrs	r3, r2
 800e6ac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800e6b0:	4b52      	ldr	r3, [pc, #328]	@ (800e7fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800e6b2:	2201      	movs	r2, #1
 800e6b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800e6b6:	f7fd fff7 	bl	800c6a8 <HAL_GetTick>
 800e6ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e6bc:	e008      	b.n	800e6d0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800e6be:	f7fd fff3 	bl	800c6a8 <HAL_GetTick>
 800e6c2:	4602      	mov	r2, r0
 800e6c4:	697b      	ldr	r3, [r7, #20]
 800e6c6:	1ad3      	subs	r3, r2, r3
 800e6c8:	2b02      	cmp	r3, #2
 800e6ca:	d901      	bls.n	800e6d0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e6cc:	2303      	movs	r3, #3
 800e6ce:	e090      	b.n	800e7f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e6d0:	4b4b      	ldr	r3, [pc, #300]	@ (800e800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d0f0      	beq.n	800e6be <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	f003 0302 	and.w	r3, r3, #2
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	f000 8083 	beq.w	800e7f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	60fb      	str	r3, [r7, #12]
 800e6ee:	4b44      	ldr	r3, [pc, #272]	@ (800e800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800e6f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e6f2:	4a43      	ldr	r2, [pc, #268]	@ (800e800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800e6f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e6f8:	6413      	str	r3, [r2, #64]	@ 0x40
 800e6fa:	4b41      	ldr	r3, [pc, #260]	@ (800e800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800e6fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e6fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e702:	60fb      	str	r3, [r7, #12]
 800e704:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800e706:	4b3f      	ldr	r3, [pc, #252]	@ (800e804 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	4a3e      	ldr	r2, [pc, #248]	@ (800e804 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800e70c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e710:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800e712:	f7fd ffc9 	bl	800c6a8 <HAL_GetTick>
 800e716:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800e718:	e008      	b.n	800e72c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e71a:	f7fd ffc5 	bl	800c6a8 <HAL_GetTick>
 800e71e:	4602      	mov	r2, r0
 800e720:	697b      	ldr	r3, [r7, #20]
 800e722:	1ad3      	subs	r3, r2, r3
 800e724:	2b02      	cmp	r3, #2
 800e726:	d901      	bls.n	800e72c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800e728:	2303      	movs	r3, #3
 800e72a:	e062      	b.n	800e7f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800e72c:	4b35      	ldr	r3, [pc, #212]	@ (800e804 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e734:	2b00      	cmp	r3, #0
 800e736:	d0f0      	beq.n	800e71a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800e738:	4b31      	ldr	r3, [pc, #196]	@ (800e800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800e73a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e73c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e740:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800e742:	693b      	ldr	r3, [r7, #16]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d02f      	beq.n	800e7a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	68db      	ldr	r3, [r3, #12]
 800e74c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e750:	693a      	ldr	r2, [r7, #16]
 800e752:	429a      	cmp	r2, r3
 800e754:	d028      	beq.n	800e7a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e756:	4b2a      	ldr	r3, [pc, #168]	@ (800e800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800e758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e75a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e75e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800e760:	4b29      	ldr	r3, [pc, #164]	@ (800e808 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800e762:	2201      	movs	r2, #1
 800e764:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800e766:	4b28      	ldr	r3, [pc, #160]	@ (800e808 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800e768:	2200      	movs	r2, #0
 800e76a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800e76c:	4a24      	ldr	r2, [pc, #144]	@ (800e800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800e76e:	693b      	ldr	r3, [r7, #16]
 800e770:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800e772:	4b23      	ldr	r3, [pc, #140]	@ (800e800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800e774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e776:	f003 0301 	and.w	r3, r3, #1
 800e77a:	2b01      	cmp	r3, #1
 800e77c:	d114      	bne.n	800e7a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800e77e:	f7fd ff93 	bl	800c6a8 <HAL_GetTick>
 800e782:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e784:	e00a      	b.n	800e79c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e786:	f7fd ff8f 	bl	800c6a8 <HAL_GetTick>
 800e78a:	4602      	mov	r2, r0
 800e78c:	697b      	ldr	r3, [r7, #20]
 800e78e:	1ad3      	subs	r3, r2, r3
 800e790:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e794:	4293      	cmp	r3, r2
 800e796:	d901      	bls.n	800e79c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800e798:	2303      	movs	r3, #3
 800e79a:	e02a      	b.n	800e7f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e79c:	4b18      	ldr	r3, [pc, #96]	@ (800e800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800e79e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e7a0:	f003 0302 	and.w	r3, r3, #2
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d0ee      	beq.n	800e786 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	68db      	ldr	r3, [r3, #12]
 800e7ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e7b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e7b4:	d10d      	bne.n	800e7d2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800e7b6:	4b12      	ldr	r3, [pc, #72]	@ (800e800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800e7b8:	689b      	ldr	r3, [r3, #8]
 800e7ba:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	68db      	ldr	r3, [r3, #12]
 800e7c2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800e7c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e7ca:	490d      	ldr	r1, [pc, #52]	@ (800e800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800e7cc:	4313      	orrs	r3, r2
 800e7ce:	608b      	str	r3, [r1, #8]
 800e7d0:	e005      	b.n	800e7de <HAL_RCCEx_PeriphCLKConfig+0x196>
 800e7d2:	4b0b      	ldr	r3, [pc, #44]	@ (800e800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800e7d4:	689b      	ldr	r3, [r3, #8]
 800e7d6:	4a0a      	ldr	r2, [pc, #40]	@ (800e800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800e7d8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800e7dc:	6093      	str	r3, [r2, #8]
 800e7de:	4b08      	ldr	r3, [pc, #32]	@ (800e800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800e7e0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	68db      	ldr	r3, [r3, #12]
 800e7e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e7ea:	4905      	ldr	r1, [pc, #20]	@ (800e800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800e7ec:	4313      	orrs	r3, r2
 800e7ee:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800e7f0:	2300      	movs	r3, #0
}
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	3718      	adds	r7, #24
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	bd80      	pop	{r7, pc}
 800e7fa:	bf00      	nop
 800e7fc:	42470068 	.word	0x42470068
 800e800:	40023800 	.word	0x40023800
 800e804:	40007000 	.word	0x40007000
 800e808:	42470e40 	.word	0x42470e40

0800e80c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b084      	sub	sp, #16
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800e814:	2301      	movs	r3, #1
 800e816:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d101      	bne.n	800e822 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800e81e:	2301      	movs	r3, #1
 800e820:	e073      	b.n	800e90a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	7f5b      	ldrb	r3, [r3, #29]
 800e826:	b2db      	uxtb	r3, r3
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d105      	bne.n	800e838 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	2200      	movs	r2, #0
 800e830:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800e832:	6878      	ldr	r0, [r7, #4]
 800e834:	f7fd fb74 	bl	800bf20 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2202      	movs	r2, #2
 800e83c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	68db      	ldr	r3, [r3, #12]
 800e844:	f003 0310 	and.w	r3, r3, #16
 800e848:	2b10      	cmp	r3, #16
 800e84a:	d055      	beq.n	800e8f8 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	22ca      	movs	r2, #202	@ 0xca
 800e852:	625a      	str	r2, [r3, #36]	@ 0x24
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	2253      	movs	r2, #83	@ 0x53
 800e85a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800e85c:	6878      	ldr	r0, [r7, #4]
 800e85e:	f000 fb31 	bl	800eec4 <RTC_EnterInitMode>
 800e862:	4603      	mov	r3, r0
 800e864:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800e866:	7bfb      	ldrb	r3, [r7, #15]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d12c      	bne.n	800e8c6 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	689b      	ldr	r3, [r3, #8]
 800e872:	687a      	ldr	r2, [r7, #4]
 800e874:	6812      	ldr	r2, [r2, #0]
 800e876:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800e87a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e87e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	6899      	ldr	r1, [r3, #8]
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	685a      	ldr	r2, [r3, #4]
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	691b      	ldr	r3, [r3, #16]
 800e88e:	431a      	orrs	r2, r3
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	695b      	ldr	r3, [r3, #20]
 800e894:	431a      	orrs	r2, r3
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	430a      	orrs	r2, r1
 800e89c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	687a      	ldr	r2, [r7, #4]
 800e8a4:	68d2      	ldr	r2, [r2, #12]
 800e8a6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	6919      	ldr	r1, [r3, #16]
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	689b      	ldr	r3, [r3, #8]
 800e8b2:	041a      	lsls	r2, r3, #16
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	430a      	orrs	r2, r1
 800e8ba:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800e8bc:	6878      	ldr	r0, [r7, #4]
 800e8be:	f000 fb38 	bl	800ef32 <RTC_ExitInitMode>
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800e8c6:	7bfb      	ldrb	r3, [r7, #15]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d110      	bne.n	800e8ee <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800e8da:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	699a      	ldr	r2, [r3, #24]
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	430a      	orrs	r2, r1
 800e8ec:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	22ff      	movs	r2, #255	@ 0xff
 800e8f4:	625a      	str	r2, [r3, #36]	@ 0x24
 800e8f6:	e001      	b.n	800e8fc <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800e8fc:	7bfb      	ldrb	r3, [r7, #15]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d102      	bne.n	800e908 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	2201      	movs	r2, #1
 800e906:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800e908:	7bfb      	ldrb	r3, [r7, #15]
}
 800e90a:	4618      	mov	r0, r3
 800e90c:	3710      	adds	r7, #16
 800e90e:	46bd      	mov	sp, r7
 800e910:	bd80      	pop	{r7, pc}

0800e912 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800e912:	b590      	push	{r4, r7, lr}
 800e914:	b087      	sub	sp, #28
 800e916:	af00      	add	r7, sp, #0
 800e918:	60f8      	str	r0, [r7, #12]
 800e91a:	60b9      	str	r1, [r7, #8]
 800e91c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800e91e:	2300      	movs	r3, #0
 800e920:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	7f1b      	ldrb	r3, [r3, #28]
 800e926:	2b01      	cmp	r3, #1
 800e928:	d101      	bne.n	800e92e <HAL_RTC_SetTime+0x1c>
 800e92a:	2302      	movs	r3, #2
 800e92c:	e087      	b.n	800ea3e <HAL_RTC_SetTime+0x12c>
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	2201      	movs	r2, #1
 800e932:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	2202      	movs	r2, #2
 800e938:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d126      	bne.n	800e98e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	689b      	ldr	r3, [r3, #8]
 800e946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d102      	bne.n	800e954 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800e94e:	68bb      	ldr	r3, [r7, #8]
 800e950:	2200      	movs	r2, #0
 800e952:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800e954:	68bb      	ldr	r3, [r7, #8]
 800e956:	781b      	ldrb	r3, [r3, #0]
 800e958:	4618      	mov	r0, r3
 800e95a:	f000 fb0f 	bl	800ef7c <RTC_ByteToBcd2>
 800e95e:	4603      	mov	r3, r0
 800e960:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800e962:	68bb      	ldr	r3, [r7, #8]
 800e964:	785b      	ldrb	r3, [r3, #1]
 800e966:	4618      	mov	r0, r3
 800e968:	f000 fb08 	bl	800ef7c <RTC_ByteToBcd2>
 800e96c:	4603      	mov	r3, r0
 800e96e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800e970:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800e972:	68bb      	ldr	r3, [r7, #8]
 800e974:	789b      	ldrb	r3, [r3, #2]
 800e976:	4618      	mov	r0, r3
 800e978:	f000 fb00 	bl	800ef7c <RTC_ByteToBcd2>
 800e97c:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800e97e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800e982:	68bb      	ldr	r3, [r7, #8]
 800e984:	78db      	ldrb	r3, [r3, #3]
 800e986:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800e988:	4313      	orrs	r3, r2
 800e98a:	617b      	str	r3, [r7, #20]
 800e98c:	e018      	b.n	800e9c0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	689b      	ldr	r3, [r3, #8]
 800e994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d102      	bne.n	800e9a2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800e99c:	68bb      	ldr	r3, [r7, #8]
 800e99e:	2200      	movs	r2, #0
 800e9a0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800e9a2:	68bb      	ldr	r3, [r7, #8]
 800e9a4:	781b      	ldrb	r3, [r3, #0]
 800e9a6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800e9a8:	68bb      	ldr	r3, [r7, #8]
 800e9aa:	785b      	ldrb	r3, [r3, #1]
 800e9ac:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800e9ae:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800e9b0:	68ba      	ldr	r2, [r7, #8]
 800e9b2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800e9b4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800e9b6:	68bb      	ldr	r3, [r7, #8]
 800e9b8:	78db      	ldrb	r3, [r3, #3]
 800e9ba:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800e9bc:	4313      	orrs	r3, r2
 800e9be:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	22ca      	movs	r2, #202	@ 0xca
 800e9c6:	625a      	str	r2, [r3, #36]	@ 0x24
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	2253      	movs	r2, #83	@ 0x53
 800e9ce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800e9d0:	68f8      	ldr	r0, [r7, #12]
 800e9d2:	f000 fa77 	bl	800eec4 <RTC_EnterInitMode>
 800e9d6:	4603      	mov	r3, r0
 800e9d8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800e9da:	7cfb      	ldrb	r3, [r7, #19]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d120      	bne.n	800ea22 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	681a      	ldr	r2, [r3, #0]
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800e9ea:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800e9ee:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	689a      	ldr	r2, [r3, #8]
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800e9fe:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	6899      	ldr	r1, [r3, #8]
 800ea06:	68bb      	ldr	r3, [r7, #8]
 800ea08:	68da      	ldr	r2, [r3, #12]
 800ea0a:	68bb      	ldr	r3, [r7, #8]
 800ea0c:	691b      	ldr	r3, [r3, #16]
 800ea0e:	431a      	orrs	r2, r3
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	430a      	orrs	r2, r1
 800ea16:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ea18:	68f8      	ldr	r0, [r7, #12]
 800ea1a:	f000 fa8a 	bl	800ef32 <RTC_ExitInitMode>
 800ea1e:	4603      	mov	r3, r0
 800ea20:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800ea22:	7cfb      	ldrb	r3, [r7, #19]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d102      	bne.n	800ea2e <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	2201      	movs	r2, #1
 800ea2c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	22ff      	movs	r2, #255	@ 0xff
 800ea34:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	2200      	movs	r2, #0
 800ea3a:	771a      	strb	r2, [r3, #28]

  return status;
 800ea3c:	7cfb      	ldrb	r3, [r7, #19]
}
 800ea3e:	4618      	mov	r0, r3
 800ea40:	371c      	adds	r7, #28
 800ea42:	46bd      	mov	sp, r7
 800ea44:	bd90      	pop	{r4, r7, pc}

0800ea46 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ea46:	b590      	push	{r4, r7, lr}
 800ea48:	b087      	sub	sp, #28
 800ea4a:	af00      	add	r7, sp, #0
 800ea4c:	60f8      	str	r0, [r7, #12]
 800ea4e:	60b9      	str	r1, [r7, #8]
 800ea50:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800ea52:	2300      	movs	r3, #0
 800ea54:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	7f1b      	ldrb	r3, [r3, #28]
 800ea5a:	2b01      	cmp	r3, #1
 800ea5c:	d101      	bne.n	800ea62 <HAL_RTC_SetDate+0x1c>
 800ea5e:	2302      	movs	r3, #2
 800ea60:	e071      	b.n	800eb46 <HAL_RTC_SetDate+0x100>
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	2201      	movs	r2, #1
 800ea66:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	2202      	movs	r2, #2
 800ea6c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d10e      	bne.n	800ea92 <HAL_RTC_SetDate+0x4c>
 800ea74:	68bb      	ldr	r3, [r7, #8]
 800ea76:	785b      	ldrb	r3, [r3, #1]
 800ea78:	f003 0310 	and.w	r3, r3, #16
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d008      	beq.n	800ea92 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800ea80:	68bb      	ldr	r3, [r7, #8]
 800ea82:	785b      	ldrb	r3, [r3, #1]
 800ea84:	f023 0310 	bic.w	r3, r3, #16
 800ea88:	b2db      	uxtb	r3, r3
 800ea8a:	330a      	adds	r3, #10
 800ea8c:	b2da      	uxtb	r2, r3
 800ea8e:	68bb      	ldr	r3, [r7, #8]
 800ea90:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d11c      	bne.n	800ead2 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800ea98:	68bb      	ldr	r3, [r7, #8]
 800ea9a:	78db      	ldrb	r3, [r3, #3]
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	f000 fa6d 	bl	800ef7c <RTC_ByteToBcd2>
 800eaa2:	4603      	mov	r3, r0
 800eaa4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800eaa6:	68bb      	ldr	r3, [r7, #8]
 800eaa8:	785b      	ldrb	r3, [r3, #1]
 800eaaa:	4618      	mov	r0, r3
 800eaac:	f000 fa66 	bl	800ef7c <RTC_ByteToBcd2>
 800eab0:	4603      	mov	r3, r0
 800eab2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800eab4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800eab6:	68bb      	ldr	r3, [r7, #8]
 800eab8:	789b      	ldrb	r3, [r3, #2]
 800eaba:	4618      	mov	r0, r3
 800eabc:	f000 fa5e 	bl	800ef7c <RTC_ByteToBcd2>
 800eac0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800eac2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800eac6:	68bb      	ldr	r3, [r7, #8]
 800eac8:	781b      	ldrb	r3, [r3, #0]
 800eaca:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800eacc:	4313      	orrs	r3, r2
 800eace:	617b      	str	r3, [r7, #20]
 800ead0:	e00e      	b.n	800eaf0 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	78db      	ldrb	r3, [r3, #3]
 800ead6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800ead8:	68bb      	ldr	r3, [r7, #8]
 800eada:	785b      	ldrb	r3, [r3, #1]
 800eadc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800eade:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800eae0:	68ba      	ldr	r2, [r7, #8]
 800eae2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800eae4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800eae6:	68bb      	ldr	r3, [r7, #8]
 800eae8:	781b      	ldrb	r3, [r3, #0]
 800eaea:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800eaec:	4313      	orrs	r3, r2
 800eaee:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	22ca      	movs	r2, #202	@ 0xca
 800eaf6:	625a      	str	r2, [r3, #36]	@ 0x24
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	2253      	movs	r2, #83	@ 0x53
 800eafe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800eb00:	68f8      	ldr	r0, [r7, #12]
 800eb02:	f000 f9df 	bl	800eec4 <RTC_EnterInitMode>
 800eb06:	4603      	mov	r3, r0
 800eb08:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800eb0a:	7cfb      	ldrb	r3, [r7, #19]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d10c      	bne.n	800eb2a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	681a      	ldr	r2, [r3, #0]
 800eb14:	697b      	ldr	r3, [r7, #20]
 800eb16:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800eb1a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800eb1e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800eb20:	68f8      	ldr	r0, [r7, #12]
 800eb22:	f000 fa06 	bl	800ef32 <RTC_ExitInitMode>
 800eb26:	4603      	mov	r3, r0
 800eb28:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800eb2a:	7cfb      	ldrb	r3, [r7, #19]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d102      	bne.n	800eb36 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	2201      	movs	r2, #1
 800eb34:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	22ff      	movs	r2, #255	@ 0xff
 800eb3c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	2200      	movs	r2, #0
 800eb42:	771a      	strb	r2, [r3, #28]

  return status;
 800eb44:	7cfb      	ldrb	r3, [r7, #19]
}
 800eb46:	4618      	mov	r0, r3
 800eb48:	371c      	adds	r7, #28
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd90      	pop	{r4, r7, pc}
	...

0800eb50 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800eb50:	b590      	push	{r4, r7, lr}
 800eb52:	b089      	sub	sp, #36	@ 0x24
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	60f8      	str	r0, [r7, #12]
 800eb58:	60b9      	str	r1, [r7, #8]
 800eb5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800eb5c:	4b9b      	ldr	r3, [pc, #620]	@ (800edcc <HAL_RTC_SetAlarm_IT+0x27c>)
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	4a9b      	ldr	r2, [pc, #620]	@ (800edd0 <HAL_RTC_SetAlarm_IT+0x280>)
 800eb62:	fba2 2303 	umull	r2, r3, r2, r3
 800eb66:	0adb      	lsrs	r3, r3, #11
 800eb68:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800eb6c:	fb02 f303 	mul.w	r3, r2, r3
 800eb70:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 800eb72:	2300      	movs	r3, #0
 800eb74:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 800eb76:	2300      	movs	r3, #0
 800eb78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	7f1b      	ldrb	r3, [r3, #28]
 800eb7e:	2b01      	cmp	r3, #1
 800eb80:	d101      	bne.n	800eb86 <HAL_RTC_SetAlarm_IT+0x36>
 800eb82:	2302      	movs	r3, #2
 800eb84:	e11e      	b.n	800edc4 <HAL_RTC_SetAlarm_IT+0x274>
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	2201      	movs	r2, #1
 800eb8a:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	2202      	movs	r2, #2
 800eb90:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d137      	bne.n	800ec08 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	689b      	ldr	r3, [r3, #8]
 800eb9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d102      	bne.n	800ebac <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800eba6:	68bb      	ldr	r3, [r7, #8]
 800eba8:	2200      	movs	r2, #0
 800ebaa:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800ebac:	68bb      	ldr	r3, [r7, #8]
 800ebae:	781b      	ldrb	r3, [r3, #0]
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	f000 f9e3 	bl	800ef7c <RTC_ByteToBcd2>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800ebba:	68bb      	ldr	r3, [r7, #8]
 800ebbc:	785b      	ldrb	r3, [r3, #1]
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	f000 f9dc 	bl	800ef7c <RTC_ByteToBcd2>
 800ebc4:	4603      	mov	r3, r0
 800ebc6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800ebc8:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800ebca:	68bb      	ldr	r3, [r7, #8]
 800ebcc:	789b      	ldrb	r3, [r3, #2]
 800ebce:	4618      	mov	r0, r3
 800ebd0:	f000 f9d4 	bl	800ef7c <RTC_ByteToBcd2>
 800ebd4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800ebd6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800ebda:	68bb      	ldr	r3, [r7, #8]
 800ebdc:	78db      	ldrb	r3, [r3, #3]
 800ebde:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800ebe0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800ebe4:	68bb      	ldr	r3, [r7, #8]
 800ebe6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ebea:	4618      	mov	r0, r3
 800ebec:	f000 f9c6 	bl	800ef7c <RTC_ByteToBcd2>
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800ebf4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800ebf8:	68bb      	ldr	r3, [r7, #8]
 800ebfa:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800ebfc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800ebfe:	68bb      	ldr	r3, [r7, #8]
 800ec00:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800ec02:	4313      	orrs	r3, r2
 800ec04:	61fb      	str	r3, [r7, #28]
 800ec06:	e023      	b.n	800ec50 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	689b      	ldr	r3, [r3, #8]
 800ec0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d102      	bne.n	800ec1c <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800ec16:	68bb      	ldr	r3, [r7, #8]
 800ec18:	2200      	movs	r2, #0
 800ec1a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800ec1c:	68bb      	ldr	r3, [r7, #8]
 800ec1e:	781b      	ldrb	r3, [r3, #0]
 800ec20:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800ec22:	68bb      	ldr	r3, [r7, #8]
 800ec24:	785b      	ldrb	r3, [r3, #1]
 800ec26:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800ec28:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800ec2a:	68ba      	ldr	r2, [r7, #8]
 800ec2c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800ec2e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800ec30:	68bb      	ldr	r3, [r7, #8]
 800ec32:	78db      	ldrb	r3, [r3, #3]
 800ec34:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800ec36:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800ec38:	68bb      	ldr	r3, [r7, #8]
 800ec3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ec3e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800ec40:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800ec42:	68bb      	ldr	r3, [r7, #8]
 800ec44:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800ec46:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800ec48:	68bb      	ldr	r3, [r7, #8]
 800ec4a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800ec4c:	4313      	orrs	r3, r2
 800ec4e:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800ec50:	68bb      	ldr	r3, [r7, #8]
 800ec52:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800ec54:	68bb      	ldr	r3, [r7, #8]
 800ec56:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800ec58:	4313      	orrs	r3, r2
 800ec5a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	22ca      	movs	r2, #202	@ 0xca
 800ec62:	625a      	str	r2, [r3, #36]	@ 0x24
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	2253      	movs	r2, #83	@ 0x53
 800ec6a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800ec6c:	68bb      	ldr	r3, [r7, #8]
 800ec6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ec74:	d142      	bne.n	800ecfc <HAL_RTC_SetAlarm_IT+0x1ac>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	689a      	ldr	r2, [r3, #8]
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ec84:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	68db      	ldr	r3, [r3, #12]
 800ec8c:	b2da      	uxtb	r2, r3
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800ec96:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 800ec98:	697b      	ldr	r3, [r7, #20]
 800ec9a:	3b01      	subs	r3, #1
 800ec9c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800ec9e:	697b      	ldr	r3, [r7, #20]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d10b      	bne.n	800ecbc <HAL_RTC_SetAlarm_IT+0x16c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	22ff      	movs	r2, #255	@ 0xff
 800ecaa:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	2203      	movs	r2, #3
 800ecb0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800ecb8:	2303      	movs	r3, #3
 800ecba:	e083      	b.n	800edc4 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	68db      	ldr	r3, [r3, #12]
 800ecc2:	f003 0301 	and.w	r3, r3, #1
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d0e6      	beq.n	800ec98 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	69fa      	ldr	r2, [r7, #28]
 800ecd0:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	69ba      	ldr	r2, [r7, #24]
 800ecd8:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	689a      	ldr	r2, [r3, #8]
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ece8:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	689a      	ldr	r2, [r3, #8]
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ecf8:	609a      	str	r2, [r3, #8]
 800ecfa:	e04c      	b.n	800ed96 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	689a      	ldr	r2, [r3, #8]
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800ed0a:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	68db      	ldr	r3, [r3, #12]
 800ed12:	b2da      	uxtb	r2, r3
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800ed1c:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800ed1e:	4b2b      	ldr	r3, [pc, #172]	@ (800edcc <HAL_RTC_SetAlarm_IT+0x27c>)
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	4a2b      	ldr	r2, [pc, #172]	@ (800edd0 <HAL_RTC_SetAlarm_IT+0x280>)
 800ed24:	fba2 2303 	umull	r2, r3, r2, r3
 800ed28:	0adb      	lsrs	r3, r3, #11
 800ed2a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ed2e:	fb02 f303 	mul.w	r3, r2, r3
 800ed32:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 800ed34:	697b      	ldr	r3, [r7, #20]
 800ed36:	3b01      	subs	r3, #1
 800ed38:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800ed3a:	697b      	ldr	r3, [r7, #20]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d10b      	bne.n	800ed58 <HAL_RTC_SetAlarm_IT+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	22ff      	movs	r2, #255	@ 0xff
 800ed46:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	2203      	movs	r2, #3
 800ed4c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	2200      	movs	r2, #0
 800ed52:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800ed54:	2303      	movs	r3, #3
 800ed56:	e035      	b.n	800edc4 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	68db      	ldr	r3, [r3, #12]
 800ed5e:	f003 0302 	and.w	r3, r3, #2
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d0e6      	beq.n	800ed34 <HAL_RTC_SetAlarm_IT+0x1e4>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	69fa      	ldr	r2, [r7, #28]
 800ed6c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	69ba      	ldr	r2, [r7, #24]
 800ed74:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	689a      	ldr	r2, [r3, #8]
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ed84:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	689a      	ldr	r2, [r3, #8]
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ed94:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800ed96:	4b0f      	ldr	r3, [pc, #60]	@ (800edd4 <HAL_RTC_SetAlarm_IT+0x284>)
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	4a0e      	ldr	r2, [pc, #56]	@ (800edd4 <HAL_RTC_SetAlarm_IT+0x284>)
 800ed9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800eda0:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800eda2:	4b0c      	ldr	r3, [pc, #48]	@ (800edd4 <HAL_RTC_SetAlarm_IT+0x284>)
 800eda4:	689b      	ldr	r3, [r3, #8]
 800eda6:	4a0b      	ldr	r2, [pc, #44]	@ (800edd4 <HAL_RTC_SetAlarm_IT+0x284>)
 800eda8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800edac:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	22ff      	movs	r2, #255	@ 0xff
 800edb4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	2201      	movs	r2, #1
 800edba:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	2200      	movs	r2, #0
 800edc0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800edc2:	2300      	movs	r3, #0
}
 800edc4:	4618      	mov	r0, r3
 800edc6:	3724      	adds	r7, #36	@ 0x24
 800edc8:	46bd      	mov	sp, r7
 800edca:	bd90      	pop	{r4, r7, pc}
 800edcc:	20000164 	.word	0x20000164
 800edd0:	10624dd3 	.word	0x10624dd3
 800edd4:	40013c00 	.word	0x40013c00

0800edd8 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	b082      	sub	sp, #8
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800ede0:	4b1f      	ldr	r3, [pc, #124]	@ (800ee60 <HAL_RTC_AlarmIRQHandler+0x88>)
 800ede2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800ede6:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	689b      	ldr	r3, [r3, #8]
 800edee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d012      	beq.n	800ee1c <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	68db      	ldr	r3, [r3, #12]
 800edfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d00b      	beq.n	800ee1c <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	68db      	ldr	r3, [r3, #12]
 800ee0a:	b2da      	uxtb	r2, r3
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800ee14:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800ee16:	6878      	ldr	r0, [r7, #4]
 800ee18:	f000 f824 	bl	800ee64 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	689b      	ldr	r3, [r3, #8]
 800ee22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d012      	beq.n	800ee50 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	68db      	ldr	r3, [r3, #12]
 800ee30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d00b      	beq.n	800ee50 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	68db      	ldr	r3, [r3, #12]
 800ee3e:	b2da      	uxtb	r2, r3
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800ee48:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800ee4a:	6878      	ldr	r0, [r7, #4]
 800ee4c:	f000 f8b4 	bl	800efb8 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	2201      	movs	r2, #1
 800ee54:	775a      	strb	r2, [r3, #29]
}
 800ee56:	bf00      	nop
 800ee58:	3708      	adds	r7, #8
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	bd80      	pop	{r7, pc}
 800ee5e:	bf00      	nop
 800ee60:	40013c00 	.word	0x40013c00

0800ee64 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800ee64:	b480      	push	{r7}
 800ee66:	b083      	sub	sp, #12
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 800ee6c:	bf00      	nop
 800ee6e:	370c      	adds	r7, #12
 800ee70:	46bd      	mov	sp, r7
 800ee72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee76:	4770      	bx	lr

0800ee78 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	b084      	sub	sp, #16
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ee80:	2300      	movs	r3, #0
 800ee82:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	4a0d      	ldr	r2, [pc, #52]	@ (800eec0 <HAL_RTC_WaitForSynchro+0x48>)
 800ee8a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ee8c:	f7fd fc0c 	bl	800c6a8 <HAL_GetTick>
 800ee90:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ee92:	e009      	b.n	800eea8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ee94:	f7fd fc08 	bl	800c6a8 <HAL_GetTick>
 800ee98:	4602      	mov	r2, r0
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	1ad3      	subs	r3, r2, r3
 800ee9e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800eea2:	d901      	bls.n	800eea8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800eea4:	2303      	movs	r3, #3
 800eea6:	e007      	b.n	800eeb8 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	68db      	ldr	r3, [r3, #12]
 800eeae:	f003 0320 	and.w	r3, r3, #32
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d0ee      	beq.n	800ee94 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800eeb6:	2300      	movs	r3, #0
}
 800eeb8:	4618      	mov	r0, r3
 800eeba:	3710      	adds	r7, #16
 800eebc:	46bd      	mov	sp, r7
 800eebe:	bd80      	pop	{r7, pc}
 800eec0:	00017f5f 	.word	0x00017f5f

0800eec4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b084      	sub	sp, #16
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800eecc:	2300      	movs	r3, #0
 800eece:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800eed0:	2300      	movs	r3, #0
 800eed2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	68db      	ldr	r3, [r3, #12]
 800eeda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d122      	bne.n	800ef28 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	68da      	ldr	r2, [r3, #12]
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800eef0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800eef2:	f7fd fbd9 	bl	800c6a8 <HAL_GetTick>
 800eef6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800eef8:	e00c      	b.n	800ef14 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800eefa:	f7fd fbd5 	bl	800c6a8 <HAL_GetTick>
 800eefe:	4602      	mov	r2, r0
 800ef00:	68bb      	ldr	r3, [r7, #8]
 800ef02:	1ad3      	subs	r3, r2, r3
 800ef04:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ef08:	d904      	bls.n	800ef14 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	2204      	movs	r2, #4
 800ef0e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800ef10:	2301      	movs	r3, #1
 800ef12:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	68db      	ldr	r3, [r3, #12]
 800ef1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d102      	bne.n	800ef28 <RTC_EnterInitMode+0x64>
 800ef22:	7bfb      	ldrb	r3, [r7, #15]
 800ef24:	2b01      	cmp	r3, #1
 800ef26:	d1e8      	bne.n	800eefa <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800ef28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	3710      	adds	r7, #16
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	bd80      	pop	{r7, pc}

0800ef32 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800ef32:	b580      	push	{r7, lr}
 800ef34:	b084      	sub	sp, #16
 800ef36:	af00      	add	r7, sp, #0
 800ef38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	68da      	ldr	r2, [r3, #12]
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ef4c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	689b      	ldr	r3, [r3, #8]
 800ef54:	f003 0320 	and.w	r3, r3, #32
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d10a      	bne.n	800ef72 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ef5c:	6878      	ldr	r0, [r7, #4]
 800ef5e:	f7ff ff8b 	bl	800ee78 <HAL_RTC_WaitForSynchro>
 800ef62:	4603      	mov	r3, r0
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d004      	beq.n	800ef72 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	2204      	movs	r2, #4
 800ef6c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800ef6e:	2301      	movs	r3, #1
 800ef70:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800ef72:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef74:	4618      	mov	r0, r3
 800ef76:	3710      	adds	r7, #16
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	bd80      	pop	{r7, pc}

0800ef7c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800ef7c:	b480      	push	{r7}
 800ef7e:	b085      	sub	sp, #20
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	4603      	mov	r3, r0
 800ef84:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800ef86:	2300      	movs	r3, #0
 800ef88:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800ef8a:	e005      	b.n	800ef98 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	3301      	adds	r3, #1
 800ef90:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800ef92:	79fb      	ldrb	r3, [r7, #7]
 800ef94:	3b0a      	subs	r3, #10
 800ef96:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800ef98:	79fb      	ldrb	r3, [r7, #7]
 800ef9a:	2b09      	cmp	r3, #9
 800ef9c:	d8f6      	bhi.n	800ef8c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	b2db      	uxtb	r3, r3
 800efa2:	011b      	lsls	r3, r3, #4
 800efa4:	b2da      	uxtb	r2, r3
 800efa6:	79fb      	ldrb	r3, [r7, #7]
 800efa8:	4313      	orrs	r3, r2
 800efaa:	b2db      	uxtb	r3, r3
}
 800efac:	4618      	mov	r0, r3
 800efae:	3714      	adds	r7, #20
 800efb0:	46bd      	mov	sp, r7
 800efb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb6:	4770      	bx	lr

0800efb8 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800efb8:	b480      	push	{r7}
 800efba:	b083      	sub	sp, #12
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800efc0:	bf00      	nop
 800efc2:	370c      	adds	r7, #12
 800efc4:	46bd      	mov	sp, r7
 800efc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efca:	4770      	bx	lr

0800efcc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800efcc:	b580      	push	{r7, lr}
 800efce:	b082      	sub	sp, #8
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d101      	bne.n	800efde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800efda:	2301      	movs	r3, #1
 800efdc:	e07b      	b.n	800f0d6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d108      	bne.n	800eff8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	685b      	ldr	r3, [r3, #4]
 800efea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800efee:	d009      	beq.n	800f004 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	2200      	movs	r2, #0
 800eff4:	61da      	str	r2, [r3, #28]
 800eff6:	e005      	b.n	800f004 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	2200      	movs	r2, #0
 800effc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	2200      	movs	r2, #0
 800f002:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2200      	movs	r2, #0
 800f008:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f010:	b2db      	uxtb	r3, r3
 800f012:	2b00      	cmp	r3, #0
 800f014:	d106      	bne.n	800f024 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	2200      	movs	r2, #0
 800f01a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f01e:	6878      	ldr	r0, [r7, #4]
 800f020:	f7fc ffb0 	bl	800bf84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	2202      	movs	r2, #2
 800f028:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	681a      	ldr	r2, [r3, #0]
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f03a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	685b      	ldr	r3, [r3, #4]
 800f040:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	689b      	ldr	r3, [r3, #8]
 800f048:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800f04c:	431a      	orrs	r2, r3
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	68db      	ldr	r3, [r3, #12]
 800f052:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f056:	431a      	orrs	r2, r3
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	691b      	ldr	r3, [r3, #16]
 800f05c:	f003 0302 	and.w	r3, r3, #2
 800f060:	431a      	orrs	r2, r3
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	695b      	ldr	r3, [r3, #20]
 800f066:	f003 0301 	and.w	r3, r3, #1
 800f06a:	431a      	orrs	r2, r3
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	699b      	ldr	r3, [r3, #24]
 800f070:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f074:	431a      	orrs	r2, r3
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	69db      	ldr	r3, [r3, #28]
 800f07a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f07e:	431a      	orrs	r2, r3
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	6a1b      	ldr	r3, [r3, #32]
 800f084:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f088:	ea42 0103 	orr.w	r1, r2, r3
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f090:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	430a      	orrs	r2, r1
 800f09a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	699b      	ldr	r3, [r3, #24]
 800f0a0:	0c1b      	lsrs	r3, r3, #16
 800f0a2:	f003 0104 	and.w	r1, r3, #4
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0aa:	f003 0210 	and.w	r2, r3, #16
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	430a      	orrs	r2, r1
 800f0b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	69da      	ldr	r2, [r3, #28]
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800f0c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	2200      	movs	r2, #0
 800f0ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	2201      	movs	r2, #1
 800f0d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800f0d4:	2300      	movs	r3, #0
}
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	3708      	adds	r7, #8
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	bd80      	pop	{r7, pc}

0800f0de <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f0de:	b580      	push	{r7, lr}
 800f0e0:	b088      	sub	sp, #32
 800f0e2:	af00      	add	r7, sp, #0
 800f0e4:	60f8      	str	r0, [r7, #12]
 800f0e6:	60b9      	str	r1, [r7, #8]
 800f0e8:	603b      	str	r3, [r7, #0]
 800f0ea:	4613      	mov	r3, r2
 800f0ec:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f0ee:	f7fd fadb 	bl	800c6a8 <HAL_GetTick>
 800f0f2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800f0f4:	88fb      	ldrh	r3, [r7, #6]
 800f0f6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f0fe:	b2db      	uxtb	r3, r3
 800f100:	2b01      	cmp	r3, #1
 800f102:	d001      	beq.n	800f108 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800f104:	2302      	movs	r3, #2
 800f106:	e12a      	b.n	800f35e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800f108:	68bb      	ldr	r3, [r7, #8]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d002      	beq.n	800f114 <HAL_SPI_Transmit+0x36>
 800f10e:	88fb      	ldrh	r3, [r7, #6]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d101      	bne.n	800f118 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800f114:	2301      	movs	r3, #1
 800f116:	e122      	b.n	800f35e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800f11e:	2b01      	cmp	r3, #1
 800f120:	d101      	bne.n	800f126 <HAL_SPI_Transmit+0x48>
 800f122:	2302      	movs	r3, #2
 800f124:	e11b      	b.n	800f35e <HAL_SPI_Transmit+0x280>
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	2201      	movs	r2, #1
 800f12a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	2203      	movs	r2, #3
 800f132:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	2200      	movs	r2, #0
 800f13a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	68ba      	ldr	r2, [r7, #8]
 800f140:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	88fa      	ldrh	r2, [r7, #6]
 800f146:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	88fa      	ldrh	r2, [r7, #6]
 800f14c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	2200      	movs	r2, #0
 800f152:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	2200      	movs	r2, #0
 800f158:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	2200      	movs	r2, #0
 800f15e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	2200      	movs	r2, #0
 800f164:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	2200      	movs	r2, #0
 800f16a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	689b      	ldr	r3, [r3, #8]
 800f170:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f174:	d10f      	bne.n	800f196 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	681a      	ldr	r2, [r3, #0]
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f184:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	681a      	ldr	r2, [r3, #0]
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f194:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f1a0:	2b40      	cmp	r3, #64	@ 0x40
 800f1a2:	d007      	beq.n	800f1b4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	681a      	ldr	r2, [r3, #0]
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f1b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	68db      	ldr	r3, [r3, #12]
 800f1b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f1bc:	d152      	bne.n	800f264 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	685b      	ldr	r3, [r3, #4]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d002      	beq.n	800f1cc <HAL_SPI_Transmit+0xee>
 800f1c6:	8b7b      	ldrh	r3, [r7, #26]
 800f1c8:	2b01      	cmp	r3, #1
 800f1ca:	d145      	bne.n	800f258 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f1d0:	881a      	ldrh	r2, [r3, #0]
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f1dc:	1c9a      	adds	r2, r3, #2
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f1e6:	b29b      	uxth	r3, r3
 800f1e8:	3b01      	subs	r3, #1
 800f1ea:	b29a      	uxth	r2, r3
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800f1f0:	e032      	b.n	800f258 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	689b      	ldr	r3, [r3, #8]
 800f1f8:	f003 0302 	and.w	r3, r3, #2
 800f1fc:	2b02      	cmp	r3, #2
 800f1fe:	d112      	bne.n	800f226 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f204:	881a      	ldrh	r2, [r3, #0]
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f210:	1c9a      	adds	r2, r3, #2
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f21a:	b29b      	uxth	r3, r3
 800f21c:	3b01      	subs	r3, #1
 800f21e:	b29a      	uxth	r2, r3
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	86da      	strh	r2, [r3, #54]	@ 0x36
 800f224:	e018      	b.n	800f258 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f226:	f7fd fa3f 	bl	800c6a8 <HAL_GetTick>
 800f22a:	4602      	mov	r2, r0
 800f22c:	69fb      	ldr	r3, [r7, #28]
 800f22e:	1ad3      	subs	r3, r2, r3
 800f230:	683a      	ldr	r2, [r7, #0]
 800f232:	429a      	cmp	r2, r3
 800f234:	d803      	bhi.n	800f23e <HAL_SPI_Transmit+0x160>
 800f236:	683b      	ldr	r3, [r7, #0]
 800f238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f23c:	d102      	bne.n	800f244 <HAL_SPI_Transmit+0x166>
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d109      	bne.n	800f258 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	2201      	movs	r2, #1
 800f248:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	2200      	movs	r2, #0
 800f250:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800f254:	2303      	movs	r3, #3
 800f256:	e082      	b.n	800f35e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f25c:	b29b      	uxth	r3, r3
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d1c7      	bne.n	800f1f2 <HAL_SPI_Transmit+0x114>
 800f262:	e053      	b.n	800f30c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	685b      	ldr	r3, [r3, #4]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d002      	beq.n	800f272 <HAL_SPI_Transmit+0x194>
 800f26c:	8b7b      	ldrh	r3, [r7, #26]
 800f26e:	2b01      	cmp	r3, #1
 800f270:	d147      	bne.n	800f302 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	330c      	adds	r3, #12
 800f27c:	7812      	ldrb	r2, [r2, #0]
 800f27e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f284:	1c5a      	adds	r2, r3, #1
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f28e:	b29b      	uxth	r3, r3
 800f290:	3b01      	subs	r3, #1
 800f292:	b29a      	uxth	r2, r3
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800f298:	e033      	b.n	800f302 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	689b      	ldr	r3, [r3, #8]
 800f2a0:	f003 0302 	and.w	r3, r3, #2
 800f2a4:	2b02      	cmp	r3, #2
 800f2a6:	d113      	bne.n	800f2d0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	330c      	adds	r3, #12
 800f2b2:	7812      	ldrb	r2, [r2, #0]
 800f2b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f2ba:	1c5a      	adds	r2, r3, #1
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f2c4:	b29b      	uxth	r3, r3
 800f2c6:	3b01      	subs	r3, #1
 800f2c8:	b29a      	uxth	r2, r3
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	86da      	strh	r2, [r3, #54]	@ 0x36
 800f2ce:	e018      	b.n	800f302 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f2d0:	f7fd f9ea 	bl	800c6a8 <HAL_GetTick>
 800f2d4:	4602      	mov	r2, r0
 800f2d6:	69fb      	ldr	r3, [r7, #28]
 800f2d8:	1ad3      	subs	r3, r2, r3
 800f2da:	683a      	ldr	r2, [r7, #0]
 800f2dc:	429a      	cmp	r2, r3
 800f2de:	d803      	bhi.n	800f2e8 <HAL_SPI_Transmit+0x20a>
 800f2e0:	683b      	ldr	r3, [r7, #0]
 800f2e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2e6:	d102      	bne.n	800f2ee <HAL_SPI_Transmit+0x210>
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d109      	bne.n	800f302 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	2201      	movs	r2, #1
 800f2f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	2200      	movs	r2, #0
 800f2fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800f2fe:	2303      	movs	r3, #3
 800f300:	e02d      	b.n	800f35e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f306:	b29b      	uxth	r3, r3
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d1c6      	bne.n	800f29a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f30c:	69fa      	ldr	r2, [r7, #28]
 800f30e:	6839      	ldr	r1, [r7, #0]
 800f310:	68f8      	ldr	r0, [r7, #12]
 800f312:	f000 fbd9 	bl	800fac8 <SPI_EndRxTxTransaction>
 800f316:	4603      	mov	r3, r0
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d002      	beq.n	800f322 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	2220      	movs	r2, #32
 800f320:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	689b      	ldr	r3, [r3, #8]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d10a      	bne.n	800f340 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f32a:	2300      	movs	r3, #0
 800f32c:	617b      	str	r3, [r7, #20]
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	68db      	ldr	r3, [r3, #12]
 800f334:	617b      	str	r3, [r7, #20]
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	689b      	ldr	r3, [r3, #8]
 800f33c:	617b      	str	r3, [r7, #20]
 800f33e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	2201      	movs	r2, #1
 800f344:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	2200      	movs	r2, #0
 800f34c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f354:	2b00      	cmp	r3, #0
 800f356:	d001      	beq.n	800f35c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800f358:	2301      	movs	r3, #1
 800f35a:	e000      	b.n	800f35e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800f35c:	2300      	movs	r3, #0
  }
}
 800f35e:	4618      	mov	r0, r3
 800f360:	3720      	adds	r7, #32
 800f362:	46bd      	mov	sp, r7
 800f364:	bd80      	pop	{r7, pc}

0800f366 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f366:	b580      	push	{r7, lr}
 800f368:	b088      	sub	sp, #32
 800f36a:	af02      	add	r7, sp, #8
 800f36c:	60f8      	str	r0, [r7, #12]
 800f36e:	60b9      	str	r1, [r7, #8]
 800f370:	603b      	str	r3, [r7, #0]
 800f372:	4613      	mov	r3, r2
 800f374:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f37c:	b2db      	uxtb	r3, r3
 800f37e:	2b01      	cmp	r3, #1
 800f380:	d001      	beq.n	800f386 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800f382:	2302      	movs	r3, #2
 800f384:	e104      	b.n	800f590 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	685b      	ldr	r3, [r3, #4]
 800f38a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f38e:	d112      	bne.n	800f3b6 <HAL_SPI_Receive+0x50>
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	689b      	ldr	r3, [r3, #8]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d10e      	bne.n	800f3b6 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	2204      	movs	r2, #4
 800f39c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800f3a0:	88fa      	ldrh	r2, [r7, #6]
 800f3a2:	683b      	ldr	r3, [r7, #0]
 800f3a4:	9300      	str	r3, [sp, #0]
 800f3a6:	4613      	mov	r3, r2
 800f3a8:	68ba      	ldr	r2, [r7, #8]
 800f3aa:	68b9      	ldr	r1, [r7, #8]
 800f3ac:	68f8      	ldr	r0, [r7, #12]
 800f3ae:	f000 f8f3 	bl	800f598 <HAL_SPI_TransmitReceive>
 800f3b2:	4603      	mov	r3, r0
 800f3b4:	e0ec      	b.n	800f590 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f3b6:	f7fd f977 	bl	800c6a8 <HAL_GetTick>
 800f3ba:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800f3bc:	68bb      	ldr	r3, [r7, #8]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d002      	beq.n	800f3c8 <HAL_SPI_Receive+0x62>
 800f3c2:	88fb      	ldrh	r3, [r7, #6]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d101      	bne.n	800f3cc <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800f3c8:	2301      	movs	r3, #1
 800f3ca:	e0e1      	b.n	800f590 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800f3d2:	2b01      	cmp	r3, #1
 800f3d4:	d101      	bne.n	800f3da <HAL_SPI_Receive+0x74>
 800f3d6:	2302      	movs	r3, #2
 800f3d8:	e0da      	b.n	800f590 <HAL_SPI_Receive+0x22a>
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	2201      	movs	r2, #1
 800f3de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	2204      	movs	r2, #4
 800f3e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	68ba      	ldr	r2, [r7, #8]
 800f3f4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	88fa      	ldrh	r2, [r7, #6]
 800f3fa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	88fa      	ldrh	r2, [r7, #6]
 800f400:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	2200      	movs	r2, #0
 800f406:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	2200      	movs	r2, #0
 800f40c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	2200      	movs	r2, #0
 800f412:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	2200      	movs	r2, #0
 800f418:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	2200      	movs	r2, #0
 800f41e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	689b      	ldr	r3, [r3, #8]
 800f424:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f428:	d10f      	bne.n	800f44a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	681a      	ldr	r2, [r3, #0]
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f438:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	681a      	ldr	r2, [r3, #0]
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800f448:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f454:	2b40      	cmp	r3, #64	@ 0x40
 800f456:	d007      	beq.n	800f468 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	681a      	ldr	r2, [r3, #0]
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f466:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	68db      	ldr	r3, [r3, #12]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d170      	bne.n	800f552 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800f470:	e035      	b.n	800f4de <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	689b      	ldr	r3, [r3, #8]
 800f478:	f003 0301 	and.w	r3, r3, #1
 800f47c:	2b01      	cmp	r3, #1
 800f47e:	d115      	bne.n	800f4ac <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	f103 020c 	add.w	r2, r3, #12
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f48c:	7812      	ldrb	r2, [r2, #0]
 800f48e:	b2d2      	uxtb	r2, r2
 800f490:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f496:	1c5a      	adds	r2, r3, #1
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f4a0:	b29b      	uxth	r3, r3
 800f4a2:	3b01      	subs	r3, #1
 800f4a4:	b29a      	uxth	r2, r3
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f4aa:	e018      	b.n	800f4de <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f4ac:	f7fd f8fc 	bl	800c6a8 <HAL_GetTick>
 800f4b0:	4602      	mov	r2, r0
 800f4b2:	697b      	ldr	r3, [r7, #20]
 800f4b4:	1ad3      	subs	r3, r2, r3
 800f4b6:	683a      	ldr	r2, [r7, #0]
 800f4b8:	429a      	cmp	r2, r3
 800f4ba:	d803      	bhi.n	800f4c4 <HAL_SPI_Receive+0x15e>
 800f4bc:	683b      	ldr	r3, [r7, #0]
 800f4be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4c2:	d102      	bne.n	800f4ca <HAL_SPI_Receive+0x164>
 800f4c4:	683b      	ldr	r3, [r7, #0]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d109      	bne.n	800f4de <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	2201      	movs	r2, #1
 800f4ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	2200      	movs	r2, #0
 800f4d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800f4da:	2303      	movs	r3, #3
 800f4dc:	e058      	b.n	800f590 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f4e2:	b29b      	uxth	r3, r3
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d1c4      	bne.n	800f472 <HAL_SPI_Receive+0x10c>
 800f4e8:	e038      	b.n	800f55c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	689b      	ldr	r3, [r3, #8]
 800f4f0:	f003 0301 	and.w	r3, r3, #1
 800f4f4:	2b01      	cmp	r3, #1
 800f4f6:	d113      	bne.n	800f520 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	68da      	ldr	r2, [r3, #12]
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f502:	b292      	uxth	r2, r2
 800f504:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f50a:	1c9a      	adds	r2, r3, #2
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f514:	b29b      	uxth	r3, r3
 800f516:	3b01      	subs	r3, #1
 800f518:	b29a      	uxth	r2, r3
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f51e:	e018      	b.n	800f552 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f520:	f7fd f8c2 	bl	800c6a8 <HAL_GetTick>
 800f524:	4602      	mov	r2, r0
 800f526:	697b      	ldr	r3, [r7, #20]
 800f528:	1ad3      	subs	r3, r2, r3
 800f52a:	683a      	ldr	r2, [r7, #0]
 800f52c:	429a      	cmp	r2, r3
 800f52e:	d803      	bhi.n	800f538 <HAL_SPI_Receive+0x1d2>
 800f530:	683b      	ldr	r3, [r7, #0]
 800f532:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f536:	d102      	bne.n	800f53e <HAL_SPI_Receive+0x1d8>
 800f538:	683b      	ldr	r3, [r7, #0]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d109      	bne.n	800f552 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	2201      	movs	r2, #1
 800f542:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	2200      	movs	r2, #0
 800f54a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800f54e:	2303      	movs	r3, #3
 800f550:	e01e      	b.n	800f590 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f556:	b29b      	uxth	r3, r3
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d1c6      	bne.n	800f4ea <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f55c:	697a      	ldr	r2, [r7, #20]
 800f55e:	6839      	ldr	r1, [r7, #0]
 800f560:	68f8      	ldr	r0, [r7, #12]
 800f562:	f000 fa4b 	bl	800f9fc <SPI_EndRxTransaction>
 800f566:	4603      	mov	r3, r0
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d002      	beq.n	800f572 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	2220      	movs	r2, #32
 800f570:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	2201      	movs	r2, #1
 800f576:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	2200      	movs	r2, #0
 800f57e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f586:	2b00      	cmp	r3, #0
 800f588:	d001      	beq.n	800f58e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800f58a:	2301      	movs	r3, #1
 800f58c:	e000      	b.n	800f590 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800f58e:	2300      	movs	r3, #0
  }
}
 800f590:	4618      	mov	r0, r3
 800f592:	3718      	adds	r7, #24
 800f594:	46bd      	mov	sp, r7
 800f596:	bd80      	pop	{r7, pc}

0800f598 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800f598:	b580      	push	{r7, lr}
 800f59a:	b08a      	sub	sp, #40	@ 0x28
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	60f8      	str	r0, [r7, #12]
 800f5a0:	60b9      	str	r1, [r7, #8]
 800f5a2:	607a      	str	r2, [r7, #4]
 800f5a4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800f5a6:	2301      	movs	r3, #1
 800f5a8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f5aa:	f7fd f87d 	bl	800c6a8 <HAL_GetTick>
 800f5ae:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f5b6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	685b      	ldr	r3, [r3, #4]
 800f5bc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800f5be:	887b      	ldrh	r3, [r7, #2]
 800f5c0:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f5c2:	7ffb      	ldrb	r3, [r7, #31]
 800f5c4:	2b01      	cmp	r3, #1
 800f5c6:	d00c      	beq.n	800f5e2 <HAL_SPI_TransmitReceive+0x4a>
 800f5c8:	69bb      	ldr	r3, [r7, #24]
 800f5ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f5ce:	d106      	bne.n	800f5de <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	689b      	ldr	r3, [r3, #8]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d102      	bne.n	800f5de <HAL_SPI_TransmitReceive+0x46>
 800f5d8:	7ffb      	ldrb	r3, [r7, #31]
 800f5da:	2b04      	cmp	r3, #4
 800f5dc:	d001      	beq.n	800f5e2 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800f5de:	2302      	movs	r3, #2
 800f5e0:	e17f      	b.n	800f8e2 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800f5e2:	68bb      	ldr	r3, [r7, #8]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d005      	beq.n	800f5f4 <HAL_SPI_TransmitReceive+0x5c>
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d002      	beq.n	800f5f4 <HAL_SPI_TransmitReceive+0x5c>
 800f5ee:	887b      	ldrh	r3, [r7, #2]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d101      	bne.n	800f5f8 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800f5f4:	2301      	movs	r3, #1
 800f5f6:	e174      	b.n	800f8e2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800f5fe:	2b01      	cmp	r3, #1
 800f600:	d101      	bne.n	800f606 <HAL_SPI_TransmitReceive+0x6e>
 800f602:	2302      	movs	r3, #2
 800f604:	e16d      	b.n	800f8e2 <HAL_SPI_TransmitReceive+0x34a>
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	2201      	movs	r2, #1
 800f60a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f614:	b2db      	uxtb	r3, r3
 800f616:	2b04      	cmp	r3, #4
 800f618:	d003      	beq.n	800f622 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	2205      	movs	r2, #5
 800f61e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	2200      	movs	r2, #0
 800f626:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	687a      	ldr	r2, [r7, #4]
 800f62c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	887a      	ldrh	r2, [r7, #2]
 800f632:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	887a      	ldrh	r2, [r7, #2]
 800f638:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	68ba      	ldr	r2, [r7, #8]
 800f63e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	887a      	ldrh	r2, [r7, #2]
 800f644:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	887a      	ldrh	r2, [r7, #2]
 800f64a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	2200      	movs	r2, #0
 800f650:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	2200      	movs	r2, #0
 800f656:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f662:	2b40      	cmp	r3, #64	@ 0x40
 800f664:	d007      	beq.n	800f676 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	681a      	ldr	r2, [r3, #0]
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f674:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	68db      	ldr	r3, [r3, #12]
 800f67a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f67e:	d17e      	bne.n	800f77e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	685b      	ldr	r3, [r3, #4]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d002      	beq.n	800f68e <HAL_SPI_TransmitReceive+0xf6>
 800f688:	8afb      	ldrh	r3, [r7, #22]
 800f68a:	2b01      	cmp	r3, #1
 800f68c:	d16c      	bne.n	800f768 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f692:	881a      	ldrh	r2, [r3, #0]
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f69e:	1c9a      	adds	r2, r3, #2
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f6a8:	b29b      	uxth	r3, r3
 800f6aa:	3b01      	subs	r3, #1
 800f6ac:	b29a      	uxth	r2, r3
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f6b2:	e059      	b.n	800f768 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	689b      	ldr	r3, [r3, #8]
 800f6ba:	f003 0302 	and.w	r3, r3, #2
 800f6be:	2b02      	cmp	r3, #2
 800f6c0:	d11b      	bne.n	800f6fa <HAL_SPI_TransmitReceive+0x162>
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f6c6:	b29b      	uxth	r3, r3
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d016      	beq.n	800f6fa <HAL_SPI_TransmitReceive+0x162>
 800f6cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6ce:	2b01      	cmp	r3, #1
 800f6d0:	d113      	bne.n	800f6fa <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f6d6:	881a      	ldrh	r2, [r3, #0]
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f6e2:	1c9a      	adds	r2, r3, #2
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f6ec:	b29b      	uxth	r3, r3
 800f6ee:	3b01      	subs	r3, #1
 800f6f0:	b29a      	uxth	r2, r3
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	689b      	ldr	r3, [r3, #8]
 800f700:	f003 0301 	and.w	r3, r3, #1
 800f704:	2b01      	cmp	r3, #1
 800f706:	d119      	bne.n	800f73c <HAL_SPI_TransmitReceive+0x1a4>
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f70c:	b29b      	uxth	r3, r3
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d014      	beq.n	800f73c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	68da      	ldr	r2, [r3, #12]
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f71c:	b292      	uxth	r2, r2
 800f71e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f724:	1c9a      	adds	r2, r3, #2
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f72e:	b29b      	uxth	r3, r3
 800f730:	3b01      	subs	r3, #1
 800f732:	b29a      	uxth	r2, r3
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f738:	2301      	movs	r3, #1
 800f73a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800f73c:	f7fc ffb4 	bl	800c6a8 <HAL_GetTick>
 800f740:	4602      	mov	r2, r0
 800f742:	6a3b      	ldr	r3, [r7, #32]
 800f744:	1ad3      	subs	r3, r2, r3
 800f746:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f748:	429a      	cmp	r2, r3
 800f74a:	d80d      	bhi.n	800f768 <HAL_SPI_TransmitReceive+0x1d0>
 800f74c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f74e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f752:	d009      	beq.n	800f768 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	2201      	movs	r2, #1
 800f758:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	2200      	movs	r2, #0
 800f760:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800f764:	2303      	movs	r3, #3
 800f766:	e0bc      	b.n	800f8e2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f76c:	b29b      	uxth	r3, r3
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d1a0      	bne.n	800f6b4 <HAL_SPI_TransmitReceive+0x11c>
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f776:	b29b      	uxth	r3, r3
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d19b      	bne.n	800f6b4 <HAL_SPI_TransmitReceive+0x11c>
 800f77c:	e082      	b.n	800f884 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	685b      	ldr	r3, [r3, #4]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d002      	beq.n	800f78c <HAL_SPI_TransmitReceive+0x1f4>
 800f786:	8afb      	ldrh	r3, [r7, #22]
 800f788:	2b01      	cmp	r3, #1
 800f78a:	d171      	bne.n	800f870 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	330c      	adds	r3, #12
 800f796:	7812      	ldrb	r2, [r2, #0]
 800f798:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f79e:	1c5a      	adds	r2, r3, #1
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f7a8:	b29b      	uxth	r3, r3
 800f7aa:	3b01      	subs	r3, #1
 800f7ac:	b29a      	uxth	r2, r3
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f7b2:	e05d      	b.n	800f870 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	689b      	ldr	r3, [r3, #8]
 800f7ba:	f003 0302 	and.w	r3, r3, #2
 800f7be:	2b02      	cmp	r3, #2
 800f7c0:	d11c      	bne.n	800f7fc <HAL_SPI_TransmitReceive+0x264>
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f7c6:	b29b      	uxth	r3, r3
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d017      	beq.n	800f7fc <HAL_SPI_TransmitReceive+0x264>
 800f7cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7ce:	2b01      	cmp	r3, #1
 800f7d0:	d114      	bne.n	800f7fc <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	330c      	adds	r3, #12
 800f7dc:	7812      	ldrb	r2, [r2, #0]
 800f7de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f7e4:	1c5a      	adds	r2, r3, #1
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f7ee:	b29b      	uxth	r3, r3
 800f7f0:	3b01      	subs	r3, #1
 800f7f2:	b29a      	uxth	r2, r3
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	689b      	ldr	r3, [r3, #8]
 800f802:	f003 0301 	and.w	r3, r3, #1
 800f806:	2b01      	cmp	r3, #1
 800f808:	d119      	bne.n	800f83e <HAL_SPI_TransmitReceive+0x2a6>
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f80e:	b29b      	uxth	r3, r3
 800f810:	2b00      	cmp	r3, #0
 800f812:	d014      	beq.n	800f83e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	68da      	ldr	r2, [r3, #12]
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f81e:	b2d2      	uxtb	r2, r2
 800f820:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f826:	1c5a      	adds	r2, r3, #1
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f830:	b29b      	uxth	r3, r3
 800f832:	3b01      	subs	r3, #1
 800f834:	b29a      	uxth	r2, r3
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f83a:	2301      	movs	r3, #1
 800f83c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800f83e:	f7fc ff33 	bl	800c6a8 <HAL_GetTick>
 800f842:	4602      	mov	r2, r0
 800f844:	6a3b      	ldr	r3, [r7, #32]
 800f846:	1ad3      	subs	r3, r2, r3
 800f848:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f84a:	429a      	cmp	r2, r3
 800f84c:	d803      	bhi.n	800f856 <HAL_SPI_TransmitReceive+0x2be>
 800f84e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f850:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f854:	d102      	bne.n	800f85c <HAL_SPI_TransmitReceive+0x2c4>
 800f856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d109      	bne.n	800f870 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	2201      	movs	r2, #1
 800f860:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	2200      	movs	r2, #0
 800f868:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800f86c:	2303      	movs	r3, #3
 800f86e:	e038      	b.n	800f8e2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f874:	b29b      	uxth	r3, r3
 800f876:	2b00      	cmp	r3, #0
 800f878:	d19c      	bne.n	800f7b4 <HAL_SPI_TransmitReceive+0x21c>
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f87e:	b29b      	uxth	r3, r3
 800f880:	2b00      	cmp	r3, #0
 800f882:	d197      	bne.n	800f7b4 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f884:	6a3a      	ldr	r2, [r7, #32]
 800f886:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f888:	68f8      	ldr	r0, [r7, #12]
 800f88a:	f000 f91d 	bl	800fac8 <SPI_EndRxTxTransaction>
 800f88e:	4603      	mov	r3, r0
 800f890:	2b00      	cmp	r3, #0
 800f892:	d008      	beq.n	800f8a6 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	2220      	movs	r2, #32
 800f898:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	2200      	movs	r2, #0
 800f89e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800f8a2:	2301      	movs	r3, #1
 800f8a4:	e01d      	b.n	800f8e2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	689b      	ldr	r3, [r3, #8]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d10a      	bne.n	800f8c4 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	613b      	str	r3, [r7, #16]
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	68db      	ldr	r3, [r3, #12]
 800f8b8:	613b      	str	r3, [r7, #16]
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	689b      	ldr	r3, [r3, #8]
 800f8c0:	613b      	str	r3, [r7, #16]
 800f8c2:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	2201      	movs	r2, #1
 800f8c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	2200      	movs	r2, #0
 800f8d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d001      	beq.n	800f8e0 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800f8dc:	2301      	movs	r3, #1
 800f8de:	e000      	b.n	800f8e2 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800f8e0:	2300      	movs	r3, #0
  }
}
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	3728      	adds	r7, #40	@ 0x28
 800f8e6:	46bd      	mov	sp, r7
 800f8e8:	bd80      	pop	{r7, pc}
	...

0800f8ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b088      	sub	sp, #32
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	60f8      	str	r0, [r7, #12]
 800f8f4:	60b9      	str	r1, [r7, #8]
 800f8f6:	603b      	str	r3, [r7, #0]
 800f8f8:	4613      	mov	r3, r2
 800f8fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800f8fc:	f7fc fed4 	bl	800c6a8 <HAL_GetTick>
 800f900:	4602      	mov	r2, r0
 800f902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f904:	1a9b      	subs	r3, r3, r2
 800f906:	683a      	ldr	r2, [r7, #0]
 800f908:	4413      	add	r3, r2
 800f90a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800f90c:	f7fc fecc 	bl	800c6a8 <HAL_GetTick>
 800f910:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800f912:	4b39      	ldr	r3, [pc, #228]	@ (800f9f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	015b      	lsls	r3, r3, #5
 800f918:	0d1b      	lsrs	r3, r3, #20
 800f91a:	69fa      	ldr	r2, [r7, #28]
 800f91c:	fb02 f303 	mul.w	r3, r2, r3
 800f920:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f922:	e054      	b.n	800f9ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f924:	683b      	ldr	r3, [r7, #0]
 800f926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f92a:	d050      	beq.n	800f9ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f92c:	f7fc febc 	bl	800c6a8 <HAL_GetTick>
 800f930:	4602      	mov	r2, r0
 800f932:	69bb      	ldr	r3, [r7, #24]
 800f934:	1ad3      	subs	r3, r2, r3
 800f936:	69fa      	ldr	r2, [r7, #28]
 800f938:	429a      	cmp	r2, r3
 800f93a:	d902      	bls.n	800f942 <SPI_WaitFlagStateUntilTimeout+0x56>
 800f93c:	69fb      	ldr	r3, [r7, #28]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d13d      	bne.n	800f9be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	685a      	ldr	r2, [r3, #4]
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800f950:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	685b      	ldr	r3, [r3, #4]
 800f956:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f95a:	d111      	bne.n	800f980 <SPI_WaitFlagStateUntilTimeout+0x94>
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	689b      	ldr	r3, [r3, #8]
 800f960:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f964:	d004      	beq.n	800f970 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	689b      	ldr	r3, [r3, #8]
 800f96a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f96e:	d107      	bne.n	800f980 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	681a      	ldr	r2, [r3, #0]
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f97e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f984:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f988:	d10f      	bne.n	800f9aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	681a      	ldr	r2, [r3, #0]
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f998:	601a      	str	r2, [r3, #0]
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	681a      	ldr	r2, [r3, #0]
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800f9a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	2201      	movs	r2, #1
 800f9ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	2200      	movs	r2, #0
 800f9b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800f9ba:	2303      	movs	r3, #3
 800f9bc:	e017      	b.n	800f9ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f9be:	697b      	ldr	r3, [r7, #20]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d101      	bne.n	800f9c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800f9c8:	697b      	ldr	r3, [r7, #20]
 800f9ca:	3b01      	subs	r3, #1
 800f9cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	689a      	ldr	r2, [r3, #8]
 800f9d4:	68bb      	ldr	r3, [r7, #8]
 800f9d6:	4013      	ands	r3, r2
 800f9d8:	68ba      	ldr	r2, [r7, #8]
 800f9da:	429a      	cmp	r2, r3
 800f9dc:	bf0c      	ite	eq
 800f9de:	2301      	moveq	r3, #1
 800f9e0:	2300      	movne	r3, #0
 800f9e2:	b2db      	uxtb	r3, r3
 800f9e4:	461a      	mov	r2, r3
 800f9e6:	79fb      	ldrb	r3, [r7, #7]
 800f9e8:	429a      	cmp	r2, r3
 800f9ea:	d19b      	bne.n	800f924 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800f9ec:	2300      	movs	r3, #0
}
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	3720      	adds	r7, #32
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	bd80      	pop	{r7, pc}
 800f9f6:	bf00      	nop
 800f9f8:	20000164 	.word	0x20000164

0800f9fc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800f9fc:	b580      	push	{r7, lr}
 800f9fe:	b086      	sub	sp, #24
 800fa00:	af02      	add	r7, sp, #8
 800fa02:	60f8      	str	r0, [r7, #12]
 800fa04:	60b9      	str	r1, [r7, #8]
 800fa06:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	685b      	ldr	r3, [r3, #4]
 800fa0c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800fa10:	d111      	bne.n	800fa36 <SPI_EndRxTransaction+0x3a>
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	689b      	ldr	r3, [r3, #8]
 800fa16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fa1a:	d004      	beq.n	800fa26 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	689b      	ldr	r3, [r3, #8]
 800fa20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fa24:	d107      	bne.n	800fa36 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	681a      	ldr	r2, [r3, #0]
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800fa34:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	685b      	ldr	r3, [r3, #4]
 800fa3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800fa3e:	d12a      	bne.n	800fa96 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	689b      	ldr	r3, [r3, #8]
 800fa44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fa48:	d012      	beq.n	800fa70 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	9300      	str	r3, [sp, #0]
 800fa4e:	68bb      	ldr	r3, [r7, #8]
 800fa50:	2200      	movs	r2, #0
 800fa52:	2180      	movs	r1, #128	@ 0x80
 800fa54:	68f8      	ldr	r0, [r7, #12]
 800fa56:	f7ff ff49 	bl	800f8ec <SPI_WaitFlagStateUntilTimeout>
 800fa5a:	4603      	mov	r3, r0
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d02d      	beq.n	800fabc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fa64:	f043 0220 	orr.w	r2, r3, #32
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800fa6c:	2303      	movs	r3, #3
 800fa6e:	e026      	b.n	800fabe <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	9300      	str	r3, [sp, #0]
 800fa74:	68bb      	ldr	r3, [r7, #8]
 800fa76:	2200      	movs	r2, #0
 800fa78:	2101      	movs	r1, #1
 800fa7a:	68f8      	ldr	r0, [r7, #12]
 800fa7c:	f7ff ff36 	bl	800f8ec <SPI_WaitFlagStateUntilTimeout>
 800fa80:	4603      	mov	r3, r0
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d01a      	beq.n	800fabc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fa8a:	f043 0220 	orr.w	r2, r3, #32
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800fa92:	2303      	movs	r3, #3
 800fa94:	e013      	b.n	800fabe <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	9300      	str	r3, [sp, #0]
 800fa9a:	68bb      	ldr	r3, [r7, #8]
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	2101      	movs	r1, #1
 800faa0:	68f8      	ldr	r0, [r7, #12]
 800faa2:	f7ff ff23 	bl	800f8ec <SPI_WaitFlagStateUntilTimeout>
 800faa6:	4603      	mov	r3, r0
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d007      	beq.n	800fabc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fab0:	f043 0220 	orr.w	r2, r3, #32
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800fab8:	2303      	movs	r3, #3
 800faba:	e000      	b.n	800fabe <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800fabc:	2300      	movs	r3, #0
}
 800fabe:	4618      	mov	r0, r3
 800fac0:	3710      	adds	r7, #16
 800fac2:	46bd      	mov	sp, r7
 800fac4:	bd80      	pop	{r7, pc}
	...

0800fac8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b088      	sub	sp, #32
 800facc:	af02      	add	r7, sp, #8
 800face:	60f8      	str	r0, [r7, #12]
 800fad0:	60b9      	str	r1, [r7, #8]
 800fad2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	9300      	str	r3, [sp, #0]
 800fad8:	68bb      	ldr	r3, [r7, #8]
 800fada:	2201      	movs	r2, #1
 800fadc:	2102      	movs	r1, #2
 800fade:	68f8      	ldr	r0, [r7, #12]
 800fae0:	f7ff ff04 	bl	800f8ec <SPI_WaitFlagStateUntilTimeout>
 800fae4:	4603      	mov	r3, r0
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d007      	beq.n	800fafa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800faee:	f043 0220 	orr.w	r2, r3, #32
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800faf6:	2303      	movs	r3, #3
 800faf8:	e032      	b.n	800fb60 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800fafa:	4b1b      	ldr	r3, [pc, #108]	@ (800fb68 <SPI_EndRxTxTransaction+0xa0>)
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	4a1b      	ldr	r2, [pc, #108]	@ (800fb6c <SPI_EndRxTxTransaction+0xa4>)
 800fb00:	fba2 2303 	umull	r2, r3, r2, r3
 800fb04:	0d5b      	lsrs	r3, r3, #21
 800fb06:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800fb0a:	fb02 f303 	mul.w	r3, r2, r3
 800fb0e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	685b      	ldr	r3, [r3, #4]
 800fb14:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800fb18:	d112      	bne.n	800fb40 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	9300      	str	r3, [sp, #0]
 800fb1e:	68bb      	ldr	r3, [r7, #8]
 800fb20:	2200      	movs	r2, #0
 800fb22:	2180      	movs	r1, #128	@ 0x80
 800fb24:	68f8      	ldr	r0, [r7, #12]
 800fb26:	f7ff fee1 	bl	800f8ec <SPI_WaitFlagStateUntilTimeout>
 800fb2a:	4603      	mov	r3, r0
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d016      	beq.n	800fb5e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fb34:	f043 0220 	orr.w	r2, r3, #32
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800fb3c:	2303      	movs	r3, #3
 800fb3e:	e00f      	b.n	800fb60 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800fb40:	697b      	ldr	r3, [r7, #20]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d00a      	beq.n	800fb5c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800fb46:	697b      	ldr	r3, [r7, #20]
 800fb48:	3b01      	subs	r3, #1
 800fb4a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	689b      	ldr	r3, [r3, #8]
 800fb52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fb56:	2b80      	cmp	r3, #128	@ 0x80
 800fb58:	d0f2      	beq.n	800fb40 <SPI_EndRxTxTransaction+0x78>
 800fb5a:	e000      	b.n	800fb5e <SPI_EndRxTxTransaction+0x96>
        break;
 800fb5c:	bf00      	nop
  }

  return HAL_OK;
 800fb5e:	2300      	movs	r3, #0
}
 800fb60:	4618      	mov	r0, r3
 800fb62:	3718      	adds	r7, #24
 800fb64:	46bd      	mov	sp, r7
 800fb66:	bd80      	pop	{r7, pc}
 800fb68:	20000164 	.word	0x20000164
 800fb6c:	165e9f81 	.word	0x165e9f81

0800fb70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b082      	sub	sp, #8
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d101      	bne.n	800fb82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800fb7e:	2301      	movs	r3, #1
 800fb80:	e041      	b.n	800fc06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fb88:	b2db      	uxtb	r3, r3
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d106      	bne.n	800fb9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	2200      	movs	r2, #0
 800fb92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800fb96:	6878      	ldr	r0, [r7, #4]
 800fb98:	f7fc fa72 	bl	800c080 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	2202      	movs	r2, #2
 800fba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	681a      	ldr	r2, [r3, #0]
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	3304      	adds	r3, #4
 800fbac:	4619      	mov	r1, r3
 800fbae:	4610      	mov	r0, r2
 800fbb0:	f000 fc62 	bl	8010478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	2201      	movs	r2, #1
 800fbb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	2201      	movs	r2, #1
 800fbc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	2201      	movs	r2, #1
 800fbc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	2201      	movs	r2, #1
 800fbd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	2201      	movs	r2, #1
 800fbd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	2201      	movs	r2, #1
 800fbe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	2201      	movs	r2, #1
 800fbe8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	2201      	movs	r2, #1
 800fbf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	2201      	movs	r2, #1
 800fbf8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	2201      	movs	r2, #1
 800fc00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800fc04:	2300      	movs	r3, #0
}
 800fc06:	4618      	mov	r0, r3
 800fc08:	3708      	adds	r7, #8
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	bd80      	pop	{r7, pc}
	...

0800fc10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800fc10:	b480      	push	{r7}
 800fc12:	b085      	sub	sp, #20
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fc1e:	b2db      	uxtb	r3, r3
 800fc20:	2b01      	cmp	r3, #1
 800fc22:	d001      	beq.n	800fc28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800fc24:	2301      	movs	r3, #1
 800fc26:	e04e      	b.n	800fcc6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	2202      	movs	r2, #2
 800fc2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	68da      	ldr	r2, [r3, #12]
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	f042 0201 	orr.w	r2, r2, #1
 800fc3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	4a23      	ldr	r2, [pc, #140]	@ (800fcd4 <HAL_TIM_Base_Start_IT+0xc4>)
 800fc46:	4293      	cmp	r3, r2
 800fc48:	d022      	beq.n	800fc90 <HAL_TIM_Base_Start_IT+0x80>
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fc52:	d01d      	beq.n	800fc90 <HAL_TIM_Base_Start_IT+0x80>
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	4a1f      	ldr	r2, [pc, #124]	@ (800fcd8 <HAL_TIM_Base_Start_IT+0xc8>)
 800fc5a:	4293      	cmp	r3, r2
 800fc5c:	d018      	beq.n	800fc90 <HAL_TIM_Base_Start_IT+0x80>
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	4a1e      	ldr	r2, [pc, #120]	@ (800fcdc <HAL_TIM_Base_Start_IT+0xcc>)
 800fc64:	4293      	cmp	r3, r2
 800fc66:	d013      	beq.n	800fc90 <HAL_TIM_Base_Start_IT+0x80>
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	4a1c      	ldr	r2, [pc, #112]	@ (800fce0 <HAL_TIM_Base_Start_IT+0xd0>)
 800fc6e:	4293      	cmp	r3, r2
 800fc70:	d00e      	beq.n	800fc90 <HAL_TIM_Base_Start_IT+0x80>
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	4a1b      	ldr	r2, [pc, #108]	@ (800fce4 <HAL_TIM_Base_Start_IT+0xd4>)
 800fc78:	4293      	cmp	r3, r2
 800fc7a:	d009      	beq.n	800fc90 <HAL_TIM_Base_Start_IT+0x80>
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	4a19      	ldr	r2, [pc, #100]	@ (800fce8 <HAL_TIM_Base_Start_IT+0xd8>)
 800fc82:	4293      	cmp	r3, r2
 800fc84:	d004      	beq.n	800fc90 <HAL_TIM_Base_Start_IT+0x80>
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	4a18      	ldr	r2, [pc, #96]	@ (800fcec <HAL_TIM_Base_Start_IT+0xdc>)
 800fc8c:	4293      	cmp	r3, r2
 800fc8e:	d111      	bne.n	800fcb4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	689b      	ldr	r3, [r3, #8]
 800fc96:	f003 0307 	and.w	r3, r3, #7
 800fc9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	2b06      	cmp	r3, #6
 800fca0:	d010      	beq.n	800fcc4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	681a      	ldr	r2, [r3, #0]
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	f042 0201 	orr.w	r2, r2, #1
 800fcb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fcb2:	e007      	b.n	800fcc4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	681a      	ldr	r2, [r3, #0]
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	f042 0201 	orr.w	r2, r2, #1
 800fcc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800fcc4:	2300      	movs	r3, #0
}
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	3714      	adds	r7, #20
 800fcca:	46bd      	mov	sp, r7
 800fccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd0:	4770      	bx	lr
 800fcd2:	bf00      	nop
 800fcd4:	40010000 	.word	0x40010000
 800fcd8:	40000400 	.word	0x40000400
 800fcdc:	40000800 	.word	0x40000800
 800fce0:	40000c00 	.word	0x40000c00
 800fce4:	40010400 	.word	0x40010400
 800fce8:	40014000 	.word	0x40014000
 800fcec:	40001800 	.word	0x40001800

0800fcf0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800fcf0:	b580      	push	{r7, lr}
 800fcf2:	b082      	sub	sp, #8
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d101      	bne.n	800fd02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800fcfe:	2301      	movs	r3, #1
 800fd00:	e041      	b.n	800fd86 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fd08:	b2db      	uxtb	r3, r3
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d106      	bne.n	800fd1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	2200      	movs	r2, #0
 800fd12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800fd16:	6878      	ldr	r0, [r7, #4]
 800fd18:	f000 f839 	bl	800fd8e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	2202      	movs	r2, #2
 800fd20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	681a      	ldr	r2, [r3, #0]
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	3304      	adds	r3, #4
 800fd2c:	4619      	mov	r1, r3
 800fd2e:	4610      	mov	r0, r2
 800fd30:	f000 fba2 	bl	8010478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	2201      	movs	r2, #1
 800fd38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	2201      	movs	r2, #1
 800fd40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	2201      	movs	r2, #1
 800fd48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	2201      	movs	r2, #1
 800fd50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	2201      	movs	r2, #1
 800fd58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	2201      	movs	r2, #1
 800fd60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	2201      	movs	r2, #1
 800fd68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	2201      	movs	r2, #1
 800fd70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	2201      	movs	r2, #1
 800fd78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	2201      	movs	r2, #1
 800fd80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800fd84:	2300      	movs	r3, #0
}
 800fd86:	4618      	mov	r0, r3
 800fd88:	3708      	adds	r7, #8
 800fd8a:	46bd      	mov	sp, r7
 800fd8c:	bd80      	pop	{r7, pc}

0800fd8e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800fd8e:	b480      	push	{r7}
 800fd90:	b083      	sub	sp, #12
 800fd92:	af00      	add	r7, sp, #0
 800fd94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800fd96:	bf00      	nop
 800fd98:	370c      	adds	r7, #12
 800fd9a:	46bd      	mov	sp, r7
 800fd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda0:	4770      	bx	lr
	...

0800fda4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b084      	sub	sp, #16
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	6078      	str	r0, [r7, #4]
 800fdac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800fdae:	683b      	ldr	r3, [r7, #0]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d109      	bne.n	800fdc8 <HAL_TIM_PWM_Start+0x24>
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800fdba:	b2db      	uxtb	r3, r3
 800fdbc:	2b01      	cmp	r3, #1
 800fdbe:	bf14      	ite	ne
 800fdc0:	2301      	movne	r3, #1
 800fdc2:	2300      	moveq	r3, #0
 800fdc4:	b2db      	uxtb	r3, r3
 800fdc6:	e022      	b.n	800fe0e <HAL_TIM_PWM_Start+0x6a>
 800fdc8:	683b      	ldr	r3, [r7, #0]
 800fdca:	2b04      	cmp	r3, #4
 800fdcc:	d109      	bne.n	800fde2 <HAL_TIM_PWM_Start+0x3e>
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800fdd4:	b2db      	uxtb	r3, r3
 800fdd6:	2b01      	cmp	r3, #1
 800fdd8:	bf14      	ite	ne
 800fdda:	2301      	movne	r3, #1
 800fddc:	2300      	moveq	r3, #0
 800fdde:	b2db      	uxtb	r3, r3
 800fde0:	e015      	b.n	800fe0e <HAL_TIM_PWM_Start+0x6a>
 800fde2:	683b      	ldr	r3, [r7, #0]
 800fde4:	2b08      	cmp	r3, #8
 800fde6:	d109      	bne.n	800fdfc <HAL_TIM_PWM_Start+0x58>
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800fdee:	b2db      	uxtb	r3, r3
 800fdf0:	2b01      	cmp	r3, #1
 800fdf2:	bf14      	ite	ne
 800fdf4:	2301      	movne	r3, #1
 800fdf6:	2300      	moveq	r3, #0
 800fdf8:	b2db      	uxtb	r3, r3
 800fdfa:	e008      	b.n	800fe0e <HAL_TIM_PWM_Start+0x6a>
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fe02:	b2db      	uxtb	r3, r3
 800fe04:	2b01      	cmp	r3, #1
 800fe06:	bf14      	ite	ne
 800fe08:	2301      	movne	r3, #1
 800fe0a:	2300      	moveq	r3, #0
 800fe0c:	b2db      	uxtb	r3, r3
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d001      	beq.n	800fe16 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800fe12:	2301      	movs	r3, #1
 800fe14:	e07c      	b.n	800ff10 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fe16:	683b      	ldr	r3, [r7, #0]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d104      	bne.n	800fe26 <HAL_TIM_PWM_Start+0x82>
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	2202      	movs	r2, #2
 800fe20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800fe24:	e013      	b.n	800fe4e <HAL_TIM_PWM_Start+0xaa>
 800fe26:	683b      	ldr	r3, [r7, #0]
 800fe28:	2b04      	cmp	r3, #4
 800fe2a:	d104      	bne.n	800fe36 <HAL_TIM_PWM_Start+0x92>
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	2202      	movs	r2, #2
 800fe30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800fe34:	e00b      	b.n	800fe4e <HAL_TIM_PWM_Start+0xaa>
 800fe36:	683b      	ldr	r3, [r7, #0]
 800fe38:	2b08      	cmp	r3, #8
 800fe3a:	d104      	bne.n	800fe46 <HAL_TIM_PWM_Start+0xa2>
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	2202      	movs	r2, #2
 800fe40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fe44:	e003      	b.n	800fe4e <HAL_TIM_PWM_Start+0xaa>
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	2202      	movs	r2, #2
 800fe4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	2201      	movs	r2, #1
 800fe54:	6839      	ldr	r1, [r7, #0]
 800fe56:	4618      	mov	r0, r3
 800fe58:	f000 fe04 	bl	8010a64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	4a2d      	ldr	r2, [pc, #180]	@ (800ff18 <HAL_TIM_PWM_Start+0x174>)
 800fe62:	4293      	cmp	r3, r2
 800fe64:	d004      	beq.n	800fe70 <HAL_TIM_PWM_Start+0xcc>
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	4a2c      	ldr	r2, [pc, #176]	@ (800ff1c <HAL_TIM_PWM_Start+0x178>)
 800fe6c:	4293      	cmp	r3, r2
 800fe6e:	d101      	bne.n	800fe74 <HAL_TIM_PWM_Start+0xd0>
 800fe70:	2301      	movs	r3, #1
 800fe72:	e000      	b.n	800fe76 <HAL_TIM_PWM_Start+0xd2>
 800fe74:	2300      	movs	r3, #0
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d007      	beq.n	800fe8a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800fe88:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	4a22      	ldr	r2, [pc, #136]	@ (800ff18 <HAL_TIM_PWM_Start+0x174>)
 800fe90:	4293      	cmp	r3, r2
 800fe92:	d022      	beq.n	800feda <HAL_TIM_PWM_Start+0x136>
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fe9c:	d01d      	beq.n	800feda <HAL_TIM_PWM_Start+0x136>
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	4a1f      	ldr	r2, [pc, #124]	@ (800ff20 <HAL_TIM_PWM_Start+0x17c>)
 800fea4:	4293      	cmp	r3, r2
 800fea6:	d018      	beq.n	800feda <HAL_TIM_PWM_Start+0x136>
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	4a1d      	ldr	r2, [pc, #116]	@ (800ff24 <HAL_TIM_PWM_Start+0x180>)
 800feae:	4293      	cmp	r3, r2
 800feb0:	d013      	beq.n	800feda <HAL_TIM_PWM_Start+0x136>
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	4a1c      	ldr	r2, [pc, #112]	@ (800ff28 <HAL_TIM_PWM_Start+0x184>)
 800feb8:	4293      	cmp	r3, r2
 800feba:	d00e      	beq.n	800feda <HAL_TIM_PWM_Start+0x136>
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	4a16      	ldr	r2, [pc, #88]	@ (800ff1c <HAL_TIM_PWM_Start+0x178>)
 800fec2:	4293      	cmp	r3, r2
 800fec4:	d009      	beq.n	800feda <HAL_TIM_PWM_Start+0x136>
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	4a18      	ldr	r2, [pc, #96]	@ (800ff2c <HAL_TIM_PWM_Start+0x188>)
 800fecc:	4293      	cmp	r3, r2
 800fece:	d004      	beq.n	800feda <HAL_TIM_PWM_Start+0x136>
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	4a16      	ldr	r2, [pc, #88]	@ (800ff30 <HAL_TIM_PWM_Start+0x18c>)
 800fed6:	4293      	cmp	r3, r2
 800fed8:	d111      	bne.n	800fefe <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	689b      	ldr	r3, [r3, #8]
 800fee0:	f003 0307 	and.w	r3, r3, #7
 800fee4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	2b06      	cmp	r3, #6
 800feea:	d010      	beq.n	800ff0e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	681a      	ldr	r2, [r3, #0]
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	f042 0201 	orr.w	r2, r2, #1
 800fefa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fefc:	e007      	b.n	800ff0e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	681a      	ldr	r2, [r3, #0]
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	f042 0201 	orr.w	r2, r2, #1
 800ff0c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ff0e:	2300      	movs	r3, #0
}
 800ff10:	4618      	mov	r0, r3
 800ff12:	3710      	adds	r7, #16
 800ff14:	46bd      	mov	sp, r7
 800ff16:	bd80      	pop	{r7, pc}
 800ff18:	40010000 	.word	0x40010000
 800ff1c:	40010400 	.word	0x40010400
 800ff20:	40000400 	.word	0x40000400
 800ff24:	40000800 	.word	0x40000800
 800ff28:	40000c00 	.word	0x40000c00
 800ff2c:	40014000 	.word	0x40014000
 800ff30:	40001800 	.word	0x40001800

0800ff34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b084      	sub	sp, #16
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	68db      	ldr	r3, [r3, #12]
 800ff42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	691b      	ldr	r3, [r3, #16]
 800ff4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ff4c:	68bb      	ldr	r3, [r7, #8]
 800ff4e:	f003 0302 	and.w	r3, r3, #2
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d020      	beq.n	800ff98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	f003 0302 	and.w	r3, r3, #2
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d01b      	beq.n	800ff98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	f06f 0202 	mvn.w	r2, #2
 800ff68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	2201      	movs	r2, #1
 800ff6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	699b      	ldr	r3, [r3, #24]
 800ff76:	f003 0303 	and.w	r3, r3, #3
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d003      	beq.n	800ff86 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ff7e:	6878      	ldr	r0, [r7, #4]
 800ff80:	f000 fa5b 	bl	801043a <HAL_TIM_IC_CaptureCallback>
 800ff84:	e005      	b.n	800ff92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ff86:	6878      	ldr	r0, [r7, #4]
 800ff88:	f000 fa4d 	bl	8010426 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ff8c:	6878      	ldr	r0, [r7, #4]
 800ff8e:	f000 fa5e 	bl	801044e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	2200      	movs	r2, #0
 800ff96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ff98:	68bb      	ldr	r3, [r7, #8]
 800ff9a:	f003 0304 	and.w	r3, r3, #4
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d020      	beq.n	800ffe4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	f003 0304 	and.w	r3, r3, #4
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d01b      	beq.n	800ffe4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	f06f 0204 	mvn.w	r2, #4
 800ffb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	2202      	movs	r2, #2
 800ffba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	699b      	ldr	r3, [r3, #24]
 800ffc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d003      	beq.n	800ffd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ffca:	6878      	ldr	r0, [r7, #4]
 800ffcc:	f000 fa35 	bl	801043a <HAL_TIM_IC_CaptureCallback>
 800ffd0:	e005      	b.n	800ffde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ffd2:	6878      	ldr	r0, [r7, #4]
 800ffd4:	f000 fa27 	bl	8010426 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ffd8:	6878      	ldr	r0, [r7, #4]
 800ffda:	f000 fa38 	bl	801044e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	2200      	movs	r2, #0
 800ffe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ffe4:	68bb      	ldr	r3, [r7, #8]
 800ffe6:	f003 0308 	and.w	r3, r3, #8
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d020      	beq.n	8010030 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	f003 0308 	and.w	r3, r3, #8
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d01b      	beq.n	8010030 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	f06f 0208 	mvn.w	r2, #8
 8010000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	2204      	movs	r2, #4
 8010006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	69db      	ldr	r3, [r3, #28]
 801000e:	f003 0303 	and.w	r3, r3, #3
 8010012:	2b00      	cmp	r3, #0
 8010014:	d003      	beq.n	801001e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010016:	6878      	ldr	r0, [r7, #4]
 8010018:	f000 fa0f 	bl	801043a <HAL_TIM_IC_CaptureCallback>
 801001c:	e005      	b.n	801002a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801001e:	6878      	ldr	r0, [r7, #4]
 8010020:	f000 fa01 	bl	8010426 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010024:	6878      	ldr	r0, [r7, #4]
 8010026:	f000 fa12 	bl	801044e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	2200      	movs	r2, #0
 801002e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8010030:	68bb      	ldr	r3, [r7, #8]
 8010032:	f003 0310 	and.w	r3, r3, #16
 8010036:	2b00      	cmp	r3, #0
 8010038:	d020      	beq.n	801007c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	f003 0310 	and.w	r3, r3, #16
 8010040:	2b00      	cmp	r3, #0
 8010042:	d01b      	beq.n	801007c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	f06f 0210 	mvn.w	r2, #16
 801004c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	2208      	movs	r2, #8
 8010052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	69db      	ldr	r3, [r3, #28]
 801005a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801005e:	2b00      	cmp	r3, #0
 8010060:	d003      	beq.n	801006a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010062:	6878      	ldr	r0, [r7, #4]
 8010064:	f000 f9e9 	bl	801043a <HAL_TIM_IC_CaptureCallback>
 8010068:	e005      	b.n	8010076 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801006a:	6878      	ldr	r0, [r7, #4]
 801006c:	f000 f9db 	bl	8010426 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010070:	6878      	ldr	r0, [r7, #4]
 8010072:	f000 f9ec 	bl	801044e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	2200      	movs	r2, #0
 801007a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 801007c:	68bb      	ldr	r3, [r7, #8]
 801007e:	f003 0301 	and.w	r3, r3, #1
 8010082:	2b00      	cmp	r3, #0
 8010084:	d00c      	beq.n	80100a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	f003 0301 	and.w	r3, r3, #1
 801008c:	2b00      	cmp	r3, #0
 801008e:	d007      	beq.n	80100a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	f06f 0201 	mvn.w	r2, #1
 8010098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801009a:	6878      	ldr	r0, [r7, #4]
 801009c:	f7fb fb34 	bl	800b708 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80100a0:	68bb      	ldr	r3, [r7, #8]
 80100a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d00c      	beq.n	80100c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d007      	beq.n	80100c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80100bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80100be:	6878      	ldr	r0, [r7, #4]
 80100c0:	f000 fdce 	bl	8010c60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80100c4:	68bb      	ldr	r3, [r7, #8]
 80100c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d00c      	beq.n	80100e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d007      	beq.n	80100e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80100e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80100e2:	6878      	ldr	r0, [r7, #4]
 80100e4:	f000 f9bd 	bl	8010462 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80100e8:	68bb      	ldr	r3, [r7, #8]
 80100ea:	f003 0320 	and.w	r3, r3, #32
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d00c      	beq.n	801010c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	f003 0320 	and.w	r3, r3, #32
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d007      	beq.n	801010c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	f06f 0220 	mvn.w	r2, #32
 8010104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010106:	6878      	ldr	r0, [r7, #4]
 8010108:	f000 fda0 	bl	8010c4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801010c:	bf00      	nop
 801010e:	3710      	adds	r7, #16
 8010110:	46bd      	mov	sp, r7
 8010112:	bd80      	pop	{r7, pc}

08010114 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010114:	b580      	push	{r7, lr}
 8010116:	b086      	sub	sp, #24
 8010118:	af00      	add	r7, sp, #0
 801011a:	60f8      	str	r0, [r7, #12]
 801011c:	60b9      	str	r1, [r7, #8]
 801011e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010120:	2300      	movs	r3, #0
 8010122:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801012a:	2b01      	cmp	r3, #1
 801012c:	d101      	bne.n	8010132 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801012e:	2302      	movs	r3, #2
 8010130:	e0ae      	b.n	8010290 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	2201      	movs	r2, #1
 8010136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	2b0c      	cmp	r3, #12
 801013e:	f200 809f 	bhi.w	8010280 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8010142:	a201      	add	r2, pc, #4	@ (adr r2, 8010148 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8010144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010148:	0801017d 	.word	0x0801017d
 801014c:	08010281 	.word	0x08010281
 8010150:	08010281 	.word	0x08010281
 8010154:	08010281 	.word	0x08010281
 8010158:	080101bd 	.word	0x080101bd
 801015c:	08010281 	.word	0x08010281
 8010160:	08010281 	.word	0x08010281
 8010164:	08010281 	.word	0x08010281
 8010168:	080101ff 	.word	0x080101ff
 801016c:	08010281 	.word	0x08010281
 8010170:	08010281 	.word	0x08010281
 8010174:	08010281 	.word	0x08010281
 8010178:	0801023f 	.word	0x0801023f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	68b9      	ldr	r1, [r7, #8]
 8010182:	4618      	mov	r0, r3
 8010184:	f000 fa24 	bl	80105d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	699a      	ldr	r2, [r3, #24]
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	f042 0208 	orr.w	r2, r2, #8
 8010196:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	699a      	ldr	r2, [r3, #24]
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	f022 0204 	bic.w	r2, r2, #4
 80101a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	6999      	ldr	r1, [r3, #24]
 80101ae:	68bb      	ldr	r3, [r7, #8]
 80101b0:	691a      	ldr	r2, [r3, #16]
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	430a      	orrs	r2, r1
 80101b8:	619a      	str	r2, [r3, #24]
      break;
 80101ba:	e064      	b.n	8010286 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	68b9      	ldr	r1, [r7, #8]
 80101c2:	4618      	mov	r0, r3
 80101c4:	f000 fa74 	bl	80106b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	699a      	ldr	r2, [r3, #24]
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80101d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	699a      	ldr	r2, [r3, #24]
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80101e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	6999      	ldr	r1, [r3, #24]
 80101ee:	68bb      	ldr	r3, [r7, #8]
 80101f0:	691b      	ldr	r3, [r3, #16]
 80101f2:	021a      	lsls	r2, r3, #8
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	430a      	orrs	r2, r1
 80101fa:	619a      	str	r2, [r3, #24]
      break;
 80101fc:	e043      	b.n	8010286 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	68b9      	ldr	r1, [r7, #8]
 8010204:	4618      	mov	r0, r3
 8010206:	f000 fac9 	bl	801079c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	69da      	ldr	r2, [r3, #28]
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	f042 0208 	orr.w	r2, r2, #8
 8010218:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	69da      	ldr	r2, [r3, #28]
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	f022 0204 	bic.w	r2, r2, #4
 8010228:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	69d9      	ldr	r1, [r3, #28]
 8010230:	68bb      	ldr	r3, [r7, #8]
 8010232:	691a      	ldr	r2, [r3, #16]
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	430a      	orrs	r2, r1
 801023a:	61da      	str	r2, [r3, #28]
      break;
 801023c:	e023      	b.n	8010286 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	68b9      	ldr	r1, [r7, #8]
 8010244:	4618      	mov	r0, r3
 8010246:	f000 fb1d 	bl	8010884 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	69da      	ldr	r2, [r3, #28]
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010258:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	69da      	ldr	r2, [r3, #28]
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8010268:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	69d9      	ldr	r1, [r3, #28]
 8010270:	68bb      	ldr	r3, [r7, #8]
 8010272:	691b      	ldr	r3, [r3, #16]
 8010274:	021a      	lsls	r2, r3, #8
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	430a      	orrs	r2, r1
 801027c:	61da      	str	r2, [r3, #28]
      break;
 801027e:	e002      	b.n	8010286 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8010280:	2301      	movs	r3, #1
 8010282:	75fb      	strb	r3, [r7, #23]
      break;
 8010284:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	2200      	movs	r2, #0
 801028a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801028e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010290:	4618      	mov	r0, r3
 8010292:	3718      	adds	r7, #24
 8010294:	46bd      	mov	sp, r7
 8010296:	bd80      	pop	{r7, pc}

08010298 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8010298:	b580      	push	{r7, lr}
 801029a:	b084      	sub	sp, #16
 801029c:	af00      	add	r7, sp, #0
 801029e:	6078      	str	r0, [r7, #4]
 80102a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80102a2:	2300      	movs	r3, #0
 80102a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80102ac:	2b01      	cmp	r3, #1
 80102ae:	d101      	bne.n	80102b4 <HAL_TIM_ConfigClockSource+0x1c>
 80102b0:	2302      	movs	r3, #2
 80102b2:	e0b4      	b.n	801041e <HAL_TIM_ConfigClockSource+0x186>
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	2201      	movs	r2, #1
 80102b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	2202      	movs	r2, #2
 80102c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	689b      	ldr	r3, [r3, #8]
 80102ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80102cc:	68bb      	ldr	r3, [r7, #8]
 80102ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80102d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80102d4:	68bb      	ldr	r3, [r7, #8]
 80102d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80102da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	68ba      	ldr	r2, [r7, #8]
 80102e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80102e4:	683b      	ldr	r3, [r7, #0]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80102ec:	d03e      	beq.n	801036c <HAL_TIM_ConfigClockSource+0xd4>
 80102ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80102f2:	f200 8087 	bhi.w	8010404 <HAL_TIM_ConfigClockSource+0x16c>
 80102f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80102fa:	f000 8086 	beq.w	801040a <HAL_TIM_ConfigClockSource+0x172>
 80102fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010302:	d87f      	bhi.n	8010404 <HAL_TIM_ConfigClockSource+0x16c>
 8010304:	2b70      	cmp	r3, #112	@ 0x70
 8010306:	d01a      	beq.n	801033e <HAL_TIM_ConfigClockSource+0xa6>
 8010308:	2b70      	cmp	r3, #112	@ 0x70
 801030a:	d87b      	bhi.n	8010404 <HAL_TIM_ConfigClockSource+0x16c>
 801030c:	2b60      	cmp	r3, #96	@ 0x60
 801030e:	d050      	beq.n	80103b2 <HAL_TIM_ConfigClockSource+0x11a>
 8010310:	2b60      	cmp	r3, #96	@ 0x60
 8010312:	d877      	bhi.n	8010404 <HAL_TIM_ConfigClockSource+0x16c>
 8010314:	2b50      	cmp	r3, #80	@ 0x50
 8010316:	d03c      	beq.n	8010392 <HAL_TIM_ConfigClockSource+0xfa>
 8010318:	2b50      	cmp	r3, #80	@ 0x50
 801031a:	d873      	bhi.n	8010404 <HAL_TIM_ConfigClockSource+0x16c>
 801031c:	2b40      	cmp	r3, #64	@ 0x40
 801031e:	d058      	beq.n	80103d2 <HAL_TIM_ConfigClockSource+0x13a>
 8010320:	2b40      	cmp	r3, #64	@ 0x40
 8010322:	d86f      	bhi.n	8010404 <HAL_TIM_ConfigClockSource+0x16c>
 8010324:	2b30      	cmp	r3, #48	@ 0x30
 8010326:	d064      	beq.n	80103f2 <HAL_TIM_ConfigClockSource+0x15a>
 8010328:	2b30      	cmp	r3, #48	@ 0x30
 801032a:	d86b      	bhi.n	8010404 <HAL_TIM_ConfigClockSource+0x16c>
 801032c:	2b20      	cmp	r3, #32
 801032e:	d060      	beq.n	80103f2 <HAL_TIM_ConfigClockSource+0x15a>
 8010330:	2b20      	cmp	r3, #32
 8010332:	d867      	bhi.n	8010404 <HAL_TIM_ConfigClockSource+0x16c>
 8010334:	2b00      	cmp	r3, #0
 8010336:	d05c      	beq.n	80103f2 <HAL_TIM_ConfigClockSource+0x15a>
 8010338:	2b10      	cmp	r3, #16
 801033a:	d05a      	beq.n	80103f2 <HAL_TIM_ConfigClockSource+0x15a>
 801033c:	e062      	b.n	8010404 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8010342:	683b      	ldr	r3, [r7, #0]
 8010344:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8010346:	683b      	ldr	r3, [r7, #0]
 8010348:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801034a:	683b      	ldr	r3, [r7, #0]
 801034c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801034e:	f000 fb69 	bl	8010a24 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	689b      	ldr	r3, [r3, #8]
 8010358:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801035a:	68bb      	ldr	r3, [r7, #8]
 801035c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8010360:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	68ba      	ldr	r2, [r7, #8]
 8010368:	609a      	str	r2, [r3, #8]
      break;
 801036a:	e04f      	b.n	801040c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8010370:	683b      	ldr	r3, [r7, #0]
 8010372:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8010374:	683b      	ldr	r3, [r7, #0]
 8010376:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8010378:	683b      	ldr	r3, [r7, #0]
 801037a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801037c:	f000 fb52 	bl	8010a24 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	689a      	ldr	r2, [r3, #8]
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801038e:	609a      	str	r2, [r3, #8]
      break;
 8010390:	e03c      	b.n	801040c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8010396:	683b      	ldr	r3, [r7, #0]
 8010398:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801039a:	683b      	ldr	r3, [r7, #0]
 801039c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801039e:	461a      	mov	r2, r3
 80103a0:	f000 fac6 	bl	8010930 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	2150      	movs	r1, #80	@ 0x50
 80103aa:	4618      	mov	r0, r3
 80103ac:	f000 fb1f 	bl	80109ee <TIM_ITRx_SetConfig>
      break;
 80103b0:	e02c      	b.n	801040c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80103b6:	683b      	ldr	r3, [r7, #0]
 80103b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80103ba:	683b      	ldr	r3, [r7, #0]
 80103bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80103be:	461a      	mov	r2, r3
 80103c0:	f000 fae5 	bl	801098e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	2160      	movs	r1, #96	@ 0x60
 80103ca:	4618      	mov	r0, r3
 80103cc:	f000 fb0f 	bl	80109ee <TIM_ITRx_SetConfig>
      break;
 80103d0:	e01c      	b.n	801040c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80103d6:	683b      	ldr	r3, [r7, #0]
 80103d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80103da:	683b      	ldr	r3, [r7, #0]
 80103dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80103de:	461a      	mov	r2, r3
 80103e0:	f000 faa6 	bl	8010930 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	2140      	movs	r1, #64	@ 0x40
 80103ea:	4618      	mov	r0, r3
 80103ec:	f000 faff 	bl	80109ee <TIM_ITRx_SetConfig>
      break;
 80103f0:	e00c      	b.n	801040c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	681a      	ldr	r2, [r3, #0]
 80103f6:	683b      	ldr	r3, [r7, #0]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	4619      	mov	r1, r3
 80103fc:	4610      	mov	r0, r2
 80103fe:	f000 faf6 	bl	80109ee <TIM_ITRx_SetConfig>
      break;
 8010402:	e003      	b.n	801040c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8010404:	2301      	movs	r3, #1
 8010406:	73fb      	strb	r3, [r7, #15]
      break;
 8010408:	e000      	b.n	801040c <HAL_TIM_ConfigClockSource+0x174>
      break;
 801040a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	2201      	movs	r2, #1
 8010410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	2200      	movs	r2, #0
 8010418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801041c:	7bfb      	ldrb	r3, [r7, #15]
}
 801041e:	4618      	mov	r0, r3
 8010420:	3710      	adds	r7, #16
 8010422:	46bd      	mov	sp, r7
 8010424:	bd80      	pop	{r7, pc}

08010426 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010426:	b480      	push	{r7}
 8010428:	b083      	sub	sp, #12
 801042a:	af00      	add	r7, sp, #0
 801042c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801042e:	bf00      	nop
 8010430:	370c      	adds	r7, #12
 8010432:	46bd      	mov	sp, r7
 8010434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010438:	4770      	bx	lr

0801043a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801043a:	b480      	push	{r7}
 801043c:	b083      	sub	sp, #12
 801043e:	af00      	add	r7, sp, #0
 8010440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010442:	bf00      	nop
 8010444:	370c      	adds	r7, #12
 8010446:	46bd      	mov	sp, r7
 8010448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801044c:	4770      	bx	lr

0801044e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801044e:	b480      	push	{r7}
 8010450:	b083      	sub	sp, #12
 8010452:	af00      	add	r7, sp, #0
 8010454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010456:	bf00      	nop
 8010458:	370c      	adds	r7, #12
 801045a:	46bd      	mov	sp, r7
 801045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010460:	4770      	bx	lr

08010462 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010462:	b480      	push	{r7}
 8010464:	b083      	sub	sp, #12
 8010466:	af00      	add	r7, sp, #0
 8010468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801046a:	bf00      	nop
 801046c:	370c      	adds	r7, #12
 801046e:	46bd      	mov	sp, r7
 8010470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010474:	4770      	bx	lr
	...

08010478 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010478:	b480      	push	{r7}
 801047a:	b085      	sub	sp, #20
 801047c:	af00      	add	r7, sp, #0
 801047e:	6078      	str	r0, [r7, #4]
 8010480:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	4a46      	ldr	r2, [pc, #280]	@ (80105a4 <TIM_Base_SetConfig+0x12c>)
 801048c:	4293      	cmp	r3, r2
 801048e:	d013      	beq.n	80104b8 <TIM_Base_SetConfig+0x40>
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010496:	d00f      	beq.n	80104b8 <TIM_Base_SetConfig+0x40>
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	4a43      	ldr	r2, [pc, #268]	@ (80105a8 <TIM_Base_SetConfig+0x130>)
 801049c:	4293      	cmp	r3, r2
 801049e:	d00b      	beq.n	80104b8 <TIM_Base_SetConfig+0x40>
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	4a42      	ldr	r2, [pc, #264]	@ (80105ac <TIM_Base_SetConfig+0x134>)
 80104a4:	4293      	cmp	r3, r2
 80104a6:	d007      	beq.n	80104b8 <TIM_Base_SetConfig+0x40>
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	4a41      	ldr	r2, [pc, #260]	@ (80105b0 <TIM_Base_SetConfig+0x138>)
 80104ac:	4293      	cmp	r3, r2
 80104ae:	d003      	beq.n	80104b8 <TIM_Base_SetConfig+0x40>
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	4a40      	ldr	r2, [pc, #256]	@ (80105b4 <TIM_Base_SetConfig+0x13c>)
 80104b4:	4293      	cmp	r3, r2
 80104b6:	d108      	bne.n	80104ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80104be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80104c0:	683b      	ldr	r3, [r7, #0]
 80104c2:	685b      	ldr	r3, [r3, #4]
 80104c4:	68fa      	ldr	r2, [r7, #12]
 80104c6:	4313      	orrs	r3, r2
 80104c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	4a35      	ldr	r2, [pc, #212]	@ (80105a4 <TIM_Base_SetConfig+0x12c>)
 80104ce:	4293      	cmp	r3, r2
 80104d0:	d02b      	beq.n	801052a <TIM_Base_SetConfig+0xb2>
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80104d8:	d027      	beq.n	801052a <TIM_Base_SetConfig+0xb2>
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	4a32      	ldr	r2, [pc, #200]	@ (80105a8 <TIM_Base_SetConfig+0x130>)
 80104de:	4293      	cmp	r3, r2
 80104e0:	d023      	beq.n	801052a <TIM_Base_SetConfig+0xb2>
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	4a31      	ldr	r2, [pc, #196]	@ (80105ac <TIM_Base_SetConfig+0x134>)
 80104e6:	4293      	cmp	r3, r2
 80104e8:	d01f      	beq.n	801052a <TIM_Base_SetConfig+0xb2>
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	4a30      	ldr	r2, [pc, #192]	@ (80105b0 <TIM_Base_SetConfig+0x138>)
 80104ee:	4293      	cmp	r3, r2
 80104f0:	d01b      	beq.n	801052a <TIM_Base_SetConfig+0xb2>
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	4a2f      	ldr	r2, [pc, #188]	@ (80105b4 <TIM_Base_SetConfig+0x13c>)
 80104f6:	4293      	cmp	r3, r2
 80104f8:	d017      	beq.n	801052a <TIM_Base_SetConfig+0xb2>
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	4a2e      	ldr	r2, [pc, #184]	@ (80105b8 <TIM_Base_SetConfig+0x140>)
 80104fe:	4293      	cmp	r3, r2
 8010500:	d013      	beq.n	801052a <TIM_Base_SetConfig+0xb2>
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	4a2d      	ldr	r2, [pc, #180]	@ (80105bc <TIM_Base_SetConfig+0x144>)
 8010506:	4293      	cmp	r3, r2
 8010508:	d00f      	beq.n	801052a <TIM_Base_SetConfig+0xb2>
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	4a2c      	ldr	r2, [pc, #176]	@ (80105c0 <TIM_Base_SetConfig+0x148>)
 801050e:	4293      	cmp	r3, r2
 8010510:	d00b      	beq.n	801052a <TIM_Base_SetConfig+0xb2>
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	4a2b      	ldr	r2, [pc, #172]	@ (80105c4 <TIM_Base_SetConfig+0x14c>)
 8010516:	4293      	cmp	r3, r2
 8010518:	d007      	beq.n	801052a <TIM_Base_SetConfig+0xb2>
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	4a2a      	ldr	r2, [pc, #168]	@ (80105c8 <TIM_Base_SetConfig+0x150>)
 801051e:	4293      	cmp	r3, r2
 8010520:	d003      	beq.n	801052a <TIM_Base_SetConfig+0xb2>
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	4a29      	ldr	r2, [pc, #164]	@ (80105cc <TIM_Base_SetConfig+0x154>)
 8010526:	4293      	cmp	r3, r2
 8010528:	d108      	bne.n	801053c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010530:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010532:	683b      	ldr	r3, [r7, #0]
 8010534:	68db      	ldr	r3, [r3, #12]
 8010536:	68fa      	ldr	r2, [r7, #12]
 8010538:	4313      	orrs	r3, r2
 801053a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8010542:	683b      	ldr	r3, [r7, #0]
 8010544:	695b      	ldr	r3, [r3, #20]
 8010546:	4313      	orrs	r3, r2
 8010548:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	68fa      	ldr	r2, [r7, #12]
 801054e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010550:	683b      	ldr	r3, [r7, #0]
 8010552:	689a      	ldr	r2, [r3, #8]
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010558:	683b      	ldr	r3, [r7, #0]
 801055a:	681a      	ldr	r2, [r3, #0]
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	4a10      	ldr	r2, [pc, #64]	@ (80105a4 <TIM_Base_SetConfig+0x12c>)
 8010564:	4293      	cmp	r3, r2
 8010566:	d003      	beq.n	8010570 <TIM_Base_SetConfig+0xf8>
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	4a12      	ldr	r2, [pc, #72]	@ (80105b4 <TIM_Base_SetConfig+0x13c>)
 801056c:	4293      	cmp	r3, r2
 801056e:	d103      	bne.n	8010578 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010570:	683b      	ldr	r3, [r7, #0]
 8010572:	691a      	ldr	r2, [r3, #16]
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	2201      	movs	r2, #1
 801057c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	691b      	ldr	r3, [r3, #16]
 8010582:	f003 0301 	and.w	r3, r3, #1
 8010586:	2b01      	cmp	r3, #1
 8010588:	d105      	bne.n	8010596 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	691b      	ldr	r3, [r3, #16]
 801058e:	f023 0201 	bic.w	r2, r3, #1
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	611a      	str	r2, [r3, #16]
  }
}
 8010596:	bf00      	nop
 8010598:	3714      	adds	r7, #20
 801059a:	46bd      	mov	sp, r7
 801059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a0:	4770      	bx	lr
 80105a2:	bf00      	nop
 80105a4:	40010000 	.word	0x40010000
 80105a8:	40000400 	.word	0x40000400
 80105ac:	40000800 	.word	0x40000800
 80105b0:	40000c00 	.word	0x40000c00
 80105b4:	40010400 	.word	0x40010400
 80105b8:	40014000 	.word	0x40014000
 80105bc:	40014400 	.word	0x40014400
 80105c0:	40014800 	.word	0x40014800
 80105c4:	40001800 	.word	0x40001800
 80105c8:	40001c00 	.word	0x40001c00
 80105cc:	40002000 	.word	0x40002000

080105d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80105d0:	b480      	push	{r7}
 80105d2:	b087      	sub	sp, #28
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	6078      	str	r0, [r7, #4]
 80105d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	6a1b      	ldr	r3, [r3, #32]
 80105de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	6a1b      	ldr	r3, [r3, #32]
 80105e4:	f023 0201 	bic.w	r2, r3, #1
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	685b      	ldr	r3, [r3, #4]
 80105f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	699b      	ldr	r3, [r3, #24]
 80105f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80105fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	f023 0303 	bic.w	r3, r3, #3
 8010606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010608:	683b      	ldr	r3, [r7, #0]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	68fa      	ldr	r2, [r7, #12]
 801060e:	4313      	orrs	r3, r2
 8010610:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010612:	697b      	ldr	r3, [r7, #20]
 8010614:	f023 0302 	bic.w	r3, r3, #2
 8010618:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801061a:	683b      	ldr	r3, [r7, #0]
 801061c:	689b      	ldr	r3, [r3, #8]
 801061e:	697a      	ldr	r2, [r7, #20]
 8010620:	4313      	orrs	r3, r2
 8010622:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	4a20      	ldr	r2, [pc, #128]	@ (80106a8 <TIM_OC1_SetConfig+0xd8>)
 8010628:	4293      	cmp	r3, r2
 801062a:	d003      	beq.n	8010634 <TIM_OC1_SetConfig+0x64>
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	4a1f      	ldr	r2, [pc, #124]	@ (80106ac <TIM_OC1_SetConfig+0xdc>)
 8010630:	4293      	cmp	r3, r2
 8010632:	d10c      	bne.n	801064e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010634:	697b      	ldr	r3, [r7, #20]
 8010636:	f023 0308 	bic.w	r3, r3, #8
 801063a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801063c:	683b      	ldr	r3, [r7, #0]
 801063e:	68db      	ldr	r3, [r3, #12]
 8010640:	697a      	ldr	r2, [r7, #20]
 8010642:	4313      	orrs	r3, r2
 8010644:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010646:	697b      	ldr	r3, [r7, #20]
 8010648:	f023 0304 	bic.w	r3, r3, #4
 801064c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	4a15      	ldr	r2, [pc, #84]	@ (80106a8 <TIM_OC1_SetConfig+0xd8>)
 8010652:	4293      	cmp	r3, r2
 8010654:	d003      	beq.n	801065e <TIM_OC1_SetConfig+0x8e>
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	4a14      	ldr	r2, [pc, #80]	@ (80106ac <TIM_OC1_SetConfig+0xdc>)
 801065a:	4293      	cmp	r3, r2
 801065c:	d111      	bne.n	8010682 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801065e:	693b      	ldr	r3, [r7, #16]
 8010660:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010664:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010666:	693b      	ldr	r3, [r7, #16]
 8010668:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801066c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801066e:	683b      	ldr	r3, [r7, #0]
 8010670:	695b      	ldr	r3, [r3, #20]
 8010672:	693a      	ldr	r2, [r7, #16]
 8010674:	4313      	orrs	r3, r2
 8010676:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010678:	683b      	ldr	r3, [r7, #0]
 801067a:	699b      	ldr	r3, [r3, #24]
 801067c:	693a      	ldr	r2, [r7, #16]
 801067e:	4313      	orrs	r3, r2
 8010680:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	693a      	ldr	r2, [r7, #16]
 8010686:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	68fa      	ldr	r2, [r7, #12]
 801068c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801068e:	683b      	ldr	r3, [r7, #0]
 8010690:	685a      	ldr	r2, [r3, #4]
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	697a      	ldr	r2, [r7, #20]
 801069a:	621a      	str	r2, [r3, #32]
}
 801069c:	bf00      	nop
 801069e:	371c      	adds	r7, #28
 80106a0:	46bd      	mov	sp, r7
 80106a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a6:	4770      	bx	lr
 80106a8:	40010000 	.word	0x40010000
 80106ac:	40010400 	.word	0x40010400

080106b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80106b0:	b480      	push	{r7}
 80106b2:	b087      	sub	sp, #28
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
 80106b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	6a1b      	ldr	r3, [r3, #32]
 80106be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	6a1b      	ldr	r3, [r3, #32]
 80106c4:	f023 0210 	bic.w	r2, r3, #16
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	685b      	ldr	r3, [r3, #4]
 80106d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	699b      	ldr	r3, [r3, #24]
 80106d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80106de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80106e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80106e8:	683b      	ldr	r3, [r7, #0]
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	021b      	lsls	r3, r3, #8
 80106ee:	68fa      	ldr	r2, [r7, #12]
 80106f0:	4313      	orrs	r3, r2
 80106f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80106f4:	697b      	ldr	r3, [r7, #20]
 80106f6:	f023 0320 	bic.w	r3, r3, #32
 80106fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80106fc:	683b      	ldr	r3, [r7, #0]
 80106fe:	689b      	ldr	r3, [r3, #8]
 8010700:	011b      	lsls	r3, r3, #4
 8010702:	697a      	ldr	r2, [r7, #20]
 8010704:	4313      	orrs	r3, r2
 8010706:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	4a22      	ldr	r2, [pc, #136]	@ (8010794 <TIM_OC2_SetConfig+0xe4>)
 801070c:	4293      	cmp	r3, r2
 801070e:	d003      	beq.n	8010718 <TIM_OC2_SetConfig+0x68>
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	4a21      	ldr	r2, [pc, #132]	@ (8010798 <TIM_OC2_SetConfig+0xe8>)
 8010714:	4293      	cmp	r3, r2
 8010716:	d10d      	bne.n	8010734 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010718:	697b      	ldr	r3, [r7, #20]
 801071a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801071e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010720:	683b      	ldr	r3, [r7, #0]
 8010722:	68db      	ldr	r3, [r3, #12]
 8010724:	011b      	lsls	r3, r3, #4
 8010726:	697a      	ldr	r2, [r7, #20]
 8010728:	4313      	orrs	r3, r2
 801072a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801072c:	697b      	ldr	r3, [r7, #20]
 801072e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010732:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	4a17      	ldr	r2, [pc, #92]	@ (8010794 <TIM_OC2_SetConfig+0xe4>)
 8010738:	4293      	cmp	r3, r2
 801073a:	d003      	beq.n	8010744 <TIM_OC2_SetConfig+0x94>
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	4a16      	ldr	r2, [pc, #88]	@ (8010798 <TIM_OC2_SetConfig+0xe8>)
 8010740:	4293      	cmp	r3, r2
 8010742:	d113      	bne.n	801076c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010744:	693b      	ldr	r3, [r7, #16]
 8010746:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801074a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801074c:	693b      	ldr	r3, [r7, #16]
 801074e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010752:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010754:	683b      	ldr	r3, [r7, #0]
 8010756:	695b      	ldr	r3, [r3, #20]
 8010758:	009b      	lsls	r3, r3, #2
 801075a:	693a      	ldr	r2, [r7, #16]
 801075c:	4313      	orrs	r3, r2
 801075e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010760:	683b      	ldr	r3, [r7, #0]
 8010762:	699b      	ldr	r3, [r3, #24]
 8010764:	009b      	lsls	r3, r3, #2
 8010766:	693a      	ldr	r2, [r7, #16]
 8010768:	4313      	orrs	r3, r2
 801076a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	693a      	ldr	r2, [r7, #16]
 8010770:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	68fa      	ldr	r2, [r7, #12]
 8010776:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010778:	683b      	ldr	r3, [r7, #0]
 801077a:	685a      	ldr	r2, [r3, #4]
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	697a      	ldr	r2, [r7, #20]
 8010784:	621a      	str	r2, [r3, #32]
}
 8010786:	bf00      	nop
 8010788:	371c      	adds	r7, #28
 801078a:	46bd      	mov	sp, r7
 801078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010790:	4770      	bx	lr
 8010792:	bf00      	nop
 8010794:	40010000 	.word	0x40010000
 8010798:	40010400 	.word	0x40010400

0801079c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801079c:	b480      	push	{r7}
 801079e:	b087      	sub	sp, #28
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	6078      	str	r0, [r7, #4]
 80107a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	6a1b      	ldr	r3, [r3, #32]
 80107aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	6a1b      	ldr	r3, [r3, #32]
 80107b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	685b      	ldr	r3, [r3, #4]
 80107bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	69db      	ldr	r3, [r3, #28]
 80107c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80107ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	f023 0303 	bic.w	r3, r3, #3
 80107d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80107d4:	683b      	ldr	r3, [r7, #0]
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	68fa      	ldr	r2, [r7, #12]
 80107da:	4313      	orrs	r3, r2
 80107dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80107de:	697b      	ldr	r3, [r7, #20]
 80107e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80107e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80107e6:	683b      	ldr	r3, [r7, #0]
 80107e8:	689b      	ldr	r3, [r3, #8]
 80107ea:	021b      	lsls	r3, r3, #8
 80107ec:	697a      	ldr	r2, [r7, #20]
 80107ee:	4313      	orrs	r3, r2
 80107f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	4a21      	ldr	r2, [pc, #132]	@ (801087c <TIM_OC3_SetConfig+0xe0>)
 80107f6:	4293      	cmp	r3, r2
 80107f8:	d003      	beq.n	8010802 <TIM_OC3_SetConfig+0x66>
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	4a20      	ldr	r2, [pc, #128]	@ (8010880 <TIM_OC3_SetConfig+0xe4>)
 80107fe:	4293      	cmp	r3, r2
 8010800:	d10d      	bne.n	801081e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010802:	697b      	ldr	r3, [r7, #20]
 8010804:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010808:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801080a:	683b      	ldr	r3, [r7, #0]
 801080c:	68db      	ldr	r3, [r3, #12]
 801080e:	021b      	lsls	r3, r3, #8
 8010810:	697a      	ldr	r2, [r7, #20]
 8010812:	4313      	orrs	r3, r2
 8010814:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010816:	697b      	ldr	r3, [r7, #20]
 8010818:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801081c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	4a16      	ldr	r2, [pc, #88]	@ (801087c <TIM_OC3_SetConfig+0xe0>)
 8010822:	4293      	cmp	r3, r2
 8010824:	d003      	beq.n	801082e <TIM_OC3_SetConfig+0x92>
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	4a15      	ldr	r2, [pc, #84]	@ (8010880 <TIM_OC3_SetConfig+0xe4>)
 801082a:	4293      	cmp	r3, r2
 801082c:	d113      	bne.n	8010856 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801082e:	693b      	ldr	r3, [r7, #16]
 8010830:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010834:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010836:	693b      	ldr	r3, [r7, #16]
 8010838:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 801083c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801083e:	683b      	ldr	r3, [r7, #0]
 8010840:	695b      	ldr	r3, [r3, #20]
 8010842:	011b      	lsls	r3, r3, #4
 8010844:	693a      	ldr	r2, [r7, #16]
 8010846:	4313      	orrs	r3, r2
 8010848:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801084a:	683b      	ldr	r3, [r7, #0]
 801084c:	699b      	ldr	r3, [r3, #24]
 801084e:	011b      	lsls	r3, r3, #4
 8010850:	693a      	ldr	r2, [r7, #16]
 8010852:	4313      	orrs	r3, r2
 8010854:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	693a      	ldr	r2, [r7, #16]
 801085a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	68fa      	ldr	r2, [r7, #12]
 8010860:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010862:	683b      	ldr	r3, [r7, #0]
 8010864:	685a      	ldr	r2, [r3, #4]
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	697a      	ldr	r2, [r7, #20]
 801086e:	621a      	str	r2, [r3, #32]
}
 8010870:	bf00      	nop
 8010872:	371c      	adds	r7, #28
 8010874:	46bd      	mov	sp, r7
 8010876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087a:	4770      	bx	lr
 801087c:	40010000 	.word	0x40010000
 8010880:	40010400 	.word	0x40010400

08010884 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010884:	b480      	push	{r7}
 8010886:	b087      	sub	sp, #28
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
 801088c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	6a1b      	ldr	r3, [r3, #32]
 8010892:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	6a1b      	ldr	r3, [r3, #32]
 8010898:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	685b      	ldr	r3, [r3, #4]
 80108a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	69db      	ldr	r3, [r3, #28]
 80108aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80108b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80108ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80108bc:	683b      	ldr	r3, [r7, #0]
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	021b      	lsls	r3, r3, #8
 80108c2:	68fa      	ldr	r2, [r7, #12]
 80108c4:	4313      	orrs	r3, r2
 80108c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80108c8:	693b      	ldr	r3, [r7, #16]
 80108ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80108ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80108d0:	683b      	ldr	r3, [r7, #0]
 80108d2:	689b      	ldr	r3, [r3, #8]
 80108d4:	031b      	lsls	r3, r3, #12
 80108d6:	693a      	ldr	r2, [r7, #16]
 80108d8:	4313      	orrs	r3, r2
 80108da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	4a12      	ldr	r2, [pc, #72]	@ (8010928 <TIM_OC4_SetConfig+0xa4>)
 80108e0:	4293      	cmp	r3, r2
 80108e2:	d003      	beq.n	80108ec <TIM_OC4_SetConfig+0x68>
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	4a11      	ldr	r2, [pc, #68]	@ (801092c <TIM_OC4_SetConfig+0xa8>)
 80108e8:	4293      	cmp	r3, r2
 80108ea:	d109      	bne.n	8010900 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80108ec:	697b      	ldr	r3, [r7, #20]
 80108ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80108f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80108f4:	683b      	ldr	r3, [r7, #0]
 80108f6:	695b      	ldr	r3, [r3, #20]
 80108f8:	019b      	lsls	r3, r3, #6
 80108fa:	697a      	ldr	r2, [r7, #20]
 80108fc:	4313      	orrs	r3, r2
 80108fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	697a      	ldr	r2, [r7, #20]
 8010904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	68fa      	ldr	r2, [r7, #12]
 801090a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801090c:	683b      	ldr	r3, [r7, #0]
 801090e:	685a      	ldr	r2, [r3, #4]
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	693a      	ldr	r2, [r7, #16]
 8010918:	621a      	str	r2, [r3, #32]
}
 801091a:	bf00      	nop
 801091c:	371c      	adds	r7, #28
 801091e:	46bd      	mov	sp, r7
 8010920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010924:	4770      	bx	lr
 8010926:	bf00      	nop
 8010928:	40010000 	.word	0x40010000
 801092c:	40010400 	.word	0x40010400

08010930 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010930:	b480      	push	{r7}
 8010932:	b087      	sub	sp, #28
 8010934:	af00      	add	r7, sp, #0
 8010936:	60f8      	str	r0, [r7, #12]
 8010938:	60b9      	str	r1, [r7, #8]
 801093a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	6a1b      	ldr	r3, [r3, #32]
 8010940:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	6a1b      	ldr	r3, [r3, #32]
 8010946:	f023 0201 	bic.w	r2, r3, #1
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	699b      	ldr	r3, [r3, #24]
 8010952:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010954:	693b      	ldr	r3, [r7, #16]
 8010956:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801095a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	011b      	lsls	r3, r3, #4
 8010960:	693a      	ldr	r2, [r7, #16]
 8010962:	4313      	orrs	r3, r2
 8010964:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010966:	697b      	ldr	r3, [r7, #20]
 8010968:	f023 030a 	bic.w	r3, r3, #10
 801096c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801096e:	697a      	ldr	r2, [r7, #20]
 8010970:	68bb      	ldr	r3, [r7, #8]
 8010972:	4313      	orrs	r3, r2
 8010974:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	693a      	ldr	r2, [r7, #16]
 801097a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	697a      	ldr	r2, [r7, #20]
 8010980:	621a      	str	r2, [r3, #32]
}
 8010982:	bf00      	nop
 8010984:	371c      	adds	r7, #28
 8010986:	46bd      	mov	sp, r7
 8010988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801098c:	4770      	bx	lr

0801098e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801098e:	b480      	push	{r7}
 8010990:	b087      	sub	sp, #28
 8010992:	af00      	add	r7, sp, #0
 8010994:	60f8      	str	r0, [r7, #12]
 8010996:	60b9      	str	r1, [r7, #8]
 8010998:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	6a1b      	ldr	r3, [r3, #32]
 801099e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	6a1b      	ldr	r3, [r3, #32]
 80109a4:	f023 0210 	bic.w	r2, r3, #16
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	699b      	ldr	r3, [r3, #24]
 80109b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80109b2:	693b      	ldr	r3, [r7, #16]
 80109b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80109b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	031b      	lsls	r3, r3, #12
 80109be:	693a      	ldr	r2, [r7, #16]
 80109c0:	4313      	orrs	r3, r2
 80109c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80109c4:	697b      	ldr	r3, [r7, #20]
 80109c6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80109ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80109cc:	68bb      	ldr	r3, [r7, #8]
 80109ce:	011b      	lsls	r3, r3, #4
 80109d0:	697a      	ldr	r2, [r7, #20]
 80109d2:	4313      	orrs	r3, r2
 80109d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	693a      	ldr	r2, [r7, #16]
 80109da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	697a      	ldr	r2, [r7, #20]
 80109e0:	621a      	str	r2, [r3, #32]
}
 80109e2:	bf00      	nop
 80109e4:	371c      	adds	r7, #28
 80109e6:	46bd      	mov	sp, r7
 80109e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ec:	4770      	bx	lr

080109ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80109ee:	b480      	push	{r7}
 80109f0:	b085      	sub	sp, #20
 80109f2:	af00      	add	r7, sp, #0
 80109f4:	6078      	str	r0, [r7, #4]
 80109f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	689b      	ldr	r3, [r3, #8]
 80109fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010a04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010a06:	683a      	ldr	r2, [r7, #0]
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	4313      	orrs	r3, r2
 8010a0c:	f043 0307 	orr.w	r3, r3, #7
 8010a10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	68fa      	ldr	r2, [r7, #12]
 8010a16:	609a      	str	r2, [r3, #8]
}
 8010a18:	bf00      	nop
 8010a1a:	3714      	adds	r7, #20
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a22:	4770      	bx	lr

08010a24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010a24:	b480      	push	{r7}
 8010a26:	b087      	sub	sp, #28
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	60f8      	str	r0, [r7, #12]
 8010a2c:	60b9      	str	r1, [r7, #8]
 8010a2e:	607a      	str	r2, [r7, #4]
 8010a30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	689b      	ldr	r3, [r3, #8]
 8010a36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010a38:	697b      	ldr	r3, [r7, #20]
 8010a3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8010a3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010a40:	683b      	ldr	r3, [r7, #0]
 8010a42:	021a      	lsls	r2, r3, #8
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	431a      	orrs	r2, r3
 8010a48:	68bb      	ldr	r3, [r7, #8]
 8010a4a:	4313      	orrs	r3, r2
 8010a4c:	697a      	ldr	r2, [r7, #20]
 8010a4e:	4313      	orrs	r3, r2
 8010a50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	697a      	ldr	r2, [r7, #20]
 8010a56:	609a      	str	r2, [r3, #8]
}
 8010a58:	bf00      	nop
 8010a5a:	371c      	adds	r7, #28
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a62:	4770      	bx	lr

08010a64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010a64:	b480      	push	{r7}
 8010a66:	b087      	sub	sp, #28
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	60f8      	str	r0, [r7, #12]
 8010a6c:	60b9      	str	r1, [r7, #8]
 8010a6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010a70:	68bb      	ldr	r3, [r7, #8]
 8010a72:	f003 031f 	and.w	r3, r3, #31
 8010a76:	2201      	movs	r2, #1
 8010a78:	fa02 f303 	lsl.w	r3, r2, r3
 8010a7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	6a1a      	ldr	r2, [r3, #32]
 8010a82:	697b      	ldr	r3, [r7, #20]
 8010a84:	43db      	mvns	r3, r3
 8010a86:	401a      	ands	r2, r3
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	6a1a      	ldr	r2, [r3, #32]
 8010a90:	68bb      	ldr	r3, [r7, #8]
 8010a92:	f003 031f 	and.w	r3, r3, #31
 8010a96:	6879      	ldr	r1, [r7, #4]
 8010a98:	fa01 f303 	lsl.w	r3, r1, r3
 8010a9c:	431a      	orrs	r2, r3
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	621a      	str	r2, [r3, #32]
}
 8010aa2:	bf00      	nop
 8010aa4:	371c      	adds	r7, #28
 8010aa6:	46bd      	mov	sp, r7
 8010aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aac:	4770      	bx	lr
	...

08010ab0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010ab0:	b480      	push	{r7}
 8010ab2:	b085      	sub	sp, #20
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	6078      	str	r0, [r7, #4]
 8010ab8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010ac0:	2b01      	cmp	r3, #1
 8010ac2:	d101      	bne.n	8010ac8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010ac4:	2302      	movs	r3, #2
 8010ac6:	e05a      	b.n	8010b7e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	2201      	movs	r2, #1
 8010acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	2202      	movs	r2, #2
 8010ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	685b      	ldr	r3, [r3, #4]
 8010ade:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	689b      	ldr	r3, [r3, #8]
 8010ae6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010aee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010af0:	683b      	ldr	r3, [r7, #0]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	68fa      	ldr	r2, [r7, #12]
 8010af6:	4313      	orrs	r3, r2
 8010af8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	68fa      	ldr	r2, [r7, #12]
 8010b00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	4a21      	ldr	r2, [pc, #132]	@ (8010b8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8010b08:	4293      	cmp	r3, r2
 8010b0a:	d022      	beq.n	8010b52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010b14:	d01d      	beq.n	8010b52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	4a1d      	ldr	r2, [pc, #116]	@ (8010b90 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8010b1c:	4293      	cmp	r3, r2
 8010b1e:	d018      	beq.n	8010b52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	4a1b      	ldr	r2, [pc, #108]	@ (8010b94 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8010b26:	4293      	cmp	r3, r2
 8010b28:	d013      	beq.n	8010b52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	4a1a      	ldr	r2, [pc, #104]	@ (8010b98 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8010b30:	4293      	cmp	r3, r2
 8010b32:	d00e      	beq.n	8010b52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	4a18      	ldr	r2, [pc, #96]	@ (8010b9c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8010b3a:	4293      	cmp	r3, r2
 8010b3c:	d009      	beq.n	8010b52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	4a17      	ldr	r2, [pc, #92]	@ (8010ba0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8010b44:	4293      	cmp	r3, r2
 8010b46:	d004      	beq.n	8010b52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	4a15      	ldr	r2, [pc, #84]	@ (8010ba4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8010b4e:	4293      	cmp	r3, r2
 8010b50:	d10c      	bne.n	8010b6c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010b52:	68bb      	ldr	r3, [r7, #8]
 8010b54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010b58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010b5a:	683b      	ldr	r3, [r7, #0]
 8010b5c:	685b      	ldr	r3, [r3, #4]
 8010b5e:	68ba      	ldr	r2, [r7, #8]
 8010b60:	4313      	orrs	r3, r2
 8010b62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	68ba      	ldr	r2, [r7, #8]
 8010b6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	2201      	movs	r2, #1
 8010b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	2200      	movs	r2, #0
 8010b78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010b7c:	2300      	movs	r3, #0
}
 8010b7e:	4618      	mov	r0, r3
 8010b80:	3714      	adds	r7, #20
 8010b82:	46bd      	mov	sp, r7
 8010b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b88:	4770      	bx	lr
 8010b8a:	bf00      	nop
 8010b8c:	40010000 	.word	0x40010000
 8010b90:	40000400 	.word	0x40000400
 8010b94:	40000800 	.word	0x40000800
 8010b98:	40000c00 	.word	0x40000c00
 8010b9c:	40010400 	.word	0x40010400
 8010ba0:	40014000 	.word	0x40014000
 8010ba4:	40001800 	.word	0x40001800

08010ba8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8010ba8:	b480      	push	{r7}
 8010baa:	b085      	sub	sp, #20
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	6078      	str	r0, [r7, #4]
 8010bb0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010bbc:	2b01      	cmp	r3, #1
 8010bbe:	d101      	bne.n	8010bc4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8010bc0:	2302      	movs	r3, #2
 8010bc2:	e03d      	b.n	8010c40 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	2201      	movs	r2, #1
 8010bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8010bd2:	683b      	ldr	r3, [r7, #0]
 8010bd4:	68db      	ldr	r3, [r3, #12]
 8010bd6:	4313      	orrs	r3, r2
 8010bd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8010be0:	683b      	ldr	r3, [r7, #0]
 8010be2:	689b      	ldr	r3, [r3, #8]
 8010be4:	4313      	orrs	r3, r2
 8010be6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8010bee:	683b      	ldr	r3, [r7, #0]
 8010bf0:	685b      	ldr	r3, [r3, #4]
 8010bf2:	4313      	orrs	r3, r2
 8010bf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8010bfc:	683b      	ldr	r3, [r7, #0]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	4313      	orrs	r3, r2
 8010c02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8010c0a:	683b      	ldr	r3, [r7, #0]
 8010c0c:	691b      	ldr	r3, [r3, #16]
 8010c0e:	4313      	orrs	r3, r2
 8010c10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8010c18:	683b      	ldr	r3, [r7, #0]
 8010c1a:	695b      	ldr	r3, [r3, #20]
 8010c1c:	4313      	orrs	r3, r2
 8010c1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8010c26:	683b      	ldr	r3, [r7, #0]
 8010c28:	69db      	ldr	r3, [r3, #28]
 8010c2a:	4313      	orrs	r3, r2
 8010c2c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	68fa      	ldr	r2, [r7, #12]
 8010c34:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	2200      	movs	r2, #0
 8010c3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010c3e:	2300      	movs	r3, #0
}
 8010c40:	4618      	mov	r0, r3
 8010c42:	3714      	adds	r7, #20
 8010c44:	46bd      	mov	sp, r7
 8010c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c4a:	4770      	bx	lr

08010c4c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010c4c:	b480      	push	{r7}
 8010c4e:	b083      	sub	sp, #12
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010c54:	bf00      	nop
 8010c56:	370c      	adds	r7, #12
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c5e:	4770      	bx	lr

08010c60 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010c60:	b480      	push	{r7}
 8010c62:	b083      	sub	sp, #12
 8010c64:	af00      	add	r7, sp, #0
 8010c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010c68:	bf00      	nop
 8010c6a:	370c      	adds	r7, #12
 8010c6c:	46bd      	mov	sp, r7
 8010c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c72:	4770      	bx	lr

08010c74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010c74:	b580      	push	{r7, lr}
 8010c76:	b082      	sub	sp, #8
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d101      	bne.n	8010c86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010c82:	2301      	movs	r3, #1
 8010c84:	e042      	b.n	8010d0c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010c8c:	b2db      	uxtb	r3, r3
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d106      	bne.n	8010ca0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	2200      	movs	r2, #0
 8010c96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010c9a:	6878      	ldr	r0, [r7, #4]
 8010c9c:	f7fb fa8c 	bl	800c1b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	2224      	movs	r2, #36	@ 0x24
 8010ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	68da      	ldr	r2, [r3, #12]
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8010cb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8010cb8:	6878      	ldr	r0, [r7, #4]
 8010cba:	f001 f88d 	bl	8011dd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	691a      	ldr	r2, [r3, #16]
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8010ccc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	695a      	ldr	r2, [r3, #20]
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8010cdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	68da      	ldr	r2, [r3, #12]
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8010cec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	2200      	movs	r2, #0
 8010cf2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	2220      	movs	r2, #32
 8010cf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	2220      	movs	r2, #32
 8010d00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	2200      	movs	r2, #0
 8010d08:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8010d0a:	2300      	movs	r3, #0
}
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	3708      	adds	r7, #8
 8010d10:	46bd      	mov	sp, r7
 8010d12:	bd80      	pop	{r7, pc}

08010d14 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010d14:	b580      	push	{r7, lr}
 8010d16:	b08a      	sub	sp, #40	@ 0x28
 8010d18:	af02      	add	r7, sp, #8
 8010d1a:	60f8      	str	r0, [r7, #12]
 8010d1c:	60b9      	str	r1, [r7, #8]
 8010d1e:	603b      	str	r3, [r7, #0]
 8010d20:	4613      	mov	r3, r2
 8010d22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8010d24:	2300      	movs	r3, #0
 8010d26:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010d2e:	b2db      	uxtb	r3, r3
 8010d30:	2b20      	cmp	r3, #32
 8010d32:	d175      	bne.n	8010e20 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8010d34:	68bb      	ldr	r3, [r7, #8]
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d002      	beq.n	8010d40 <HAL_UART_Transmit+0x2c>
 8010d3a:	88fb      	ldrh	r3, [r7, #6]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d101      	bne.n	8010d44 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8010d40:	2301      	movs	r3, #1
 8010d42:	e06e      	b.n	8010e22 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	2200      	movs	r2, #0
 8010d48:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	2221      	movs	r2, #33	@ 0x21
 8010d4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010d52:	f7fb fca9 	bl	800c6a8 <HAL_GetTick>
 8010d56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	88fa      	ldrh	r2, [r7, #6]
 8010d5c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	88fa      	ldrh	r2, [r7, #6]
 8010d62:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	689b      	ldr	r3, [r3, #8]
 8010d68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010d6c:	d108      	bne.n	8010d80 <HAL_UART_Transmit+0x6c>
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	691b      	ldr	r3, [r3, #16]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d104      	bne.n	8010d80 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8010d76:	2300      	movs	r3, #0
 8010d78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8010d7a:	68bb      	ldr	r3, [r7, #8]
 8010d7c:	61bb      	str	r3, [r7, #24]
 8010d7e:	e003      	b.n	8010d88 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8010d80:	68bb      	ldr	r3, [r7, #8]
 8010d82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010d84:	2300      	movs	r3, #0
 8010d86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8010d88:	e02e      	b.n	8010de8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010d8a:	683b      	ldr	r3, [r7, #0]
 8010d8c:	9300      	str	r3, [sp, #0]
 8010d8e:	697b      	ldr	r3, [r7, #20]
 8010d90:	2200      	movs	r2, #0
 8010d92:	2180      	movs	r1, #128	@ 0x80
 8010d94:	68f8      	ldr	r0, [r7, #12]
 8010d96:	f000 fd13 	bl	80117c0 <UART_WaitOnFlagUntilTimeout>
 8010d9a:	4603      	mov	r3, r0
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d005      	beq.n	8010dac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	2220      	movs	r2, #32
 8010da4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8010da8:	2303      	movs	r3, #3
 8010daa:	e03a      	b.n	8010e22 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8010dac:	69fb      	ldr	r3, [r7, #28]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d10b      	bne.n	8010dca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010db2:	69bb      	ldr	r3, [r7, #24]
 8010db4:	881b      	ldrh	r3, [r3, #0]
 8010db6:	461a      	mov	r2, r3
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010dc0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8010dc2:	69bb      	ldr	r3, [r7, #24]
 8010dc4:	3302      	adds	r3, #2
 8010dc6:	61bb      	str	r3, [r7, #24]
 8010dc8:	e007      	b.n	8010dda <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8010dca:	69fb      	ldr	r3, [r7, #28]
 8010dcc:	781a      	ldrb	r2, [r3, #0]
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8010dd4:	69fb      	ldr	r3, [r7, #28]
 8010dd6:	3301      	adds	r3, #1
 8010dd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8010dde:	b29b      	uxth	r3, r3
 8010de0:	3b01      	subs	r3, #1
 8010de2:	b29a      	uxth	r2, r3
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8010dec:	b29b      	uxth	r3, r3
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d1cb      	bne.n	8010d8a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010df2:	683b      	ldr	r3, [r7, #0]
 8010df4:	9300      	str	r3, [sp, #0]
 8010df6:	697b      	ldr	r3, [r7, #20]
 8010df8:	2200      	movs	r2, #0
 8010dfa:	2140      	movs	r1, #64	@ 0x40
 8010dfc:	68f8      	ldr	r0, [r7, #12]
 8010dfe:	f000 fcdf 	bl	80117c0 <UART_WaitOnFlagUntilTimeout>
 8010e02:	4603      	mov	r3, r0
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d005      	beq.n	8010e14 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	2220      	movs	r2, #32
 8010e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8010e10:	2303      	movs	r3, #3
 8010e12:	e006      	b.n	8010e22 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	2220      	movs	r2, #32
 8010e18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8010e1c:	2300      	movs	r3, #0
 8010e1e:	e000      	b.n	8010e22 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8010e20:	2302      	movs	r3, #2
  }
}
 8010e22:	4618      	mov	r0, r3
 8010e24:	3720      	adds	r7, #32
 8010e26:	46bd      	mov	sp, r7
 8010e28:	bd80      	pop	{r7, pc}

08010e2a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010e2a:	b580      	push	{r7, lr}
 8010e2c:	b084      	sub	sp, #16
 8010e2e:	af00      	add	r7, sp, #0
 8010e30:	60f8      	str	r0, [r7, #12]
 8010e32:	60b9      	str	r1, [r7, #8]
 8010e34:	4613      	mov	r3, r2
 8010e36:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010e3e:	b2db      	uxtb	r3, r3
 8010e40:	2b20      	cmp	r3, #32
 8010e42:	d112      	bne.n	8010e6a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8010e44:	68bb      	ldr	r3, [r7, #8]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d002      	beq.n	8010e50 <HAL_UART_Receive_IT+0x26>
 8010e4a:	88fb      	ldrh	r3, [r7, #6]
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d101      	bne.n	8010e54 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8010e50:	2301      	movs	r3, #1
 8010e52:	e00b      	b.n	8010e6c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	2200      	movs	r2, #0
 8010e58:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8010e5a:	88fb      	ldrh	r3, [r7, #6]
 8010e5c:	461a      	mov	r2, r3
 8010e5e:	68b9      	ldr	r1, [r7, #8]
 8010e60:	68f8      	ldr	r0, [r7, #12]
 8010e62:	f000 fd06 	bl	8011872 <UART_Start_Receive_IT>
 8010e66:	4603      	mov	r3, r0
 8010e68:	e000      	b.n	8010e6c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8010e6a:	2302      	movs	r3, #2
  }
}
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	3710      	adds	r7, #16
 8010e70:	46bd      	mov	sp, r7
 8010e72:	bd80      	pop	{r7, pc}

08010e74 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010e74:	b580      	push	{r7, lr}
 8010e76:	b084      	sub	sp, #16
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	60f8      	str	r0, [r7, #12]
 8010e7c:	60b9      	str	r1, [r7, #8]
 8010e7e:	4613      	mov	r3, r2
 8010e80:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010e88:	b2db      	uxtb	r3, r3
 8010e8a:	2b20      	cmp	r3, #32
 8010e8c:	d112      	bne.n	8010eb4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8010e8e:	68bb      	ldr	r3, [r7, #8]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d002      	beq.n	8010e9a <HAL_UART_Receive_DMA+0x26>
 8010e94:	88fb      	ldrh	r3, [r7, #6]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d101      	bne.n	8010e9e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8010e9a:	2301      	movs	r3, #1
 8010e9c:	e00b      	b.n	8010eb6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	2200      	movs	r2, #0
 8010ea2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8010ea4:	88fb      	ldrh	r3, [r7, #6]
 8010ea6:	461a      	mov	r2, r3
 8010ea8:	68b9      	ldr	r1, [r7, #8]
 8010eaa:	68f8      	ldr	r0, [r7, #12]
 8010eac:	f000 fd1c 	bl	80118e8 <UART_Start_Receive_DMA>
 8010eb0:	4603      	mov	r3, r0
 8010eb2:	e000      	b.n	8010eb6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8010eb4:	2302      	movs	r3, #2
  }
}
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	3710      	adds	r7, #16
 8010eba:	46bd      	mov	sp, r7
 8010ebc:	bd80      	pop	{r7, pc}
	...

08010ec0 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b09a      	sub	sp, #104	@ 0x68
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	330c      	adds	r3, #12
 8010ece:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ed0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010ed2:	e853 3f00 	ldrex	r3, [r3]
 8010ed6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8010ed8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010eda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010ede:	667b      	str	r3, [r7, #100]	@ 0x64
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	330c      	adds	r3, #12
 8010ee6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010ee8:	657a      	str	r2, [r7, #84]	@ 0x54
 8010eea:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010eec:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010eee:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8010ef0:	e841 2300 	strex	r3, r2, [r1]
 8010ef4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8010ef6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d1e5      	bne.n	8010ec8 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	3314      	adds	r3, #20
 8010f02:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f06:	e853 3f00 	ldrex	r3, [r3]
 8010f0a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f0e:	f023 0301 	bic.w	r3, r3, #1
 8010f12:	663b      	str	r3, [r7, #96]	@ 0x60
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	3314      	adds	r3, #20
 8010f1a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010f1c:	643a      	str	r2, [r7, #64]	@ 0x40
 8010f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f20:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010f22:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010f24:	e841 2300 	strex	r3, r2, [r1]
 8010f28:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d1e5      	bne.n	8010efc <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f34:	2b01      	cmp	r3, #1
 8010f36:	d119      	bne.n	8010f6c <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	330c      	adds	r3, #12
 8010f3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f40:	6a3b      	ldr	r3, [r7, #32]
 8010f42:	e853 3f00 	ldrex	r3, [r3]
 8010f46:	61fb      	str	r3, [r7, #28]
   return(result);
 8010f48:	69fb      	ldr	r3, [r7, #28]
 8010f4a:	f023 0310 	bic.w	r3, r3, #16
 8010f4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	330c      	adds	r3, #12
 8010f56:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8010f58:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010f5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010f60:	e841 2300 	strex	r3, r2, [r1]
 8010f64:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d1e5      	bne.n	8010f38 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	695b      	ldr	r3, [r3, #20]
 8010f72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010f76:	2b40      	cmp	r3, #64	@ 0x40
 8010f78:	d13f      	bne.n	8010ffa <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	3314      	adds	r3, #20
 8010f80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	e853 3f00 	ldrex	r3, [r3]
 8010f88:	60bb      	str	r3, [r7, #8]
   return(result);
 8010f8a:	68bb      	ldr	r3, [r7, #8]
 8010f8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010f90:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	3314      	adds	r3, #20
 8010f98:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010f9a:	61ba      	str	r2, [r7, #24]
 8010f9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f9e:	6979      	ldr	r1, [r7, #20]
 8010fa0:	69ba      	ldr	r2, [r7, #24]
 8010fa2:	e841 2300 	strex	r3, r2, [r1]
 8010fa6:	613b      	str	r3, [r7, #16]
   return(result);
 8010fa8:	693b      	ldr	r3, [r7, #16]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d1e5      	bne.n	8010f7a <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d013      	beq.n	8010fde <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010fba:	4a19      	ldr	r2, [pc, #100]	@ (8011020 <HAL_UART_AbortReceive_IT+0x160>)
 8010fbc:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	f7fc f9f8 	bl	800d3b8 <HAL_DMA_Abort_IT>
 8010fc8:	4603      	mov	r3, r0
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d022      	beq.n	8011014 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010fd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010fd4:	687a      	ldr	r2, [r7, #4]
 8010fd6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8010fd8:	4610      	mov	r0, r2
 8010fda:	4798      	blx	r3
 8010fdc:	e01a      	b.n	8011014 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	2200      	movs	r2, #0
 8010fe2:	85da      	strh	r2, [r3, #46]	@ 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	2220      	movs	r2, #32
 8010fe8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	2200      	movs	r2, #0
 8010ff0:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8010ff2:	6878      	ldr	r0, [r7, #4]
 8010ff4:	f000 fad0 	bl	8011598 <HAL_UART_AbortReceiveCpltCallback>
 8010ff8:	e00c      	b.n	8011014 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	2200      	movs	r2, #0
 8010ffe:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	2220      	movs	r2, #32
 8011004:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	2200      	movs	r2, #0
 801100c:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 801100e:	6878      	ldr	r0, [r7, #4]
 8011010:	f000 fac2 	bl	8011598 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8011014:	2300      	movs	r3, #0
}
 8011016:	4618      	mov	r0, r3
 8011018:	3768      	adds	r7, #104	@ 0x68
 801101a:	46bd      	mov	sp, r7
 801101c:	bd80      	pop	{r7, pc}
 801101e:	bf00      	nop
 8011020:	08011b5b 	.word	0x08011b5b

08011024 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8011024:	b580      	push	{r7, lr}
 8011026:	b0ba      	sub	sp, #232	@ 0xe8
 8011028:	af00      	add	r7, sp, #0
 801102a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	68db      	ldr	r3, [r3, #12]
 801103c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	695b      	ldr	r3, [r3, #20]
 8011046:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 801104a:	2300      	movs	r3, #0
 801104c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8011050:	2300      	movs	r3, #0
 8011052:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8011056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801105a:	f003 030f 	and.w	r3, r3, #15
 801105e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8011062:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8011066:	2b00      	cmp	r3, #0
 8011068:	d10f      	bne.n	801108a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801106a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801106e:	f003 0320 	and.w	r3, r3, #32
 8011072:	2b00      	cmp	r3, #0
 8011074:	d009      	beq.n	801108a <HAL_UART_IRQHandler+0x66>
 8011076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801107a:	f003 0320 	and.w	r3, r3, #32
 801107e:	2b00      	cmp	r3, #0
 8011080:	d003      	beq.n	801108a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8011082:	6878      	ldr	r0, [r7, #4]
 8011084:	f000 fde9 	bl	8011c5a <UART_Receive_IT>
      return;
 8011088:	e25b      	b.n	8011542 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 801108a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801108e:	2b00      	cmp	r3, #0
 8011090:	f000 80de 	beq.w	8011250 <HAL_UART_IRQHandler+0x22c>
 8011094:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011098:	f003 0301 	and.w	r3, r3, #1
 801109c:	2b00      	cmp	r3, #0
 801109e:	d106      	bne.n	80110ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80110a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80110a4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	f000 80d1 	beq.w	8011250 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80110ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80110b2:	f003 0301 	and.w	r3, r3, #1
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d00b      	beq.n	80110d2 <HAL_UART_IRQHandler+0xae>
 80110ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80110be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d005      	beq.n	80110d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80110ca:	f043 0201 	orr.w	r2, r3, #1
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80110d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80110d6:	f003 0304 	and.w	r3, r3, #4
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d00b      	beq.n	80110f6 <HAL_UART_IRQHandler+0xd2>
 80110de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80110e2:	f003 0301 	and.w	r3, r3, #1
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d005      	beq.n	80110f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80110ee:	f043 0202 	orr.w	r2, r3, #2
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80110f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80110fa:	f003 0302 	and.w	r3, r3, #2
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d00b      	beq.n	801111a <HAL_UART_IRQHandler+0xf6>
 8011102:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011106:	f003 0301 	and.w	r3, r3, #1
 801110a:	2b00      	cmp	r3, #0
 801110c:	d005      	beq.n	801111a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011112:	f043 0204 	orr.w	r2, r3, #4
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 801111a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801111e:	f003 0308 	and.w	r3, r3, #8
 8011122:	2b00      	cmp	r3, #0
 8011124:	d011      	beq.n	801114a <HAL_UART_IRQHandler+0x126>
 8011126:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801112a:	f003 0320 	and.w	r3, r3, #32
 801112e:	2b00      	cmp	r3, #0
 8011130:	d105      	bne.n	801113e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8011132:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011136:	f003 0301 	and.w	r3, r3, #1
 801113a:	2b00      	cmp	r3, #0
 801113c:	d005      	beq.n	801114a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011142:	f043 0208 	orr.w	r2, r3, #8
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801114e:	2b00      	cmp	r3, #0
 8011150:	f000 81f2 	beq.w	8011538 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8011154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011158:	f003 0320 	and.w	r3, r3, #32
 801115c:	2b00      	cmp	r3, #0
 801115e:	d008      	beq.n	8011172 <HAL_UART_IRQHandler+0x14e>
 8011160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011164:	f003 0320 	and.w	r3, r3, #32
 8011168:	2b00      	cmp	r3, #0
 801116a:	d002      	beq.n	8011172 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 801116c:	6878      	ldr	r0, [r7, #4]
 801116e:	f000 fd74 	bl	8011c5a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	695b      	ldr	r3, [r3, #20]
 8011178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801117c:	2b40      	cmp	r3, #64	@ 0x40
 801117e:	bf0c      	ite	eq
 8011180:	2301      	moveq	r3, #1
 8011182:	2300      	movne	r3, #0
 8011184:	b2db      	uxtb	r3, r3
 8011186:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801118e:	f003 0308 	and.w	r3, r3, #8
 8011192:	2b00      	cmp	r3, #0
 8011194:	d103      	bne.n	801119e <HAL_UART_IRQHandler+0x17a>
 8011196:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801119a:	2b00      	cmp	r3, #0
 801119c:	d04f      	beq.n	801123e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801119e:	6878      	ldr	r0, [r7, #4]
 80111a0:	f000 fc64 	bl	8011a6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	695b      	ldr	r3, [r3, #20]
 80111aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80111ae:	2b40      	cmp	r3, #64	@ 0x40
 80111b0:	d141      	bne.n	8011236 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	3314      	adds	r3, #20
 80111b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80111c0:	e853 3f00 	ldrex	r3, [r3]
 80111c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80111c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80111cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80111d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	3314      	adds	r3, #20
 80111da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80111de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80111e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80111ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80111ee:	e841 2300 	strex	r3, r2, [r1]
 80111f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80111f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d1d9      	bne.n	80111b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011202:	2b00      	cmp	r3, #0
 8011204:	d013      	beq.n	801122e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801120a:	4a7e      	ldr	r2, [pc, #504]	@ (8011404 <HAL_UART_IRQHandler+0x3e0>)
 801120c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011212:	4618      	mov	r0, r3
 8011214:	f7fc f8d0 	bl	800d3b8 <HAL_DMA_Abort_IT>
 8011218:	4603      	mov	r3, r0
 801121a:	2b00      	cmp	r3, #0
 801121c:	d016      	beq.n	801124c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011224:	687a      	ldr	r2, [r7, #4]
 8011226:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8011228:	4610      	mov	r0, r2
 801122a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801122c:	e00e      	b.n	801124c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801122e:	6878      	ldr	r0, [r7, #4]
 8011230:	f000 f9a8 	bl	8011584 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011234:	e00a      	b.n	801124c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011236:	6878      	ldr	r0, [r7, #4]
 8011238:	f000 f9a4 	bl	8011584 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801123c:	e006      	b.n	801124c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801123e:	6878      	ldr	r0, [r7, #4]
 8011240:	f000 f9a0 	bl	8011584 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	2200      	movs	r2, #0
 8011248:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 801124a:	e175      	b.n	8011538 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801124c:	bf00      	nop
    return;
 801124e:	e173      	b.n	8011538 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011254:	2b01      	cmp	r3, #1
 8011256:	f040 814f 	bne.w	80114f8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 801125a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801125e:	f003 0310 	and.w	r3, r3, #16
 8011262:	2b00      	cmp	r3, #0
 8011264:	f000 8148 	beq.w	80114f8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8011268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801126c:	f003 0310 	and.w	r3, r3, #16
 8011270:	2b00      	cmp	r3, #0
 8011272:	f000 8141 	beq.w	80114f8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8011276:	2300      	movs	r3, #0
 8011278:	60bb      	str	r3, [r7, #8]
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	60bb      	str	r3, [r7, #8]
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	685b      	ldr	r3, [r3, #4]
 8011288:	60bb      	str	r3, [r7, #8]
 801128a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	695b      	ldr	r3, [r3, #20]
 8011292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011296:	2b40      	cmp	r3, #64	@ 0x40
 8011298:	f040 80b6 	bne.w	8011408 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	685b      	ldr	r3, [r3, #4]
 80112a4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80112a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	f000 8145 	beq.w	801153c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80112b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80112ba:	429a      	cmp	r2, r3
 80112bc:	f080 813e 	bcs.w	801153c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80112c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80112cc:	69db      	ldr	r3, [r3, #28]
 80112ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80112d2:	f000 8088 	beq.w	80113e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	330c      	adds	r3, #12
 80112dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80112e4:	e853 3f00 	ldrex	r3, [r3]
 80112e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80112ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80112f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80112f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	330c      	adds	r3, #12
 80112fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8011302:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8011306:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801130a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801130e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8011312:	e841 2300 	strex	r3, r2, [r1]
 8011316:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 801131a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801131e:	2b00      	cmp	r3, #0
 8011320:	d1d9      	bne.n	80112d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	3314      	adds	r3, #20
 8011328:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801132a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801132c:	e853 3f00 	ldrex	r3, [r3]
 8011330:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8011332:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011334:	f023 0301 	bic.w	r3, r3, #1
 8011338:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	3314      	adds	r3, #20
 8011342:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8011346:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 801134a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801134c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801134e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8011352:	e841 2300 	strex	r3, r2, [r1]
 8011356:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8011358:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801135a:	2b00      	cmp	r3, #0
 801135c:	d1e1      	bne.n	8011322 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	3314      	adds	r3, #20
 8011364:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011366:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011368:	e853 3f00 	ldrex	r3, [r3]
 801136c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801136e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011370:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011374:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	3314      	adds	r3, #20
 801137e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8011382:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8011384:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011386:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8011388:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801138a:	e841 2300 	strex	r3, r2, [r1]
 801138e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8011390:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011392:	2b00      	cmp	r3, #0
 8011394:	d1e3      	bne.n	801135e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	2220      	movs	r2, #32
 801139a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	2200      	movs	r2, #0
 80113a2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	330c      	adds	r3, #12
 80113aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80113ae:	e853 3f00 	ldrex	r3, [r3]
 80113b2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80113b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80113b6:	f023 0310 	bic.w	r3, r3, #16
 80113ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	330c      	adds	r3, #12
 80113c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80113c8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80113ca:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80113ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80113d0:	e841 2300 	strex	r3, r2, [r1]
 80113d4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80113d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d1e3      	bne.n	80113a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80113e0:	4618      	mov	r0, r3
 80113e2:	f7fb ff79 	bl	800d2d8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	2202      	movs	r2, #2
 80113ea:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80113f4:	b29b      	uxth	r3, r3
 80113f6:	1ad3      	subs	r3, r2, r3
 80113f8:	b29b      	uxth	r3, r3
 80113fa:	4619      	mov	r1, r3
 80113fc:	6878      	ldr	r0, [r7, #4]
 80113fe:	f000 f8d5 	bl	80115ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8011402:	e09b      	b.n	801153c <HAL_UART_IRQHandler+0x518>
 8011404:	08011b33 	.word	0x08011b33
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8011410:	b29b      	uxth	r3, r3
 8011412:	1ad3      	subs	r3, r2, r3
 8011414:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 801141c:	b29b      	uxth	r3, r3
 801141e:	2b00      	cmp	r3, #0
 8011420:	f000 808e 	beq.w	8011540 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8011424:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8011428:	2b00      	cmp	r3, #0
 801142a:	f000 8089 	beq.w	8011540 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	330c      	adds	r3, #12
 8011434:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011438:	e853 3f00 	ldrex	r3, [r3]
 801143c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801143e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011440:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011444:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	330c      	adds	r3, #12
 801144e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8011452:	647a      	str	r2, [r7, #68]	@ 0x44
 8011454:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011456:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011458:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801145a:	e841 2300 	strex	r3, r2, [r1]
 801145e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011460:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011462:	2b00      	cmp	r3, #0
 8011464:	d1e3      	bne.n	801142e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	3314      	adds	r3, #20
 801146c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801146e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011470:	e853 3f00 	ldrex	r3, [r3]
 8011474:	623b      	str	r3, [r7, #32]
   return(result);
 8011476:	6a3b      	ldr	r3, [r7, #32]
 8011478:	f023 0301 	bic.w	r3, r3, #1
 801147c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	3314      	adds	r3, #20
 8011486:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801148a:	633a      	str	r2, [r7, #48]	@ 0x30
 801148c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801148e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011490:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011492:	e841 2300 	strex	r3, r2, [r1]
 8011496:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801149a:	2b00      	cmp	r3, #0
 801149c:	d1e3      	bne.n	8011466 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	2220      	movs	r2, #32
 80114a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	2200      	movs	r2, #0
 80114aa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	330c      	adds	r3, #12
 80114b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114b4:	693b      	ldr	r3, [r7, #16]
 80114b6:	e853 3f00 	ldrex	r3, [r3]
 80114ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	f023 0310 	bic.w	r3, r3, #16
 80114c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	330c      	adds	r3, #12
 80114cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80114d0:	61fa      	str	r2, [r7, #28]
 80114d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114d4:	69b9      	ldr	r1, [r7, #24]
 80114d6:	69fa      	ldr	r2, [r7, #28]
 80114d8:	e841 2300 	strex	r3, r2, [r1]
 80114dc:	617b      	str	r3, [r7, #20]
   return(result);
 80114de:	697b      	ldr	r3, [r7, #20]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d1e3      	bne.n	80114ac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	2202      	movs	r2, #2
 80114e8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80114ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80114ee:	4619      	mov	r1, r3
 80114f0:	6878      	ldr	r0, [r7, #4]
 80114f2:	f000 f85b 	bl	80115ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80114f6:	e023      	b.n	8011540 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80114f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80114fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011500:	2b00      	cmp	r3, #0
 8011502:	d009      	beq.n	8011518 <HAL_UART_IRQHandler+0x4f4>
 8011504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011508:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801150c:	2b00      	cmp	r3, #0
 801150e:	d003      	beq.n	8011518 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8011510:	6878      	ldr	r0, [r7, #4]
 8011512:	f000 fb3a 	bl	8011b8a <UART_Transmit_IT>
    return;
 8011516:	e014      	b.n	8011542 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8011518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801151c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011520:	2b00      	cmp	r3, #0
 8011522:	d00e      	beq.n	8011542 <HAL_UART_IRQHandler+0x51e>
 8011524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801152c:	2b00      	cmp	r3, #0
 801152e:	d008      	beq.n	8011542 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8011530:	6878      	ldr	r0, [r7, #4]
 8011532:	f000 fb7a 	bl	8011c2a <UART_EndTransmit_IT>
    return;
 8011536:	e004      	b.n	8011542 <HAL_UART_IRQHandler+0x51e>
    return;
 8011538:	bf00      	nop
 801153a:	e002      	b.n	8011542 <HAL_UART_IRQHandler+0x51e>
      return;
 801153c:	bf00      	nop
 801153e:	e000      	b.n	8011542 <HAL_UART_IRQHandler+0x51e>
      return;
 8011540:	bf00      	nop
  }
}
 8011542:	37e8      	adds	r7, #232	@ 0xe8
 8011544:	46bd      	mov	sp, r7
 8011546:	bd80      	pop	{r7, pc}

08011548 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011548:	b480      	push	{r7}
 801154a:	b083      	sub	sp, #12
 801154c:	af00      	add	r7, sp, #0
 801154e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8011550:	bf00      	nop
 8011552:	370c      	adds	r7, #12
 8011554:	46bd      	mov	sp, r7
 8011556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801155a:	4770      	bx	lr

0801155c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801155c:	b480      	push	{r7}
 801155e:	b083      	sub	sp, #12
 8011560:	af00      	add	r7, sp, #0
 8011562:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8011564:	bf00      	nop
 8011566:	370c      	adds	r7, #12
 8011568:	46bd      	mov	sp, r7
 801156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801156e:	4770      	bx	lr

08011570 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8011570:	b480      	push	{r7}
 8011572:	b083      	sub	sp, #12
 8011574:	af00      	add	r7, sp, #0
 8011576:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8011578:	bf00      	nop
 801157a:	370c      	adds	r7, #12
 801157c:	46bd      	mov	sp, r7
 801157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011582:	4770      	bx	lr

08011584 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011584:	b480      	push	{r7}
 8011586:	b083      	sub	sp, #12
 8011588:	af00      	add	r7, sp, #0
 801158a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 801158c:	bf00      	nop
 801158e:	370c      	adds	r7, #12
 8011590:	46bd      	mov	sp, r7
 8011592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011596:	4770      	bx	lr

08011598 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8011598:	b480      	push	{r7}
 801159a:	b083      	sub	sp, #12
 801159c:	af00      	add	r7, sp, #0
 801159e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80115a0:	bf00      	nop
 80115a2:	370c      	adds	r7, #12
 80115a4:	46bd      	mov	sp, r7
 80115a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115aa:	4770      	bx	lr

080115ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80115ac:	b480      	push	{r7}
 80115ae:	b083      	sub	sp, #12
 80115b0:	af00      	add	r7, sp, #0
 80115b2:	6078      	str	r0, [r7, #4]
 80115b4:	460b      	mov	r3, r1
 80115b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80115b8:	bf00      	nop
 80115ba:	370c      	adds	r7, #12
 80115bc:	46bd      	mov	sp, r7
 80115be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c2:	4770      	bx	lr

080115c4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80115c4:	b580      	push	{r7, lr}
 80115c6:	b09c      	sub	sp, #112	@ 0x70
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80115d0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d172      	bne.n	80116c6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80115e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80115e2:	2200      	movs	r2, #0
 80115e4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80115e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	330c      	adds	r3, #12
 80115ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80115f0:	e853 3f00 	ldrex	r3, [r3]
 80115f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80115f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80115f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80115fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80115fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	330c      	adds	r3, #12
 8011604:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8011606:	65ba      	str	r2, [r7, #88]	@ 0x58
 8011608:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801160a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801160c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801160e:	e841 2300 	strex	r3, r2, [r1]
 8011612:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8011614:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011616:	2b00      	cmp	r3, #0
 8011618:	d1e5      	bne.n	80115e6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801161a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	3314      	adds	r3, #20
 8011620:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011624:	e853 3f00 	ldrex	r3, [r3]
 8011628:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801162a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801162c:	f023 0301 	bic.w	r3, r3, #1
 8011630:	667b      	str	r3, [r7, #100]	@ 0x64
 8011632:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	3314      	adds	r3, #20
 8011638:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801163a:	647a      	str	r2, [r7, #68]	@ 0x44
 801163c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801163e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011640:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011642:	e841 2300 	strex	r3, r2, [r1]
 8011646:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011648:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801164a:	2b00      	cmp	r3, #0
 801164c:	d1e5      	bne.n	801161a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801164e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	3314      	adds	r3, #20
 8011654:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011658:	e853 3f00 	ldrex	r3, [r3]
 801165c:	623b      	str	r3, [r7, #32]
   return(result);
 801165e:	6a3b      	ldr	r3, [r7, #32]
 8011660:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011664:	663b      	str	r3, [r7, #96]	@ 0x60
 8011666:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	3314      	adds	r3, #20
 801166c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801166e:	633a      	str	r2, [r7, #48]	@ 0x30
 8011670:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011672:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011674:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011676:	e841 2300 	strex	r3, r2, [r1]
 801167a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801167c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801167e:	2b00      	cmp	r3, #0
 8011680:	d1e5      	bne.n	801164e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8011682:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011684:	2220      	movs	r2, #32
 8011686:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801168a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801168c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801168e:	2b01      	cmp	r3, #1
 8011690:	d119      	bne.n	80116c6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011692:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	330c      	adds	r3, #12
 8011698:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801169a:	693b      	ldr	r3, [r7, #16]
 801169c:	e853 3f00 	ldrex	r3, [r3]
 80116a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	f023 0310 	bic.w	r3, r3, #16
 80116a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80116aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	330c      	adds	r3, #12
 80116b0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80116b2:	61fa      	str	r2, [r7, #28]
 80116b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116b6:	69b9      	ldr	r1, [r7, #24]
 80116b8:	69fa      	ldr	r2, [r7, #28]
 80116ba:	e841 2300 	strex	r3, r2, [r1]
 80116be:	617b      	str	r3, [r7, #20]
   return(result);
 80116c0:	697b      	ldr	r3, [r7, #20]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d1e5      	bne.n	8011692 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80116c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80116c8:	2200      	movs	r2, #0
 80116ca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80116cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80116ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80116d0:	2b01      	cmp	r3, #1
 80116d2:	d106      	bne.n	80116e2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80116d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80116d6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80116d8:	4619      	mov	r1, r3
 80116da:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80116dc:	f7ff ff66 	bl	80115ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80116e0:	e002      	b.n	80116e8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80116e2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80116e4:	f7ff ff3a 	bl	801155c <HAL_UART_RxCpltCallback>
}
 80116e8:	bf00      	nop
 80116ea:	3770      	adds	r7, #112	@ 0x70
 80116ec:	46bd      	mov	sp, r7
 80116ee:	bd80      	pop	{r7, pc}

080116f0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80116f0:	b580      	push	{r7, lr}
 80116f2:	b084      	sub	sp, #16
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80116fc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	2201      	movs	r2, #1
 8011702:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011708:	2b01      	cmp	r3, #1
 801170a:	d108      	bne.n	801171e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8011710:	085b      	lsrs	r3, r3, #1
 8011712:	b29b      	uxth	r3, r3
 8011714:	4619      	mov	r1, r3
 8011716:	68f8      	ldr	r0, [r7, #12]
 8011718:	f7ff ff48 	bl	80115ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801171c:	e002      	b.n	8011724 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 801171e:	68f8      	ldr	r0, [r7, #12]
 8011720:	f7ff ff26 	bl	8011570 <HAL_UART_RxHalfCpltCallback>
}
 8011724:	bf00      	nop
 8011726:	3710      	adds	r7, #16
 8011728:	46bd      	mov	sp, r7
 801172a:	bd80      	pop	{r7, pc}

0801172c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801172c:	b580      	push	{r7, lr}
 801172e:	b084      	sub	sp, #16
 8011730:	af00      	add	r7, sp, #0
 8011732:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8011734:	2300      	movs	r3, #0
 8011736:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801173c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 801173e:	68bb      	ldr	r3, [r7, #8]
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	695b      	ldr	r3, [r3, #20]
 8011744:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011748:	2b80      	cmp	r3, #128	@ 0x80
 801174a:	bf0c      	ite	eq
 801174c:	2301      	moveq	r3, #1
 801174e:	2300      	movne	r3, #0
 8011750:	b2db      	uxtb	r3, r3
 8011752:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8011754:	68bb      	ldr	r3, [r7, #8]
 8011756:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801175a:	b2db      	uxtb	r3, r3
 801175c:	2b21      	cmp	r3, #33	@ 0x21
 801175e:	d108      	bne.n	8011772 <UART_DMAError+0x46>
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d005      	beq.n	8011772 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8011766:	68bb      	ldr	r3, [r7, #8]
 8011768:	2200      	movs	r2, #0
 801176a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 801176c:	68b8      	ldr	r0, [r7, #8]
 801176e:	f000 f955 	bl	8011a1c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8011772:	68bb      	ldr	r3, [r7, #8]
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	695b      	ldr	r3, [r3, #20]
 8011778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801177c:	2b40      	cmp	r3, #64	@ 0x40
 801177e:	bf0c      	ite	eq
 8011780:	2301      	moveq	r3, #1
 8011782:	2300      	movne	r3, #0
 8011784:	b2db      	uxtb	r3, r3
 8011786:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8011788:	68bb      	ldr	r3, [r7, #8]
 801178a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801178e:	b2db      	uxtb	r3, r3
 8011790:	2b22      	cmp	r3, #34	@ 0x22
 8011792:	d108      	bne.n	80117a6 <UART_DMAError+0x7a>
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d005      	beq.n	80117a6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 801179a:	68bb      	ldr	r3, [r7, #8]
 801179c:	2200      	movs	r2, #0
 801179e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80117a0:	68b8      	ldr	r0, [r7, #8]
 80117a2:	f000 f963 	bl	8011a6c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80117a6:	68bb      	ldr	r3, [r7, #8]
 80117a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80117aa:	f043 0210 	orr.w	r2, r3, #16
 80117ae:	68bb      	ldr	r3, [r7, #8]
 80117b0:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80117b2:	68b8      	ldr	r0, [r7, #8]
 80117b4:	f7ff fee6 	bl	8011584 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80117b8:	bf00      	nop
 80117ba:	3710      	adds	r7, #16
 80117bc:	46bd      	mov	sp, r7
 80117be:	bd80      	pop	{r7, pc}

080117c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80117c0:	b580      	push	{r7, lr}
 80117c2:	b086      	sub	sp, #24
 80117c4:	af00      	add	r7, sp, #0
 80117c6:	60f8      	str	r0, [r7, #12]
 80117c8:	60b9      	str	r1, [r7, #8]
 80117ca:	603b      	str	r3, [r7, #0]
 80117cc:	4613      	mov	r3, r2
 80117ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80117d0:	e03b      	b.n	801184a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80117d2:	6a3b      	ldr	r3, [r7, #32]
 80117d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117d8:	d037      	beq.n	801184a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80117da:	f7fa ff65 	bl	800c6a8 <HAL_GetTick>
 80117de:	4602      	mov	r2, r0
 80117e0:	683b      	ldr	r3, [r7, #0]
 80117e2:	1ad3      	subs	r3, r2, r3
 80117e4:	6a3a      	ldr	r2, [r7, #32]
 80117e6:	429a      	cmp	r2, r3
 80117e8:	d302      	bcc.n	80117f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80117ea:	6a3b      	ldr	r3, [r7, #32]
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d101      	bne.n	80117f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80117f0:	2303      	movs	r3, #3
 80117f2:	e03a      	b.n	801186a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	68db      	ldr	r3, [r3, #12]
 80117fa:	f003 0304 	and.w	r3, r3, #4
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d023      	beq.n	801184a <UART_WaitOnFlagUntilTimeout+0x8a>
 8011802:	68bb      	ldr	r3, [r7, #8]
 8011804:	2b80      	cmp	r3, #128	@ 0x80
 8011806:	d020      	beq.n	801184a <UART_WaitOnFlagUntilTimeout+0x8a>
 8011808:	68bb      	ldr	r3, [r7, #8]
 801180a:	2b40      	cmp	r3, #64	@ 0x40
 801180c:	d01d      	beq.n	801184a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	f003 0308 	and.w	r3, r3, #8
 8011818:	2b08      	cmp	r3, #8
 801181a:	d116      	bne.n	801184a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 801181c:	2300      	movs	r3, #0
 801181e:	617b      	str	r3, [r7, #20]
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	617b      	str	r3, [r7, #20]
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	685b      	ldr	r3, [r3, #4]
 801182e:	617b      	str	r3, [r7, #20]
 8011830:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011832:	68f8      	ldr	r0, [r7, #12]
 8011834:	f000 f91a 	bl	8011a6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	2208      	movs	r2, #8
 801183c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	2200      	movs	r2, #0
 8011842:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8011846:	2301      	movs	r3, #1
 8011848:	e00f      	b.n	801186a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	681a      	ldr	r2, [r3, #0]
 8011850:	68bb      	ldr	r3, [r7, #8]
 8011852:	4013      	ands	r3, r2
 8011854:	68ba      	ldr	r2, [r7, #8]
 8011856:	429a      	cmp	r2, r3
 8011858:	bf0c      	ite	eq
 801185a:	2301      	moveq	r3, #1
 801185c:	2300      	movne	r3, #0
 801185e:	b2db      	uxtb	r3, r3
 8011860:	461a      	mov	r2, r3
 8011862:	79fb      	ldrb	r3, [r7, #7]
 8011864:	429a      	cmp	r2, r3
 8011866:	d0b4      	beq.n	80117d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011868:	2300      	movs	r3, #0
}
 801186a:	4618      	mov	r0, r3
 801186c:	3718      	adds	r7, #24
 801186e:	46bd      	mov	sp, r7
 8011870:	bd80      	pop	{r7, pc}

08011872 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011872:	b480      	push	{r7}
 8011874:	b085      	sub	sp, #20
 8011876:	af00      	add	r7, sp, #0
 8011878:	60f8      	str	r0, [r7, #12]
 801187a:	60b9      	str	r1, [r7, #8]
 801187c:	4613      	mov	r3, r2
 801187e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	68ba      	ldr	r2, [r7, #8]
 8011884:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	88fa      	ldrh	r2, [r7, #6]
 801188a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 801188c:	68fb      	ldr	r3, [r7, #12]
 801188e:	88fa      	ldrh	r2, [r7, #6]
 8011890:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	2200      	movs	r2, #0
 8011896:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	2222      	movs	r2, #34	@ 0x22
 801189c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	691b      	ldr	r3, [r3, #16]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d007      	beq.n	80118b8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	68da      	ldr	r2, [r3, #12]
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80118b6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	695a      	ldr	r2, [r3, #20]
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	f042 0201 	orr.w	r2, r2, #1
 80118c6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	68da      	ldr	r2, [r3, #12]
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	f042 0220 	orr.w	r2, r2, #32
 80118d6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80118d8:	2300      	movs	r3, #0
}
 80118da:	4618      	mov	r0, r3
 80118dc:	3714      	adds	r7, #20
 80118de:	46bd      	mov	sp, r7
 80118e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e4:	4770      	bx	lr
	...

080118e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80118e8:	b580      	push	{r7, lr}
 80118ea:	b098      	sub	sp, #96	@ 0x60
 80118ec:	af00      	add	r7, sp, #0
 80118ee:	60f8      	str	r0, [r7, #12]
 80118f0:	60b9      	str	r1, [r7, #8]
 80118f2:	4613      	mov	r3, r2
 80118f4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80118f6:	68ba      	ldr	r2, [r7, #8]
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	88fa      	ldrh	r2, [r7, #6]
 8011900:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	2200      	movs	r2, #0
 8011906:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	2222      	movs	r2, #34	@ 0x22
 801190c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011914:	4a3e      	ldr	r2, [pc, #248]	@ (8011a10 <UART_Start_Receive_DMA+0x128>)
 8011916:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801191c:	4a3d      	ldr	r2, [pc, #244]	@ (8011a14 <UART_Start_Receive_DMA+0x12c>)
 801191e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011924:	4a3c      	ldr	r2, [pc, #240]	@ (8011a18 <UART_Start_Receive_DMA+0x130>)
 8011926:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801192c:	2200      	movs	r2, #0
 801192e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8011930:	f107 0308 	add.w	r3, r7, #8
 8011934:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	3304      	adds	r3, #4
 8011940:	4619      	mov	r1, r3
 8011942:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011944:	681a      	ldr	r2, [r3, #0]
 8011946:	88fb      	ldrh	r3, [r7, #6]
 8011948:	f7fb fc6e 	bl	800d228 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 801194c:	2300      	movs	r3, #0
 801194e:	613b      	str	r3, [r7, #16]
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	613b      	str	r3, [r7, #16]
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	685b      	ldr	r3, [r3, #4]
 801195e:	613b      	str	r3, [r7, #16]
 8011960:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	691b      	ldr	r3, [r3, #16]
 8011966:	2b00      	cmp	r3, #0
 8011968:	d019      	beq.n	801199e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	330c      	adds	r3, #12
 8011970:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011972:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011974:	e853 3f00 	ldrex	r3, [r3]
 8011978:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801197a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801197c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011980:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	330c      	adds	r3, #12
 8011988:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801198a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 801198c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801198e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8011990:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011992:	e841 2300 	strex	r3, r2, [r1]
 8011996:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8011998:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801199a:	2b00      	cmp	r3, #0
 801199c:	d1e5      	bne.n	801196a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	3314      	adds	r3, #20
 80119a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119a8:	e853 3f00 	ldrex	r3, [r3]
 80119ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80119ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119b0:	f043 0301 	orr.w	r3, r3, #1
 80119b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	3314      	adds	r3, #20
 80119bc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80119be:	63ba      	str	r2, [r7, #56]	@ 0x38
 80119c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119c2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80119c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80119c6:	e841 2300 	strex	r3, r2, [r1]
 80119ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80119cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d1e5      	bne.n	801199e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	3314      	adds	r3, #20
 80119d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119da:	69bb      	ldr	r3, [r7, #24]
 80119dc:	e853 3f00 	ldrex	r3, [r3]
 80119e0:	617b      	str	r3, [r7, #20]
   return(result);
 80119e2:	697b      	ldr	r3, [r7, #20]
 80119e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80119e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	3314      	adds	r3, #20
 80119f0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80119f2:	627a      	str	r2, [r7, #36]	@ 0x24
 80119f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119f6:	6a39      	ldr	r1, [r7, #32]
 80119f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80119fa:	e841 2300 	strex	r3, r2, [r1]
 80119fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8011a00:	69fb      	ldr	r3, [r7, #28]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d1e5      	bne.n	80119d2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8011a06:	2300      	movs	r3, #0
}
 8011a08:	4618      	mov	r0, r3
 8011a0a:	3760      	adds	r7, #96	@ 0x60
 8011a0c:	46bd      	mov	sp, r7
 8011a0e:	bd80      	pop	{r7, pc}
 8011a10:	080115c5 	.word	0x080115c5
 8011a14:	080116f1 	.word	0x080116f1
 8011a18:	0801172d 	.word	0x0801172d

08011a1c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011a1c:	b480      	push	{r7}
 8011a1e:	b089      	sub	sp, #36	@ 0x24
 8011a20:	af00      	add	r7, sp, #0
 8011a22:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	330c      	adds	r3, #12
 8011a2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	e853 3f00 	ldrex	r3, [r3]
 8011a32:	60bb      	str	r3, [r7, #8]
   return(result);
 8011a34:	68bb      	ldr	r3, [r7, #8]
 8011a36:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8011a3a:	61fb      	str	r3, [r7, #28]
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	330c      	adds	r3, #12
 8011a42:	69fa      	ldr	r2, [r7, #28]
 8011a44:	61ba      	str	r2, [r7, #24]
 8011a46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a48:	6979      	ldr	r1, [r7, #20]
 8011a4a:	69ba      	ldr	r2, [r7, #24]
 8011a4c:	e841 2300 	strex	r3, r2, [r1]
 8011a50:	613b      	str	r3, [r7, #16]
   return(result);
 8011a52:	693b      	ldr	r3, [r7, #16]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d1e5      	bne.n	8011a24 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	2220      	movs	r2, #32
 8011a5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8011a60:	bf00      	nop
 8011a62:	3724      	adds	r7, #36	@ 0x24
 8011a64:	46bd      	mov	sp, r7
 8011a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a6a:	4770      	bx	lr

08011a6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011a6c:	b480      	push	{r7}
 8011a6e:	b095      	sub	sp, #84	@ 0x54
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	330c      	adds	r3, #12
 8011a7a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a7e:	e853 3f00 	ldrex	r3, [r3]
 8011a82:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011a8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	330c      	adds	r3, #12
 8011a92:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011a94:	643a      	str	r2, [r7, #64]	@ 0x40
 8011a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a98:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011a9a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011a9c:	e841 2300 	strex	r3, r2, [r1]
 8011aa0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d1e5      	bne.n	8011a74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	3314      	adds	r3, #20
 8011aae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ab0:	6a3b      	ldr	r3, [r7, #32]
 8011ab2:	e853 3f00 	ldrex	r3, [r3]
 8011ab6:	61fb      	str	r3, [r7, #28]
   return(result);
 8011ab8:	69fb      	ldr	r3, [r7, #28]
 8011aba:	f023 0301 	bic.w	r3, r3, #1
 8011abe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	3314      	adds	r3, #20
 8011ac6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011ac8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011aca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011acc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011ace:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011ad0:	e841 2300 	strex	r3, r2, [r1]
 8011ad4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d1e5      	bne.n	8011aa8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ae0:	2b01      	cmp	r3, #1
 8011ae2:	d119      	bne.n	8011b18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	330c      	adds	r3, #12
 8011aea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	e853 3f00 	ldrex	r3, [r3]
 8011af2:	60bb      	str	r3, [r7, #8]
   return(result);
 8011af4:	68bb      	ldr	r3, [r7, #8]
 8011af6:	f023 0310 	bic.w	r3, r3, #16
 8011afa:	647b      	str	r3, [r7, #68]	@ 0x44
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	330c      	adds	r3, #12
 8011b02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011b04:	61ba      	str	r2, [r7, #24]
 8011b06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b08:	6979      	ldr	r1, [r7, #20]
 8011b0a:	69ba      	ldr	r2, [r7, #24]
 8011b0c:	e841 2300 	strex	r3, r2, [r1]
 8011b10:	613b      	str	r3, [r7, #16]
   return(result);
 8011b12:	693b      	ldr	r3, [r7, #16]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d1e5      	bne.n	8011ae4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	2220      	movs	r2, #32
 8011b1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	2200      	movs	r2, #0
 8011b24:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8011b26:	bf00      	nop
 8011b28:	3754      	adds	r7, #84	@ 0x54
 8011b2a:	46bd      	mov	sp, r7
 8011b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b30:	4770      	bx	lr

08011b32 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011b32:	b580      	push	{r7, lr}
 8011b34:	b084      	sub	sp, #16
 8011b36:	af00      	add	r7, sp, #0
 8011b38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	2200      	movs	r2, #0
 8011b44:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	2200      	movs	r2, #0
 8011b4a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011b4c:	68f8      	ldr	r0, [r7, #12]
 8011b4e:	f7ff fd19 	bl	8011584 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011b52:	bf00      	nop
 8011b54:	3710      	adds	r7, #16
 8011b56:	46bd      	mov	sp, r7
 8011b58:	bd80      	pop	{r7, pc}

08011b5a <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8011b5a:	b580      	push	{r7, lr}
 8011b5c:	b084      	sub	sp, #16
 8011b5e:	af00      	add	r7, sp, #0
 8011b60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b66:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	2200      	movs	r2, #0
 8011b6c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	2220      	movs	r2, #32
 8011b72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	2200      	movs	r2, #0
 8011b7a:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8011b7c:	68f8      	ldr	r0, [r7, #12]
 8011b7e:	f7ff fd0b 	bl	8011598 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011b82:	bf00      	nop
 8011b84:	3710      	adds	r7, #16
 8011b86:	46bd      	mov	sp, r7
 8011b88:	bd80      	pop	{r7, pc}

08011b8a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8011b8a:	b480      	push	{r7}
 8011b8c:	b085      	sub	sp, #20
 8011b8e:	af00      	add	r7, sp, #0
 8011b90:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011b98:	b2db      	uxtb	r3, r3
 8011b9a:	2b21      	cmp	r3, #33	@ 0x21
 8011b9c:	d13e      	bne.n	8011c1c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	689b      	ldr	r3, [r3, #8]
 8011ba2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011ba6:	d114      	bne.n	8011bd2 <UART_Transmit_IT+0x48>
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	691b      	ldr	r3, [r3, #16]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d110      	bne.n	8011bd2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	6a1b      	ldr	r3, [r3, #32]
 8011bb4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	881b      	ldrh	r3, [r3, #0]
 8011bba:	461a      	mov	r2, r3
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011bc4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	6a1b      	ldr	r3, [r3, #32]
 8011bca:	1c9a      	adds	r2, r3, #2
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	621a      	str	r2, [r3, #32]
 8011bd0:	e008      	b.n	8011be4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	6a1b      	ldr	r3, [r3, #32]
 8011bd6:	1c59      	adds	r1, r3, #1
 8011bd8:	687a      	ldr	r2, [r7, #4]
 8011bda:	6211      	str	r1, [r2, #32]
 8011bdc:	781a      	ldrb	r2, [r3, #0]
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8011be8:	b29b      	uxth	r3, r3
 8011bea:	3b01      	subs	r3, #1
 8011bec:	b29b      	uxth	r3, r3
 8011bee:	687a      	ldr	r2, [r7, #4]
 8011bf0:	4619      	mov	r1, r3
 8011bf2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d10f      	bne.n	8011c18 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	68da      	ldr	r2, [r3, #12]
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8011c06:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	68da      	ldr	r2, [r3, #12]
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011c16:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8011c18:	2300      	movs	r3, #0
 8011c1a:	e000      	b.n	8011c1e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8011c1c:	2302      	movs	r3, #2
  }
}
 8011c1e:	4618      	mov	r0, r3
 8011c20:	3714      	adds	r7, #20
 8011c22:	46bd      	mov	sp, r7
 8011c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c28:	4770      	bx	lr

08011c2a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011c2a:	b580      	push	{r7, lr}
 8011c2c:	b082      	sub	sp, #8
 8011c2e:	af00      	add	r7, sp, #0
 8011c30:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	68da      	ldr	r2, [r3, #12]
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8011c40:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	2220      	movs	r2, #32
 8011c46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011c4a:	6878      	ldr	r0, [r7, #4]
 8011c4c:	f7ff fc7c 	bl	8011548 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8011c50:	2300      	movs	r3, #0
}
 8011c52:	4618      	mov	r0, r3
 8011c54:	3708      	adds	r7, #8
 8011c56:	46bd      	mov	sp, r7
 8011c58:	bd80      	pop	{r7, pc}

08011c5a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8011c5a:	b580      	push	{r7, lr}
 8011c5c:	b08c      	sub	sp, #48	@ 0x30
 8011c5e:	af00      	add	r7, sp, #0
 8011c60:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011c68:	b2db      	uxtb	r3, r3
 8011c6a:	2b22      	cmp	r3, #34	@ 0x22
 8011c6c:	f040 80ae 	bne.w	8011dcc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	689b      	ldr	r3, [r3, #8]
 8011c74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011c78:	d117      	bne.n	8011caa <UART_Receive_IT+0x50>
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	691b      	ldr	r3, [r3, #16]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d113      	bne.n	8011caa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8011c82:	2300      	movs	r3, #0
 8011c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	685b      	ldr	r3, [r3, #4]
 8011c92:	b29b      	uxth	r3, r3
 8011c94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011c98:	b29a      	uxth	r2, r3
 8011c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c9c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ca2:	1c9a      	adds	r2, r3, #2
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	629a      	str	r2, [r3, #40]	@ 0x28
 8011ca8:	e026      	b.n	8011cf8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8011cb0:	2300      	movs	r3, #0
 8011cb2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	689b      	ldr	r3, [r3, #8]
 8011cb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011cbc:	d007      	beq.n	8011cce <UART_Receive_IT+0x74>
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	689b      	ldr	r3, [r3, #8]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d10a      	bne.n	8011cdc <UART_Receive_IT+0x82>
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	691b      	ldr	r3, [r3, #16]
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d106      	bne.n	8011cdc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	685b      	ldr	r3, [r3, #4]
 8011cd4:	b2da      	uxtb	r2, r3
 8011cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cd8:	701a      	strb	r2, [r3, #0]
 8011cda:	e008      	b.n	8011cee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	685b      	ldr	r3, [r3, #4]
 8011ce2:	b2db      	uxtb	r3, r3
 8011ce4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011ce8:	b2da      	uxtb	r2, r3
 8011cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011cf2:	1c5a      	adds	r2, r3, #1
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8011cfc:	b29b      	uxth	r3, r3
 8011cfe:	3b01      	subs	r3, #1
 8011d00:	b29b      	uxth	r3, r3
 8011d02:	687a      	ldr	r2, [r7, #4]
 8011d04:	4619      	mov	r1, r3
 8011d06:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d15d      	bne.n	8011dc8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	68da      	ldr	r2, [r3, #12]
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	f022 0220 	bic.w	r2, r2, #32
 8011d1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	68da      	ldr	r2, [r3, #12]
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8011d2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	695a      	ldr	r2, [r3, #20]
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	f022 0201 	bic.w	r2, r2, #1
 8011d3a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	2220      	movs	r2, #32
 8011d40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	2200      	movs	r2, #0
 8011d48:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d4e:	2b01      	cmp	r3, #1
 8011d50:	d135      	bne.n	8011dbe <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	2200      	movs	r2, #0
 8011d56:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	330c      	adds	r3, #12
 8011d5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d60:	697b      	ldr	r3, [r7, #20]
 8011d62:	e853 3f00 	ldrex	r3, [r3]
 8011d66:	613b      	str	r3, [r7, #16]
   return(result);
 8011d68:	693b      	ldr	r3, [r7, #16]
 8011d6a:	f023 0310 	bic.w	r3, r3, #16
 8011d6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	330c      	adds	r3, #12
 8011d76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011d78:	623a      	str	r2, [r7, #32]
 8011d7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d7c:	69f9      	ldr	r1, [r7, #28]
 8011d7e:	6a3a      	ldr	r2, [r7, #32]
 8011d80:	e841 2300 	strex	r3, r2, [r1]
 8011d84:	61bb      	str	r3, [r7, #24]
   return(result);
 8011d86:	69bb      	ldr	r3, [r7, #24]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d1e5      	bne.n	8011d58 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	f003 0310 	and.w	r3, r3, #16
 8011d96:	2b10      	cmp	r3, #16
 8011d98:	d10a      	bne.n	8011db0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8011d9a:	2300      	movs	r3, #0
 8011d9c:	60fb      	str	r3, [r7, #12]
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	60fb      	str	r3, [r7, #12]
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	685b      	ldr	r3, [r3, #4]
 8011dac:	60fb      	str	r3, [r7, #12]
 8011dae:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8011db4:	4619      	mov	r1, r3
 8011db6:	6878      	ldr	r0, [r7, #4]
 8011db8:	f7ff fbf8 	bl	80115ac <HAL_UARTEx_RxEventCallback>
 8011dbc:	e002      	b.n	8011dc4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8011dbe:	6878      	ldr	r0, [r7, #4]
 8011dc0:	f7ff fbcc 	bl	801155c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8011dc4:	2300      	movs	r3, #0
 8011dc6:	e002      	b.n	8011dce <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8011dc8:	2300      	movs	r3, #0
 8011dca:	e000      	b.n	8011dce <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8011dcc:	2302      	movs	r3, #2
  }
}
 8011dce:	4618      	mov	r0, r3
 8011dd0:	3730      	adds	r7, #48	@ 0x30
 8011dd2:	46bd      	mov	sp, r7
 8011dd4:	bd80      	pop	{r7, pc}
	...

08011dd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011ddc:	b0c0      	sub	sp, #256	@ 0x100
 8011dde:	af00      	add	r7, sp, #0
 8011de0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	691b      	ldr	r3, [r3, #16]
 8011dec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8011df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011df4:	68d9      	ldr	r1, [r3, #12]
 8011df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011dfa:	681a      	ldr	r2, [r3, #0]
 8011dfc:	ea40 0301 	orr.w	r3, r0, r1
 8011e00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8011e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011e06:	689a      	ldr	r2, [r3, #8]
 8011e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011e0c:	691b      	ldr	r3, [r3, #16]
 8011e0e:	431a      	orrs	r2, r3
 8011e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011e14:	695b      	ldr	r3, [r3, #20]
 8011e16:	431a      	orrs	r2, r3
 8011e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011e1c:	69db      	ldr	r3, [r3, #28]
 8011e1e:	4313      	orrs	r3, r2
 8011e20:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8011e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	68db      	ldr	r3, [r3, #12]
 8011e2c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8011e30:	f021 010c 	bic.w	r1, r1, #12
 8011e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011e38:	681a      	ldr	r2, [r3, #0]
 8011e3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8011e3e:	430b      	orrs	r3, r1
 8011e40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8011e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	695b      	ldr	r3, [r3, #20]
 8011e4a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8011e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011e52:	6999      	ldr	r1, [r3, #24]
 8011e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011e58:	681a      	ldr	r2, [r3, #0]
 8011e5a:	ea40 0301 	orr.w	r3, r0, r1
 8011e5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8011e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011e64:	681a      	ldr	r2, [r3, #0]
 8011e66:	4b8f      	ldr	r3, [pc, #572]	@ (80120a4 <UART_SetConfig+0x2cc>)
 8011e68:	429a      	cmp	r2, r3
 8011e6a:	d005      	beq.n	8011e78 <UART_SetConfig+0xa0>
 8011e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011e70:	681a      	ldr	r2, [r3, #0]
 8011e72:	4b8d      	ldr	r3, [pc, #564]	@ (80120a8 <UART_SetConfig+0x2d0>)
 8011e74:	429a      	cmp	r2, r3
 8011e76:	d104      	bne.n	8011e82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8011e78:	f7fc fba0 	bl	800e5bc <HAL_RCC_GetPCLK2Freq>
 8011e7c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8011e80:	e003      	b.n	8011e8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8011e82:	f7fc fb87 	bl	800e594 <HAL_RCC_GetPCLK1Freq>
 8011e86:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011e8e:	69db      	ldr	r3, [r3, #28]
 8011e90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011e94:	f040 810c 	bne.w	80120b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8011e98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011e9c:	2200      	movs	r2, #0
 8011e9e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8011ea2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8011ea6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8011eaa:	4622      	mov	r2, r4
 8011eac:	462b      	mov	r3, r5
 8011eae:	1891      	adds	r1, r2, r2
 8011eb0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8011eb2:	415b      	adcs	r3, r3
 8011eb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011eb6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8011eba:	4621      	mov	r1, r4
 8011ebc:	eb12 0801 	adds.w	r8, r2, r1
 8011ec0:	4629      	mov	r1, r5
 8011ec2:	eb43 0901 	adc.w	r9, r3, r1
 8011ec6:	f04f 0200 	mov.w	r2, #0
 8011eca:	f04f 0300 	mov.w	r3, #0
 8011ece:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8011ed2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8011ed6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8011eda:	4690      	mov	r8, r2
 8011edc:	4699      	mov	r9, r3
 8011ede:	4623      	mov	r3, r4
 8011ee0:	eb18 0303 	adds.w	r3, r8, r3
 8011ee4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8011ee8:	462b      	mov	r3, r5
 8011eea:	eb49 0303 	adc.w	r3, r9, r3
 8011eee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8011ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011ef6:	685b      	ldr	r3, [r3, #4]
 8011ef8:	2200      	movs	r2, #0
 8011efa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8011efe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8011f02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8011f06:	460b      	mov	r3, r1
 8011f08:	18db      	adds	r3, r3, r3
 8011f0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8011f0c:	4613      	mov	r3, r2
 8011f0e:	eb42 0303 	adc.w	r3, r2, r3
 8011f12:	657b      	str	r3, [r7, #84]	@ 0x54
 8011f14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8011f18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8011f1c:	f7ee feac 	bl	8000c78 <__aeabi_uldivmod>
 8011f20:	4602      	mov	r2, r0
 8011f22:	460b      	mov	r3, r1
 8011f24:	4b61      	ldr	r3, [pc, #388]	@ (80120ac <UART_SetConfig+0x2d4>)
 8011f26:	fba3 2302 	umull	r2, r3, r3, r2
 8011f2a:	095b      	lsrs	r3, r3, #5
 8011f2c:	011c      	lsls	r4, r3, #4
 8011f2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011f32:	2200      	movs	r2, #0
 8011f34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8011f38:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8011f3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8011f40:	4642      	mov	r2, r8
 8011f42:	464b      	mov	r3, r9
 8011f44:	1891      	adds	r1, r2, r2
 8011f46:	64b9      	str	r1, [r7, #72]	@ 0x48
 8011f48:	415b      	adcs	r3, r3
 8011f4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011f4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8011f50:	4641      	mov	r1, r8
 8011f52:	eb12 0a01 	adds.w	sl, r2, r1
 8011f56:	4649      	mov	r1, r9
 8011f58:	eb43 0b01 	adc.w	fp, r3, r1
 8011f5c:	f04f 0200 	mov.w	r2, #0
 8011f60:	f04f 0300 	mov.w	r3, #0
 8011f64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8011f68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8011f6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011f70:	4692      	mov	sl, r2
 8011f72:	469b      	mov	fp, r3
 8011f74:	4643      	mov	r3, r8
 8011f76:	eb1a 0303 	adds.w	r3, sl, r3
 8011f7a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8011f7e:	464b      	mov	r3, r9
 8011f80:	eb4b 0303 	adc.w	r3, fp, r3
 8011f84:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8011f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011f8c:	685b      	ldr	r3, [r3, #4]
 8011f8e:	2200      	movs	r2, #0
 8011f90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8011f94:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8011f98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8011f9c:	460b      	mov	r3, r1
 8011f9e:	18db      	adds	r3, r3, r3
 8011fa0:	643b      	str	r3, [r7, #64]	@ 0x40
 8011fa2:	4613      	mov	r3, r2
 8011fa4:	eb42 0303 	adc.w	r3, r2, r3
 8011fa8:	647b      	str	r3, [r7, #68]	@ 0x44
 8011faa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8011fae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8011fb2:	f7ee fe61 	bl	8000c78 <__aeabi_uldivmod>
 8011fb6:	4602      	mov	r2, r0
 8011fb8:	460b      	mov	r3, r1
 8011fba:	4611      	mov	r1, r2
 8011fbc:	4b3b      	ldr	r3, [pc, #236]	@ (80120ac <UART_SetConfig+0x2d4>)
 8011fbe:	fba3 2301 	umull	r2, r3, r3, r1
 8011fc2:	095b      	lsrs	r3, r3, #5
 8011fc4:	2264      	movs	r2, #100	@ 0x64
 8011fc6:	fb02 f303 	mul.w	r3, r2, r3
 8011fca:	1acb      	subs	r3, r1, r3
 8011fcc:	00db      	lsls	r3, r3, #3
 8011fce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8011fd2:	4b36      	ldr	r3, [pc, #216]	@ (80120ac <UART_SetConfig+0x2d4>)
 8011fd4:	fba3 2302 	umull	r2, r3, r3, r2
 8011fd8:	095b      	lsrs	r3, r3, #5
 8011fda:	005b      	lsls	r3, r3, #1
 8011fdc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8011fe0:	441c      	add	r4, r3
 8011fe2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011fe6:	2200      	movs	r2, #0
 8011fe8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8011fec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8011ff0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8011ff4:	4642      	mov	r2, r8
 8011ff6:	464b      	mov	r3, r9
 8011ff8:	1891      	adds	r1, r2, r2
 8011ffa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8011ffc:	415b      	adcs	r3, r3
 8011ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012000:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8012004:	4641      	mov	r1, r8
 8012006:	1851      	adds	r1, r2, r1
 8012008:	6339      	str	r1, [r7, #48]	@ 0x30
 801200a:	4649      	mov	r1, r9
 801200c:	414b      	adcs	r3, r1
 801200e:	637b      	str	r3, [r7, #52]	@ 0x34
 8012010:	f04f 0200 	mov.w	r2, #0
 8012014:	f04f 0300 	mov.w	r3, #0
 8012018:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 801201c:	4659      	mov	r1, fp
 801201e:	00cb      	lsls	r3, r1, #3
 8012020:	4651      	mov	r1, sl
 8012022:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012026:	4651      	mov	r1, sl
 8012028:	00ca      	lsls	r2, r1, #3
 801202a:	4610      	mov	r0, r2
 801202c:	4619      	mov	r1, r3
 801202e:	4603      	mov	r3, r0
 8012030:	4642      	mov	r2, r8
 8012032:	189b      	adds	r3, r3, r2
 8012034:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8012038:	464b      	mov	r3, r9
 801203a:	460a      	mov	r2, r1
 801203c:	eb42 0303 	adc.w	r3, r2, r3
 8012040:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8012044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012048:	685b      	ldr	r3, [r3, #4]
 801204a:	2200      	movs	r2, #0
 801204c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8012050:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8012054:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8012058:	460b      	mov	r3, r1
 801205a:	18db      	adds	r3, r3, r3
 801205c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801205e:	4613      	mov	r3, r2
 8012060:	eb42 0303 	adc.w	r3, r2, r3
 8012064:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012066:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 801206a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 801206e:	f7ee fe03 	bl	8000c78 <__aeabi_uldivmod>
 8012072:	4602      	mov	r2, r0
 8012074:	460b      	mov	r3, r1
 8012076:	4b0d      	ldr	r3, [pc, #52]	@ (80120ac <UART_SetConfig+0x2d4>)
 8012078:	fba3 1302 	umull	r1, r3, r3, r2
 801207c:	095b      	lsrs	r3, r3, #5
 801207e:	2164      	movs	r1, #100	@ 0x64
 8012080:	fb01 f303 	mul.w	r3, r1, r3
 8012084:	1ad3      	subs	r3, r2, r3
 8012086:	00db      	lsls	r3, r3, #3
 8012088:	3332      	adds	r3, #50	@ 0x32
 801208a:	4a08      	ldr	r2, [pc, #32]	@ (80120ac <UART_SetConfig+0x2d4>)
 801208c:	fba2 2303 	umull	r2, r3, r2, r3
 8012090:	095b      	lsrs	r3, r3, #5
 8012092:	f003 0207 	and.w	r2, r3, #7
 8012096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	4422      	add	r2, r4
 801209e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80120a0:	e106      	b.n	80122b0 <UART_SetConfig+0x4d8>
 80120a2:	bf00      	nop
 80120a4:	40011000 	.word	0x40011000
 80120a8:	40011400 	.word	0x40011400
 80120ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80120b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80120b4:	2200      	movs	r2, #0
 80120b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80120ba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80120be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80120c2:	4642      	mov	r2, r8
 80120c4:	464b      	mov	r3, r9
 80120c6:	1891      	adds	r1, r2, r2
 80120c8:	6239      	str	r1, [r7, #32]
 80120ca:	415b      	adcs	r3, r3
 80120cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80120ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80120d2:	4641      	mov	r1, r8
 80120d4:	1854      	adds	r4, r2, r1
 80120d6:	4649      	mov	r1, r9
 80120d8:	eb43 0501 	adc.w	r5, r3, r1
 80120dc:	f04f 0200 	mov.w	r2, #0
 80120e0:	f04f 0300 	mov.w	r3, #0
 80120e4:	00eb      	lsls	r3, r5, #3
 80120e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80120ea:	00e2      	lsls	r2, r4, #3
 80120ec:	4614      	mov	r4, r2
 80120ee:	461d      	mov	r5, r3
 80120f0:	4643      	mov	r3, r8
 80120f2:	18e3      	adds	r3, r4, r3
 80120f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80120f8:	464b      	mov	r3, r9
 80120fa:	eb45 0303 	adc.w	r3, r5, r3
 80120fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012106:	685b      	ldr	r3, [r3, #4]
 8012108:	2200      	movs	r2, #0
 801210a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801210e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8012112:	f04f 0200 	mov.w	r2, #0
 8012116:	f04f 0300 	mov.w	r3, #0
 801211a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 801211e:	4629      	mov	r1, r5
 8012120:	008b      	lsls	r3, r1, #2
 8012122:	4621      	mov	r1, r4
 8012124:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8012128:	4621      	mov	r1, r4
 801212a:	008a      	lsls	r2, r1, #2
 801212c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8012130:	f7ee fda2 	bl	8000c78 <__aeabi_uldivmod>
 8012134:	4602      	mov	r2, r0
 8012136:	460b      	mov	r3, r1
 8012138:	4b60      	ldr	r3, [pc, #384]	@ (80122bc <UART_SetConfig+0x4e4>)
 801213a:	fba3 2302 	umull	r2, r3, r3, r2
 801213e:	095b      	lsrs	r3, r3, #5
 8012140:	011c      	lsls	r4, r3, #4
 8012142:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8012146:	2200      	movs	r2, #0
 8012148:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801214c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8012150:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8012154:	4642      	mov	r2, r8
 8012156:	464b      	mov	r3, r9
 8012158:	1891      	adds	r1, r2, r2
 801215a:	61b9      	str	r1, [r7, #24]
 801215c:	415b      	adcs	r3, r3
 801215e:	61fb      	str	r3, [r7, #28]
 8012160:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8012164:	4641      	mov	r1, r8
 8012166:	1851      	adds	r1, r2, r1
 8012168:	6139      	str	r1, [r7, #16]
 801216a:	4649      	mov	r1, r9
 801216c:	414b      	adcs	r3, r1
 801216e:	617b      	str	r3, [r7, #20]
 8012170:	f04f 0200 	mov.w	r2, #0
 8012174:	f04f 0300 	mov.w	r3, #0
 8012178:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801217c:	4659      	mov	r1, fp
 801217e:	00cb      	lsls	r3, r1, #3
 8012180:	4651      	mov	r1, sl
 8012182:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012186:	4651      	mov	r1, sl
 8012188:	00ca      	lsls	r2, r1, #3
 801218a:	4610      	mov	r0, r2
 801218c:	4619      	mov	r1, r3
 801218e:	4603      	mov	r3, r0
 8012190:	4642      	mov	r2, r8
 8012192:	189b      	adds	r3, r3, r2
 8012194:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012198:	464b      	mov	r3, r9
 801219a:	460a      	mov	r2, r1
 801219c:	eb42 0303 	adc.w	r3, r2, r3
 80121a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80121a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80121a8:	685b      	ldr	r3, [r3, #4]
 80121aa:	2200      	movs	r2, #0
 80121ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80121ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80121b0:	f04f 0200 	mov.w	r2, #0
 80121b4:	f04f 0300 	mov.w	r3, #0
 80121b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80121bc:	4649      	mov	r1, r9
 80121be:	008b      	lsls	r3, r1, #2
 80121c0:	4641      	mov	r1, r8
 80121c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80121c6:	4641      	mov	r1, r8
 80121c8:	008a      	lsls	r2, r1, #2
 80121ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80121ce:	f7ee fd53 	bl	8000c78 <__aeabi_uldivmod>
 80121d2:	4602      	mov	r2, r0
 80121d4:	460b      	mov	r3, r1
 80121d6:	4611      	mov	r1, r2
 80121d8:	4b38      	ldr	r3, [pc, #224]	@ (80122bc <UART_SetConfig+0x4e4>)
 80121da:	fba3 2301 	umull	r2, r3, r3, r1
 80121de:	095b      	lsrs	r3, r3, #5
 80121e0:	2264      	movs	r2, #100	@ 0x64
 80121e2:	fb02 f303 	mul.w	r3, r2, r3
 80121e6:	1acb      	subs	r3, r1, r3
 80121e8:	011b      	lsls	r3, r3, #4
 80121ea:	3332      	adds	r3, #50	@ 0x32
 80121ec:	4a33      	ldr	r2, [pc, #204]	@ (80122bc <UART_SetConfig+0x4e4>)
 80121ee:	fba2 2303 	umull	r2, r3, r2, r3
 80121f2:	095b      	lsrs	r3, r3, #5
 80121f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80121f8:	441c      	add	r4, r3
 80121fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80121fe:	2200      	movs	r2, #0
 8012200:	673b      	str	r3, [r7, #112]	@ 0x70
 8012202:	677a      	str	r2, [r7, #116]	@ 0x74
 8012204:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8012208:	4642      	mov	r2, r8
 801220a:	464b      	mov	r3, r9
 801220c:	1891      	adds	r1, r2, r2
 801220e:	60b9      	str	r1, [r7, #8]
 8012210:	415b      	adcs	r3, r3
 8012212:	60fb      	str	r3, [r7, #12]
 8012214:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012218:	4641      	mov	r1, r8
 801221a:	1851      	adds	r1, r2, r1
 801221c:	6039      	str	r1, [r7, #0]
 801221e:	4649      	mov	r1, r9
 8012220:	414b      	adcs	r3, r1
 8012222:	607b      	str	r3, [r7, #4]
 8012224:	f04f 0200 	mov.w	r2, #0
 8012228:	f04f 0300 	mov.w	r3, #0
 801222c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8012230:	4659      	mov	r1, fp
 8012232:	00cb      	lsls	r3, r1, #3
 8012234:	4651      	mov	r1, sl
 8012236:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801223a:	4651      	mov	r1, sl
 801223c:	00ca      	lsls	r2, r1, #3
 801223e:	4610      	mov	r0, r2
 8012240:	4619      	mov	r1, r3
 8012242:	4603      	mov	r3, r0
 8012244:	4642      	mov	r2, r8
 8012246:	189b      	adds	r3, r3, r2
 8012248:	66bb      	str	r3, [r7, #104]	@ 0x68
 801224a:	464b      	mov	r3, r9
 801224c:	460a      	mov	r2, r1
 801224e:	eb42 0303 	adc.w	r3, r2, r3
 8012252:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8012258:	685b      	ldr	r3, [r3, #4]
 801225a:	2200      	movs	r2, #0
 801225c:	663b      	str	r3, [r7, #96]	@ 0x60
 801225e:	667a      	str	r2, [r7, #100]	@ 0x64
 8012260:	f04f 0200 	mov.w	r2, #0
 8012264:	f04f 0300 	mov.w	r3, #0
 8012268:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 801226c:	4649      	mov	r1, r9
 801226e:	008b      	lsls	r3, r1, #2
 8012270:	4641      	mov	r1, r8
 8012272:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8012276:	4641      	mov	r1, r8
 8012278:	008a      	lsls	r2, r1, #2
 801227a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 801227e:	f7ee fcfb 	bl	8000c78 <__aeabi_uldivmod>
 8012282:	4602      	mov	r2, r0
 8012284:	460b      	mov	r3, r1
 8012286:	4b0d      	ldr	r3, [pc, #52]	@ (80122bc <UART_SetConfig+0x4e4>)
 8012288:	fba3 1302 	umull	r1, r3, r3, r2
 801228c:	095b      	lsrs	r3, r3, #5
 801228e:	2164      	movs	r1, #100	@ 0x64
 8012290:	fb01 f303 	mul.w	r3, r1, r3
 8012294:	1ad3      	subs	r3, r2, r3
 8012296:	011b      	lsls	r3, r3, #4
 8012298:	3332      	adds	r3, #50	@ 0x32
 801229a:	4a08      	ldr	r2, [pc, #32]	@ (80122bc <UART_SetConfig+0x4e4>)
 801229c:	fba2 2303 	umull	r2, r3, r2, r3
 80122a0:	095b      	lsrs	r3, r3, #5
 80122a2:	f003 020f 	and.w	r2, r3, #15
 80122a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	4422      	add	r2, r4
 80122ae:	609a      	str	r2, [r3, #8]
}
 80122b0:	bf00      	nop
 80122b2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80122b6:	46bd      	mov	sp, r7
 80122b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80122bc:	51eb851f 	.word	0x51eb851f

080122c0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80122c0:	b480      	push	{r7}
 80122c2:	b085      	sub	sp, #20
 80122c4:	af00      	add	r7, sp, #0
 80122c6:	4603      	mov	r3, r0
 80122c8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80122ca:	2300      	movs	r3, #0
 80122cc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80122ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80122d2:	2b84      	cmp	r3, #132	@ 0x84
 80122d4:	d005      	beq.n	80122e2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80122d6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	4413      	add	r3, r2
 80122de:	3303      	adds	r3, #3
 80122e0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80122e2:	68fb      	ldr	r3, [r7, #12]
}
 80122e4:	4618      	mov	r0, r3
 80122e6:	3714      	adds	r7, #20
 80122e8:	46bd      	mov	sp, r7
 80122ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ee:	4770      	bx	lr

080122f0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80122f0:	b480      	push	{r7}
 80122f2:	b083      	sub	sp, #12
 80122f4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80122f6:	f3ef 8305 	mrs	r3, IPSR
 80122fa:	607b      	str	r3, [r7, #4]
  return(result);
 80122fc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80122fe:	2b00      	cmp	r3, #0
 8012300:	bf14      	ite	ne
 8012302:	2301      	movne	r3, #1
 8012304:	2300      	moveq	r3, #0
 8012306:	b2db      	uxtb	r3, r3
}
 8012308:	4618      	mov	r0, r3
 801230a:	370c      	adds	r7, #12
 801230c:	46bd      	mov	sp, r7
 801230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012312:	4770      	bx	lr

08012314 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8012314:	b580      	push	{r7, lr}
 8012316:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8012318:	f001 fa3a 	bl	8013790 <vTaskStartScheduler>
  
  return osOK;
 801231c:	2300      	movs	r3, #0
}
 801231e:	4618      	mov	r0, r3
 8012320:	bd80      	pop	{r7, pc}

08012322 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8012322:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012324:	b089      	sub	sp, #36	@ 0x24
 8012326:	af04      	add	r7, sp, #16
 8012328:	6078      	str	r0, [r7, #4]
 801232a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	695b      	ldr	r3, [r3, #20]
 8012330:	2b00      	cmp	r3, #0
 8012332:	d020      	beq.n	8012376 <osThreadCreate+0x54>
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	699b      	ldr	r3, [r3, #24]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d01c      	beq.n	8012376 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	685c      	ldr	r4, [r3, #4]
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	691e      	ldr	r6, [r3, #16]
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801234e:	4618      	mov	r0, r3
 8012350:	f7ff ffb6 	bl	80122c0 <makeFreeRtosPriority>
 8012354:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	695b      	ldr	r3, [r3, #20]
 801235a:	687a      	ldr	r2, [r7, #4]
 801235c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801235e:	9202      	str	r2, [sp, #8]
 8012360:	9301      	str	r3, [sp, #4]
 8012362:	9100      	str	r1, [sp, #0]
 8012364:	683b      	ldr	r3, [r7, #0]
 8012366:	4632      	mov	r2, r6
 8012368:	4629      	mov	r1, r5
 801236a:	4620      	mov	r0, r4
 801236c:	f000 ff06 	bl	801317c <xTaskCreateStatic>
 8012370:	4603      	mov	r3, r0
 8012372:	60fb      	str	r3, [r7, #12]
 8012374:	e01c      	b.n	80123b0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	685c      	ldr	r4, [r3, #4]
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012382:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801238a:	4618      	mov	r0, r3
 801238c:	f7ff ff98 	bl	80122c0 <makeFreeRtosPriority>
 8012390:	4602      	mov	r2, r0
 8012392:	f107 030c 	add.w	r3, r7, #12
 8012396:	9301      	str	r3, [sp, #4]
 8012398:	9200      	str	r2, [sp, #0]
 801239a:	683b      	ldr	r3, [r7, #0]
 801239c:	4632      	mov	r2, r6
 801239e:	4629      	mov	r1, r5
 80123a0:	4620      	mov	r0, r4
 80123a2:	f000 ff4b 	bl	801323c <xTaskCreate>
 80123a6:	4603      	mov	r3, r0
 80123a8:	2b01      	cmp	r3, #1
 80123aa:	d001      	beq.n	80123b0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80123ac:	2300      	movs	r3, #0
 80123ae:	e000      	b.n	80123b2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80123b0:	68fb      	ldr	r3, [r7, #12]
}
 80123b2:	4618      	mov	r0, r3
 80123b4:	3714      	adds	r7, #20
 80123b6:	46bd      	mov	sp, r7
 80123b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080123ba <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80123ba:	b580      	push	{r7, lr}
 80123bc:	b084      	sub	sp, #16
 80123be:	af00      	add	r7, sp, #0
 80123c0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d001      	beq.n	80123d0 <osDelay+0x16>
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	e000      	b.n	80123d2 <osDelay+0x18>
 80123d0:	2301      	movs	r3, #1
 80123d2:	4618      	mov	r0, r3
 80123d4:	f001 f882 	bl	80134dc <vTaskDelay>
  
  return osOK;
 80123d8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80123da:	4618      	mov	r0, r3
 80123dc:	3710      	adds	r7, #16
 80123de:	46bd      	mov	sp, r7
 80123e0:	bd80      	pop	{r7, pc}
	...

080123e4 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80123e4:	b580      	push	{r7, lr}
 80123e6:	b086      	sub	sp, #24
 80123e8:	af02      	add	r7, sp, #8
 80123ea:	60f8      	str	r0, [r7, #12]
 80123ec:	460b      	mov	r3, r1
 80123ee:	607a      	str	r2, [r7, #4]
 80123f0:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	685b      	ldr	r3, [r3, #4]
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d013      	beq.n	8012422 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 80123fa:	7afb      	ldrb	r3, [r7, #11]
 80123fc:	2b01      	cmp	r3, #1
 80123fe:	d101      	bne.n	8012404 <osTimerCreate+0x20>
 8012400:	2101      	movs	r1, #1
 8012402:	e000      	b.n	8012406 <osTimerCreate+0x22>
 8012404:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 801240a:	68fa      	ldr	r2, [r7, #12]
 801240c:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 801240e:	9201      	str	r2, [sp, #4]
 8012410:	9300      	str	r3, [sp, #0]
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	460a      	mov	r2, r1
 8012416:	2101      	movs	r1, #1
 8012418:	480b      	ldr	r0, [pc, #44]	@ (8012448 <osTimerCreate+0x64>)
 801241a:	f001 ff92 	bl	8014342 <xTimerCreateStatic>
 801241e:	4603      	mov	r3, r0
 8012420:	e00e      	b.n	8012440 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8012422:	7afb      	ldrb	r3, [r7, #11]
 8012424:	2b01      	cmp	r3, #1
 8012426:	d101      	bne.n	801242c <osTimerCreate+0x48>
 8012428:	2201      	movs	r2, #1
 801242a:	e000      	b.n	801242e <osTimerCreate+0x4a>
 801242c:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8012432:	9300      	str	r3, [sp, #0]
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	2101      	movs	r1, #1
 8012438:	4803      	ldr	r0, [pc, #12]	@ (8012448 <osTimerCreate+0x64>)
 801243a:	f001 ff61 	bl	8014300 <xTimerCreate>
 801243e:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8012440:	4618      	mov	r0, r3
 8012442:	3710      	adds	r7, #16
 8012444:	46bd      	mov	sp, r7
 8012446:	bd80      	pop	{r7, pc}
 8012448:	080161c0 	.word	0x080161c0

0801244c <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 801244c:	b580      	push	{r7, lr}
 801244e:	b088      	sub	sp, #32
 8012450:	af02      	add	r7, sp, #8
 8012452:	6078      	str	r0, [r7, #4]
 8012454:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8012456:	2300      	movs	r3, #0
 8012458:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 801245a:	2300      	movs	r3, #0
 801245c:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 801245e:	683b      	ldr	r3, [r7, #0]
 8012460:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8012462:	693b      	ldr	r3, [r7, #16]
 8012464:	2b00      	cmp	r3, #0
 8012466:	d101      	bne.n	801246c <osTimerStart+0x20>
    ticks = 1;
 8012468:	2301      	movs	r3, #1
 801246a:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 801246c:	f7ff ff40 	bl	80122f0 <inHandlerMode>
 8012470:	4603      	mov	r3, r0
 8012472:	2b00      	cmp	r3, #0
 8012474:	d01a      	beq.n	80124ac <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8012476:	f107 030c 	add.w	r3, r7, #12
 801247a:	2200      	movs	r2, #0
 801247c:	9200      	str	r2, [sp, #0]
 801247e:	693a      	ldr	r2, [r7, #16]
 8012480:	2109      	movs	r1, #9
 8012482:	6878      	ldr	r0, [r7, #4]
 8012484:	f001 ffda 	bl	801443c <xTimerGenericCommand>
 8012488:	4603      	mov	r3, r0
 801248a:	2b01      	cmp	r3, #1
 801248c:	d002      	beq.n	8012494 <osTimerStart+0x48>
    {
      result = osErrorOS;
 801248e:	23ff      	movs	r3, #255	@ 0xff
 8012490:	617b      	str	r3, [r7, #20]
 8012492:	e018      	b.n	80124c6 <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	2b00      	cmp	r3, #0
 8012498:	d015      	beq.n	80124c6 <osTimerStart+0x7a>
 801249a:	4b0d      	ldr	r3, [pc, #52]	@ (80124d0 <osTimerStart+0x84>)
 801249c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80124a0:	601a      	str	r2, [r3, #0]
 80124a2:	f3bf 8f4f 	dsb	sy
 80124a6:	f3bf 8f6f 	isb	sy
 80124aa:	e00c      	b.n	80124c6 <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 80124ac:	2300      	movs	r3, #0
 80124ae:	9300      	str	r3, [sp, #0]
 80124b0:	2300      	movs	r3, #0
 80124b2:	693a      	ldr	r2, [r7, #16]
 80124b4:	2104      	movs	r1, #4
 80124b6:	6878      	ldr	r0, [r7, #4]
 80124b8:	f001 ffc0 	bl	801443c <xTimerGenericCommand>
 80124bc:	4603      	mov	r3, r0
 80124be:	2b01      	cmp	r3, #1
 80124c0:	d001      	beq.n	80124c6 <osTimerStart+0x7a>
      result = osErrorOS;
 80124c2:	23ff      	movs	r3, #255	@ 0xff
 80124c4:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 80124c6:	697b      	ldr	r3, [r7, #20]
}
 80124c8:	4618      	mov	r0, r3
 80124ca:	3718      	adds	r7, #24
 80124cc:	46bd      	mov	sp, r7
 80124ce:	bd80      	pop	{r7, pc}
 80124d0:	e000ed04 	.word	0xe000ed04

080124d4 <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 80124d4:	b580      	push	{r7, lr}
 80124d6:	b086      	sub	sp, #24
 80124d8:	af02      	add	r7, sp, #8
 80124da:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80124dc:	2300      	movs	r3, #0
 80124de:	60fb      	str	r3, [r7, #12]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 80124e0:	2300      	movs	r3, #0
 80124e2:	60bb      	str	r3, [r7, #8]

  if (inHandlerMode()) {
 80124e4:	f7ff ff04 	bl	80122f0 <inHandlerMode>
 80124e8:	4603      	mov	r3, r0
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d019      	beq.n	8012522 <osTimerStop+0x4e>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 80124ee:	f107 0308 	add.w	r3, r7, #8
 80124f2:	2200      	movs	r2, #0
 80124f4:	9200      	str	r2, [sp, #0]
 80124f6:	2200      	movs	r2, #0
 80124f8:	2108      	movs	r1, #8
 80124fa:	6878      	ldr	r0, [r7, #4]
 80124fc:	f001 ff9e 	bl	801443c <xTimerGenericCommand>
 8012500:	4603      	mov	r3, r0
 8012502:	2b01      	cmp	r3, #1
 8012504:	d001      	beq.n	801250a <osTimerStop+0x36>
      return osErrorOS;
 8012506:	23ff      	movs	r3, #255	@ 0xff
 8012508:	e019      	b.n	801253e <osTimerStop+0x6a>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801250a:	68bb      	ldr	r3, [r7, #8]
 801250c:	2b00      	cmp	r3, #0
 801250e:	d015      	beq.n	801253c <osTimerStop+0x68>
 8012510:	4b0d      	ldr	r3, [pc, #52]	@ (8012548 <osTimerStop+0x74>)
 8012512:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012516:	601a      	str	r2, [r3, #0]
 8012518:	f3bf 8f4f 	dsb	sy
 801251c:	f3bf 8f6f 	isb	sy
 8012520:	e00c      	b.n	801253c <osTimerStop+0x68>
  }
  else {
    if (xTimerStop(timer_id, 0) != pdPASS) {
 8012522:	2300      	movs	r3, #0
 8012524:	9300      	str	r3, [sp, #0]
 8012526:	2300      	movs	r3, #0
 8012528:	2200      	movs	r2, #0
 801252a:	2103      	movs	r1, #3
 801252c:	6878      	ldr	r0, [r7, #4]
 801252e:	f001 ff85 	bl	801443c <xTimerGenericCommand>
 8012532:	4603      	mov	r3, r0
 8012534:	2b01      	cmp	r3, #1
 8012536:	d001      	beq.n	801253c <osTimerStop+0x68>
      result = osErrorOS;
 8012538:	23ff      	movs	r3, #255	@ 0xff
 801253a:	60fb      	str	r3, [r7, #12]
    }
  }
#else 
  result = osErrorOS;
#endif 
  return result;
 801253c:	68fb      	ldr	r3, [r7, #12]
}
 801253e:	4618      	mov	r0, r3
 8012540:	3710      	adds	r7, #16
 8012542:	46bd      	mov	sp, r7
 8012544:	bd80      	pop	{r7, pc}
 8012546:	bf00      	nop
 8012548:	e000ed04 	.word	0xe000ed04

0801254c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 801254c:	b580      	push	{r7, lr}
 801254e:	b086      	sub	sp, #24
 8012550:	af02      	add	r7, sp, #8
 8012552:	6078      	str	r0, [r7, #4]
 8012554:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	685b      	ldr	r3, [r3, #4]
 801255a:	2b00      	cmp	r3, #0
 801255c:	d00f      	beq.n	801257e <osSemaphoreCreate+0x32>
    if (count == 1) {
 801255e:	683b      	ldr	r3, [r7, #0]
 8012560:	2b01      	cmp	r3, #1
 8012562:	d10a      	bne.n	801257a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	685b      	ldr	r3, [r3, #4]
 8012568:	2203      	movs	r2, #3
 801256a:	9200      	str	r2, [sp, #0]
 801256c:	2200      	movs	r2, #0
 801256e:	2100      	movs	r1, #0
 8012570:	2001      	movs	r0, #1
 8012572:	f000 f93b 	bl	80127ec <xQueueGenericCreateStatic>
 8012576:	4603      	mov	r3, r0
 8012578:	e016      	b.n	80125a8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 801257a:	2300      	movs	r3, #0
 801257c:	e014      	b.n	80125a8 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 801257e:	683b      	ldr	r3, [r7, #0]
 8012580:	2b01      	cmp	r3, #1
 8012582:	d110      	bne.n	80125a6 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8012584:	2203      	movs	r2, #3
 8012586:	2100      	movs	r1, #0
 8012588:	2001      	movs	r0, #1
 801258a:	f000 f9ac 	bl	80128e6 <xQueueGenericCreate>
 801258e:	60f8      	str	r0, [r7, #12]
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d005      	beq.n	80125a2 <osSemaphoreCreate+0x56>
 8012596:	2300      	movs	r3, #0
 8012598:	2200      	movs	r2, #0
 801259a:	2100      	movs	r1, #0
 801259c:	68f8      	ldr	r0, [r7, #12]
 801259e:	f000 f9fd 	bl	801299c <xQueueGenericSend>
      return sema;
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	e000      	b.n	80125a8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80125a6:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80125a8:	4618      	mov	r0, r3
 80125aa:	3710      	adds	r7, #16
 80125ac:	46bd      	mov	sp, r7
 80125ae:	bd80      	pop	{r7, pc}

080125b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80125b0:	b480      	push	{r7}
 80125b2:	b083      	sub	sp, #12
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	f103 0208 	add.w	r2, r3, #8
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	f04f 32ff 	mov.w	r2, #4294967295
 80125c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	f103 0208 	add.w	r2, r3, #8
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	f103 0208 	add.w	r2, r3, #8
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	2200      	movs	r2, #0
 80125e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80125e4:	bf00      	nop
 80125e6:	370c      	adds	r7, #12
 80125e8:	46bd      	mov	sp, r7
 80125ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ee:	4770      	bx	lr

080125f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80125f0:	b480      	push	{r7}
 80125f2:	b083      	sub	sp, #12
 80125f4:	af00      	add	r7, sp, #0
 80125f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	2200      	movs	r2, #0
 80125fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80125fe:	bf00      	nop
 8012600:	370c      	adds	r7, #12
 8012602:	46bd      	mov	sp, r7
 8012604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012608:	4770      	bx	lr

0801260a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801260a:	b480      	push	{r7}
 801260c:	b085      	sub	sp, #20
 801260e:	af00      	add	r7, sp, #0
 8012610:	6078      	str	r0, [r7, #4]
 8012612:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	685b      	ldr	r3, [r3, #4]
 8012618:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801261a:	683b      	ldr	r3, [r7, #0]
 801261c:	68fa      	ldr	r2, [r7, #12]
 801261e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	689a      	ldr	r2, [r3, #8]
 8012624:	683b      	ldr	r3, [r7, #0]
 8012626:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	689b      	ldr	r3, [r3, #8]
 801262c:	683a      	ldr	r2, [r7, #0]
 801262e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	683a      	ldr	r2, [r7, #0]
 8012634:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012636:	683b      	ldr	r3, [r7, #0]
 8012638:	687a      	ldr	r2, [r7, #4]
 801263a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	1c5a      	adds	r2, r3, #1
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	601a      	str	r2, [r3, #0]
}
 8012646:	bf00      	nop
 8012648:	3714      	adds	r7, #20
 801264a:	46bd      	mov	sp, r7
 801264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012650:	4770      	bx	lr

08012652 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012652:	b480      	push	{r7}
 8012654:	b085      	sub	sp, #20
 8012656:	af00      	add	r7, sp, #0
 8012658:	6078      	str	r0, [r7, #4]
 801265a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801265c:	683b      	ldr	r3, [r7, #0]
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012662:	68bb      	ldr	r3, [r7, #8]
 8012664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012668:	d103      	bne.n	8012672 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	691b      	ldr	r3, [r3, #16]
 801266e:	60fb      	str	r3, [r7, #12]
 8012670:	e00c      	b.n	801268c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	3308      	adds	r3, #8
 8012676:	60fb      	str	r3, [r7, #12]
 8012678:	e002      	b.n	8012680 <vListInsert+0x2e>
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	685b      	ldr	r3, [r3, #4]
 801267e:	60fb      	str	r3, [r7, #12]
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	685b      	ldr	r3, [r3, #4]
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	68ba      	ldr	r2, [r7, #8]
 8012688:	429a      	cmp	r2, r3
 801268a:	d2f6      	bcs.n	801267a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	685a      	ldr	r2, [r3, #4]
 8012690:	683b      	ldr	r3, [r7, #0]
 8012692:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012694:	683b      	ldr	r3, [r7, #0]
 8012696:	685b      	ldr	r3, [r3, #4]
 8012698:	683a      	ldr	r2, [r7, #0]
 801269a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801269c:	683b      	ldr	r3, [r7, #0]
 801269e:	68fa      	ldr	r2, [r7, #12]
 80126a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	683a      	ldr	r2, [r7, #0]
 80126a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80126a8:	683b      	ldr	r3, [r7, #0]
 80126aa:	687a      	ldr	r2, [r7, #4]
 80126ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	1c5a      	adds	r2, r3, #1
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	601a      	str	r2, [r3, #0]
}
 80126b8:	bf00      	nop
 80126ba:	3714      	adds	r7, #20
 80126bc:	46bd      	mov	sp, r7
 80126be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c2:	4770      	bx	lr

080126c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80126c4:	b480      	push	{r7}
 80126c6:	b085      	sub	sp, #20
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	691b      	ldr	r3, [r3, #16]
 80126d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	685b      	ldr	r3, [r3, #4]
 80126d6:	687a      	ldr	r2, [r7, #4]
 80126d8:	6892      	ldr	r2, [r2, #8]
 80126da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	689b      	ldr	r3, [r3, #8]
 80126e0:	687a      	ldr	r2, [r7, #4]
 80126e2:	6852      	ldr	r2, [r2, #4]
 80126e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	685b      	ldr	r3, [r3, #4]
 80126ea:	687a      	ldr	r2, [r7, #4]
 80126ec:	429a      	cmp	r2, r3
 80126ee:	d103      	bne.n	80126f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	689a      	ldr	r2, [r3, #8]
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	2200      	movs	r2, #0
 80126fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	1e5a      	subs	r2, r3, #1
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	681b      	ldr	r3, [r3, #0]
}
 801270c:	4618      	mov	r0, r3
 801270e:	3714      	adds	r7, #20
 8012710:	46bd      	mov	sp, r7
 8012712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012716:	4770      	bx	lr

08012718 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012718:	b580      	push	{r7, lr}
 801271a:	b084      	sub	sp, #16
 801271c:	af00      	add	r7, sp, #0
 801271e:	6078      	str	r0, [r7, #4]
 8012720:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	2b00      	cmp	r3, #0
 801272a:	d10b      	bne.n	8012744 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801272c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012730:	f383 8811 	msr	BASEPRI, r3
 8012734:	f3bf 8f6f 	isb	sy
 8012738:	f3bf 8f4f 	dsb	sy
 801273c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801273e:	bf00      	nop
 8012740:	bf00      	nop
 8012742:	e7fd      	b.n	8012740 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8012744:	f002 faa0 	bl	8014c88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	681a      	ldr	r2, [r3, #0]
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012750:	68f9      	ldr	r1, [r7, #12]
 8012752:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8012754:	fb01 f303 	mul.w	r3, r1, r3
 8012758:	441a      	add	r2, r3
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	2200      	movs	r2, #0
 8012762:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	681a      	ldr	r2, [r3, #0]
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	681a      	ldr	r2, [r3, #0]
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012774:	3b01      	subs	r3, #1
 8012776:	68f9      	ldr	r1, [r7, #12]
 8012778:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801277a:	fb01 f303 	mul.w	r3, r1, r3
 801277e:	441a      	add	r2, r3
 8012780:	68fb      	ldr	r3, [r7, #12]
 8012782:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	22ff      	movs	r2, #255	@ 0xff
 8012788:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	22ff      	movs	r2, #255	@ 0xff
 8012790:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8012794:	683b      	ldr	r3, [r7, #0]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d114      	bne.n	80127c4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801279a:	68fb      	ldr	r3, [r7, #12]
 801279c:	691b      	ldr	r3, [r3, #16]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d01a      	beq.n	80127d8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	3310      	adds	r3, #16
 80127a6:	4618      	mov	r0, r3
 80127a8:	f001 fa8e 	bl	8013cc8 <xTaskRemoveFromEventList>
 80127ac:	4603      	mov	r3, r0
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d012      	beq.n	80127d8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80127b2:	4b0d      	ldr	r3, [pc, #52]	@ (80127e8 <xQueueGenericReset+0xd0>)
 80127b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80127b8:	601a      	str	r2, [r3, #0]
 80127ba:	f3bf 8f4f 	dsb	sy
 80127be:	f3bf 8f6f 	isb	sy
 80127c2:	e009      	b.n	80127d8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80127c4:	68fb      	ldr	r3, [r7, #12]
 80127c6:	3310      	adds	r3, #16
 80127c8:	4618      	mov	r0, r3
 80127ca:	f7ff fef1 	bl	80125b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	3324      	adds	r3, #36	@ 0x24
 80127d2:	4618      	mov	r0, r3
 80127d4:	f7ff feec 	bl	80125b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80127d8:	f002 fa88 	bl	8014cec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80127dc:	2301      	movs	r3, #1
}
 80127de:	4618      	mov	r0, r3
 80127e0:	3710      	adds	r7, #16
 80127e2:	46bd      	mov	sp, r7
 80127e4:	bd80      	pop	{r7, pc}
 80127e6:	bf00      	nop
 80127e8:	e000ed04 	.word	0xe000ed04

080127ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80127ec:	b580      	push	{r7, lr}
 80127ee:	b08e      	sub	sp, #56	@ 0x38
 80127f0:	af02      	add	r7, sp, #8
 80127f2:	60f8      	str	r0, [r7, #12]
 80127f4:	60b9      	str	r1, [r7, #8]
 80127f6:	607a      	str	r2, [r7, #4]
 80127f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d10b      	bne.n	8012818 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8012800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012804:	f383 8811 	msr	BASEPRI, r3
 8012808:	f3bf 8f6f 	isb	sy
 801280c:	f3bf 8f4f 	dsb	sy
 8012810:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8012812:	bf00      	nop
 8012814:	bf00      	nop
 8012816:	e7fd      	b.n	8012814 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012818:	683b      	ldr	r3, [r7, #0]
 801281a:	2b00      	cmp	r3, #0
 801281c:	d10b      	bne.n	8012836 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 801281e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012822:	f383 8811 	msr	BASEPRI, r3
 8012826:	f3bf 8f6f 	isb	sy
 801282a:	f3bf 8f4f 	dsb	sy
 801282e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8012830:	bf00      	nop
 8012832:	bf00      	nop
 8012834:	e7fd      	b.n	8012832 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	2b00      	cmp	r3, #0
 801283a:	d002      	beq.n	8012842 <xQueueGenericCreateStatic+0x56>
 801283c:	68bb      	ldr	r3, [r7, #8]
 801283e:	2b00      	cmp	r3, #0
 8012840:	d001      	beq.n	8012846 <xQueueGenericCreateStatic+0x5a>
 8012842:	2301      	movs	r3, #1
 8012844:	e000      	b.n	8012848 <xQueueGenericCreateStatic+0x5c>
 8012846:	2300      	movs	r3, #0
 8012848:	2b00      	cmp	r3, #0
 801284a:	d10b      	bne.n	8012864 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 801284c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012850:	f383 8811 	msr	BASEPRI, r3
 8012854:	f3bf 8f6f 	isb	sy
 8012858:	f3bf 8f4f 	dsb	sy
 801285c:	623b      	str	r3, [r7, #32]
}
 801285e:	bf00      	nop
 8012860:	bf00      	nop
 8012862:	e7fd      	b.n	8012860 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	2b00      	cmp	r3, #0
 8012868:	d102      	bne.n	8012870 <xQueueGenericCreateStatic+0x84>
 801286a:	68bb      	ldr	r3, [r7, #8]
 801286c:	2b00      	cmp	r3, #0
 801286e:	d101      	bne.n	8012874 <xQueueGenericCreateStatic+0x88>
 8012870:	2301      	movs	r3, #1
 8012872:	e000      	b.n	8012876 <xQueueGenericCreateStatic+0x8a>
 8012874:	2300      	movs	r3, #0
 8012876:	2b00      	cmp	r3, #0
 8012878:	d10b      	bne.n	8012892 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 801287a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801287e:	f383 8811 	msr	BASEPRI, r3
 8012882:	f3bf 8f6f 	isb	sy
 8012886:	f3bf 8f4f 	dsb	sy
 801288a:	61fb      	str	r3, [r7, #28]
}
 801288c:	bf00      	nop
 801288e:	bf00      	nop
 8012890:	e7fd      	b.n	801288e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012892:	2348      	movs	r3, #72	@ 0x48
 8012894:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012896:	697b      	ldr	r3, [r7, #20]
 8012898:	2b48      	cmp	r3, #72	@ 0x48
 801289a:	d00b      	beq.n	80128b4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 801289c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80128a0:	f383 8811 	msr	BASEPRI, r3
 80128a4:	f3bf 8f6f 	isb	sy
 80128a8:	f3bf 8f4f 	dsb	sy
 80128ac:	61bb      	str	r3, [r7, #24]
}
 80128ae:	bf00      	nop
 80128b0:	bf00      	nop
 80128b2:	e7fd      	b.n	80128b0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80128b4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80128b6:	683b      	ldr	r3, [r7, #0]
 80128b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80128ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d00d      	beq.n	80128dc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80128c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128c2:	2201      	movs	r2, #1
 80128c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80128c8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80128cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128ce:	9300      	str	r3, [sp, #0]
 80128d0:	4613      	mov	r3, r2
 80128d2:	687a      	ldr	r2, [r7, #4]
 80128d4:	68b9      	ldr	r1, [r7, #8]
 80128d6:	68f8      	ldr	r0, [r7, #12]
 80128d8:	f000 f840 	bl	801295c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80128dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80128de:	4618      	mov	r0, r3
 80128e0:	3730      	adds	r7, #48	@ 0x30
 80128e2:	46bd      	mov	sp, r7
 80128e4:	bd80      	pop	{r7, pc}

080128e6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80128e6:	b580      	push	{r7, lr}
 80128e8:	b08a      	sub	sp, #40	@ 0x28
 80128ea:	af02      	add	r7, sp, #8
 80128ec:	60f8      	str	r0, [r7, #12]
 80128ee:	60b9      	str	r1, [r7, #8]
 80128f0:	4613      	mov	r3, r2
 80128f2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d10b      	bne.n	8012912 <xQueueGenericCreate+0x2c>
	__asm volatile
 80128fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80128fe:	f383 8811 	msr	BASEPRI, r3
 8012902:	f3bf 8f6f 	isb	sy
 8012906:	f3bf 8f4f 	dsb	sy
 801290a:	613b      	str	r3, [r7, #16]
}
 801290c:	bf00      	nop
 801290e:	bf00      	nop
 8012910:	e7fd      	b.n	801290e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	68ba      	ldr	r2, [r7, #8]
 8012916:	fb02 f303 	mul.w	r3, r2, r3
 801291a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801291c:	69fb      	ldr	r3, [r7, #28]
 801291e:	3348      	adds	r3, #72	@ 0x48
 8012920:	4618      	mov	r0, r3
 8012922:	f002 fad3 	bl	8014ecc <pvPortMalloc>
 8012926:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012928:	69bb      	ldr	r3, [r7, #24]
 801292a:	2b00      	cmp	r3, #0
 801292c:	d011      	beq.n	8012952 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801292e:	69bb      	ldr	r3, [r7, #24]
 8012930:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012932:	697b      	ldr	r3, [r7, #20]
 8012934:	3348      	adds	r3, #72	@ 0x48
 8012936:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012938:	69bb      	ldr	r3, [r7, #24]
 801293a:	2200      	movs	r2, #0
 801293c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012940:	79fa      	ldrb	r2, [r7, #7]
 8012942:	69bb      	ldr	r3, [r7, #24]
 8012944:	9300      	str	r3, [sp, #0]
 8012946:	4613      	mov	r3, r2
 8012948:	697a      	ldr	r2, [r7, #20]
 801294a:	68b9      	ldr	r1, [r7, #8]
 801294c:	68f8      	ldr	r0, [r7, #12]
 801294e:	f000 f805 	bl	801295c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012952:	69bb      	ldr	r3, [r7, #24]
	}
 8012954:	4618      	mov	r0, r3
 8012956:	3720      	adds	r7, #32
 8012958:	46bd      	mov	sp, r7
 801295a:	bd80      	pop	{r7, pc}

0801295c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801295c:	b580      	push	{r7, lr}
 801295e:	b084      	sub	sp, #16
 8012960:	af00      	add	r7, sp, #0
 8012962:	60f8      	str	r0, [r7, #12]
 8012964:	60b9      	str	r1, [r7, #8]
 8012966:	607a      	str	r2, [r7, #4]
 8012968:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801296a:	68bb      	ldr	r3, [r7, #8]
 801296c:	2b00      	cmp	r3, #0
 801296e:	d103      	bne.n	8012978 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012970:	69bb      	ldr	r3, [r7, #24]
 8012972:	69ba      	ldr	r2, [r7, #24]
 8012974:	601a      	str	r2, [r3, #0]
 8012976:	e002      	b.n	801297e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012978:	69bb      	ldr	r3, [r7, #24]
 801297a:	687a      	ldr	r2, [r7, #4]
 801297c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801297e:	69bb      	ldr	r3, [r7, #24]
 8012980:	68fa      	ldr	r2, [r7, #12]
 8012982:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012984:	69bb      	ldr	r3, [r7, #24]
 8012986:	68ba      	ldr	r2, [r7, #8]
 8012988:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801298a:	2101      	movs	r1, #1
 801298c:	69b8      	ldr	r0, [r7, #24]
 801298e:	f7ff fec3 	bl	8012718 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012992:	bf00      	nop
 8012994:	3710      	adds	r7, #16
 8012996:	46bd      	mov	sp, r7
 8012998:	bd80      	pop	{r7, pc}
	...

0801299c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801299c:	b580      	push	{r7, lr}
 801299e:	b08e      	sub	sp, #56	@ 0x38
 80129a0:	af00      	add	r7, sp, #0
 80129a2:	60f8      	str	r0, [r7, #12]
 80129a4:	60b9      	str	r1, [r7, #8]
 80129a6:	607a      	str	r2, [r7, #4]
 80129a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80129aa:	2300      	movs	r3, #0
 80129ac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80129b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d10b      	bne.n	80129d0 <xQueueGenericSend+0x34>
	__asm volatile
 80129b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129bc:	f383 8811 	msr	BASEPRI, r3
 80129c0:	f3bf 8f6f 	isb	sy
 80129c4:	f3bf 8f4f 	dsb	sy
 80129c8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80129ca:	bf00      	nop
 80129cc:	bf00      	nop
 80129ce:	e7fd      	b.n	80129cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80129d0:	68bb      	ldr	r3, [r7, #8]
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d103      	bne.n	80129de <xQueueGenericSend+0x42>
 80129d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d101      	bne.n	80129e2 <xQueueGenericSend+0x46>
 80129de:	2301      	movs	r3, #1
 80129e0:	e000      	b.n	80129e4 <xQueueGenericSend+0x48>
 80129e2:	2300      	movs	r3, #0
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d10b      	bne.n	8012a00 <xQueueGenericSend+0x64>
	__asm volatile
 80129e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129ec:	f383 8811 	msr	BASEPRI, r3
 80129f0:	f3bf 8f6f 	isb	sy
 80129f4:	f3bf 8f4f 	dsb	sy
 80129f8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80129fa:	bf00      	nop
 80129fc:	bf00      	nop
 80129fe:	e7fd      	b.n	80129fc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012a00:	683b      	ldr	r3, [r7, #0]
 8012a02:	2b02      	cmp	r3, #2
 8012a04:	d103      	bne.n	8012a0e <xQueueGenericSend+0x72>
 8012a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012a0a:	2b01      	cmp	r3, #1
 8012a0c:	d101      	bne.n	8012a12 <xQueueGenericSend+0x76>
 8012a0e:	2301      	movs	r3, #1
 8012a10:	e000      	b.n	8012a14 <xQueueGenericSend+0x78>
 8012a12:	2300      	movs	r3, #0
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d10b      	bne.n	8012a30 <xQueueGenericSend+0x94>
	__asm volatile
 8012a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a1c:	f383 8811 	msr	BASEPRI, r3
 8012a20:	f3bf 8f6f 	isb	sy
 8012a24:	f3bf 8f4f 	dsb	sy
 8012a28:	623b      	str	r3, [r7, #32]
}
 8012a2a:	bf00      	nop
 8012a2c:	bf00      	nop
 8012a2e:	e7fd      	b.n	8012a2c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012a30:	f001 fb10 	bl	8014054 <xTaskGetSchedulerState>
 8012a34:	4603      	mov	r3, r0
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d102      	bne.n	8012a40 <xQueueGenericSend+0xa4>
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d101      	bne.n	8012a44 <xQueueGenericSend+0xa8>
 8012a40:	2301      	movs	r3, #1
 8012a42:	e000      	b.n	8012a46 <xQueueGenericSend+0xaa>
 8012a44:	2300      	movs	r3, #0
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d10b      	bne.n	8012a62 <xQueueGenericSend+0xc6>
	__asm volatile
 8012a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a4e:	f383 8811 	msr	BASEPRI, r3
 8012a52:	f3bf 8f6f 	isb	sy
 8012a56:	f3bf 8f4f 	dsb	sy
 8012a5a:	61fb      	str	r3, [r7, #28]
}
 8012a5c:	bf00      	nop
 8012a5e:	bf00      	nop
 8012a60:	e7fd      	b.n	8012a5e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012a62:	f002 f911 	bl	8014c88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012a6e:	429a      	cmp	r2, r3
 8012a70:	d302      	bcc.n	8012a78 <xQueueGenericSend+0xdc>
 8012a72:	683b      	ldr	r3, [r7, #0]
 8012a74:	2b02      	cmp	r3, #2
 8012a76:	d129      	bne.n	8012acc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012a78:	683a      	ldr	r2, [r7, #0]
 8012a7a:	68b9      	ldr	r1, [r7, #8]
 8012a7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012a7e:	f000 fa0f 	bl	8012ea0 <prvCopyDataToQueue>
 8012a82:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d010      	beq.n	8012aae <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a8e:	3324      	adds	r3, #36	@ 0x24
 8012a90:	4618      	mov	r0, r3
 8012a92:	f001 f919 	bl	8013cc8 <xTaskRemoveFromEventList>
 8012a96:	4603      	mov	r3, r0
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d013      	beq.n	8012ac4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012a9c:	4b3f      	ldr	r3, [pc, #252]	@ (8012b9c <xQueueGenericSend+0x200>)
 8012a9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012aa2:	601a      	str	r2, [r3, #0]
 8012aa4:	f3bf 8f4f 	dsb	sy
 8012aa8:	f3bf 8f6f 	isb	sy
 8012aac:	e00a      	b.n	8012ac4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d007      	beq.n	8012ac4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012ab4:	4b39      	ldr	r3, [pc, #228]	@ (8012b9c <xQueueGenericSend+0x200>)
 8012ab6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012aba:	601a      	str	r2, [r3, #0]
 8012abc:	f3bf 8f4f 	dsb	sy
 8012ac0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012ac4:	f002 f912 	bl	8014cec <vPortExitCritical>
				return pdPASS;
 8012ac8:	2301      	movs	r3, #1
 8012aca:	e063      	b.n	8012b94 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d103      	bne.n	8012ada <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012ad2:	f002 f90b 	bl	8014cec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8012ad6:	2300      	movs	r3, #0
 8012ad8:	e05c      	b.n	8012b94 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d106      	bne.n	8012aee <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012ae0:	f107 0314 	add.w	r3, r7, #20
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	f001 f953 	bl	8013d90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012aea:	2301      	movs	r3, #1
 8012aec:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012aee:	f002 f8fd 	bl	8014cec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012af2:	f000 febd 	bl	8013870 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012af6:	f002 f8c7 	bl	8014c88 <vPortEnterCritical>
 8012afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012afc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012b00:	b25b      	sxtb	r3, r3
 8012b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b06:	d103      	bne.n	8012b10 <xQueueGenericSend+0x174>
 8012b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b0a:	2200      	movs	r2, #0
 8012b0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b12:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012b16:	b25b      	sxtb	r3, r3
 8012b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b1c:	d103      	bne.n	8012b26 <xQueueGenericSend+0x18a>
 8012b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b20:	2200      	movs	r2, #0
 8012b22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012b26:	f002 f8e1 	bl	8014cec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012b2a:	1d3a      	adds	r2, r7, #4
 8012b2c:	f107 0314 	add.w	r3, r7, #20
 8012b30:	4611      	mov	r1, r2
 8012b32:	4618      	mov	r0, r3
 8012b34:	f001 f942 	bl	8013dbc <xTaskCheckForTimeOut>
 8012b38:	4603      	mov	r3, r0
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d124      	bne.n	8012b88 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012b3e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012b40:	f000 faa6 	bl	8013090 <prvIsQueueFull>
 8012b44:	4603      	mov	r3, r0
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d018      	beq.n	8012b7c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b4c:	3310      	adds	r3, #16
 8012b4e:	687a      	ldr	r2, [r7, #4]
 8012b50:	4611      	mov	r1, r2
 8012b52:	4618      	mov	r0, r3
 8012b54:	f001 f866 	bl	8013c24 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012b58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012b5a:	f000 fa31 	bl	8012fc0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012b5e:	f000 fe95 	bl	801388c <xTaskResumeAll>
 8012b62:	4603      	mov	r3, r0
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	f47f af7c 	bne.w	8012a62 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8012b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8012b9c <xQueueGenericSend+0x200>)
 8012b6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012b70:	601a      	str	r2, [r3, #0]
 8012b72:	f3bf 8f4f 	dsb	sy
 8012b76:	f3bf 8f6f 	isb	sy
 8012b7a:	e772      	b.n	8012a62 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012b7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012b7e:	f000 fa1f 	bl	8012fc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012b82:	f000 fe83 	bl	801388c <xTaskResumeAll>
 8012b86:	e76c      	b.n	8012a62 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012b88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012b8a:	f000 fa19 	bl	8012fc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012b8e:	f000 fe7d 	bl	801388c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8012b92:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012b94:	4618      	mov	r0, r3
 8012b96:	3738      	adds	r7, #56	@ 0x38
 8012b98:	46bd      	mov	sp, r7
 8012b9a:	bd80      	pop	{r7, pc}
 8012b9c:	e000ed04 	.word	0xe000ed04

08012ba0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012ba0:	b580      	push	{r7, lr}
 8012ba2:	b090      	sub	sp, #64	@ 0x40
 8012ba4:	af00      	add	r7, sp, #0
 8012ba6:	60f8      	str	r0, [r7, #12]
 8012ba8:	60b9      	str	r1, [r7, #8]
 8012baa:	607a      	str	r2, [r7, #4]
 8012bac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8012bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d10b      	bne.n	8012bd0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8012bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012bbc:	f383 8811 	msr	BASEPRI, r3
 8012bc0:	f3bf 8f6f 	isb	sy
 8012bc4:	f3bf 8f4f 	dsb	sy
 8012bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8012bca:	bf00      	nop
 8012bcc:	bf00      	nop
 8012bce:	e7fd      	b.n	8012bcc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012bd0:	68bb      	ldr	r3, [r7, #8]
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d103      	bne.n	8012bde <xQueueGenericSendFromISR+0x3e>
 8012bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d101      	bne.n	8012be2 <xQueueGenericSendFromISR+0x42>
 8012bde:	2301      	movs	r3, #1
 8012be0:	e000      	b.n	8012be4 <xQueueGenericSendFromISR+0x44>
 8012be2:	2300      	movs	r3, #0
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d10b      	bne.n	8012c00 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8012be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012bec:	f383 8811 	msr	BASEPRI, r3
 8012bf0:	f3bf 8f6f 	isb	sy
 8012bf4:	f3bf 8f4f 	dsb	sy
 8012bf8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8012bfa:	bf00      	nop
 8012bfc:	bf00      	nop
 8012bfe:	e7fd      	b.n	8012bfc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012c00:	683b      	ldr	r3, [r7, #0]
 8012c02:	2b02      	cmp	r3, #2
 8012c04:	d103      	bne.n	8012c0e <xQueueGenericSendFromISR+0x6e>
 8012c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012c0a:	2b01      	cmp	r3, #1
 8012c0c:	d101      	bne.n	8012c12 <xQueueGenericSendFromISR+0x72>
 8012c0e:	2301      	movs	r3, #1
 8012c10:	e000      	b.n	8012c14 <xQueueGenericSendFromISR+0x74>
 8012c12:	2300      	movs	r3, #0
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d10b      	bne.n	8012c30 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8012c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c1c:	f383 8811 	msr	BASEPRI, r3
 8012c20:	f3bf 8f6f 	isb	sy
 8012c24:	f3bf 8f4f 	dsb	sy
 8012c28:	623b      	str	r3, [r7, #32]
}
 8012c2a:	bf00      	nop
 8012c2c:	bf00      	nop
 8012c2e:	e7fd      	b.n	8012c2c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012c30:	f002 f90a 	bl	8014e48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012c34:	f3ef 8211 	mrs	r2, BASEPRI
 8012c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c3c:	f383 8811 	msr	BASEPRI, r3
 8012c40:	f3bf 8f6f 	isb	sy
 8012c44:	f3bf 8f4f 	dsb	sy
 8012c48:	61fa      	str	r2, [r7, #28]
 8012c4a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012c4c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012c4e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012c58:	429a      	cmp	r2, r3
 8012c5a:	d302      	bcc.n	8012c62 <xQueueGenericSendFromISR+0xc2>
 8012c5c:	683b      	ldr	r3, [r7, #0]
 8012c5e:	2b02      	cmp	r3, #2
 8012c60:	d12f      	bne.n	8012cc2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c64:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012c68:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012c72:	683a      	ldr	r2, [r7, #0]
 8012c74:	68b9      	ldr	r1, [r7, #8]
 8012c76:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012c78:	f000 f912 	bl	8012ea0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012c7c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8012c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c84:	d112      	bne.n	8012cac <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d016      	beq.n	8012cbc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c90:	3324      	adds	r3, #36	@ 0x24
 8012c92:	4618      	mov	r0, r3
 8012c94:	f001 f818 	bl	8013cc8 <xTaskRemoveFromEventList>
 8012c98:	4603      	mov	r3, r0
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d00e      	beq.n	8012cbc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d00b      	beq.n	8012cbc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	2201      	movs	r2, #1
 8012ca8:	601a      	str	r2, [r3, #0]
 8012caa:	e007      	b.n	8012cbc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012cac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8012cb0:	3301      	adds	r3, #1
 8012cb2:	b2db      	uxtb	r3, r3
 8012cb4:	b25a      	sxtb	r2, r3
 8012cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012cb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8012cbc:	2301      	movs	r3, #1
 8012cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8012cc0:	e001      	b.n	8012cc6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012cc2:	2300      	movs	r3, #0
 8012cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012cc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012cc8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012cca:	697b      	ldr	r3, [r7, #20]
 8012ccc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8012cd0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012cd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	3740      	adds	r7, #64	@ 0x40
 8012cd8:	46bd      	mov	sp, r7
 8012cda:	bd80      	pop	{r7, pc}

08012cdc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012cdc:	b580      	push	{r7, lr}
 8012cde:	b08c      	sub	sp, #48	@ 0x30
 8012ce0:	af00      	add	r7, sp, #0
 8012ce2:	60f8      	str	r0, [r7, #12]
 8012ce4:	60b9      	str	r1, [r7, #8]
 8012ce6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012ce8:	2300      	movs	r3, #0
 8012cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d10b      	bne.n	8012d0e <xQueueReceive+0x32>
	__asm volatile
 8012cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012cfa:	f383 8811 	msr	BASEPRI, r3
 8012cfe:	f3bf 8f6f 	isb	sy
 8012d02:	f3bf 8f4f 	dsb	sy
 8012d06:	623b      	str	r3, [r7, #32]
}
 8012d08:	bf00      	nop
 8012d0a:	bf00      	nop
 8012d0c:	e7fd      	b.n	8012d0a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012d0e:	68bb      	ldr	r3, [r7, #8]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d103      	bne.n	8012d1c <xQueueReceive+0x40>
 8012d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d101      	bne.n	8012d20 <xQueueReceive+0x44>
 8012d1c:	2301      	movs	r3, #1
 8012d1e:	e000      	b.n	8012d22 <xQueueReceive+0x46>
 8012d20:	2300      	movs	r3, #0
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d10b      	bne.n	8012d3e <xQueueReceive+0x62>
	__asm volatile
 8012d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d2a:	f383 8811 	msr	BASEPRI, r3
 8012d2e:	f3bf 8f6f 	isb	sy
 8012d32:	f3bf 8f4f 	dsb	sy
 8012d36:	61fb      	str	r3, [r7, #28]
}
 8012d38:	bf00      	nop
 8012d3a:	bf00      	nop
 8012d3c:	e7fd      	b.n	8012d3a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012d3e:	f001 f989 	bl	8014054 <xTaskGetSchedulerState>
 8012d42:	4603      	mov	r3, r0
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d102      	bne.n	8012d4e <xQueueReceive+0x72>
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d101      	bne.n	8012d52 <xQueueReceive+0x76>
 8012d4e:	2301      	movs	r3, #1
 8012d50:	e000      	b.n	8012d54 <xQueueReceive+0x78>
 8012d52:	2300      	movs	r3, #0
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d10b      	bne.n	8012d70 <xQueueReceive+0x94>
	__asm volatile
 8012d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d5c:	f383 8811 	msr	BASEPRI, r3
 8012d60:	f3bf 8f6f 	isb	sy
 8012d64:	f3bf 8f4f 	dsb	sy
 8012d68:	61bb      	str	r3, [r7, #24]
}
 8012d6a:	bf00      	nop
 8012d6c:	bf00      	nop
 8012d6e:	e7fd      	b.n	8012d6c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012d70:	f001 ff8a 	bl	8014c88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012d78:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d01f      	beq.n	8012dc0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012d80:	68b9      	ldr	r1, [r7, #8]
 8012d82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012d84:	f000 f8f6 	bl	8012f74 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d8a:	1e5a      	subs	r2, r3, #1
 8012d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d8e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d92:	691b      	ldr	r3, [r3, #16]
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d00f      	beq.n	8012db8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d9a:	3310      	adds	r3, #16
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	f000 ff93 	bl	8013cc8 <xTaskRemoveFromEventList>
 8012da2:	4603      	mov	r3, r0
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d007      	beq.n	8012db8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012da8:	4b3c      	ldr	r3, [pc, #240]	@ (8012e9c <xQueueReceive+0x1c0>)
 8012daa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012dae:	601a      	str	r2, [r3, #0]
 8012db0:	f3bf 8f4f 	dsb	sy
 8012db4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012db8:	f001 ff98 	bl	8014cec <vPortExitCritical>
				return pdPASS;
 8012dbc:	2301      	movs	r3, #1
 8012dbe:	e069      	b.n	8012e94 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d103      	bne.n	8012dce <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012dc6:	f001 ff91 	bl	8014cec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012dca:	2300      	movs	r3, #0
 8012dcc:	e062      	b.n	8012e94 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d106      	bne.n	8012de2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012dd4:	f107 0310 	add.w	r3, r7, #16
 8012dd8:	4618      	mov	r0, r3
 8012dda:	f000 ffd9 	bl	8013d90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012dde:	2301      	movs	r3, #1
 8012de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012de2:	f001 ff83 	bl	8014cec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012de6:	f000 fd43 	bl	8013870 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012dea:	f001 ff4d 	bl	8014c88 <vPortEnterCritical>
 8012dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012df0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012df4:	b25b      	sxtb	r3, r3
 8012df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012dfa:	d103      	bne.n	8012e04 <xQueueReceive+0x128>
 8012dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012dfe:	2200      	movs	r2, #0
 8012e00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012e0a:	b25b      	sxtb	r3, r3
 8012e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e10:	d103      	bne.n	8012e1a <xQueueReceive+0x13e>
 8012e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e14:	2200      	movs	r2, #0
 8012e16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012e1a:	f001 ff67 	bl	8014cec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012e1e:	1d3a      	adds	r2, r7, #4
 8012e20:	f107 0310 	add.w	r3, r7, #16
 8012e24:	4611      	mov	r1, r2
 8012e26:	4618      	mov	r0, r3
 8012e28:	f000 ffc8 	bl	8013dbc <xTaskCheckForTimeOut>
 8012e2c:	4603      	mov	r3, r0
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d123      	bne.n	8012e7a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012e32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012e34:	f000 f916 	bl	8013064 <prvIsQueueEmpty>
 8012e38:	4603      	mov	r3, r0
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d017      	beq.n	8012e6e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e40:	3324      	adds	r3, #36	@ 0x24
 8012e42:	687a      	ldr	r2, [r7, #4]
 8012e44:	4611      	mov	r1, r2
 8012e46:	4618      	mov	r0, r3
 8012e48:	f000 feec 	bl	8013c24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012e4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012e4e:	f000 f8b7 	bl	8012fc0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012e52:	f000 fd1b 	bl	801388c <xTaskResumeAll>
 8012e56:	4603      	mov	r3, r0
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d189      	bne.n	8012d70 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8012e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8012e9c <xQueueReceive+0x1c0>)
 8012e5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012e62:	601a      	str	r2, [r3, #0]
 8012e64:	f3bf 8f4f 	dsb	sy
 8012e68:	f3bf 8f6f 	isb	sy
 8012e6c:	e780      	b.n	8012d70 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8012e6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012e70:	f000 f8a6 	bl	8012fc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012e74:	f000 fd0a 	bl	801388c <xTaskResumeAll>
 8012e78:	e77a      	b.n	8012d70 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012e7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012e7c:	f000 f8a0 	bl	8012fc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012e80:	f000 fd04 	bl	801388c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012e84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012e86:	f000 f8ed 	bl	8013064 <prvIsQueueEmpty>
 8012e8a:	4603      	mov	r3, r0
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	f43f af6f 	beq.w	8012d70 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012e92:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012e94:	4618      	mov	r0, r3
 8012e96:	3730      	adds	r7, #48	@ 0x30
 8012e98:	46bd      	mov	sp, r7
 8012e9a:	bd80      	pop	{r7, pc}
 8012e9c:	e000ed04 	.word	0xe000ed04

08012ea0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012ea0:	b580      	push	{r7, lr}
 8012ea2:	b086      	sub	sp, #24
 8012ea4:	af00      	add	r7, sp, #0
 8012ea6:	60f8      	str	r0, [r7, #12]
 8012ea8:	60b9      	str	r1, [r7, #8]
 8012eaa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012eac:	2300      	movs	r3, #0
 8012eae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012eb4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d10d      	bne.n	8012eda <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d14d      	bne.n	8012f62 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	689b      	ldr	r3, [r3, #8]
 8012eca:	4618      	mov	r0, r3
 8012ecc:	f001 f8e0 	bl	8014090 <xTaskPriorityDisinherit>
 8012ed0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	2200      	movs	r2, #0
 8012ed6:	609a      	str	r2, [r3, #8]
 8012ed8:	e043      	b.n	8012f62 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d119      	bne.n	8012f14 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	6858      	ldr	r0, [r3, #4]
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012ee8:	461a      	mov	r2, r3
 8012eea:	68b9      	ldr	r1, [r7, #8]
 8012eec:	f002 fbe2 	bl	80156b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	685a      	ldr	r2, [r3, #4]
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012ef8:	441a      	add	r2, r3
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	685a      	ldr	r2, [r3, #4]
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	689b      	ldr	r3, [r3, #8]
 8012f06:	429a      	cmp	r2, r3
 8012f08:	d32b      	bcc.n	8012f62 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012f0a:	68fb      	ldr	r3, [r7, #12]
 8012f0c:	681a      	ldr	r2, [r3, #0]
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	605a      	str	r2, [r3, #4]
 8012f12:	e026      	b.n	8012f62 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	68d8      	ldr	r0, [r3, #12]
 8012f18:	68fb      	ldr	r3, [r7, #12]
 8012f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012f1c:	461a      	mov	r2, r3
 8012f1e:	68b9      	ldr	r1, [r7, #8]
 8012f20:	f002 fbc8 	bl	80156b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	68da      	ldr	r2, [r3, #12]
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012f2c:	425b      	negs	r3, r3
 8012f2e:	441a      	add	r2, r3
 8012f30:	68fb      	ldr	r3, [r7, #12]
 8012f32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	68da      	ldr	r2, [r3, #12]
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	429a      	cmp	r2, r3
 8012f3e:	d207      	bcs.n	8012f50 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012f40:	68fb      	ldr	r3, [r7, #12]
 8012f42:	689a      	ldr	r2, [r3, #8]
 8012f44:	68fb      	ldr	r3, [r7, #12]
 8012f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012f48:	425b      	negs	r3, r3
 8012f4a:	441a      	add	r2, r3
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	2b02      	cmp	r3, #2
 8012f54:	d105      	bne.n	8012f62 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012f56:	693b      	ldr	r3, [r7, #16]
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d002      	beq.n	8012f62 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012f5c:	693b      	ldr	r3, [r7, #16]
 8012f5e:	3b01      	subs	r3, #1
 8012f60:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012f62:	693b      	ldr	r3, [r7, #16]
 8012f64:	1c5a      	adds	r2, r3, #1
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8012f6a:	697b      	ldr	r3, [r7, #20]
}
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	3718      	adds	r7, #24
 8012f70:	46bd      	mov	sp, r7
 8012f72:	bd80      	pop	{r7, pc}

08012f74 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012f74:	b580      	push	{r7, lr}
 8012f76:	b082      	sub	sp, #8
 8012f78:	af00      	add	r7, sp, #0
 8012f7a:	6078      	str	r0, [r7, #4]
 8012f7c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d018      	beq.n	8012fb8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	68da      	ldr	r2, [r3, #12]
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012f8e:	441a      	add	r2, r3
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	68da      	ldr	r2, [r3, #12]
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	689b      	ldr	r3, [r3, #8]
 8012f9c:	429a      	cmp	r2, r3
 8012f9e:	d303      	bcc.n	8012fa8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	681a      	ldr	r2, [r3, #0]
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	68d9      	ldr	r1, [r3, #12]
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012fb0:	461a      	mov	r2, r3
 8012fb2:	6838      	ldr	r0, [r7, #0]
 8012fb4:	f002 fb7e 	bl	80156b4 <memcpy>
	}
}
 8012fb8:	bf00      	nop
 8012fba:	3708      	adds	r7, #8
 8012fbc:	46bd      	mov	sp, r7
 8012fbe:	bd80      	pop	{r7, pc}

08012fc0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012fc0:	b580      	push	{r7, lr}
 8012fc2:	b084      	sub	sp, #16
 8012fc4:	af00      	add	r7, sp, #0
 8012fc6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012fc8:	f001 fe5e 	bl	8014c88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012fd2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012fd4:	e011      	b.n	8012ffa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d012      	beq.n	8013004 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	3324      	adds	r3, #36	@ 0x24
 8012fe2:	4618      	mov	r0, r3
 8012fe4:	f000 fe70 	bl	8013cc8 <xTaskRemoveFromEventList>
 8012fe8:	4603      	mov	r3, r0
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d001      	beq.n	8012ff2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012fee:	f000 ff49 	bl	8013e84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012ff2:	7bfb      	ldrb	r3, [r7, #15]
 8012ff4:	3b01      	subs	r3, #1
 8012ff6:	b2db      	uxtb	r3, r3
 8012ff8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	dce9      	bgt.n	8012fd6 <prvUnlockQueue+0x16>
 8013002:	e000      	b.n	8013006 <prvUnlockQueue+0x46>
					break;
 8013004:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	22ff      	movs	r2, #255	@ 0xff
 801300a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 801300e:	f001 fe6d 	bl	8014cec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013012:	f001 fe39 	bl	8014c88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801301c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801301e:	e011      	b.n	8013044 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	691b      	ldr	r3, [r3, #16]
 8013024:	2b00      	cmp	r3, #0
 8013026:	d012      	beq.n	801304e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	3310      	adds	r3, #16
 801302c:	4618      	mov	r0, r3
 801302e:	f000 fe4b 	bl	8013cc8 <xTaskRemoveFromEventList>
 8013032:	4603      	mov	r3, r0
 8013034:	2b00      	cmp	r3, #0
 8013036:	d001      	beq.n	801303c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013038:	f000 ff24 	bl	8013e84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801303c:	7bbb      	ldrb	r3, [r7, #14]
 801303e:	3b01      	subs	r3, #1
 8013040:	b2db      	uxtb	r3, r3
 8013042:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013044:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013048:	2b00      	cmp	r3, #0
 801304a:	dce9      	bgt.n	8013020 <prvUnlockQueue+0x60>
 801304c:	e000      	b.n	8013050 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801304e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	22ff      	movs	r2, #255	@ 0xff
 8013054:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8013058:	f001 fe48 	bl	8014cec <vPortExitCritical>
}
 801305c:	bf00      	nop
 801305e:	3710      	adds	r7, #16
 8013060:	46bd      	mov	sp, r7
 8013062:	bd80      	pop	{r7, pc}

08013064 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013064:	b580      	push	{r7, lr}
 8013066:	b084      	sub	sp, #16
 8013068:	af00      	add	r7, sp, #0
 801306a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801306c:	f001 fe0c 	bl	8014c88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013074:	2b00      	cmp	r3, #0
 8013076:	d102      	bne.n	801307e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013078:	2301      	movs	r3, #1
 801307a:	60fb      	str	r3, [r7, #12]
 801307c:	e001      	b.n	8013082 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801307e:	2300      	movs	r3, #0
 8013080:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013082:	f001 fe33 	bl	8014cec <vPortExitCritical>

	return xReturn;
 8013086:	68fb      	ldr	r3, [r7, #12]
}
 8013088:	4618      	mov	r0, r3
 801308a:	3710      	adds	r7, #16
 801308c:	46bd      	mov	sp, r7
 801308e:	bd80      	pop	{r7, pc}

08013090 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013090:	b580      	push	{r7, lr}
 8013092:	b084      	sub	sp, #16
 8013094:	af00      	add	r7, sp, #0
 8013096:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013098:	f001 fdf6 	bl	8014c88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80130a4:	429a      	cmp	r2, r3
 80130a6:	d102      	bne.n	80130ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80130a8:	2301      	movs	r3, #1
 80130aa:	60fb      	str	r3, [r7, #12]
 80130ac:	e001      	b.n	80130b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80130ae:	2300      	movs	r3, #0
 80130b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80130b2:	f001 fe1b 	bl	8014cec <vPortExitCritical>

	return xReturn;
 80130b6:	68fb      	ldr	r3, [r7, #12]
}
 80130b8:	4618      	mov	r0, r3
 80130ba:	3710      	adds	r7, #16
 80130bc:	46bd      	mov	sp, r7
 80130be:	bd80      	pop	{r7, pc}

080130c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80130c0:	b480      	push	{r7}
 80130c2:	b085      	sub	sp, #20
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	6078      	str	r0, [r7, #4]
 80130c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80130ca:	2300      	movs	r3, #0
 80130cc:	60fb      	str	r3, [r7, #12]
 80130ce:	e014      	b.n	80130fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80130d0:	4a0f      	ldr	r2, [pc, #60]	@ (8013110 <vQueueAddToRegistry+0x50>)
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d10b      	bne.n	80130f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80130dc:	490c      	ldr	r1, [pc, #48]	@ (8013110 <vQueueAddToRegistry+0x50>)
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	683a      	ldr	r2, [r7, #0]
 80130e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80130e6:	4a0a      	ldr	r2, [pc, #40]	@ (8013110 <vQueueAddToRegistry+0x50>)
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	00db      	lsls	r3, r3, #3
 80130ec:	4413      	add	r3, r2
 80130ee:	687a      	ldr	r2, [r7, #4]
 80130f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80130f2:	e006      	b.n	8013102 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	3301      	adds	r3, #1
 80130f8:	60fb      	str	r3, [r7, #12]
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	2b07      	cmp	r3, #7
 80130fe:	d9e7      	bls.n	80130d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013100:	bf00      	nop
 8013102:	bf00      	nop
 8013104:	3714      	adds	r7, #20
 8013106:	46bd      	mov	sp, r7
 8013108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801310c:	4770      	bx	lr
 801310e:	bf00      	nop
 8013110:	20001bc4 	.word	0x20001bc4

08013114 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013114:	b580      	push	{r7, lr}
 8013116:	b086      	sub	sp, #24
 8013118:	af00      	add	r7, sp, #0
 801311a:	60f8      	str	r0, [r7, #12]
 801311c:	60b9      	str	r1, [r7, #8]
 801311e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8013124:	f001 fdb0 	bl	8014c88 <vPortEnterCritical>
 8013128:	697b      	ldr	r3, [r7, #20]
 801312a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801312e:	b25b      	sxtb	r3, r3
 8013130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013134:	d103      	bne.n	801313e <vQueueWaitForMessageRestricted+0x2a>
 8013136:	697b      	ldr	r3, [r7, #20]
 8013138:	2200      	movs	r2, #0
 801313a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801313e:	697b      	ldr	r3, [r7, #20]
 8013140:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013144:	b25b      	sxtb	r3, r3
 8013146:	f1b3 3fff 	cmp.w	r3, #4294967295
 801314a:	d103      	bne.n	8013154 <vQueueWaitForMessageRestricted+0x40>
 801314c:	697b      	ldr	r3, [r7, #20]
 801314e:	2200      	movs	r2, #0
 8013150:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013154:	f001 fdca 	bl	8014cec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8013158:	697b      	ldr	r3, [r7, #20]
 801315a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801315c:	2b00      	cmp	r3, #0
 801315e:	d106      	bne.n	801316e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8013160:	697b      	ldr	r3, [r7, #20]
 8013162:	3324      	adds	r3, #36	@ 0x24
 8013164:	687a      	ldr	r2, [r7, #4]
 8013166:	68b9      	ldr	r1, [r7, #8]
 8013168:	4618      	mov	r0, r3
 801316a:	f000 fd81 	bl	8013c70 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801316e:	6978      	ldr	r0, [r7, #20]
 8013170:	f7ff ff26 	bl	8012fc0 <prvUnlockQueue>
	}
 8013174:	bf00      	nop
 8013176:	3718      	adds	r7, #24
 8013178:	46bd      	mov	sp, r7
 801317a:	bd80      	pop	{r7, pc}

0801317c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801317c:	b580      	push	{r7, lr}
 801317e:	b08e      	sub	sp, #56	@ 0x38
 8013180:	af04      	add	r7, sp, #16
 8013182:	60f8      	str	r0, [r7, #12]
 8013184:	60b9      	str	r1, [r7, #8]
 8013186:	607a      	str	r2, [r7, #4]
 8013188:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801318a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801318c:	2b00      	cmp	r3, #0
 801318e:	d10b      	bne.n	80131a8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8013190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013194:	f383 8811 	msr	BASEPRI, r3
 8013198:	f3bf 8f6f 	isb	sy
 801319c:	f3bf 8f4f 	dsb	sy
 80131a0:	623b      	str	r3, [r7, #32]
}
 80131a2:	bf00      	nop
 80131a4:	bf00      	nop
 80131a6:	e7fd      	b.n	80131a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80131a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d10b      	bne.n	80131c6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80131ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80131b2:	f383 8811 	msr	BASEPRI, r3
 80131b6:	f3bf 8f6f 	isb	sy
 80131ba:	f3bf 8f4f 	dsb	sy
 80131be:	61fb      	str	r3, [r7, #28]
}
 80131c0:	bf00      	nop
 80131c2:	bf00      	nop
 80131c4:	e7fd      	b.n	80131c2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80131c6:	23a0      	movs	r3, #160	@ 0xa0
 80131c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80131ca:	693b      	ldr	r3, [r7, #16]
 80131cc:	2ba0      	cmp	r3, #160	@ 0xa0
 80131ce:	d00b      	beq.n	80131e8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80131d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80131d4:	f383 8811 	msr	BASEPRI, r3
 80131d8:	f3bf 8f6f 	isb	sy
 80131dc:	f3bf 8f4f 	dsb	sy
 80131e0:	61bb      	str	r3, [r7, #24]
}
 80131e2:	bf00      	nop
 80131e4:	bf00      	nop
 80131e6:	e7fd      	b.n	80131e4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80131e8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80131ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d01e      	beq.n	801322e <xTaskCreateStatic+0xb2>
 80131f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d01b      	beq.n	801322e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80131f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131f8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80131fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80131fe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013202:	2202      	movs	r2, #2
 8013204:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013208:	2300      	movs	r3, #0
 801320a:	9303      	str	r3, [sp, #12]
 801320c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801320e:	9302      	str	r3, [sp, #8]
 8013210:	f107 0314 	add.w	r3, r7, #20
 8013214:	9301      	str	r3, [sp, #4]
 8013216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013218:	9300      	str	r3, [sp, #0]
 801321a:	683b      	ldr	r3, [r7, #0]
 801321c:	687a      	ldr	r2, [r7, #4]
 801321e:	68b9      	ldr	r1, [r7, #8]
 8013220:	68f8      	ldr	r0, [r7, #12]
 8013222:	f000 f851 	bl	80132c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013226:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013228:	f000 f8ee 	bl	8013408 <prvAddNewTaskToReadyList>
 801322c:	e001      	b.n	8013232 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 801322e:	2300      	movs	r3, #0
 8013230:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013232:	697b      	ldr	r3, [r7, #20]
	}
 8013234:	4618      	mov	r0, r3
 8013236:	3728      	adds	r7, #40	@ 0x28
 8013238:	46bd      	mov	sp, r7
 801323a:	bd80      	pop	{r7, pc}

0801323c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801323c:	b580      	push	{r7, lr}
 801323e:	b08c      	sub	sp, #48	@ 0x30
 8013240:	af04      	add	r7, sp, #16
 8013242:	60f8      	str	r0, [r7, #12]
 8013244:	60b9      	str	r1, [r7, #8]
 8013246:	603b      	str	r3, [r7, #0]
 8013248:	4613      	mov	r3, r2
 801324a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801324c:	88fb      	ldrh	r3, [r7, #6]
 801324e:	009b      	lsls	r3, r3, #2
 8013250:	4618      	mov	r0, r3
 8013252:	f001 fe3b 	bl	8014ecc <pvPortMalloc>
 8013256:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013258:	697b      	ldr	r3, [r7, #20]
 801325a:	2b00      	cmp	r3, #0
 801325c:	d00e      	beq.n	801327c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801325e:	20a0      	movs	r0, #160	@ 0xa0
 8013260:	f001 fe34 	bl	8014ecc <pvPortMalloc>
 8013264:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013266:	69fb      	ldr	r3, [r7, #28]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d003      	beq.n	8013274 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801326c:	69fb      	ldr	r3, [r7, #28]
 801326e:	697a      	ldr	r2, [r7, #20]
 8013270:	631a      	str	r2, [r3, #48]	@ 0x30
 8013272:	e005      	b.n	8013280 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013274:	6978      	ldr	r0, [r7, #20]
 8013276:	f001 fef7 	bl	8015068 <vPortFree>
 801327a:	e001      	b.n	8013280 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801327c:	2300      	movs	r3, #0
 801327e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013280:	69fb      	ldr	r3, [r7, #28]
 8013282:	2b00      	cmp	r3, #0
 8013284:	d017      	beq.n	80132b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013286:	69fb      	ldr	r3, [r7, #28]
 8013288:	2200      	movs	r2, #0
 801328a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801328e:	88fa      	ldrh	r2, [r7, #6]
 8013290:	2300      	movs	r3, #0
 8013292:	9303      	str	r3, [sp, #12]
 8013294:	69fb      	ldr	r3, [r7, #28]
 8013296:	9302      	str	r3, [sp, #8]
 8013298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801329a:	9301      	str	r3, [sp, #4]
 801329c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801329e:	9300      	str	r3, [sp, #0]
 80132a0:	683b      	ldr	r3, [r7, #0]
 80132a2:	68b9      	ldr	r1, [r7, #8]
 80132a4:	68f8      	ldr	r0, [r7, #12]
 80132a6:	f000 f80f 	bl	80132c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80132aa:	69f8      	ldr	r0, [r7, #28]
 80132ac:	f000 f8ac 	bl	8013408 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80132b0:	2301      	movs	r3, #1
 80132b2:	61bb      	str	r3, [r7, #24]
 80132b4:	e002      	b.n	80132bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80132b6:	f04f 33ff 	mov.w	r3, #4294967295
 80132ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80132bc:	69bb      	ldr	r3, [r7, #24]
	}
 80132be:	4618      	mov	r0, r3
 80132c0:	3720      	adds	r7, #32
 80132c2:	46bd      	mov	sp, r7
 80132c4:	bd80      	pop	{r7, pc}
	...

080132c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80132c8:	b580      	push	{r7, lr}
 80132ca:	b088      	sub	sp, #32
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	60f8      	str	r0, [r7, #12]
 80132d0:	60b9      	str	r1, [r7, #8]
 80132d2:	607a      	str	r2, [r7, #4]
 80132d4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80132d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80132e0:	3b01      	subs	r3, #1
 80132e2:	009b      	lsls	r3, r3, #2
 80132e4:	4413      	add	r3, r2
 80132e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80132e8:	69bb      	ldr	r3, [r7, #24]
 80132ea:	f023 0307 	bic.w	r3, r3, #7
 80132ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80132f0:	69bb      	ldr	r3, [r7, #24]
 80132f2:	f003 0307 	and.w	r3, r3, #7
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d00b      	beq.n	8013312 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80132fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80132fe:	f383 8811 	msr	BASEPRI, r3
 8013302:	f3bf 8f6f 	isb	sy
 8013306:	f3bf 8f4f 	dsb	sy
 801330a:	617b      	str	r3, [r7, #20]
}
 801330c:	bf00      	nop
 801330e:	bf00      	nop
 8013310:	e7fd      	b.n	801330e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013312:	68bb      	ldr	r3, [r7, #8]
 8013314:	2b00      	cmp	r3, #0
 8013316:	d01f      	beq.n	8013358 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013318:	2300      	movs	r3, #0
 801331a:	61fb      	str	r3, [r7, #28]
 801331c:	e012      	b.n	8013344 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801331e:	68ba      	ldr	r2, [r7, #8]
 8013320:	69fb      	ldr	r3, [r7, #28]
 8013322:	4413      	add	r3, r2
 8013324:	7819      	ldrb	r1, [r3, #0]
 8013326:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013328:	69fb      	ldr	r3, [r7, #28]
 801332a:	4413      	add	r3, r2
 801332c:	3334      	adds	r3, #52	@ 0x34
 801332e:	460a      	mov	r2, r1
 8013330:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013332:	68ba      	ldr	r2, [r7, #8]
 8013334:	69fb      	ldr	r3, [r7, #28]
 8013336:	4413      	add	r3, r2
 8013338:	781b      	ldrb	r3, [r3, #0]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d006      	beq.n	801334c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801333e:	69fb      	ldr	r3, [r7, #28]
 8013340:	3301      	adds	r3, #1
 8013342:	61fb      	str	r3, [r7, #28]
 8013344:	69fb      	ldr	r3, [r7, #28]
 8013346:	2b0f      	cmp	r3, #15
 8013348:	d9e9      	bls.n	801331e <prvInitialiseNewTask+0x56>
 801334a:	e000      	b.n	801334e <prvInitialiseNewTask+0x86>
			{
				break;
 801334c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801334e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013350:	2200      	movs	r2, #0
 8013352:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8013356:	e003      	b.n	8013360 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801335a:	2200      	movs	r2, #0
 801335c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013362:	2b06      	cmp	r3, #6
 8013364:	d901      	bls.n	801336a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013366:	2306      	movs	r3, #6
 8013368:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801336a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801336c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801336e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013372:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013374:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8013376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013378:	2200      	movs	r2, #0
 801337a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801337c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801337e:	3304      	adds	r3, #4
 8013380:	4618      	mov	r0, r3
 8013382:	f7ff f935 	bl	80125f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013388:	3318      	adds	r3, #24
 801338a:	4618      	mov	r0, r3
 801338c:	f7ff f930 	bl	80125f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013392:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013394:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013398:	f1c3 0207 	rsb	r2, r3, #7
 801339c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801339e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80133a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80133a4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80133a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133a8:	2200      	movs	r2, #0
 80133aa:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80133ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133b0:	2200      	movs	r2, #0
 80133b2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80133b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133b8:	334c      	adds	r3, #76	@ 0x4c
 80133ba:	224c      	movs	r2, #76	@ 0x4c
 80133bc:	2100      	movs	r1, #0
 80133be:	4618      	mov	r0, r3
 80133c0:	f002 f8d6 	bl	8015570 <memset>
 80133c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133c6:	4a0d      	ldr	r2, [pc, #52]	@ (80133fc <prvInitialiseNewTask+0x134>)
 80133c8:	651a      	str	r2, [r3, #80]	@ 0x50
 80133ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133cc:	4a0c      	ldr	r2, [pc, #48]	@ (8013400 <prvInitialiseNewTask+0x138>)
 80133ce:	655a      	str	r2, [r3, #84]	@ 0x54
 80133d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133d2:	4a0c      	ldr	r2, [pc, #48]	@ (8013404 <prvInitialiseNewTask+0x13c>)
 80133d4:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80133d6:	683a      	ldr	r2, [r7, #0]
 80133d8:	68f9      	ldr	r1, [r7, #12]
 80133da:	69b8      	ldr	r0, [r7, #24]
 80133dc:	f001 fb22 	bl	8014a24 <pxPortInitialiseStack>
 80133e0:	4602      	mov	r2, r0
 80133e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80133e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d002      	beq.n	80133f2 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80133ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80133f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80133f2:	bf00      	nop
 80133f4:	3720      	adds	r7, #32
 80133f6:	46bd      	mov	sp, r7
 80133f8:	bd80      	pop	{r7, pc}
 80133fa:	bf00      	nop
 80133fc:	20005a5c 	.word	0x20005a5c
 8013400:	20005ac4 	.word	0x20005ac4
 8013404:	20005b2c 	.word	0x20005b2c

08013408 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013408:	b580      	push	{r7, lr}
 801340a:	b082      	sub	sp, #8
 801340c:	af00      	add	r7, sp, #0
 801340e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013410:	f001 fc3a 	bl	8014c88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013414:	4b2a      	ldr	r3, [pc, #168]	@ (80134c0 <prvAddNewTaskToReadyList+0xb8>)
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	3301      	adds	r3, #1
 801341a:	4a29      	ldr	r2, [pc, #164]	@ (80134c0 <prvAddNewTaskToReadyList+0xb8>)
 801341c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801341e:	4b29      	ldr	r3, [pc, #164]	@ (80134c4 <prvAddNewTaskToReadyList+0xbc>)
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	2b00      	cmp	r3, #0
 8013424:	d109      	bne.n	801343a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013426:	4a27      	ldr	r2, [pc, #156]	@ (80134c4 <prvAddNewTaskToReadyList+0xbc>)
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801342c:	4b24      	ldr	r3, [pc, #144]	@ (80134c0 <prvAddNewTaskToReadyList+0xb8>)
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	2b01      	cmp	r3, #1
 8013432:	d110      	bne.n	8013456 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013434:	f000 fd4a 	bl	8013ecc <prvInitialiseTaskLists>
 8013438:	e00d      	b.n	8013456 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801343a:	4b23      	ldr	r3, [pc, #140]	@ (80134c8 <prvAddNewTaskToReadyList+0xc0>)
 801343c:	681b      	ldr	r3, [r3, #0]
 801343e:	2b00      	cmp	r3, #0
 8013440:	d109      	bne.n	8013456 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013442:	4b20      	ldr	r3, [pc, #128]	@ (80134c4 <prvAddNewTaskToReadyList+0xbc>)
 8013444:	681b      	ldr	r3, [r3, #0]
 8013446:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801344c:	429a      	cmp	r2, r3
 801344e:	d802      	bhi.n	8013456 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013450:	4a1c      	ldr	r2, [pc, #112]	@ (80134c4 <prvAddNewTaskToReadyList+0xbc>)
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013456:	4b1d      	ldr	r3, [pc, #116]	@ (80134cc <prvAddNewTaskToReadyList+0xc4>)
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	3301      	adds	r3, #1
 801345c:	4a1b      	ldr	r2, [pc, #108]	@ (80134cc <prvAddNewTaskToReadyList+0xc4>)
 801345e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013464:	2201      	movs	r2, #1
 8013466:	409a      	lsls	r2, r3
 8013468:	4b19      	ldr	r3, [pc, #100]	@ (80134d0 <prvAddNewTaskToReadyList+0xc8>)
 801346a:	681b      	ldr	r3, [r3, #0]
 801346c:	4313      	orrs	r3, r2
 801346e:	4a18      	ldr	r2, [pc, #96]	@ (80134d0 <prvAddNewTaskToReadyList+0xc8>)
 8013470:	6013      	str	r3, [r2, #0]
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013476:	4613      	mov	r3, r2
 8013478:	009b      	lsls	r3, r3, #2
 801347a:	4413      	add	r3, r2
 801347c:	009b      	lsls	r3, r3, #2
 801347e:	4a15      	ldr	r2, [pc, #84]	@ (80134d4 <prvAddNewTaskToReadyList+0xcc>)
 8013480:	441a      	add	r2, r3
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	3304      	adds	r3, #4
 8013486:	4619      	mov	r1, r3
 8013488:	4610      	mov	r0, r2
 801348a:	f7ff f8be 	bl	801260a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801348e:	f001 fc2d 	bl	8014cec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013492:	4b0d      	ldr	r3, [pc, #52]	@ (80134c8 <prvAddNewTaskToReadyList+0xc0>)
 8013494:	681b      	ldr	r3, [r3, #0]
 8013496:	2b00      	cmp	r3, #0
 8013498:	d00e      	beq.n	80134b8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801349a:	4b0a      	ldr	r3, [pc, #40]	@ (80134c4 <prvAddNewTaskToReadyList+0xbc>)
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80134a4:	429a      	cmp	r2, r3
 80134a6:	d207      	bcs.n	80134b8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80134a8:	4b0b      	ldr	r3, [pc, #44]	@ (80134d8 <prvAddNewTaskToReadyList+0xd0>)
 80134aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80134ae:	601a      	str	r2, [r3, #0]
 80134b0:	f3bf 8f4f 	dsb	sy
 80134b4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80134b8:	bf00      	nop
 80134ba:	3708      	adds	r7, #8
 80134bc:	46bd      	mov	sp, r7
 80134be:	bd80      	pop	{r7, pc}
 80134c0:	20001d04 	.word	0x20001d04
 80134c4:	20001c04 	.word	0x20001c04
 80134c8:	20001d10 	.word	0x20001d10
 80134cc:	20001d20 	.word	0x20001d20
 80134d0:	20001d0c 	.word	0x20001d0c
 80134d4:	20001c08 	.word	0x20001c08
 80134d8:	e000ed04 	.word	0xe000ed04

080134dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80134dc:	b580      	push	{r7, lr}
 80134de:	b084      	sub	sp, #16
 80134e0:	af00      	add	r7, sp, #0
 80134e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80134e4:	2300      	movs	r3, #0
 80134e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d018      	beq.n	8013520 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80134ee:	4b14      	ldr	r3, [pc, #80]	@ (8013540 <vTaskDelay+0x64>)
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d00b      	beq.n	801350e <vTaskDelay+0x32>
	__asm volatile
 80134f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134fa:	f383 8811 	msr	BASEPRI, r3
 80134fe:	f3bf 8f6f 	isb	sy
 8013502:	f3bf 8f4f 	dsb	sy
 8013506:	60bb      	str	r3, [r7, #8]
}
 8013508:	bf00      	nop
 801350a:	bf00      	nop
 801350c:	e7fd      	b.n	801350a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801350e:	f000 f9af 	bl	8013870 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013512:	2100      	movs	r1, #0
 8013514:	6878      	ldr	r0, [r7, #4]
 8013516:	f000 fe43 	bl	80141a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801351a:	f000 f9b7 	bl	801388c <xTaskResumeAll>
 801351e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	2b00      	cmp	r3, #0
 8013524:	d107      	bne.n	8013536 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8013526:	4b07      	ldr	r3, [pc, #28]	@ (8013544 <vTaskDelay+0x68>)
 8013528:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801352c:	601a      	str	r2, [r3, #0]
 801352e:	f3bf 8f4f 	dsb	sy
 8013532:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013536:	bf00      	nop
 8013538:	3710      	adds	r7, #16
 801353a:	46bd      	mov	sp, r7
 801353c:	bd80      	pop	{r7, pc}
 801353e:	bf00      	nop
 8013540:	20001d2c 	.word	0x20001d2c
 8013544:	e000ed04 	.word	0xe000ed04

08013548 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8013548:	b580      	push	{r7, lr}
 801354a:	b084      	sub	sp, #16
 801354c:	af00      	add	r7, sp, #0
 801354e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8013550:	f001 fb9a 	bl	8014c88 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	2b00      	cmp	r3, #0
 8013558:	d102      	bne.n	8013560 <vTaskSuspend+0x18>
 801355a:	4b3d      	ldr	r3, [pc, #244]	@ (8013650 <vTaskSuspend+0x108>)
 801355c:	681b      	ldr	r3, [r3, #0]
 801355e:	e000      	b.n	8013562 <vTaskSuspend+0x1a>
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	3304      	adds	r3, #4
 8013568:	4618      	mov	r0, r3
 801356a:	f7ff f8ab 	bl	80126c4 <uxListRemove>
 801356e:	4603      	mov	r3, r0
 8013570:	2b00      	cmp	r3, #0
 8013572:	d115      	bne.n	80135a0 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013578:	4936      	ldr	r1, [pc, #216]	@ (8013654 <vTaskSuspend+0x10c>)
 801357a:	4613      	mov	r3, r2
 801357c:	009b      	lsls	r3, r3, #2
 801357e:	4413      	add	r3, r2
 8013580:	009b      	lsls	r3, r3, #2
 8013582:	440b      	add	r3, r1
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	2b00      	cmp	r3, #0
 8013588:	d10a      	bne.n	80135a0 <vTaskSuspend+0x58>
 801358a:	68fb      	ldr	r3, [r7, #12]
 801358c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801358e:	2201      	movs	r2, #1
 8013590:	fa02 f303 	lsl.w	r3, r2, r3
 8013594:	43da      	mvns	r2, r3
 8013596:	4b30      	ldr	r3, [pc, #192]	@ (8013658 <vTaskSuspend+0x110>)
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	4013      	ands	r3, r2
 801359c:	4a2e      	ldr	r2, [pc, #184]	@ (8013658 <vTaskSuspend+0x110>)
 801359e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80135a0:	68fb      	ldr	r3, [r7, #12]
 80135a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d004      	beq.n	80135b2 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	3318      	adds	r3, #24
 80135ac:	4618      	mov	r0, r3
 80135ae:	f7ff f889 	bl	80126c4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	3304      	adds	r3, #4
 80135b6:	4619      	mov	r1, r3
 80135b8:	4828      	ldr	r0, [pc, #160]	@ (801365c <vTaskSuspend+0x114>)
 80135ba:	f7ff f826 	bl	801260a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80135c4:	b2db      	uxtb	r3, r3
 80135c6:	2b01      	cmp	r3, #1
 80135c8:	d103      	bne.n	80135d2 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	2200      	movs	r2, #0
 80135ce:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80135d2:	f001 fb8b 	bl	8014cec <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80135d6:	4b22      	ldr	r3, [pc, #136]	@ (8013660 <vTaskSuspend+0x118>)
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d005      	beq.n	80135ea <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80135de:	f001 fb53 	bl	8014c88 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80135e2:	f000 fd17 	bl	8014014 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80135e6:	f001 fb81 	bl	8014cec <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80135ea:	4b19      	ldr	r3, [pc, #100]	@ (8013650 <vTaskSuspend+0x108>)
 80135ec:	681b      	ldr	r3, [r3, #0]
 80135ee:	68fa      	ldr	r2, [r7, #12]
 80135f0:	429a      	cmp	r2, r3
 80135f2:	d128      	bne.n	8013646 <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 80135f4:	4b1a      	ldr	r3, [pc, #104]	@ (8013660 <vTaskSuspend+0x118>)
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d018      	beq.n	801362e <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80135fc:	4b19      	ldr	r3, [pc, #100]	@ (8013664 <vTaskSuspend+0x11c>)
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	2b00      	cmp	r3, #0
 8013602:	d00b      	beq.n	801361c <vTaskSuspend+0xd4>
	__asm volatile
 8013604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013608:	f383 8811 	msr	BASEPRI, r3
 801360c:	f3bf 8f6f 	isb	sy
 8013610:	f3bf 8f4f 	dsb	sy
 8013614:	60bb      	str	r3, [r7, #8]
}
 8013616:	bf00      	nop
 8013618:	bf00      	nop
 801361a:	e7fd      	b.n	8013618 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 801361c:	4b12      	ldr	r3, [pc, #72]	@ (8013668 <vTaskSuspend+0x120>)
 801361e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013622:	601a      	str	r2, [r3, #0]
 8013624:	f3bf 8f4f 	dsb	sy
 8013628:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801362c:	e00b      	b.n	8013646 <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 801362e:	4b0b      	ldr	r3, [pc, #44]	@ (801365c <vTaskSuspend+0x114>)
 8013630:	681a      	ldr	r2, [r3, #0]
 8013632:	4b0e      	ldr	r3, [pc, #56]	@ (801366c <vTaskSuspend+0x124>)
 8013634:	681b      	ldr	r3, [r3, #0]
 8013636:	429a      	cmp	r2, r3
 8013638:	d103      	bne.n	8013642 <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 801363a:	4b05      	ldr	r3, [pc, #20]	@ (8013650 <vTaskSuspend+0x108>)
 801363c:	2200      	movs	r2, #0
 801363e:	601a      	str	r2, [r3, #0]
	}
 8013640:	e001      	b.n	8013646 <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 8013642:	f000 fa8b 	bl	8013b5c <vTaskSwitchContext>
	}
 8013646:	bf00      	nop
 8013648:	3710      	adds	r7, #16
 801364a:	46bd      	mov	sp, r7
 801364c:	bd80      	pop	{r7, pc}
 801364e:	bf00      	nop
 8013650:	20001c04 	.word	0x20001c04
 8013654:	20001c08 	.word	0x20001c08
 8013658:	20001d0c 	.word	0x20001d0c
 801365c:	20001cf0 	.word	0x20001cf0
 8013660:	20001d10 	.word	0x20001d10
 8013664:	20001d2c 	.word	0x20001d2c
 8013668:	e000ed04 	.word	0xe000ed04
 801366c:	20001d04 	.word	0x20001d04

08013670 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8013670:	b480      	push	{r7}
 8013672:	b087      	sub	sp, #28
 8013674:	af00      	add	r7, sp, #0
 8013676:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8013678:	2300      	movs	r3, #0
 801367a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	2b00      	cmp	r3, #0
 8013684:	d10b      	bne.n	801369e <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 8013686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801368a:	f383 8811 	msr	BASEPRI, r3
 801368e:	f3bf 8f6f 	isb	sy
 8013692:	f3bf 8f4f 	dsb	sy
 8013696:	60fb      	str	r3, [r7, #12]
}
 8013698:	bf00      	nop
 801369a:	bf00      	nop
 801369c:	e7fd      	b.n	801369a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 801369e:	693b      	ldr	r3, [r7, #16]
 80136a0:	695b      	ldr	r3, [r3, #20]
 80136a2:	4a0a      	ldr	r2, [pc, #40]	@ (80136cc <prvTaskIsTaskSuspended+0x5c>)
 80136a4:	4293      	cmp	r3, r2
 80136a6:	d10a      	bne.n	80136be <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80136a8:	693b      	ldr	r3, [r7, #16]
 80136aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80136ac:	4a08      	ldr	r2, [pc, #32]	@ (80136d0 <prvTaskIsTaskSuspended+0x60>)
 80136ae:	4293      	cmp	r3, r2
 80136b0:	d005      	beq.n	80136be <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80136b2:	693b      	ldr	r3, [r7, #16]
 80136b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d101      	bne.n	80136be <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 80136ba:	2301      	movs	r3, #1
 80136bc:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80136be:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80136c0:	4618      	mov	r0, r3
 80136c2:	371c      	adds	r7, #28
 80136c4:	46bd      	mov	sp, r7
 80136c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ca:	4770      	bx	lr
 80136cc:	20001cf0 	.word	0x20001cf0
 80136d0:	20001cc4 	.word	0x20001cc4

080136d4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80136d4:	b580      	push	{r7, lr}
 80136d6:	b084      	sub	sp, #16
 80136d8:	af00      	add	r7, sp, #0
 80136da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d10b      	bne.n	80136fe <vTaskResume+0x2a>
	__asm volatile
 80136e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136ea:	f383 8811 	msr	BASEPRI, r3
 80136ee:	f3bf 8f6f 	isb	sy
 80136f2:	f3bf 8f4f 	dsb	sy
 80136f6:	60bb      	str	r3, [r7, #8]
}
 80136f8:	bf00      	nop
 80136fa:	bf00      	nop
 80136fc:	e7fd      	b.n	80136fa <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80136fe:	4b20      	ldr	r3, [pc, #128]	@ (8013780 <vTaskResume+0xac>)
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	68fa      	ldr	r2, [r7, #12]
 8013704:	429a      	cmp	r2, r3
 8013706:	d037      	beq.n	8013778 <vTaskResume+0xa4>
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	2b00      	cmp	r3, #0
 801370c:	d034      	beq.n	8013778 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 801370e:	f001 fabb 	bl	8014c88 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8013712:	68f8      	ldr	r0, [r7, #12]
 8013714:	f7ff ffac 	bl	8013670 <prvTaskIsTaskSuspended>
 8013718:	4603      	mov	r3, r0
 801371a:	2b00      	cmp	r3, #0
 801371c:	d02a      	beq.n	8013774 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	3304      	adds	r3, #4
 8013722:	4618      	mov	r0, r3
 8013724:	f7fe ffce 	bl	80126c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013728:	68fb      	ldr	r3, [r7, #12]
 801372a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801372c:	2201      	movs	r2, #1
 801372e:	409a      	lsls	r2, r3
 8013730:	4b14      	ldr	r3, [pc, #80]	@ (8013784 <vTaskResume+0xb0>)
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	4313      	orrs	r3, r2
 8013736:	4a13      	ldr	r2, [pc, #76]	@ (8013784 <vTaskResume+0xb0>)
 8013738:	6013      	str	r3, [r2, #0]
 801373a:	68fb      	ldr	r3, [r7, #12]
 801373c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801373e:	4613      	mov	r3, r2
 8013740:	009b      	lsls	r3, r3, #2
 8013742:	4413      	add	r3, r2
 8013744:	009b      	lsls	r3, r3, #2
 8013746:	4a10      	ldr	r2, [pc, #64]	@ (8013788 <vTaskResume+0xb4>)
 8013748:	441a      	add	r2, r3
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	3304      	adds	r3, #4
 801374e:	4619      	mov	r1, r3
 8013750:	4610      	mov	r0, r2
 8013752:	f7fe ff5a 	bl	801260a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013756:	68fb      	ldr	r3, [r7, #12]
 8013758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801375a:	4b09      	ldr	r3, [pc, #36]	@ (8013780 <vTaskResume+0xac>)
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013760:	429a      	cmp	r2, r3
 8013762:	d307      	bcc.n	8013774 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8013764:	4b09      	ldr	r3, [pc, #36]	@ (801378c <vTaskResume+0xb8>)
 8013766:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801376a:	601a      	str	r2, [r3, #0]
 801376c:	f3bf 8f4f 	dsb	sy
 8013770:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8013774:	f001 faba 	bl	8014cec <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013778:	bf00      	nop
 801377a:	3710      	adds	r7, #16
 801377c:	46bd      	mov	sp, r7
 801377e:	bd80      	pop	{r7, pc}
 8013780:	20001c04 	.word	0x20001c04
 8013784:	20001d0c 	.word	0x20001d0c
 8013788:	20001c08 	.word	0x20001c08
 801378c:	e000ed04 	.word	0xe000ed04

08013790 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013790:	b580      	push	{r7, lr}
 8013792:	b08a      	sub	sp, #40	@ 0x28
 8013794:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013796:	2300      	movs	r3, #0
 8013798:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801379a:	2300      	movs	r3, #0
 801379c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801379e:	463a      	mov	r2, r7
 80137a0:	1d39      	adds	r1, r7, #4
 80137a2:	f107 0308 	add.w	r3, r7, #8
 80137a6:	4618      	mov	r0, r3
 80137a8:	f7ed fbfc 	bl	8000fa4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80137ac:	6839      	ldr	r1, [r7, #0]
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	68ba      	ldr	r2, [r7, #8]
 80137b2:	9202      	str	r2, [sp, #8]
 80137b4:	9301      	str	r3, [sp, #4]
 80137b6:	2300      	movs	r3, #0
 80137b8:	9300      	str	r3, [sp, #0]
 80137ba:	2300      	movs	r3, #0
 80137bc:	460a      	mov	r2, r1
 80137be:	4924      	ldr	r1, [pc, #144]	@ (8013850 <vTaskStartScheduler+0xc0>)
 80137c0:	4824      	ldr	r0, [pc, #144]	@ (8013854 <vTaskStartScheduler+0xc4>)
 80137c2:	f7ff fcdb 	bl	801317c <xTaskCreateStatic>
 80137c6:	4603      	mov	r3, r0
 80137c8:	4a23      	ldr	r2, [pc, #140]	@ (8013858 <vTaskStartScheduler+0xc8>)
 80137ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80137cc:	4b22      	ldr	r3, [pc, #136]	@ (8013858 <vTaskStartScheduler+0xc8>)
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d002      	beq.n	80137da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80137d4:	2301      	movs	r3, #1
 80137d6:	617b      	str	r3, [r7, #20]
 80137d8:	e001      	b.n	80137de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80137da:	2300      	movs	r3, #0
 80137dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80137de:	697b      	ldr	r3, [r7, #20]
 80137e0:	2b01      	cmp	r3, #1
 80137e2:	d102      	bne.n	80137ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80137e4:	f000 fd42 	bl	801426c <xTimerCreateTimerTask>
 80137e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80137ea:	697b      	ldr	r3, [r7, #20]
 80137ec:	2b01      	cmp	r3, #1
 80137ee:	d11b      	bne.n	8013828 <vTaskStartScheduler+0x98>
	__asm volatile
 80137f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80137f4:	f383 8811 	msr	BASEPRI, r3
 80137f8:	f3bf 8f6f 	isb	sy
 80137fc:	f3bf 8f4f 	dsb	sy
 8013800:	613b      	str	r3, [r7, #16]
}
 8013802:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013804:	4b15      	ldr	r3, [pc, #84]	@ (801385c <vTaskStartScheduler+0xcc>)
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	334c      	adds	r3, #76	@ 0x4c
 801380a:	4a15      	ldr	r2, [pc, #84]	@ (8013860 <vTaskStartScheduler+0xd0>)
 801380c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801380e:	4b15      	ldr	r3, [pc, #84]	@ (8013864 <vTaskStartScheduler+0xd4>)
 8013810:	f04f 32ff 	mov.w	r2, #4294967295
 8013814:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013816:	4b14      	ldr	r3, [pc, #80]	@ (8013868 <vTaskStartScheduler+0xd8>)
 8013818:	2201      	movs	r2, #1
 801381a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801381c:	4b13      	ldr	r3, [pc, #76]	@ (801386c <vTaskStartScheduler+0xdc>)
 801381e:	2200      	movs	r2, #0
 8013820:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013822:	f001 f98d 	bl	8014b40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013826:	e00f      	b.n	8013848 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013828:	697b      	ldr	r3, [r7, #20]
 801382a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801382e:	d10b      	bne.n	8013848 <vTaskStartScheduler+0xb8>
	__asm volatile
 8013830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013834:	f383 8811 	msr	BASEPRI, r3
 8013838:	f3bf 8f6f 	isb	sy
 801383c:	f3bf 8f4f 	dsb	sy
 8013840:	60fb      	str	r3, [r7, #12]
}
 8013842:	bf00      	nop
 8013844:	bf00      	nop
 8013846:	e7fd      	b.n	8013844 <vTaskStartScheduler+0xb4>
}
 8013848:	bf00      	nop
 801384a:	3718      	adds	r7, #24
 801384c:	46bd      	mov	sp, r7
 801384e:	bd80      	pop	{r7, pc}
 8013850:	080161c4 	.word	0x080161c4
 8013854:	08013e9d 	.word	0x08013e9d
 8013858:	20001d28 	.word	0x20001d28
 801385c:	20001c04 	.word	0x20001c04
 8013860:	20000174 	.word	0x20000174
 8013864:	20001d24 	.word	0x20001d24
 8013868:	20001d10 	.word	0x20001d10
 801386c:	20001d08 	.word	0x20001d08

08013870 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013870:	b480      	push	{r7}
 8013872:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8013874:	4b04      	ldr	r3, [pc, #16]	@ (8013888 <vTaskSuspendAll+0x18>)
 8013876:	681b      	ldr	r3, [r3, #0]
 8013878:	3301      	adds	r3, #1
 801387a:	4a03      	ldr	r2, [pc, #12]	@ (8013888 <vTaskSuspendAll+0x18>)
 801387c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801387e:	bf00      	nop
 8013880:	46bd      	mov	sp, r7
 8013882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013886:	4770      	bx	lr
 8013888:	20001d2c 	.word	0x20001d2c

0801388c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801388c:	b580      	push	{r7, lr}
 801388e:	b084      	sub	sp, #16
 8013890:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013892:	2300      	movs	r3, #0
 8013894:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013896:	2300      	movs	r3, #0
 8013898:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801389a:	4b42      	ldr	r3, [pc, #264]	@ (80139a4 <xTaskResumeAll+0x118>)
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d10b      	bne.n	80138ba <xTaskResumeAll+0x2e>
	__asm volatile
 80138a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80138a6:	f383 8811 	msr	BASEPRI, r3
 80138aa:	f3bf 8f6f 	isb	sy
 80138ae:	f3bf 8f4f 	dsb	sy
 80138b2:	603b      	str	r3, [r7, #0]
}
 80138b4:	bf00      	nop
 80138b6:	bf00      	nop
 80138b8:	e7fd      	b.n	80138b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80138ba:	f001 f9e5 	bl	8014c88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80138be:	4b39      	ldr	r3, [pc, #228]	@ (80139a4 <xTaskResumeAll+0x118>)
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	3b01      	subs	r3, #1
 80138c4:	4a37      	ldr	r2, [pc, #220]	@ (80139a4 <xTaskResumeAll+0x118>)
 80138c6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80138c8:	4b36      	ldr	r3, [pc, #216]	@ (80139a4 <xTaskResumeAll+0x118>)
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d161      	bne.n	8013994 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80138d0:	4b35      	ldr	r3, [pc, #212]	@ (80139a8 <xTaskResumeAll+0x11c>)
 80138d2:	681b      	ldr	r3, [r3, #0]
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d05d      	beq.n	8013994 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80138d8:	e02e      	b.n	8013938 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80138da:	4b34      	ldr	r3, [pc, #208]	@ (80139ac <xTaskResumeAll+0x120>)
 80138dc:	68db      	ldr	r3, [r3, #12]
 80138de:	68db      	ldr	r3, [r3, #12]
 80138e0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	3318      	adds	r3, #24
 80138e6:	4618      	mov	r0, r3
 80138e8:	f7fe feec 	bl	80126c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	3304      	adds	r3, #4
 80138f0:	4618      	mov	r0, r3
 80138f2:	f7fe fee7 	bl	80126c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138fa:	2201      	movs	r2, #1
 80138fc:	409a      	lsls	r2, r3
 80138fe:	4b2c      	ldr	r3, [pc, #176]	@ (80139b0 <xTaskResumeAll+0x124>)
 8013900:	681b      	ldr	r3, [r3, #0]
 8013902:	4313      	orrs	r3, r2
 8013904:	4a2a      	ldr	r2, [pc, #168]	@ (80139b0 <xTaskResumeAll+0x124>)
 8013906:	6013      	str	r3, [r2, #0]
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801390c:	4613      	mov	r3, r2
 801390e:	009b      	lsls	r3, r3, #2
 8013910:	4413      	add	r3, r2
 8013912:	009b      	lsls	r3, r3, #2
 8013914:	4a27      	ldr	r2, [pc, #156]	@ (80139b4 <xTaskResumeAll+0x128>)
 8013916:	441a      	add	r2, r3
 8013918:	68fb      	ldr	r3, [r7, #12]
 801391a:	3304      	adds	r3, #4
 801391c:	4619      	mov	r1, r3
 801391e:	4610      	mov	r0, r2
 8013920:	f7fe fe73 	bl	801260a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013928:	4b23      	ldr	r3, [pc, #140]	@ (80139b8 <xTaskResumeAll+0x12c>)
 801392a:	681b      	ldr	r3, [r3, #0]
 801392c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801392e:	429a      	cmp	r2, r3
 8013930:	d302      	bcc.n	8013938 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8013932:	4b22      	ldr	r3, [pc, #136]	@ (80139bc <xTaskResumeAll+0x130>)
 8013934:	2201      	movs	r2, #1
 8013936:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013938:	4b1c      	ldr	r3, [pc, #112]	@ (80139ac <xTaskResumeAll+0x120>)
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	2b00      	cmp	r3, #0
 801393e:	d1cc      	bne.n	80138da <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	2b00      	cmp	r3, #0
 8013944:	d001      	beq.n	801394a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013946:	f000 fb65 	bl	8014014 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801394a:	4b1d      	ldr	r3, [pc, #116]	@ (80139c0 <xTaskResumeAll+0x134>)
 801394c:	681b      	ldr	r3, [r3, #0]
 801394e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	2b00      	cmp	r3, #0
 8013954:	d010      	beq.n	8013978 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013956:	f000 f847 	bl	80139e8 <xTaskIncrementTick>
 801395a:	4603      	mov	r3, r0
 801395c:	2b00      	cmp	r3, #0
 801395e:	d002      	beq.n	8013966 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8013960:	4b16      	ldr	r3, [pc, #88]	@ (80139bc <xTaskResumeAll+0x130>)
 8013962:	2201      	movs	r2, #1
 8013964:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	3b01      	subs	r3, #1
 801396a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	2b00      	cmp	r3, #0
 8013970:	d1f1      	bne.n	8013956 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8013972:	4b13      	ldr	r3, [pc, #76]	@ (80139c0 <xTaskResumeAll+0x134>)
 8013974:	2200      	movs	r2, #0
 8013976:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013978:	4b10      	ldr	r3, [pc, #64]	@ (80139bc <xTaskResumeAll+0x130>)
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	2b00      	cmp	r3, #0
 801397e:	d009      	beq.n	8013994 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013980:	2301      	movs	r3, #1
 8013982:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013984:	4b0f      	ldr	r3, [pc, #60]	@ (80139c4 <xTaskResumeAll+0x138>)
 8013986:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801398a:	601a      	str	r2, [r3, #0]
 801398c:	f3bf 8f4f 	dsb	sy
 8013990:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013994:	f001 f9aa 	bl	8014cec <vPortExitCritical>

	return xAlreadyYielded;
 8013998:	68bb      	ldr	r3, [r7, #8]
}
 801399a:	4618      	mov	r0, r3
 801399c:	3710      	adds	r7, #16
 801399e:	46bd      	mov	sp, r7
 80139a0:	bd80      	pop	{r7, pc}
 80139a2:	bf00      	nop
 80139a4:	20001d2c 	.word	0x20001d2c
 80139a8:	20001d04 	.word	0x20001d04
 80139ac:	20001cc4 	.word	0x20001cc4
 80139b0:	20001d0c 	.word	0x20001d0c
 80139b4:	20001c08 	.word	0x20001c08
 80139b8:	20001c04 	.word	0x20001c04
 80139bc:	20001d18 	.word	0x20001d18
 80139c0:	20001d14 	.word	0x20001d14
 80139c4:	e000ed04 	.word	0xe000ed04

080139c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80139c8:	b480      	push	{r7}
 80139ca:	b083      	sub	sp, #12
 80139cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80139ce:	4b05      	ldr	r3, [pc, #20]	@ (80139e4 <xTaskGetTickCount+0x1c>)
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80139d4:	687b      	ldr	r3, [r7, #4]
}
 80139d6:	4618      	mov	r0, r3
 80139d8:	370c      	adds	r7, #12
 80139da:	46bd      	mov	sp, r7
 80139dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139e0:	4770      	bx	lr
 80139e2:	bf00      	nop
 80139e4:	20001d08 	.word	0x20001d08

080139e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80139e8:	b580      	push	{r7, lr}
 80139ea:	b086      	sub	sp, #24
 80139ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80139ee:	2300      	movs	r3, #0
 80139f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80139f2:	4b4f      	ldr	r3, [pc, #316]	@ (8013b30 <xTaskIncrementTick+0x148>)
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	f040 808f 	bne.w	8013b1a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80139fc:	4b4d      	ldr	r3, [pc, #308]	@ (8013b34 <xTaskIncrementTick+0x14c>)
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	3301      	adds	r3, #1
 8013a02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013a04:	4a4b      	ldr	r2, [pc, #300]	@ (8013b34 <xTaskIncrementTick+0x14c>)
 8013a06:	693b      	ldr	r3, [r7, #16]
 8013a08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013a0a:	693b      	ldr	r3, [r7, #16]
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d121      	bne.n	8013a54 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8013a10:	4b49      	ldr	r3, [pc, #292]	@ (8013b38 <xTaskIncrementTick+0x150>)
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d00b      	beq.n	8013a32 <xTaskIncrementTick+0x4a>
	__asm volatile
 8013a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a1e:	f383 8811 	msr	BASEPRI, r3
 8013a22:	f3bf 8f6f 	isb	sy
 8013a26:	f3bf 8f4f 	dsb	sy
 8013a2a:	603b      	str	r3, [r7, #0]
}
 8013a2c:	bf00      	nop
 8013a2e:	bf00      	nop
 8013a30:	e7fd      	b.n	8013a2e <xTaskIncrementTick+0x46>
 8013a32:	4b41      	ldr	r3, [pc, #260]	@ (8013b38 <xTaskIncrementTick+0x150>)
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	60fb      	str	r3, [r7, #12]
 8013a38:	4b40      	ldr	r3, [pc, #256]	@ (8013b3c <xTaskIncrementTick+0x154>)
 8013a3a:	681b      	ldr	r3, [r3, #0]
 8013a3c:	4a3e      	ldr	r2, [pc, #248]	@ (8013b38 <xTaskIncrementTick+0x150>)
 8013a3e:	6013      	str	r3, [r2, #0]
 8013a40:	4a3e      	ldr	r2, [pc, #248]	@ (8013b3c <xTaskIncrementTick+0x154>)
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	6013      	str	r3, [r2, #0]
 8013a46:	4b3e      	ldr	r3, [pc, #248]	@ (8013b40 <xTaskIncrementTick+0x158>)
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	3301      	adds	r3, #1
 8013a4c:	4a3c      	ldr	r2, [pc, #240]	@ (8013b40 <xTaskIncrementTick+0x158>)
 8013a4e:	6013      	str	r3, [r2, #0]
 8013a50:	f000 fae0 	bl	8014014 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013a54:	4b3b      	ldr	r3, [pc, #236]	@ (8013b44 <xTaskIncrementTick+0x15c>)
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	693a      	ldr	r2, [r7, #16]
 8013a5a:	429a      	cmp	r2, r3
 8013a5c:	d348      	bcc.n	8013af0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013a5e:	4b36      	ldr	r3, [pc, #216]	@ (8013b38 <xTaskIncrementTick+0x150>)
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d104      	bne.n	8013a72 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013a68:	4b36      	ldr	r3, [pc, #216]	@ (8013b44 <xTaskIncrementTick+0x15c>)
 8013a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8013a6e:	601a      	str	r2, [r3, #0]
					break;
 8013a70:	e03e      	b.n	8013af0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013a72:	4b31      	ldr	r3, [pc, #196]	@ (8013b38 <xTaskIncrementTick+0x150>)
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	68db      	ldr	r3, [r3, #12]
 8013a78:	68db      	ldr	r3, [r3, #12]
 8013a7a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013a7c:	68bb      	ldr	r3, [r7, #8]
 8013a7e:	685b      	ldr	r3, [r3, #4]
 8013a80:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013a82:	693a      	ldr	r2, [r7, #16]
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	429a      	cmp	r2, r3
 8013a88:	d203      	bcs.n	8013a92 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013a8a:	4a2e      	ldr	r2, [pc, #184]	@ (8013b44 <xTaskIncrementTick+0x15c>)
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013a90:	e02e      	b.n	8013af0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013a92:	68bb      	ldr	r3, [r7, #8]
 8013a94:	3304      	adds	r3, #4
 8013a96:	4618      	mov	r0, r3
 8013a98:	f7fe fe14 	bl	80126c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013a9c:	68bb      	ldr	r3, [r7, #8]
 8013a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d004      	beq.n	8013aae <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013aa4:	68bb      	ldr	r3, [r7, #8]
 8013aa6:	3318      	adds	r3, #24
 8013aa8:	4618      	mov	r0, r3
 8013aaa:	f7fe fe0b 	bl	80126c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013aae:	68bb      	ldr	r3, [r7, #8]
 8013ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013ab2:	2201      	movs	r2, #1
 8013ab4:	409a      	lsls	r2, r3
 8013ab6:	4b24      	ldr	r3, [pc, #144]	@ (8013b48 <xTaskIncrementTick+0x160>)
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	4313      	orrs	r3, r2
 8013abc:	4a22      	ldr	r2, [pc, #136]	@ (8013b48 <xTaskIncrementTick+0x160>)
 8013abe:	6013      	str	r3, [r2, #0]
 8013ac0:	68bb      	ldr	r3, [r7, #8]
 8013ac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013ac4:	4613      	mov	r3, r2
 8013ac6:	009b      	lsls	r3, r3, #2
 8013ac8:	4413      	add	r3, r2
 8013aca:	009b      	lsls	r3, r3, #2
 8013acc:	4a1f      	ldr	r2, [pc, #124]	@ (8013b4c <xTaskIncrementTick+0x164>)
 8013ace:	441a      	add	r2, r3
 8013ad0:	68bb      	ldr	r3, [r7, #8]
 8013ad2:	3304      	adds	r3, #4
 8013ad4:	4619      	mov	r1, r3
 8013ad6:	4610      	mov	r0, r2
 8013ad8:	f7fe fd97 	bl	801260a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013adc:	68bb      	ldr	r3, [r7, #8]
 8013ade:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8013b50 <xTaskIncrementTick+0x168>)
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013ae6:	429a      	cmp	r2, r3
 8013ae8:	d3b9      	bcc.n	8013a5e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8013aea:	2301      	movs	r3, #1
 8013aec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013aee:	e7b6      	b.n	8013a5e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013af0:	4b17      	ldr	r3, [pc, #92]	@ (8013b50 <xTaskIncrementTick+0x168>)
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013af6:	4915      	ldr	r1, [pc, #84]	@ (8013b4c <xTaskIncrementTick+0x164>)
 8013af8:	4613      	mov	r3, r2
 8013afa:	009b      	lsls	r3, r3, #2
 8013afc:	4413      	add	r3, r2
 8013afe:	009b      	lsls	r3, r3, #2
 8013b00:	440b      	add	r3, r1
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	2b01      	cmp	r3, #1
 8013b06:	d901      	bls.n	8013b0c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8013b08:	2301      	movs	r3, #1
 8013b0a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8013b0c:	4b11      	ldr	r3, [pc, #68]	@ (8013b54 <xTaskIncrementTick+0x16c>)
 8013b0e:	681b      	ldr	r3, [r3, #0]
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d007      	beq.n	8013b24 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8013b14:	2301      	movs	r3, #1
 8013b16:	617b      	str	r3, [r7, #20]
 8013b18:	e004      	b.n	8013b24 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8013b1a:	4b0f      	ldr	r3, [pc, #60]	@ (8013b58 <xTaskIncrementTick+0x170>)
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	3301      	adds	r3, #1
 8013b20:	4a0d      	ldr	r2, [pc, #52]	@ (8013b58 <xTaskIncrementTick+0x170>)
 8013b22:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8013b24:	697b      	ldr	r3, [r7, #20]
}
 8013b26:	4618      	mov	r0, r3
 8013b28:	3718      	adds	r7, #24
 8013b2a:	46bd      	mov	sp, r7
 8013b2c:	bd80      	pop	{r7, pc}
 8013b2e:	bf00      	nop
 8013b30:	20001d2c 	.word	0x20001d2c
 8013b34:	20001d08 	.word	0x20001d08
 8013b38:	20001cbc 	.word	0x20001cbc
 8013b3c:	20001cc0 	.word	0x20001cc0
 8013b40:	20001d1c 	.word	0x20001d1c
 8013b44:	20001d24 	.word	0x20001d24
 8013b48:	20001d0c 	.word	0x20001d0c
 8013b4c:	20001c08 	.word	0x20001c08
 8013b50:	20001c04 	.word	0x20001c04
 8013b54:	20001d18 	.word	0x20001d18
 8013b58:	20001d14 	.word	0x20001d14

08013b5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013b5c:	b480      	push	{r7}
 8013b5e:	b087      	sub	sp, #28
 8013b60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013b62:	4b2a      	ldr	r3, [pc, #168]	@ (8013c0c <vTaskSwitchContext+0xb0>)
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d003      	beq.n	8013b72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013b6a:	4b29      	ldr	r3, [pc, #164]	@ (8013c10 <vTaskSwitchContext+0xb4>)
 8013b6c:	2201      	movs	r2, #1
 8013b6e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013b70:	e045      	b.n	8013bfe <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8013b72:	4b27      	ldr	r3, [pc, #156]	@ (8013c10 <vTaskSwitchContext+0xb4>)
 8013b74:	2200      	movs	r2, #0
 8013b76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013b78:	4b26      	ldr	r3, [pc, #152]	@ (8013c14 <vTaskSwitchContext+0xb8>)
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	fab3 f383 	clz	r3, r3
 8013b84:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8013b86:	7afb      	ldrb	r3, [r7, #11]
 8013b88:	f1c3 031f 	rsb	r3, r3, #31
 8013b8c:	617b      	str	r3, [r7, #20]
 8013b8e:	4922      	ldr	r1, [pc, #136]	@ (8013c18 <vTaskSwitchContext+0xbc>)
 8013b90:	697a      	ldr	r2, [r7, #20]
 8013b92:	4613      	mov	r3, r2
 8013b94:	009b      	lsls	r3, r3, #2
 8013b96:	4413      	add	r3, r2
 8013b98:	009b      	lsls	r3, r3, #2
 8013b9a:	440b      	add	r3, r1
 8013b9c:	681b      	ldr	r3, [r3, #0]
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d10b      	bne.n	8013bba <vTaskSwitchContext+0x5e>
	__asm volatile
 8013ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ba6:	f383 8811 	msr	BASEPRI, r3
 8013baa:	f3bf 8f6f 	isb	sy
 8013bae:	f3bf 8f4f 	dsb	sy
 8013bb2:	607b      	str	r3, [r7, #4]
}
 8013bb4:	bf00      	nop
 8013bb6:	bf00      	nop
 8013bb8:	e7fd      	b.n	8013bb6 <vTaskSwitchContext+0x5a>
 8013bba:	697a      	ldr	r2, [r7, #20]
 8013bbc:	4613      	mov	r3, r2
 8013bbe:	009b      	lsls	r3, r3, #2
 8013bc0:	4413      	add	r3, r2
 8013bc2:	009b      	lsls	r3, r3, #2
 8013bc4:	4a14      	ldr	r2, [pc, #80]	@ (8013c18 <vTaskSwitchContext+0xbc>)
 8013bc6:	4413      	add	r3, r2
 8013bc8:	613b      	str	r3, [r7, #16]
 8013bca:	693b      	ldr	r3, [r7, #16]
 8013bcc:	685b      	ldr	r3, [r3, #4]
 8013bce:	685a      	ldr	r2, [r3, #4]
 8013bd0:	693b      	ldr	r3, [r7, #16]
 8013bd2:	605a      	str	r2, [r3, #4]
 8013bd4:	693b      	ldr	r3, [r7, #16]
 8013bd6:	685a      	ldr	r2, [r3, #4]
 8013bd8:	693b      	ldr	r3, [r7, #16]
 8013bda:	3308      	adds	r3, #8
 8013bdc:	429a      	cmp	r2, r3
 8013bde:	d104      	bne.n	8013bea <vTaskSwitchContext+0x8e>
 8013be0:	693b      	ldr	r3, [r7, #16]
 8013be2:	685b      	ldr	r3, [r3, #4]
 8013be4:	685a      	ldr	r2, [r3, #4]
 8013be6:	693b      	ldr	r3, [r7, #16]
 8013be8:	605a      	str	r2, [r3, #4]
 8013bea:	693b      	ldr	r3, [r7, #16]
 8013bec:	685b      	ldr	r3, [r3, #4]
 8013bee:	68db      	ldr	r3, [r3, #12]
 8013bf0:	4a0a      	ldr	r2, [pc, #40]	@ (8013c1c <vTaskSwitchContext+0xc0>)
 8013bf2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013bf4:	4b09      	ldr	r3, [pc, #36]	@ (8013c1c <vTaskSwitchContext+0xc0>)
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	334c      	adds	r3, #76	@ 0x4c
 8013bfa:	4a09      	ldr	r2, [pc, #36]	@ (8013c20 <vTaskSwitchContext+0xc4>)
 8013bfc:	6013      	str	r3, [r2, #0]
}
 8013bfe:	bf00      	nop
 8013c00:	371c      	adds	r7, #28
 8013c02:	46bd      	mov	sp, r7
 8013c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c08:	4770      	bx	lr
 8013c0a:	bf00      	nop
 8013c0c:	20001d2c 	.word	0x20001d2c
 8013c10:	20001d18 	.word	0x20001d18
 8013c14:	20001d0c 	.word	0x20001d0c
 8013c18:	20001c08 	.word	0x20001c08
 8013c1c:	20001c04 	.word	0x20001c04
 8013c20:	20000174 	.word	0x20000174

08013c24 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013c24:	b580      	push	{r7, lr}
 8013c26:	b084      	sub	sp, #16
 8013c28:	af00      	add	r7, sp, #0
 8013c2a:	6078      	str	r0, [r7, #4]
 8013c2c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d10b      	bne.n	8013c4c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8013c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c38:	f383 8811 	msr	BASEPRI, r3
 8013c3c:	f3bf 8f6f 	isb	sy
 8013c40:	f3bf 8f4f 	dsb	sy
 8013c44:	60fb      	str	r3, [r7, #12]
}
 8013c46:	bf00      	nop
 8013c48:	bf00      	nop
 8013c4a:	e7fd      	b.n	8013c48 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013c4c:	4b07      	ldr	r3, [pc, #28]	@ (8013c6c <vTaskPlaceOnEventList+0x48>)
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	3318      	adds	r3, #24
 8013c52:	4619      	mov	r1, r3
 8013c54:	6878      	ldr	r0, [r7, #4]
 8013c56:	f7fe fcfc 	bl	8012652 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013c5a:	2101      	movs	r1, #1
 8013c5c:	6838      	ldr	r0, [r7, #0]
 8013c5e:	f000 fa9f 	bl	80141a0 <prvAddCurrentTaskToDelayedList>
}
 8013c62:	bf00      	nop
 8013c64:	3710      	adds	r7, #16
 8013c66:	46bd      	mov	sp, r7
 8013c68:	bd80      	pop	{r7, pc}
 8013c6a:	bf00      	nop
 8013c6c:	20001c04 	.word	0x20001c04

08013c70 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013c70:	b580      	push	{r7, lr}
 8013c72:	b086      	sub	sp, #24
 8013c74:	af00      	add	r7, sp, #0
 8013c76:	60f8      	str	r0, [r7, #12]
 8013c78:	60b9      	str	r1, [r7, #8]
 8013c7a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d10b      	bne.n	8013c9a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8013c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c86:	f383 8811 	msr	BASEPRI, r3
 8013c8a:	f3bf 8f6f 	isb	sy
 8013c8e:	f3bf 8f4f 	dsb	sy
 8013c92:	617b      	str	r3, [r7, #20]
}
 8013c94:	bf00      	nop
 8013c96:	bf00      	nop
 8013c98:	e7fd      	b.n	8013c96 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8013cc4 <vTaskPlaceOnEventListRestricted+0x54>)
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	3318      	adds	r3, #24
 8013ca0:	4619      	mov	r1, r3
 8013ca2:	68f8      	ldr	r0, [r7, #12]
 8013ca4:	f7fe fcb1 	bl	801260a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d002      	beq.n	8013cb4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8013cae:	f04f 33ff 	mov.w	r3, #4294967295
 8013cb2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8013cb4:	6879      	ldr	r1, [r7, #4]
 8013cb6:	68b8      	ldr	r0, [r7, #8]
 8013cb8:	f000 fa72 	bl	80141a0 <prvAddCurrentTaskToDelayedList>
	}
 8013cbc:	bf00      	nop
 8013cbe:	3718      	adds	r7, #24
 8013cc0:	46bd      	mov	sp, r7
 8013cc2:	bd80      	pop	{r7, pc}
 8013cc4:	20001c04 	.word	0x20001c04

08013cc8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013cc8:	b580      	push	{r7, lr}
 8013cca:	b086      	sub	sp, #24
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	68db      	ldr	r3, [r3, #12]
 8013cd4:	68db      	ldr	r3, [r3, #12]
 8013cd6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013cd8:	693b      	ldr	r3, [r7, #16]
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d10b      	bne.n	8013cf6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8013cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ce2:	f383 8811 	msr	BASEPRI, r3
 8013ce6:	f3bf 8f6f 	isb	sy
 8013cea:	f3bf 8f4f 	dsb	sy
 8013cee:	60fb      	str	r3, [r7, #12]
}
 8013cf0:	bf00      	nop
 8013cf2:	bf00      	nop
 8013cf4:	e7fd      	b.n	8013cf2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013cf6:	693b      	ldr	r3, [r7, #16]
 8013cf8:	3318      	adds	r3, #24
 8013cfa:	4618      	mov	r0, r3
 8013cfc:	f7fe fce2 	bl	80126c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013d00:	4b1d      	ldr	r3, [pc, #116]	@ (8013d78 <xTaskRemoveFromEventList+0xb0>)
 8013d02:	681b      	ldr	r3, [r3, #0]
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d11c      	bne.n	8013d42 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013d08:	693b      	ldr	r3, [r7, #16]
 8013d0a:	3304      	adds	r3, #4
 8013d0c:	4618      	mov	r0, r3
 8013d0e:	f7fe fcd9 	bl	80126c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013d12:	693b      	ldr	r3, [r7, #16]
 8013d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d16:	2201      	movs	r2, #1
 8013d18:	409a      	lsls	r2, r3
 8013d1a:	4b18      	ldr	r3, [pc, #96]	@ (8013d7c <xTaskRemoveFromEventList+0xb4>)
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	4313      	orrs	r3, r2
 8013d20:	4a16      	ldr	r2, [pc, #88]	@ (8013d7c <xTaskRemoveFromEventList+0xb4>)
 8013d22:	6013      	str	r3, [r2, #0]
 8013d24:	693b      	ldr	r3, [r7, #16]
 8013d26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013d28:	4613      	mov	r3, r2
 8013d2a:	009b      	lsls	r3, r3, #2
 8013d2c:	4413      	add	r3, r2
 8013d2e:	009b      	lsls	r3, r3, #2
 8013d30:	4a13      	ldr	r2, [pc, #76]	@ (8013d80 <xTaskRemoveFromEventList+0xb8>)
 8013d32:	441a      	add	r2, r3
 8013d34:	693b      	ldr	r3, [r7, #16]
 8013d36:	3304      	adds	r3, #4
 8013d38:	4619      	mov	r1, r3
 8013d3a:	4610      	mov	r0, r2
 8013d3c:	f7fe fc65 	bl	801260a <vListInsertEnd>
 8013d40:	e005      	b.n	8013d4e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013d42:	693b      	ldr	r3, [r7, #16]
 8013d44:	3318      	adds	r3, #24
 8013d46:	4619      	mov	r1, r3
 8013d48:	480e      	ldr	r0, [pc, #56]	@ (8013d84 <xTaskRemoveFromEventList+0xbc>)
 8013d4a:	f7fe fc5e 	bl	801260a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013d4e:	693b      	ldr	r3, [r7, #16]
 8013d50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013d52:	4b0d      	ldr	r3, [pc, #52]	@ (8013d88 <xTaskRemoveFromEventList+0xc0>)
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d58:	429a      	cmp	r2, r3
 8013d5a:	d905      	bls.n	8013d68 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013d5c:	2301      	movs	r3, #1
 8013d5e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013d60:	4b0a      	ldr	r3, [pc, #40]	@ (8013d8c <xTaskRemoveFromEventList+0xc4>)
 8013d62:	2201      	movs	r2, #1
 8013d64:	601a      	str	r2, [r3, #0]
 8013d66:	e001      	b.n	8013d6c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8013d68:	2300      	movs	r3, #0
 8013d6a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013d6c:	697b      	ldr	r3, [r7, #20]
}
 8013d6e:	4618      	mov	r0, r3
 8013d70:	3718      	adds	r7, #24
 8013d72:	46bd      	mov	sp, r7
 8013d74:	bd80      	pop	{r7, pc}
 8013d76:	bf00      	nop
 8013d78:	20001d2c 	.word	0x20001d2c
 8013d7c:	20001d0c 	.word	0x20001d0c
 8013d80:	20001c08 	.word	0x20001c08
 8013d84:	20001cc4 	.word	0x20001cc4
 8013d88:	20001c04 	.word	0x20001c04
 8013d8c:	20001d18 	.word	0x20001d18

08013d90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013d90:	b480      	push	{r7}
 8013d92:	b083      	sub	sp, #12
 8013d94:	af00      	add	r7, sp, #0
 8013d96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013d98:	4b06      	ldr	r3, [pc, #24]	@ (8013db4 <vTaskInternalSetTimeOutState+0x24>)
 8013d9a:	681a      	ldr	r2, [r3, #0]
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013da0:	4b05      	ldr	r3, [pc, #20]	@ (8013db8 <vTaskInternalSetTimeOutState+0x28>)
 8013da2:	681a      	ldr	r2, [r3, #0]
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	605a      	str	r2, [r3, #4]
}
 8013da8:	bf00      	nop
 8013daa:	370c      	adds	r7, #12
 8013dac:	46bd      	mov	sp, r7
 8013dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013db2:	4770      	bx	lr
 8013db4:	20001d1c 	.word	0x20001d1c
 8013db8:	20001d08 	.word	0x20001d08

08013dbc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013dbc:	b580      	push	{r7, lr}
 8013dbe:	b088      	sub	sp, #32
 8013dc0:	af00      	add	r7, sp, #0
 8013dc2:	6078      	str	r0, [r7, #4]
 8013dc4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d10b      	bne.n	8013de4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8013dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013dd0:	f383 8811 	msr	BASEPRI, r3
 8013dd4:	f3bf 8f6f 	isb	sy
 8013dd8:	f3bf 8f4f 	dsb	sy
 8013ddc:	613b      	str	r3, [r7, #16]
}
 8013dde:	bf00      	nop
 8013de0:	bf00      	nop
 8013de2:	e7fd      	b.n	8013de0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8013de4:	683b      	ldr	r3, [r7, #0]
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d10b      	bne.n	8013e02 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8013dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013dee:	f383 8811 	msr	BASEPRI, r3
 8013df2:	f3bf 8f6f 	isb	sy
 8013df6:	f3bf 8f4f 	dsb	sy
 8013dfa:	60fb      	str	r3, [r7, #12]
}
 8013dfc:	bf00      	nop
 8013dfe:	bf00      	nop
 8013e00:	e7fd      	b.n	8013dfe <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8013e02:	f000 ff41 	bl	8014c88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013e06:	4b1d      	ldr	r3, [pc, #116]	@ (8013e7c <xTaskCheckForTimeOut+0xc0>)
 8013e08:	681b      	ldr	r3, [r3, #0]
 8013e0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	685b      	ldr	r3, [r3, #4]
 8013e10:	69ba      	ldr	r2, [r7, #24]
 8013e12:	1ad3      	subs	r3, r2, r3
 8013e14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013e16:	683b      	ldr	r3, [r7, #0]
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e1e:	d102      	bne.n	8013e26 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013e20:	2300      	movs	r3, #0
 8013e22:	61fb      	str	r3, [r7, #28]
 8013e24:	e023      	b.n	8013e6e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	681a      	ldr	r2, [r3, #0]
 8013e2a:	4b15      	ldr	r3, [pc, #84]	@ (8013e80 <xTaskCheckForTimeOut+0xc4>)
 8013e2c:	681b      	ldr	r3, [r3, #0]
 8013e2e:	429a      	cmp	r2, r3
 8013e30:	d007      	beq.n	8013e42 <xTaskCheckForTimeOut+0x86>
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	685b      	ldr	r3, [r3, #4]
 8013e36:	69ba      	ldr	r2, [r7, #24]
 8013e38:	429a      	cmp	r2, r3
 8013e3a:	d302      	bcc.n	8013e42 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013e3c:	2301      	movs	r3, #1
 8013e3e:	61fb      	str	r3, [r7, #28]
 8013e40:	e015      	b.n	8013e6e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013e42:	683b      	ldr	r3, [r7, #0]
 8013e44:	681b      	ldr	r3, [r3, #0]
 8013e46:	697a      	ldr	r2, [r7, #20]
 8013e48:	429a      	cmp	r2, r3
 8013e4a:	d20b      	bcs.n	8013e64 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013e4c:	683b      	ldr	r3, [r7, #0]
 8013e4e:	681a      	ldr	r2, [r3, #0]
 8013e50:	697b      	ldr	r3, [r7, #20]
 8013e52:	1ad2      	subs	r2, r2, r3
 8013e54:	683b      	ldr	r3, [r7, #0]
 8013e56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013e58:	6878      	ldr	r0, [r7, #4]
 8013e5a:	f7ff ff99 	bl	8013d90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013e5e:	2300      	movs	r3, #0
 8013e60:	61fb      	str	r3, [r7, #28]
 8013e62:	e004      	b.n	8013e6e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8013e64:	683b      	ldr	r3, [r7, #0]
 8013e66:	2200      	movs	r2, #0
 8013e68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013e6a:	2301      	movs	r3, #1
 8013e6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013e6e:	f000 ff3d 	bl	8014cec <vPortExitCritical>

	return xReturn;
 8013e72:	69fb      	ldr	r3, [r7, #28]
}
 8013e74:	4618      	mov	r0, r3
 8013e76:	3720      	adds	r7, #32
 8013e78:	46bd      	mov	sp, r7
 8013e7a:	bd80      	pop	{r7, pc}
 8013e7c:	20001d08 	.word	0x20001d08
 8013e80:	20001d1c 	.word	0x20001d1c

08013e84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013e84:	b480      	push	{r7}
 8013e86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013e88:	4b03      	ldr	r3, [pc, #12]	@ (8013e98 <vTaskMissedYield+0x14>)
 8013e8a:	2201      	movs	r2, #1
 8013e8c:	601a      	str	r2, [r3, #0]
}
 8013e8e:	bf00      	nop
 8013e90:	46bd      	mov	sp, r7
 8013e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e96:	4770      	bx	lr
 8013e98:	20001d18 	.word	0x20001d18

08013e9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013e9c:	b580      	push	{r7, lr}
 8013e9e:	b082      	sub	sp, #8
 8013ea0:	af00      	add	r7, sp, #0
 8013ea2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013ea4:	f000 f852 	bl	8013f4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013ea8:	4b06      	ldr	r3, [pc, #24]	@ (8013ec4 <prvIdleTask+0x28>)
 8013eaa:	681b      	ldr	r3, [r3, #0]
 8013eac:	2b01      	cmp	r3, #1
 8013eae:	d9f9      	bls.n	8013ea4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8013eb0:	4b05      	ldr	r3, [pc, #20]	@ (8013ec8 <prvIdleTask+0x2c>)
 8013eb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013eb6:	601a      	str	r2, [r3, #0]
 8013eb8:	f3bf 8f4f 	dsb	sy
 8013ebc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013ec0:	e7f0      	b.n	8013ea4 <prvIdleTask+0x8>
 8013ec2:	bf00      	nop
 8013ec4:	20001c08 	.word	0x20001c08
 8013ec8:	e000ed04 	.word	0xe000ed04

08013ecc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013ecc:	b580      	push	{r7, lr}
 8013ece:	b082      	sub	sp, #8
 8013ed0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013ed2:	2300      	movs	r3, #0
 8013ed4:	607b      	str	r3, [r7, #4]
 8013ed6:	e00c      	b.n	8013ef2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013ed8:	687a      	ldr	r2, [r7, #4]
 8013eda:	4613      	mov	r3, r2
 8013edc:	009b      	lsls	r3, r3, #2
 8013ede:	4413      	add	r3, r2
 8013ee0:	009b      	lsls	r3, r3, #2
 8013ee2:	4a12      	ldr	r2, [pc, #72]	@ (8013f2c <prvInitialiseTaskLists+0x60>)
 8013ee4:	4413      	add	r3, r2
 8013ee6:	4618      	mov	r0, r3
 8013ee8:	f7fe fb62 	bl	80125b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	3301      	adds	r3, #1
 8013ef0:	607b      	str	r3, [r7, #4]
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	2b06      	cmp	r3, #6
 8013ef6:	d9ef      	bls.n	8013ed8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013ef8:	480d      	ldr	r0, [pc, #52]	@ (8013f30 <prvInitialiseTaskLists+0x64>)
 8013efa:	f7fe fb59 	bl	80125b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013efe:	480d      	ldr	r0, [pc, #52]	@ (8013f34 <prvInitialiseTaskLists+0x68>)
 8013f00:	f7fe fb56 	bl	80125b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013f04:	480c      	ldr	r0, [pc, #48]	@ (8013f38 <prvInitialiseTaskLists+0x6c>)
 8013f06:	f7fe fb53 	bl	80125b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013f0a:	480c      	ldr	r0, [pc, #48]	@ (8013f3c <prvInitialiseTaskLists+0x70>)
 8013f0c:	f7fe fb50 	bl	80125b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013f10:	480b      	ldr	r0, [pc, #44]	@ (8013f40 <prvInitialiseTaskLists+0x74>)
 8013f12:	f7fe fb4d 	bl	80125b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013f16:	4b0b      	ldr	r3, [pc, #44]	@ (8013f44 <prvInitialiseTaskLists+0x78>)
 8013f18:	4a05      	ldr	r2, [pc, #20]	@ (8013f30 <prvInitialiseTaskLists+0x64>)
 8013f1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8013f48 <prvInitialiseTaskLists+0x7c>)
 8013f1e:	4a05      	ldr	r2, [pc, #20]	@ (8013f34 <prvInitialiseTaskLists+0x68>)
 8013f20:	601a      	str	r2, [r3, #0]
}
 8013f22:	bf00      	nop
 8013f24:	3708      	adds	r7, #8
 8013f26:	46bd      	mov	sp, r7
 8013f28:	bd80      	pop	{r7, pc}
 8013f2a:	bf00      	nop
 8013f2c:	20001c08 	.word	0x20001c08
 8013f30:	20001c94 	.word	0x20001c94
 8013f34:	20001ca8 	.word	0x20001ca8
 8013f38:	20001cc4 	.word	0x20001cc4
 8013f3c:	20001cd8 	.word	0x20001cd8
 8013f40:	20001cf0 	.word	0x20001cf0
 8013f44:	20001cbc 	.word	0x20001cbc
 8013f48:	20001cc0 	.word	0x20001cc0

08013f4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013f4c:	b580      	push	{r7, lr}
 8013f4e:	b082      	sub	sp, #8
 8013f50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013f52:	e019      	b.n	8013f88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013f54:	f000 fe98 	bl	8014c88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013f58:	4b10      	ldr	r3, [pc, #64]	@ (8013f9c <prvCheckTasksWaitingTermination+0x50>)
 8013f5a:	68db      	ldr	r3, [r3, #12]
 8013f5c:	68db      	ldr	r3, [r3, #12]
 8013f5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	3304      	adds	r3, #4
 8013f64:	4618      	mov	r0, r3
 8013f66:	f7fe fbad 	bl	80126c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8013fa0 <prvCheckTasksWaitingTermination+0x54>)
 8013f6c:	681b      	ldr	r3, [r3, #0]
 8013f6e:	3b01      	subs	r3, #1
 8013f70:	4a0b      	ldr	r2, [pc, #44]	@ (8013fa0 <prvCheckTasksWaitingTermination+0x54>)
 8013f72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013f74:	4b0b      	ldr	r3, [pc, #44]	@ (8013fa4 <prvCheckTasksWaitingTermination+0x58>)
 8013f76:	681b      	ldr	r3, [r3, #0]
 8013f78:	3b01      	subs	r3, #1
 8013f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8013fa4 <prvCheckTasksWaitingTermination+0x58>)
 8013f7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013f7e:	f000 feb5 	bl	8014cec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013f82:	6878      	ldr	r0, [r7, #4]
 8013f84:	f000 f810 	bl	8013fa8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013f88:	4b06      	ldr	r3, [pc, #24]	@ (8013fa4 <prvCheckTasksWaitingTermination+0x58>)
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d1e1      	bne.n	8013f54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013f90:	bf00      	nop
 8013f92:	bf00      	nop
 8013f94:	3708      	adds	r7, #8
 8013f96:	46bd      	mov	sp, r7
 8013f98:	bd80      	pop	{r7, pc}
 8013f9a:	bf00      	nop
 8013f9c:	20001cd8 	.word	0x20001cd8
 8013fa0:	20001d04 	.word	0x20001d04
 8013fa4:	20001cec 	.word	0x20001cec

08013fa8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013fa8:	b580      	push	{r7, lr}
 8013faa:	b084      	sub	sp, #16
 8013fac:	af00      	add	r7, sp, #0
 8013fae:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	334c      	adds	r3, #76	@ 0x4c
 8013fb4:	4618      	mov	r0, r3
 8013fb6:	f001 fae3 	bl	8015580 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d108      	bne.n	8013fd6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013fc8:	4618      	mov	r0, r3
 8013fca:	f001 f84d 	bl	8015068 <vPortFree>
				vPortFree( pxTCB );
 8013fce:	6878      	ldr	r0, [r7, #4]
 8013fd0:	f001 f84a 	bl	8015068 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013fd4:	e019      	b.n	801400a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8013fdc:	2b01      	cmp	r3, #1
 8013fde:	d103      	bne.n	8013fe8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8013fe0:	6878      	ldr	r0, [r7, #4]
 8013fe2:	f001 f841 	bl	8015068 <vPortFree>
	}
 8013fe6:	e010      	b.n	801400a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8013fee:	2b02      	cmp	r3, #2
 8013ff0:	d00b      	beq.n	801400a <prvDeleteTCB+0x62>
	__asm volatile
 8013ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ff6:	f383 8811 	msr	BASEPRI, r3
 8013ffa:	f3bf 8f6f 	isb	sy
 8013ffe:	f3bf 8f4f 	dsb	sy
 8014002:	60fb      	str	r3, [r7, #12]
}
 8014004:	bf00      	nop
 8014006:	bf00      	nop
 8014008:	e7fd      	b.n	8014006 <prvDeleteTCB+0x5e>
	}
 801400a:	bf00      	nop
 801400c:	3710      	adds	r7, #16
 801400e:	46bd      	mov	sp, r7
 8014010:	bd80      	pop	{r7, pc}
	...

08014014 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014014:	b480      	push	{r7}
 8014016:	b083      	sub	sp, #12
 8014018:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801401a:	4b0c      	ldr	r3, [pc, #48]	@ (801404c <prvResetNextTaskUnblockTime+0x38>)
 801401c:	681b      	ldr	r3, [r3, #0]
 801401e:	681b      	ldr	r3, [r3, #0]
 8014020:	2b00      	cmp	r3, #0
 8014022:	d104      	bne.n	801402e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014024:	4b0a      	ldr	r3, [pc, #40]	@ (8014050 <prvResetNextTaskUnblockTime+0x3c>)
 8014026:	f04f 32ff 	mov.w	r2, #4294967295
 801402a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801402c:	e008      	b.n	8014040 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801402e:	4b07      	ldr	r3, [pc, #28]	@ (801404c <prvResetNextTaskUnblockTime+0x38>)
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	68db      	ldr	r3, [r3, #12]
 8014034:	68db      	ldr	r3, [r3, #12]
 8014036:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	685b      	ldr	r3, [r3, #4]
 801403c:	4a04      	ldr	r2, [pc, #16]	@ (8014050 <prvResetNextTaskUnblockTime+0x3c>)
 801403e:	6013      	str	r3, [r2, #0]
}
 8014040:	bf00      	nop
 8014042:	370c      	adds	r7, #12
 8014044:	46bd      	mov	sp, r7
 8014046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801404a:	4770      	bx	lr
 801404c:	20001cbc 	.word	0x20001cbc
 8014050:	20001d24 	.word	0x20001d24

08014054 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014054:	b480      	push	{r7}
 8014056:	b083      	sub	sp, #12
 8014058:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801405a:	4b0b      	ldr	r3, [pc, #44]	@ (8014088 <xTaskGetSchedulerState+0x34>)
 801405c:	681b      	ldr	r3, [r3, #0]
 801405e:	2b00      	cmp	r3, #0
 8014060:	d102      	bne.n	8014068 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014062:	2301      	movs	r3, #1
 8014064:	607b      	str	r3, [r7, #4]
 8014066:	e008      	b.n	801407a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014068:	4b08      	ldr	r3, [pc, #32]	@ (801408c <xTaskGetSchedulerState+0x38>)
 801406a:	681b      	ldr	r3, [r3, #0]
 801406c:	2b00      	cmp	r3, #0
 801406e:	d102      	bne.n	8014076 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014070:	2302      	movs	r3, #2
 8014072:	607b      	str	r3, [r7, #4]
 8014074:	e001      	b.n	801407a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014076:	2300      	movs	r3, #0
 8014078:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801407a:	687b      	ldr	r3, [r7, #4]
	}
 801407c:	4618      	mov	r0, r3
 801407e:	370c      	adds	r7, #12
 8014080:	46bd      	mov	sp, r7
 8014082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014086:	4770      	bx	lr
 8014088:	20001d10 	.word	0x20001d10
 801408c:	20001d2c 	.word	0x20001d2c

08014090 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014090:	b580      	push	{r7, lr}
 8014092:	b086      	sub	sp, #24
 8014094:	af00      	add	r7, sp, #0
 8014096:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801409c:	2300      	movs	r3, #0
 801409e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d070      	beq.n	8014188 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80140a6:	4b3b      	ldr	r3, [pc, #236]	@ (8014194 <xTaskPriorityDisinherit+0x104>)
 80140a8:	681b      	ldr	r3, [r3, #0]
 80140aa:	693a      	ldr	r2, [r7, #16]
 80140ac:	429a      	cmp	r2, r3
 80140ae:	d00b      	beq.n	80140c8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80140b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80140b4:	f383 8811 	msr	BASEPRI, r3
 80140b8:	f3bf 8f6f 	isb	sy
 80140bc:	f3bf 8f4f 	dsb	sy
 80140c0:	60fb      	str	r3, [r7, #12]
}
 80140c2:	bf00      	nop
 80140c4:	bf00      	nop
 80140c6:	e7fd      	b.n	80140c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80140c8:	693b      	ldr	r3, [r7, #16]
 80140ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d10b      	bne.n	80140e8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80140d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80140d4:	f383 8811 	msr	BASEPRI, r3
 80140d8:	f3bf 8f6f 	isb	sy
 80140dc:	f3bf 8f4f 	dsb	sy
 80140e0:	60bb      	str	r3, [r7, #8]
}
 80140e2:	bf00      	nop
 80140e4:	bf00      	nop
 80140e6:	e7fd      	b.n	80140e4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80140e8:	693b      	ldr	r3, [r7, #16]
 80140ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80140ec:	1e5a      	subs	r2, r3, #1
 80140ee:	693b      	ldr	r3, [r7, #16]
 80140f0:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80140f2:	693b      	ldr	r3, [r7, #16]
 80140f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80140f6:	693b      	ldr	r3, [r7, #16]
 80140f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80140fa:	429a      	cmp	r2, r3
 80140fc:	d044      	beq.n	8014188 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80140fe:	693b      	ldr	r3, [r7, #16]
 8014100:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014102:	2b00      	cmp	r3, #0
 8014104:	d140      	bne.n	8014188 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014106:	693b      	ldr	r3, [r7, #16]
 8014108:	3304      	adds	r3, #4
 801410a:	4618      	mov	r0, r3
 801410c:	f7fe fada 	bl	80126c4 <uxListRemove>
 8014110:	4603      	mov	r3, r0
 8014112:	2b00      	cmp	r3, #0
 8014114:	d115      	bne.n	8014142 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014116:	693b      	ldr	r3, [r7, #16]
 8014118:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801411a:	491f      	ldr	r1, [pc, #124]	@ (8014198 <xTaskPriorityDisinherit+0x108>)
 801411c:	4613      	mov	r3, r2
 801411e:	009b      	lsls	r3, r3, #2
 8014120:	4413      	add	r3, r2
 8014122:	009b      	lsls	r3, r3, #2
 8014124:	440b      	add	r3, r1
 8014126:	681b      	ldr	r3, [r3, #0]
 8014128:	2b00      	cmp	r3, #0
 801412a:	d10a      	bne.n	8014142 <xTaskPriorityDisinherit+0xb2>
 801412c:	693b      	ldr	r3, [r7, #16]
 801412e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014130:	2201      	movs	r2, #1
 8014132:	fa02 f303 	lsl.w	r3, r2, r3
 8014136:	43da      	mvns	r2, r3
 8014138:	4b18      	ldr	r3, [pc, #96]	@ (801419c <xTaskPriorityDisinherit+0x10c>)
 801413a:	681b      	ldr	r3, [r3, #0]
 801413c:	4013      	ands	r3, r2
 801413e:	4a17      	ldr	r2, [pc, #92]	@ (801419c <xTaskPriorityDisinherit+0x10c>)
 8014140:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014142:	693b      	ldr	r3, [r7, #16]
 8014144:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014146:	693b      	ldr	r3, [r7, #16]
 8014148:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801414a:	693b      	ldr	r3, [r7, #16]
 801414c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801414e:	f1c3 0207 	rsb	r2, r3, #7
 8014152:	693b      	ldr	r3, [r7, #16]
 8014154:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014156:	693b      	ldr	r3, [r7, #16]
 8014158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801415a:	2201      	movs	r2, #1
 801415c:	409a      	lsls	r2, r3
 801415e:	4b0f      	ldr	r3, [pc, #60]	@ (801419c <xTaskPriorityDisinherit+0x10c>)
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	4313      	orrs	r3, r2
 8014164:	4a0d      	ldr	r2, [pc, #52]	@ (801419c <xTaskPriorityDisinherit+0x10c>)
 8014166:	6013      	str	r3, [r2, #0]
 8014168:	693b      	ldr	r3, [r7, #16]
 801416a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801416c:	4613      	mov	r3, r2
 801416e:	009b      	lsls	r3, r3, #2
 8014170:	4413      	add	r3, r2
 8014172:	009b      	lsls	r3, r3, #2
 8014174:	4a08      	ldr	r2, [pc, #32]	@ (8014198 <xTaskPriorityDisinherit+0x108>)
 8014176:	441a      	add	r2, r3
 8014178:	693b      	ldr	r3, [r7, #16]
 801417a:	3304      	adds	r3, #4
 801417c:	4619      	mov	r1, r3
 801417e:	4610      	mov	r0, r2
 8014180:	f7fe fa43 	bl	801260a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014184:	2301      	movs	r3, #1
 8014186:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014188:	697b      	ldr	r3, [r7, #20]
	}
 801418a:	4618      	mov	r0, r3
 801418c:	3718      	adds	r7, #24
 801418e:	46bd      	mov	sp, r7
 8014190:	bd80      	pop	{r7, pc}
 8014192:	bf00      	nop
 8014194:	20001c04 	.word	0x20001c04
 8014198:	20001c08 	.word	0x20001c08
 801419c:	20001d0c 	.word	0x20001d0c

080141a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80141a0:	b580      	push	{r7, lr}
 80141a2:	b084      	sub	sp, #16
 80141a4:	af00      	add	r7, sp, #0
 80141a6:	6078      	str	r0, [r7, #4]
 80141a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80141aa:	4b29      	ldr	r3, [pc, #164]	@ (8014250 <prvAddCurrentTaskToDelayedList+0xb0>)
 80141ac:	681b      	ldr	r3, [r3, #0]
 80141ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80141b0:	4b28      	ldr	r3, [pc, #160]	@ (8014254 <prvAddCurrentTaskToDelayedList+0xb4>)
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	3304      	adds	r3, #4
 80141b6:	4618      	mov	r0, r3
 80141b8:	f7fe fa84 	bl	80126c4 <uxListRemove>
 80141bc:	4603      	mov	r3, r0
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d10b      	bne.n	80141da <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80141c2:	4b24      	ldr	r3, [pc, #144]	@ (8014254 <prvAddCurrentTaskToDelayedList+0xb4>)
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80141c8:	2201      	movs	r2, #1
 80141ca:	fa02 f303 	lsl.w	r3, r2, r3
 80141ce:	43da      	mvns	r2, r3
 80141d0:	4b21      	ldr	r3, [pc, #132]	@ (8014258 <prvAddCurrentTaskToDelayedList+0xb8>)
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	4013      	ands	r3, r2
 80141d6:	4a20      	ldr	r2, [pc, #128]	@ (8014258 <prvAddCurrentTaskToDelayedList+0xb8>)
 80141d8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141e0:	d10a      	bne.n	80141f8 <prvAddCurrentTaskToDelayedList+0x58>
 80141e2:	683b      	ldr	r3, [r7, #0]
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d007      	beq.n	80141f8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80141e8:	4b1a      	ldr	r3, [pc, #104]	@ (8014254 <prvAddCurrentTaskToDelayedList+0xb4>)
 80141ea:	681b      	ldr	r3, [r3, #0]
 80141ec:	3304      	adds	r3, #4
 80141ee:	4619      	mov	r1, r3
 80141f0:	481a      	ldr	r0, [pc, #104]	@ (801425c <prvAddCurrentTaskToDelayedList+0xbc>)
 80141f2:	f7fe fa0a 	bl	801260a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80141f6:	e026      	b.n	8014246 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80141f8:	68fa      	ldr	r2, [r7, #12]
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	4413      	add	r3, r2
 80141fe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014200:	4b14      	ldr	r3, [pc, #80]	@ (8014254 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	68ba      	ldr	r2, [r7, #8]
 8014206:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014208:	68ba      	ldr	r2, [r7, #8]
 801420a:	68fb      	ldr	r3, [r7, #12]
 801420c:	429a      	cmp	r2, r3
 801420e:	d209      	bcs.n	8014224 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014210:	4b13      	ldr	r3, [pc, #76]	@ (8014260 <prvAddCurrentTaskToDelayedList+0xc0>)
 8014212:	681a      	ldr	r2, [r3, #0]
 8014214:	4b0f      	ldr	r3, [pc, #60]	@ (8014254 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014216:	681b      	ldr	r3, [r3, #0]
 8014218:	3304      	adds	r3, #4
 801421a:	4619      	mov	r1, r3
 801421c:	4610      	mov	r0, r2
 801421e:	f7fe fa18 	bl	8012652 <vListInsert>
}
 8014222:	e010      	b.n	8014246 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014224:	4b0f      	ldr	r3, [pc, #60]	@ (8014264 <prvAddCurrentTaskToDelayedList+0xc4>)
 8014226:	681a      	ldr	r2, [r3, #0]
 8014228:	4b0a      	ldr	r3, [pc, #40]	@ (8014254 <prvAddCurrentTaskToDelayedList+0xb4>)
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	3304      	adds	r3, #4
 801422e:	4619      	mov	r1, r3
 8014230:	4610      	mov	r0, r2
 8014232:	f7fe fa0e 	bl	8012652 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014236:	4b0c      	ldr	r3, [pc, #48]	@ (8014268 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	68ba      	ldr	r2, [r7, #8]
 801423c:	429a      	cmp	r2, r3
 801423e:	d202      	bcs.n	8014246 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8014240:	4a09      	ldr	r2, [pc, #36]	@ (8014268 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014242:	68bb      	ldr	r3, [r7, #8]
 8014244:	6013      	str	r3, [r2, #0]
}
 8014246:	bf00      	nop
 8014248:	3710      	adds	r7, #16
 801424a:	46bd      	mov	sp, r7
 801424c:	bd80      	pop	{r7, pc}
 801424e:	bf00      	nop
 8014250:	20001d08 	.word	0x20001d08
 8014254:	20001c04 	.word	0x20001c04
 8014258:	20001d0c 	.word	0x20001d0c
 801425c:	20001cf0 	.word	0x20001cf0
 8014260:	20001cc0 	.word	0x20001cc0
 8014264:	20001cbc 	.word	0x20001cbc
 8014268:	20001d24 	.word	0x20001d24

0801426c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801426c:	b580      	push	{r7, lr}
 801426e:	b08a      	sub	sp, #40	@ 0x28
 8014270:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8014272:	2300      	movs	r3, #0
 8014274:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8014276:	f000 fb95 	bl	80149a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801427a:	4b1d      	ldr	r3, [pc, #116]	@ (80142f0 <xTimerCreateTimerTask+0x84>)
 801427c:	681b      	ldr	r3, [r3, #0]
 801427e:	2b00      	cmp	r3, #0
 8014280:	d021      	beq.n	80142c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8014282:	2300      	movs	r3, #0
 8014284:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8014286:	2300      	movs	r3, #0
 8014288:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801428a:	1d3a      	adds	r2, r7, #4
 801428c:	f107 0108 	add.w	r1, r7, #8
 8014290:	f107 030c 	add.w	r3, r7, #12
 8014294:	4618      	mov	r0, r3
 8014296:	f7ec fe9f 	bl	8000fd8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801429a:	6879      	ldr	r1, [r7, #4]
 801429c:	68bb      	ldr	r3, [r7, #8]
 801429e:	68fa      	ldr	r2, [r7, #12]
 80142a0:	9202      	str	r2, [sp, #8]
 80142a2:	9301      	str	r3, [sp, #4]
 80142a4:	2306      	movs	r3, #6
 80142a6:	9300      	str	r3, [sp, #0]
 80142a8:	2300      	movs	r3, #0
 80142aa:	460a      	mov	r2, r1
 80142ac:	4911      	ldr	r1, [pc, #68]	@ (80142f4 <xTimerCreateTimerTask+0x88>)
 80142ae:	4812      	ldr	r0, [pc, #72]	@ (80142f8 <xTimerCreateTimerTask+0x8c>)
 80142b0:	f7fe ff64 	bl	801317c <xTaskCreateStatic>
 80142b4:	4603      	mov	r3, r0
 80142b6:	4a11      	ldr	r2, [pc, #68]	@ (80142fc <xTimerCreateTimerTask+0x90>)
 80142b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80142ba:	4b10      	ldr	r3, [pc, #64]	@ (80142fc <xTimerCreateTimerTask+0x90>)
 80142bc:	681b      	ldr	r3, [r3, #0]
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d001      	beq.n	80142c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80142c2:	2301      	movs	r3, #1
 80142c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80142c6:	697b      	ldr	r3, [r7, #20]
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d10b      	bne.n	80142e4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80142cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80142d0:	f383 8811 	msr	BASEPRI, r3
 80142d4:	f3bf 8f6f 	isb	sy
 80142d8:	f3bf 8f4f 	dsb	sy
 80142dc:	613b      	str	r3, [r7, #16]
}
 80142de:	bf00      	nop
 80142e0:	bf00      	nop
 80142e2:	e7fd      	b.n	80142e0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80142e4:	697b      	ldr	r3, [r7, #20]
}
 80142e6:	4618      	mov	r0, r3
 80142e8:	3718      	adds	r7, #24
 80142ea:	46bd      	mov	sp, r7
 80142ec:	bd80      	pop	{r7, pc}
 80142ee:	bf00      	nop
 80142f0:	20001d60 	.word	0x20001d60
 80142f4:	080161cc 	.word	0x080161cc
 80142f8:	08014575 	.word	0x08014575
 80142fc:	20001d64 	.word	0x20001d64

08014300 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8014300:	b580      	push	{r7, lr}
 8014302:	b088      	sub	sp, #32
 8014304:	af02      	add	r7, sp, #8
 8014306:	60f8      	str	r0, [r7, #12]
 8014308:	60b9      	str	r1, [r7, #8]
 801430a:	607a      	str	r2, [r7, #4]
 801430c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 801430e:	2028      	movs	r0, #40	@ 0x28
 8014310:	f000 fddc 	bl	8014ecc <pvPortMalloc>
 8014314:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8014316:	697b      	ldr	r3, [r7, #20]
 8014318:	2b00      	cmp	r3, #0
 801431a:	d00d      	beq.n	8014338 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 801431c:	697b      	ldr	r3, [r7, #20]
 801431e:	2200      	movs	r2, #0
 8014320:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8014324:	697b      	ldr	r3, [r7, #20]
 8014326:	9301      	str	r3, [sp, #4]
 8014328:	6a3b      	ldr	r3, [r7, #32]
 801432a:	9300      	str	r3, [sp, #0]
 801432c:	683b      	ldr	r3, [r7, #0]
 801432e:	687a      	ldr	r2, [r7, #4]
 8014330:	68b9      	ldr	r1, [r7, #8]
 8014332:	68f8      	ldr	r0, [r7, #12]
 8014334:	f000 f845 	bl	80143c2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8014338:	697b      	ldr	r3, [r7, #20]
	}
 801433a:	4618      	mov	r0, r3
 801433c:	3718      	adds	r7, #24
 801433e:	46bd      	mov	sp, r7
 8014340:	bd80      	pop	{r7, pc}

08014342 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8014342:	b580      	push	{r7, lr}
 8014344:	b08a      	sub	sp, #40	@ 0x28
 8014346:	af02      	add	r7, sp, #8
 8014348:	60f8      	str	r0, [r7, #12]
 801434a:	60b9      	str	r1, [r7, #8]
 801434c:	607a      	str	r2, [r7, #4]
 801434e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8014350:	2328      	movs	r3, #40	@ 0x28
 8014352:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8014354:	693b      	ldr	r3, [r7, #16]
 8014356:	2b28      	cmp	r3, #40	@ 0x28
 8014358:	d00b      	beq.n	8014372 <xTimerCreateStatic+0x30>
	__asm volatile
 801435a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801435e:	f383 8811 	msr	BASEPRI, r3
 8014362:	f3bf 8f6f 	isb	sy
 8014366:	f3bf 8f4f 	dsb	sy
 801436a:	61bb      	str	r3, [r7, #24]
}
 801436c:	bf00      	nop
 801436e:	bf00      	nop
 8014370:	e7fd      	b.n	801436e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8014372:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8014374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014376:	2b00      	cmp	r3, #0
 8014378:	d10b      	bne.n	8014392 <xTimerCreateStatic+0x50>
	__asm volatile
 801437a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801437e:	f383 8811 	msr	BASEPRI, r3
 8014382:	f3bf 8f6f 	isb	sy
 8014386:	f3bf 8f4f 	dsb	sy
 801438a:	617b      	str	r3, [r7, #20]
}
 801438c:	bf00      	nop
 801438e:	bf00      	nop
 8014390:	e7fd      	b.n	801438e <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8014392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014394:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8014396:	69fb      	ldr	r3, [r7, #28]
 8014398:	2b00      	cmp	r3, #0
 801439a:	d00d      	beq.n	80143b8 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 801439c:	69fb      	ldr	r3, [r7, #28]
 801439e:	2202      	movs	r2, #2
 80143a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80143a4:	69fb      	ldr	r3, [r7, #28]
 80143a6:	9301      	str	r3, [sp, #4]
 80143a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143aa:	9300      	str	r3, [sp, #0]
 80143ac:	683b      	ldr	r3, [r7, #0]
 80143ae:	687a      	ldr	r2, [r7, #4]
 80143b0:	68b9      	ldr	r1, [r7, #8]
 80143b2:	68f8      	ldr	r0, [r7, #12]
 80143b4:	f000 f805 	bl	80143c2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80143b8:	69fb      	ldr	r3, [r7, #28]
	}
 80143ba:	4618      	mov	r0, r3
 80143bc:	3720      	adds	r7, #32
 80143be:	46bd      	mov	sp, r7
 80143c0:	bd80      	pop	{r7, pc}

080143c2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80143c2:	b580      	push	{r7, lr}
 80143c4:	b086      	sub	sp, #24
 80143c6:	af00      	add	r7, sp, #0
 80143c8:	60f8      	str	r0, [r7, #12]
 80143ca:	60b9      	str	r1, [r7, #8]
 80143cc:	607a      	str	r2, [r7, #4]
 80143ce:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80143d0:	68bb      	ldr	r3, [r7, #8]
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d10b      	bne.n	80143ee <prvInitialiseNewTimer+0x2c>
	__asm volatile
 80143d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80143da:	f383 8811 	msr	BASEPRI, r3
 80143de:	f3bf 8f6f 	isb	sy
 80143e2:	f3bf 8f4f 	dsb	sy
 80143e6:	617b      	str	r3, [r7, #20]
}
 80143e8:	bf00      	nop
 80143ea:	bf00      	nop
 80143ec:	e7fd      	b.n	80143ea <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80143ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d01e      	beq.n	8014432 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80143f4:	f000 fad6 	bl	80149a4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80143f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143fa:	68fa      	ldr	r2, [r7, #12]
 80143fc:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80143fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014400:	68ba      	ldr	r2, [r7, #8]
 8014402:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8014404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014406:	683a      	ldr	r2, [r7, #0]
 8014408:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 801440a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801440c:	6a3a      	ldr	r2, [r7, #32]
 801440e:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8014410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014412:	3304      	adds	r3, #4
 8014414:	4618      	mov	r0, r3
 8014416:	f7fe f8eb 	bl	80125f0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	2b00      	cmp	r3, #0
 801441e:	d008      	beq.n	8014432 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8014420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014422:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8014426:	f043 0304 	orr.w	r3, r3, #4
 801442a:	b2da      	uxtb	r2, r3
 801442c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801442e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8014432:	bf00      	nop
 8014434:	3718      	adds	r7, #24
 8014436:	46bd      	mov	sp, r7
 8014438:	bd80      	pop	{r7, pc}
	...

0801443c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801443c:	b580      	push	{r7, lr}
 801443e:	b08a      	sub	sp, #40	@ 0x28
 8014440:	af00      	add	r7, sp, #0
 8014442:	60f8      	str	r0, [r7, #12]
 8014444:	60b9      	str	r1, [r7, #8]
 8014446:	607a      	str	r2, [r7, #4]
 8014448:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801444a:	2300      	movs	r3, #0
 801444c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801444e:	68fb      	ldr	r3, [r7, #12]
 8014450:	2b00      	cmp	r3, #0
 8014452:	d10b      	bne.n	801446c <xTimerGenericCommand+0x30>
	__asm volatile
 8014454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014458:	f383 8811 	msr	BASEPRI, r3
 801445c:	f3bf 8f6f 	isb	sy
 8014460:	f3bf 8f4f 	dsb	sy
 8014464:	623b      	str	r3, [r7, #32]
}
 8014466:	bf00      	nop
 8014468:	bf00      	nop
 801446a:	e7fd      	b.n	8014468 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801446c:	4b19      	ldr	r3, [pc, #100]	@ (80144d4 <xTimerGenericCommand+0x98>)
 801446e:	681b      	ldr	r3, [r3, #0]
 8014470:	2b00      	cmp	r3, #0
 8014472:	d02a      	beq.n	80144ca <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8014474:	68bb      	ldr	r3, [r7, #8]
 8014476:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801447c:	68fb      	ldr	r3, [r7, #12]
 801447e:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8014480:	68bb      	ldr	r3, [r7, #8]
 8014482:	2b05      	cmp	r3, #5
 8014484:	dc18      	bgt.n	80144b8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8014486:	f7ff fde5 	bl	8014054 <xTaskGetSchedulerState>
 801448a:	4603      	mov	r3, r0
 801448c:	2b02      	cmp	r3, #2
 801448e:	d109      	bne.n	80144a4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8014490:	4b10      	ldr	r3, [pc, #64]	@ (80144d4 <xTimerGenericCommand+0x98>)
 8014492:	6818      	ldr	r0, [r3, #0]
 8014494:	f107 0114 	add.w	r1, r7, #20
 8014498:	2300      	movs	r3, #0
 801449a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801449c:	f7fe fa7e 	bl	801299c <xQueueGenericSend>
 80144a0:	6278      	str	r0, [r7, #36]	@ 0x24
 80144a2:	e012      	b.n	80144ca <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80144a4:	4b0b      	ldr	r3, [pc, #44]	@ (80144d4 <xTimerGenericCommand+0x98>)
 80144a6:	6818      	ldr	r0, [r3, #0]
 80144a8:	f107 0114 	add.w	r1, r7, #20
 80144ac:	2300      	movs	r3, #0
 80144ae:	2200      	movs	r2, #0
 80144b0:	f7fe fa74 	bl	801299c <xQueueGenericSend>
 80144b4:	6278      	str	r0, [r7, #36]	@ 0x24
 80144b6:	e008      	b.n	80144ca <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80144b8:	4b06      	ldr	r3, [pc, #24]	@ (80144d4 <xTimerGenericCommand+0x98>)
 80144ba:	6818      	ldr	r0, [r3, #0]
 80144bc:	f107 0114 	add.w	r1, r7, #20
 80144c0:	2300      	movs	r3, #0
 80144c2:	683a      	ldr	r2, [r7, #0]
 80144c4:	f7fe fb6c 	bl	8012ba0 <xQueueGenericSendFromISR>
 80144c8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80144ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80144cc:	4618      	mov	r0, r3
 80144ce:	3728      	adds	r7, #40	@ 0x28
 80144d0:	46bd      	mov	sp, r7
 80144d2:	bd80      	pop	{r7, pc}
 80144d4:	20001d60 	.word	0x20001d60

080144d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80144d8:	b580      	push	{r7, lr}
 80144da:	b088      	sub	sp, #32
 80144dc:	af02      	add	r7, sp, #8
 80144de:	6078      	str	r0, [r7, #4]
 80144e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80144e2:	4b23      	ldr	r3, [pc, #140]	@ (8014570 <prvProcessExpiredTimer+0x98>)
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	68db      	ldr	r3, [r3, #12]
 80144e8:	68db      	ldr	r3, [r3, #12]
 80144ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80144ec:	697b      	ldr	r3, [r7, #20]
 80144ee:	3304      	adds	r3, #4
 80144f0:	4618      	mov	r0, r3
 80144f2:	f7fe f8e7 	bl	80126c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80144f6:	697b      	ldr	r3, [r7, #20]
 80144f8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80144fc:	f003 0304 	and.w	r3, r3, #4
 8014500:	2b00      	cmp	r3, #0
 8014502:	d023      	beq.n	801454c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8014504:	697b      	ldr	r3, [r7, #20]
 8014506:	699a      	ldr	r2, [r3, #24]
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	18d1      	adds	r1, r2, r3
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	683a      	ldr	r2, [r7, #0]
 8014510:	6978      	ldr	r0, [r7, #20]
 8014512:	f000 f8d5 	bl	80146c0 <prvInsertTimerInActiveList>
 8014516:	4603      	mov	r3, r0
 8014518:	2b00      	cmp	r3, #0
 801451a:	d020      	beq.n	801455e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801451c:	2300      	movs	r3, #0
 801451e:	9300      	str	r3, [sp, #0]
 8014520:	2300      	movs	r3, #0
 8014522:	687a      	ldr	r2, [r7, #4]
 8014524:	2100      	movs	r1, #0
 8014526:	6978      	ldr	r0, [r7, #20]
 8014528:	f7ff ff88 	bl	801443c <xTimerGenericCommand>
 801452c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801452e:	693b      	ldr	r3, [r7, #16]
 8014530:	2b00      	cmp	r3, #0
 8014532:	d114      	bne.n	801455e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8014534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014538:	f383 8811 	msr	BASEPRI, r3
 801453c:	f3bf 8f6f 	isb	sy
 8014540:	f3bf 8f4f 	dsb	sy
 8014544:	60fb      	str	r3, [r7, #12]
}
 8014546:	bf00      	nop
 8014548:	bf00      	nop
 801454a:	e7fd      	b.n	8014548 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801454c:	697b      	ldr	r3, [r7, #20]
 801454e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8014552:	f023 0301 	bic.w	r3, r3, #1
 8014556:	b2da      	uxtb	r2, r3
 8014558:	697b      	ldr	r3, [r7, #20]
 801455a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801455e:	697b      	ldr	r3, [r7, #20]
 8014560:	6a1b      	ldr	r3, [r3, #32]
 8014562:	6978      	ldr	r0, [r7, #20]
 8014564:	4798      	blx	r3
}
 8014566:	bf00      	nop
 8014568:	3718      	adds	r7, #24
 801456a:	46bd      	mov	sp, r7
 801456c:	bd80      	pop	{r7, pc}
 801456e:	bf00      	nop
 8014570:	20001d58 	.word	0x20001d58

08014574 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8014574:	b580      	push	{r7, lr}
 8014576:	b084      	sub	sp, #16
 8014578:	af00      	add	r7, sp, #0
 801457a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801457c:	f107 0308 	add.w	r3, r7, #8
 8014580:	4618      	mov	r0, r3
 8014582:	f000 f859 	bl	8014638 <prvGetNextExpireTime>
 8014586:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8014588:	68bb      	ldr	r3, [r7, #8]
 801458a:	4619      	mov	r1, r3
 801458c:	68f8      	ldr	r0, [r7, #12]
 801458e:	f000 f805 	bl	801459c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8014592:	f000 f8d7 	bl	8014744 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014596:	bf00      	nop
 8014598:	e7f0      	b.n	801457c <prvTimerTask+0x8>
	...

0801459c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801459c:	b580      	push	{r7, lr}
 801459e:	b084      	sub	sp, #16
 80145a0:	af00      	add	r7, sp, #0
 80145a2:	6078      	str	r0, [r7, #4]
 80145a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80145a6:	f7ff f963 	bl	8013870 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80145aa:	f107 0308 	add.w	r3, r7, #8
 80145ae:	4618      	mov	r0, r3
 80145b0:	f000 f866 	bl	8014680 <prvSampleTimeNow>
 80145b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80145b6:	68bb      	ldr	r3, [r7, #8]
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d130      	bne.n	801461e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80145bc:	683b      	ldr	r3, [r7, #0]
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d10a      	bne.n	80145d8 <prvProcessTimerOrBlockTask+0x3c>
 80145c2:	687a      	ldr	r2, [r7, #4]
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	429a      	cmp	r2, r3
 80145c8:	d806      	bhi.n	80145d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80145ca:	f7ff f95f 	bl	801388c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80145ce:	68f9      	ldr	r1, [r7, #12]
 80145d0:	6878      	ldr	r0, [r7, #4]
 80145d2:	f7ff ff81 	bl	80144d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80145d6:	e024      	b.n	8014622 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80145d8:	683b      	ldr	r3, [r7, #0]
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d008      	beq.n	80145f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80145de:	4b13      	ldr	r3, [pc, #76]	@ (801462c <prvProcessTimerOrBlockTask+0x90>)
 80145e0:	681b      	ldr	r3, [r3, #0]
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d101      	bne.n	80145ec <prvProcessTimerOrBlockTask+0x50>
 80145e8:	2301      	movs	r3, #1
 80145ea:	e000      	b.n	80145ee <prvProcessTimerOrBlockTask+0x52>
 80145ec:	2300      	movs	r3, #0
 80145ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80145f0:	4b0f      	ldr	r3, [pc, #60]	@ (8014630 <prvProcessTimerOrBlockTask+0x94>)
 80145f2:	6818      	ldr	r0, [r3, #0]
 80145f4:	687a      	ldr	r2, [r7, #4]
 80145f6:	68fb      	ldr	r3, [r7, #12]
 80145f8:	1ad3      	subs	r3, r2, r3
 80145fa:	683a      	ldr	r2, [r7, #0]
 80145fc:	4619      	mov	r1, r3
 80145fe:	f7fe fd89 	bl	8013114 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8014602:	f7ff f943 	bl	801388c <xTaskResumeAll>
 8014606:	4603      	mov	r3, r0
 8014608:	2b00      	cmp	r3, #0
 801460a:	d10a      	bne.n	8014622 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801460c:	4b09      	ldr	r3, [pc, #36]	@ (8014634 <prvProcessTimerOrBlockTask+0x98>)
 801460e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014612:	601a      	str	r2, [r3, #0]
 8014614:	f3bf 8f4f 	dsb	sy
 8014618:	f3bf 8f6f 	isb	sy
}
 801461c:	e001      	b.n	8014622 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801461e:	f7ff f935 	bl	801388c <xTaskResumeAll>
}
 8014622:	bf00      	nop
 8014624:	3710      	adds	r7, #16
 8014626:	46bd      	mov	sp, r7
 8014628:	bd80      	pop	{r7, pc}
 801462a:	bf00      	nop
 801462c:	20001d5c 	.word	0x20001d5c
 8014630:	20001d60 	.word	0x20001d60
 8014634:	e000ed04 	.word	0xe000ed04

08014638 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8014638:	b480      	push	{r7}
 801463a:	b085      	sub	sp, #20
 801463c:	af00      	add	r7, sp, #0
 801463e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8014640:	4b0e      	ldr	r3, [pc, #56]	@ (801467c <prvGetNextExpireTime+0x44>)
 8014642:	681b      	ldr	r3, [r3, #0]
 8014644:	681b      	ldr	r3, [r3, #0]
 8014646:	2b00      	cmp	r3, #0
 8014648:	d101      	bne.n	801464e <prvGetNextExpireTime+0x16>
 801464a:	2201      	movs	r2, #1
 801464c:	e000      	b.n	8014650 <prvGetNextExpireTime+0x18>
 801464e:	2200      	movs	r2, #0
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	681b      	ldr	r3, [r3, #0]
 8014658:	2b00      	cmp	r3, #0
 801465a:	d105      	bne.n	8014668 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801465c:	4b07      	ldr	r3, [pc, #28]	@ (801467c <prvGetNextExpireTime+0x44>)
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	68db      	ldr	r3, [r3, #12]
 8014662:	681b      	ldr	r3, [r3, #0]
 8014664:	60fb      	str	r3, [r7, #12]
 8014666:	e001      	b.n	801466c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8014668:	2300      	movs	r3, #0
 801466a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801466c:	68fb      	ldr	r3, [r7, #12]
}
 801466e:	4618      	mov	r0, r3
 8014670:	3714      	adds	r7, #20
 8014672:	46bd      	mov	sp, r7
 8014674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014678:	4770      	bx	lr
 801467a:	bf00      	nop
 801467c:	20001d58 	.word	0x20001d58

08014680 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8014680:	b580      	push	{r7, lr}
 8014682:	b084      	sub	sp, #16
 8014684:	af00      	add	r7, sp, #0
 8014686:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8014688:	f7ff f99e 	bl	80139c8 <xTaskGetTickCount>
 801468c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801468e:	4b0b      	ldr	r3, [pc, #44]	@ (80146bc <prvSampleTimeNow+0x3c>)
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	68fa      	ldr	r2, [r7, #12]
 8014694:	429a      	cmp	r2, r3
 8014696:	d205      	bcs.n	80146a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8014698:	f000 f91e 	bl	80148d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	2201      	movs	r2, #1
 80146a0:	601a      	str	r2, [r3, #0]
 80146a2:	e002      	b.n	80146aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	2200      	movs	r2, #0
 80146a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80146aa:	4a04      	ldr	r2, [pc, #16]	@ (80146bc <prvSampleTimeNow+0x3c>)
 80146ac:	68fb      	ldr	r3, [r7, #12]
 80146ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80146b0:	68fb      	ldr	r3, [r7, #12]
}
 80146b2:	4618      	mov	r0, r3
 80146b4:	3710      	adds	r7, #16
 80146b6:	46bd      	mov	sp, r7
 80146b8:	bd80      	pop	{r7, pc}
 80146ba:	bf00      	nop
 80146bc:	20001d68 	.word	0x20001d68

080146c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80146c0:	b580      	push	{r7, lr}
 80146c2:	b086      	sub	sp, #24
 80146c4:	af00      	add	r7, sp, #0
 80146c6:	60f8      	str	r0, [r7, #12]
 80146c8:	60b9      	str	r1, [r7, #8]
 80146ca:	607a      	str	r2, [r7, #4]
 80146cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80146ce:	2300      	movs	r3, #0
 80146d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80146d2:	68fb      	ldr	r3, [r7, #12]
 80146d4:	68ba      	ldr	r2, [r7, #8]
 80146d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	68fa      	ldr	r2, [r7, #12]
 80146dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80146de:	68ba      	ldr	r2, [r7, #8]
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	429a      	cmp	r2, r3
 80146e4:	d812      	bhi.n	801470c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80146e6:	687a      	ldr	r2, [r7, #4]
 80146e8:	683b      	ldr	r3, [r7, #0]
 80146ea:	1ad2      	subs	r2, r2, r3
 80146ec:	68fb      	ldr	r3, [r7, #12]
 80146ee:	699b      	ldr	r3, [r3, #24]
 80146f0:	429a      	cmp	r2, r3
 80146f2:	d302      	bcc.n	80146fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80146f4:	2301      	movs	r3, #1
 80146f6:	617b      	str	r3, [r7, #20]
 80146f8:	e01b      	b.n	8014732 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80146fa:	4b10      	ldr	r3, [pc, #64]	@ (801473c <prvInsertTimerInActiveList+0x7c>)
 80146fc:	681a      	ldr	r2, [r3, #0]
 80146fe:	68fb      	ldr	r3, [r7, #12]
 8014700:	3304      	adds	r3, #4
 8014702:	4619      	mov	r1, r3
 8014704:	4610      	mov	r0, r2
 8014706:	f7fd ffa4 	bl	8012652 <vListInsert>
 801470a:	e012      	b.n	8014732 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801470c:	687a      	ldr	r2, [r7, #4]
 801470e:	683b      	ldr	r3, [r7, #0]
 8014710:	429a      	cmp	r2, r3
 8014712:	d206      	bcs.n	8014722 <prvInsertTimerInActiveList+0x62>
 8014714:	68ba      	ldr	r2, [r7, #8]
 8014716:	683b      	ldr	r3, [r7, #0]
 8014718:	429a      	cmp	r2, r3
 801471a:	d302      	bcc.n	8014722 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801471c:	2301      	movs	r3, #1
 801471e:	617b      	str	r3, [r7, #20]
 8014720:	e007      	b.n	8014732 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014722:	4b07      	ldr	r3, [pc, #28]	@ (8014740 <prvInsertTimerInActiveList+0x80>)
 8014724:	681a      	ldr	r2, [r3, #0]
 8014726:	68fb      	ldr	r3, [r7, #12]
 8014728:	3304      	adds	r3, #4
 801472a:	4619      	mov	r1, r3
 801472c:	4610      	mov	r0, r2
 801472e:	f7fd ff90 	bl	8012652 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8014732:	697b      	ldr	r3, [r7, #20]
}
 8014734:	4618      	mov	r0, r3
 8014736:	3718      	adds	r7, #24
 8014738:	46bd      	mov	sp, r7
 801473a:	bd80      	pop	{r7, pc}
 801473c:	20001d5c 	.word	0x20001d5c
 8014740:	20001d58 	.word	0x20001d58

08014744 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8014744:	b580      	push	{r7, lr}
 8014746:	b08c      	sub	sp, #48	@ 0x30
 8014748:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801474a:	e0b2      	b.n	80148b2 <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801474c:	68bb      	ldr	r3, [r7, #8]
 801474e:	2b00      	cmp	r3, #0
 8014750:	f2c0 80af 	blt.w	80148b2 <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8014754:	693b      	ldr	r3, [r7, #16]
 8014756:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8014758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801475a:	695b      	ldr	r3, [r3, #20]
 801475c:	2b00      	cmp	r3, #0
 801475e:	d004      	beq.n	801476a <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014762:	3304      	adds	r3, #4
 8014764:	4618      	mov	r0, r3
 8014766:	f7fd ffad 	bl	80126c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801476a:	1d3b      	adds	r3, r7, #4
 801476c:	4618      	mov	r0, r3
 801476e:	f7ff ff87 	bl	8014680 <prvSampleTimeNow>
 8014772:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8014774:	68bb      	ldr	r3, [r7, #8]
 8014776:	2b09      	cmp	r3, #9
 8014778:	f200 8098 	bhi.w	80148ac <prvProcessReceivedCommands+0x168>
 801477c:	a201      	add	r2, pc, #4	@ (adr r2, 8014784 <prvProcessReceivedCommands+0x40>)
 801477e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014782:	bf00      	nop
 8014784:	080147ad 	.word	0x080147ad
 8014788:	080147ad 	.word	0x080147ad
 801478c:	080147ad 	.word	0x080147ad
 8014790:	08014823 	.word	0x08014823
 8014794:	08014837 	.word	0x08014837
 8014798:	08014883 	.word	0x08014883
 801479c:	080147ad 	.word	0x080147ad
 80147a0:	080147ad 	.word	0x080147ad
 80147a4:	08014823 	.word	0x08014823
 80147a8:	08014837 	.word	0x08014837
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80147ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147ae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80147b2:	f043 0301 	orr.w	r3, r3, #1
 80147b6:	b2da      	uxtb	r2, r3
 80147b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80147be:	68fa      	ldr	r2, [r7, #12]
 80147c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147c2:	699b      	ldr	r3, [r3, #24]
 80147c4:	18d1      	adds	r1, r2, r3
 80147c6:	68fb      	ldr	r3, [r7, #12]
 80147c8:	6a3a      	ldr	r2, [r7, #32]
 80147ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80147cc:	f7ff ff78 	bl	80146c0 <prvInsertTimerInActiveList>
 80147d0:	4603      	mov	r3, r0
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d06c      	beq.n	80148b0 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80147d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147d8:	6a1b      	ldr	r3, [r3, #32]
 80147da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80147dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80147de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147e0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80147e4:	f003 0304 	and.w	r3, r3, #4
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d061      	beq.n	80148b0 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80147ec:	68fa      	ldr	r2, [r7, #12]
 80147ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147f0:	699b      	ldr	r3, [r3, #24]
 80147f2:	441a      	add	r2, r3
 80147f4:	2300      	movs	r3, #0
 80147f6:	9300      	str	r3, [sp, #0]
 80147f8:	2300      	movs	r3, #0
 80147fa:	2100      	movs	r1, #0
 80147fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80147fe:	f7ff fe1d 	bl	801443c <xTimerGenericCommand>
 8014802:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8014804:	69fb      	ldr	r3, [r7, #28]
 8014806:	2b00      	cmp	r3, #0
 8014808:	d152      	bne.n	80148b0 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 801480a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801480e:	f383 8811 	msr	BASEPRI, r3
 8014812:	f3bf 8f6f 	isb	sy
 8014816:	f3bf 8f4f 	dsb	sy
 801481a:	61bb      	str	r3, [r7, #24]
}
 801481c:	bf00      	nop
 801481e:	bf00      	nop
 8014820:	e7fd      	b.n	801481e <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014824:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8014828:	f023 0301 	bic.w	r3, r3, #1
 801482c:	b2da      	uxtb	r2, r3
 801482e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014830:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8014834:	e03d      	b.n	80148b2 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014838:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801483c:	f043 0301 	orr.w	r3, r3, #1
 8014840:	b2da      	uxtb	r2, r3
 8014842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014844:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8014848:	68fa      	ldr	r2, [r7, #12]
 801484a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801484c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801484e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014850:	699b      	ldr	r3, [r3, #24]
 8014852:	2b00      	cmp	r3, #0
 8014854:	d10b      	bne.n	801486e <prvProcessReceivedCommands+0x12a>
	__asm volatile
 8014856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801485a:	f383 8811 	msr	BASEPRI, r3
 801485e:	f3bf 8f6f 	isb	sy
 8014862:	f3bf 8f4f 	dsb	sy
 8014866:	617b      	str	r3, [r7, #20]
}
 8014868:	bf00      	nop
 801486a:	bf00      	nop
 801486c:	e7fd      	b.n	801486a <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801486e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014870:	699a      	ldr	r2, [r3, #24]
 8014872:	6a3b      	ldr	r3, [r7, #32]
 8014874:	18d1      	adds	r1, r2, r3
 8014876:	6a3b      	ldr	r3, [r7, #32]
 8014878:	6a3a      	ldr	r2, [r7, #32]
 801487a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801487c:	f7ff ff20 	bl	80146c0 <prvInsertTimerInActiveList>
					break;
 8014880:	e017      	b.n	80148b2 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8014882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014884:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8014888:	f003 0302 	and.w	r3, r3, #2
 801488c:	2b00      	cmp	r3, #0
 801488e:	d103      	bne.n	8014898 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 8014890:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014892:	f000 fbe9 	bl	8015068 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8014896:	e00c      	b.n	80148b2 <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801489a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801489e:	f023 0301 	bic.w	r3, r3, #1
 80148a2:	b2da      	uxtb	r2, r3
 80148a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80148a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 80148aa:	e002      	b.n	80148b2 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 80148ac:	bf00      	nop
 80148ae:	e000      	b.n	80148b2 <prvProcessReceivedCommands+0x16e>
					break;
 80148b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80148b2:	4b08      	ldr	r3, [pc, #32]	@ (80148d4 <prvProcessReceivedCommands+0x190>)
 80148b4:	681b      	ldr	r3, [r3, #0]
 80148b6:	f107 0108 	add.w	r1, r7, #8
 80148ba:	2200      	movs	r2, #0
 80148bc:	4618      	mov	r0, r3
 80148be:	f7fe fa0d 	bl	8012cdc <xQueueReceive>
 80148c2:	4603      	mov	r3, r0
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	f47f af41 	bne.w	801474c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80148ca:	bf00      	nop
 80148cc:	bf00      	nop
 80148ce:	3728      	adds	r7, #40	@ 0x28
 80148d0:	46bd      	mov	sp, r7
 80148d2:	bd80      	pop	{r7, pc}
 80148d4:	20001d60 	.word	0x20001d60

080148d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80148d8:	b580      	push	{r7, lr}
 80148da:	b088      	sub	sp, #32
 80148dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80148de:	e049      	b.n	8014974 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80148e0:	4b2e      	ldr	r3, [pc, #184]	@ (801499c <prvSwitchTimerLists+0xc4>)
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	68db      	ldr	r3, [r3, #12]
 80148e6:	681b      	ldr	r3, [r3, #0]
 80148e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80148ea:	4b2c      	ldr	r3, [pc, #176]	@ (801499c <prvSwitchTimerLists+0xc4>)
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	68db      	ldr	r3, [r3, #12]
 80148f0:	68db      	ldr	r3, [r3, #12]
 80148f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80148f4:	68fb      	ldr	r3, [r7, #12]
 80148f6:	3304      	adds	r3, #4
 80148f8:	4618      	mov	r0, r3
 80148fa:	f7fd fee3 	bl	80126c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80148fe:	68fb      	ldr	r3, [r7, #12]
 8014900:	6a1b      	ldr	r3, [r3, #32]
 8014902:	68f8      	ldr	r0, [r7, #12]
 8014904:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801490c:	f003 0304 	and.w	r3, r3, #4
 8014910:	2b00      	cmp	r3, #0
 8014912:	d02f      	beq.n	8014974 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	699b      	ldr	r3, [r3, #24]
 8014918:	693a      	ldr	r2, [r7, #16]
 801491a:	4413      	add	r3, r2
 801491c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801491e:	68ba      	ldr	r2, [r7, #8]
 8014920:	693b      	ldr	r3, [r7, #16]
 8014922:	429a      	cmp	r2, r3
 8014924:	d90e      	bls.n	8014944 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8014926:	68fb      	ldr	r3, [r7, #12]
 8014928:	68ba      	ldr	r2, [r7, #8]
 801492a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	68fa      	ldr	r2, [r7, #12]
 8014930:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014932:	4b1a      	ldr	r3, [pc, #104]	@ (801499c <prvSwitchTimerLists+0xc4>)
 8014934:	681a      	ldr	r2, [r3, #0]
 8014936:	68fb      	ldr	r3, [r7, #12]
 8014938:	3304      	adds	r3, #4
 801493a:	4619      	mov	r1, r3
 801493c:	4610      	mov	r0, r2
 801493e:	f7fd fe88 	bl	8012652 <vListInsert>
 8014942:	e017      	b.n	8014974 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014944:	2300      	movs	r3, #0
 8014946:	9300      	str	r3, [sp, #0]
 8014948:	2300      	movs	r3, #0
 801494a:	693a      	ldr	r2, [r7, #16]
 801494c:	2100      	movs	r1, #0
 801494e:	68f8      	ldr	r0, [r7, #12]
 8014950:	f7ff fd74 	bl	801443c <xTimerGenericCommand>
 8014954:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	2b00      	cmp	r3, #0
 801495a:	d10b      	bne.n	8014974 <prvSwitchTimerLists+0x9c>
	__asm volatile
 801495c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014960:	f383 8811 	msr	BASEPRI, r3
 8014964:	f3bf 8f6f 	isb	sy
 8014968:	f3bf 8f4f 	dsb	sy
 801496c:	603b      	str	r3, [r7, #0]
}
 801496e:	bf00      	nop
 8014970:	bf00      	nop
 8014972:	e7fd      	b.n	8014970 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014974:	4b09      	ldr	r3, [pc, #36]	@ (801499c <prvSwitchTimerLists+0xc4>)
 8014976:	681b      	ldr	r3, [r3, #0]
 8014978:	681b      	ldr	r3, [r3, #0]
 801497a:	2b00      	cmp	r3, #0
 801497c:	d1b0      	bne.n	80148e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801497e:	4b07      	ldr	r3, [pc, #28]	@ (801499c <prvSwitchTimerLists+0xc4>)
 8014980:	681b      	ldr	r3, [r3, #0]
 8014982:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8014984:	4b06      	ldr	r3, [pc, #24]	@ (80149a0 <prvSwitchTimerLists+0xc8>)
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	4a04      	ldr	r2, [pc, #16]	@ (801499c <prvSwitchTimerLists+0xc4>)
 801498a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801498c:	4a04      	ldr	r2, [pc, #16]	@ (80149a0 <prvSwitchTimerLists+0xc8>)
 801498e:	697b      	ldr	r3, [r7, #20]
 8014990:	6013      	str	r3, [r2, #0]
}
 8014992:	bf00      	nop
 8014994:	3718      	adds	r7, #24
 8014996:	46bd      	mov	sp, r7
 8014998:	bd80      	pop	{r7, pc}
 801499a:	bf00      	nop
 801499c:	20001d58 	.word	0x20001d58
 80149a0:	20001d5c 	.word	0x20001d5c

080149a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80149a4:	b580      	push	{r7, lr}
 80149a6:	b082      	sub	sp, #8
 80149a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80149aa:	f000 f96d 	bl	8014c88 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80149ae:	4b15      	ldr	r3, [pc, #84]	@ (8014a04 <prvCheckForValidListAndQueue+0x60>)
 80149b0:	681b      	ldr	r3, [r3, #0]
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d120      	bne.n	80149f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80149b6:	4814      	ldr	r0, [pc, #80]	@ (8014a08 <prvCheckForValidListAndQueue+0x64>)
 80149b8:	f7fd fdfa 	bl	80125b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80149bc:	4813      	ldr	r0, [pc, #76]	@ (8014a0c <prvCheckForValidListAndQueue+0x68>)
 80149be:	f7fd fdf7 	bl	80125b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80149c2:	4b13      	ldr	r3, [pc, #76]	@ (8014a10 <prvCheckForValidListAndQueue+0x6c>)
 80149c4:	4a10      	ldr	r2, [pc, #64]	@ (8014a08 <prvCheckForValidListAndQueue+0x64>)
 80149c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80149c8:	4b12      	ldr	r3, [pc, #72]	@ (8014a14 <prvCheckForValidListAndQueue+0x70>)
 80149ca:	4a10      	ldr	r2, [pc, #64]	@ (8014a0c <prvCheckForValidListAndQueue+0x68>)
 80149cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80149ce:	2300      	movs	r3, #0
 80149d0:	9300      	str	r3, [sp, #0]
 80149d2:	4b11      	ldr	r3, [pc, #68]	@ (8014a18 <prvCheckForValidListAndQueue+0x74>)
 80149d4:	4a11      	ldr	r2, [pc, #68]	@ (8014a1c <prvCheckForValidListAndQueue+0x78>)
 80149d6:	210c      	movs	r1, #12
 80149d8:	200a      	movs	r0, #10
 80149da:	f7fd ff07 	bl	80127ec <xQueueGenericCreateStatic>
 80149de:	4603      	mov	r3, r0
 80149e0:	4a08      	ldr	r2, [pc, #32]	@ (8014a04 <prvCheckForValidListAndQueue+0x60>)
 80149e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80149e4:	4b07      	ldr	r3, [pc, #28]	@ (8014a04 <prvCheckForValidListAndQueue+0x60>)
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d005      	beq.n	80149f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80149ec:	4b05      	ldr	r3, [pc, #20]	@ (8014a04 <prvCheckForValidListAndQueue+0x60>)
 80149ee:	681b      	ldr	r3, [r3, #0]
 80149f0:	490b      	ldr	r1, [pc, #44]	@ (8014a20 <prvCheckForValidListAndQueue+0x7c>)
 80149f2:	4618      	mov	r0, r3
 80149f4:	f7fe fb64 	bl	80130c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80149f8:	f000 f978 	bl	8014cec <vPortExitCritical>
}
 80149fc:	bf00      	nop
 80149fe:	46bd      	mov	sp, r7
 8014a00:	bd80      	pop	{r7, pc}
 8014a02:	bf00      	nop
 8014a04:	20001d60 	.word	0x20001d60
 8014a08:	20001d30 	.word	0x20001d30
 8014a0c:	20001d44 	.word	0x20001d44
 8014a10:	20001d58 	.word	0x20001d58
 8014a14:	20001d5c 	.word	0x20001d5c
 8014a18:	20001de4 	.word	0x20001de4
 8014a1c:	20001d6c 	.word	0x20001d6c
 8014a20:	080161d4 	.word	0x080161d4

08014a24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014a24:	b480      	push	{r7}
 8014a26:	b085      	sub	sp, #20
 8014a28:	af00      	add	r7, sp, #0
 8014a2a:	60f8      	str	r0, [r7, #12]
 8014a2c:	60b9      	str	r1, [r7, #8]
 8014a2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	3b04      	subs	r3, #4
 8014a34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8014a3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014a3e:	68fb      	ldr	r3, [r7, #12]
 8014a40:	3b04      	subs	r3, #4
 8014a42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014a44:	68bb      	ldr	r3, [r7, #8]
 8014a46:	f023 0201 	bic.w	r2, r3, #1
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	3b04      	subs	r3, #4
 8014a52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014a54:	4a0c      	ldr	r2, [pc, #48]	@ (8014a88 <pxPortInitialiseStack+0x64>)
 8014a56:	68fb      	ldr	r3, [r7, #12]
 8014a58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	3b14      	subs	r3, #20
 8014a5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014a60:	687a      	ldr	r2, [r7, #4]
 8014a62:	68fb      	ldr	r3, [r7, #12]
 8014a64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014a66:	68fb      	ldr	r3, [r7, #12]
 8014a68:	3b04      	subs	r3, #4
 8014a6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014a6c:	68fb      	ldr	r3, [r7, #12]
 8014a6e:	f06f 0202 	mvn.w	r2, #2
 8014a72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	3b20      	subs	r3, #32
 8014a78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014a7a:	68fb      	ldr	r3, [r7, #12]
}
 8014a7c:	4618      	mov	r0, r3
 8014a7e:	3714      	adds	r7, #20
 8014a80:	46bd      	mov	sp, r7
 8014a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a86:	4770      	bx	lr
 8014a88:	08014a8d 	.word	0x08014a8d

08014a8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014a8c:	b480      	push	{r7}
 8014a8e:	b085      	sub	sp, #20
 8014a90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014a92:	2300      	movs	r3, #0
 8014a94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014a96:	4b13      	ldr	r3, [pc, #76]	@ (8014ae4 <prvTaskExitError+0x58>)
 8014a98:	681b      	ldr	r3, [r3, #0]
 8014a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a9e:	d00b      	beq.n	8014ab8 <prvTaskExitError+0x2c>
	__asm volatile
 8014aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014aa4:	f383 8811 	msr	BASEPRI, r3
 8014aa8:	f3bf 8f6f 	isb	sy
 8014aac:	f3bf 8f4f 	dsb	sy
 8014ab0:	60fb      	str	r3, [r7, #12]
}
 8014ab2:	bf00      	nop
 8014ab4:	bf00      	nop
 8014ab6:	e7fd      	b.n	8014ab4 <prvTaskExitError+0x28>
	__asm volatile
 8014ab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014abc:	f383 8811 	msr	BASEPRI, r3
 8014ac0:	f3bf 8f6f 	isb	sy
 8014ac4:	f3bf 8f4f 	dsb	sy
 8014ac8:	60bb      	str	r3, [r7, #8]
}
 8014aca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014acc:	bf00      	nop
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	d0fc      	beq.n	8014ace <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014ad4:	bf00      	nop
 8014ad6:	bf00      	nop
 8014ad8:	3714      	adds	r7, #20
 8014ada:	46bd      	mov	sp, r7
 8014adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ae0:	4770      	bx	lr
 8014ae2:	bf00      	nop
 8014ae4:	20000170 	.word	0x20000170
	...

08014af0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014af0:	4b07      	ldr	r3, [pc, #28]	@ (8014b10 <pxCurrentTCBConst2>)
 8014af2:	6819      	ldr	r1, [r3, #0]
 8014af4:	6808      	ldr	r0, [r1, #0]
 8014af6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014afa:	f380 8809 	msr	PSP, r0
 8014afe:	f3bf 8f6f 	isb	sy
 8014b02:	f04f 0000 	mov.w	r0, #0
 8014b06:	f380 8811 	msr	BASEPRI, r0
 8014b0a:	4770      	bx	lr
 8014b0c:	f3af 8000 	nop.w

08014b10 <pxCurrentTCBConst2>:
 8014b10:	20001c04 	.word	0x20001c04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014b14:	bf00      	nop
 8014b16:	bf00      	nop

08014b18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014b18:	4808      	ldr	r0, [pc, #32]	@ (8014b3c <prvPortStartFirstTask+0x24>)
 8014b1a:	6800      	ldr	r0, [r0, #0]
 8014b1c:	6800      	ldr	r0, [r0, #0]
 8014b1e:	f380 8808 	msr	MSP, r0
 8014b22:	f04f 0000 	mov.w	r0, #0
 8014b26:	f380 8814 	msr	CONTROL, r0
 8014b2a:	b662      	cpsie	i
 8014b2c:	b661      	cpsie	f
 8014b2e:	f3bf 8f4f 	dsb	sy
 8014b32:	f3bf 8f6f 	isb	sy
 8014b36:	df00      	svc	0
 8014b38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014b3a:	bf00      	nop
 8014b3c:	e000ed08 	.word	0xe000ed08

08014b40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014b40:	b580      	push	{r7, lr}
 8014b42:	b086      	sub	sp, #24
 8014b44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014b46:	4b47      	ldr	r3, [pc, #284]	@ (8014c64 <xPortStartScheduler+0x124>)
 8014b48:	681b      	ldr	r3, [r3, #0]
 8014b4a:	4a47      	ldr	r2, [pc, #284]	@ (8014c68 <xPortStartScheduler+0x128>)
 8014b4c:	4293      	cmp	r3, r2
 8014b4e:	d10b      	bne.n	8014b68 <xPortStartScheduler+0x28>
	__asm volatile
 8014b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b54:	f383 8811 	msr	BASEPRI, r3
 8014b58:	f3bf 8f6f 	isb	sy
 8014b5c:	f3bf 8f4f 	dsb	sy
 8014b60:	60fb      	str	r3, [r7, #12]
}
 8014b62:	bf00      	nop
 8014b64:	bf00      	nop
 8014b66:	e7fd      	b.n	8014b64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014b68:	4b3e      	ldr	r3, [pc, #248]	@ (8014c64 <xPortStartScheduler+0x124>)
 8014b6a:	681b      	ldr	r3, [r3, #0]
 8014b6c:	4a3f      	ldr	r2, [pc, #252]	@ (8014c6c <xPortStartScheduler+0x12c>)
 8014b6e:	4293      	cmp	r3, r2
 8014b70:	d10b      	bne.n	8014b8a <xPortStartScheduler+0x4a>
	__asm volatile
 8014b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b76:	f383 8811 	msr	BASEPRI, r3
 8014b7a:	f3bf 8f6f 	isb	sy
 8014b7e:	f3bf 8f4f 	dsb	sy
 8014b82:	613b      	str	r3, [r7, #16]
}
 8014b84:	bf00      	nop
 8014b86:	bf00      	nop
 8014b88:	e7fd      	b.n	8014b86 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014b8a:	4b39      	ldr	r3, [pc, #228]	@ (8014c70 <xPortStartScheduler+0x130>)
 8014b8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014b8e:	697b      	ldr	r3, [r7, #20]
 8014b90:	781b      	ldrb	r3, [r3, #0]
 8014b92:	b2db      	uxtb	r3, r3
 8014b94:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014b96:	697b      	ldr	r3, [r7, #20]
 8014b98:	22ff      	movs	r2, #255	@ 0xff
 8014b9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014b9c:	697b      	ldr	r3, [r7, #20]
 8014b9e:	781b      	ldrb	r3, [r3, #0]
 8014ba0:	b2db      	uxtb	r3, r3
 8014ba2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014ba4:	78fb      	ldrb	r3, [r7, #3]
 8014ba6:	b2db      	uxtb	r3, r3
 8014ba8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8014bac:	b2da      	uxtb	r2, r3
 8014bae:	4b31      	ldr	r3, [pc, #196]	@ (8014c74 <xPortStartScheduler+0x134>)
 8014bb0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014bb2:	4b31      	ldr	r3, [pc, #196]	@ (8014c78 <xPortStartScheduler+0x138>)
 8014bb4:	2207      	movs	r2, #7
 8014bb6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014bb8:	e009      	b.n	8014bce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8014bba:	4b2f      	ldr	r3, [pc, #188]	@ (8014c78 <xPortStartScheduler+0x138>)
 8014bbc:	681b      	ldr	r3, [r3, #0]
 8014bbe:	3b01      	subs	r3, #1
 8014bc0:	4a2d      	ldr	r2, [pc, #180]	@ (8014c78 <xPortStartScheduler+0x138>)
 8014bc2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014bc4:	78fb      	ldrb	r3, [r7, #3]
 8014bc6:	b2db      	uxtb	r3, r3
 8014bc8:	005b      	lsls	r3, r3, #1
 8014bca:	b2db      	uxtb	r3, r3
 8014bcc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014bce:	78fb      	ldrb	r3, [r7, #3]
 8014bd0:	b2db      	uxtb	r3, r3
 8014bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014bd6:	2b80      	cmp	r3, #128	@ 0x80
 8014bd8:	d0ef      	beq.n	8014bba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014bda:	4b27      	ldr	r3, [pc, #156]	@ (8014c78 <xPortStartScheduler+0x138>)
 8014bdc:	681b      	ldr	r3, [r3, #0]
 8014bde:	f1c3 0307 	rsb	r3, r3, #7
 8014be2:	2b04      	cmp	r3, #4
 8014be4:	d00b      	beq.n	8014bfe <xPortStartScheduler+0xbe>
	__asm volatile
 8014be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014bea:	f383 8811 	msr	BASEPRI, r3
 8014bee:	f3bf 8f6f 	isb	sy
 8014bf2:	f3bf 8f4f 	dsb	sy
 8014bf6:	60bb      	str	r3, [r7, #8]
}
 8014bf8:	bf00      	nop
 8014bfa:	bf00      	nop
 8014bfc:	e7fd      	b.n	8014bfa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8014c78 <xPortStartScheduler+0x138>)
 8014c00:	681b      	ldr	r3, [r3, #0]
 8014c02:	021b      	lsls	r3, r3, #8
 8014c04:	4a1c      	ldr	r2, [pc, #112]	@ (8014c78 <xPortStartScheduler+0x138>)
 8014c06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014c08:	4b1b      	ldr	r3, [pc, #108]	@ (8014c78 <xPortStartScheduler+0x138>)
 8014c0a:	681b      	ldr	r3, [r3, #0]
 8014c0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8014c10:	4a19      	ldr	r2, [pc, #100]	@ (8014c78 <xPortStartScheduler+0x138>)
 8014c12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	b2da      	uxtb	r2, r3
 8014c18:	697b      	ldr	r3, [r7, #20]
 8014c1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014c1c:	4b17      	ldr	r3, [pc, #92]	@ (8014c7c <xPortStartScheduler+0x13c>)
 8014c1e:	681b      	ldr	r3, [r3, #0]
 8014c20:	4a16      	ldr	r2, [pc, #88]	@ (8014c7c <xPortStartScheduler+0x13c>)
 8014c22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8014c26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014c28:	4b14      	ldr	r3, [pc, #80]	@ (8014c7c <xPortStartScheduler+0x13c>)
 8014c2a:	681b      	ldr	r3, [r3, #0]
 8014c2c:	4a13      	ldr	r2, [pc, #76]	@ (8014c7c <xPortStartScheduler+0x13c>)
 8014c2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8014c32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014c34:	f000 f8da 	bl	8014dec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014c38:	4b11      	ldr	r3, [pc, #68]	@ (8014c80 <xPortStartScheduler+0x140>)
 8014c3a:	2200      	movs	r2, #0
 8014c3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014c3e:	f000 f8f9 	bl	8014e34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014c42:	4b10      	ldr	r3, [pc, #64]	@ (8014c84 <xPortStartScheduler+0x144>)
 8014c44:	681b      	ldr	r3, [r3, #0]
 8014c46:	4a0f      	ldr	r2, [pc, #60]	@ (8014c84 <xPortStartScheduler+0x144>)
 8014c48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8014c4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014c4e:	f7ff ff63 	bl	8014b18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014c52:	f7fe ff83 	bl	8013b5c <vTaskSwitchContext>
	prvTaskExitError();
 8014c56:	f7ff ff19 	bl	8014a8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014c5a:	2300      	movs	r3, #0
}
 8014c5c:	4618      	mov	r0, r3
 8014c5e:	3718      	adds	r7, #24
 8014c60:	46bd      	mov	sp, r7
 8014c62:	bd80      	pop	{r7, pc}
 8014c64:	e000ed00 	.word	0xe000ed00
 8014c68:	410fc271 	.word	0x410fc271
 8014c6c:	410fc270 	.word	0x410fc270
 8014c70:	e000e400 	.word	0xe000e400
 8014c74:	20001e2c 	.word	0x20001e2c
 8014c78:	20001e30 	.word	0x20001e30
 8014c7c:	e000ed20 	.word	0xe000ed20
 8014c80:	20000170 	.word	0x20000170
 8014c84:	e000ef34 	.word	0xe000ef34

08014c88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014c88:	b480      	push	{r7}
 8014c8a:	b083      	sub	sp, #12
 8014c8c:	af00      	add	r7, sp, #0
	__asm volatile
 8014c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c92:	f383 8811 	msr	BASEPRI, r3
 8014c96:	f3bf 8f6f 	isb	sy
 8014c9a:	f3bf 8f4f 	dsb	sy
 8014c9e:	607b      	str	r3, [r7, #4]
}
 8014ca0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014ca2:	4b10      	ldr	r3, [pc, #64]	@ (8014ce4 <vPortEnterCritical+0x5c>)
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	3301      	adds	r3, #1
 8014ca8:	4a0e      	ldr	r2, [pc, #56]	@ (8014ce4 <vPortEnterCritical+0x5c>)
 8014caa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014cac:	4b0d      	ldr	r3, [pc, #52]	@ (8014ce4 <vPortEnterCritical+0x5c>)
 8014cae:	681b      	ldr	r3, [r3, #0]
 8014cb0:	2b01      	cmp	r3, #1
 8014cb2:	d110      	bne.n	8014cd6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8014ce8 <vPortEnterCritical+0x60>)
 8014cb6:	681b      	ldr	r3, [r3, #0]
 8014cb8:	b2db      	uxtb	r3, r3
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d00b      	beq.n	8014cd6 <vPortEnterCritical+0x4e>
	__asm volatile
 8014cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014cc2:	f383 8811 	msr	BASEPRI, r3
 8014cc6:	f3bf 8f6f 	isb	sy
 8014cca:	f3bf 8f4f 	dsb	sy
 8014cce:	603b      	str	r3, [r7, #0]
}
 8014cd0:	bf00      	nop
 8014cd2:	bf00      	nop
 8014cd4:	e7fd      	b.n	8014cd2 <vPortEnterCritical+0x4a>
	}
}
 8014cd6:	bf00      	nop
 8014cd8:	370c      	adds	r7, #12
 8014cda:	46bd      	mov	sp, r7
 8014cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ce0:	4770      	bx	lr
 8014ce2:	bf00      	nop
 8014ce4:	20000170 	.word	0x20000170
 8014ce8:	e000ed04 	.word	0xe000ed04

08014cec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014cec:	b480      	push	{r7}
 8014cee:	b083      	sub	sp, #12
 8014cf0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014cf2:	4b12      	ldr	r3, [pc, #72]	@ (8014d3c <vPortExitCritical+0x50>)
 8014cf4:	681b      	ldr	r3, [r3, #0]
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d10b      	bne.n	8014d12 <vPortExitCritical+0x26>
	__asm volatile
 8014cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014cfe:	f383 8811 	msr	BASEPRI, r3
 8014d02:	f3bf 8f6f 	isb	sy
 8014d06:	f3bf 8f4f 	dsb	sy
 8014d0a:	607b      	str	r3, [r7, #4]
}
 8014d0c:	bf00      	nop
 8014d0e:	bf00      	nop
 8014d10:	e7fd      	b.n	8014d0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014d12:	4b0a      	ldr	r3, [pc, #40]	@ (8014d3c <vPortExitCritical+0x50>)
 8014d14:	681b      	ldr	r3, [r3, #0]
 8014d16:	3b01      	subs	r3, #1
 8014d18:	4a08      	ldr	r2, [pc, #32]	@ (8014d3c <vPortExitCritical+0x50>)
 8014d1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014d1c:	4b07      	ldr	r3, [pc, #28]	@ (8014d3c <vPortExitCritical+0x50>)
 8014d1e:	681b      	ldr	r3, [r3, #0]
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d105      	bne.n	8014d30 <vPortExitCritical+0x44>
 8014d24:	2300      	movs	r3, #0
 8014d26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014d28:	683b      	ldr	r3, [r7, #0]
 8014d2a:	f383 8811 	msr	BASEPRI, r3
}
 8014d2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014d30:	bf00      	nop
 8014d32:	370c      	adds	r7, #12
 8014d34:	46bd      	mov	sp, r7
 8014d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d3a:	4770      	bx	lr
 8014d3c:	20000170 	.word	0x20000170

08014d40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014d40:	f3ef 8009 	mrs	r0, PSP
 8014d44:	f3bf 8f6f 	isb	sy
 8014d48:	4b15      	ldr	r3, [pc, #84]	@ (8014da0 <pxCurrentTCBConst>)
 8014d4a:	681a      	ldr	r2, [r3, #0]
 8014d4c:	f01e 0f10 	tst.w	lr, #16
 8014d50:	bf08      	it	eq
 8014d52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014d56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d5a:	6010      	str	r0, [r2, #0]
 8014d5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014d60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8014d64:	f380 8811 	msr	BASEPRI, r0
 8014d68:	f3bf 8f4f 	dsb	sy
 8014d6c:	f3bf 8f6f 	isb	sy
 8014d70:	f7fe fef4 	bl	8013b5c <vTaskSwitchContext>
 8014d74:	f04f 0000 	mov.w	r0, #0
 8014d78:	f380 8811 	msr	BASEPRI, r0
 8014d7c:	bc09      	pop	{r0, r3}
 8014d7e:	6819      	ldr	r1, [r3, #0]
 8014d80:	6808      	ldr	r0, [r1, #0]
 8014d82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d86:	f01e 0f10 	tst.w	lr, #16
 8014d8a:	bf08      	it	eq
 8014d8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014d90:	f380 8809 	msr	PSP, r0
 8014d94:	f3bf 8f6f 	isb	sy
 8014d98:	4770      	bx	lr
 8014d9a:	bf00      	nop
 8014d9c:	f3af 8000 	nop.w

08014da0 <pxCurrentTCBConst>:
 8014da0:	20001c04 	.word	0x20001c04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014da4:	bf00      	nop
 8014da6:	bf00      	nop

08014da8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014da8:	b580      	push	{r7, lr}
 8014daa:	b082      	sub	sp, #8
 8014dac:	af00      	add	r7, sp, #0
	__asm volatile
 8014dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014db2:	f383 8811 	msr	BASEPRI, r3
 8014db6:	f3bf 8f6f 	isb	sy
 8014dba:	f3bf 8f4f 	dsb	sy
 8014dbe:	607b      	str	r3, [r7, #4]
}
 8014dc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014dc2:	f7fe fe11 	bl	80139e8 <xTaskIncrementTick>
 8014dc6:	4603      	mov	r3, r0
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	d003      	beq.n	8014dd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014dcc:	4b06      	ldr	r3, [pc, #24]	@ (8014de8 <SysTick_Handler+0x40>)
 8014dce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014dd2:	601a      	str	r2, [r3, #0]
 8014dd4:	2300      	movs	r3, #0
 8014dd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014dd8:	683b      	ldr	r3, [r7, #0]
 8014dda:	f383 8811 	msr	BASEPRI, r3
}
 8014dde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014de0:	bf00      	nop
 8014de2:	3708      	adds	r7, #8
 8014de4:	46bd      	mov	sp, r7
 8014de6:	bd80      	pop	{r7, pc}
 8014de8:	e000ed04 	.word	0xe000ed04

08014dec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014dec:	b480      	push	{r7}
 8014dee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014df0:	4b0b      	ldr	r3, [pc, #44]	@ (8014e20 <vPortSetupTimerInterrupt+0x34>)
 8014df2:	2200      	movs	r2, #0
 8014df4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014df6:	4b0b      	ldr	r3, [pc, #44]	@ (8014e24 <vPortSetupTimerInterrupt+0x38>)
 8014df8:	2200      	movs	r2, #0
 8014dfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8014e28 <vPortSetupTimerInterrupt+0x3c>)
 8014dfe:	681b      	ldr	r3, [r3, #0]
 8014e00:	4a0a      	ldr	r2, [pc, #40]	@ (8014e2c <vPortSetupTimerInterrupt+0x40>)
 8014e02:	fba2 2303 	umull	r2, r3, r2, r3
 8014e06:	099b      	lsrs	r3, r3, #6
 8014e08:	4a09      	ldr	r2, [pc, #36]	@ (8014e30 <vPortSetupTimerInterrupt+0x44>)
 8014e0a:	3b01      	subs	r3, #1
 8014e0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014e0e:	4b04      	ldr	r3, [pc, #16]	@ (8014e20 <vPortSetupTimerInterrupt+0x34>)
 8014e10:	2207      	movs	r2, #7
 8014e12:	601a      	str	r2, [r3, #0]
}
 8014e14:	bf00      	nop
 8014e16:	46bd      	mov	sp, r7
 8014e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e1c:	4770      	bx	lr
 8014e1e:	bf00      	nop
 8014e20:	e000e010 	.word	0xe000e010
 8014e24:	e000e018 	.word	0xe000e018
 8014e28:	20000164 	.word	0x20000164
 8014e2c:	10624dd3 	.word	0x10624dd3
 8014e30:	e000e014 	.word	0xe000e014

08014e34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014e34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8014e44 <vPortEnableVFP+0x10>
 8014e38:	6801      	ldr	r1, [r0, #0]
 8014e3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8014e3e:	6001      	str	r1, [r0, #0]
 8014e40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014e42:	bf00      	nop
 8014e44:	e000ed88 	.word	0xe000ed88

08014e48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014e48:	b480      	push	{r7}
 8014e4a:	b085      	sub	sp, #20
 8014e4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014e4e:	f3ef 8305 	mrs	r3, IPSR
 8014e52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014e54:	68fb      	ldr	r3, [r7, #12]
 8014e56:	2b0f      	cmp	r3, #15
 8014e58:	d915      	bls.n	8014e86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014e5a:	4a18      	ldr	r2, [pc, #96]	@ (8014ebc <vPortValidateInterruptPriority+0x74>)
 8014e5c:	68fb      	ldr	r3, [r7, #12]
 8014e5e:	4413      	add	r3, r2
 8014e60:	781b      	ldrb	r3, [r3, #0]
 8014e62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014e64:	4b16      	ldr	r3, [pc, #88]	@ (8014ec0 <vPortValidateInterruptPriority+0x78>)
 8014e66:	781b      	ldrb	r3, [r3, #0]
 8014e68:	7afa      	ldrb	r2, [r7, #11]
 8014e6a:	429a      	cmp	r2, r3
 8014e6c:	d20b      	bcs.n	8014e86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8014e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e72:	f383 8811 	msr	BASEPRI, r3
 8014e76:	f3bf 8f6f 	isb	sy
 8014e7a:	f3bf 8f4f 	dsb	sy
 8014e7e:	607b      	str	r3, [r7, #4]
}
 8014e80:	bf00      	nop
 8014e82:	bf00      	nop
 8014e84:	e7fd      	b.n	8014e82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014e86:	4b0f      	ldr	r3, [pc, #60]	@ (8014ec4 <vPortValidateInterruptPriority+0x7c>)
 8014e88:	681b      	ldr	r3, [r3, #0]
 8014e8a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8014e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8014ec8 <vPortValidateInterruptPriority+0x80>)
 8014e90:	681b      	ldr	r3, [r3, #0]
 8014e92:	429a      	cmp	r2, r3
 8014e94:	d90b      	bls.n	8014eae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8014e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e9a:	f383 8811 	msr	BASEPRI, r3
 8014e9e:	f3bf 8f6f 	isb	sy
 8014ea2:	f3bf 8f4f 	dsb	sy
 8014ea6:	603b      	str	r3, [r7, #0]
}
 8014ea8:	bf00      	nop
 8014eaa:	bf00      	nop
 8014eac:	e7fd      	b.n	8014eaa <vPortValidateInterruptPriority+0x62>
	}
 8014eae:	bf00      	nop
 8014eb0:	3714      	adds	r7, #20
 8014eb2:	46bd      	mov	sp, r7
 8014eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eb8:	4770      	bx	lr
 8014eba:	bf00      	nop
 8014ebc:	e000e3f0 	.word	0xe000e3f0
 8014ec0:	20001e2c 	.word	0x20001e2c
 8014ec4:	e000ed0c 	.word	0xe000ed0c
 8014ec8:	20001e30 	.word	0x20001e30

08014ecc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014ecc:	b580      	push	{r7, lr}
 8014ece:	b08a      	sub	sp, #40	@ 0x28
 8014ed0:	af00      	add	r7, sp, #0
 8014ed2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014ed4:	2300      	movs	r3, #0
 8014ed6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014ed8:	f7fe fcca 	bl	8013870 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014edc:	4b5c      	ldr	r3, [pc, #368]	@ (8015050 <pvPortMalloc+0x184>)
 8014ede:	681b      	ldr	r3, [r3, #0]
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d101      	bne.n	8014ee8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014ee4:	f000 f924 	bl	8015130 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014ee8:	4b5a      	ldr	r3, [pc, #360]	@ (8015054 <pvPortMalloc+0x188>)
 8014eea:	681a      	ldr	r2, [r3, #0]
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	4013      	ands	r3, r2
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	f040 8095 	bne.w	8015020 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	d01e      	beq.n	8014f3a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8014efc:	2208      	movs	r2, #8
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	4413      	add	r3, r2
 8014f02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	f003 0307 	and.w	r3, r3, #7
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d015      	beq.n	8014f3a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	f023 0307 	bic.w	r3, r3, #7
 8014f14:	3308      	adds	r3, #8
 8014f16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	f003 0307 	and.w	r3, r3, #7
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d00b      	beq.n	8014f3a <pvPortMalloc+0x6e>
	__asm volatile
 8014f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f26:	f383 8811 	msr	BASEPRI, r3
 8014f2a:	f3bf 8f6f 	isb	sy
 8014f2e:	f3bf 8f4f 	dsb	sy
 8014f32:	617b      	str	r3, [r7, #20]
}
 8014f34:	bf00      	nop
 8014f36:	bf00      	nop
 8014f38:	e7fd      	b.n	8014f36 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d06f      	beq.n	8015020 <pvPortMalloc+0x154>
 8014f40:	4b45      	ldr	r3, [pc, #276]	@ (8015058 <pvPortMalloc+0x18c>)
 8014f42:	681b      	ldr	r3, [r3, #0]
 8014f44:	687a      	ldr	r2, [r7, #4]
 8014f46:	429a      	cmp	r2, r3
 8014f48:	d86a      	bhi.n	8015020 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014f4a:	4b44      	ldr	r3, [pc, #272]	@ (801505c <pvPortMalloc+0x190>)
 8014f4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014f4e:	4b43      	ldr	r3, [pc, #268]	@ (801505c <pvPortMalloc+0x190>)
 8014f50:	681b      	ldr	r3, [r3, #0]
 8014f52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014f54:	e004      	b.n	8014f60 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8014f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f5c:	681b      	ldr	r3, [r3, #0]
 8014f5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f62:	685b      	ldr	r3, [r3, #4]
 8014f64:	687a      	ldr	r2, [r7, #4]
 8014f66:	429a      	cmp	r2, r3
 8014f68:	d903      	bls.n	8014f72 <pvPortMalloc+0xa6>
 8014f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f6c:	681b      	ldr	r3, [r3, #0]
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d1f1      	bne.n	8014f56 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014f72:	4b37      	ldr	r3, [pc, #220]	@ (8015050 <pvPortMalloc+0x184>)
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014f78:	429a      	cmp	r2, r3
 8014f7a:	d051      	beq.n	8015020 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014f7c:	6a3b      	ldr	r3, [r7, #32]
 8014f7e:	681b      	ldr	r3, [r3, #0]
 8014f80:	2208      	movs	r2, #8
 8014f82:	4413      	add	r3, r2
 8014f84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f88:	681a      	ldr	r2, [r3, #0]
 8014f8a:	6a3b      	ldr	r3, [r7, #32]
 8014f8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f90:	685a      	ldr	r2, [r3, #4]
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	1ad2      	subs	r2, r2, r3
 8014f96:	2308      	movs	r3, #8
 8014f98:	005b      	lsls	r3, r3, #1
 8014f9a:	429a      	cmp	r2, r3
 8014f9c:	d920      	bls.n	8014fe0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014f9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	4413      	add	r3, r2
 8014fa4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014fa6:	69bb      	ldr	r3, [r7, #24]
 8014fa8:	f003 0307 	and.w	r3, r3, #7
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	d00b      	beq.n	8014fc8 <pvPortMalloc+0xfc>
	__asm volatile
 8014fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014fb4:	f383 8811 	msr	BASEPRI, r3
 8014fb8:	f3bf 8f6f 	isb	sy
 8014fbc:	f3bf 8f4f 	dsb	sy
 8014fc0:	613b      	str	r3, [r7, #16]
}
 8014fc2:	bf00      	nop
 8014fc4:	bf00      	nop
 8014fc6:	e7fd      	b.n	8014fc4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fca:	685a      	ldr	r2, [r3, #4]
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	1ad2      	subs	r2, r2, r3
 8014fd0:	69bb      	ldr	r3, [r7, #24]
 8014fd2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fd6:	687a      	ldr	r2, [r7, #4]
 8014fd8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014fda:	69b8      	ldr	r0, [r7, #24]
 8014fdc:	f000 f90a 	bl	80151f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014fe0:	4b1d      	ldr	r3, [pc, #116]	@ (8015058 <pvPortMalloc+0x18c>)
 8014fe2:	681a      	ldr	r2, [r3, #0]
 8014fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fe6:	685b      	ldr	r3, [r3, #4]
 8014fe8:	1ad3      	subs	r3, r2, r3
 8014fea:	4a1b      	ldr	r2, [pc, #108]	@ (8015058 <pvPortMalloc+0x18c>)
 8014fec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014fee:	4b1a      	ldr	r3, [pc, #104]	@ (8015058 <pvPortMalloc+0x18c>)
 8014ff0:	681a      	ldr	r2, [r3, #0]
 8014ff2:	4b1b      	ldr	r3, [pc, #108]	@ (8015060 <pvPortMalloc+0x194>)
 8014ff4:	681b      	ldr	r3, [r3, #0]
 8014ff6:	429a      	cmp	r2, r3
 8014ff8:	d203      	bcs.n	8015002 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014ffa:	4b17      	ldr	r3, [pc, #92]	@ (8015058 <pvPortMalloc+0x18c>)
 8014ffc:	681b      	ldr	r3, [r3, #0]
 8014ffe:	4a18      	ldr	r2, [pc, #96]	@ (8015060 <pvPortMalloc+0x194>)
 8015000:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015004:	685a      	ldr	r2, [r3, #4]
 8015006:	4b13      	ldr	r3, [pc, #76]	@ (8015054 <pvPortMalloc+0x188>)
 8015008:	681b      	ldr	r3, [r3, #0]
 801500a:	431a      	orrs	r2, r3
 801500c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801500e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015012:	2200      	movs	r2, #0
 8015014:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8015016:	4b13      	ldr	r3, [pc, #76]	@ (8015064 <pvPortMalloc+0x198>)
 8015018:	681b      	ldr	r3, [r3, #0]
 801501a:	3301      	adds	r3, #1
 801501c:	4a11      	ldr	r2, [pc, #68]	@ (8015064 <pvPortMalloc+0x198>)
 801501e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015020:	f7fe fc34 	bl	801388c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015024:	69fb      	ldr	r3, [r7, #28]
 8015026:	f003 0307 	and.w	r3, r3, #7
 801502a:	2b00      	cmp	r3, #0
 801502c:	d00b      	beq.n	8015046 <pvPortMalloc+0x17a>
	__asm volatile
 801502e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015032:	f383 8811 	msr	BASEPRI, r3
 8015036:	f3bf 8f6f 	isb	sy
 801503a:	f3bf 8f4f 	dsb	sy
 801503e:	60fb      	str	r3, [r7, #12]
}
 8015040:	bf00      	nop
 8015042:	bf00      	nop
 8015044:	e7fd      	b.n	8015042 <pvPortMalloc+0x176>
	return pvReturn;
 8015046:	69fb      	ldr	r3, [r7, #28]
}
 8015048:	4618      	mov	r0, r3
 801504a:	3728      	adds	r7, #40	@ 0x28
 801504c:	46bd      	mov	sp, r7
 801504e:	bd80      	pop	{r7, pc}
 8015050:	20005a3c 	.word	0x20005a3c
 8015054:	20005a50 	.word	0x20005a50
 8015058:	20005a40 	.word	0x20005a40
 801505c:	20005a34 	.word	0x20005a34
 8015060:	20005a44 	.word	0x20005a44
 8015064:	20005a48 	.word	0x20005a48

08015068 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015068:	b580      	push	{r7, lr}
 801506a:	b086      	sub	sp, #24
 801506c:	af00      	add	r7, sp, #0
 801506e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	2b00      	cmp	r3, #0
 8015078:	d04f      	beq.n	801511a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801507a:	2308      	movs	r3, #8
 801507c:	425b      	negs	r3, r3
 801507e:	697a      	ldr	r2, [r7, #20]
 8015080:	4413      	add	r3, r2
 8015082:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015084:	697b      	ldr	r3, [r7, #20]
 8015086:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015088:	693b      	ldr	r3, [r7, #16]
 801508a:	685a      	ldr	r2, [r3, #4]
 801508c:	4b25      	ldr	r3, [pc, #148]	@ (8015124 <vPortFree+0xbc>)
 801508e:	681b      	ldr	r3, [r3, #0]
 8015090:	4013      	ands	r3, r2
 8015092:	2b00      	cmp	r3, #0
 8015094:	d10b      	bne.n	80150ae <vPortFree+0x46>
	__asm volatile
 8015096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801509a:	f383 8811 	msr	BASEPRI, r3
 801509e:	f3bf 8f6f 	isb	sy
 80150a2:	f3bf 8f4f 	dsb	sy
 80150a6:	60fb      	str	r3, [r7, #12]
}
 80150a8:	bf00      	nop
 80150aa:	bf00      	nop
 80150ac:	e7fd      	b.n	80150aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80150ae:	693b      	ldr	r3, [r7, #16]
 80150b0:	681b      	ldr	r3, [r3, #0]
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d00b      	beq.n	80150ce <vPortFree+0x66>
	__asm volatile
 80150b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80150ba:	f383 8811 	msr	BASEPRI, r3
 80150be:	f3bf 8f6f 	isb	sy
 80150c2:	f3bf 8f4f 	dsb	sy
 80150c6:	60bb      	str	r3, [r7, #8]
}
 80150c8:	bf00      	nop
 80150ca:	bf00      	nop
 80150cc:	e7fd      	b.n	80150ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80150ce:	693b      	ldr	r3, [r7, #16]
 80150d0:	685a      	ldr	r2, [r3, #4]
 80150d2:	4b14      	ldr	r3, [pc, #80]	@ (8015124 <vPortFree+0xbc>)
 80150d4:	681b      	ldr	r3, [r3, #0]
 80150d6:	4013      	ands	r3, r2
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d01e      	beq.n	801511a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80150dc:	693b      	ldr	r3, [r7, #16]
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	d11a      	bne.n	801511a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80150e4:	693b      	ldr	r3, [r7, #16]
 80150e6:	685a      	ldr	r2, [r3, #4]
 80150e8:	4b0e      	ldr	r3, [pc, #56]	@ (8015124 <vPortFree+0xbc>)
 80150ea:	681b      	ldr	r3, [r3, #0]
 80150ec:	43db      	mvns	r3, r3
 80150ee:	401a      	ands	r2, r3
 80150f0:	693b      	ldr	r3, [r7, #16]
 80150f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80150f4:	f7fe fbbc 	bl	8013870 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80150f8:	693b      	ldr	r3, [r7, #16]
 80150fa:	685a      	ldr	r2, [r3, #4]
 80150fc:	4b0a      	ldr	r3, [pc, #40]	@ (8015128 <vPortFree+0xc0>)
 80150fe:	681b      	ldr	r3, [r3, #0]
 8015100:	4413      	add	r3, r2
 8015102:	4a09      	ldr	r2, [pc, #36]	@ (8015128 <vPortFree+0xc0>)
 8015104:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8015106:	6938      	ldr	r0, [r7, #16]
 8015108:	f000 f874 	bl	80151f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801510c:	4b07      	ldr	r3, [pc, #28]	@ (801512c <vPortFree+0xc4>)
 801510e:	681b      	ldr	r3, [r3, #0]
 8015110:	3301      	adds	r3, #1
 8015112:	4a06      	ldr	r2, [pc, #24]	@ (801512c <vPortFree+0xc4>)
 8015114:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8015116:	f7fe fbb9 	bl	801388c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801511a:	bf00      	nop
 801511c:	3718      	adds	r7, #24
 801511e:	46bd      	mov	sp, r7
 8015120:	bd80      	pop	{r7, pc}
 8015122:	bf00      	nop
 8015124:	20005a50 	.word	0x20005a50
 8015128:	20005a40 	.word	0x20005a40
 801512c:	20005a4c 	.word	0x20005a4c

08015130 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015130:	b480      	push	{r7}
 8015132:	b085      	sub	sp, #20
 8015134:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8015136:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 801513a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801513c:	4b27      	ldr	r3, [pc, #156]	@ (80151dc <prvHeapInit+0xac>)
 801513e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015140:	68fb      	ldr	r3, [r7, #12]
 8015142:	f003 0307 	and.w	r3, r3, #7
 8015146:	2b00      	cmp	r3, #0
 8015148:	d00c      	beq.n	8015164 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801514a:	68fb      	ldr	r3, [r7, #12]
 801514c:	3307      	adds	r3, #7
 801514e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015150:	68fb      	ldr	r3, [r7, #12]
 8015152:	f023 0307 	bic.w	r3, r3, #7
 8015156:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8015158:	68ba      	ldr	r2, [r7, #8]
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	1ad3      	subs	r3, r2, r3
 801515e:	4a1f      	ldr	r2, [pc, #124]	@ (80151dc <prvHeapInit+0xac>)
 8015160:	4413      	add	r3, r2
 8015162:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015164:	68fb      	ldr	r3, [r7, #12]
 8015166:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8015168:	4a1d      	ldr	r2, [pc, #116]	@ (80151e0 <prvHeapInit+0xb0>)
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801516e:	4b1c      	ldr	r3, [pc, #112]	@ (80151e0 <prvHeapInit+0xb0>)
 8015170:	2200      	movs	r2, #0
 8015172:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	68ba      	ldr	r2, [r7, #8]
 8015178:	4413      	add	r3, r2
 801517a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801517c:	2208      	movs	r2, #8
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	1a9b      	subs	r3, r3, r2
 8015182:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015184:	68fb      	ldr	r3, [r7, #12]
 8015186:	f023 0307 	bic.w	r3, r3, #7
 801518a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801518c:	68fb      	ldr	r3, [r7, #12]
 801518e:	4a15      	ldr	r2, [pc, #84]	@ (80151e4 <prvHeapInit+0xb4>)
 8015190:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015192:	4b14      	ldr	r3, [pc, #80]	@ (80151e4 <prvHeapInit+0xb4>)
 8015194:	681b      	ldr	r3, [r3, #0]
 8015196:	2200      	movs	r2, #0
 8015198:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801519a:	4b12      	ldr	r3, [pc, #72]	@ (80151e4 <prvHeapInit+0xb4>)
 801519c:	681b      	ldr	r3, [r3, #0]
 801519e:	2200      	movs	r2, #0
 80151a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80151a6:	683b      	ldr	r3, [r7, #0]
 80151a8:	68fa      	ldr	r2, [r7, #12]
 80151aa:	1ad2      	subs	r2, r2, r3
 80151ac:	683b      	ldr	r3, [r7, #0]
 80151ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80151b0:	4b0c      	ldr	r3, [pc, #48]	@ (80151e4 <prvHeapInit+0xb4>)
 80151b2:	681a      	ldr	r2, [r3, #0]
 80151b4:	683b      	ldr	r3, [r7, #0]
 80151b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80151b8:	683b      	ldr	r3, [r7, #0]
 80151ba:	685b      	ldr	r3, [r3, #4]
 80151bc:	4a0a      	ldr	r2, [pc, #40]	@ (80151e8 <prvHeapInit+0xb8>)
 80151be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80151c0:	683b      	ldr	r3, [r7, #0]
 80151c2:	685b      	ldr	r3, [r3, #4]
 80151c4:	4a09      	ldr	r2, [pc, #36]	@ (80151ec <prvHeapInit+0xbc>)
 80151c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80151c8:	4b09      	ldr	r3, [pc, #36]	@ (80151f0 <prvHeapInit+0xc0>)
 80151ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80151ce:	601a      	str	r2, [r3, #0]
}
 80151d0:	bf00      	nop
 80151d2:	3714      	adds	r7, #20
 80151d4:	46bd      	mov	sp, r7
 80151d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151da:	4770      	bx	lr
 80151dc:	20001e34 	.word	0x20001e34
 80151e0:	20005a34 	.word	0x20005a34
 80151e4:	20005a3c 	.word	0x20005a3c
 80151e8:	20005a44 	.word	0x20005a44
 80151ec:	20005a40 	.word	0x20005a40
 80151f0:	20005a50 	.word	0x20005a50

080151f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80151f4:	b480      	push	{r7}
 80151f6:	b085      	sub	sp, #20
 80151f8:	af00      	add	r7, sp, #0
 80151fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80151fc:	4b28      	ldr	r3, [pc, #160]	@ (80152a0 <prvInsertBlockIntoFreeList+0xac>)
 80151fe:	60fb      	str	r3, [r7, #12]
 8015200:	e002      	b.n	8015208 <prvInsertBlockIntoFreeList+0x14>
 8015202:	68fb      	ldr	r3, [r7, #12]
 8015204:	681b      	ldr	r3, [r3, #0]
 8015206:	60fb      	str	r3, [r7, #12]
 8015208:	68fb      	ldr	r3, [r7, #12]
 801520a:	681b      	ldr	r3, [r3, #0]
 801520c:	687a      	ldr	r2, [r7, #4]
 801520e:	429a      	cmp	r2, r3
 8015210:	d8f7      	bhi.n	8015202 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015212:	68fb      	ldr	r3, [r7, #12]
 8015214:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8015216:	68fb      	ldr	r3, [r7, #12]
 8015218:	685b      	ldr	r3, [r3, #4]
 801521a:	68ba      	ldr	r2, [r7, #8]
 801521c:	4413      	add	r3, r2
 801521e:	687a      	ldr	r2, [r7, #4]
 8015220:	429a      	cmp	r2, r3
 8015222:	d108      	bne.n	8015236 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	685a      	ldr	r2, [r3, #4]
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	685b      	ldr	r3, [r3, #4]
 801522c:	441a      	add	r2, r3
 801522e:	68fb      	ldr	r3, [r7, #12]
 8015230:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015232:	68fb      	ldr	r3, [r7, #12]
 8015234:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	685b      	ldr	r3, [r3, #4]
 801523e:	68ba      	ldr	r2, [r7, #8]
 8015240:	441a      	add	r2, r3
 8015242:	68fb      	ldr	r3, [r7, #12]
 8015244:	681b      	ldr	r3, [r3, #0]
 8015246:	429a      	cmp	r2, r3
 8015248:	d118      	bne.n	801527c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801524a:	68fb      	ldr	r3, [r7, #12]
 801524c:	681a      	ldr	r2, [r3, #0]
 801524e:	4b15      	ldr	r3, [pc, #84]	@ (80152a4 <prvInsertBlockIntoFreeList+0xb0>)
 8015250:	681b      	ldr	r3, [r3, #0]
 8015252:	429a      	cmp	r2, r3
 8015254:	d00d      	beq.n	8015272 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	685a      	ldr	r2, [r3, #4]
 801525a:	68fb      	ldr	r3, [r7, #12]
 801525c:	681b      	ldr	r3, [r3, #0]
 801525e:	685b      	ldr	r3, [r3, #4]
 8015260:	441a      	add	r2, r3
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	681b      	ldr	r3, [r3, #0]
 801526a:	681a      	ldr	r2, [r3, #0]
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	601a      	str	r2, [r3, #0]
 8015270:	e008      	b.n	8015284 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015272:	4b0c      	ldr	r3, [pc, #48]	@ (80152a4 <prvInsertBlockIntoFreeList+0xb0>)
 8015274:	681a      	ldr	r2, [r3, #0]
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	601a      	str	r2, [r3, #0]
 801527a:	e003      	b.n	8015284 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801527c:	68fb      	ldr	r3, [r7, #12]
 801527e:	681a      	ldr	r2, [r3, #0]
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015284:	68fa      	ldr	r2, [r7, #12]
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	429a      	cmp	r2, r3
 801528a:	d002      	beq.n	8015292 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801528c:	68fb      	ldr	r3, [r7, #12]
 801528e:	687a      	ldr	r2, [r7, #4]
 8015290:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015292:	bf00      	nop
 8015294:	3714      	adds	r7, #20
 8015296:	46bd      	mov	sp, r7
 8015298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801529c:	4770      	bx	lr
 801529e:	bf00      	nop
 80152a0:	20005a34 	.word	0x20005a34
 80152a4:	20005a3c 	.word	0x20005a3c

080152a8 <malloc>:
 80152a8:	4b02      	ldr	r3, [pc, #8]	@ (80152b4 <malloc+0xc>)
 80152aa:	4601      	mov	r1, r0
 80152ac:	6818      	ldr	r0, [r3, #0]
 80152ae:	f000 b82d 	b.w	801530c <_malloc_r>
 80152b2:	bf00      	nop
 80152b4:	20000174 	.word	0x20000174

080152b8 <free>:
 80152b8:	4b02      	ldr	r3, [pc, #8]	@ (80152c4 <free+0xc>)
 80152ba:	4601      	mov	r1, r0
 80152bc:	6818      	ldr	r0, [r3, #0]
 80152be:	f000 ba07 	b.w	80156d0 <_free_r>
 80152c2:	bf00      	nop
 80152c4:	20000174 	.word	0x20000174

080152c8 <sbrk_aligned>:
 80152c8:	b570      	push	{r4, r5, r6, lr}
 80152ca:	4e0f      	ldr	r6, [pc, #60]	@ (8015308 <sbrk_aligned+0x40>)
 80152cc:	460c      	mov	r4, r1
 80152ce:	6831      	ldr	r1, [r6, #0]
 80152d0:	4605      	mov	r5, r0
 80152d2:	b911      	cbnz	r1, 80152da <sbrk_aligned+0x12>
 80152d4:	f000 f9b2 	bl	801563c <_sbrk_r>
 80152d8:	6030      	str	r0, [r6, #0]
 80152da:	4621      	mov	r1, r4
 80152dc:	4628      	mov	r0, r5
 80152de:	f000 f9ad 	bl	801563c <_sbrk_r>
 80152e2:	1c43      	adds	r3, r0, #1
 80152e4:	d103      	bne.n	80152ee <sbrk_aligned+0x26>
 80152e6:	f04f 34ff 	mov.w	r4, #4294967295
 80152ea:	4620      	mov	r0, r4
 80152ec:	bd70      	pop	{r4, r5, r6, pc}
 80152ee:	1cc4      	adds	r4, r0, #3
 80152f0:	f024 0403 	bic.w	r4, r4, #3
 80152f4:	42a0      	cmp	r0, r4
 80152f6:	d0f8      	beq.n	80152ea <sbrk_aligned+0x22>
 80152f8:	1a21      	subs	r1, r4, r0
 80152fa:	4628      	mov	r0, r5
 80152fc:	f000 f99e 	bl	801563c <_sbrk_r>
 8015300:	3001      	adds	r0, #1
 8015302:	d1f2      	bne.n	80152ea <sbrk_aligned+0x22>
 8015304:	e7ef      	b.n	80152e6 <sbrk_aligned+0x1e>
 8015306:	bf00      	nop
 8015308:	20005a54 	.word	0x20005a54

0801530c <_malloc_r>:
 801530c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015310:	1ccd      	adds	r5, r1, #3
 8015312:	f025 0503 	bic.w	r5, r5, #3
 8015316:	3508      	adds	r5, #8
 8015318:	2d0c      	cmp	r5, #12
 801531a:	bf38      	it	cc
 801531c:	250c      	movcc	r5, #12
 801531e:	2d00      	cmp	r5, #0
 8015320:	4606      	mov	r6, r0
 8015322:	db01      	blt.n	8015328 <_malloc_r+0x1c>
 8015324:	42a9      	cmp	r1, r5
 8015326:	d904      	bls.n	8015332 <_malloc_r+0x26>
 8015328:	230c      	movs	r3, #12
 801532a:	6033      	str	r3, [r6, #0]
 801532c:	2000      	movs	r0, #0
 801532e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015332:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015408 <_malloc_r+0xfc>
 8015336:	f000 f869 	bl	801540c <__malloc_lock>
 801533a:	f8d8 3000 	ldr.w	r3, [r8]
 801533e:	461c      	mov	r4, r3
 8015340:	bb44      	cbnz	r4, 8015394 <_malloc_r+0x88>
 8015342:	4629      	mov	r1, r5
 8015344:	4630      	mov	r0, r6
 8015346:	f7ff ffbf 	bl	80152c8 <sbrk_aligned>
 801534a:	1c43      	adds	r3, r0, #1
 801534c:	4604      	mov	r4, r0
 801534e:	d158      	bne.n	8015402 <_malloc_r+0xf6>
 8015350:	f8d8 4000 	ldr.w	r4, [r8]
 8015354:	4627      	mov	r7, r4
 8015356:	2f00      	cmp	r7, #0
 8015358:	d143      	bne.n	80153e2 <_malloc_r+0xd6>
 801535a:	2c00      	cmp	r4, #0
 801535c:	d04b      	beq.n	80153f6 <_malloc_r+0xea>
 801535e:	6823      	ldr	r3, [r4, #0]
 8015360:	4639      	mov	r1, r7
 8015362:	4630      	mov	r0, r6
 8015364:	eb04 0903 	add.w	r9, r4, r3
 8015368:	f000 f968 	bl	801563c <_sbrk_r>
 801536c:	4581      	cmp	r9, r0
 801536e:	d142      	bne.n	80153f6 <_malloc_r+0xea>
 8015370:	6821      	ldr	r1, [r4, #0]
 8015372:	1a6d      	subs	r5, r5, r1
 8015374:	4629      	mov	r1, r5
 8015376:	4630      	mov	r0, r6
 8015378:	f7ff ffa6 	bl	80152c8 <sbrk_aligned>
 801537c:	3001      	adds	r0, #1
 801537e:	d03a      	beq.n	80153f6 <_malloc_r+0xea>
 8015380:	6823      	ldr	r3, [r4, #0]
 8015382:	442b      	add	r3, r5
 8015384:	6023      	str	r3, [r4, #0]
 8015386:	f8d8 3000 	ldr.w	r3, [r8]
 801538a:	685a      	ldr	r2, [r3, #4]
 801538c:	bb62      	cbnz	r2, 80153e8 <_malloc_r+0xdc>
 801538e:	f8c8 7000 	str.w	r7, [r8]
 8015392:	e00f      	b.n	80153b4 <_malloc_r+0xa8>
 8015394:	6822      	ldr	r2, [r4, #0]
 8015396:	1b52      	subs	r2, r2, r5
 8015398:	d420      	bmi.n	80153dc <_malloc_r+0xd0>
 801539a:	2a0b      	cmp	r2, #11
 801539c:	d917      	bls.n	80153ce <_malloc_r+0xc2>
 801539e:	1961      	adds	r1, r4, r5
 80153a0:	42a3      	cmp	r3, r4
 80153a2:	6025      	str	r5, [r4, #0]
 80153a4:	bf18      	it	ne
 80153a6:	6059      	strne	r1, [r3, #4]
 80153a8:	6863      	ldr	r3, [r4, #4]
 80153aa:	bf08      	it	eq
 80153ac:	f8c8 1000 	streq.w	r1, [r8]
 80153b0:	5162      	str	r2, [r4, r5]
 80153b2:	604b      	str	r3, [r1, #4]
 80153b4:	4630      	mov	r0, r6
 80153b6:	f000 f82f 	bl	8015418 <__malloc_unlock>
 80153ba:	f104 000b 	add.w	r0, r4, #11
 80153be:	1d23      	adds	r3, r4, #4
 80153c0:	f020 0007 	bic.w	r0, r0, #7
 80153c4:	1ac2      	subs	r2, r0, r3
 80153c6:	bf1c      	itt	ne
 80153c8:	1a1b      	subne	r3, r3, r0
 80153ca:	50a3      	strne	r3, [r4, r2]
 80153cc:	e7af      	b.n	801532e <_malloc_r+0x22>
 80153ce:	6862      	ldr	r2, [r4, #4]
 80153d0:	42a3      	cmp	r3, r4
 80153d2:	bf0c      	ite	eq
 80153d4:	f8c8 2000 	streq.w	r2, [r8]
 80153d8:	605a      	strne	r2, [r3, #4]
 80153da:	e7eb      	b.n	80153b4 <_malloc_r+0xa8>
 80153dc:	4623      	mov	r3, r4
 80153de:	6864      	ldr	r4, [r4, #4]
 80153e0:	e7ae      	b.n	8015340 <_malloc_r+0x34>
 80153e2:	463c      	mov	r4, r7
 80153e4:	687f      	ldr	r7, [r7, #4]
 80153e6:	e7b6      	b.n	8015356 <_malloc_r+0x4a>
 80153e8:	461a      	mov	r2, r3
 80153ea:	685b      	ldr	r3, [r3, #4]
 80153ec:	42a3      	cmp	r3, r4
 80153ee:	d1fb      	bne.n	80153e8 <_malloc_r+0xdc>
 80153f0:	2300      	movs	r3, #0
 80153f2:	6053      	str	r3, [r2, #4]
 80153f4:	e7de      	b.n	80153b4 <_malloc_r+0xa8>
 80153f6:	230c      	movs	r3, #12
 80153f8:	6033      	str	r3, [r6, #0]
 80153fa:	4630      	mov	r0, r6
 80153fc:	f000 f80c 	bl	8015418 <__malloc_unlock>
 8015400:	e794      	b.n	801532c <_malloc_r+0x20>
 8015402:	6005      	str	r5, [r0, #0]
 8015404:	e7d6      	b.n	80153b4 <_malloc_r+0xa8>
 8015406:	bf00      	nop
 8015408:	20005a58 	.word	0x20005a58

0801540c <__malloc_lock>:
 801540c:	4801      	ldr	r0, [pc, #4]	@ (8015414 <__malloc_lock+0x8>)
 801540e:	f000 b94f 	b.w	80156b0 <__retarget_lock_acquire_recursive>
 8015412:	bf00      	nop
 8015414:	20005b98 	.word	0x20005b98

08015418 <__malloc_unlock>:
 8015418:	4801      	ldr	r0, [pc, #4]	@ (8015420 <__malloc_unlock+0x8>)
 801541a:	f000 b94a 	b.w	80156b2 <__retarget_lock_release_recursive>
 801541e:	bf00      	nop
 8015420:	20005b98 	.word	0x20005b98

08015424 <_strtol_l.isra.0>:
 8015424:	2b24      	cmp	r3, #36	@ 0x24
 8015426:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801542a:	4686      	mov	lr, r0
 801542c:	4690      	mov	r8, r2
 801542e:	d801      	bhi.n	8015434 <_strtol_l.isra.0+0x10>
 8015430:	2b01      	cmp	r3, #1
 8015432:	d106      	bne.n	8015442 <_strtol_l.isra.0+0x1e>
 8015434:	f000 f912 	bl	801565c <__errno>
 8015438:	2316      	movs	r3, #22
 801543a:	6003      	str	r3, [r0, #0]
 801543c:	2000      	movs	r0, #0
 801543e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015442:	4834      	ldr	r0, [pc, #208]	@ (8015514 <_strtol_l.isra.0+0xf0>)
 8015444:	460d      	mov	r5, r1
 8015446:	462a      	mov	r2, r5
 8015448:	f815 4b01 	ldrb.w	r4, [r5], #1
 801544c:	5d06      	ldrb	r6, [r0, r4]
 801544e:	f016 0608 	ands.w	r6, r6, #8
 8015452:	d1f8      	bne.n	8015446 <_strtol_l.isra.0+0x22>
 8015454:	2c2d      	cmp	r4, #45	@ 0x2d
 8015456:	d110      	bne.n	801547a <_strtol_l.isra.0+0x56>
 8015458:	782c      	ldrb	r4, [r5, #0]
 801545a:	2601      	movs	r6, #1
 801545c:	1c95      	adds	r5, r2, #2
 801545e:	f033 0210 	bics.w	r2, r3, #16
 8015462:	d115      	bne.n	8015490 <_strtol_l.isra.0+0x6c>
 8015464:	2c30      	cmp	r4, #48	@ 0x30
 8015466:	d10d      	bne.n	8015484 <_strtol_l.isra.0+0x60>
 8015468:	782a      	ldrb	r2, [r5, #0]
 801546a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801546e:	2a58      	cmp	r2, #88	@ 0x58
 8015470:	d108      	bne.n	8015484 <_strtol_l.isra.0+0x60>
 8015472:	786c      	ldrb	r4, [r5, #1]
 8015474:	3502      	adds	r5, #2
 8015476:	2310      	movs	r3, #16
 8015478:	e00a      	b.n	8015490 <_strtol_l.isra.0+0x6c>
 801547a:	2c2b      	cmp	r4, #43	@ 0x2b
 801547c:	bf04      	itt	eq
 801547e:	782c      	ldrbeq	r4, [r5, #0]
 8015480:	1c95      	addeq	r5, r2, #2
 8015482:	e7ec      	b.n	801545e <_strtol_l.isra.0+0x3a>
 8015484:	2b00      	cmp	r3, #0
 8015486:	d1f6      	bne.n	8015476 <_strtol_l.isra.0+0x52>
 8015488:	2c30      	cmp	r4, #48	@ 0x30
 801548a:	bf14      	ite	ne
 801548c:	230a      	movne	r3, #10
 801548e:	2308      	moveq	r3, #8
 8015490:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8015494:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015498:	2200      	movs	r2, #0
 801549a:	fbbc f9f3 	udiv	r9, ip, r3
 801549e:	4610      	mov	r0, r2
 80154a0:	fb03 ca19 	mls	sl, r3, r9, ip
 80154a4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80154a8:	2f09      	cmp	r7, #9
 80154aa:	d80f      	bhi.n	80154cc <_strtol_l.isra.0+0xa8>
 80154ac:	463c      	mov	r4, r7
 80154ae:	42a3      	cmp	r3, r4
 80154b0:	dd1b      	ble.n	80154ea <_strtol_l.isra.0+0xc6>
 80154b2:	1c57      	adds	r7, r2, #1
 80154b4:	d007      	beq.n	80154c6 <_strtol_l.isra.0+0xa2>
 80154b6:	4581      	cmp	r9, r0
 80154b8:	d314      	bcc.n	80154e4 <_strtol_l.isra.0+0xc0>
 80154ba:	d101      	bne.n	80154c0 <_strtol_l.isra.0+0x9c>
 80154bc:	45a2      	cmp	sl, r4
 80154be:	db11      	blt.n	80154e4 <_strtol_l.isra.0+0xc0>
 80154c0:	fb00 4003 	mla	r0, r0, r3, r4
 80154c4:	2201      	movs	r2, #1
 80154c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80154ca:	e7eb      	b.n	80154a4 <_strtol_l.isra.0+0x80>
 80154cc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80154d0:	2f19      	cmp	r7, #25
 80154d2:	d801      	bhi.n	80154d8 <_strtol_l.isra.0+0xb4>
 80154d4:	3c37      	subs	r4, #55	@ 0x37
 80154d6:	e7ea      	b.n	80154ae <_strtol_l.isra.0+0x8a>
 80154d8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80154dc:	2f19      	cmp	r7, #25
 80154de:	d804      	bhi.n	80154ea <_strtol_l.isra.0+0xc6>
 80154e0:	3c57      	subs	r4, #87	@ 0x57
 80154e2:	e7e4      	b.n	80154ae <_strtol_l.isra.0+0x8a>
 80154e4:	f04f 32ff 	mov.w	r2, #4294967295
 80154e8:	e7ed      	b.n	80154c6 <_strtol_l.isra.0+0xa2>
 80154ea:	1c53      	adds	r3, r2, #1
 80154ec:	d108      	bne.n	8015500 <_strtol_l.isra.0+0xdc>
 80154ee:	2322      	movs	r3, #34	@ 0x22
 80154f0:	f8ce 3000 	str.w	r3, [lr]
 80154f4:	4660      	mov	r0, ip
 80154f6:	f1b8 0f00 	cmp.w	r8, #0
 80154fa:	d0a0      	beq.n	801543e <_strtol_l.isra.0+0x1a>
 80154fc:	1e69      	subs	r1, r5, #1
 80154fe:	e006      	b.n	801550e <_strtol_l.isra.0+0xea>
 8015500:	b106      	cbz	r6, 8015504 <_strtol_l.isra.0+0xe0>
 8015502:	4240      	negs	r0, r0
 8015504:	f1b8 0f00 	cmp.w	r8, #0
 8015508:	d099      	beq.n	801543e <_strtol_l.isra.0+0x1a>
 801550a:	2a00      	cmp	r2, #0
 801550c:	d1f6      	bne.n	80154fc <_strtol_l.isra.0+0xd8>
 801550e:	f8c8 1000 	str.w	r1, [r8]
 8015512:	e794      	b.n	801543e <_strtol_l.isra.0+0x1a>
 8015514:	080161fd 	.word	0x080161fd

08015518 <strtol>:
 8015518:	4613      	mov	r3, r2
 801551a:	460a      	mov	r2, r1
 801551c:	4601      	mov	r1, r0
 801551e:	4802      	ldr	r0, [pc, #8]	@ (8015528 <strtol+0x10>)
 8015520:	6800      	ldr	r0, [r0, #0]
 8015522:	f7ff bf7f 	b.w	8015424 <_strtol_l.isra.0>
 8015526:	bf00      	nop
 8015528:	20000174 	.word	0x20000174

0801552c <siprintf>:
 801552c:	b40e      	push	{r1, r2, r3}
 801552e:	b510      	push	{r4, lr}
 8015530:	b09d      	sub	sp, #116	@ 0x74
 8015532:	ab1f      	add	r3, sp, #124	@ 0x7c
 8015534:	9002      	str	r0, [sp, #8]
 8015536:	9006      	str	r0, [sp, #24]
 8015538:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801553c:	480a      	ldr	r0, [pc, #40]	@ (8015568 <siprintf+0x3c>)
 801553e:	9107      	str	r1, [sp, #28]
 8015540:	9104      	str	r1, [sp, #16]
 8015542:	490a      	ldr	r1, [pc, #40]	@ (801556c <siprintf+0x40>)
 8015544:	f853 2b04 	ldr.w	r2, [r3], #4
 8015548:	9105      	str	r1, [sp, #20]
 801554a:	2400      	movs	r4, #0
 801554c:	a902      	add	r1, sp, #8
 801554e:	6800      	ldr	r0, [r0, #0]
 8015550:	9301      	str	r3, [sp, #4]
 8015552:	941b      	str	r4, [sp, #108]	@ 0x6c
 8015554:	f000 f962 	bl	801581c <_svfiprintf_r>
 8015558:	9b02      	ldr	r3, [sp, #8]
 801555a:	701c      	strb	r4, [r3, #0]
 801555c:	b01d      	add	sp, #116	@ 0x74
 801555e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015562:	b003      	add	sp, #12
 8015564:	4770      	bx	lr
 8015566:	bf00      	nop
 8015568:	20000174 	.word	0x20000174
 801556c:	ffff0208 	.word	0xffff0208

08015570 <memset>:
 8015570:	4402      	add	r2, r0
 8015572:	4603      	mov	r3, r0
 8015574:	4293      	cmp	r3, r2
 8015576:	d100      	bne.n	801557a <memset+0xa>
 8015578:	4770      	bx	lr
 801557a:	f803 1b01 	strb.w	r1, [r3], #1
 801557e:	e7f9      	b.n	8015574 <memset+0x4>

08015580 <_reclaim_reent>:
 8015580:	4b2d      	ldr	r3, [pc, #180]	@ (8015638 <_reclaim_reent+0xb8>)
 8015582:	681b      	ldr	r3, [r3, #0]
 8015584:	4283      	cmp	r3, r0
 8015586:	b570      	push	{r4, r5, r6, lr}
 8015588:	4604      	mov	r4, r0
 801558a:	d053      	beq.n	8015634 <_reclaim_reent+0xb4>
 801558c:	69c3      	ldr	r3, [r0, #28]
 801558e:	b31b      	cbz	r3, 80155d8 <_reclaim_reent+0x58>
 8015590:	68db      	ldr	r3, [r3, #12]
 8015592:	b163      	cbz	r3, 80155ae <_reclaim_reent+0x2e>
 8015594:	2500      	movs	r5, #0
 8015596:	69e3      	ldr	r3, [r4, #28]
 8015598:	68db      	ldr	r3, [r3, #12]
 801559a:	5959      	ldr	r1, [r3, r5]
 801559c:	b9b1      	cbnz	r1, 80155cc <_reclaim_reent+0x4c>
 801559e:	3504      	adds	r5, #4
 80155a0:	2d80      	cmp	r5, #128	@ 0x80
 80155a2:	d1f8      	bne.n	8015596 <_reclaim_reent+0x16>
 80155a4:	69e3      	ldr	r3, [r4, #28]
 80155a6:	4620      	mov	r0, r4
 80155a8:	68d9      	ldr	r1, [r3, #12]
 80155aa:	f000 f891 	bl	80156d0 <_free_r>
 80155ae:	69e3      	ldr	r3, [r4, #28]
 80155b0:	6819      	ldr	r1, [r3, #0]
 80155b2:	b111      	cbz	r1, 80155ba <_reclaim_reent+0x3a>
 80155b4:	4620      	mov	r0, r4
 80155b6:	f000 f88b 	bl	80156d0 <_free_r>
 80155ba:	69e3      	ldr	r3, [r4, #28]
 80155bc:	689d      	ldr	r5, [r3, #8]
 80155be:	b15d      	cbz	r5, 80155d8 <_reclaim_reent+0x58>
 80155c0:	4629      	mov	r1, r5
 80155c2:	4620      	mov	r0, r4
 80155c4:	682d      	ldr	r5, [r5, #0]
 80155c6:	f000 f883 	bl	80156d0 <_free_r>
 80155ca:	e7f8      	b.n	80155be <_reclaim_reent+0x3e>
 80155cc:	680e      	ldr	r6, [r1, #0]
 80155ce:	4620      	mov	r0, r4
 80155d0:	f000 f87e 	bl	80156d0 <_free_r>
 80155d4:	4631      	mov	r1, r6
 80155d6:	e7e1      	b.n	801559c <_reclaim_reent+0x1c>
 80155d8:	6961      	ldr	r1, [r4, #20]
 80155da:	b111      	cbz	r1, 80155e2 <_reclaim_reent+0x62>
 80155dc:	4620      	mov	r0, r4
 80155de:	f000 f877 	bl	80156d0 <_free_r>
 80155e2:	69e1      	ldr	r1, [r4, #28]
 80155e4:	b111      	cbz	r1, 80155ec <_reclaim_reent+0x6c>
 80155e6:	4620      	mov	r0, r4
 80155e8:	f000 f872 	bl	80156d0 <_free_r>
 80155ec:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80155ee:	b111      	cbz	r1, 80155f6 <_reclaim_reent+0x76>
 80155f0:	4620      	mov	r0, r4
 80155f2:	f000 f86d 	bl	80156d0 <_free_r>
 80155f6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80155f8:	b111      	cbz	r1, 8015600 <_reclaim_reent+0x80>
 80155fa:	4620      	mov	r0, r4
 80155fc:	f000 f868 	bl	80156d0 <_free_r>
 8015600:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8015602:	b111      	cbz	r1, 801560a <_reclaim_reent+0x8a>
 8015604:	4620      	mov	r0, r4
 8015606:	f000 f863 	bl	80156d0 <_free_r>
 801560a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801560c:	b111      	cbz	r1, 8015614 <_reclaim_reent+0x94>
 801560e:	4620      	mov	r0, r4
 8015610:	f000 f85e 	bl	80156d0 <_free_r>
 8015614:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8015616:	b111      	cbz	r1, 801561e <_reclaim_reent+0x9e>
 8015618:	4620      	mov	r0, r4
 801561a:	f000 f859 	bl	80156d0 <_free_r>
 801561e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8015620:	b111      	cbz	r1, 8015628 <_reclaim_reent+0xa8>
 8015622:	4620      	mov	r0, r4
 8015624:	f000 f854 	bl	80156d0 <_free_r>
 8015628:	6a23      	ldr	r3, [r4, #32]
 801562a:	b11b      	cbz	r3, 8015634 <_reclaim_reent+0xb4>
 801562c:	4620      	mov	r0, r4
 801562e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015632:	4718      	bx	r3
 8015634:	bd70      	pop	{r4, r5, r6, pc}
 8015636:	bf00      	nop
 8015638:	20000174 	.word	0x20000174

0801563c <_sbrk_r>:
 801563c:	b538      	push	{r3, r4, r5, lr}
 801563e:	4d06      	ldr	r5, [pc, #24]	@ (8015658 <_sbrk_r+0x1c>)
 8015640:	2300      	movs	r3, #0
 8015642:	4604      	mov	r4, r0
 8015644:	4608      	mov	r0, r1
 8015646:	602b      	str	r3, [r5, #0]
 8015648:	f7f6 ff86 	bl	800c558 <_sbrk>
 801564c:	1c43      	adds	r3, r0, #1
 801564e:	d102      	bne.n	8015656 <_sbrk_r+0x1a>
 8015650:	682b      	ldr	r3, [r5, #0]
 8015652:	b103      	cbz	r3, 8015656 <_sbrk_r+0x1a>
 8015654:	6023      	str	r3, [r4, #0]
 8015656:	bd38      	pop	{r3, r4, r5, pc}
 8015658:	20005b94 	.word	0x20005b94

0801565c <__errno>:
 801565c:	4b01      	ldr	r3, [pc, #4]	@ (8015664 <__errno+0x8>)
 801565e:	6818      	ldr	r0, [r3, #0]
 8015660:	4770      	bx	lr
 8015662:	bf00      	nop
 8015664:	20000174 	.word	0x20000174

08015668 <__libc_init_array>:
 8015668:	b570      	push	{r4, r5, r6, lr}
 801566a:	4d0d      	ldr	r5, [pc, #52]	@ (80156a0 <__libc_init_array+0x38>)
 801566c:	4c0d      	ldr	r4, [pc, #52]	@ (80156a4 <__libc_init_array+0x3c>)
 801566e:	1b64      	subs	r4, r4, r5
 8015670:	10a4      	asrs	r4, r4, #2
 8015672:	2600      	movs	r6, #0
 8015674:	42a6      	cmp	r6, r4
 8015676:	d109      	bne.n	801568c <__libc_init_array+0x24>
 8015678:	4d0b      	ldr	r5, [pc, #44]	@ (80156a8 <__libc_init_array+0x40>)
 801567a:	4c0c      	ldr	r4, [pc, #48]	@ (80156ac <__libc_init_array+0x44>)
 801567c:	f000 fca8 	bl	8015fd0 <_init>
 8015680:	1b64      	subs	r4, r4, r5
 8015682:	10a4      	asrs	r4, r4, #2
 8015684:	2600      	movs	r6, #0
 8015686:	42a6      	cmp	r6, r4
 8015688:	d105      	bne.n	8015696 <__libc_init_array+0x2e>
 801568a:	bd70      	pop	{r4, r5, r6, pc}
 801568c:	f855 3b04 	ldr.w	r3, [r5], #4
 8015690:	4798      	blx	r3
 8015692:	3601      	adds	r6, #1
 8015694:	e7ee      	b.n	8015674 <__libc_init_array+0xc>
 8015696:	f855 3b04 	ldr.w	r3, [r5], #4
 801569a:	4798      	blx	r3
 801569c:	3601      	adds	r6, #1
 801569e:	e7f2      	b.n	8015686 <__libc_init_array+0x1e>
 80156a0:	08016348 	.word	0x08016348
 80156a4:	08016348 	.word	0x08016348
 80156a8:	08016348 	.word	0x08016348
 80156ac:	0801634c 	.word	0x0801634c

080156b0 <__retarget_lock_acquire_recursive>:
 80156b0:	4770      	bx	lr

080156b2 <__retarget_lock_release_recursive>:
 80156b2:	4770      	bx	lr

080156b4 <memcpy>:
 80156b4:	440a      	add	r2, r1
 80156b6:	4291      	cmp	r1, r2
 80156b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80156bc:	d100      	bne.n	80156c0 <memcpy+0xc>
 80156be:	4770      	bx	lr
 80156c0:	b510      	push	{r4, lr}
 80156c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80156c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80156ca:	4291      	cmp	r1, r2
 80156cc:	d1f9      	bne.n	80156c2 <memcpy+0xe>
 80156ce:	bd10      	pop	{r4, pc}

080156d0 <_free_r>:
 80156d0:	b538      	push	{r3, r4, r5, lr}
 80156d2:	4605      	mov	r5, r0
 80156d4:	2900      	cmp	r1, #0
 80156d6:	d041      	beq.n	801575c <_free_r+0x8c>
 80156d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80156dc:	1f0c      	subs	r4, r1, #4
 80156de:	2b00      	cmp	r3, #0
 80156e0:	bfb8      	it	lt
 80156e2:	18e4      	addlt	r4, r4, r3
 80156e4:	f7ff fe92 	bl	801540c <__malloc_lock>
 80156e8:	4a1d      	ldr	r2, [pc, #116]	@ (8015760 <_free_r+0x90>)
 80156ea:	6813      	ldr	r3, [r2, #0]
 80156ec:	b933      	cbnz	r3, 80156fc <_free_r+0x2c>
 80156ee:	6063      	str	r3, [r4, #4]
 80156f0:	6014      	str	r4, [r2, #0]
 80156f2:	4628      	mov	r0, r5
 80156f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80156f8:	f7ff be8e 	b.w	8015418 <__malloc_unlock>
 80156fc:	42a3      	cmp	r3, r4
 80156fe:	d908      	bls.n	8015712 <_free_r+0x42>
 8015700:	6820      	ldr	r0, [r4, #0]
 8015702:	1821      	adds	r1, r4, r0
 8015704:	428b      	cmp	r3, r1
 8015706:	bf01      	itttt	eq
 8015708:	6819      	ldreq	r1, [r3, #0]
 801570a:	685b      	ldreq	r3, [r3, #4]
 801570c:	1809      	addeq	r1, r1, r0
 801570e:	6021      	streq	r1, [r4, #0]
 8015710:	e7ed      	b.n	80156ee <_free_r+0x1e>
 8015712:	461a      	mov	r2, r3
 8015714:	685b      	ldr	r3, [r3, #4]
 8015716:	b10b      	cbz	r3, 801571c <_free_r+0x4c>
 8015718:	42a3      	cmp	r3, r4
 801571a:	d9fa      	bls.n	8015712 <_free_r+0x42>
 801571c:	6811      	ldr	r1, [r2, #0]
 801571e:	1850      	adds	r0, r2, r1
 8015720:	42a0      	cmp	r0, r4
 8015722:	d10b      	bne.n	801573c <_free_r+0x6c>
 8015724:	6820      	ldr	r0, [r4, #0]
 8015726:	4401      	add	r1, r0
 8015728:	1850      	adds	r0, r2, r1
 801572a:	4283      	cmp	r3, r0
 801572c:	6011      	str	r1, [r2, #0]
 801572e:	d1e0      	bne.n	80156f2 <_free_r+0x22>
 8015730:	6818      	ldr	r0, [r3, #0]
 8015732:	685b      	ldr	r3, [r3, #4]
 8015734:	6053      	str	r3, [r2, #4]
 8015736:	4408      	add	r0, r1
 8015738:	6010      	str	r0, [r2, #0]
 801573a:	e7da      	b.n	80156f2 <_free_r+0x22>
 801573c:	d902      	bls.n	8015744 <_free_r+0x74>
 801573e:	230c      	movs	r3, #12
 8015740:	602b      	str	r3, [r5, #0]
 8015742:	e7d6      	b.n	80156f2 <_free_r+0x22>
 8015744:	6820      	ldr	r0, [r4, #0]
 8015746:	1821      	adds	r1, r4, r0
 8015748:	428b      	cmp	r3, r1
 801574a:	bf04      	itt	eq
 801574c:	6819      	ldreq	r1, [r3, #0]
 801574e:	685b      	ldreq	r3, [r3, #4]
 8015750:	6063      	str	r3, [r4, #4]
 8015752:	bf04      	itt	eq
 8015754:	1809      	addeq	r1, r1, r0
 8015756:	6021      	streq	r1, [r4, #0]
 8015758:	6054      	str	r4, [r2, #4]
 801575a:	e7ca      	b.n	80156f2 <_free_r+0x22>
 801575c:	bd38      	pop	{r3, r4, r5, pc}
 801575e:	bf00      	nop
 8015760:	20005a58 	.word	0x20005a58

08015764 <__ssputs_r>:
 8015764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015768:	688e      	ldr	r6, [r1, #8]
 801576a:	461f      	mov	r7, r3
 801576c:	42be      	cmp	r6, r7
 801576e:	680b      	ldr	r3, [r1, #0]
 8015770:	4682      	mov	sl, r0
 8015772:	460c      	mov	r4, r1
 8015774:	4690      	mov	r8, r2
 8015776:	d82d      	bhi.n	80157d4 <__ssputs_r+0x70>
 8015778:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801577c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015780:	d026      	beq.n	80157d0 <__ssputs_r+0x6c>
 8015782:	6965      	ldr	r5, [r4, #20]
 8015784:	6909      	ldr	r1, [r1, #16]
 8015786:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801578a:	eba3 0901 	sub.w	r9, r3, r1
 801578e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015792:	1c7b      	adds	r3, r7, #1
 8015794:	444b      	add	r3, r9
 8015796:	106d      	asrs	r5, r5, #1
 8015798:	429d      	cmp	r5, r3
 801579a:	bf38      	it	cc
 801579c:	461d      	movcc	r5, r3
 801579e:	0553      	lsls	r3, r2, #21
 80157a0:	d527      	bpl.n	80157f2 <__ssputs_r+0x8e>
 80157a2:	4629      	mov	r1, r5
 80157a4:	f7ff fdb2 	bl	801530c <_malloc_r>
 80157a8:	4606      	mov	r6, r0
 80157aa:	b360      	cbz	r0, 8015806 <__ssputs_r+0xa2>
 80157ac:	6921      	ldr	r1, [r4, #16]
 80157ae:	464a      	mov	r2, r9
 80157b0:	f7ff ff80 	bl	80156b4 <memcpy>
 80157b4:	89a3      	ldrh	r3, [r4, #12]
 80157b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80157ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80157be:	81a3      	strh	r3, [r4, #12]
 80157c0:	6126      	str	r6, [r4, #16]
 80157c2:	6165      	str	r5, [r4, #20]
 80157c4:	444e      	add	r6, r9
 80157c6:	eba5 0509 	sub.w	r5, r5, r9
 80157ca:	6026      	str	r6, [r4, #0]
 80157cc:	60a5      	str	r5, [r4, #8]
 80157ce:	463e      	mov	r6, r7
 80157d0:	42be      	cmp	r6, r7
 80157d2:	d900      	bls.n	80157d6 <__ssputs_r+0x72>
 80157d4:	463e      	mov	r6, r7
 80157d6:	6820      	ldr	r0, [r4, #0]
 80157d8:	4632      	mov	r2, r6
 80157da:	4641      	mov	r1, r8
 80157dc:	f000 faa6 	bl	8015d2c <memmove>
 80157e0:	68a3      	ldr	r3, [r4, #8]
 80157e2:	1b9b      	subs	r3, r3, r6
 80157e4:	60a3      	str	r3, [r4, #8]
 80157e6:	6823      	ldr	r3, [r4, #0]
 80157e8:	4433      	add	r3, r6
 80157ea:	6023      	str	r3, [r4, #0]
 80157ec:	2000      	movs	r0, #0
 80157ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80157f2:	462a      	mov	r2, r5
 80157f4:	f000 fab4 	bl	8015d60 <_realloc_r>
 80157f8:	4606      	mov	r6, r0
 80157fa:	2800      	cmp	r0, #0
 80157fc:	d1e0      	bne.n	80157c0 <__ssputs_r+0x5c>
 80157fe:	6921      	ldr	r1, [r4, #16]
 8015800:	4650      	mov	r0, sl
 8015802:	f7ff ff65 	bl	80156d0 <_free_r>
 8015806:	230c      	movs	r3, #12
 8015808:	f8ca 3000 	str.w	r3, [sl]
 801580c:	89a3      	ldrh	r3, [r4, #12]
 801580e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015812:	81a3      	strh	r3, [r4, #12]
 8015814:	f04f 30ff 	mov.w	r0, #4294967295
 8015818:	e7e9      	b.n	80157ee <__ssputs_r+0x8a>
	...

0801581c <_svfiprintf_r>:
 801581c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015820:	4698      	mov	r8, r3
 8015822:	898b      	ldrh	r3, [r1, #12]
 8015824:	061b      	lsls	r3, r3, #24
 8015826:	b09d      	sub	sp, #116	@ 0x74
 8015828:	4607      	mov	r7, r0
 801582a:	460d      	mov	r5, r1
 801582c:	4614      	mov	r4, r2
 801582e:	d510      	bpl.n	8015852 <_svfiprintf_r+0x36>
 8015830:	690b      	ldr	r3, [r1, #16]
 8015832:	b973      	cbnz	r3, 8015852 <_svfiprintf_r+0x36>
 8015834:	2140      	movs	r1, #64	@ 0x40
 8015836:	f7ff fd69 	bl	801530c <_malloc_r>
 801583a:	6028      	str	r0, [r5, #0]
 801583c:	6128      	str	r0, [r5, #16]
 801583e:	b930      	cbnz	r0, 801584e <_svfiprintf_r+0x32>
 8015840:	230c      	movs	r3, #12
 8015842:	603b      	str	r3, [r7, #0]
 8015844:	f04f 30ff 	mov.w	r0, #4294967295
 8015848:	b01d      	add	sp, #116	@ 0x74
 801584a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801584e:	2340      	movs	r3, #64	@ 0x40
 8015850:	616b      	str	r3, [r5, #20]
 8015852:	2300      	movs	r3, #0
 8015854:	9309      	str	r3, [sp, #36]	@ 0x24
 8015856:	2320      	movs	r3, #32
 8015858:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801585c:	f8cd 800c 	str.w	r8, [sp, #12]
 8015860:	2330      	movs	r3, #48	@ 0x30
 8015862:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8015a00 <_svfiprintf_r+0x1e4>
 8015866:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801586a:	f04f 0901 	mov.w	r9, #1
 801586e:	4623      	mov	r3, r4
 8015870:	469a      	mov	sl, r3
 8015872:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015876:	b10a      	cbz	r2, 801587c <_svfiprintf_r+0x60>
 8015878:	2a25      	cmp	r2, #37	@ 0x25
 801587a:	d1f9      	bne.n	8015870 <_svfiprintf_r+0x54>
 801587c:	ebba 0b04 	subs.w	fp, sl, r4
 8015880:	d00b      	beq.n	801589a <_svfiprintf_r+0x7e>
 8015882:	465b      	mov	r3, fp
 8015884:	4622      	mov	r2, r4
 8015886:	4629      	mov	r1, r5
 8015888:	4638      	mov	r0, r7
 801588a:	f7ff ff6b 	bl	8015764 <__ssputs_r>
 801588e:	3001      	adds	r0, #1
 8015890:	f000 80a7 	beq.w	80159e2 <_svfiprintf_r+0x1c6>
 8015894:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015896:	445a      	add	r2, fp
 8015898:	9209      	str	r2, [sp, #36]	@ 0x24
 801589a:	f89a 3000 	ldrb.w	r3, [sl]
 801589e:	2b00      	cmp	r3, #0
 80158a0:	f000 809f 	beq.w	80159e2 <_svfiprintf_r+0x1c6>
 80158a4:	2300      	movs	r3, #0
 80158a6:	f04f 32ff 	mov.w	r2, #4294967295
 80158aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80158ae:	f10a 0a01 	add.w	sl, sl, #1
 80158b2:	9304      	str	r3, [sp, #16]
 80158b4:	9307      	str	r3, [sp, #28]
 80158b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80158ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80158bc:	4654      	mov	r4, sl
 80158be:	2205      	movs	r2, #5
 80158c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80158c4:	484e      	ldr	r0, [pc, #312]	@ (8015a00 <_svfiprintf_r+0x1e4>)
 80158c6:	f7ea fc83 	bl	80001d0 <memchr>
 80158ca:	9a04      	ldr	r2, [sp, #16]
 80158cc:	b9d8      	cbnz	r0, 8015906 <_svfiprintf_r+0xea>
 80158ce:	06d0      	lsls	r0, r2, #27
 80158d0:	bf44      	itt	mi
 80158d2:	2320      	movmi	r3, #32
 80158d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80158d8:	0711      	lsls	r1, r2, #28
 80158da:	bf44      	itt	mi
 80158dc:	232b      	movmi	r3, #43	@ 0x2b
 80158de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80158e2:	f89a 3000 	ldrb.w	r3, [sl]
 80158e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80158e8:	d015      	beq.n	8015916 <_svfiprintf_r+0xfa>
 80158ea:	9a07      	ldr	r2, [sp, #28]
 80158ec:	4654      	mov	r4, sl
 80158ee:	2000      	movs	r0, #0
 80158f0:	f04f 0c0a 	mov.w	ip, #10
 80158f4:	4621      	mov	r1, r4
 80158f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80158fa:	3b30      	subs	r3, #48	@ 0x30
 80158fc:	2b09      	cmp	r3, #9
 80158fe:	d94b      	bls.n	8015998 <_svfiprintf_r+0x17c>
 8015900:	b1b0      	cbz	r0, 8015930 <_svfiprintf_r+0x114>
 8015902:	9207      	str	r2, [sp, #28]
 8015904:	e014      	b.n	8015930 <_svfiprintf_r+0x114>
 8015906:	eba0 0308 	sub.w	r3, r0, r8
 801590a:	fa09 f303 	lsl.w	r3, r9, r3
 801590e:	4313      	orrs	r3, r2
 8015910:	9304      	str	r3, [sp, #16]
 8015912:	46a2      	mov	sl, r4
 8015914:	e7d2      	b.n	80158bc <_svfiprintf_r+0xa0>
 8015916:	9b03      	ldr	r3, [sp, #12]
 8015918:	1d19      	adds	r1, r3, #4
 801591a:	681b      	ldr	r3, [r3, #0]
 801591c:	9103      	str	r1, [sp, #12]
 801591e:	2b00      	cmp	r3, #0
 8015920:	bfbb      	ittet	lt
 8015922:	425b      	neglt	r3, r3
 8015924:	f042 0202 	orrlt.w	r2, r2, #2
 8015928:	9307      	strge	r3, [sp, #28]
 801592a:	9307      	strlt	r3, [sp, #28]
 801592c:	bfb8      	it	lt
 801592e:	9204      	strlt	r2, [sp, #16]
 8015930:	7823      	ldrb	r3, [r4, #0]
 8015932:	2b2e      	cmp	r3, #46	@ 0x2e
 8015934:	d10a      	bne.n	801594c <_svfiprintf_r+0x130>
 8015936:	7863      	ldrb	r3, [r4, #1]
 8015938:	2b2a      	cmp	r3, #42	@ 0x2a
 801593a:	d132      	bne.n	80159a2 <_svfiprintf_r+0x186>
 801593c:	9b03      	ldr	r3, [sp, #12]
 801593e:	1d1a      	adds	r2, r3, #4
 8015940:	681b      	ldr	r3, [r3, #0]
 8015942:	9203      	str	r2, [sp, #12]
 8015944:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015948:	3402      	adds	r4, #2
 801594a:	9305      	str	r3, [sp, #20]
 801594c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8015a10 <_svfiprintf_r+0x1f4>
 8015950:	7821      	ldrb	r1, [r4, #0]
 8015952:	2203      	movs	r2, #3
 8015954:	4650      	mov	r0, sl
 8015956:	f7ea fc3b 	bl	80001d0 <memchr>
 801595a:	b138      	cbz	r0, 801596c <_svfiprintf_r+0x150>
 801595c:	9b04      	ldr	r3, [sp, #16]
 801595e:	eba0 000a 	sub.w	r0, r0, sl
 8015962:	2240      	movs	r2, #64	@ 0x40
 8015964:	4082      	lsls	r2, r0
 8015966:	4313      	orrs	r3, r2
 8015968:	3401      	adds	r4, #1
 801596a:	9304      	str	r3, [sp, #16]
 801596c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015970:	4824      	ldr	r0, [pc, #144]	@ (8015a04 <_svfiprintf_r+0x1e8>)
 8015972:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015976:	2206      	movs	r2, #6
 8015978:	f7ea fc2a 	bl	80001d0 <memchr>
 801597c:	2800      	cmp	r0, #0
 801597e:	d036      	beq.n	80159ee <_svfiprintf_r+0x1d2>
 8015980:	4b21      	ldr	r3, [pc, #132]	@ (8015a08 <_svfiprintf_r+0x1ec>)
 8015982:	bb1b      	cbnz	r3, 80159cc <_svfiprintf_r+0x1b0>
 8015984:	9b03      	ldr	r3, [sp, #12]
 8015986:	3307      	adds	r3, #7
 8015988:	f023 0307 	bic.w	r3, r3, #7
 801598c:	3308      	adds	r3, #8
 801598e:	9303      	str	r3, [sp, #12]
 8015990:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015992:	4433      	add	r3, r6
 8015994:	9309      	str	r3, [sp, #36]	@ 0x24
 8015996:	e76a      	b.n	801586e <_svfiprintf_r+0x52>
 8015998:	fb0c 3202 	mla	r2, ip, r2, r3
 801599c:	460c      	mov	r4, r1
 801599e:	2001      	movs	r0, #1
 80159a0:	e7a8      	b.n	80158f4 <_svfiprintf_r+0xd8>
 80159a2:	2300      	movs	r3, #0
 80159a4:	3401      	adds	r4, #1
 80159a6:	9305      	str	r3, [sp, #20]
 80159a8:	4619      	mov	r1, r3
 80159aa:	f04f 0c0a 	mov.w	ip, #10
 80159ae:	4620      	mov	r0, r4
 80159b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80159b4:	3a30      	subs	r2, #48	@ 0x30
 80159b6:	2a09      	cmp	r2, #9
 80159b8:	d903      	bls.n	80159c2 <_svfiprintf_r+0x1a6>
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d0c6      	beq.n	801594c <_svfiprintf_r+0x130>
 80159be:	9105      	str	r1, [sp, #20]
 80159c0:	e7c4      	b.n	801594c <_svfiprintf_r+0x130>
 80159c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80159c6:	4604      	mov	r4, r0
 80159c8:	2301      	movs	r3, #1
 80159ca:	e7f0      	b.n	80159ae <_svfiprintf_r+0x192>
 80159cc:	ab03      	add	r3, sp, #12
 80159ce:	9300      	str	r3, [sp, #0]
 80159d0:	462a      	mov	r2, r5
 80159d2:	4b0e      	ldr	r3, [pc, #56]	@ (8015a0c <_svfiprintf_r+0x1f0>)
 80159d4:	a904      	add	r1, sp, #16
 80159d6:	4638      	mov	r0, r7
 80159d8:	f3af 8000 	nop.w
 80159dc:	1c42      	adds	r2, r0, #1
 80159de:	4606      	mov	r6, r0
 80159e0:	d1d6      	bne.n	8015990 <_svfiprintf_r+0x174>
 80159e2:	89ab      	ldrh	r3, [r5, #12]
 80159e4:	065b      	lsls	r3, r3, #25
 80159e6:	f53f af2d 	bmi.w	8015844 <_svfiprintf_r+0x28>
 80159ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80159ec:	e72c      	b.n	8015848 <_svfiprintf_r+0x2c>
 80159ee:	ab03      	add	r3, sp, #12
 80159f0:	9300      	str	r3, [sp, #0]
 80159f2:	462a      	mov	r2, r5
 80159f4:	4b05      	ldr	r3, [pc, #20]	@ (8015a0c <_svfiprintf_r+0x1f0>)
 80159f6:	a904      	add	r1, sp, #16
 80159f8:	4638      	mov	r0, r7
 80159fa:	f000 f879 	bl	8015af0 <_printf_i>
 80159fe:	e7ed      	b.n	80159dc <_svfiprintf_r+0x1c0>
 8015a00:	080162fd 	.word	0x080162fd
 8015a04:	08016307 	.word	0x08016307
 8015a08:	00000000 	.word	0x00000000
 8015a0c:	08015765 	.word	0x08015765
 8015a10:	08016303 	.word	0x08016303

08015a14 <_printf_common>:
 8015a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a18:	4616      	mov	r6, r2
 8015a1a:	4698      	mov	r8, r3
 8015a1c:	688a      	ldr	r2, [r1, #8]
 8015a1e:	690b      	ldr	r3, [r1, #16]
 8015a20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015a24:	4293      	cmp	r3, r2
 8015a26:	bfb8      	it	lt
 8015a28:	4613      	movlt	r3, r2
 8015a2a:	6033      	str	r3, [r6, #0]
 8015a2c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8015a30:	4607      	mov	r7, r0
 8015a32:	460c      	mov	r4, r1
 8015a34:	b10a      	cbz	r2, 8015a3a <_printf_common+0x26>
 8015a36:	3301      	adds	r3, #1
 8015a38:	6033      	str	r3, [r6, #0]
 8015a3a:	6823      	ldr	r3, [r4, #0]
 8015a3c:	0699      	lsls	r1, r3, #26
 8015a3e:	bf42      	ittt	mi
 8015a40:	6833      	ldrmi	r3, [r6, #0]
 8015a42:	3302      	addmi	r3, #2
 8015a44:	6033      	strmi	r3, [r6, #0]
 8015a46:	6825      	ldr	r5, [r4, #0]
 8015a48:	f015 0506 	ands.w	r5, r5, #6
 8015a4c:	d106      	bne.n	8015a5c <_printf_common+0x48>
 8015a4e:	f104 0a19 	add.w	sl, r4, #25
 8015a52:	68e3      	ldr	r3, [r4, #12]
 8015a54:	6832      	ldr	r2, [r6, #0]
 8015a56:	1a9b      	subs	r3, r3, r2
 8015a58:	42ab      	cmp	r3, r5
 8015a5a:	dc26      	bgt.n	8015aaa <_printf_common+0x96>
 8015a5c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015a60:	6822      	ldr	r2, [r4, #0]
 8015a62:	3b00      	subs	r3, #0
 8015a64:	bf18      	it	ne
 8015a66:	2301      	movne	r3, #1
 8015a68:	0692      	lsls	r2, r2, #26
 8015a6a:	d42b      	bmi.n	8015ac4 <_printf_common+0xb0>
 8015a6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015a70:	4641      	mov	r1, r8
 8015a72:	4638      	mov	r0, r7
 8015a74:	47c8      	blx	r9
 8015a76:	3001      	adds	r0, #1
 8015a78:	d01e      	beq.n	8015ab8 <_printf_common+0xa4>
 8015a7a:	6823      	ldr	r3, [r4, #0]
 8015a7c:	6922      	ldr	r2, [r4, #16]
 8015a7e:	f003 0306 	and.w	r3, r3, #6
 8015a82:	2b04      	cmp	r3, #4
 8015a84:	bf02      	ittt	eq
 8015a86:	68e5      	ldreq	r5, [r4, #12]
 8015a88:	6833      	ldreq	r3, [r6, #0]
 8015a8a:	1aed      	subeq	r5, r5, r3
 8015a8c:	68a3      	ldr	r3, [r4, #8]
 8015a8e:	bf0c      	ite	eq
 8015a90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015a94:	2500      	movne	r5, #0
 8015a96:	4293      	cmp	r3, r2
 8015a98:	bfc4      	itt	gt
 8015a9a:	1a9b      	subgt	r3, r3, r2
 8015a9c:	18ed      	addgt	r5, r5, r3
 8015a9e:	2600      	movs	r6, #0
 8015aa0:	341a      	adds	r4, #26
 8015aa2:	42b5      	cmp	r5, r6
 8015aa4:	d11a      	bne.n	8015adc <_printf_common+0xc8>
 8015aa6:	2000      	movs	r0, #0
 8015aa8:	e008      	b.n	8015abc <_printf_common+0xa8>
 8015aaa:	2301      	movs	r3, #1
 8015aac:	4652      	mov	r2, sl
 8015aae:	4641      	mov	r1, r8
 8015ab0:	4638      	mov	r0, r7
 8015ab2:	47c8      	blx	r9
 8015ab4:	3001      	adds	r0, #1
 8015ab6:	d103      	bne.n	8015ac0 <_printf_common+0xac>
 8015ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8015abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ac0:	3501      	adds	r5, #1
 8015ac2:	e7c6      	b.n	8015a52 <_printf_common+0x3e>
 8015ac4:	18e1      	adds	r1, r4, r3
 8015ac6:	1c5a      	adds	r2, r3, #1
 8015ac8:	2030      	movs	r0, #48	@ 0x30
 8015aca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8015ace:	4422      	add	r2, r4
 8015ad0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015ad4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8015ad8:	3302      	adds	r3, #2
 8015ada:	e7c7      	b.n	8015a6c <_printf_common+0x58>
 8015adc:	2301      	movs	r3, #1
 8015ade:	4622      	mov	r2, r4
 8015ae0:	4641      	mov	r1, r8
 8015ae2:	4638      	mov	r0, r7
 8015ae4:	47c8      	blx	r9
 8015ae6:	3001      	adds	r0, #1
 8015ae8:	d0e6      	beq.n	8015ab8 <_printf_common+0xa4>
 8015aea:	3601      	adds	r6, #1
 8015aec:	e7d9      	b.n	8015aa2 <_printf_common+0x8e>
	...

08015af0 <_printf_i>:
 8015af0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015af4:	7e0f      	ldrb	r7, [r1, #24]
 8015af6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015af8:	2f78      	cmp	r7, #120	@ 0x78
 8015afa:	4691      	mov	r9, r2
 8015afc:	4680      	mov	r8, r0
 8015afe:	460c      	mov	r4, r1
 8015b00:	469a      	mov	sl, r3
 8015b02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8015b06:	d807      	bhi.n	8015b18 <_printf_i+0x28>
 8015b08:	2f62      	cmp	r7, #98	@ 0x62
 8015b0a:	d80a      	bhi.n	8015b22 <_printf_i+0x32>
 8015b0c:	2f00      	cmp	r7, #0
 8015b0e:	f000 80d1 	beq.w	8015cb4 <_printf_i+0x1c4>
 8015b12:	2f58      	cmp	r7, #88	@ 0x58
 8015b14:	f000 80b8 	beq.w	8015c88 <_printf_i+0x198>
 8015b18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015b1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8015b20:	e03a      	b.n	8015b98 <_printf_i+0xa8>
 8015b22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8015b26:	2b15      	cmp	r3, #21
 8015b28:	d8f6      	bhi.n	8015b18 <_printf_i+0x28>
 8015b2a:	a101      	add	r1, pc, #4	@ (adr r1, 8015b30 <_printf_i+0x40>)
 8015b2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015b30:	08015b89 	.word	0x08015b89
 8015b34:	08015b9d 	.word	0x08015b9d
 8015b38:	08015b19 	.word	0x08015b19
 8015b3c:	08015b19 	.word	0x08015b19
 8015b40:	08015b19 	.word	0x08015b19
 8015b44:	08015b19 	.word	0x08015b19
 8015b48:	08015b9d 	.word	0x08015b9d
 8015b4c:	08015b19 	.word	0x08015b19
 8015b50:	08015b19 	.word	0x08015b19
 8015b54:	08015b19 	.word	0x08015b19
 8015b58:	08015b19 	.word	0x08015b19
 8015b5c:	08015c9b 	.word	0x08015c9b
 8015b60:	08015bc7 	.word	0x08015bc7
 8015b64:	08015c55 	.word	0x08015c55
 8015b68:	08015b19 	.word	0x08015b19
 8015b6c:	08015b19 	.word	0x08015b19
 8015b70:	08015cbd 	.word	0x08015cbd
 8015b74:	08015b19 	.word	0x08015b19
 8015b78:	08015bc7 	.word	0x08015bc7
 8015b7c:	08015b19 	.word	0x08015b19
 8015b80:	08015b19 	.word	0x08015b19
 8015b84:	08015c5d 	.word	0x08015c5d
 8015b88:	6833      	ldr	r3, [r6, #0]
 8015b8a:	1d1a      	adds	r2, r3, #4
 8015b8c:	681b      	ldr	r3, [r3, #0]
 8015b8e:	6032      	str	r2, [r6, #0]
 8015b90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015b94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015b98:	2301      	movs	r3, #1
 8015b9a:	e09c      	b.n	8015cd6 <_printf_i+0x1e6>
 8015b9c:	6833      	ldr	r3, [r6, #0]
 8015b9e:	6820      	ldr	r0, [r4, #0]
 8015ba0:	1d19      	adds	r1, r3, #4
 8015ba2:	6031      	str	r1, [r6, #0]
 8015ba4:	0606      	lsls	r6, r0, #24
 8015ba6:	d501      	bpl.n	8015bac <_printf_i+0xbc>
 8015ba8:	681d      	ldr	r5, [r3, #0]
 8015baa:	e003      	b.n	8015bb4 <_printf_i+0xc4>
 8015bac:	0645      	lsls	r5, r0, #25
 8015bae:	d5fb      	bpl.n	8015ba8 <_printf_i+0xb8>
 8015bb0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015bb4:	2d00      	cmp	r5, #0
 8015bb6:	da03      	bge.n	8015bc0 <_printf_i+0xd0>
 8015bb8:	232d      	movs	r3, #45	@ 0x2d
 8015bba:	426d      	negs	r5, r5
 8015bbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015bc0:	4858      	ldr	r0, [pc, #352]	@ (8015d24 <_printf_i+0x234>)
 8015bc2:	230a      	movs	r3, #10
 8015bc4:	e011      	b.n	8015bea <_printf_i+0xfa>
 8015bc6:	6821      	ldr	r1, [r4, #0]
 8015bc8:	6833      	ldr	r3, [r6, #0]
 8015bca:	0608      	lsls	r0, r1, #24
 8015bcc:	f853 5b04 	ldr.w	r5, [r3], #4
 8015bd0:	d402      	bmi.n	8015bd8 <_printf_i+0xe8>
 8015bd2:	0649      	lsls	r1, r1, #25
 8015bd4:	bf48      	it	mi
 8015bd6:	b2ad      	uxthmi	r5, r5
 8015bd8:	2f6f      	cmp	r7, #111	@ 0x6f
 8015bda:	4852      	ldr	r0, [pc, #328]	@ (8015d24 <_printf_i+0x234>)
 8015bdc:	6033      	str	r3, [r6, #0]
 8015bde:	bf14      	ite	ne
 8015be0:	230a      	movne	r3, #10
 8015be2:	2308      	moveq	r3, #8
 8015be4:	2100      	movs	r1, #0
 8015be6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8015bea:	6866      	ldr	r6, [r4, #4]
 8015bec:	60a6      	str	r6, [r4, #8]
 8015bee:	2e00      	cmp	r6, #0
 8015bf0:	db05      	blt.n	8015bfe <_printf_i+0x10e>
 8015bf2:	6821      	ldr	r1, [r4, #0]
 8015bf4:	432e      	orrs	r6, r5
 8015bf6:	f021 0104 	bic.w	r1, r1, #4
 8015bfa:	6021      	str	r1, [r4, #0]
 8015bfc:	d04b      	beq.n	8015c96 <_printf_i+0x1a6>
 8015bfe:	4616      	mov	r6, r2
 8015c00:	fbb5 f1f3 	udiv	r1, r5, r3
 8015c04:	fb03 5711 	mls	r7, r3, r1, r5
 8015c08:	5dc7      	ldrb	r7, [r0, r7]
 8015c0a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015c0e:	462f      	mov	r7, r5
 8015c10:	42bb      	cmp	r3, r7
 8015c12:	460d      	mov	r5, r1
 8015c14:	d9f4      	bls.n	8015c00 <_printf_i+0x110>
 8015c16:	2b08      	cmp	r3, #8
 8015c18:	d10b      	bne.n	8015c32 <_printf_i+0x142>
 8015c1a:	6823      	ldr	r3, [r4, #0]
 8015c1c:	07df      	lsls	r7, r3, #31
 8015c1e:	d508      	bpl.n	8015c32 <_printf_i+0x142>
 8015c20:	6923      	ldr	r3, [r4, #16]
 8015c22:	6861      	ldr	r1, [r4, #4]
 8015c24:	4299      	cmp	r1, r3
 8015c26:	bfde      	ittt	le
 8015c28:	2330      	movle	r3, #48	@ 0x30
 8015c2a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015c2e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015c32:	1b92      	subs	r2, r2, r6
 8015c34:	6122      	str	r2, [r4, #16]
 8015c36:	f8cd a000 	str.w	sl, [sp]
 8015c3a:	464b      	mov	r3, r9
 8015c3c:	aa03      	add	r2, sp, #12
 8015c3e:	4621      	mov	r1, r4
 8015c40:	4640      	mov	r0, r8
 8015c42:	f7ff fee7 	bl	8015a14 <_printf_common>
 8015c46:	3001      	adds	r0, #1
 8015c48:	d14a      	bne.n	8015ce0 <_printf_i+0x1f0>
 8015c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8015c4e:	b004      	add	sp, #16
 8015c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c54:	6823      	ldr	r3, [r4, #0]
 8015c56:	f043 0320 	orr.w	r3, r3, #32
 8015c5a:	6023      	str	r3, [r4, #0]
 8015c5c:	4832      	ldr	r0, [pc, #200]	@ (8015d28 <_printf_i+0x238>)
 8015c5e:	2778      	movs	r7, #120	@ 0x78
 8015c60:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8015c64:	6823      	ldr	r3, [r4, #0]
 8015c66:	6831      	ldr	r1, [r6, #0]
 8015c68:	061f      	lsls	r7, r3, #24
 8015c6a:	f851 5b04 	ldr.w	r5, [r1], #4
 8015c6e:	d402      	bmi.n	8015c76 <_printf_i+0x186>
 8015c70:	065f      	lsls	r7, r3, #25
 8015c72:	bf48      	it	mi
 8015c74:	b2ad      	uxthmi	r5, r5
 8015c76:	6031      	str	r1, [r6, #0]
 8015c78:	07d9      	lsls	r1, r3, #31
 8015c7a:	bf44      	itt	mi
 8015c7c:	f043 0320 	orrmi.w	r3, r3, #32
 8015c80:	6023      	strmi	r3, [r4, #0]
 8015c82:	b11d      	cbz	r5, 8015c8c <_printf_i+0x19c>
 8015c84:	2310      	movs	r3, #16
 8015c86:	e7ad      	b.n	8015be4 <_printf_i+0xf4>
 8015c88:	4826      	ldr	r0, [pc, #152]	@ (8015d24 <_printf_i+0x234>)
 8015c8a:	e7e9      	b.n	8015c60 <_printf_i+0x170>
 8015c8c:	6823      	ldr	r3, [r4, #0]
 8015c8e:	f023 0320 	bic.w	r3, r3, #32
 8015c92:	6023      	str	r3, [r4, #0]
 8015c94:	e7f6      	b.n	8015c84 <_printf_i+0x194>
 8015c96:	4616      	mov	r6, r2
 8015c98:	e7bd      	b.n	8015c16 <_printf_i+0x126>
 8015c9a:	6833      	ldr	r3, [r6, #0]
 8015c9c:	6825      	ldr	r5, [r4, #0]
 8015c9e:	6961      	ldr	r1, [r4, #20]
 8015ca0:	1d18      	adds	r0, r3, #4
 8015ca2:	6030      	str	r0, [r6, #0]
 8015ca4:	062e      	lsls	r6, r5, #24
 8015ca6:	681b      	ldr	r3, [r3, #0]
 8015ca8:	d501      	bpl.n	8015cae <_printf_i+0x1be>
 8015caa:	6019      	str	r1, [r3, #0]
 8015cac:	e002      	b.n	8015cb4 <_printf_i+0x1c4>
 8015cae:	0668      	lsls	r0, r5, #25
 8015cb0:	d5fb      	bpl.n	8015caa <_printf_i+0x1ba>
 8015cb2:	8019      	strh	r1, [r3, #0]
 8015cb4:	2300      	movs	r3, #0
 8015cb6:	6123      	str	r3, [r4, #16]
 8015cb8:	4616      	mov	r6, r2
 8015cba:	e7bc      	b.n	8015c36 <_printf_i+0x146>
 8015cbc:	6833      	ldr	r3, [r6, #0]
 8015cbe:	1d1a      	adds	r2, r3, #4
 8015cc0:	6032      	str	r2, [r6, #0]
 8015cc2:	681e      	ldr	r6, [r3, #0]
 8015cc4:	6862      	ldr	r2, [r4, #4]
 8015cc6:	2100      	movs	r1, #0
 8015cc8:	4630      	mov	r0, r6
 8015cca:	f7ea fa81 	bl	80001d0 <memchr>
 8015cce:	b108      	cbz	r0, 8015cd4 <_printf_i+0x1e4>
 8015cd0:	1b80      	subs	r0, r0, r6
 8015cd2:	6060      	str	r0, [r4, #4]
 8015cd4:	6863      	ldr	r3, [r4, #4]
 8015cd6:	6123      	str	r3, [r4, #16]
 8015cd8:	2300      	movs	r3, #0
 8015cda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015cde:	e7aa      	b.n	8015c36 <_printf_i+0x146>
 8015ce0:	6923      	ldr	r3, [r4, #16]
 8015ce2:	4632      	mov	r2, r6
 8015ce4:	4649      	mov	r1, r9
 8015ce6:	4640      	mov	r0, r8
 8015ce8:	47d0      	blx	sl
 8015cea:	3001      	adds	r0, #1
 8015cec:	d0ad      	beq.n	8015c4a <_printf_i+0x15a>
 8015cee:	6823      	ldr	r3, [r4, #0]
 8015cf0:	079b      	lsls	r3, r3, #30
 8015cf2:	d413      	bmi.n	8015d1c <_printf_i+0x22c>
 8015cf4:	68e0      	ldr	r0, [r4, #12]
 8015cf6:	9b03      	ldr	r3, [sp, #12]
 8015cf8:	4298      	cmp	r0, r3
 8015cfa:	bfb8      	it	lt
 8015cfc:	4618      	movlt	r0, r3
 8015cfe:	e7a6      	b.n	8015c4e <_printf_i+0x15e>
 8015d00:	2301      	movs	r3, #1
 8015d02:	4632      	mov	r2, r6
 8015d04:	4649      	mov	r1, r9
 8015d06:	4640      	mov	r0, r8
 8015d08:	47d0      	blx	sl
 8015d0a:	3001      	adds	r0, #1
 8015d0c:	d09d      	beq.n	8015c4a <_printf_i+0x15a>
 8015d0e:	3501      	adds	r5, #1
 8015d10:	68e3      	ldr	r3, [r4, #12]
 8015d12:	9903      	ldr	r1, [sp, #12]
 8015d14:	1a5b      	subs	r3, r3, r1
 8015d16:	42ab      	cmp	r3, r5
 8015d18:	dcf2      	bgt.n	8015d00 <_printf_i+0x210>
 8015d1a:	e7eb      	b.n	8015cf4 <_printf_i+0x204>
 8015d1c:	2500      	movs	r5, #0
 8015d1e:	f104 0619 	add.w	r6, r4, #25
 8015d22:	e7f5      	b.n	8015d10 <_printf_i+0x220>
 8015d24:	0801630e 	.word	0x0801630e
 8015d28:	0801631f 	.word	0x0801631f

08015d2c <memmove>:
 8015d2c:	4288      	cmp	r0, r1
 8015d2e:	b510      	push	{r4, lr}
 8015d30:	eb01 0402 	add.w	r4, r1, r2
 8015d34:	d902      	bls.n	8015d3c <memmove+0x10>
 8015d36:	4284      	cmp	r4, r0
 8015d38:	4623      	mov	r3, r4
 8015d3a:	d807      	bhi.n	8015d4c <memmove+0x20>
 8015d3c:	1e43      	subs	r3, r0, #1
 8015d3e:	42a1      	cmp	r1, r4
 8015d40:	d008      	beq.n	8015d54 <memmove+0x28>
 8015d42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015d46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015d4a:	e7f8      	b.n	8015d3e <memmove+0x12>
 8015d4c:	4402      	add	r2, r0
 8015d4e:	4601      	mov	r1, r0
 8015d50:	428a      	cmp	r2, r1
 8015d52:	d100      	bne.n	8015d56 <memmove+0x2a>
 8015d54:	bd10      	pop	{r4, pc}
 8015d56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015d5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015d5e:	e7f7      	b.n	8015d50 <memmove+0x24>

08015d60 <_realloc_r>:
 8015d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d64:	4607      	mov	r7, r0
 8015d66:	4614      	mov	r4, r2
 8015d68:	460d      	mov	r5, r1
 8015d6a:	b921      	cbnz	r1, 8015d76 <_realloc_r+0x16>
 8015d6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015d70:	4611      	mov	r1, r2
 8015d72:	f7ff bacb 	b.w	801530c <_malloc_r>
 8015d76:	b92a      	cbnz	r2, 8015d84 <_realloc_r+0x24>
 8015d78:	f7ff fcaa 	bl	80156d0 <_free_r>
 8015d7c:	4625      	mov	r5, r4
 8015d7e:	4628      	mov	r0, r5
 8015d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d84:	f000 f81a 	bl	8015dbc <_malloc_usable_size_r>
 8015d88:	4284      	cmp	r4, r0
 8015d8a:	4606      	mov	r6, r0
 8015d8c:	d802      	bhi.n	8015d94 <_realloc_r+0x34>
 8015d8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015d92:	d8f4      	bhi.n	8015d7e <_realloc_r+0x1e>
 8015d94:	4621      	mov	r1, r4
 8015d96:	4638      	mov	r0, r7
 8015d98:	f7ff fab8 	bl	801530c <_malloc_r>
 8015d9c:	4680      	mov	r8, r0
 8015d9e:	b908      	cbnz	r0, 8015da4 <_realloc_r+0x44>
 8015da0:	4645      	mov	r5, r8
 8015da2:	e7ec      	b.n	8015d7e <_realloc_r+0x1e>
 8015da4:	42b4      	cmp	r4, r6
 8015da6:	4622      	mov	r2, r4
 8015da8:	4629      	mov	r1, r5
 8015daa:	bf28      	it	cs
 8015dac:	4632      	movcs	r2, r6
 8015dae:	f7ff fc81 	bl	80156b4 <memcpy>
 8015db2:	4629      	mov	r1, r5
 8015db4:	4638      	mov	r0, r7
 8015db6:	f7ff fc8b 	bl	80156d0 <_free_r>
 8015dba:	e7f1      	b.n	8015da0 <_realloc_r+0x40>

08015dbc <_malloc_usable_size_r>:
 8015dbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015dc0:	1f18      	subs	r0, r3, #4
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	bfbc      	itt	lt
 8015dc6:	580b      	ldrlt	r3, [r1, r0]
 8015dc8:	18c0      	addlt	r0, r0, r3
 8015dca:	4770      	bx	lr

08015dcc <sqrt>:
 8015dcc:	b538      	push	{r3, r4, r5, lr}
 8015dce:	ed2d 8b02 	vpush	{d8}
 8015dd2:	ec55 4b10 	vmov	r4, r5, d0
 8015dd6:	f000 f825 	bl	8015e24 <__ieee754_sqrt>
 8015dda:	4622      	mov	r2, r4
 8015ddc:	462b      	mov	r3, r5
 8015dde:	4620      	mov	r0, r4
 8015de0:	4629      	mov	r1, r5
 8015de2:	eeb0 8a40 	vmov.f32	s16, s0
 8015de6:	eef0 8a60 	vmov.f32	s17, s1
 8015dea:	f7ea fe97 	bl	8000b1c <__aeabi_dcmpun>
 8015dee:	b990      	cbnz	r0, 8015e16 <sqrt+0x4a>
 8015df0:	2200      	movs	r2, #0
 8015df2:	2300      	movs	r3, #0
 8015df4:	4620      	mov	r0, r4
 8015df6:	4629      	mov	r1, r5
 8015df8:	f7ea fe68 	bl	8000acc <__aeabi_dcmplt>
 8015dfc:	b158      	cbz	r0, 8015e16 <sqrt+0x4a>
 8015dfe:	f7ff fc2d 	bl	801565c <__errno>
 8015e02:	2321      	movs	r3, #33	@ 0x21
 8015e04:	6003      	str	r3, [r0, #0]
 8015e06:	2200      	movs	r2, #0
 8015e08:	2300      	movs	r3, #0
 8015e0a:	4610      	mov	r0, r2
 8015e0c:	4619      	mov	r1, r3
 8015e0e:	f7ea fd15 	bl	800083c <__aeabi_ddiv>
 8015e12:	ec41 0b18 	vmov	d8, r0, r1
 8015e16:	eeb0 0a48 	vmov.f32	s0, s16
 8015e1a:	eef0 0a68 	vmov.f32	s1, s17
 8015e1e:	ecbd 8b02 	vpop	{d8}
 8015e22:	bd38      	pop	{r3, r4, r5, pc}

08015e24 <__ieee754_sqrt>:
 8015e24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e28:	4a66      	ldr	r2, [pc, #408]	@ (8015fc4 <__ieee754_sqrt+0x1a0>)
 8015e2a:	ec55 4b10 	vmov	r4, r5, d0
 8015e2e:	43aa      	bics	r2, r5
 8015e30:	462b      	mov	r3, r5
 8015e32:	4621      	mov	r1, r4
 8015e34:	d110      	bne.n	8015e58 <__ieee754_sqrt+0x34>
 8015e36:	4622      	mov	r2, r4
 8015e38:	4620      	mov	r0, r4
 8015e3a:	4629      	mov	r1, r5
 8015e3c:	f7ea fbd4 	bl	80005e8 <__aeabi_dmul>
 8015e40:	4602      	mov	r2, r0
 8015e42:	460b      	mov	r3, r1
 8015e44:	4620      	mov	r0, r4
 8015e46:	4629      	mov	r1, r5
 8015e48:	f7ea fa18 	bl	800027c <__adddf3>
 8015e4c:	4604      	mov	r4, r0
 8015e4e:	460d      	mov	r5, r1
 8015e50:	ec45 4b10 	vmov	d0, r4, r5
 8015e54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e58:	2d00      	cmp	r5, #0
 8015e5a:	dc0e      	bgt.n	8015e7a <__ieee754_sqrt+0x56>
 8015e5c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8015e60:	4322      	orrs	r2, r4
 8015e62:	d0f5      	beq.n	8015e50 <__ieee754_sqrt+0x2c>
 8015e64:	b19d      	cbz	r5, 8015e8e <__ieee754_sqrt+0x6a>
 8015e66:	4622      	mov	r2, r4
 8015e68:	4620      	mov	r0, r4
 8015e6a:	4629      	mov	r1, r5
 8015e6c:	f7ea fa04 	bl	8000278 <__aeabi_dsub>
 8015e70:	4602      	mov	r2, r0
 8015e72:	460b      	mov	r3, r1
 8015e74:	f7ea fce2 	bl	800083c <__aeabi_ddiv>
 8015e78:	e7e8      	b.n	8015e4c <__ieee754_sqrt+0x28>
 8015e7a:	152a      	asrs	r2, r5, #20
 8015e7c:	d115      	bne.n	8015eaa <__ieee754_sqrt+0x86>
 8015e7e:	2000      	movs	r0, #0
 8015e80:	e009      	b.n	8015e96 <__ieee754_sqrt+0x72>
 8015e82:	0acb      	lsrs	r3, r1, #11
 8015e84:	3a15      	subs	r2, #21
 8015e86:	0549      	lsls	r1, r1, #21
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d0fa      	beq.n	8015e82 <__ieee754_sqrt+0x5e>
 8015e8c:	e7f7      	b.n	8015e7e <__ieee754_sqrt+0x5a>
 8015e8e:	462a      	mov	r2, r5
 8015e90:	e7fa      	b.n	8015e88 <__ieee754_sqrt+0x64>
 8015e92:	005b      	lsls	r3, r3, #1
 8015e94:	3001      	adds	r0, #1
 8015e96:	02dc      	lsls	r4, r3, #11
 8015e98:	d5fb      	bpl.n	8015e92 <__ieee754_sqrt+0x6e>
 8015e9a:	1e44      	subs	r4, r0, #1
 8015e9c:	1b12      	subs	r2, r2, r4
 8015e9e:	f1c0 0420 	rsb	r4, r0, #32
 8015ea2:	fa21 f404 	lsr.w	r4, r1, r4
 8015ea6:	4323      	orrs	r3, r4
 8015ea8:	4081      	lsls	r1, r0
 8015eaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015eae:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8015eb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8015eb6:	07d2      	lsls	r2, r2, #31
 8015eb8:	bf5c      	itt	pl
 8015eba:	005b      	lslpl	r3, r3, #1
 8015ebc:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8015ec0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015ec4:	bf58      	it	pl
 8015ec6:	0049      	lslpl	r1, r1, #1
 8015ec8:	2600      	movs	r6, #0
 8015eca:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8015ece:	107f      	asrs	r7, r7, #1
 8015ed0:	0049      	lsls	r1, r1, #1
 8015ed2:	2016      	movs	r0, #22
 8015ed4:	4632      	mov	r2, r6
 8015ed6:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8015eda:	1915      	adds	r5, r2, r4
 8015edc:	429d      	cmp	r5, r3
 8015ede:	bfde      	ittt	le
 8015ee0:	192a      	addle	r2, r5, r4
 8015ee2:	1b5b      	suble	r3, r3, r5
 8015ee4:	1936      	addle	r6, r6, r4
 8015ee6:	0fcd      	lsrs	r5, r1, #31
 8015ee8:	3801      	subs	r0, #1
 8015eea:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8015eee:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8015ef2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8015ef6:	d1f0      	bne.n	8015eda <__ieee754_sqrt+0xb6>
 8015ef8:	4605      	mov	r5, r0
 8015efa:	2420      	movs	r4, #32
 8015efc:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8015f00:	4293      	cmp	r3, r2
 8015f02:	eb0c 0e00 	add.w	lr, ip, r0
 8015f06:	dc02      	bgt.n	8015f0e <__ieee754_sqrt+0xea>
 8015f08:	d113      	bne.n	8015f32 <__ieee754_sqrt+0x10e>
 8015f0a:	458e      	cmp	lr, r1
 8015f0c:	d811      	bhi.n	8015f32 <__ieee754_sqrt+0x10e>
 8015f0e:	f1be 0f00 	cmp.w	lr, #0
 8015f12:	eb0e 000c 	add.w	r0, lr, ip
 8015f16:	da3f      	bge.n	8015f98 <__ieee754_sqrt+0x174>
 8015f18:	2800      	cmp	r0, #0
 8015f1a:	db3d      	blt.n	8015f98 <__ieee754_sqrt+0x174>
 8015f1c:	f102 0801 	add.w	r8, r2, #1
 8015f20:	1a9b      	subs	r3, r3, r2
 8015f22:	458e      	cmp	lr, r1
 8015f24:	bf88      	it	hi
 8015f26:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8015f2a:	eba1 010e 	sub.w	r1, r1, lr
 8015f2e:	4465      	add	r5, ip
 8015f30:	4642      	mov	r2, r8
 8015f32:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8015f36:	3c01      	subs	r4, #1
 8015f38:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8015f3c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8015f40:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8015f44:	d1dc      	bne.n	8015f00 <__ieee754_sqrt+0xdc>
 8015f46:	4319      	orrs	r1, r3
 8015f48:	d01b      	beq.n	8015f82 <__ieee754_sqrt+0x15e>
 8015f4a:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8015fc8 <__ieee754_sqrt+0x1a4>
 8015f4e:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8015fcc <__ieee754_sqrt+0x1a8>
 8015f52:	e9da 0100 	ldrd	r0, r1, [sl]
 8015f56:	e9db 2300 	ldrd	r2, r3, [fp]
 8015f5a:	f7ea f98d 	bl	8000278 <__aeabi_dsub>
 8015f5e:	e9da 8900 	ldrd	r8, r9, [sl]
 8015f62:	4602      	mov	r2, r0
 8015f64:	460b      	mov	r3, r1
 8015f66:	4640      	mov	r0, r8
 8015f68:	4649      	mov	r1, r9
 8015f6a:	f7ea fdb9 	bl	8000ae0 <__aeabi_dcmple>
 8015f6e:	b140      	cbz	r0, 8015f82 <__ieee754_sqrt+0x15e>
 8015f70:	f1b5 3fff 	cmp.w	r5, #4294967295
 8015f74:	e9da 0100 	ldrd	r0, r1, [sl]
 8015f78:	e9db 2300 	ldrd	r2, r3, [fp]
 8015f7c:	d10e      	bne.n	8015f9c <__ieee754_sqrt+0x178>
 8015f7e:	3601      	adds	r6, #1
 8015f80:	4625      	mov	r5, r4
 8015f82:	1073      	asrs	r3, r6, #1
 8015f84:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8015f88:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8015f8c:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8015f90:	086b      	lsrs	r3, r5, #1
 8015f92:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8015f96:	e759      	b.n	8015e4c <__ieee754_sqrt+0x28>
 8015f98:	4690      	mov	r8, r2
 8015f9a:	e7c1      	b.n	8015f20 <__ieee754_sqrt+0xfc>
 8015f9c:	f7ea f96e 	bl	800027c <__adddf3>
 8015fa0:	e9da 8900 	ldrd	r8, r9, [sl]
 8015fa4:	4602      	mov	r2, r0
 8015fa6:	460b      	mov	r3, r1
 8015fa8:	4640      	mov	r0, r8
 8015faa:	4649      	mov	r1, r9
 8015fac:	f7ea fd8e 	bl	8000acc <__aeabi_dcmplt>
 8015fb0:	b120      	cbz	r0, 8015fbc <__ieee754_sqrt+0x198>
 8015fb2:	1cab      	adds	r3, r5, #2
 8015fb4:	bf08      	it	eq
 8015fb6:	3601      	addeq	r6, #1
 8015fb8:	3502      	adds	r5, #2
 8015fba:	e7e2      	b.n	8015f82 <__ieee754_sqrt+0x15e>
 8015fbc:	1c6b      	adds	r3, r5, #1
 8015fbe:	f023 0501 	bic.w	r5, r3, #1
 8015fc2:	e7de      	b.n	8015f82 <__ieee754_sqrt+0x15e>
 8015fc4:	7ff00000 	.word	0x7ff00000
 8015fc8:	08016338 	.word	0x08016338
 8015fcc:	08016330 	.word	0x08016330

08015fd0 <_init>:
 8015fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015fd2:	bf00      	nop
 8015fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015fd6:	bc08      	pop	{r3}
 8015fd8:	469e      	mov	lr, r3
 8015fda:	4770      	bx	lr

08015fdc <_fini>:
 8015fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015fde:	bf00      	nop
 8015fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015fe2:	bc08      	pop	{r3}
 8015fe4:	469e      	mov	lr, r3
 8015fe6:	4770      	bx	lr
