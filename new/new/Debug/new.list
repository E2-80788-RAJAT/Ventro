
new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abe4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000738  0800ad78  0800ad78  0000bd78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4b0  0800b4b0  0000d1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b4b0  0800b4b0  0000c4b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b4b8  0800b4b8  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4b8  0800b4b8  0000c4b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b4bc  0800b4bc  0000c4bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800b4c0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d1d8  2**0
                  CONTENTS
 10 .bss          0000441c  200001d8  200001d8  0000d1d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200045f4  200045f4  0000d1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000102bc  00000000  00000000  0000d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ec5  00000000  00000000  0001d4c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f38  00000000  00000000  00020390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b9b  00000000  00000000  000212c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000244a2  00000000  00000000  00021e63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011d0d  00000000  00000000  00046305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dad7f  00000000  00000000  00058012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00132d91  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000052c8  00000000  00000000  00132dd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0013809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ad5c 	.word	0x0800ad5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800ad5c 	.word	0x0800ad5c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4a07      	ldr	r2, [pc, #28]	@ (8001010 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ff4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	4a06      	ldr	r2, [pc, #24]	@ (8001014 <vApplicationGetIdleTaskMemory+0x30>)
 8000ffa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2280      	movs	r2, #128	@ 0x80
 8001000:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001002:	bf00      	nop
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	200001f4 	.word	0x200001f4
 8001014:	20000248 	.word	0x20000248

08001018 <Flash_WriteData>:
void HX711_Init(void);
int32_t HX711_Read(void);
float HX711_GetWeight(int32_t offset, float scale);

// Flash Write Function
void Flash_WriteData(uint32_t address, void *data, uint32_t size) {
 8001018:	b5b0      	push	{r4, r5, r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
	HAL_FLASH_Unlock();
 8001024:	f002 fa5a 	bl	80034dc <HAL_FLASH_Unlock>
	for (uint32_t i = 0; i < size; i += 4) {
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	e011      	b.n	8001052 <Flash_WriteData+0x3a>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + i,
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	18d1      	adds	r1, r2, r3
				*(uint32_t*) ((uint8_t*) data + i));
 8001034:	68ba      	ldr	r2, [r7, #8]
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	4413      	add	r3, r2
 800103a:	681b      	ldr	r3, [r3, #0]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + i,
 800103c:	2200      	movs	r2, #0
 800103e:	461c      	mov	r4, r3
 8001040:	4615      	mov	r5, r2
 8001042:	4622      	mov	r2, r4
 8001044:	462b      	mov	r3, r5
 8001046:	2002      	movs	r0, #2
 8001048:	f002 f9f4 	bl	8003434 <HAL_FLASH_Program>
	for (uint32_t i = 0; i < size; i += 4) {
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	3304      	adds	r3, #4
 8001050:	617b      	str	r3, [r7, #20]
 8001052:	697a      	ldr	r2, [r7, #20]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	429a      	cmp	r2, r3
 8001058:	d3e9      	bcc.n	800102e <Flash_WriteData+0x16>
	}
	HAL_FLASH_Lock();
 800105a:	f002 fa61 	bl	8003520 <HAL_FLASH_Lock>
}
 800105e:	bf00      	nop
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	bdb0      	pop	{r4, r5, r7, pc}

08001066 <Flash_ReadData>:

// Flash Read Function
void Flash_ReadData(uint32_t address, void *data, uint32_t size) {
 8001066:	b580      	push	{r7, lr}
 8001068:	b084      	sub	sp, #16
 800106a:	af00      	add	r7, sp, #0
 800106c:	60f8      	str	r0, [r7, #12]
 800106e:	60b9      	str	r1, [r7, #8]
 8001070:	607a      	str	r2, [r7, #4]
	memcpy(data, (void*) address, size);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	4619      	mov	r1, r3
 8001078:	68b8      	ldr	r0, [r7, #8]
 800107a:	f006 fb18 	bl	80076ae <memcpy>
}
 800107e:	bf00      	nop
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <HX711_Read>:

void HX711_Init(void) {
	HAL_GPIO_WritePin(HX711_SCK_PORT, HX711_SCK_PIN, GPIO_PIN_RESET);
}

int32_t HX711_Read(void) {
 8001088:	b590      	push	{r4, r7, lr}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
	int32_t data = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	607b      	str	r3, [r7, #4]
	uint8_t i;

	while (HAL_GPIO_ReadPin(HX711_DT_PORT, HX711_DT_PIN) == GPIO_PIN_SET)
 8001092:	bf00      	nop
 8001094:	2101      	movs	r1, #1
 8001096:	481d      	ldr	r0, [pc, #116]	@ (800110c <HX711_Read+0x84>)
 8001098:	f002 fd64 	bl	8003b64 <HAL_GPIO_ReadPin>
 800109c:	4603      	mov	r3, r0
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d0f8      	beq.n	8001094 <HX711_Read+0xc>
		;

	for (i = 0; i < 24; i++) {
 80010a2:	2300      	movs	r3, #0
 80010a4:	70fb      	strb	r3, [r7, #3]
 80010a6:	e015      	b.n	80010d4 <HX711_Read+0x4c>
		HAL_GPIO_WritePin(HX711_SCK_PORT, HX711_SCK_PIN, GPIO_PIN_SET); // SCK
 80010a8:	2201      	movs	r2, #1
 80010aa:	2102      	movs	r1, #2
 80010ac:	4817      	ldr	r0, [pc, #92]	@ (800110c <HX711_Read+0x84>)
 80010ae:	f002 fd71 	bl	8003b94 <HAL_GPIO_WritePin>
		//HAL_Delay(10);
		data = (data << 1) | HAL_GPIO_ReadPin(HX711_DT_PORT, HX711_DT_PIN);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	005c      	lsls	r4, r3, #1
 80010b6:	2101      	movs	r1, #1
 80010b8:	4814      	ldr	r0, [pc, #80]	@ (800110c <HX711_Read+0x84>)
 80010ba:	f002 fd53 	bl	8003b64 <HAL_GPIO_ReadPin>
 80010be:	4603      	mov	r3, r0
 80010c0:	4323      	orrs	r3, r4
 80010c2:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(HX711_SCK_PORT, HX711_SCK_PIN, GPIO_PIN_RESET); // SCK
 80010c4:	2200      	movs	r2, #0
 80010c6:	2102      	movs	r1, #2
 80010c8:	4810      	ldr	r0, [pc, #64]	@ (800110c <HX711_Read+0x84>)
 80010ca:	f002 fd63 	bl	8003b94 <HAL_GPIO_WritePin>
	for (i = 0; i < 24; i++) {
 80010ce:	78fb      	ldrb	r3, [r7, #3]
 80010d0:	3301      	adds	r3, #1
 80010d2:	70fb      	strb	r3, [r7, #3]
 80010d4:	78fb      	ldrb	r3, [r7, #3]
 80010d6:	2b17      	cmp	r3, #23
 80010d8:	d9e6      	bls.n	80010a8 <HX711_Read+0x20>
		//HAL_Delay(100);
	}

	HAL_GPIO_WritePin(HX711_SCK_PORT, HX711_SCK_PIN, GPIO_PIN_SET); // 25th pulse
 80010da:	2201      	movs	r2, #1
 80010dc:	2102      	movs	r1, #2
 80010de:	480b      	ldr	r0, [pc, #44]	@ (800110c <HX711_Read+0x84>)
 80010e0:	f002 fd58 	bl	8003b94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HX711_SCK_PORT, HX711_SCK_PIN, GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2102      	movs	r1, #2
 80010e8:	4808      	ldr	r0, [pc, #32]	@ (800110c <HX711_Read+0x84>)
 80010ea:	f002 fd53 	bl	8003b94 <HAL_GPIO_WritePin>

	if (data & 0x800000) {
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <HX711_Read+0x78>
		data |= 0xFF000000;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80010fe:	607b      	str	r3, [r7, #4]
	}

	return data;
 8001100:	687b      	ldr	r3, [r7, #4]
}
 8001102:	4618      	mov	r0, r3
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	bd90      	pop	{r4, r7, pc}
 800110a:	bf00      	nop
 800110c:	40020000 	.word	0x40020000

08001110 <HX711_GetWeight>:
float HX711_GetWeight(int32_t offset, float scale) {
 8001110:	b5b0      	push	{r4, r5, r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	ed87 0a00 	vstr	s0, [r7]
	int32_t raw_value = HX711_Read();
 800111c:	f7ff ffb4 	bl	8001088 <HX711_Read>
 8001120:	60f8      	str	r0, [r7, #12]
	float weight = ((float) (raw_value - offset) / scale);
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	ee07 3a90 	vmov	s15, r3
 800112c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001130:	ed97 7a00 	vldr	s14, [r7]
 8001134:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001138:	edc7 7a02 	vstr	s15, [r7, #8]

	// Avoid displaying small negative values due to noise
	if (fabs(raw_value - offset) < 500) {
 800113c:	68fa      	ldr	r2, [r7, #12]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff f9ee 	bl	8000524 <__aeabi_i2d>
 8001148:	4602      	mov	r2, r0
 800114a:	460b      	mov	r3, r1
 800114c:	4614      	mov	r4, r2
 800114e:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	4b09      	ldr	r3, [pc, #36]	@ (800117c <HX711_GetWeight+0x6c>)
 8001158:	4620      	mov	r0, r4
 800115a:	4629      	mov	r1, r5
 800115c:	f7ff fcbe 	bl	8000adc <__aeabi_dcmplt>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d002      	beq.n	800116c <HX711_GetWeight+0x5c>
		return 0.0;
 8001166:	f04f 0300 	mov.w	r3, #0
 800116a:	e000      	b.n	800116e <HX711_GetWeight+0x5e>
	}
	return weight;
 800116c:	68bb      	ldr	r3, [r7, #8]
}
 800116e:	ee07 3a90 	vmov	s15, r3
 8001172:	eeb0 0a67 	vmov.f32	s0, s15
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bdb0      	pop	{r4, r5, r7, pc}
 800117c:	407f4000 	.word	0x407f4000

08001180 <SendIconToDWIN>:
 * @brief  The application entry point.
 * @retval int
 */
// Fun to send the data to LCD

void SendIconToDWIN(void) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
	uint8_t icon_command[] = { 0x5a, 0xa5, 0x05, 0x82, 0x12, 0x50, 0x00, 0x22}; // Example command, refer to your display's documentation for correct values.
 8001186:	4a08      	ldr	r2, [pc, #32]	@ (80011a8 <SendIconToDWIN+0x28>)
 8001188:	463b      	mov	r3, r7
 800118a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800118e:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_UART_Transmit(&huart2, icon_command, sizeof(icon_command), 500);
 8001192:	4639      	mov	r1, r7
 8001194:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001198:	2208      	movs	r2, #8
 800119a:	4804      	ldr	r0, [pc, #16]	@ (80011ac <SendIconToDWIN+0x2c>)
 800119c:	f003 f9fc 	bl	8004598 <HAL_UART_Transmit>
}
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	0800ad78 	.word	0x0800ad78
 80011ac:	200004d8 	.word	0x200004d8

080011b0 <Reset_GPIO_Pins1>:

void Reset_GPIO_Pins1(void) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD,
 80011b4:	2200      	movs	r2, #0
 80011b6:	f64f 713f 	movw	r1, #65343	@ 0xff3f
 80011ba:	4802      	ldr	r0, [pc, #8]	@ (80011c4 <Reset_GPIO_Pins1+0x14>)
 80011bc:	f002 fcea 	bl	8003b94 <HAL_GPIO_WritePin>
			GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4
					| GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10
					| GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14
					| GPIO_PIN_15, GPIO_PIN_RESET);
}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40020c00 	.word	0x40020c00

080011c8 <cycle1>:
void Set_Valves1(uint32_t *pins, uint8_t pin_count) {
	for (uint8_t i = 0; i < pin_count; i++) {
		HAL_GPIO_WritePin(GPIOD, pins[i], GPIO_PIN_SET);
	}
}
void cycle1(uint32_t *pins, uint8_t pin_count) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	70fb      	strb	r3, [r7, #3]
	Set_Valves(pins, pin_count);
 80011d4:	78fb      	ldrb	r3, [r7, #3]
 80011d6:	4619      	mov	r1, r3
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f000 fbf1 	bl	80019c0 <Set_Valves>
	//osDelay(delay);
	//Reset_GPIO_Pins();
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <Water_pressure_get_mmHg>:
    float pressPSI = pressMPa * 145.0377f;

    return pressPSI;
}
uint32_t Water_pressure_get_mmHg(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08a      	sub	sp, #40	@ 0x28
 80011ec:	af00      	add	r7, sp, #0
    const uint32_t num_samples = 10;
 80011ee:	230a      	movs	r3, #10
 80011f0:	61bb      	str	r3, [r7, #24]
    const float Vcc = 3.3f;   // MCU ADC reference voltage
 80011f2:	4b3b      	ldr	r3, [pc, #236]	@ (80012e0 <Water_pressure_get_mmHg+0xf8>)
 80011f4:	617b      	str	r3, [r7, #20]
    const float Vmin = 0.5f;  // Sensor output at 0 MPa
 80011f6:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 80011fa:	613b      	str	r3, [r7, #16]
    const float Vmax = 4.5f;  // Sensor output at 1.6 MPa
 80011fc:	4b39      	ldr	r3, [pc, #228]	@ (80012e4 <Water_pressure_get_mmHg+0xfc>)
 80011fe:	60fb      	str	r3, [r7, #12]
    const float Pmax = 1.6f;  // Max pressure in MPa
 8001200:	4b39      	ldr	r3, [pc, #228]	@ (80012e8 <Water_pressure_get_mmHg+0x100>)
 8001202:	60bb      	str	r3, [r7, #8]

    uint32_t raw = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	627b      	str	r3, [r7, #36]	@ 0x24

    // Take multiple samples and average
    for (uint32_t i = 0; i < num_samples; i++) {
 8001208:	2300      	movs	r3, #0
 800120a:	623b      	str	r3, [r7, #32]
 800120c:	e014      	b.n	8001238 <Water_pressure_get_mmHg+0x50>
        HAL_ADC_Start(&hadc1);
 800120e:	4837      	ldr	r0, [pc, #220]	@ (80012ec <Water_pressure_get_mmHg+0x104>)
 8001210:	f001 f906 	bl	8002420 <HAL_ADC_Start>
        if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8001214:	f04f 31ff 	mov.w	r1, #4294967295
 8001218:	4834      	ldr	r0, [pc, #208]	@ (80012ec <Water_pressure_get_mmHg+0x104>)
 800121a:	f001 f9d3 	bl	80025c4 <HAL_ADC_PollForConversion>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d106      	bne.n	8001232 <Water_pressure_get_mmHg+0x4a>
            raw += HAL_ADC_GetValue(&hadc1);
 8001224:	4831      	ldr	r0, [pc, #196]	@ (80012ec <Water_pressure_get_mmHg+0x104>)
 8001226:	f001 fa58 	bl	80026da <HAL_ADC_GetValue>
 800122a:	4602      	mov	r2, r0
 800122c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800122e:	4413      	add	r3, r2
 8001230:	627b      	str	r3, [r7, #36]	@ 0x24
    for (uint32_t i = 0; i < num_samples; i++) {
 8001232:	6a3b      	ldr	r3, [r7, #32]
 8001234:	3301      	adds	r3, #1
 8001236:	623b      	str	r3, [r7, #32]
 8001238:	6a3a      	ldr	r2, [r7, #32]
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	429a      	cmp	r2, r3
 800123e:	d3e6      	bcc.n	800120e <Water_pressure_get_mmHg+0x26>
        }
    }
    raw /= num_samples;
 8001240:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	fbb2 f3f3 	udiv	r3, r2, r3
 8001248:	627b      	str	r3, [r7, #36]	@ 0x24

    // Convert raw ADC to voltage
    float voltage = raw * (Vcc / 4095.0f);
 800124a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800124c:	ee07 3a90 	vmov	s15, r3
 8001250:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001254:	edd7 6a05 	vldr	s13, [r7, #20]
 8001258:	ed9f 6a25 	vldr	s12, [pc, #148]	@ 80012f0 <Water_pressure_get_mmHg+0x108>
 800125c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001260:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001264:	edc7 7a01 	vstr	s15, [r7, #4]

    // Convert voltage to pressure (MPa)
    float pressMPa = (voltage - Vmin) * (Pmax / (Vmax - Vmin));
 8001268:	ed97 7a01 	vldr	s14, [r7, #4]
 800126c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001270:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001274:	edd7 6a03 	vldr	s13, [r7, #12]
 8001278:	edd7 7a04 	vldr	s15, [r7, #16]
 800127c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001280:	ed97 6a02 	vldr	s12, [r7, #8]
 8001284:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001288:	ee67 7a27 	vmul.f32	s15, s14, s15
 800128c:	edc7 7a07 	vstr	s15, [r7, #28]

    // Clamp pressure
    if (pressMPa < 0.0f) pressMPa = 0.0f;
 8001290:	edd7 7a07 	vldr	s15, [r7, #28]
 8001294:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129c:	d502      	bpl.n	80012a4 <Water_pressure_get_mmHg+0xbc>
 800129e:	f04f 0300 	mov.w	r3, #0
 80012a2:	61fb      	str	r3, [r7, #28]
    if (pressMPa > Pmax) pressMPa = Pmax;
 80012a4:	ed97 7a07 	vldr	s14, [r7, #28]
 80012a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80012ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b4:	dd01      	ble.n	80012ba <Water_pressure_get_mmHg+0xd2>
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	61fb      	str	r3, [r7, #28]

    // Convert MPa to mmHg
    float press_mmHg = pressMPa * 7500.61683f;
 80012ba:	edd7 7a07 	vldr	s15, [r7, #28]
 80012be:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80012f4 <Water_pressure_get_mmHg+0x10c>
 80012c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012c6:	edc7 7a00 	vstr	s15, [r7]

    return (uint32_t)press_mmHg;
 80012ca:	edd7 7a00 	vldr	s15, [r7]
 80012ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012d2:	ee17 3a90 	vmov	r3, s15
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3728      	adds	r7, #40	@ 0x28
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40533333 	.word	0x40533333
 80012e4:	40900000 	.word	0x40900000
 80012e8:	3fcccccd 	.word	0x3fcccccd
 80012ec:	20000448 	.word	0x20000448
 80012f0:	457ff000 	.word	0x457ff000
 80012f4:	45ea64ef 	.word	0x45ea64ef

080012f8 <WeightMeasurementTask>:

void WeightMeasurementTask(void) {
 80012f8:	b5b0      	push	{r4, r5, r7, lr}
 80012fa:	b0b2      	sub	sp, #200	@ 0xc8
 80012fc:	af02      	add	r7, sp, #8
	int32_t offset = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	float scale = NAN;
 8001304:	4b2e      	ldr	r3, [pc, #184]	@ (80013c0 <WeightMeasurementTask+0xc8>)
 8001306:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	float last_weight = 0.0;
 800130a:	f04f 0300 	mov.w	r3, #0
 800130e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	float weight = 0;
 8001312:	f04f 0300 	mov.w	r3, #0
 8001316:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	float density = 1.0;
 800131a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800131e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	float volume_ml;
	bool chemical_fill_needed=0;
 8001322:	2300      	movs	r3, #0
 8001324:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
    bool valve_active = 0;  // State flag for valve operation
 8001328:	2300      	movs	r3, #0
 800132a:	f887 30aa 	strb.w	r3, [r7, #170]	@ 0xaa
    bool cycle6_active = 0; // Track if cycle 6 is active
 800132e:	2300      	movs	r3, #0
 8001330:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
    bool cycle2_done = 0;   // Flag to track if Cycle 2 (drain water) is complete
 8001334:	2300      	movs	r3, #0
 8001336:	f887 30a8 	strb.w	r3, [r7, #168]	@ 0xa8
    bool cycle7_done = 0;   // Flag to track if Cycle 7 (fill water) is complete
 800133a:	2300      	movs	r3, #0
 800133c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    bool cycle8_done = 0;   // Flag to track if Cycle 8 (flush chemical A to V) is complete
 8001340:	2300      	movs	r3, #0
 8001342:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
    bool cycle9_done = 0;   // Flag to track if Cycle 9 (flush chemical V to A) is complete
 8001346:	2300      	movs	r3, #0
 8001348:	f887 30a5 	strb.w	r3, [r7, #165]	@ 0xa5
    bool cycle10_done = 0;  // Flag to track if Cycle 10 (flush chemical DO to DI) is complete
 800134c:	2300      	movs	r3, #0
 800134e:	f887 30a4 	strb.w	r3, [r7, #164]	@ 0xa4
    bool pressure_checked = 0; // Flag to track if the pressure condition has been handled
 8001352:	2300      	movs	r3, #0
 8001354:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

	FLASH_FlushCaches();
 8001358:	f002 fa22 	bl	80037a0 <FLASH_FlushCaches>
	// Read saved offset and scale from Flash
	Flash_ReadData(FLASH_USER_START_ADDR, &offset, sizeof(offset));
 800135c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001360:	2204      	movs	r2, #4
 8001362:	4619      	mov	r1, r3
 8001364:	4817      	ldr	r0, [pc, #92]	@ (80013c4 <WeightMeasurementTask+0xcc>)
 8001366:	f7ff fe7e 	bl	8001066 <Flash_ReadData>
	Flash_ReadData(FLASH_USER_START_ADDR + sizeof(offset), &scale,
 800136a:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800136e:	2204      	movs	r2, #4
 8001370:	4619      	mov	r1, r3
 8001372:	4815      	ldr	r0, [pc, #84]	@ (80013c8 <WeightMeasurementTask+0xd0>)
 8001374:	f7ff fe77 	bl	8001066 <Flash_ReadData>
			sizeof(scale));

	if (offset == -1 || isnan(scale)) {
 8001378:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800137c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001380:	d006      	beq.n	8001390 <WeightMeasurementTask+0x98>
 8001382:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8001386:	eef4 7a67 	vcmp.f32	s15, s15
 800138a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800138e:	d71d      	bvc.n	80013cc <WeightMeasurementTask+0xd4>
		//printf("Calibrating offset...\n");
//		snprintf(buffer1, sizeof(buffer1), "Calibrating offset...\n\r:");
//		HAL_UART_Transmit(&huart1, (uint8_t*) buffer1, strlen(buffer1),
//		HAL_MAX_DELAY);

		osDelay(50);
 8001390:	2032      	movs	r0, #50	@ 0x32
 8001392:	f003 ff38 	bl	8005206 <osDelay>
		offset = HX711_Read();
 8001396:	f7ff fe77 	bl	8001088 <HX711_Read>
 800139a:	4603      	mov	r3, r0
 800139c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
//		// printf("Scale factor: %.2f\n", scale);
//		snprintf(buffer4, sizeof(buffer4), "Scale factor: %.2f\n\r:");
//		HAL_UART_Transmit(&huart1, (uint8_t*) buffer4, strlen(buffer4),
//		HAL_MAX_DELAY);
		// Save offset and scale to Flash
		Flash_WriteData(FLASH_USER_START_ADDR, &offset, sizeof(offset));
 80013a0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80013a4:	2204      	movs	r2, #4
 80013a6:	4619      	mov	r1, r3
 80013a8:	4806      	ldr	r0, [pc, #24]	@ (80013c4 <WeightMeasurementTask+0xcc>)
 80013aa:	f7ff fe35 	bl	8001018 <Flash_WriteData>
		Flash_WriteData(FLASH_USER_START_ADDR + sizeof(offset), &scale,
 80013ae:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80013b2:	2204      	movs	r2, #4
 80013b4:	4619      	mov	r1, r3
 80013b6:	4804      	ldr	r0, [pc, #16]	@ (80013c8 <WeightMeasurementTask+0xd0>)
 80013b8:	f7ff fe2e 	bl	8001018 <Flash_WriteData>
 80013bc:	e031      	b.n	8001422 <WeightMeasurementTask+0x12a>
 80013be:	bf00      	nop
 80013c0:	7fc00000 	.word	0x7fc00000
 80013c4:	080e0000 	.word	0x080e0000
 80013c8:	080e0004 	.word	0x080e0004
//				"Offset and scale loaded from Flash.\n\r:");
//		HAL_UART_Transmit(&huart1, (uint8_t*) buffer5, strlen(buffer5),
//		HAL_MAX_DELAY);
		//// printf("Offset: %ld, Scale: %.2f\n", offset, scale);

		snprintf(buffer6, sizeof(buffer6), "Offset: %ld\n\r:", offset);
 80013cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80013d0:	4aba      	ldr	r2, [pc, #744]	@ (80016bc <WeightMeasurementTask+0x3c4>)
 80013d2:	2164      	movs	r1, #100	@ 0x64
 80013d4:	48ba      	ldr	r0, [pc, #744]	@ (80016c0 <WeightMeasurementTask+0x3c8>)
 80013d6:	f006 f853 	bl	8007480 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) buffer6, strlen(buffer6),
 80013da:	48b9      	ldr	r0, [pc, #740]	@ (80016c0 <WeightMeasurementTask+0x3c8>)
 80013dc:	f7fe ff48 	bl	8000270 <strlen>
 80013e0:	4603      	mov	r3, r0
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	f04f 33ff 	mov.w	r3, #4294967295
 80013e8:	49b5      	ldr	r1, [pc, #724]	@ (80016c0 <WeightMeasurementTask+0x3c8>)
 80013ea:	48b6      	ldr	r0, [pc, #728]	@ (80016c4 <WeightMeasurementTask+0x3cc>)
 80013ec:	f003 f8d4 	bl	8004598 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		snprintf(buffer7, sizeof(buffer7), "Scale: %.2f\n\r:", scale);
 80013f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff f8a7 	bl	8000548 <__aeabi_f2d>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	e9cd 2300 	strd	r2, r3, [sp]
 8001402:	4ab1      	ldr	r2, [pc, #708]	@ (80016c8 <WeightMeasurementTask+0x3d0>)
 8001404:	2164      	movs	r1, #100	@ 0x64
 8001406:	48b1      	ldr	r0, [pc, #708]	@ (80016cc <WeightMeasurementTask+0x3d4>)
 8001408:	f006 f83a 	bl	8007480 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) buffer7, strlen(buffer7),
 800140c:	48af      	ldr	r0, [pc, #700]	@ (80016cc <WeightMeasurementTask+0x3d4>)
 800140e:	f7fe ff2f 	bl	8000270 <strlen>
 8001412:	4603      	mov	r3, r0
 8001414:	b29a      	uxth	r2, r3
 8001416:	f04f 33ff 	mov.w	r3, #4294967295
 800141a:	49ac      	ldr	r1, [pc, #688]	@ (80016cc <WeightMeasurementTask+0x3d4>)
 800141c:	48a9      	ldr	r0, [pc, #676]	@ (80016c4 <WeightMeasurementTask+0x3cc>)
 800141e:	f003 f8bb 	bl	8004598 <HAL_UART_Transmit>
	}


    // Valve control pattern cycles
    //******************  Rinse & Pressure check cycle  *********************//
	uint32_t cycle_1[] = {GPIO_PIN_0,GPIO_PIN_1,GPIO_PIN_2,GPIO_PIN_9,GPIO_PIN_11}; // STEP 1 FLUSH THE WATER A to V FOR 30 SECOND
 8001422:	4bab      	ldr	r3, [pc, #684]	@ (80016d0 <WeightMeasurementTask+0x3d8>)
 8001424:	f107 0484 	add.w	r4, r7, #132	@ 0x84
 8001428:	461d      	mov	r5, r3
 800142a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800142c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800142e:	682b      	ldr	r3, [r5, #0]
 8001430:	6023      	str	r3, [r4, #0]
    uint32_t cycle_2[] = {GPIO_PIN_0,GPIO_PIN_1,GPIO_PIN_4,GPIO_PIN_8,GPIO_PIN_11}; // STEP 2 FLUSH THE WATER V to A FOR 30 SECOND
 8001432:	4ba8      	ldr	r3, [pc, #672]	@ (80016d4 <WeightMeasurementTask+0x3dc>)
 8001434:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8001438:	461d      	mov	r5, r3
 800143a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800143c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800143e:	682b      	ldr	r3, [r5, #0]
 8001440:	6023      	str	r3, [r4, #0]
    uint32_t cycle_3[] = {GPIO_PIN_0,GPIO_PIN_1,GPIO_PIN_3,GPIO_PIN_12,GPIO_PIN_11}; // SETP 3 FLUSH THE WATER FOR 30 DO to DI
 8001442:	4ba5      	ldr	r3, [pc, #660]	@ (80016d8 <WeightMeasurementTask+0x3e0>)
 8001444:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 8001448:	461d      	mov	r5, r3
 800144a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800144c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800144e:	682b      	ldr	r3, [r5, #0]
 8001450:	6023      	str	r3, [r4, #0]
    uint32_t cycle_4[] = {GPIO_PIN_0,GPIO_PIN_1,GPIO_PIN_13,GPIO_PIN_11}; // STEP 4: Fill the water
 8001452:	4ba2      	ldr	r3, [pc, #648]	@ (80016dc <WeightMeasurementTask+0x3e4>)
 8001454:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8001458:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800145a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint32_t cycle_5[] = {GPIO_PIN_13,GPIO_PIN_4,GPIO_PIN_9}; // STEP 5: Drain the water
 800145e:	4aa0      	ldr	r2, [pc, #640]	@ (80016e0 <WeightMeasurementTask+0x3e8>)
 8001460:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001464:	ca07      	ldmia	r2, {r0, r1, r2}
 8001466:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    uint32_t cycle_6[] = {GPIO_PIN_15,GPIO_PIN_14,GPIO_PIN_13}; // STEP 6: Fill chemical
 800146a:	4a9e      	ldr	r2, [pc, #632]	@ (80016e4 <WeightMeasurementTask+0x3ec>)
 800146c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001470:	ca07      	ldmia	r2, {r0, r1, r2}
 8001472:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    uint32_t cycle_7[] = {GPIO_PIN_0,GPIO_PIN_1,GPIO_PIN_13,GPIO_PIN_11}; // STEP 7: Fill the water again
 8001476:	4b99      	ldr	r3, [pc, #612]	@ (80016dc <WeightMeasurementTask+0x3e4>)
 8001478:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800147c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800147e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint32_t cycle_8[] = {GPIO_PIN_13,GPIO_PIN_2,GPIO_PIN_9}; // STEP 8: 200ml chemical water flush A to V
 8001482:	4a99      	ldr	r2, [pc, #612]	@ (80016e8 <WeightMeasurementTask+0x3f0>)
 8001484:	f107 0318 	add.w	r3, r7, #24
 8001488:	ca07      	ldmia	r2, {r0, r1, r2}
 800148a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    uint32_t cycle_9[] = {GPIO_PIN_13,GPIO_PIN_4,GPIO_PIN_8}; // STEP 9: 200ml chemical water flush V to A
 800148e:	4a97      	ldr	r2, [pc, #604]	@ (80016ec <WeightMeasurementTask+0x3f4>)
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	ca07      	ldmia	r2, {r0, r1, r2}
 8001496:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    uint32_t cycle_10[] = {GPIO_PIN_13,GPIO_PIN_3,GPIO_PIN_12}; // STEP 10: 250ml chemical water flush DO to DI
 800149a:	4a95      	ldr	r2, [pc, #596]	@ (80016f0 <WeightMeasurementTask+0x3f8>)
 800149c:	463b      	mov	r3, r7
 800149e:	ca07      	ldmia	r2, {r0, r1, r2}
 80014a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      // Delay between cycles
   // Draincycle();
    SendIconToDWIN();
 80014a4:	f7ff fe6c 	bl	8001180 <SendIconToDWIN>

    // State variables (add these at the top with your other declarations)
    bool initial_fill_done = false;
 80014a8:	2300      	movs	r3, #0
 80014aa:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
    bool drain_complete = false;
 80014ae:	2300      	movs	r3, #0
 80014b0:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe
    bool chemical_fill_done = false;
 80014b4:	2300      	movs	r3, #0
 80014b6:	f887 30bd 	strb.w	r3, [r7, #189]	@ 0xbd
    bool second_fill_done = false;
 80014ba:	2300      	movs	r3, #0
 80014bc:	f887 30bc 	strb.w	r3, [r7, #188]	@ 0xbc
    bool flush_a_to_v_done = false;
 80014c0:	2300      	movs	r3, #0
 80014c2:	f887 30bb 	strb.w	r3, [r7, #187]	@ 0xbb
    bool flush_v_to_a_done = false;
 80014c6:	2300      	movs	r3, #0
 80014c8:	f887 30ba 	strb.w	r3, [r7, #186]	@ 0xba
    bool flush_do_to_di_done = false;
 80014cc:	2300      	movs	r3, #0
 80014ce:	f887 30b9 	strb.w	r3, [r7, #185]	@ 0xb9

	while (1) {
		/* USER CODE END WHILE */


		weight = HX711_GetWeight(offset, scale);
 80014d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80014d6:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 80014da:	eeb0 0a67 	vmov.f32	s0, s15
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff fe16 	bl	8001110 <HX711_GetWeight>
 80014e4:	ed87 0a2c 	vstr	s0, [r7, #176]	@ 0xb0
		get_wieght = weight;
 80014e8:	4a82      	ldr	r2, [pc, #520]	@ (80016f4 <WeightMeasurementTask+0x3fc>)
 80014ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80014ee:	6013      	str	r3, [r2, #0]

//		if (weight > 3000.0) {
//			snprintf(buffer, sizeof(buffer),"Overload! Max weight is 2kg.\n\r");
//			HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer),HAL_MAX_DELAY);}

		 pressPSI = Water_pressure_get_mmHg();  // Get latest PSI
 80014f0:	f7ff fe7a 	bl	80011e8 <Water_pressure_get_mmHg>
 80014f4:	ee07 0a90 	vmov	s15, r0
 80014f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014fc:	4b7e      	ldr	r3, [pc, #504]	@ (80016f8 <WeightMeasurementTask+0x400>)
 80014fe:	edc3 7a00 	vstr	s15, [r3]

		 snprintf(buf, sizeof(buf), "Water Pressure: %f mmHg\r\n", pressPSI);
 8001502:	4b7d      	ldr	r3, [pc, #500]	@ (80016f8 <WeightMeasurementTask+0x400>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff f81e 	bl	8000548 <__aeabi_f2d>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	e9cd 2300 	strd	r2, r3, [sp]
 8001514:	4a79      	ldr	r2, [pc, #484]	@ (80016fc <WeightMeasurementTask+0x404>)
 8001516:	2164      	movs	r1, #100	@ 0x64
 8001518:	4879      	ldr	r0, [pc, #484]	@ (8001700 <WeightMeasurementTask+0x408>)
 800151a:	f005 ffb1 	bl	8007480 <sniprintf>
		 HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 800151e:	4878      	ldr	r0, [pc, #480]	@ (8001700 <WeightMeasurementTask+0x408>)
 8001520:	f7fe fea6 	bl	8000270 <strlen>
 8001524:	4603      	mov	r3, r0
 8001526:	b29a      	uxth	r2, r3
 8001528:	f04f 33ff 	mov.w	r3, #4294967295
 800152c:	4974      	ldr	r1, [pc, #464]	@ (8001700 <WeightMeasurementTask+0x408>)
 800152e:	4865      	ldr	r0, [pc, #404]	@ (80016c4 <WeightMeasurementTask+0x3cc>)
 8001530:	f003 f832 	bl	8004598 <HAL_UART_Transmit>
		 snprintf(buffer, sizeof(buffer),"                                                   Weight: %.f ml\n\r",get_wieght);
 8001534:	4b6f      	ldr	r3, [pc, #444]	@ (80016f4 <WeightMeasurementTask+0x3fc>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff f805 	bl	8000548 <__aeabi_f2d>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	e9cd 2300 	strd	r2, r3, [sp]
 8001546:	4a6f      	ldr	r2, [pc, #444]	@ (8001704 <WeightMeasurementTask+0x40c>)
 8001548:	2164      	movs	r1, #100	@ 0x64
 800154a:	486f      	ldr	r0, [pc, #444]	@ (8001708 <WeightMeasurementTask+0x410>)
 800154c:	f005 ff98 	bl	8007480 <sniprintf>
		 HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer),HAL_MAX_DELAY);
 8001550:	486d      	ldr	r0, [pc, #436]	@ (8001708 <WeightMeasurementTask+0x410>)
 8001552:	f7fe fe8d 	bl	8000270 <strlen>
 8001556:	4603      	mov	r3, r0
 8001558:	b29a      	uxth	r2, r3
 800155a:	f04f 33ff 	mov.w	r3, #4294967295
 800155e:	496a      	ldr	r1, [pc, #424]	@ (8001708 <WeightMeasurementTask+0x410>)
 8001560:	4858      	ldr	r0, [pc, #352]	@ (80016c4 <WeightMeasurementTask+0x3cc>)
 8001562:	f003 f819 	bl	8004598 <HAL_UART_Transmit>
		     cycle10_done = 0;
		     chemical_fill_needed = 0;
		 }*/
		   // Step 1: Initial water filling (1035ml → 1500ml)
		 // Step 1: Initial water filling (1035ml → 1500ml)
		     if (!initial_fill_done && get_wieght >= (1035 - TOLERANCE) && get_wieght <= (1035 + TOLERANCE)) {
 8001566:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 800156a:	f083 0301 	eor.w	r3, r3, #1
 800156e:	b2db      	uxtb	r3, r3
 8001570:	2b00      	cmp	r3, #0
 8001572:	d02e      	beq.n	80015d2 <WeightMeasurementTask+0x2da>
 8001574:	4b5f      	ldr	r3, [pc, #380]	@ (80016f4 <WeightMeasurementTask+0x3fc>)
 8001576:	edd3 7a00 	vldr	s15, [r3]
 800157a:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 800170c <WeightMeasurementTask+0x414>
 800157e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001586:	db24      	blt.n	80015d2 <WeightMeasurementTask+0x2da>
 8001588:	4b5a      	ldr	r3, [pc, #360]	@ (80016f4 <WeightMeasurementTask+0x3fc>)
 800158a:	edd3 7a00 	vldr	s15, [r3]
 800158e:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8001710 <WeightMeasurementTask+0x418>
 8001592:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800159a:	d81a      	bhi.n	80015d2 <WeightMeasurementTask+0x2da>
		         Reset_GPIO_Pins1();
 800159c:	f7ff fe08 	bl	80011b0 <Reset_GPIO_Pins1>
		         cycle1(cycle_4, sizeof(cycle_4) / sizeof(cycle_4[0]));
 80015a0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80015a4:	2104      	movs	r1, #4
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fe0e 	bl	80011c8 <cycle1>
		         snprintf(buffer, sizeof(buffer), "Starting initial water filling\n\r");
 80015ac:	4a59      	ldr	r2, [pc, #356]	@ (8001714 <WeightMeasurementTask+0x41c>)
 80015ae:	2164      	movs	r1, #100	@ 0x64
 80015b0:	4855      	ldr	r0, [pc, #340]	@ (8001708 <WeightMeasurementTask+0x410>)
 80015b2:	f005 ff65 	bl	8007480 <sniprintf>
		         HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80015b6:	4854      	ldr	r0, [pc, #336]	@ (8001708 <WeightMeasurementTask+0x410>)
 80015b8:	f7fe fe5a 	bl	8000270 <strlen>
 80015bc:	4603      	mov	r3, r0
 80015be:	b29a      	uxth	r2, r3
 80015c0:	f04f 33ff 	mov.w	r3, #4294967295
 80015c4:	4950      	ldr	r1, [pc, #320]	@ (8001708 <WeightMeasurementTask+0x410>)
 80015c6:	483f      	ldr	r0, [pc, #252]	@ (80016c4 <WeightMeasurementTask+0x3cc>)
 80015c8:	f002 ffe6 	bl	8004598 <HAL_UART_Transmit>
		         initial_fill_done = true;
 80015cc:	2301      	movs	r3, #1
 80015ce:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
		     }

		     // Step 2: Drain when reaching 1500ml
		     if (initial_fill_done && !drain_complete && get_wieght >= 1500) {
 80015d2:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d034      	beq.n	8001644 <WeightMeasurementTask+0x34c>
 80015da:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 80015de:	f083 0301 	eor.w	r3, r3, #1
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d02d      	beq.n	8001644 <WeightMeasurementTask+0x34c>
 80015e8:	4b42      	ldr	r3, [pc, #264]	@ (80016f4 <WeightMeasurementTask+0x3fc>)
 80015ea:	edd3 7a00 	vldr	s15, [r3]
 80015ee:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8001718 <WeightMeasurementTask+0x420>
 80015f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015fa:	db23      	blt.n	8001644 <WeightMeasurementTask+0x34c>
		         Reset_GPIO_Pins1();
 80015fc:	f7ff fdd8 	bl	80011b0 <Reset_GPIO_Pins1>
		         cycle1(cycle_5, sizeof(cycle_5) / sizeof(cycle_5[0]));
 8001600:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001604:	2103      	movs	r1, #3
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fdde 	bl	80011c8 <cycle1>
		         snprintf(buffer, sizeof(buffer), "Draining water (reached %.1f ml)\n\r", get_wieght);
 800160c:	4b39      	ldr	r3, [pc, #228]	@ (80016f4 <WeightMeasurementTask+0x3fc>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f7fe ff99 	bl	8000548 <__aeabi_f2d>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	e9cd 2300 	strd	r2, r3, [sp]
 800161e:	4a3f      	ldr	r2, [pc, #252]	@ (800171c <WeightMeasurementTask+0x424>)
 8001620:	2164      	movs	r1, #100	@ 0x64
 8001622:	4839      	ldr	r0, [pc, #228]	@ (8001708 <WeightMeasurementTask+0x410>)
 8001624:	f005 ff2c 	bl	8007480 <sniprintf>
		         HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001628:	4837      	ldr	r0, [pc, #220]	@ (8001708 <WeightMeasurementTask+0x410>)
 800162a:	f7fe fe21 	bl	8000270 <strlen>
 800162e:	4603      	mov	r3, r0
 8001630:	b29a      	uxth	r2, r3
 8001632:	f04f 33ff 	mov.w	r3, #4294967295
 8001636:	4934      	ldr	r1, [pc, #208]	@ (8001708 <WeightMeasurementTask+0x410>)
 8001638:	4822      	ldr	r0, [pc, #136]	@ (80016c4 <WeightMeasurementTask+0x3cc>)
 800163a:	f002 ffad 	bl	8004598 <HAL_UART_Transmit>
		         drain_complete = true;
 800163e:	2301      	movs	r3, #1
 8001640:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe
		     }

		     // Step 3: After drain completes (back to ~1035ml), start chemical fill
		     if (drain_complete && !chemical_fill_done &&
 8001644:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001648:	2b00      	cmp	r3, #0
 800164a:	d06b      	beq.n	8001724 <WeightMeasurementTask+0x42c>
 800164c:	f897 30bd 	ldrb.w	r3, [r7, #189]	@ 0xbd
 8001650:	f083 0301 	eor.w	r3, r3, #1
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d064      	beq.n	8001724 <WeightMeasurementTask+0x42c>
		         get_wieght >= (1035 - TOLERANCE) && get_wieght <= (1035 + TOLERANCE)) {
 800165a:	4b26      	ldr	r3, [pc, #152]	@ (80016f4 <WeightMeasurementTask+0x3fc>)
 800165c:	edd3 7a00 	vldr	s15, [r3]
		     if (drain_complete && !chemical_fill_done &&
 8001660:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800170c <WeightMeasurementTask+0x414>
 8001664:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800166c:	db5a      	blt.n	8001724 <WeightMeasurementTask+0x42c>
		         get_wieght >= (1035 - TOLERANCE) && get_wieght <= (1035 + TOLERANCE)) {
 800166e:	4b21      	ldr	r3, [pc, #132]	@ (80016f4 <WeightMeasurementTask+0x3fc>)
 8001670:	edd3 7a00 	vldr	s15, [r3]
 8001674:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001710 <WeightMeasurementTask+0x418>
 8001678:	eef4 7ac7 	vcmpe.f32	s15, s14
 800167c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001680:	d850      	bhi.n	8001724 <WeightMeasurementTask+0x42c>
		         Reset_GPIO_Pins1();
 8001682:	f7ff fd95 	bl	80011b0 <Reset_GPIO_Pins1>
		         cycle1(cycle_6, sizeof(cycle_6) / sizeof(cycle_6[0]));
 8001686:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800168a:	2103      	movs	r1, #3
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fd9b 	bl	80011c8 <cycle1>
		         snprintf(buffer, sizeof(buffer), "Starting chemical filling\n\r");
 8001692:	4a23      	ldr	r2, [pc, #140]	@ (8001720 <WeightMeasurementTask+0x428>)
 8001694:	2164      	movs	r1, #100	@ 0x64
 8001696:	481c      	ldr	r0, [pc, #112]	@ (8001708 <WeightMeasurementTask+0x410>)
 8001698:	f005 fef2 	bl	8007480 <sniprintf>
		         HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800169c:	481a      	ldr	r0, [pc, #104]	@ (8001708 <WeightMeasurementTask+0x410>)
 800169e:	f7fe fde7 	bl	8000270 <strlen>
 80016a2:	4603      	mov	r3, r0
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	f04f 33ff 	mov.w	r3, #4294967295
 80016aa:	4917      	ldr	r1, [pc, #92]	@ (8001708 <WeightMeasurementTask+0x410>)
 80016ac:	4805      	ldr	r0, [pc, #20]	@ (80016c4 <WeightMeasurementTask+0x3cc>)
 80016ae:	f002 ff73 	bl	8004598 <HAL_UART_Transmit>
		         chemical_fill_done = true;
 80016b2:	2301      	movs	r3, #1
 80016b4:	f887 30bd 	strb.w	r3, [r7, #189]	@ 0xbd
 80016b8:	e034      	b.n	8001724 <WeightMeasurementTask+0x42c>
 80016ba:	bf00      	nop
 80016bc:	0800ad80 	.word	0x0800ad80
 80016c0:	20000600 	.word	0x20000600
 80016c4:	20000490 	.word	0x20000490
 80016c8:	0800ad90 	.word	0x0800ad90
 80016cc:	20000664 	.word	0x20000664
 80016d0:	0800af58 	.word	0x0800af58
 80016d4:	0800af6c 	.word	0x0800af6c
 80016d8:	0800af80 	.word	0x0800af80
 80016dc:	0800af94 	.word	0x0800af94
 80016e0:	0800afa4 	.word	0x0800afa4
 80016e4:	0800afb0 	.word	0x0800afb0
 80016e8:	0800afbc 	.word	0x0800afbc
 80016ec:	0800afc8 	.word	0x0800afc8
 80016f0:	0800afd4 	.word	0x0800afd4
 80016f4:	200005fc 	.word	0x200005fc
 80016f8:	200005f8 	.word	0x200005f8
 80016fc:	0800ada0 	.word	0x0800ada0
 8001700:	20000594 	.word	0x20000594
 8001704:	0800adbc 	.word	0x0800adbc
 8001708:	200006c8 	.word	0x200006c8
 800170c:	44810000 	.word	0x44810000
 8001710:	4481c000 	.word	0x4481c000
 8001714:	0800ae00 	.word	0x0800ae00
 8001718:	44bb8000 	.word	0x44bb8000
 800171c:	0800ae24 	.word	0x0800ae24
 8001720:	0800ae48 	.word	0x0800ae48
		     }

		     // Step 4: When chemical fill reaches 1053ml, start second water fill
		     if (chemical_fill_done && !second_fill_done &&
 8001724:	f897 30bd 	ldrb.w	r3, [r7, #189]	@ 0xbd
 8001728:	2b00      	cmp	r3, #0
 800172a:	d035      	beq.n	8001798 <WeightMeasurementTask+0x4a0>
 800172c:	f897 30bc 	ldrb.w	r3, [r7, #188]	@ 0xbc
 8001730:	f083 0301 	eor.w	r3, r3, #1
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d02e      	beq.n	8001798 <WeightMeasurementTask+0x4a0>
		         get_wieght >= (1053 - TOLERANCE) && get_wieght <= (1053 + TOLERANCE)) {
 800173a:	4b8f      	ldr	r3, [pc, #572]	@ (8001978 <WeightMeasurementTask+0x680>)
 800173c:	edd3 7a00 	vldr	s15, [r3]
		     if (chemical_fill_done && !second_fill_done &&
 8001740:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 800197c <WeightMeasurementTask+0x684>
 8001744:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800174c:	db24      	blt.n	8001798 <WeightMeasurementTask+0x4a0>
		         get_wieght >= (1053 - TOLERANCE) && get_wieght <= (1053 + TOLERANCE)) {
 800174e:	4b8a      	ldr	r3, [pc, #552]	@ (8001978 <WeightMeasurementTask+0x680>)
 8001750:	edd3 7a00 	vldr	s15, [r3]
 8001754:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8001980 <WeightMeasurementTask+0x688>
 8001758:	eef4 7ac7 	vcmpe.f32	s15, s14
 800175c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001760:	d81a      	bhi.n	8001798 <WeightMeasurementTask+0x4a0>
		         Reset_GPIO_Pins1();
 8001762:	f7ff fd25 	bl	80011b0 <Reset_GPIO_Pins1>
		         cycle1(cycle_7, sizeof(cycle_7) / sizeof(cycle_7[0]));
 8001766:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800176a:	2104      	movs	r1, #4
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff fd2b 	bl	80011c8 <cycle1>
		         snprintf(buffer, sizeof(buffer), "Chemical fill complete, starting water filling\n\r");
 8001772:	4a84      	ldr	r2, [pc, #528]	@ (8001984 <WeightMeasurementTask+0x68c>)
 8001774:	2164      	movs	r1, #100	@ 0x64
 8001776:	4884      	ldr	r0, [pc, #528]	@ (8001988 <WeightMeasurementTask+0x690>)
 8001778:	f005 fe82 	bl	8007480 <sniprintf>
		         HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800177c:	4882      	ldr	r0, [pc, #520]	@ (8001988 <WeightMeasurementTask+0x690>)
 800177e:	f7fe fd77 	bl	8000270 <strlen>
 8001782:	4603      	mov	r3, r0
 8001784:	b29a      	uxth	r2, r3
 8001786:	f04f 33ff 	mov.w	r3, #4294967295
 800178a:	497f      	ldr	r1, [pc, #508]	@ (8001988 <WeightMeasurementTask+0x690>)
 800178c:	487f      	ldr	r0, [pc, #508]	@ (800198c <WeightMeasurementTask+0x694>)
 800178e:	f002 ff03 	bl	8004598 <HAL_UART_Transmit>
		         second_fill_done = true;
 8001792:	2301      	movs	r3, #1
 8001794:	f887 30bc 	strb.w	r3, [r7, #188]	@ 0xbc
		     }

		     // Step 5: When second fill reaches 1644ml, start A→V flush
		     if (second_fill_done && !flush_a_to_v_done &&
 8001798:	f897 30bc 	ldrb.w	r3, [r7, #188]	@ 0xbc
 800179c:	2b00      	cmp	r3, #0
 800179e:	d035      	beq.n	800180c <WeightMeasurementTask+0x514>
 80017a0:	f897 30bb 	ldrb.w	r3, [r7, #187]	@ 0xbb
 80017a4:	f083 0301 	eor.w	r3, r3, #1
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d02e      	beq.n	800180c <WeightMeasurementTask+0x514>
		         get_wieght >= (1651 - TOLERANCE) && get_wieght <= (1651 + TOLERANCE)) {
 80017ae:	4b72      	ldr	r3, [pc, #456]	@ (8001978 <WeightMeasurementTask+0x680>)
 80017b0:	edd3 7a00 	vldr	s15, [r3]
		     if (second_fill_done && !flush_a_to_v_done &&
 80017b4:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8001990 <WeightMeasurementTask+0x698>
 80017b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c0:	db24      	blt.n	800180c <WeightMeasurementTask+0x514>
		         get_wieght >= (1651 - TOLERANCE) && get_wieght <= (1651 + TOLERANCE)) {
 80017c2:	4b6d      	ldr	r3, [pc, #436]	@ (8001978 <WeightMeasurementTask+0x680>)
 80017c4:	edd3 7a00 	vldr	s15, [r3]
 80017c8:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8001994 <WeightMeasurementTask+0x69c>
 80017cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d4:	d81a      	bhi.n	800180c <WeightMeasurementTask+0x514>
		         Reset_GPIO_Pins1();
 80017d6:	f7ff fceb 	bl	80011b0 <Reset_GPIO_Pins1>
		         cycle1(cycle_8, sizeof(cycle_8) / sizeof(cycle_8[0]));
 80017da:	f107 0318 	add.w	r3, r7, #24
 80017de:	2103      	movs	r1, #3
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff fcf1 	bl	80011c8 <cycle1>
		         snprintf(buffer, sizeof(buffer), "Water fill complete, flushing A→V (200ml)\n\r");
 80017e6:	4a6c      	ldr	r2, [pc, #432]	@ (8001998 <WeightMeasurementTask+0x6a0>)
 80017e8:	2164      	movs	r1, #100	@ 0x64
 80017ea:	4867      	ldr	r0, [pc, #412]	@ (8001988 <WeightMeasurementTask+0x690>)
 80017ec:	f005 fe48 	bl	8007480 <sniprintf>
		         HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80017f0:	4865      	ldr	r0, [pc, #404]	@ (8001988 <WeightMeasurementTask+0x690>)
 80017f2:	f7fe fd3d 	bl	8000270 <strlen>
 80017f6:	4603      	mov	r3, r0
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	f04f 33ff 	mov.w	r3, #4294967295
 80017fe:	4962      	ldr	r1, [pc, #392]	@ (8001988 <WeightMeasurementTask+0x690>)
 8001800:	4862      	ldr	r0, [pc, #392]	@ (800198c <WeightMeasurementTask+0x694>)
 8001802:	f002 fec9 	bl	8004598 <HAL_UART_Transmit>
		         flush_a_to_v_done = true;
 8001806:	2301      	movs	r3, #1
 8001808:	f887 30bb 	strb.w	r3, [r7, #187]	@ 0xbb
		     }

		     // Step 6: When A→V flush reaches 1444ml, start V→A flush
		     if (flush_a_to_v_done && !flush_v_to_a_done &&
 800180c:	f897 30bb 	ldrb.w	r3, [r7, #187]	@ 0xbb
 8001810:	2b00      	cmp	r3, #0
 8001812:	d035      	beq.n	8001880 <WeightMeasurementTask+0x588>
 8001814:	f897 30ba 	ldrb.w	r3, [r7, #186]	@ 0xba
 8001818:	f083 0301 	eor.w	r3, r3, #1
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d02e      	beq.n	8001880 <WeightMeasurementTask+0x588>
		         get_wieght >= (1444 - TOLERANCE) && get_wieght <= (1444 + TOLERANCE)) {
 8001822:	4b55      	ldr	r3, [pc, #340]	@ (8001978 <WeightMeasurementTask+0x680>)
 8001824:	edd3 7a00 	vldr	s15, [r3]
		     if (flush_a_to_v_done && !flush_v_to_a_done &&
 8001828:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 800199c <WeightMeasurementTask+0x6a4>
 800182c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001834:	db24      	blt.n	8001880 <WeightMeasurementTask+0x588>
		         get_wieght >= (1444 - TOLERANCE) && get_wieght <= (1444 + TOLERANCE)) {
 8001836:	4b50      	ldr	r3, [pc, #320]	@ (8001978 <WeightMeasurementTask+0x680>)
 8001838:	edd3 7a00 	vldr	s15, [r3]
 800183c:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80019a0 <WeightMeasurementTask+0x6a8>
 8001840:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001848:	d81a      	bhi.n	8001880 <WeightMeasurementTask+0x588>
		         Reset_GPIO_Pins1();
 800184a:	f7ff fcb1 	bl	80011b0 <Reset_GPIO_Pins1>
		         cycle1(cycle_9, sizeof(cycle_9) / sizeof(cycle_9[0]));
 800184e:	f107 030c 	add.w	r3, r7, #12
 8001852:	2103      	movs	r1, #3
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff fcb7 	bl	80011c8 <cycle1>
		         snprintf(buffer, sizeof(buffer), "A→V flush complete, flushing V→A (200ml)\n\r");
 800185a:	4a52      	ldr	r2, [pc, #328]	@ (80019a4 <WeightMeasurementTask+0x6ac>)
 800185c:	2164      	movs	r1, #100	@ 0x64
 800185e:	484a      	ldr	r0, [pc, #296]	@ (8001988 <WeightMeasurementTask+0x690>)
 8001860:	f005 fe0e 	bl	8007480 <sniprintf>
		         HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001864:	4848      	ldr	r0, [pc, #288]	@ (8001988 <WeightMeasurementTask+0x690>)
 8001866:	f7fe fd03 	bl	8000270 <strlen>
 800186a:	4603      	mov	r3, r0
 800186c:	b29a      	uxth	r2, r3
 800186e:	f04f 33ff 	mov.w	r3, #4294967295
 8001872:	4945      	ldr	r1, [pc, #276]	@ (8001988 <WeightMeasurementTask+0x690>)
 8001874:	4845      	ldr	r0, [pc, #276]	@ (800198c <WeightMeasurementTask+0x694>)
 8001876:	f002 fe8f 	bl	8004598 <HAL_UART_Transmit>
		         flush_v_to_a_done = true;
 800187a:	2301      	movs	r3, #1
 800187c:	f887 30ba 	strb.w	r3, [r7, #186]	@ 0xba
		     }

		     // Step 7: When V→A flush reaches 1244ml, start DO→DI flush
		     if (flush_v_to_a_done && !flush_do_to_di_done &&
 8001880:	f897 30ba 	ldrb.w	r3, [r7, #186]	@ 0xba
 8001884:	2b00      	cmp	r3, #0
 8001886:	d034      	beq.n	80018f2 <WeightMeasurementTask+0x5fa>
 8001888:	f897 30b9 	ldrb.w	r3, [r7, #185]	@ 0xb9
 800188c:	f083 0301 	eor.w	r3, r3, #1
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	d02d      	beq.n	80018f2 <WeightMeasurementTask+0x5fa>
		         get_wieght >= (1244 - TOLERANCE) && get_wieght <= (1244 + TOLERANCE)) {
 8001896:	4b38      	ldr	r3, [pc, #224]	@ (8001978 <WeightMeasurementTask+0x680>)
 8001898:	edd3 7a00 	vldr	s15, [r3]
		     if (flush_v_to_a_done && !flush_do_to_di_done &&
 800189c:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 80019a8 <WeightMeasurementTask+0x6b0>
 80018a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a8:	db23      	blt.n	80018f2 <WeightMeasurementTask+0x5fa>
		         get_wieght >= (1244 - TOLERANCE) && get_wieght <= (1244 + TOLERANCE)) {
 80018aa:	4b33      	ldr	r3, [pc, #204]	@ (8001978 <WeightMeasurementTask+0x680>)
 80018ac:	edd3 7a00 	vldr	s15, [r3]
 80018b0:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 80019ac <WeightMeasurementTask+0x6b4>
 80018b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018bc:	d819      	bhi.n	80018f2 <WeightMeasurementTask+0x5fa>
		         Reset_GPIO_Pins1();
 80018be:	f7ff fc77 	bl	80011b0 <Reset_GPIO_Pins1>
		         cycle1(cycle_10, sizeof(cycle_10) / sizeof(cycle_10[0]));
 80018c2:	463b      	mov	r3, r7
 80018c4:	2103      	movs	r1, #3
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff fc7e 	bl	80011c8 <cycle1>
		         snprintf(buffer, sizeof(buffer), "V→A flush complete, flushing DO→DI (250ml)\n\r");
 80018cc:	4a38      	ldr	r2, [pc, #224]	@ (80019b0 <WeightMeasurementTask+0x6b8>)
 80018ce:	2164      	movs	r1, #100	@ 0x64
 80018d0:	482d      	ldr	r0, [pc, #180]	@ (8001988 <WeightMeasurementTask+0x690>)
 80018d2:	f005 fdd5 	bl	8007480 <sniprintf>
		         HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80018d6:	482c      	ldr	r0, [pc, #176]	@ (8001988 <WeightMeasurementTask+0x690>)
 80018d8:	f7fe fcca 	bl	8000270 <strlen>
 80018dc:	4603      	mov	r3, r0
 80018de:	b29a      	uxth	r2, r3
 80018e0:	f04f 33ff 	mov.w	r3, #4294967295
 80018e4:	4928      	ldr	r1, [pc, #160]	@ (8001988 <WeightMeasurementTask+0x690>)
 80018e6:	4829      	ldr	r0, [pc, #164]	@ (800198c <WeightMeasurementTask+0x694>)
 80018e8:	f002 fe56 	bl	8004598 <HAL_UART_Transmit>
		         flush_do_to_di_done = true;
 80018ec:	2301      	movs	r3, #1
 80018ee:	f887 30b9 	strb.w	r3, [r7, #185]	@ 0xb9
		     }

		     // Step 8: When DO→DI flush returns to 1035ml, reset all flags to restart cycle
		     if (flush_do_to_di_done &&
 80018f2:	f897 30b9 	ldrb.w	r3, [r7, #185]	@ 0xb9
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d03a      	beq.n	8001970 <WeightMeasurementTask+0x678>
		         get_wieght >= (1035 - TOLERANCE) && get_wieght <= (1035 + TOLERANCE)) {
 80018fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001978 <WeightMeasurementTask+0x680>)
 80018fc:	edd3 7a00 	vldr	s15, [r3]
		     if (flush_do_to_di_done &&
 8001900:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80019b4 <WeightMeasurementTask+0x6bc>
 8001904:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800190c:	db30      	blt.n	8001970 <WeightMeasurementTask+0x678>
		         get_wieght >= (1035 - TOLERANCE) && get_wieght <= (1035 + TOLERANCE)) {
 800190e:	4b1a      	ldr	r3, [pc, #104]	@ (8001978 <WeightMeasurementTask+0x680>)
 8001910:	edd3 7a00 	vldr	s15, [r3]
 8001914:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80019b8 <WeightMeasurementTask+0x6c0>
 8001918:	eef4 7ac7 	vcmpe.f32	s15, s14
 800191c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001920:	d826      	bhi.n	8001970 <WeightMeasurementTask+0x678>
		         Reset_GPIO_Pins1();
 8001922:	f7ff fc45 	bl	80011b0 <Reset_GPIO_Pins1>
		         snprintf(buffer, sizeof(buffer), "Process complete! Ready for next cycle\n\r");
 8001926:	4a25      	ldr	r2, [pc, #148]	@ (80019bc <WeightMeasurementTask+0x6c4>)
 8001928:	2164      	movs	r1, #100	@ 0x64
 800192a:	4817      	ldr	r0, [pc, #92]	@ (8001988 <WeightMeasurementTask+0x690>)
 800192c:	f005 fda8 	bl	8007480 <sniprintf>
		         HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001930:	4815      	ldr	r0, [pc, #84]	@ (8001988 <WeightMeasurementTask+0x690>)
 8001932:	f7fe fc9d 	bl	8000270 <strlen>
 8001936:	4603      	mov	r3, r0
 8001938:	b29a      	uxth	r2, r3
 800193a:	f04f 33ff 	mov.w	r3, #4294967295
 800193e:	4912      	ldr	r1, [pc, #72]	@ (8001988 <WeightMeasurementTask+0x690>)
 8001940:	4812      	ldr	r0, [pc, #72]	@ (800198c <WeightMeasurementTask+0x694>)
 8001942:	f002 fe29 	bl	8004598 <HAL_UART_Transmit>

		         // Reset all flags to restart the cycle
		         initial_fill_done = false;
 8001946:	2300      	movs	r3, #0
 8001948:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
		         drain_complete = false;
 800194c:	2300      	movs	r3, #0
 800194e:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe
		         chemical_fill_done = false;
 8001952:	2300      	movs	r3, #0
 8001954:	f887 30bd 	strb.w	r3, [r7, #189]	@ 0xbd
		         second_fill_done = false;
 8001958:	2300      	movs	r3, #0
 800195a:	f887 30bc 	strb.w	r3, [r7, #188]	@ 0xbc
		         flush_a_to_v_done = false;
 800195e:	2300      	movs	r3, #0
 8001960:	f887 30bb 	strb.w	r3, [r7, #187]	@ 0xbb
		         flush_v_to_a_done = false;
 8001964:	2300      	movs	r3, #0
 8001966:	f887 30ba 	strb.w	r3, [r7, #186]	@ 0xba
		         flush_do_to_di_done = false;
 800196a:	2300      	movs	r3, #0
 800196c:	f887 30b9 	strb.w	r3, [r7, #185]	@ 0xb9
	            cycle10_done = 0;
	        }
		   }*/


		 osDelay(250);
 8001970:	20fa      	movs	r0, #250	@ 0xfa
 8001972:	f003 fc48 	bl	8005206 <osDelay>
		weight = HX711_GetWeight(offset, scale);
 8001976:	e5ac      	b.n	80014d2 <WeightMeasurementTask+0x1da>
 8001978:	200005fc 	.word	0x200005fc
 800197c:	44834000 	.word	0x44834000
 8001980:	44840000 	.word	0x44840000
 8001984:	0800ae64 	.word	0x0800ae64
 8001988:	200006c8 	.word	0x200006c8
 800198c:	20000490 	.word	0x20000490
 8001990:	44ce0000 	.word	0x44ce0000
 8001994:	44cec000 	.word	0x44cec000
 8001998:	0800ae98 	.word	0x0800ae98
 800199c:	44b42000 	.word	0x44b42000
 80019a0:	44b4e000 	.word	0x44b4e000
 80019a4:	0800aec8 	.word	0x0800aec8
 80019a8:	449b2000 	.word	0x449b2000
 80019ac:	449be000 	.word	0x449be000
 80019b0:	0800aef8 	.word	0x0800aef8
 80019b4:	44810000 	.word	0x44810000
 80019b8:	4481c000 	.word	0x4481c000
 80019bc:	0800af2c 	.word	0x0800af2c

080019c0 <Set_Valves>:
	}
}
*/
//  -------------------  These are the common function which will be use for rinse cycle and cleaning cycle  ------------------------

void Set_Valves(uint32_t *pins, uint8_t pin_count) {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	460b      	mov	r3, r1
 80019ca:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < pin_count; i++) {
 80019cc:	2300      	movs	r3, #0
 80019ce:	73fb      	strb	r3, [r7, #15]
 80019d0:	e00d      	b.n	80019ee <Set_Valves+0x2e>
        HAL_GPIO_WritePin(GPIOD, pins[i], GPIO_PIN_SET);  // Set pins high
 80019d2:	7bfb      	ldrb	r3, [r7, #15]
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	b29b      	uxth	r3, r3
 80019de:	2201      	movs	r2, #1
 80019e0:	4619      	mov	r1, r3
 80019e2:	4807      	ldr	r0, [pc, #28]	@ (8001a00 <Set_Valves+0x40>)
 80019e4:	f002 f8d6 	bl	8003b94 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < pin_count; i++) {
 80019e8:	7bfb      	ldrb	r3, [r7, #15]
 80019ea:	3301      	adds	r3, #1
 80019ec:	73fb      	strb	r3, [r7, #15]
 80019ee:	7bfa      	ldrb	r2, [r7, #15]
 80019f0:	78fb      	ldrb	r3, [r7, #3]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d3ed      	bcc.n	80019d2 <Set_Valves+0x12>
    }
}
 80019f6:	bf00      	nop
 80019f8:	bf00      	nop
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40020c00 	.word	0x40020c00

08001a04 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001a04:	b5b0      	push	{r4, r5, r7, lr}
 8001a06:	b08e      	sub	sp, #56	@ 0x38
 8001a08:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001a0a:	f000 fc53 	bl	80022b4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001a0e:	f000 f843 	bl	8001a98 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	MX_GPIO_Init();
 8001a12:	f000 f971 	bl	8001cf8 <MX_GPIO_Init>
	MX_DMA_Init();
 8001a16:	f000 f94f 	bl	8001cb8 <MX_DMA_Init>
	MX_USART1_UART_Init();
 8001a1a:	f000 f8f9 	bl	8001c10 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8001a1e:	f000 f921 	bl	8001c64 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8001a22:	f000 f8a3 	bl	8001b6c <MX_ADC1_Init>

	/* USER CODE BEGIN 2 */

	 HAL_UART_Receive_DMA(&huart2, rx_buffer, sizeof(rx_buffer));
 8001a26:	2209      	movs	r2, #9
 8001a28:	4915      	ldr	r1, [pc, #84]	@ (8001a80 <main+0x7c>)
 8001a2a:	4816      	ldr	r0, [pc, #88]	@ (8001a84 <main+0x80>)
 8001a2c:	f002 fe3f 	bl	80046ae <HAL_UART_Receive_DMA>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8001a30:	4b15      	ldr	r3, [pc, #84]	@ (8001a88 <main+0x84>)
 8001a32:	f107 041c 	add.w	r4, r7, #28
 8001a36:	461d      	mov	r5, r3
 8001a38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a3c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001a44:	f107 031c 	add.w	r3, r7, #28
 8001a48:	2100      	movs	r1, #0
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f003 fb8f 	bl	800516e <osThreadCreate>
 8001a50:	4603      	mov	r3, r0
 8001a52:	4a0e      	ldr	r2, [pc, #56]	@ (8001a8c <main+0x88>)
 8001a54:	6013      	str	r3, [r2, #0]

	/* definition and creation of myTask02 */
	osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 1024);
 8001a56:	4b0e      	ldr	r3, [pc, #56]	@ (8001a90 <main+0x8c>)
 8001a58:	463c      	mov	r4, r7
 8001a5a:	461d      	mov	r5, r3
 8001a5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a60:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a64:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8001a68:	463b      	mov	r3, r7
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f003 fb7e 	bl	800516e <osThreadCreate>
 8001a72:	4603      	mov	r3, r0
 8001a74:	4a07      	ldr	r2, [pc, #28]	@ (8001a94 <main+0x90>)
 8001a76:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8001a78:	f003 fb72 	bl	8005160 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8001a7c:	bf00      	nop
 8001a7e:	e7fd      	b.n	8001a7c <main+0x78>
 8001a80:	20000588 	.word	0x20000588
 8001a84:	200004d8 	.word	0x200004d8
 8001a88:	0800b014 	.word	0x0800b014
 8001a8c:	20000580 	.word	0x20000580
 8001a90:	0800b03c 	.word	0x0800b03c
 8001a94:	20000584 	.word	0x20000584

08001a98 <SystemClock_Config>:
}
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b094      	sub	sp, #80	@ 0x50
 8001a9c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001a9e:	f107 0320 	add.w	r3, r7, #32
 8001aa2:	2230      	movs	r2, #48	@ 0x30
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f005 fd81 	bl	80075ae <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001aac:	f107 030c 	add.w	r3, r7, #12
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	60da      	str	r2, [r3, #12]
 8001aba:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001abc:	2300      	movs	r3, #0
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	4b28      	ldr	r3, [pc, #160]	@ (8001b64 <SystemClock_Config+0xcc>)
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac4:	4a27      	ldr	r2, [pc, #156]	@ (8001b64 <SystemClock_Config+0xcc>)
 8001ac6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aca:	6413      	str	r3, [r2, #64]	@ 0x40
 8001acc:	4b25      	ldr	r3, [pc, #148]	@ (8001b64 <SystemClock_Config+0xcc>)
 8001ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ad8:	2300      	movs	r3, #0
 8001ada:	607b      	str	r3, [r7, #4]
 8001adc:	4b22      	ldr	r3, [pc, #136]	@ (8001b68 <SystemClock_Config+0xd0>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a21      	ldr	r2, [pc, #132]	@ (8001b68 <SystemClock_Config+0xd0>)
 8001ae2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ae6:	6013      	str	r3, [r2, #0]
 8001ae8:	4b1f      	ldr	r3, [pc, #124]	@ (8001b68 <SystemClock_Config+0xd0>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001af0:	607b      	str	r3, [r7, #4]
 8001af2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001af4:	2301      	movs	r3, #1
 8001af6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001af8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001afc:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001afe:	2302      	movs	r3, #2
 8001b00:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b02:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001b08:	2304      	movs	r3, #4
 8001b0a:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8001b0c:	23a8      	movs	r3, #168	@ 0xa8
 8001b0e:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b10:	2302      	movs	r3, #2
 8001b12:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b14:	2304      	movs	r3, #4
 8001b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001b18:	f107 0320 	add.w	r3, r7, #32
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f002 f853 	bl	8003bc8 <HAL_RCC_OscConfig>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <SystemClock_Config+0x94>
		Error_Handler();
 8001b28:	f000 f96a 	bl	8001e00 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001b2c:	230f      	movs	r3, #15
 8001b2e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b30:	2302      	movs	r3, #2
 8001b32:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b38:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001b3c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b42:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001b44:	f107 030c 	add.w	r3, r7, #12
 8001b48:	2105      	movs	r1, #5
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f002 fab4 	bl	80040b8 <HAL_RCC_ClockConfig>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <SystemClock_Config+0xc2>
		Error_Handler();
 8001b56:	f000 f953 	bl	8001e00 <Error_Handler>
	}
}
 8001b5a:	bf00      	nop
 8001b5c:	3750      	adds	r7, #80	@ 0x50
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40007000 	.word	0x40007000

08001b6c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001b72:	463b      	mov	r3, r7
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8001b7e:	4b21      	ldr	r3, [pc, #132]	@ (8001c04 <MX_ADC1_Init+0x98>)
 8001b80:	4a21      	ldr	r2, [pc, #132]	@ (8001c08 <MX_ADC1_Init+0x9c>)
 8001b82:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b84:	4b1f      	ldr	r3, [pc, #124]	@ (8001c04 <MX_ADC1_Init+0x98>)
 8001b86:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b8a:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001c04 <MX_ADC1_Init+0x98>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8001b92:	4b1c      	ldr	r3, [pc, #112]	@ (8001c04 <MX_ADC1_Init+0x98>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001b98:	4b1a      	ldr	r3, [pc, #104]	@ (8001c04 <MX_ADC1_Init+0x98>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b9e:	4b19      	ldr	r3, [pc, #100]	@ (8001c04 <MX_ADC1_Init+0x98>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ba6:	4b17      	ldr	r3, [pc, #92]	@ (8001c04 <MX_ADC1_Init+0x98>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bac:	4b15      	ldr	r3, [pc, #84]	@ (8001c04 <MX_ADC1_Init+0x98>)
 8001bae:	4a17      	ldr	r2, [pc, #92]	@ (8001c0c <MX_ADC1_Init+0xa0>)
 8001bb0:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bb2:	4b14      	ldr	r3, [pc, #80]	@ (8001c04 <MX_ADC1_Init+0x98>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001bb8:	4b12      	ldr	r3, [pc, #72]	@ (8001c04 <MX_ADC1_Init+0x98>)
 8001bba:	2201      	movs	r2, #1
 8001bbc:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001bbe:	4b11      	ldr	r3, [pc, #68]	@ (8001c04 <MX_ADC1_Init+0x98>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bc6:	4b0f      	ldr	r3, [pc, #60]	@ (8001c04 <MX_ADC1_Init+0x98>)
 8001bc8:	2201      	movs	r2, #1
 8001bca:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001bcc:	480d      	ldr	r0, [pc, #52]	@ (8001c04 <MX_ADC1_Init+0x98>)
 8001bce:	f000 fbe3 	bl	8002398 <HAL_ADC_Init>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_ADC1_Init+0x70>
		Error_Handler();
 8001bd8:	f000 f912 	bl	8001e00 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8001bdc:	2304      	movs	r3, #4
 8001bde:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001be0:	2301      	movs	r3, #1
 8001be2:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001be4:	2300      	movs	r3, #0
 8001be6:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001be8:	463b      	mov	r3, r7
 8001bea:	4619      	mov	r1, r3
 8001bec:	4805      	ldr	r0, [pc, #20]	@ (8001c04 <MX_ADC1_Init+0x98>)
 8001bee:	f000 fd81 	bl	80026f4 <HAL_ADC_ConfigChannel>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_ADC1_Init+0x90>
		Error_Handler();
 8001bf8:	f000 f902 	bl	8001e00 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001bfc:	bf00      	nop
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20000448 	.word	0x20000448
 8001c08:	40012000 	.word	0x40012000
 8001c0c:	0f000001 	.word	0x0f000001

08001c10 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001c14:	4b11      	ldr	r3, [pc, #68]	@ (8001c5c <MX_USART1_UART_Init+0x4c>)
 8001c16:	4a12      	ldr	r2, [pc, #72]	@ (8001c60 <MX_USART1_UART_Init+0x50>)
 8001c18:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001c1a:	4b10      	ldr	r3, [pc, #64]	@ (8001c5c <MX_USART1_UART_Init+0x4c>)
 8001c1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c20:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c22:	4b0e      	ldr	r3, [pc, #56]	@ (8001c5c <MX_USART1_UART_Init+0x4c>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001c28:	4b0c      	ldr	r3, [pc, #48]	@ (8001c5c <MX_USART1_UART_Init+0x4c>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c5c <MX_USART1_UART_Init+0x4c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001c34:	4b09      	ldr	r3, [pc, #36]	@ (8001c5c <MX_USART1_UART_Init+0x4c>)
 8001c36:	220c      	movs	r2, #12
 8001c38:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c3a:	4b08      	ldr	r3, [pc, #32]	@ (8001c5c <MX_USART1_UART_Init+0x4c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c40:	4b06      	ldr	r3, [pc, #24]	@ (8001c5c <MX_USART1_UART_Init+0x4c>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001c46:	4805      	ldr	r0, [pc, #20]	@ (8001c5c <MX_USART1_UART_Init+0x4c>)
 8001c48:	f002 fc56 	bl	80044f8 <HAL_UART_Init>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8001c52:	f000 f8d5 	bl	8001e00 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20000490 	.word	0x20000490
 8001c60:	40011000 	.word	0x40011000

08001c64 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001c68:	4b11      	ldr	r3, [pc, #68]	@ (8001cb0 <MX_USART2_UART_Init+0x4c>)
 8001c6a:	4a12      	ldr	r2, [pc, #72]	@ (8001cb4 <MX_USART2_UART_Init+0x50>)
 8001c6c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001c6e:	4b10      	ldr	r3, [pc, #64]	@ (8001cb0 <MX_USART2_UART_Init+0x4c>)
 8001c70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c74:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c76:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb0 <MX_USART2_UART_Init+0x4c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb0 <MX_USART2_UART_Init+0x4c>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001c82:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb0 <MX_USART2_UART_Init+0x4c>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001c88:	4b09      	ldr	r3, [pc, #36]	@ (8001cb0 <MX_USART2_UART_Init+0x4c>)
 8001c8a:	220c      	movs	r2, #12
 8001c8c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c8e:	4b08      	ldr	r3, [pc, #32]	@ (8001cb0 <MX_USART2_UART_Init+0x4c>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c94:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <MX_USART2_UART_Init+0x4c>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001c9a:	4805      	ldr	r0, [pc, #20]	@ (8001cb0 <MX_USART2_UART_Init+0x4c>)
 8001c9c:	f002 fc2c 	bl	80044f8 <HAL_UART_Init>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001ca6:	f000 f8ab 	bl	8001e00 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	200004d8 	.word	0x200004d8
 8001cb4:	40004400 	.word	0x40004400

08001cb8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	607b      	str	r3, [r7, #4]
 8001cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf4 <MX_DMA_Init+0x3c>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc6:	4a0b      	ldr	r2, [pc, #44]	@ (8001cf4 <MX_DMA_Init+0x3c>)
 8001cc8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cce:	4b09      	ldr	r3, [pc, #36]	@ (8001cf4 <MX_DMA_Init+0x3c>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cd6:	607b      	str	r3, [r7, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001cda:	2200      	movs	r2, #0
 8001cdc:	2105      	movs	r1, #5
 8001cde:	2010      	movs	r0, #16
 8001ce0:	f001 f801 	bl	8002ce6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001ce4:	2010      	movs	r0, #16
 8001ce6:	f001 f81a 	bl	8002d1e <HAL_NVIC_EnableIRQ>

}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40023800 	.word	0x40023800

08001cf8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001cfe:	f107 030c 	add.w	r3, r7, #12
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	605a      	str	r2, [r3, #4]
 8001d08:	609a      	str	r2, [r3, #8]
 8001d0a:	60da      	str	r2, [r3, #12]
 8001d0c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	4b31      	ldr	r3, [pc, #196]	@ (8001dd8 <MX_GPIO_Init+0xe0>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d16:	4a30      	ldr	r2, [pc, #192]	@ (8001dd8 <MX_GPIO_Init+0xe0>)
 8001d18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d1e:	4b2e      	ldr	r3, [pc, #184]	@ (8001dd8 <MX_GPIO_Init+0xe0>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d26:	60bb      	str	r3, [r7, #8]
 8001d28:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	607b      	str	r3, [r7, #4]
 8001d2e:	4b2a      	ldr	r3, [pc, #168]	@ (8001dd8 <MX_GPIO_Init+0xe0>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d32:	4a29      	ldr	r2, [pc, #164]	@ (8001dd8 <MX_GPIO_Init+0xe0>)
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d3a:	4b27      	ldr	r3, [pc, #156]	@ (8001dd8 <MX_GPIO_Init+0xe0>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	607b      	str	r3, [r7, #4]
 8001d44:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	603b      	str	r3, [r7, #0]
 8001d4a:	4b23      	ldr	r3, [pc, #140]	@ (8001dd8 <MX_GPIO_Init+0xe0>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4e:	4a22      	ldr	r2, [pc, #136]	@ (8001dd8 <MX_GPIO_Init+0xe0>)
 8001d50:	f043 0308 	orr.w	r3, r3, #8
 8001d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d56:	4b20      	ldr	r3, [pc, #128]	@ (8001dd8 <MX_GPIO_Init+0xe0>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5a:	f003 0308 	and.w	r3, r3, #8
 8001d5e:	603b      	str	r3, [r7, #0]
 8001d60:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1 | GPIO_PIN_12, GPIO_PIN_RESET);
 8001d62:	2200      	movs	r2, #0
 8001d64:	f241 0102 	movw	r1, #4098	@ 0x1002
 8001d68:	481c      	ldr	r0, [pc, #112]	@ (8001ddc <MX_GPIO_Init+0xe4>)
 8001d6a:	f001 ff13 	bl	8003b94 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f64f 717f 	movw	r1, #65407	@ 0xff7f
 8001d74:	481a      	ldr	r0, [pc, #104]	@ (8001de0 <MX_GPIO_Init+0xe8>)
 8001d76:	f001 ff0d 	bl	8003b94 <HAL_GPIO_WritePin>
					| GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_0
					| GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4
					| GPIO_PIN_5 | GPIO_PIN_6, GPIO_PIN_RESET);

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d86:	f107 030c 	add.w	r3, r7, #12
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4813      	ldr	r0, [pc, #76]	@ (8001ddc <MX_GPIO_Init+0xe4>)
 8001d8e:	f001 fd4d 	bl	800382c <HAL_GPIO_Init>

	/*Configure GPIO pins : PA1 PA12 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_12;
 8001d92:	f241 0302 	movw	r3, #4098	@ 0x1002
 8001d96:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da0:	2300      	movs	r3, #0
 8001da2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da4:	f107 030c 	add.w	r3, r7, #12
 8001da8:	4619      	mov	r1, r3
 8001daa:	480c      	ldr	r0, [pc, #48]	@ (8001ddc <MX_GPIO_Init+0xe4>)
 8001dac:	f001 fd3e 	bl	800382c <HAL_GPIO_Init>

	/*Configure GPIO pins : PD8 PD9 PD10 PD11
	 PD12 PD13 PD14 PD15
	 PD0 PD1 PD2 PD3
	 PD4 PD5 PD6 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11
 8001db0:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 8001db4:	60fb      	str	r3, [r7, #12]
			| GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_0
			| GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5
			| GPIO_PIN_6;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db6:	2301      	movs	r3, #1
 8001db8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dc2:	f107 030c 	add.w	r3, r7, #12
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4805      	ldr	r0, [pc, #20]	@ (8001de0 <MX_GPIO_Init+0xe8>)
 8001dca:	f001 fd2f 	bl	800382c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001dce:	bf00      	nop
 8001dd0:	3720      	adds	r7, #32
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	40020000 	.word	0x40020000
 8001de0:	40020c00 	.word	0x40020c00

08001de4 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
//		snprintf(buffer7, sizeof(buffer7), "Scale: %.2f\n\r:", scale);
//		HAL_UART_Transmit(&huart1, (uint8_t*) buffer7, strlen(buffer7),
//		HAL_MAX_DELAY);
	//}
//
	WeightMeasurementTask();
 8001dec:	f7ff fa84 	bl	80012f8 <WeightMeasurementTask>
	//Water_pressure_data();
	for (;;) {
 8001df0:	bf00      	nop
 8001df2:	e7fd      	b.n	8001df0 <StartDefaultTask+0xc>

08001df4 <StartTask02>:
 * @brief Function implementing the myTask02 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void const *argument) {
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask02 */
	/* Infinite loop */
	//ValveOperatingTask();
	//Rinsecycle();
	for(;;)
 8001dfc:	bf00      	nop
 8001dfe:	e7fd      	b.n	8001dfc <StartTask02+0x8>

08001e00 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e04:	b672      	cpsid	i
}
 8001e06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e08:	bf00      	nop
 8001e0a:	e7fd      	b.n	8001e08 <Error_Handler+0x8>

08001e0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	607b      	str	r3, [r7, #4]
 8001e16:	4b12      	ldr	r3, [pc, #72]	@ (8001e60 <HAL_MspInit+0x54>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1a:	4a11      	ldr	r2, [pc, #68]	@ (8001e60 <HAL_MspInit+0x54>)
 8001e1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e22:	4b0f      	ldr	r3, [pc, #60]	@ (8001e60 <HAL_MspInit+0x54>)
 8001e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e2a:	607b      	str	r3, [r7, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	603b      	str	r3, [r7, #0]
 8001e32:	4b0b      	ldr	r3, [pc, #44]	@ (8001e60 <HAL_MspInit+0x54>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e36:	4a0a      	ldr	r2, [pc, #40]	@ (8001e60 <HAL_MspInit+0x54>)
 8001e38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e3e:	4b08      	ldr	r3, [pc, #32]	@ (8001e60 <HAL_MspInit+0x54>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e46:	603b      	str	r3, [r7, #0]
 8001e48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	210f      	movs	r1, #15
 8001e4e:	f06f 0001 	mvn.w	r0, #1
 8001e52:	f000 ff48 	bl	8002ce6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40023800 	.word	0x40023800

08001e64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08a      	sub	sp, #40	@ 0x28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a17      	ldr	r2, [pc, #92]	@ (8001ee0 <HAL_ADC_MspInit+0x7c>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d127      	bne.n	8001ed6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	4b16      	ldr	r3, [pc, #88]	@ (8001ee4 <HAL_ADC_MspInit+0x80>)
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e8e:	4a15      	ldr	r2, [pc, #84]	@ (8001ee4 <HAL_ADC_MspInit+0x80>)
 8001e90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e94:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e96:	4b13      	ldr	r3, [pc, #76]	@ (8001ee4 <HAL_ADC_MspInit+0x80>)
 8001e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee4 <HAL_ADC_MspInit+0x80>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eaa:	4a0e      	ldr	r2, [pc, #56]	@ (8001ee4 <HAL_ADC_MspInit+0x80>)
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee4 <HAL_ADC_MspInit+0x80>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ebe:	2310      	movs	r3, #16
 8001ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eca:	f107 0314 	add.w	r3, r7, #20
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4805      	ldr	r0, [pc, #20]	@ (8001ee8 <HAL_ADC_MspInit+0x84>)
 8001ed2:	f001 fcab 	bl	800382c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001ed6:	bf00      	nop
 8001ed8:	3728      	adds	r7, #40	@ 0x28
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40012000 	.word	0x40012000
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40020000 	.word	0x40020000

08001eec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08c      	sub	sp, #48	@ 0x30
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef4:	f107 031c 	add.w	r3, r7, #28
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	60da      	str	r2, [r3, #12]
 8001f02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a4a      	ldr	r2, [pc, #296]	@ (8002034 <HAL_UART_MspInit+0x148>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d12d      	bne.n	8001f6a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61bb      	str	r3, [r7, #24]
 8001f12:	4b49      	ldr	r3, [pc, #292]	@ (8002038 <HAL_UART_MspInit+0x14c>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f16:	4a48      	ldr	r2, [pc, #288]	@ (8002038 <HAL_UART_MspInit+0x14c>)
 8001f18:	f043 0310 	orr.w	r3, r3, #16
 8001f1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f1e:	4b46      	ldr	r3, [pc, #280]	@ (8002038 <HAL_UART_MspInit+0x14c>)
 8001f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f22:	f003 0310 	and.w	r3, r3, #16
 8001f26:	61bb      	str	r3, [r7, #24]
 8001f28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]
 8001f2e:	4b42      	ldr	r3, [pc, #264]	@ (8002038 <HAL_UART_MspInit+0x14c>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f32:	4a41      	ldr	r2, [pc, #260]	@ (8002038 <HAL_UART_MspInit+0x14c>)
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f3a:	4b3f      	ldr	r3, [pc, #252]	@ (8002038 <HAL_UART_MspInit+0x14c>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	617b      	str	r3, [r7, #20]
 8001f44:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f46:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f50:	2300      	movs	r3, #0
 8001f52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f54:	2303      	movs	r3, #3
 8001f56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f58:	2307      	movs	r3, #7
 8001f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5c:	f107 031c 	add.w	r3, r7, #28
 8001f60:	4619      	mov	r1, r3
 8001f62:	4836      	ldr	r0, [pc, #216]	@ (800203c <HAL_UART_MspInit+0x150>)
 8001f64:	f001 fc62 	bl	800382c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f68:	e05f      	b.n	800202a <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART2)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a34      	ldr	r2, [pc, #208]	@ (8002040 <HAL_UART_MspInit+0x154>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d15a      	bne.n	800202a <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f74:	2300      	movs	r3, #0
 8001f76:	613b      	str	r3, [r7, #16]
 8001f78:	4b2f      	ldr	r3, [pc, #188]	@ (8002038 <HAL_UART_MspInit+0x14c>)
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7c:	4a2e      	ldr	r2, [pc, #184]	@ (8002038 <HAL_UART_MspInit+0x14c>)
 8001f7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f82:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f84:	4b2c      	ldr	r3, [pc, #176]	@ (8002038 <HAL_UART_MspInit+0x14c>)
 8001f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f8c:	613b      	str	r3, [r7, #16]
 8001f8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f90:	2300      	movs	r3, #0
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	4b28      	ldr	r3, [pc, #160]	@ (8002038 <HAL_UART_MspInit+0x14c>)
 8001f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f98:	4a27      	ldr	r2, [pc, #156]	@ (8002038 <HAL_UART_MspInit+0x14c>)
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fa0:	4b25      	ldr	r3, [pc, #148]	@ (8002038 <HAL_UART_MspInit+0x14c>)
 8001fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001fac:	230c      	movs	r3, #12
 8001fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fbc:	2307      	movs	r3, #7
 8001fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc0:	f107 031c 	add.w	r3, r7, #28
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	481d      	ldr	r0, [pc, #116]	@ (800203c <HAL_UART_MspInit+0x150>)
 8001fc8:	f001 fc30 	bl	800382c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001fcc:	4b1d      	ldr	r3, [pc, #116]	@ (8002044 <HAL_UART_MspInit+0x158>)
 8001fce:	4a1e      	ldr	r2, [pc, #120]	@ (8002048 <HAL_UART_MspInit+0x15c>)
 8001fd0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001fd2:	4b1c      	ldr	r3, [pc, #112]	@ (8002044 <HAL_UART_MspInit+0x158>)
 8001fd4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001fd8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fda:	4b1a      	ldr	r3, [pc, #104]	@ (8002044 <HAL_UART_MspInit+0x158>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fe0:	4b18      	ldr	r3, [pc, #96]	@ (8002044 <HAL_UART_MspInit+0x158>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fe6:	4b17      	ldr	r3, [pc, #92]	@ (8002044 <HAL_UART_MspInit+0x158>)
 8001fe8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fec:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fee:	4b15      	ldr	r3, [pc, #84]	@ (8002044 <HAL_UART_MspInit+0x158>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ff4:	4b13      	ldr	r3, [pc, #76]	@ (8002044 <HAL_UART_MspInit+0x158>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001ffa:	4b12      	ldr	r3, [pc, #72]	@ (8002044 <HAL_UART_MspInit+0x158>)
 8001ffc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002000:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002002:	4b10      	ldr	r3, [pc, #64]	@ (8002044 <HAL_UART_MspInit+0x158>)
 8002004:	2200      	movs	r2, #0
 8002006:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002008:	4b0e      	ldr	r3, [pc, #56]	@ (8002044 <HAL_UART_MspInit+0x158>)
 800200a:	2200      	movs	r2, #0
 800200c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800200e:	480d      	ldr	r0, [pc, #52]	@ (8002044 <HAL_UART_MspInit+0x158>)
 8002010:	f000 fea0 	bl	8002d54 <HAL_DMA_Init>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <HAL_UART_MspInit+0x132>
      Error_Handler();
 800201a:	f7ff fef1 	bl	8001e00 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a08      	ldr	r2, [pc, #32]	@ (8002044 <HAL_UART_MspInit+0x158>)
 8002022:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002024:	4a07      	ldr	r2, [pc, #28]	@ (8002044 <HAL_UART_MspInit+0x158>)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800202a:	bf00      	nop
 800202c:	3730      	adds	r7, #48	@ 0x30
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40011000 	.word	0x40011000
 8002038:	40023800 	.word	0x40023800
 800203c:	40020000 	.word	0x40020000
 8002040:	40004400 	.word	0x40004400
 8002044:	20000520 	.word	0x20000520
 8002048:	40026088 	.word	0x40026088

0800204c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002050:	bf00      	nop
 8002052:	e7fd      	b.n	8002050 <NMI_Handler+0x4>

08002054 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002058:	bf00      	nop
 800205a:	e7fd      	b.n	8002058 <HardFault_Handler+0x4>

0800205c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002060:	bf00      	nop
 8002062:	e7fd      	b.n	8002060 <MemManage_Handler+0x4>

08002064 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002068:	bf00      	nop
 800206a:	e7fd      	b.n	8002068 <BusFault_Handler+0x4>

0800206c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002070:	bf00      	nop
 8002072:	e7fd      	b.n	8002070 <UsageFault_Handler+0x4>

08002074 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002078:	bf00      	nop
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002086:	f000 f967 	bl	8002358 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800208a:	f003 fe4b 	bl	8005d24 <xTaskGetSchedulerState>
 800208e:	4603      	mov	r3, r0
 8002090:	2b01      	cmp	r3, #1
 8002092:	d001      	beq.n	8002098 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002094:	f004 f888 	bl	80061a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002098:	bf00      	nop
 800209a:	bd80      	pop	{r7, pc}

0800209c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80020a0:	4802      	ldr	r0, [pc, #8]	@ (80020ac <DMA1_Stream5_IRQHandler+0x10>)
 80020a2:	f000 ff5d 	bl	8002f60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000520 	.word	0x20000520

080020b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  return 1;
 80020b4:	2301      	movs	r3, #1
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <_kill>:

int _kill(int pid, int sig)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020ca:	f005 fac3 	bl	8007654 <__errno>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2216      	movs	r2, #22
 80020d2:	601a      	str	r2, [r3, #0]
  return -1;
 80020d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <_exit>:

void _exit (int status)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020e8:	f04f 31ff 	mov.w	r1, #4294967295
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7ff ffe7 	bl	80020c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020f2:	bf00      	nop
 80020f4:	e7fd      	b.n	80020f2 <_exit+0x12>

080020f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b086      	sub	sp, #24
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	60f8      	str	r0, [r7, #12]
 80020fe:	60b9      	str	r1, [r7, #8]
 8002100:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002102:	2300      	movs	r3, #0
 8002104:	617b      	str	r3, [r7, #20]
 8002106:	e00a      	b.n	800211e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002108:	f3af 8000 	nop.w
 800210c:	4601      	mov	r1, r0
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	1c5a      	adds	r2, r3, #1
 8002112:	60ba      	str	r2, [r7, #8]
 8002114:	b2ca      	uxtb	r2, r1
 8002116:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	3301      	adds	r3, #1
 800211c:	617b      	str	r3, [r7, #20]
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	429a      	cmp	r2, r3
 8002124:	dbf0      	blt.n	8002108 <_read+0x12>
  }

  return len;
 8002126:	687b      	ldr	r3, [r7, #4]
}
 8002128:	4618      	mov	r0, r3
 800212a:	3718      	adds	r7, #24
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
 8002140:	e009      	b.n	8002156 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	1c5a      	adds	r2, r3, #1
 8002146:	60ba      	str	r2, [r7, #8]
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	3301      	adds	r3, #1
 8002154:	617b      	str	r3, [r7, #20]
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	429a      	cmp	r2, r3
 800215c:	dbf1      	blt.n	8002142 <_write+0x12>
  }
  return len;
 800215e:	687b      	ldr	r3, [r7, #4]
}
 8002160:	4618      	mov	r0, r3
 8002162:	3718      	adds	r7, #24
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <_close>:

int _close(int file)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002170:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002174:	4618      	mov	r0, r3
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002190:	605a      	str	r2, [r3, #4]
  return 0;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <_isatty>:

int _isatty(int file)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021a8:	2301      	movs	r3, #1
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b085      	sub	sp, #20
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	60f8      	str	r0, [r7, #12]
 80021be:	60b9      	str	r1, [r7, #8]
 80021c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3714      	adds	r7, #20
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021d8:	4a14      	ldr	r2, [pc, #80]	@ (800222c <_sbrk+0x5c>)
 80021da:	4b15      	ldr	r3, [pc, #84]	@ (8002230 <_sbrk+0x60>)
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021e4:	4b13      	ldr	r3, [pc, #76]	@ (8002234 <_sbrk+0x64>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d102      	bne.n	80021f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021ec:	4b11      	ldr	r3, [pc, #68]	@ (8002234 <_sbrk+0x64>)
 80021ee:	4a12      	ldr	r2, [pc, #72]	@ (8002238 <_sbrk+0x68>)
 80021f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021f2:	4b10      	ldr	r3, [pc, #64]	@ (8002234 <_sbrk+0x64>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4413      	add	r3, r2
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d207      	bcs.n	8002210 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002200:	f005 fa28 	bl	8007654 <__errno>
 8002204:	4603      	mov	r3, r0
 8002206:	220c      	movs	r2, #12
 8002208:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800220a:	f04f 33ff 	mov.w	r3, #4294967295
 800220e:	e009      	b.n	8002224 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002210:	4b08      	ldr	r3, [pc, #32]	@ (8002234 <_sbrk+0x64>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002216:	4b07      	ldr	r3, [pc, #28]	@ (8002234 <_sbrk+0x64>)
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4413      	add	r3, r2
 800221e:	4a05      	ldr	r2, [pc, #20]	@ (8002234 <_sbrk+0x64>)
 8002220:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002222:	68fb      	ldr	r3, [r7, #12]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3718      	adds	r7, #24
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	20020000 	.word	0x20020000
 8002230:	00000400 	.word	0x00000400
 8002234:	2000072c 	.word	0x2000072c
 8002238:	200045f8 	.word	0x200045f8

0800223c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002240:	4b06      	ldr	r3, [pc, #24]	@ (800225c <SystemInit+0x20>)
 8002242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002246:	4a05      	ldr	r2, [pc, #20]	@ (800225c <SystemInit+0x20>)
 8002248:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800224c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002250:	bf00      	nop
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	e000ed00 	.word	0xe000ed00

08002260 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002260:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002298 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002264:	f7ff ffea 	bl	800223c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002268:	480c      	ldr	r0, [pc, #48]	@ (800229c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800226a:	490d      	ldr	r1, [pc, #52]	@ (80022a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800226c:	4a0d      	ldr	r2, [pc, #52]	@ (80022a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800226e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002270:	e002      	b.n	8002278 <LoopCopyDataInit>

08002272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002276:	3304      	adds	r3, #4

08002278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800227a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800227c:	d3f9      	bcc.n	8002272 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800227e:	4a0a      	ldr	r2, [pc, #40]	@ (80022a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002280:	4c0a      	ldr	r4, [pc, #40]	@ (80022ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8002282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002284:	e001      	b.n	800228a <LoopFillZerobss>

08002286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002288:	3204      	adds	r2, #4

0800228a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800228a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800228c:	d3fb      	bcc.n	8002286 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800228e:	f005 f9e7 	bl	8007660 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002292:	f7ff fbb7 	bl	8001a04 <main>
  bx  lr    
 8002296:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002298:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800229c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022a0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80022a4:	0800b4c0 	.word	0x0800b4c0
  ldr r2, =_sbss
 80022a8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80022ac:	200045f4 	.word	0x200045f4

080022b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022b0:	e7fe      	b.n	80022b0 <ADC_IRQHandler>
	...

080022b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022b8:	4b0e      	ldr	r3, [pc, #56]	@ (80022f4 <HAL_Init+0x40>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a0d      	ldr	r2, [pc, #52]	@ (80022f4 <HAL_Init+0x40>)
 80022be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022c4:	4b0b      	ldr	r3, [pc, #44]	@ (80022f4 <HAL_Init+0x40>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a0a      	ldr	r2, [pc, #40]	@ (80022f4 <HAL_Init+0x40>)
 80022ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022d0:	4b08      	ldr	r3, [pc, #32]	@ (80022f4 <HAL_Init+0x40>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a07      	ldr	r2, [pc, #28]	@ (80022f4 <HAL_Init+0x40>)
 80022d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022dc:	2003      	movs	r0, #3
 80022de:	f000 fcf7 	bl	8002cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022e2:	200f      	movs	r0, #15
 80022e4:	f000 f808 	bl	80022f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022e8:	f7ff fd90 	bl	8001e0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40023c00 	.word	0x40023c00

080022f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002300:	4b12      	ldr	r3, [pc, #72]	@ (800234c <HAL_InitTick+0x54>)
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	4b12      	ldr	r3, [pc, #72]	@ (8002350 <HAL_InitTick+0x58>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	4619      	mov	r1, r3
 800230a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800230e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002312:	fbb2 f3f3 	udiv	r3, r2, r3
 8002316:	4618      	mov	r0, r3
 8002318:	f000 fd0f 	bl	8002d3a <HAL_SYSTICK_Config>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e00e      	b.n	8002344 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2b0f      	cmp	r3, #15
 800232a:	d80a      	bhi.n	8002342 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800232c:	2200      	movs	r2, #0
 800232e:	6879      	ldr	r1, [r7, #4]
 8002330:	f04f 30ff 	mov.w	r0, #4294967295
 8002334:	f000 fcd7 	bl	8002ce6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002338:	4a06      	ldr	r2, [pc, #24]	@ (8002354 <HAL_InitTick+0x5c>)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800233e:	2300      	movs	r3, #0
 8002340:	e000      	b.n	8002344 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
}
 8002344:	4618      	mov	r0, r3
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	20000000 	.word	0x20000000
 8002350:	20000008 	.word	0x20000008
 8002354:	20000004 	.word	0x20000004

08002358 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800235c:	4b06      	ldr	r3, [pc, #24]	@ (8002378 <HAL_IncTick+0x20>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	461a      	mov	r2, r3
 8002362:	4b06      	ldr	r3, [pc, #24]	@ (800237c <HAL_IncTick+0x24>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4413      	add	r3, r2
 8002368:	4a04      	ldr	r2, [pc, #16]	@ (800237c <HAL_IncTick+0x24>)
 800236a:	6013      	str	r3, [r2, #0]
}
 800236c:	bf00      	nop
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	20000008 	.word	0x20000008
 800237c:	20000730 	.word	0x20000730

08002380 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  return uwTick;
 8002384:	4b03      	ldr	r3, [pc, #12]	@ (8002394 <HAL_GetTick+0x14>)
 8002386:	681b      	ldr	r3, [r3, #0]
}
 8002388:	4618      	mov	r0, r3
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	20000730 	.word	0x20000730

08002398 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023a0:	2300      	movs	r3, #0
 80023a2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e033      	b.n	8002416 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d109      	bne.n	80023ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7ff fd54 	bl	8001e64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ce:	f003 0310 	and.w	r3, r3, #16
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d118      	bne.n	8002408 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023da:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80023de:	f023 0302 	bic.w	r3, r3, #2
 80023e2:	f043 0202 	orr.w	r2, r3, #2
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 faa4 	bl	8002938 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fa:	f023 0303 	bic.w	r3, r3, #3
 80023fe:	f043 0201 	orr.w	r2, r3, #1
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	641a      	str	r2, [r3, #64]	@ 0x40
 8002406:	e001      	b.n	800240c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002414:	7bfb      	ldrb	r3, [r7, #15]
}
 8002416:	4618      	mov	r0, r3
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
	...

08002420 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002428:	2300      	movs	r3, #0
 800242a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002432:	2b01      	cmp	r3, #1
 8002434:	d101      	bne.n	800243a <HAL_ADC_Start+0x1a>
 8002436:	2302      	movs	r3, #2
 8002438:	e0b2      	b.n	80025a0 <HAL_ADC_Start+0x180>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b01      	cmp	r3, #1
 800244e:	d018      	beq.n	8002482 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f042 0201 	orr.w	r2, r2, #1
 800245e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002460:	4b52      	ldr	r3, [pc, #328]	@ (80025ac <HAL_ADC_Start+0x18c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a52      	ldr	r2, [pc, #328]	@ (80025b0 <HAL_ADC_Start+0x190>)
 8002466:	fba2 2303 	umull	r2, r3, r2, r3
 800246a:	0c9a      	lsrs	r2, r3, #18
 800246c:	4613      	mov	r3, r2
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	4413      	add	r3, r2
 8002472:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002474:	e002      	b.n	800247c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	3b01      	subs	r3, #1
 800247a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f9      	bne.n	8002476 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b01      	cmp	r3, #1
 800248e:	d17a      	bne.n	8002586 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002494:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002498:	f023 0301 	bic.w	r3, r3, #1
 800249c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d007      	beq.n	80024c2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80024ba:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024ce:	d106      	bne.n	80024de <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d4:	f023 0206 	bic.w	r2, r3, #6
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	645a      	str	r2, [r3, #68]	@ 0x44
 80024dc:	e002      	b.n	80024e4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024ec:	4b31      	ldr	r3, [pc, #196]	@ (80025b4 <HAL_ADC_Start+0x194>)
 80024ee:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80024f8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f003 031f 	and.w	r3, r3, #31
 8002502:	2b00      	cmp	r3, #0
 8002504:	d12a      	bne.n	800255c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a2b      	ldr	r2, [pc, #172]	@ (80025b8 <HAL_ADC_Start+0x198>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d015      	beq.n	800253c <HAL_ADC_Start+0x11c>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a29      	ldr	r2, [pc, #164]	@ (80025bc <HAL_ADC_Start+0x19c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d105      	bne.n	8002526 <HAL_ADC_Start+0x106>
 800251a:	4b26      	ldr	r3, [pc, #152]	@ (80025b4 <HAL_ADC_Start+0x194>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f003 031f 	and.w	r3, r3, #31
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00a      	beq.n	800253c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a25      	ldr	r2, [pc, #148]	@ (80025c0 <HAL_ADC_Start+0x1a0>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d136      	bne.n	800259e <HAL_ADC_Start+0x17e>
 8002530:	4b20      	ldr	r3, [pc, #128]	@ (80025b4 <HAL_ADC_Start+0x194>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f003 0310 	and.w	r3, r3, #16
 8002538:	2b00      	cmp	r3, #0
 800253a:	d130      	bne.n	800259e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d129      	bne.n	800259e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002558:	609a      	str	r2, [r3, #8]
 800255a:	e020      	b.n	800259e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a15      	ldr	r2, [pc, #84]	@ (80025b8 <HAL_ADC_Start+0x198>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d11b      	bne.n	800259e <HAL_ADC_Start+0x17e>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d114      	bne.n	800259e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689a      	ldr	r2, [r3, #8]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002582:	609a      	str	r2, [r3, #8]
 8002584:	e00b      	b.n	800259e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258a:	f043 0210 	orr.w	r2, r3, #16
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002596:	f043 0201 	orr.w	r2, r3, #1
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3714      	adds	r7, #20
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	20000000 	.word	0x20000000
 80025b0:	431bde83 	.word	0x431bde83
 80025b4:	40012300 	.word	0x40012300
 80025b8:	40012000 	.word	0x40012000
 80025bc:	40012100 	.word	0x40012100
 80025c0:	40012200 	.word	0x40012200

080025c4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025e0:	d113      	bne.n	800260a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80025ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025f0:	d10b      	bne.n	800260a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f6:	f043 0220 	orr.w	r2, r3, #32
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e063      	b.n	80026d2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800260a:	f7ff feb9 	bl	8002380 <HAL_GetTick>
 800260e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002610:	e021      	b.n	8002656 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002618:	d01d      	beq.n	8002656 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d007      	beq.n	8002630 <HAL_ADC_PollForConversion+0x6c>
 8002620:	f7ff feae 	bl	8002380 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	d212      	bcs.n	8002656 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b02      	cmp	r3, #2
 800263c:	d00b      	beq.n	8002656 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002642:	f043 0204 	orr.w	r2, r3, #4
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e03d      	b.n	80026d2 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b02      	cmp	r3, #2
 8002662:	d1d6      	bne.n	8002612 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f06f 0212 	mvn.w	r2, #18
 800266c:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002672:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d123      	bne.n	80026d0 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800268c:	2b00      	cmp	r3, #0
 800268e:	d11f      	bne.n	80026d0 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002696:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800269a:	2b00      	cmp	r3, #0
 800269c:	d006      	beq.n	80026ac <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d111      	bne.n	80026d0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d105      	bne.n	80026d0 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c8:	f043 0201 	orr.w	r2, r3, #1
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80026fe:	2300      	movs	r3, #0
 8002700:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002708:	2b01      	cmp	r3, #1
 800270a:	d101      	bne.n	8002710 <HAL_ADC_ConfigChannel+0x1c>
 800270c:	2302      	movs	r3, #2
 800270e:	e105      	b.n	800291c <HAL_ADC_ConfigChannel+0x228>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2b09      	cmp	r3, #9
 800271e:	d925      	bls.n	800276c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68d9      	ldr	r1, [r3, #12]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	b29b      	uxth	r3, r3
 800272c:	461a      	mov	r2, r3
 800272e:	4613      	mov	r3, r2
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	4413      	add	r3, r2
 8002734:	3b1e      	subs	r3, #30
 8002736:	2207      	movs	r2, #7
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	43da      	mvns	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	400a      	ands	r2, r1
 8002744:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68d9      	ldr	r1, [r3, #12]
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	b29b      	uxth	r3, r3
 8002756:	4618      	mov	r0, r3
 8002758:	4603      	mov	r3, r0
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	4403      	add	r3, r0
 800275e:	3b1e      	subs	r3, #30
 8002760:	409a      	lsls	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	430a      	orrs	r2, r1
 8002768:	60da      	str	r2, [r3, #12]
 800276a:	e022      	b.n	80027b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6919      	ldr	r1, [r3, #16]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	b29b      	uxth	r3, r3
 8002778:	461a      	mov	r2, r3
 800277a:	4613      	mov	r3, r2
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	4413      	add	r3, r2
 8002780:	2207      	movs	r2, #7
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43da      	mvns	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	400a      	ands	r2, r1
 800278e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6919      	ldr	r1, [r3, #16]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	689a      	ldr	r2, [r3, #8]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	b29b      	uxth	r3, r3
 80027a0:	4618      	mov	r0, r3
 80027a2:	4603      	mov	r3, r0
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	4403      	add	r3, r0
 80027a8:	409a      	lsls	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b06      	cmp	r3, #6
 80027b8:	d824      	bhi.n	8002804 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	4613      	mov	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	3b05      	subs	r3, #5
 80027cc:	221f      	movs	r2, #31
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	43da      	mvns	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	400a      	ands	r2, r1
 80027da:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	4618      	mov	r0, r3
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685a      	ldr	r2, [r3, #4]
 80027ee:	4613      	mov	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	4413      	add	r3, r2
 80027f4:	3b05      	subs	r3, #5
 80027f6:	fa00 f203 	lsl.w	r2, r0, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	635a      	str	r2, [r3, #52]	@ 0x34
 8002802:	e04c      	b.n	800289e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	2b0c      	cmp	r3, #12
 800280a:	d824      	bhi.n	8002856 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	4613      	mov	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4413      	add	r3, r2
 800281c:	3b23      	subs	r3, #35	@ 0x23
 800281e:	221f      	movs	r2, #31
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	43da      	mvns	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	400a      	ands	r2, r1
 800282c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	b29b      	uxth	r3, r3
 800283a:	4618      	mov	r0, r3
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	4613      	mov	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4413      	add	r3, r2
 8002846:	3b23      	subs	r3, #35	@ 0x23
 8002848:	fa00 f203 	lsl.w	r2, r0, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	430a      	orrs	r2, r1
 8002852:	631a      	str	r2, [r3, #48]	@ 0x30
 8002854:	e023      	b.n	800289e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	4613      	mov	r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4413      	add	r3, r2
 8002866:	3b41      	subs	r3, #65	@ 0x41
 8002868:	221f      	movs	r2, #31
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	43da      	mvns	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	400a      	ands	r2, r1
 8002876:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	b29b      	uxth	r3, r3
 8002884:	4618      	mov	r0, r3
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	4613      	mov	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	3b41      	subs	r3, #65	@ 0x41
 8002892:	fa00 f203 	lsl.w	r2, r0, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800289e:	4b22      	ldr	r3, [pc, #136]	@ (8002928 <HAL_ADC_ConfigChannel+0x234>)
 80028a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a21      	ldr	r2, [pc, #132]	@ (800292c <HAL_ADC_ConfigChannel+0x238>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d109      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x1cc>
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2b12      	cmp	r3, #18
 80028b2:	d105      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a19      	ldr	r2, [pc, #100]	@ (800292c <HAL_ADC_ConfigChannel+0x238>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d123      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x21e>
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2b10      	cmp	r3, #16
 80028d0:	d003      	beq.n	80028da <HAL_ADC_ConfigChannel+0x1e6>
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2b11      	cmp	r3, #17
 80028d8:	d11b      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2b10      	cmp	r3, #16
 80028ec:	d111      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028ee:	4b10      	ldr	r3, [pc, #64]	@ (8002930 <HAL_ADC_ConfigChannel+0x23c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a10      	ldr	r2, [pc, #64]	@ (8002934 <HAL_ADC_ConfigChannel+0x240>)
 80028f4:	fba2 2303 	umull	r2, r3, r2, r3
 80028f8:	0c9a      	lsrs	r2, r3, #18
 80028fa:	4613      	mov	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002904:	e002      	b.n	800290c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	3b01      	subs	r3, #1
 800290a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f9      	bne.n	8002906 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	40012300 	.word	0x40012300
 800292c:	40012000 	.word	0x40012000
 8002930:	20000000 	.word	0x20000000
 8002934:	431bde83 	.word	0x431bde83

08002938 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002940:	4b79      	ldr	r3, [pc, #484]	@ (8002b28 <ADC_Init+0x1f0>)
 8002942:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	431a      	orrs	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800296c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6859      	ldr	r1, [r3, #4]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	021a      	lsls	r2, r3, #8
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	430a      	orrs	r2, r1
 8002980:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002990:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6859      	ldr	r1, [r3, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	430a      	orrs	r2, r1
 80029a2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689a      	ldr	r2, [r3, #8]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6899      	ldr	r1, [r3, #8]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68da      	ldr	r2, [r3, #12]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ca:	4a58      	ldr	r2, [pc, #352]	@ (8002b2c <ADC_Init+0x1f4>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d022      	beq.n	8002a16 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689a      	ldr	r2, [r3, #8]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6899      	ldr	r1, [r3, #8]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6899      	ldr	r1, [r3, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	e00f      	b.n	8002a36 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a34:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0202 	bic.w	r2, r2, #2
 8002a44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6899      	ldr	r1, [r3, #8]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	7e1b      	ldrb	r3, [r3, #24]
 8002a50:	005a      	lsls	r2, r3, #1
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d01b      	beq.n	8002a9c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a72:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002a82:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6859      	ldr	r1, [r3, #4]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	035a      	lsls	r2, r3, #13
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	e007      	b.n	8002aac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002aaa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002aba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	051a      	lsls	r2, r3, #20
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002ae0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6899      	ldr	r1, [r3, #8]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002aee:	025a      	lsls	r2, r3, #9
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6899      	ldr	r1, [r3, #8]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	029a      	lsls	r2, r3, #10
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	609a      	str	r2, [r3, #8]
}
 8002b1c:	bf00      	nop
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	40012300 	.word	0x40012300
 8002b2c:	0f000001 	.word	0x0f000001

08002b30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f003 0307 	and.w	r3, r3, #7
 8002b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b40:	4b0c      	ldr	r3, [pc, #48]	@ (8002b74 <__NVIC_SetPriorityGrouping+0x44>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b62:	4a04      	ldr	r2, [pc, #16]	@ (8002b74 <__NVIC_SetPriorityGrouping+0x44>)
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	60d3      	str	r3, [r2, #12]
}
 8002b68:	bf00      	nop
 8002b6a:	3714      	adds	r7, #20
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	e000ed00 	.word	0xe000ed00

08002b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b7c:	4b04      	ldr	r3, [pc, #16]	@ (8002b90 <__NVIC_GetPriorityGrouping+0x18>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	0a1b      	lsrs	r3, r3, #8
 8002b82:	f003 0307 	and.w	r3, r3, #7
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	e000ed00 	.word	0xe000ed00

08002b94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	db0b      	blt.n	8002bbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ba6:	79fb      	ldrb	r3, [r7, #7]
 8002ba8:	f003 021f 	and.w	r2, r3, #31
 8002bac:	4907      	ldr	r1, [pc, #28]	@ (8002bcc <__NVIC_EnableIRQ+0x38>)
 8002bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb2:	095b      	lsrs	r3, r3, #5
 8002bb4:	2001      	movs	r0, #1
 8002bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8002bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	e000e100 	.word	0xe000e100

08002bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	6039      	str	r1, [r7, #0]
 8002bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	db0a      	blt.n	8002bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	490c      	ldr	r1, [pc, #48]	@ (8002c1c <__NVIC_SetPriority+0x4c>)
 8002bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bee:	0112      	lsls	r2, r2, #4
 8002bf0:	b2d2      	uxtb	r2, r2
 8002bf2:	440b      	add	r3, r1
 8002bf4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bf8:	e00a      	b.n	8002c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	4908      	ldr	r1, [pc, #32]	@ (8002c20 <__NVIC_SetPriority+0x50>)
 8002c00:	79fb      	ldrb	r3, [r7, #7]
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	3b04      	subs	r3, #4
 8002c08:	0112      	lsls	r2, r2, #4
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	761a      	strb	r2, [r3, #24]
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	e000e100 	.word	0xe000e100
 8002c20:	e000ed00 	.word	0xe000ed00

08002c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b089      	sub	sp, #36	@ 0x24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	f1c3 0307 	rsb	r3, r3, #7
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	bf28      	it	cs
 8002c42:	2304      	movcs	r3, #4
 8002c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	3304      	adds	r3, #4
 8002c4a:	2b06      	cmp	r3, #6
 8002c4c:	d902      	bls.n	8002c54 <NVIC_EncodePriority+0x30>
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	3b03      	subs	r3, #3
 8002c52:	e000      	b.n	8002c56 <NVIC_EncodePriority+0x32>
 8002c54:	2300      	movs	r3, #0
 8002c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c58:	f04f 32ff 	mov.w	r2, #4294967295
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	43da      	mvns	r2, r3
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	401a      	ands	r2, r3
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	fa01 f303 	lsl.w	r3, r1, r3
 8002c76:	43d9      	mvns	r1, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c7c:	4313      	orrs	r3, r2
         );
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3724      	adds	r7, #36	@ 0x24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
	...

08002c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3b01      	subs	r3, #1
 8002c98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c9c:	d301      	bcc.n	8002ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e00f      	b.n	8002cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8002ccc <SysTick_Config+0x40>)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002caa:	210f      	movs	r1, #15
 8002cac:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb0:	f7ff ff8e 	bl	8002bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cb4:	4b05      	ldr	r3, [pc, #20]	@ (8002ccc <SysTick_Config+0x40>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cba:	4b04      	ldr	r3, [pc, #16]	@ (8002ccc <SysTick_Config+0x40>)
 8002cbc:	2207      	movs	r2, #7
 8002cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	e000e010 	.word	0xe000e010

08002cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f7ff ff29 	bl	8002b30 <__NVIC_SetPriorityGrouping>
}
 8002cde:	bf00      	nop
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b086      	sub	sp, #24
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	4603      	mov	r3, r0
 8002cee:	60b9      	str	r1, [r7, #8]
 8002cf0:	607a      	str	r2, [r7, #4]
 8002cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cf8:	f7ff ff3e 	bl	8002b78 <__NVIC_GetPriorityGrouping>
 8002cfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	68b9      	ldr	r1, [r7, #8]
 8002d02:	6978      	ldr	r0, [r7, #20]
 8002d04:	f7ff ff8e 	bl	8002c24 <NVIC_EncodePriority>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d0e:	4611      	mov	r1, r2
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff ff5d 	bl	8002bd0 <__NVIC_SetPriority>
}
 8002d16:	bf00      	nop
 8002d18:	3718      	adds	r7, #24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b082      	sub	sp, #8
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	4603      	mov	r3, r0
 8002d26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff ff31 	bl	8002b94 <__NVIC_EnableIRQ>
}
 8002d32:	bf00      	nop
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b082      	sub	sp, #8
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f7ff ffa2 	bl	8002c8c <SysTick_Config>
 8002d48:	4603      	mov	r3, r0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
	...

08002d54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d60:	f7ff fb0e 	bl	8002380 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d101      	bne.n	8002d70 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e099      	b.n	8002ea4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2202      	movs	r2, #2
 8002d74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 0201 	bic.w	r2, r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d90:	e00f      	b.n	8002db2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d92:	f7ff faf5 	bl	8002380 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b05      	cmp	r3, #5
 8002d9e:	d908      	bls.n	8002db2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2220      	movs	r2, #32
 8002da4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2203      	movs	r2, #3
 8002daa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e078      	b.n	8002ea4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1e8      	bne.n	8002d92 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	4b38      	ldr	r3, [pc, #224]	@ (8002eac <HAL_DMA_Init+0x158>)
 8002dcc:	4013      	ands	r3, r2
 8002dce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dde:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002df6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e08:	2b04      	cmp	r3, #4
 8002e0a:	d107      	bne.n	8002e1c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e14:	4313      	orrs	r3, r2
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	f023 0307 	bic.w	r3, r3, #7
 8002e32:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e42:	2b04      	cmp	r3, #4
 8002e44:	d117      	bne.n	8002e76 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00e      	beq.n	8002e76 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 fa6f 	bl	800333c <DMA_CheckFifoParam>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d008      	beq.n	8002e76 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2240      	movs	r2, #64	@ 0x40
 8002e68:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002e72:	2301      	movs	r3, #1
 8002e74:	e016      	b.n	8002ea4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 fa26 	bl	80032d0 <DMA_CalcBaseAndBitshift>
 8002e84:	4603      	mov	r3, r0
 8002e86:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e8c:	223f      	movs	r2, #63	@ 0x3f
 8002e8e:	409a      	lsls	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3718      	adds	r7, #24
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	f010803f 	.word	0xf010803f

08002eb0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
 8002ebc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ec6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d101      	bne.n	8002ed6 <HAL_DMA_Start_IT+0x26>
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	e040      	b.n	8002f58 <HAL_DMA_Start_IT+0xa8>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d12f      	bne.n	8002f4a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2202      	movs	r2, #2
 8002eee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	68b9      	ldr	r1, [r7, #8]
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f000 f9b8 	bl	8003274 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f08:	223f      	movs	r2, #63	@ 0x3f
 8002f0a:	409a      	lsls	r2, r3
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 0216 	orr.w	r2, r2, #22
 8002f1e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d007      	beq.n	8002f38 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f042 0208 	orr.w	r2, r2, #8
 8002f36:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0201 	orr.w	r2, r2, #1
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	e005      	b.n	8002f56 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f52:	2302      	movs	r3, #2
 8002f54:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f6c:	4b8e      	ldr	r3, [pc, #568]	@ (80031a8 <HAL_DMA_IRQHandler+0x248>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a8e      	ldr	r2, [pc, #568]	@ (80031ac <HAL_DMA_IRQHandler+0x24c>)
 8002f72:	fba2 2303 	umull	r2, r3, r2, r3
 8002f76:	0a9b      	lsrs	r3, r3, #10
 8002f78:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f7e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f8a:	2208      	movs	r2, #8
 8002f8c:	409a      	lsls	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	4013      	ands	r3, r2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d01a      	beq.n	8002fcc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d013      	beq.n	8002fcc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 0204 	bic.w	r2, r2, #4
 8002fb2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb8:	2208      	movs	r2, #8
 8002fba:	409a      	lsls	r2, r3
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fc4:	f043 0201 	orr.w	r2, r3, #1
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	409a      	lsls	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d012      	beq.n	8003002 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00b      	beq.n	8003002 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fee:	2201      	movs	r2, #1
 8002ff0:	409a      	lsls	r2, r3
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ffa:	f043 0202 	orr.w	r2, r3, #2
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003006:	2204      	movs	r2, #4
 8003008:	409a      	lsls	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	4013      	ands	r3, r2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d012      	beq.n	8003038 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00b      	beq.n	8003038 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003024:	2204      	movs	r2, #4
 8003026:	409a      	lsls	r2, r3
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003030:	f043 0204 	orr.w	r2, r3, #4
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800303c:	2210      	movs	r2, #16
 800303e:	409a      	lsls	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	4013      	ands	r3, r2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d043      	beq.n	80030d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0308 	and.w	r3, r3, #8
 8003052:	2b00      	cmp	r3, #0
 8003054:	d03c      	beq.n	80030d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800305a:	2210      	movs	r2, #16
 800305c:	409a      	lsls	r2, r3
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d018      	beq.n	80030a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d108      	bne.n	8003090 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003082:	2b00      	cmp	r3, #0
 8003084:	d024      	beq.n	80030d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	4798      	blx	r3
 800308e:	e01f      	b.n	80030d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003094:	2b00      	cmp	r3, #0
 8003096:	d01b      	beq.n	80030d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	4798      	blx	r3
 80030a0:	e016      	b.n	80030d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d107      	bne.n	80030c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f022 0208 	bic.w	r2, r2, #8
 80030be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d003      	beq.n	80030d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d4:	2220      	movs	r2, #32
 80030d6:	409a      	lsls	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	4013      	ands	r3, r2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 808f 	beq.w	8003200 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0310 	and.w	r3, r3, #16
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 8087 	beq.w	8003200 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030f6:	2220      	movs	r2, #32
 80030f8:	409a      	lsls	r2, r3
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b05      	cmp	r3, #5
 8003108:	d136      	bne.n	8003178 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 0216 	bic.w	r2, r2, #22
 8003118:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	695a      	ldr	r2, [r3, #20]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003128:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312e:	2b00      	cmp	r3, #0
 8003130:	d103      	bne.n	800313a <HAL_DMA_IRQHandler+0x1da>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003136:	2b00      	cmp	r3, #0
 8003138:	d007      	beq.n	800314a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f022 0208 	bic.w	r2, r2, #8
 8003148:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800314e:	223f      	movs	r2, #63	@ 0x3f
 8003150:	409a      	lsls	r2, r3
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800316a:	2b00      	cmp	r3, #0
 800316c:	d07e      	beq.n	800326c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	4798      	blx	r3
        }
        return;
 8003176:	e079      	b.n	800326c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d01d      	beq.n	80031c2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d10d      	bne.n	80031b0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003198:	2b00      	cmp	r3, #0
 800319a:	d031      	beq.n	8003200 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	4798      	blx	r3
 80031a4:	e02c      	b.n	8003200 <HAL_DMA_IRQHandler+0x2a0>
 80031a6:	bf00      	nop
 80031a8:	20000000 	.word	0x20000000
 80031ac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d023      	beq.n	8003200 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	4798      	blx	r3
 80031c0:	e01e      	b.n	8003200 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d10f      	bne.n	80031f0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 0210 	bic.w	r2, r2, #16
 80031de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d003      	beq.n	8003200 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003204:	2b00      	cmp	r3, #0
 8003206:	d032      	beq.n	800326e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b00      	cmp	r3, #0
 8003212:	d022      	beq.n	800325a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2205      	movs	r2, #5
 8003218:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 0201 	bic.w	r2, r2, #1
 800322a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	3301      	adds	r3, #1
 8003230:	60bb      	str	r3, [r7, #8]
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	429a      	cmp	r2, r3
 8003236:	d307      	bcc.n	8003248 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1f2      	bne.n	800322c <HAL_DMA_IRQHandler+0x2cc>
 8003246:	e000      	b.n	800324a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003248:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800325e:	2b00      	cmp	r3, #0
 8003260:	d005      	beq.n	800326e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	4798      	blx	r3
 800326a:	e000      	b.n	800326e <HAL_DMA_IRQHandler+0x30e>
        return;
 800326c:	bf00      	nop
    }
  }
}
 800326e:	3718      	adds	r7, #24
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
 8003280:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003290:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	2b40      	cmp	r3, #64	@ 0x40
 80032a0:	d108      	bne.n	80032b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80032b2:	e007      	b.n	80032c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68ba      	ldr	r2, [r7, #8]
 80032ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	60da      	str	r2, [r3, #12]
}
 80032c4:	bf00      	nop
 80032c6:	3714      	adds	r7, #20
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	3b10      	subs	r3, #16
 80032e0:	4a14      	ldr	r2, [pc, #80]	@ (8003334 <DMA_CalcBaseAndBitshift+0x64>)
 80032e2:	fba2 2303 	umull	r2, r3, r2, r3
 80032e6:	091b      	lsrs	r3, r3, #4
 80032e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032ea:	4a13      	ldr	r2, [pc, #76]	@ (8003338 <DMA_CalcBaseAndBitshift+0x68>)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4413      	add	r3, r2
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	461a      	mov	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2b03      	cmp	r3, #3
 80032fc:	d909      	bls.n	8003312 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003306:	f023 0303 	bic.w	r3, r3, #3
 800330a:	1d1a      	adds	r2, r3, #4
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003310:	e007      	b.n	8003322 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800331a:	f023 0303 	bic.w	r3, r3, #3
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003326:	4618      	mov	r0, r3
 8003328:	3714      	adds	r7, #20
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	aaaaaaab 	.word	0xaaaaaaab
 8003338:	0800b078 	.word	0x0800b078

0800333c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003344:	2300      	movs	r3, #0
 8003346:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800334c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d11f      	bne.n	8003396 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	2b03      	cmp	r3, #3
 800335a:	d856      	bhi.n	800340a <DMA_CheckFifoParam+0xce>
 800335c:	a201      	add	r2, pc, #4	@ (adr r2, 8003364 <DMA_CheckFifoParam+0x28>)
 800335e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003362:	bf00      	nop
 8003364:	08003375 	.word	0x08003375
 8003368:	08003387 	.word	0x08003387
 800336c:	08003375 	.word	0x08003375
 8003370:	0800340b 	.word	0x0800340b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003378:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d046      	beq.n	800340e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003384:	e043      	b.n	800340e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800338a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800338e:	d140      	bne.n	8003412 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003394:	e03d      	b.n	8003412 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800339e:	d121      	bne.n	80033e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	2b03      	cmp	r3, #3
 80033a4:	d837      	bhi.n	8003416 <DMA_CheckFifoParam+0xda>
 80033a6:	a201      	add	r2, pc, #4	@ (adr r2, 80033ac <DMA_CheckFifoParam+0x70>)
 80033a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ac:	080033bd 	.word	0x080033bd
 80033b0:	080033c3 	.word	0x080033c3
 80033b4:	080033bd 	.word	0x080033bd
 80033b8:	080033d5 	.word	0x080033d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	73fb      	strb	r3, [r7, #15]
      break;
 80033c0:	e030      	b.n	8003424 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d025      	beq.n	800341a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033d2:	e022      	b.n	800341a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80033dc:	d11f      	bne.n	800341e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80033e2:	e01c      	b.n	800341e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d903      	bls.n	80033f2 <DMA_CheckFifoParam+0xb6>
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	2b03      	cmp	r3, #3
 80033ee:	d003      	beq.n	80033f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80033f0:	e018      	b.n	8003424 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	73fb      	strb	r3, [r7, #15]
      break;
 80033f6:	e015      	b.n	8003424 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00e      	beq.n	8003422 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	73fb      	strb	r3, [r7, #15]
      break;
 8003408:	e00b      	b.n	8003422 <DMA_CheckFifoParam+0xe6>
      break;
 800340a:	bf00      	nop
 800340c:	e00a      	b.n	8003424 <DMA_CheckFifoParam+0xe8>
      break;
 800340e:	bf00      	nop
 8003410:	e008      	b.n	8003424 <DMA_CheckFifoParam+0xe8>
      break;
 8003412:	bf00      	nop
 8003414:	e006      	b.n	8003424 <DMA_CheckFifoParam+0xe8>
      break;
 8003416:	bf00      	nop
 8003418:	e004      	b.n	8003424 <DMA_CheckFifoParam+0xe8>
      break;
 800341a:	bf00      	nop
 800341c:	e002      	b.n	8003424 <DMA_CheckFifoParam+0xe8>
      break;   
 800341e:	bf00      	nop
 8003420:	e000      	b.n	8003424 <DMA_CheckFifoParam+0xe8>
      break;
 8003422:	bf00      	nop
    }
  } 
  
  return status; 
 8003424:	7bfb      	ldrb	r3, [r7, #15]
}
 8003426:	4618      	mov	r0, r3
 8003428:	3714      	adds	r7, #20
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop

08003434 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003446:	4b23      	ldr	r3, [pc, #140]	@ (80034d4 <HAL_FLASH_Program+0xa0>)
 8003448:	7e1b      	ldrb	r3, [r3, #24]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d101      	bne.n	8003452 <HAL_FLASH_Program+0x1e>
 800344e:	2302      	movs	r3, #2
 8003450:	e03b      	b.n	80034ca <HAL_FLASH_Program+0x96>
 8003452:	4b20      	ldr	r3, [pc, #128]	@ (80034d4 <HAL_FLASH_Program+0xa0>)
 8003454:	2201      	movs	r2, #1
 8003456:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003458:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800345c:	f000 f870 	bl	8003540 <FLASH_WaitForLastOperation>
 8003460:	4603      	mov	r3, r0
 8003462:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8003464:	7dfb      	ldrb	r3, [r7, #23]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d12b      	bne.n	80034c2 <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d105      	bne.n	800347c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003470:	783b      	ldrb	r3, [r7, #0]
 8003472:	4619      	mov	r1, r3
 8003474:	68b8      	ldr	r0, [r7, #8]
 8003476:	f000 f91b 	bl	80036b0 <FLASH_Program_Byte>
 800347a:	e016      	b.n	80034aa <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d105      	bne.n	800348e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003482:	883b      	ldrh	r3, [r7, #0]
 8003484:	4619      	mov	r1, r3
 8003486:	68b8      	ldr	r0, [r7, #8]
 8003488:	f000 f8ee 	bl	8003668 <FLASH_Program_HalfWord>
 800348c:	e00d      	b.n	80034aa <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2b02      	cmp	r3, #2
 8003492:	d105      	bne.n	80034a0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	4619      	mov	r1, r3
 8003498:	68b8      	ldr	r0, [r7, #8]
 800349a:	f000 f8c3 	bl	8003624 <FLASH_Program_Word>
 800349e:	e004      	b.n	80034aa <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80034a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034a4:	68b8      	ldr	r0, [r7, #8]
 80034a6:	f000 f88b 	bl	80035c0 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80034aa:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80034ae:	f000 f847 	bl	8003540 <FLASH_WaitForLastOperation>
 80034b2:	4603      	mov	r3, r0
 80034b4:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80034b6:	4b08      	ldr	r3, [pc, #32]	@ (80034d8 <HAL_FLASH_Program+0xa4>)
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	4a07      	ldr	r2, [pc, #28]	@ (80034d8 <HAL_FLASH_Program+0xa4>)
 80034bc:	f023 0301 	bic.w	r3, r3, #1
 80034c0:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80034c2:	4b04      	ldr	r3, [pc, #16]	@ (80034d4 <HAL_FLASH_Program+0xa0>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	761a      	strb	r2, [r3, #24]

  return status;
 80034c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3718      	adds	r7, #24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	20000734 	.word	0x20000734
 80034d8:	40023c00 	.word	0x40023c00

080034dc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80034e2:	2300      	movs	r3, #0
 80034e4:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80034e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003514 <HAL_FLASH_Unlock+0x38>)
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	da0b      	bge.n	8003506 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80034ee:	4b09      	ldr	r3, [pc, #36]	@ (8003514 <HAL_FLASH_Unlock+0x38>)
 80034f0:	4a09      	ldr	r2, [pc, #36]	@ (8003518 <HAL_FLASH_Unlock+0x3c>)
 80034f2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80034f4:	4b07      	ldr	r3, [pc, #28]	@ (8003514 <HAL_FLASH_Unlock+0x38>)
 80034f6:	4a09      	ldr	r2, [pc, #36]	@ (800351c <HAL_FLASH_Unlock+0x40>)
 80034f8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80034fa:	4b06      	ldr	r3, [pc, #24]	@ (8003514 <HAL_FLASH_Unlock+0x38>)
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	da01      	bge.n	8003506 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003506:	79fb      	ldrb	r3, [r7, #7]
}
 8003508:	4618      	mov	r0, r3
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr
 8003514:	40023c00 	.word	0x40023c00
 8003518:	45670123 	.word	0x45670123
 800351c:	cdef89ab 	.word	0xcdef89ab

08003520 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003524:	4b05      	ldr	r3, [pc, #20]	@ (800353c <HAL_FLASH_Lock+0x1c>)
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	4a04      	ldr	r2, [pc, #16]	@ (800353c <HAL_FLASH_Lock+0x1c>)
 800352a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800352e:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	40023c00 	.word	0x40023c00

08003540 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003548:	2300      	movs	r3, #0
 800354a:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800354c:	4b1a      	ldr	r3, [pc, #104]	@ (80035b8 <FLASH_WaitForLastOperation+0x78>)
 800354e:	2200      	movs	r2, #0
 8003550:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003552:	f7fe ff15 	bl	8002380 <HAL_GetTick>
 8003556:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8003558:	e010      	b.n	800357c <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003560:	d00c      	beq.n	800357c <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d007      	beq.n	8003578 <FLASH_WaitForLastOperation+0x38>
 8003568:	f7fe ff0a 	bl	8002380 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	429a      	cmp	r2, r3
 8003576:	d201      	bcs.n	800357c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e019      	b.n	80035b0 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 800357c:	4b0f      	ldr	r3, [pc, #60]	@ (80035bc <FLASH_WaitForLastOperation+0x7c>)
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1e8      	bne.n	800355a <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003588:	4b0c      	ldr	r3, [pc, #48]	@ (80035bc <FLASH_WaitForLastOperation+0x7c>)
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	2b00      	cmp	r3, #0
 8003592:	d002      	beq.n	800359a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003594:	4b09      	ldr	r3, [pc, #36]	@ (80035bc <FLASH_WaitForLastOperation+0x7c>)
 8003596:	2201      	movs	r2, #1
 8003598:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800359a:	4b08      	ldr	r3, [pc, #32]	@ (80035bc <FLASH_WaitForLastOperation+0x7c>)
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <FLASH_WaitForLastOperation+0x6e>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80035a6:	f000 f8a5 	bl	80036f4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e000      	b.n	80035b0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80035ae:	2300      	movs	r3, #0

}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	20000734 	.word	0x20000734
 80035bc:	40023c00 	.word	0x40023c00

080035c0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80035cc:	4b14      	ldr	r3, [pc, #80]	@ (8003620 <FLASH_Program_DoubleWord+0x60>)
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	4a13      	ldr	r2, [pc, #76]	@ (8003620 <FLASH_Program_DoubleWord+0x60>)
 80035d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80035d8:	4b11      	ldr	r3, [pc, #68]	@ (8003620 <FLASH_Program_DoubleWord+0x60>)
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	4a10      	ldr	r2, [pc, #64]	@ (8003620 <FLASH_Program_DoubleWord+0x60>)
 80035de:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80035e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80035e4:	4b0e      	ldr	r3, [pc, #56]	@ (8003620 <FLASH_Program_DoubleWord+0x60>)
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	4a0d      	ldr	r2, [pc, #52]	@ (8003620 <FLASH_Program_DoubleWord+0x60>)
 80035ea:	f043 0301 	orr.w	r3, r3, #1
 80035ee:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80035f6:	f3bf 8f6f 	isb	sy
}
 80035fa:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 80035fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003600:	f04f 0200 	mov.w	r2, #0
 8003604:	f04f 0300 	mov.w	r3, #0
 8003608:	000a      	movs	r2, r1
 800360a:	2300      	movs	r3, #0
 800360c:	68f9      	ldr	r1, [r7, #12]
 800360e:	3104      	adds	r1, #4
 8003610:	4613      	mov	r3, r2
 8003612:	600b      	str	r3, [r1, #0]
}
 8003614:	bf00      	nop
 8003616:	3714      	adds	r7, #20
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr
 8003620:	40023c00 	.word	0x40023c00

08003624 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800362e:	4b0d      	ldr	r3, [pc, #52]	@ (8003664 <FLASH_Program_Word+0x40>)
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	4a0c      	ldr	r2, [pc, #48]	@ (8003664 <FLASH_Program_Word+0x40>)
 8003634:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003638:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800363a:	4b0a      	ldr	r3, [pc, #40]	@ (8003664 <FLASH_Program_Word+0x40>)
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	4a09      	ldr	r2, [pc, #36]	@ (8003664 <FLASH_Program_Word+0x40>)
 8003640:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003644:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003646:	4b07      	ldr	r3, [pc, #28]	@ (8003664 <FLASH_Program_Word+0x40>)
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	4a06      	ldr	r2, [pc, #24]	@ (8003664 <FLASH_Program_Word+0x40>)
 800364c:	f043 0301 	orr.w	r3, r3, #1
 8003650:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	601a      	str	r2, [r3, #0]
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	40023c00 	.word	0x40023c00

08003668 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	460b      	mov	r3, r1
 8003672:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003674:	4b0d      	ldr	r3, [pc, #52]	@ (80036ac <FLASH_Program_HalfWord+0x44>)
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	4a0c      	ldr	r2, [pc, #48]	@ (80036ac <FLASH_Program_HalfWord+0x44>)
 800367a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800367e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003680:	4b0a      	ldr	r3, [pc, #40]	@ (80036ac <FLASH_Program_HalfWord+0x44>)
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	4a09      	ldr	r2, [pc, #36]	@ (80036ac <FLASH_Program_HalfWord+0x44>)
 8003686:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800368a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800368c:	4b07      	ldr	r3, [pc, #28]	@ (80036ac <FLASH_Program_HalfWord+0x44>)
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	4a06      	ldr	r2, [pc, #24]	@ (80036ac <FLASH_Program_HalfWord+0x44>)
 8003692:	f043 0301 	orr.w	r3, r3, #1
 8003696:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	887a      	ldrh	r2, [r7, #2]
 800369c:	801a      	strh	r2, [r3, #0]
}
 800369e:	bf00      	nop
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	40023c00 	.word	0x40023c00

080036b0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	460b      	mov	r3, r1
 80036ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80036bc:	4b0c      	ldr	r3, [pc, #48]	@ (80036f0 <FLASH_Program_Byte+0x40>)
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	4a0b      	ldr	r2, [pc, #44]	@ (80036f0 <FLASH_Program_Byte+0x40>)
 80036c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80036c8:	4b09      	ldr	r3, [pc, #36]	@ (80036f0 <FLASH_Program_Byte+0x40>)
 80036ca:	4a09      	ldr	r2, [pc, #36]	@ (80036f0 <FLASH_Program_Byte+0x40>)
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80036d0:	4b07      	ldr	r3, [pc, #28]	@ (80036f0 <FLASH_Program_Byte+0x40>)
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	4a06      	ldr	r2, [pc, #24]	@ (80036f0 <FLASH_Program_Byte+0x40>)
 80036d6:	f043 0301 	orr.w	r3, r3, #1
 80036da:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	78fa      	ldrb	r2, [r7, #3]
 80036e0:	701a      	strb	r2, [r3, #0]
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	40023c00 	.word	0x40023c00

080036f4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80036f8:	4b27      	ldr	r3, [pc, #156]	@ (8003798 <FLASH_SetErrorCode+0xa4>)
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	f003 0310 	and.w	r3, r3, #16
 8003700:	2b00      	cmp	r3, #0
 8003702:	d008      	beq.n	8003716 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003704:	4b25      	ldr	r3, [pc, #148]	@ (800379c <FLASH_SetErrorCode+0xa8>)
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	f043 0310 	orr.w	r3, r3, #16
 800370c:	4a23      	ldr	r2, [pc, #140]	@ (800379c <FLASH_SetErrorCode+0xa8>)
 800370e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003710:	4b21      	ldr	r3, [pc, #132]	@ (8003798 <FLASH_SetErrorCode+0xa4>)
 8003712:	2210      	movs	r2, #16
 8003714:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003716:	4b20      	ldr	r3, [pc, #128]	@ (8003798 <FLASH_SetErrorCode+0xa4>)
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	f003 0320 	and.w	r3, r3, #32
 800371e:	2b00      	cmp	r3, #0
 8003720:	d008      	beq.n	8003734 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003722:	4b1e      	ldr	r3, [pc, #120]	@ (800379c <FLASH_SetErrorCode+0xa8>)
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	f043 0308 	orr.w	r3, r3, #8
 800372a:	4a1c      	ldr	r2, [pc, #112]	@ (800379c <FLASH_SetErrorCode+0xa8>)
 800372c:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800372e:	4b1a      	ldr	r3, [pc, #104]	@ (8003798 <FLASH_SetErrorCode+0xa4>)
 8003730:	2220      	movs	r2, #32
 8003732:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003734:	4b18      	ldr	r3, [pc, #96]	@ (8003798 <FLASH_SetErrorCode+0xa4>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800373c:	2b00      	cmp	r3, #0
 800373e:	d008      	beq.n	8003752 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003740:	4b16      	ldr	r3, [pc, #88]	@ (800379c <FLASH_SetErrorCode+0xa8>)
 8003742:	69db      	ldr	r3, [r3, #28]
 8003744:	f043 0304 	orr.w	r3, r3, #4
 8003748:	4a14      	ldr	r2, [pc, #80]	@ (800379c <FLASH_SetErrorCode+0xa8>)
 800374a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800374c:	4b12      	ldr	r3, [pc, #72]	@ (8003798 <FLASH_SetErrorCode+0xa4>)
 800374e:	2240      	movs	r2, #64	@ 0x40
 8003750:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003752:	4b11      	ldr	r3, [pc, #68]	@ (8003798 <FLASH_SetErrorCode+0xa4>)
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800375a:	2b00      	cmp	r3, #0
 800375c:	d008      	beq.n	8003770 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800375e:	4b0f      	ldr	r3, [pc, #60]	@ (800379c <FLASH_SetErrorCode+0xa8>)
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	f043 0302 	orr.w	r3, r3, #2
 8003766:	4a0d      	ldr	r2, [pc, #52]	@ (800379c <FLASH_SetErrorCode+0xa8>)
 8003768:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800376a:	4b0b      	ldr	r3, [pc, #44]	@ (8003798 <FLASH_SetErrorCode+0xa4>)
 800376c:	2280      	movs	r2, #128	@ 0x80
 800376e:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003770:	4b09      	ldr	r3, [pc, #36]	@ (8003798 <FLASH_SetErrorCode+0xa4>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d008      	beq.n	800378e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800377c:	4b07      	ldr	r3, [pc, #28]	@ (800379c <FLASH_SetErrorCode+0xa8>)
 800377e:	69db      	ldr	r3, [r3, #28]
 8003780:	f043 0320 	orr.w	r3, r3, #32
 8003784:	4a05      	ldr	r2, [pc, #20]	@ (800379c <FLASH_SetErrorCode+0xa8>)
 8003786:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003788:	4b03      	ldr	r3, [pc, #12]	@ (8003798 <FLASH_SetErrorCode+0xa4>)
 800378a:	2202      	movs	r2, #2
 800378c:	60da      	str	r2, [r3, #12]
  }
}
 800378e:	bf00      	nop
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	40023c00 	.word	0x40023c00
 800379c:	20000734 	.word	0x20000734

080037a0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80037a4:	4b20      	ldr	r3, [pc, #128]	@ (8003828 <FLASH_FlushCaches+0x88>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d017      	beq.n	80037e0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80037b0:	4b1d      	ldr	r3, [pc, #116]	@ (8003828 <FLASH_FlushCaches+0x88>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a1c      	ldr	r2, [pc, #112]	@ (8003828 <FLASH_FlushCaches+0x88>)
 80037b6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80037ba:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80037bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003828 <FLASH_FlushCaches+0x88>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a19      	ldr	r2, [pc, #100]	@ (8003828 <FLASH_FlushCaches+0x88>)
 80037c2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80037c6:	6013      	str	r3, [r2, #0]
 80037c8:	4b17      	ldr	r3, [pc, #92]	@ (8003828 <FLASH_FlushCaches+0x88>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a16      	ldr	r2, [pc, #88]	@ (8003828 <FLASH_FlushCaches+0x88>)
 80037ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80037d2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037d4:	4b14      	ldr	r3, [pc, #80]	@ (8003828 <FLASH_FlushCaches+0x88>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a13      	ldr	r2, [pc, #76]	@ (8003828 <FLASH_FlushCaches+0x88>)
 80037da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037de:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80037e0:	4b11      	ldr	r3, [pc, #68]	@ (8003828 <FLASH_FlushCaches+0x88>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d017      	beq.n	800381c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80037ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003828 <FLASH_FlushCaches+0x88>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a0d      	ldr	r2, [pc, #52]	@ (8003828 <FLASH_FlushCaches+0x88>)
 80037f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80037f6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80037f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003828 <FLASH_FlushCaches+0x88>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a0a      	ldr	r2, [pc, #40]	@ (8003828 <FLASH_FlushCaches+0x88>)
 80037fe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003802:	6013      	str	r3, [r2, #0]
 8003804:	4b08      	ldr	r3, [pc, #32]	@ (8003828 <FLASH_FlushCaches+0x88>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a07      	ldr	r2, [pc, #28]	@ (8003828 <FLASH_FlushCaches+0x88>)
 800380a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800380e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003810:	4b05      	ldr	r3, [pc, #20]	@ (8003828 <FLASH_FlushCaches+0x88>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a04      	ldr	r2, [pc, #16]	@ (8003828 <FLASH_FlushCaches+0x88>)
 8003816:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800381a:	6013      	str	r3, [r2, #0]
  }
}
 800381c:	bf00      	nop
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	40023c00 	.word	0x40023c00

0800382c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800382c:	b480      	push	{r7}
 800382e:	b089      	sub	sp, #36	@ 0x24
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003836:	2300      	movs	r3, #0
 8003838:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800383a:	2300      	movs	r3, #0
 800383c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800383e:	2300      	movs	r3, #0
 8003840:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003842:	2300      	movs	r3, #0
 8003844:	61fb      	str	r3, [r7, #28]
 8003846:	e16b      	b.n	8003b20 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003848:	2201      	movs	r2, #1
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	4013      	ands	r3, r2
 800385a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	429a      	cmp	r2, r3
 8003862:	f040 815a 	bne.w	8003b1a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	2b01      	cmp	r3, #1
 8003870:	d005      	beq.n	800387e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800387a:	2b02      	cmp	r3, #2
 800387c:	d130      	bne.n	80038e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	2203      	movs	r2, #3
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	43db      	mvns	r3, r3
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	4013      	ands	r3, r2
 8003894:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	68da      	ldr	r2, [r3, #12]
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	fa02 f303 	lsl.w	r3, r2, r3
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038b4:	2201      	movs	r2, #1
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	fa02 f303 	lsl.w	r3, r2, r3
 80038bc:	43db      	mvns	r3, r3
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	4013      	ands	r3, r2
 80038c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	091b      	lsrs	r3, r3, #4
 80038ca:	f003 0201 	and.w	r2, r3, #1
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f003 0303 	and.w	r3, r3, #3
 80038e8:	2b03      	cmp	r3, #3
 80038ea:	d017      	beq.n	800391c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	2203      	movs	r2, #3
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	43db      	mvns	r3, r3
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	4013      	ands	r3, r2
 8003902:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	fa02 f303 	lsl.w	r3, r2, r3
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4313      	orrs	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f003 0303 	and.w	r3, r3, #3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d123      	bne.n	8003970 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	08da      	lsrs	r2, r3, #3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	3208      	adds	r2, #8
 8003930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003934:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	220f      	movs	r2, #15
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	43db      	mvns	r3, r3
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	4013      	ands	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	691a      	ldr	r2, [r3, #16]
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f003 0307 	and.w	r3, r3, #7
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	4313      	orrs	r3, r2
 8003960:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	08da      	lsrs	r2, r3, #3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3208      	adds	r2, #8
 800396a:	69b9      	ldr	r1, [r7, #24]
 800396c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	2203      	movs	r2, #3
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	43db      	mvns	r3, r3
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	4013      	ands	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f003 0203 	and.w	r2, r3, #3
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	4313      	orrs	r3, r2
 800399c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 80b4 	beq.w	8003b1a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039b2:	2300      	movs	r3, #0
 80039b4:	60fb      	str	r3, [r7, #12]
 80039b6:	4b60      	ldr	r3, [pc, #384]	@ (8003b38 <HAL_GPIO_Init+0x30c>)
 80039b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ba:	4a5f      	ldr	r2, [pc, #380]	@ (8003b38 <HAL_GPIO_Init+0x30c>)
 80039bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80039c2:	4b5d      	ldr	r3, [pc, #372]	@ (8003b38 <HAL_GPIO_Init+0x30c>)
 80039c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039ca:	60fb      	str	r3, [r7, #12]
 80039cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039ce:	4a5b      	ldr	r2, [pc, #364]	@ (8003b3c <HAL_GPIO_Init+0x310>)
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	089b      	lsrs	r3, r3, #2
 80039d4:	3302      	adds	r3, #2
 80039d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	f003 0303 	and.w	r3, r3, #3
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	220f      	movs	r2, #15
 80039e6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ea:	43db      	mvns	r3, r3
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	4013      	ands	r3, r2
 80039f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a52      	ldr	r2, [pc, #328]	@ (8003b40 <HAL_GPIO_Init+0x314>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d02b      	beq.n	8003a52 <HAL_GPIO_Init+0x226>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a51      	ldr	r2, [pc, #324]	@ (8003b44 <HAL_GPIO_Init+0x318>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d025      	beq.n	8003a4e <HAL_GPIO_Init+0x222>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a50      	ldr	r2, [pc, #320]	@ (8003b48 <HAL_GPIO_Init+0x31c>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d01f      	beq.n	8003a4a <HAL_GPIO_Init+0x21e>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a4f      	ldr	r2, [pc, #316]	@ (8003b4c <HAL_GPIO_Init+0x320>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d019      	beq.n	8003a46 <HAL_GPIO_Init+0x21a>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a4e      	ldr	r2, [pc, #312]	@ (8003b50 <HAL_GPIO_Init+0x324>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d013      	beq.n	8003a42 <HAL_GPIO_Init+0x216>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a4d      	ldr	r2, [pc, #308]	@ (8003b54 <HAL_GPIO_Init+0x328>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d00d      	beq.n	8003a3e <HAL_GPIO_Init+0x212>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a4c      	ldr	r2, [pc, #304]	@ (8003b58 <HAL_GPIO_Init+0x32c>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d007      	beq.n	8003a3a <HAL_GPIO_Init+0x20e>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a4b      	ldr	r2, [pc, #300]	@ (8003b5c <HAL_GPIO_Init+0x330>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d101      	bne.n	8003a36 <HAL_GPIO_Init+0x20a>
 8003a32:	2307      	movs	r3, #7
 8003a34:	e00e      	b.n	8003a54 <HAL_GPIO_Init+0x228>
 8003a36:	2308      	movs	r3, #8
 8003a38:	e00c      	b.n	8003a54 <HAL_GPIO_Init+0x228>
 8003a3a:	2306      	movs	r3, #6
 8003a3c:	e00a      	b.n	8003a54 <HAL_GPIO_Init+0x228>
 8003a3e:	2305      	movs	r3, #5
 8003a40:	e008      	b.n	8003a54 <HAL_GPIO_Init+0x228>
 8003a42:	2304      	movs	r3, #4
 8003a44:	e006      	b.n	8003a54 <HAL_GPIO_Init+0x228>
 8003a46:	2303      	movs	r3, #3
 8003a48:	e004      	b.n	8003a54 <HAL_GPIO_Init+0x228>
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	e002      	b.n	8003a54 <HAL_GPIO_Init+0x228>
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e000      	b.n	8003a54 <HAL_GPIO_Init+0x228>
 8003a52:	2300      	movs	r3, #0
 8003a54:	69fa      	ldr	r2, [r7, #28]
 8003a56:	f002 0203 	and.w	r2, r2, #3
 8003a5a:	0092      	lsls	r2, r2, #2
 8003a5c:	4093      	lsls	r3, r2
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a64:	4935      	ldr	r1, [pc, #212]	@ (8003b3c <HAL_GPIO_Init+0x310>)
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	089b      	lsrs	r3, r3, #2
 8003a6a:	3302      	adds	r3, #2
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a72:	4b3b      	ldr	r3, [pc, #236]	@ (8003b60 <HAL_GPIO_Init+0x334>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	43db      	mvns	r3, r3
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	4013      	ands	r3, r2
 8003a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d003      	beq.n	8003a96 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003a8e:	69ba      	ldr	r2, [r7, #24]
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a96:	4a32      	ldr	r2, [pc, #200]	@ (8003b60 <HAL_GPIO_Init+0x334>)
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a9c:	4b30      	ldr	r3, [pc, #192]	@ (8003b60 <HAL_GPIO_Init+0x334>)
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	43db      	mvns	r3, r3
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d003      	beq.n	8003ac0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ac0:	4a27      	ldr	r2, [pc, #156]	@ (8003b60 <HAL_GPIO_Init+0x334>)
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ac6:	4b26      	ldr	r3, [pc, #152]	@ (8003b60 <HAL_GPIO_Init+0x334>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	43db      	mvns	r3, r3
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d003      	beq.n	8003aea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003aea:	4a1d      	ldr	r2, [pc, #116]	@ (8003b60 <HAL_GPIO_Init+0x334>)
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003af0:	4b1b      	ldr	r3, [pc, #108]	@ (8003b60 <HAL_GPIO_Init+0x334>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	43db      	mvns	r3, r3
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	4013      	ands	r3, r2
 8003afe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d003      	beq.n	8003b14 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b14:	4a12      	ldr	r2, [pc, #72]	@ (8003b60 <HAL_GPIO_Init+0x334>)
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	61fb      	str	r3, [r7, #28]
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	2b0f      	cmp	r3, #15
 8003b24:	f67f ae90 	bls.w	8003848 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b28:	bf00      	nop
 8003b2a:	bf00      	nop
 8003b2c:	3724      	adds	r7, #36	@ 0x24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	40023800 	.word	0x40023800
 8003b3c:	40013800 	.word	0x40013800
 8003b40:	40020000 	.word	0x40020000
 8003b44:	40020400 	.word	0x40020400
 8003b48:	40020800 	.word	0x40020800
 8003b4c:	40020c00 	.word	0x40020c00
 8003b50:	40021000 	.word	0x40021000
 8003b54:	40021400 	.word	0x40021400
 8003b58:	40021800 	.word	0x40021800
 8003b5c:	40021c00 	.word	0x40021c00
 8003b60:	40013c00 	.word	0x40013c00

08003b64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	691a      	ldr	r2, [r3, #16]
 8003b74:	887b      	ldrh	r3, [r7, #2]
 8003b76:	4013      	ands	r3, r2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d002      	beq.n	8003b82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	73fb      	strb	r3, [r7, #15]
 8003b80:	e001      	b.n	8003b86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b82:	2300      	movs	r3, #0
 8003b84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3714      	adds	r7, #20
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	807b      	strh	r3, [r7, #2]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ba4:	787b      	ldrb	r3, [r7, #1]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003baa:	887a      	ldrh	r2, [r7, #2]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bb0:	e003      	b.n	8003bba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bb2:	887b      	ldrh	r3, [r7, #2]
 8003bb4:	041a      	lsls	r2, r3, #16
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	619a      	str	r2, [r3, #24]
}
 8003bba:	bf00      	nop
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
	...

08003bc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e267      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d075      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003be6:	4b88      	ldr	r3, [pc, #544]	@ (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 030c 	and.w	r3, r3, #12
 8003bee:	2b04      	cmp	r3, #4
 8003bf0:	d00c      	beq.n	8003c0c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bf2:	4b85      	ldr	r3, [pc, #532]	@ (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003bfa:	2b08      	cmp	r3, #8
 8003bfc:	d112      	bne.n	8003c24 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bfe:	4b82      	ldr	r3, [pc, #520]	@ (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c0a:	d10b      	bne.n	8003c24 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c0c:	4b7e      	ldr	r3, [pc, #504]	@ (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d05b      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x108>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d157      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e242      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c2c:	d106      	bne.n	8003c3c <HAL_RCC_OscConfig+0x74>
 8003c2e:	4b76      	ldr	r3, [pc, #472]	@ (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a75      	ldr	r2, [pc, #468]	@ (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003c34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c38:	6013      	str	r3, [r2, #0]
 8003c3a:	e01d      	b.n	8003c78 <HAL_RCC_OscConfig+0xb0>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c44:	d10c      	bne.n	8003c60 <HAL_RCC_OscConfig+0x98>
 8003c46:	4b70      	ldr	r3, [pc, #448]	@ (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a6f      	ldr	r2, [pc, #444]	@ (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003c4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c50:	6013      	str	r3, [r2, #0]
 8003c52:	4b6d      	ldr	r3, [pc, #436]	@ (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a6c      	ldr	r2, [pc, #432]	@ (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003c58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c5c:	6013      	str	r3, [r2, #0]
 8003c5e:	e00b      	b.n	8003c78 <HAL_RCC_OscConfig+0xb0>
 8003c60:	4b69      	ldr	r3, [pc, #420]	@ (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a68      	ldr	r2, [pc, #416]	@ (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003c66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c6a:	6013      	str	r3, [r2, #0]
 8003c6c:	4b66      	ldr	r3, [pc, #408]	@ (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a65      	ldr	r2, [pc, #404]	@ (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003c72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d013      	beq.n	8003ca8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c80:	f7fe fb7e 	bl	8002380 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c88:	f7fe fb7a 	bl	8002380 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b64      	cmp	r3, #100	@ 0x64
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e207      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c9a:	4b5b      	ldr	r3, [pc, #364]	@ (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0f0      	beq.n	8003c88 <HAL_RCC_OscConfig+0xc0>
 8003ca6:	e014      	b.n	8003cd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca8:	f7fe fb6a 	bl	8002380 <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cb0:	f7fe fb66 	bl	8002380 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b64      	cmp	r3, #100	@ 0x64
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e1f3      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cc2:	4b51      	ldr	r3, [pc, #324]	@ (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1f0      	bne.n	8003cb0 <HAL_RCC_OscConfig+0xe8>
 8003cce:	e000      	b.n	8003cd2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d063      	beq.n	8003da6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003cde:	4b4a      	ldr	r3, [pc, #296]	@ (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 030c 	and.w	r3, r3, #12
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00b      	beq.n	8003d02 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cea:	4b47      	ldr	r3, [pc, #284]	@ (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003cf2:	2b08      	cmp	r3, #8
 8003cf4:	d11c      	bne.n	8003d30 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cf6:	4b44      	ldr	r3, [pc, #272]	@ (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d116      	bne.n	8003d30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d02:	4b41      	ldr	r3, [pc, #260]	@ (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d005      	beq.n	8003d1a <HAL_RCC_OscConfig+0x152>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d001      	beq.n	8003d1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e1c7      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d1a:	4b3b      	ldr	r3, [pc, #236]	@ (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	4937      	ldr	r1, [pc, #220]	@ (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d2e:	e03a      	b.n	8003da6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d020      	beq.n	8003d7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d38:	4b34      	ldr	r3, [pc, #208]	@ (8003e0c <HAL_RCC_OscConfig+0x244>)
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3e:	f7fe fb1f 	bl	8002380 <HAL_GetTick>
 8003d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d44:	e008      	b.n	8003d58 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d46:	f7fe fb1b 	bl	8002380 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d901      	bls.n	8003d58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e1a8      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d58:	4b2b      	ldr	r3, [pc, #172]	@ (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d0f0      	beq.n	8003d46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d64:	4b28      	ldr	r3, [pc, #160]	@ (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	4925      	ldr	r1, [pc, #148]	@ (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	600b      	str	r3, [r1, #0]
 8003d78:	e015      	b.n	8003da6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d7a:	4b24      	ldr	r3, [pc, #144]	@ (8003e0c <HAL_RCC_OscConfig+0x244>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d80:	f7fe fafe 	bl	8002380 <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d88:	f7fe fafa 	bl	8002380 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e187      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d9a:	4b1b      	ldr	r3, [pc, #108]	@ (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1f0      	bne.n	8003d88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0308 	and.w	r3, r3, #8
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d036      	beq.n	8003e20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d016      	beq.n	8003de8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dba:	4b15      	ldr	r3, [pc, #84]	@ (8003e10 <HAL_RCC_OscConfig+0x248>)
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc0:	f7fe fade 	bl	8002380 <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dc8:	f7fe fada 	bl	8002380 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e167      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dda:	4b0b      	ldr	r3, [pc, #44]	@ (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003ddc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d0f0      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x200>
 8003de6:	e01b      	b.n	8003e20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003de8:	4b09      	ldr	r3, [pc, #36]	@ (8003e10 <HAL_RCC_OscConfig+0x248>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dee:	f7fe fac7 	bl	8002380 <HAL_GetTick>
 8003df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003df4:	e00e      	b.n	8003e14 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003df6:	f7fe fac3 	bl	8002380 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d907      	bls.n	8003e14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e150      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
 8003e08:	40023800 	.word	0x40023800
 8003e0c:	42470000 	.word	0x42470000
 8003e10:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e14:	4b88      	ldr	r3, [pc, #544]	@ (8004038 <HAL_RCC_OscConfig+0x470>)
 8003e16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1ea      	bne.n	8003df6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 8097 	beq.w	8003f5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e32:	4b81      	ldr	r3, [pc, #516]	@ (8004038 <HAL_RCC_OscConfig+0x470>)
 8003e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10f      	bne.n	8003e5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e3e:	2300      	movs	r3, #0
 8003e40:	60bb      	str	r3, [r7, #8]
 8003e42:	4b7d      	ldr	r3, [pc, #500]	@ (8004038 <HAL_RCC_OscConfig+0x470>)
 8003e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e46:	4a7c      	ldr	r2, [pc, #496]	@ (8004038 <HAL_RCC_OscConfig+0x470>)
 8003e48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e4e:	4b7a      	ldr	r3, [pc, #488]	@ (8004038 <HAL_RCC_OscConfig+0x470>)
 8003e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e56:	60bb      	str	r3, [r7, #8]
 8003e58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e5e:	4b77      	ldr	r3, [pc, #476]	@ (800403c <HAL_RCC_OscConfig+0x474>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d118      	bne.n	8003e9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e6a:	4b74      	ldr	r3, [pc, #464]	@ (800403c <HAL_RCC_OscConfig+0x474>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a73      	ldr	r2, [pc, #460]	@ (800403c <HAL_RCC_OscConfig+0x474>)
 8003e70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e76:	f7fe fa83 	bl	8002380 <HAL_GetTick>
 8003e7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e7c:	e008      	b.n	8003e90 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e7e:	f7fe fa7f 	bl	8002380 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e10c      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e90:	4b6a      	ldr	r3, [pc, #424]	@ (800403c <HAL_RCC_OscConfig+0x474>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d0f0      	beq.n	8003e7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d106      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x2ea>
 8003ea4:	4b64      	ldr	r3, [pc, #400]	@ (8004038 <HAL_RCC_OscConfig+0x470>)
 8003ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea8:	4a63      	ldr	r2, [pc, #396]	@ (8004038 <HAL_RCC_OscConfig+0x470>)
 8003eaa:	f043 0301 	orr.w	r3, r3, #1
 8003eae:	6713      	str	r3, [r2, #112]	@ 0x70
 8003eb0:	e01c      	b.n	8003eec <HAL_RCC_OscConfig+0x324>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	2b05      	cmp	r3, #5
 8003eb8:	d10c      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x30c>
 8003eba:	4b5f      	ldr	r3, [pc, #380]	@ (8004038 <HAL_RCC_OscConfig+0x470>)
 8003ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ebe:	4a5e      	ldr	r2, [pc, #376]	@ (8004038 <HAL_RCC_OscConfig+0x470>)
 8003ec0:	f043 0304 	orr.w	r3, r3, #4
 8003ec4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ec6:	4b5c      	ldr	r3, [pc, #368]	@ (8004038 <HAL_RCC_OscConfig+0x470>)
 8003ec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eca:	4a5b      	ldr	r2, [pc, #364]	@ (8004038 <HAL_RCC_OscConfig+0x470>)
 8003ecc:	f043 0301 	orr.w	r3, r3, #1
 8003ed0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ed2:	e00b      	b.n	8003eec <HAL_RCC_OscConfig+0x324>
 8003ed4:	4b58      	ldr	r3, [pc, #352]	@ (8004038 <HAL_RCC_OscConfig+0x470>)
 8003ed6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ed8:	4a57      	ldr	r2, [pc, #348]	@ (8004038 <HAL_RCC_OscConfig+0x470>)
 8003eda:	f023 0301 	bic.w	r3, r3, #1
 8003ede:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ee0:	4b55      	ldr	r3, [pc, #340]	@ (8004038 <HAL_RCC_OscConfig+0x470>)
 8003ee2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ee4:	4a54      	ldr	r2, [pc, #336]	@ (8004038 <HAL_RCC_OscConfig+0x470>)
 8003ee6:	f023 0304 	bic.w	r3, r3, #4
 8003eea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d015      	beq.n	8003f20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef4:	f7fe fa44 	bl	8002380 <HAL_GetTick>
 8003ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003efa:	e00a      	b.n	8003f12 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003efc:	f7fe fa40 	bl	8002380 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e0cb      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f12:	4b49      	ldr	r3, [pc, #292]	@ (8004038 <HAL_RCC_OscConfig+0x470>)
 8003f14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d0ee      	beq.n	8003efc <HAL_RCC_OscConfig+0x334>
 8003f1e:	e014      	b.n	8003f4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f20:	f7fe fa2e 	bl	8002380 <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f26:	e00a      	b.n	8003f3e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f28:	f7fe fa2a 	bl	8002380 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e0b5      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f3e:	4b3e      	ldr	r3, [pc, #248]	@ (8004038 <HAL_RCC_OscConfig+0x470>)
 8003f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1ee      	bne.n	8003f28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f4a:	7dfb      	ldrb	r3, [r7, #23]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d105      	bne.n	8003f5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f50:	4b39      	ldr	r3, [pc, #228]	@ (8004038 <HAL_RCC_OscConfig+0x470>)
 8003f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f54:	4a38      	ldr	r2, [pc, #224]	@ (8004038 <HAL_RCC_OscConfig+0x470>)
 8003f56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f5a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 80a1 	beq.w	80040a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f66:	4b34      	ldr	r3, [pc, #208]	@ (8004038 <HAL_RCC_OscConfig+0x470>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f003 030c 	and.w	r3, r3, #12
 8003f6e:	2b08      	cmp	r3, #8
 8003f70:	d05c      	beq.n	800402c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d141      	bne.n	8003ffe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f7a:	4b31      	ldr	r3, [pc, #196]	@ (8004040 <HAL_RCC_OscConfig+0x478>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f80:	f7fe f9fe 	bl	8002380 <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f88:	f7fe f9fa 	bl	8002380 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e087      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f9a:	4b27      	ldr	r3, [pc, #156]	@ (8004038 <HAL_RCC_OscConfig+0x470>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1f0      	bne.n	8003f88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	69da      	ldr	r2, [r3, #28]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb4:	019b      	lsls	r3, r3, #6
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fbc:	085b      	lsrs	r3, r3, #1
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	041b      	lsls	r3, r3, #16
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc8:	061b      	lsls	r3, r3, #24
 8003fca:	491b      	ldr	r1, [pc, #108]	@ (8004038 <HAL_RCC_OscConfig+0x470>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fd0:	4b1b      	ldr	r3, [pc, #108]	@ (8004040 <HAL_RCC_OscConfig+0x478>)
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd6:	f7fe f9d3 	bl	8002380 <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fde:	f7fe f9cf 	bl	8002380 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e05c      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ff0:	4b11      	ldr	r3, [pc, #68]	@ (8004038 <HAL_RCC_OscConfig+0x470>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0f0      	beq.n	8003fde <HAL_RCC_OscConfig+0x416>
 8003ffc:	e054      	b.n	80040a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ffe:	4b10      	ldr	r3, [pc, #64]	@ (8004040 <HAL_RCC_OscConfig+0x478>)
 8004000:	2200      	movs	r2, #0
 8004002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004004:	f7fe f9bc 	bl	8002380 <HAL_GetTick>
 8004008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800400c:	f7fe f9b8 	bl	8002380 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e045      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800401e:	4b06      	ldr	r3, [pc, #24]	@ (8004038 <HAL_RCC_OscConfig+0x470>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1f0      	bne.n	800400c <HAL_RCC_OscConfig+0x444>
 800402a:	e03d      	b.n	80040a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d107      	bne.n	8004044 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e038      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
 8004038:	40023800 	.word	0x40023800
 800403c:	40007000 	.word	0x40007000
 8004040:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004044:	4b1b      	ldr	r3, [pc, #108]	@ (80040b4 <HAL_RCC_OscConfig+0x4ec>)
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d028      	beq.n	80040a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800405c:	429a      	cmp	r2, r3
 800405e:	d121      	bne.n	80040a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800406a:	429a      	cmp	r2, r3
 800406c:	d11a      	bne.n	80040a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004074:	4013      	ands	r3, r2
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800407a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800407c:	4293      	cmp	r3, r2
 800407e:	d111      	bne.n	80040a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800408a:	085b      	lsrs	r3, r3, #1
 800408c:	3b01      	subs	r3, #1
 800408e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004090:	429a      	cmp	r2, r3
 8004092:	d107      	bne.n	80040a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800409e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d001      	beq.n	80040a8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e000      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3718      	adds	r7, #24
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	40023800 	.word	0x40023800

080040b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d101      	bne.n	80040cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e0cc      	b.n	8004266 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040cc:	4b68      	ldr	r3, [pc, #416]	@ (8004270 <HAL_RCC_ClockConfig+0x1b8>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0307 	and.w	r3, r3, #7
 80040d4:	683a      	ldr	r2, [r7, #0]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d90c      	bls.n	80040f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040da:	4b65      	ldr	r3, [pc, #404]	@ (8004270 <HAL_RCC_ClockConfig+0x1b8>)
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	b2d2      	uxtb	r2, r2
 80040e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040e2:	4b63      	ldr	r3, [pc, #396]	@ (8004270 <HAL_RCC_ClockConfig+0x1b8>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0307 	and.w	r3, r3, #7
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d001      	beq.n	80040f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e0b8      	b.n	8004266 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d020      	beq.n	8004142 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0304 	and.w	r3, r3, #4
 8004108:	2b00      	cmp	r3, #0
 800410a:	d005      	beq.n	8004118 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800410c:	4b59      	ldr	r3, [pc, #356]	@ (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	4a58      	ldr	r2, [pc, #352]	@ (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 8004112:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004116:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0308 	and.w	r3, r3, #8
 8004120:	2b00      	cmp	r3, #0
 8004122:	d005      	beq.n	8004130 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004124:	4b53      	ldr	r3, [pc, #332]	@ (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	4a52      	ldr	r2, [pc, #328]	@ (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 800412a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800412e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004130:	4b50      	ldr	r3, [pc, #320]	@ (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	494d      	ldr	r1, [pc, #308]	@ (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 800413e:	4313      	orrs	r3, r2
 8004140:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b00      	cmp	r3, #0
 800414c:	d044      	beq.n	80041d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d107      	bne.n	8004166 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004156:	4b47      	ldr	r3, [pc, #284]	@ (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d119      	bne.n	8004196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e07f      	b.n	8004266 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	2b02      	cmp	r3, #2
 800416c:	d003      	beq.n	8004176 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004172:	2b03      	cmp	r3, #3
 8004174:	d107      	bne.n	8004186 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004176:	4b3f      	ldr	r3, [pc, #252]	@ (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d109      	bne.n	8004196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e06f      	b.n	8004266 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004186:	4b3b      	ldr	r3, [pc, #236]	@ (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e067      	b.n	8004266 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004196:	4b37      	ldr	r3, [pc, #220]	@ (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f023 0203 	bic.w	r2, r3, #3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	4934      	ldr	r1, [pc, #208]	@ (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041a8:	f7fe f8ea 	bl	8002380 <HAL_GetTick>
 80041ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ae:	e00a      	b.n	80041c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041b0:	f7fe f8e6 	bl	8002380 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041be:	4293      	cmp	r3, r2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e04f      	b.n	8004266 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041c6:	4b2b      	ldr	r3, [pc, #172]	@ (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 020c 	and.w	r2, r3, #12
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d1eb      	bne.n	80041b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041d8:	4b25      	ldr	r3, [pc, #148]	@ (8004270 <HAL_RCC_ClockConfig+0x1b8>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0307 	and.w	r3, r3, #7
 80041e0:	683a      	ldr	r2, [r7, #0]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d20c      	bcs.n	8004200 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041e6:	4b22      	ldr	r3, [pc, #136]	@ (8004270 <HAL_RCC_ClockConfig+0x1b8>)
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	b2d2      	uxtb	r2, r2
 80041ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ee:	4b20      	ldr	r3, [pc, #128]	@ (8004270 <HAL_RCC_ClockConfig+0x1b8>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0307 	and.w	r3, r3, #7
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d001      	beq.n	8004200 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e032      	b.n	8004266 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0304 	and.w	r3, r3, #4
 8004208:	2b00      	cmp	r3, #0
 800420a:	d008      	beq.n	800421e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800420c:	4b19      	ldr	r3, [pc, #100]	@ (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	4916      	ldr	r1, [pc, #88]	@ (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 800421a:	4313      	orrs	r3, r2
 800421c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0308 	and.w	r3, r3, #8
 8004226:	2b00      	cmp	r3, #0
 8004228:	d009      	beq.n	800423e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800422a:	4b12      	ldr	r3, [pc, #72]	@ (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	490e      	ldr	r1, [pc, #56]	@ (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 800423a:	4313      	orrs	r3, r2
 800423c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800423e:	f000 f821 	bl	8004284 <HAL_RCC_GetSysClockFreq>
 8004242:	4602      	mov	r2, r0
 8004244:	4b0b      	ldr	r3, [pc, #44]	@ (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	091b      	lsrs	r3, r3, #4
 800424a:	f003 030f 	and.w	r3, r3, #15
 800424e:	490a      	ldr	r1, [pc, #40]	@ (8004278 <HAL_RCC_ClockConfig+0x1c0>)
 8004250:	5ccb      	ldrb	r3, [r1, r3]
 8004252:	fa22 f303 	lsr.w	r3, r2, r3
 8004256:	4a09      	ldr	r2, [pc, #36]	@ (800427c <HAL_RCC_ClockConfig+0x1c4>)
 8004258:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800425a:	4b09      	ldr	r3, [pc, #36]	@ (8004280 <HAL_RCC_ClockConfig+0x1c8>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4618      	mov	r0, r3
 8004260:	f7fe f84a 	bl	80022f8 <HAL_InitTick>

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	40023c00 	.word	0x40023c00
 8004274:	40023800 	.word	0x40023800
 8004278:	0800b060 	.word	0x0800b060
 800427c:	20000000 	.word	0x20000000
 8004280:	20000004 	.word	0x20000004

08004284 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004284:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004288:	b094      	sub	sp, #80	@ 0x50
 800428a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800428c:	2300      	movs	r3, #0
 800428e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004290:	2300      	movs	r3, #0
 8004292:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004294:	2300      	movs	r3, #0
 8004296:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004298:	2300      	movs	r3, #0
 800429a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800429c:	4b79      	ldr	r3, [pc, #484]	@ (8004484 <HAL_RCC_GetSysClockFreq+0x200>)
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f003 030c 	and.w	r3, r3, #12
 80042a4:	2b08      	cmp	r3, #8
 80042a6:	d00d      	beq.n	80042c4 <HAL_RCC_GetSysClockFreq+0x40>
 80042a8:	2b08      	cmp	r3, #8
 80042aa:	f200 80e1 	bhi.w	8004470 <HAL_RCC_GetSysClockFreq+0x1ec>
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d002      	beq.n	80042b8 <HAL_RCC_GetSysClockFreq+0x34>
 80042b2:	2b04      	cmp	r3, #4
 80042b4:	d003      	beq.n	80042be <HAL_RCC_GetSysClockFreq+0x3a>
 80042b6:	e0db      	b.n	8004470 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042b8:	4b73      	ldr	r3, [pc, #460]	@ (8004488 <HAL_RCC_GetSysClockFreq+0x204>)
 80042ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80042bc:	e0db      	b.n	8004476 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042be:	4b73      	ldr	r3, [pc, #460]	@ (800448c <HAL_RCC_GetSysClockFreq+0x208>)
 80042c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80042c2:	e0d8      	b.n	8004476 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042c4:	4b6f      	ldr	r3, [pc, #444]	@ (8004484 <HAL_RCC_GetSysClockFreq+0x200>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042cc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042ce:	4b6d      	ldr	r3, [pc, #436]	@ (8004484 <HAL_RCC_GetSysClockFreq+0x200>)
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d063      	beq.n	80043a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042da:	4b6a      	ldr	r3, [pc, #424]	@ (8004484 <HAL_RCC_GetSysClockFreq+0x200>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	099b      	lsrs	r3, r3, #6
 80042e0:	2200      	movs	r2, #0
 80042e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80042e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80042e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80042ee:	2300      	movs	r3, #0
 80042f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80042f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80042f6:	4622      	mov	r2, r4
 80042f8:	462b      	mov	r3, r5
 80042fa:	f04f 0000 	mov.w	r0, #0
 80042fe:	f04f 0100 	mov.w	r1, #0
 8004302:	0159      	lsls	r1, r3, #5
 8004304:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004308:	0150      	lsls	r0, r2, #5
 800430a:	4602      	mov	r2, r0
 800430c:	460b      	mov	r3, r1
 800430e:	4621      	mov	r1, r4
 8004310:	1a51      	subs	r1, r2, r1
 8004312:	6139      	str	r1, [r7, #16]
 8004314:	4629      	mov	r1, r5
 8004316:	eb63 0301 	sbc.w	r3, r3, r1
 800431a:	617b      	str	r3, [r7, #20]
 800431c:	f04f 0200 	mov.w	r2, #0
 8004320:	f04f 0300 	mov.w	r3, #0
 8004324:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004328:	4659      	mov	r1, fp
 800432a:	018b      	lsls	r3, r1, #6
 800432c:	4651      	mov	r1, sl
 800432e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004332:	4651      	mov	r1, sl
 8004334:	018a      	lsls	r2, r1, #6
 8004336:	4651      	mov	r1, sl
 8004338:	ebb2 0801 	subs.w	r8, r2, r1
 800433c:	4659      	mov	r1, fp
 800433e:	eb63 0901 	sbc.w	r9, r3, r1
 8004342:	f04f 0200 	mov.w	r2, #0
 8004346:	f04f 0300 	mov.w	r3, #0
 800434a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800434e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004352:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004356:	4690      	mov	r8, r2
 8004358:	4699      	mov	r9, r3
 800435a:	4623      	mov	r3, r4
 800435c:	eb18 0303 	adds.w	r3, r8, r3
 8004360:	60bb      	str	r3, [r7, #8]
 8004362:	462b      	mov	r3, r5
 8004364:	eb49 0303 	adc.w	r3, r9, r3
 8004368:	60fb      	str	r3, [r7, #12]
 800436a:	f04f 0200 	mov.w	r2, #0
 800436e:	f04f 0300 	mov.w	r3, #0
 8004372:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004376:	4629      	mov	r1, r5
 8004378:	024b      	lsls	r3, r1, #9
 800437a:	4621      	mov	r1, r4
 800437c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004380:	4621      	mov	r1, r4
 8004382:	024a      	lsls	r2, r1, #9
 8004384:	4610      	mov	r0, r2
 8004386:	4619      	mov	r1, r3
 8004388:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800438a:	2200      	movs	r2, #0
 800438c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800438e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004390:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004394:	f7fc fc78 	bl	8000c88 <__aeabi_uldivmod>
 8004398:	4602      	mov	r2, r0
 800439a:	460b      	mov	r3, r1
 800439c:	4613      	mov	r3, r2
 800439e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043a0:	e058      	b.n	8004454 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043a2:	4b38      	ldr	r3, [pc, #224]	@ (8004484 <HAL_RCC_GetSysClockFreq+0x200>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	099b      	lsrs	r3, r3, #6
 80043a8:	2200      	movs	r2, #0
 80043aa:	4618      	mov	r0, r3
 80043ac:	4611      	mov	r1, r2
 80043ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80043b2:	623b      	str	r3, [r7, #32]
 80043b4:	2300      	movs	r3, #0
 80043b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80043b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80043bc:	4642      	mov	r2, r8
 80043be:	464b      	mov	r3, r9
 80043c0:	f04f 0000 	mov.w	r0, #0
 80043c4:	f04f 0100 	mov.w	r1, #0
 80043c8:	0159      	lsls	r1, r3, #5
 80043ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043ce:	0150      	lsls	r0, r2, #5
 80043d0:	4602      	mov	r2, r0
 80043d2:	460b      	mov	r3, r1
 80043d4:	4641      	mov	r1, r8
 80043d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80043da:	4649      	mov	r1, r9
 80043dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80043e0:	f04f 0200 	mov.w	r2, #0
 80043e4:	f04f 0300 	mov.w	r3, #0
 80043e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80043ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80043f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80043f4:	ebb2 040a 	subs.w	r4, r2, sl
 80043f8:	eb63 050b 	sbc.w	r5, r3, fp
 80043fc:	f04f 0200 	mov.w	r2, #0
 8004400:	f04f 0300 	mov.w	r3, #0
 8004404:	00eb      	lsls	r3, r5, #3
 8004406:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800440a:	00e2      	lsls	r2, r4, #3
 800440c:	4614      	mov	r4, r2
 800440e:	461d      	mov	r5, r3
 8004410:	4643      	mov	r3, r8
 8004412:	18e3      	adds	r3, r4, r3
 8004414:	603b      	str	r3, [r7, #0]
 8004416:	464b      	mov	r3, r9
 8004418:	eb45 0303 	adc.w	r3, r5, r3
 800441c:	607b      	str	r3, [r7, #4]
 800441e:	f04f 0200 	mov.w	r2, #0
 8004422:	f04f 0300 	mov.w	r3, #0
 8004426:	e9d7 4500 	ldrd	r4, r5, [r7]
 800442a:	4629      	mov	r1, r5
 800442c:	028b      	lsls	r3, r1, #10
 800442e:	4621      	mov	r1, r4
 8004430:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004434:	4621      	mov	r1, r4
 8004436:	028a      	lsls	r2, r1, #10
 8004438:	4610      	mov	r0, r2
 800443a:	4619      	mov	r1, r3
 800443c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800443e:	2200      	movs	r2, #0
 8004440:	61bb      	str	r3, [r7, #24]
 8004442:	61fa      	str	r2, [r7, #28]
 8004444:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004448:	f7fc fc1e 	bl	8000c88 <__aeabi_uldivmod>
 800444c:	4602      	mov	r2, r0
 800444e:	460b      	mov	r3, r1
 8004450:	4613      	mov	r3, r2
 8004452:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004454:	4b0b      	ldr	r3, [pc, #44]	@ (8004484 <HAL_RCC_GetSysClockFreq+0x200>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	0c1b      	lsrs	r3, r3, #16
 800445a:	f003 0303 	and.w	r3, r3, #3
 800445e:	3301      	adds	r3, #1
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004464:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004466:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004468:	fbb2 f3f3 	udiv	r3, r2, r3
 800446c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800446e:	e002      	b.n	8004476 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004470:	4b05      	ldr	r3, [pc, #20]	@ (8004488 <HAL_RCC_GetSysClockFreq+0x204>)
 8004472:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004474:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004476:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004478:	4618      	mov	r0, r3
 800447a:	3750      	adds	r7, #80	@ 0x50
 800447c:	46bd      	mov	sp, r7
 800447e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004482:	bf00      	nop
 8004484:	40023800 	.word	0x40023800
 8004488:	00f42400 	.word	0x00f42400
 800448c:	007a1200 	.word	0x007a1200

08004490 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004490:	b480      	push	{r7}
 8004492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004494:	4b03      	ldr	r3, [pc, #12]	@ (80044a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004496:	681b      	ldr	r3, [r3, #0]
}
 8004498:	4618      	mov	r0, r3
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	20000000 	.word	0x20000000

080044a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044ac:	f7ff fff0 	bl	8004490 <HAL_RCC_GetHCLKFreq>
 80044b0:	4602      	mov	r2, r0
 80044b2:	4b05      	ldr	r3, [pc, #20]	@ (80044c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	0a9b      	lsrs	r3, r3, #10
 80044b8:	f003 0307 	and.w	r3, r3, #7
 80044bc:	4903      	ldr	r1, [pc, #12]	@ (80044cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80044be:	5ccb      	ldrb	r3, [r1, r3]
 80044c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	40023800 	.word	0x40023800
 80044cc:	0800b070 	.word	0x0800b070

080044d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044d4:	f7ff ffdc 	bl	8004490 <HAL_RCC_GetHCLKFreq>
 80044d8:	4602      	mov	r2, r0
 80044da:	4b05      	ldr	r3, [pc, #20]	@ (80044f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	0b5b      	lsrs	r3, r3, #13
 80044e0:	f003 0307 	and.w	r3, r3, #7
 80044e4:	4903      	ldr	r1, [pc, #12]	@ (80044f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044e6:	5ccb      	ldrb	r3, [r1, r3]
 80044e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	40023800 	.word	0x40023800
 80044f4:	0800b070 	.word	0x0800b070

080044f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e042      	b.n	8004590 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d106      	bne.n	8004524 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7fd fce4 	bl	8001eec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2224      	movs	r2, #36	@ 0x24
 8004528:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68da      	ldr	r2, [r3, #12]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800453a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 fb83 	bl	8004c48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	691a      	ldr	r2, [r3, #16]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004550:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	695a      	ldr	r2, [r3, #20]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004560:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68da      	ldr	r2, [r3, #12]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004570:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2220      	movs	r2, #32
 800457c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2220      	movs	r2, #32
 8004584:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3708      	adds	r7, #8
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b08a      	sub	sp, #40	@ 0x28
 800459c:	af02      	add	r7, sp, #8
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	603b      	str	r3, [r7, #0]
 80045a4:	4613      	mov	r3, r2
 80045a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80045a8:	2300      	movs	r3, #0
 80045aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b20      	cmp	r3, #32
 80045b6:	d175      	bne.n	80046a4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d002      	beq.n	80045c4 <HAL_UART_Transmit+0x2c>
 80045be:	88fb      	ldrh	r3, [r7, #6]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d101      	bne.n	80045c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e06e      	b.n	80046a6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2221      	movs	r2, #33	@ 0x21
 80045d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045d6:	f7fd fed3 	bl	8002380 <HAL_GetTick>
 80045da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	88fa      	ldrh	r2, [r7, #6]
 80045e0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	88fa      	ldrh	r2, [r7, #6]
 80045e6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045f0:	d108      	bne.n	8004604 <HAL_UART_Transmit+0x6c>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d104      	bne.n	8004604 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80045fa:	2300      	movs	r3, #0
 80045fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	61bb      	str	r3, [r7, #24]
 8004602:	e003      	b.n	800460c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004608:	2300      	movs	r3, #0
 800460a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800460c:	e02e      	b.n	800466c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	2200      	movs	r2, #0
 8004616:	2180      	movs	r1, #128	@ 0x80
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f000 f995 	bl	8004948 <UART_WaitOnFlagUntilTimeout>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d005      	beq.n	8004630 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2220      	movs	r2, #32
 8004628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e03a      	b.n	80046a6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10b      	bne.n	800464e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	881b      	ldrh	r3, [r3, #0]
 800463a:	461a      	mov	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004644:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	3302      	adds	r3, #2
 800464a:	61bb      	str	r3, [r7, #24]
 800464c:	e007      	b.n	800465e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	781a      	ldrb	r2, [r3, #0]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	3301      	adds	r3, #1
 800465c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004662:	b29b      	uxth	r3, r3
 8004664:	3b01      	subs	r3, #1
 8004666:	b29a      	uxth	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004670:	b29b      	uxth	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1cb      	bne.n	800460e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	9300      	str	r3, [sp, #0]
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	2200      	movs	r2, #0
 800467e:	2140      	movs	r1, #64	@ 0x40
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	f000 f961 	bl	8004948 <UART_WaitOnFlagUntilTimeout>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d005      	beq.n	8004698 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2220      	movs	r2, #32
 8004690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e006      	b.n	80046a6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2220      	movs	r2, #32
 800469c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80046a0:	2300      	movs	r3, #0
 80046a2:	e000      	b.n	80046a6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80046a4:	2302      	movs	r3, #2
  }
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3720      	adds	r7, #32
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b084      	sub	sp, #16
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	60f8      	str	r0, [r7, #12]
 80046b6:	60b9      	str	r1, [r7, #8]
 80046b8:	4613      	mov	r3, r2
 80046ba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	2b20      	cmp	r3, #32
 80046c6:	d112      	bne.n	80046ee <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d002      	beq.n	80046d4 <HAL_UART_Receive_DMA+0x26>
 80046ce:	88fb      	ldrh	r3, [r7, #6]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d101      	bne.n	80046d8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e00b      	b.n	80046f0 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80046de:	88fb      	ldrh	r3, [r7, #6]
 80046e0:	461a      	mov	r2, r3
 80046e2:	68b9      	ldr	r1, [r7, #8]
 80046e4:	68f8      	ldr	r0, [r7, #12]
 80046e6:	f000 f989 	bl	80049fc <UART_Start_Receive_DMA>
 80046ea:	4603      	mov	r3, r0
 80046ec:	e000      	b.n	80046f0 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80046ee:	2302      	movs	r3, #2
  }
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	460b      	mov	r3, r1
 800473e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b09c      	sub	sp, #112	@ 0x70
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004758:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004764:	2b00      	cmp	r3, #0
 8004766:	d172      	bne.n	800484e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004768:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800476a:	2200      	movs	r2, #0
 800476c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800476e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	330c      	adds	r3, #12
 8004774:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004776:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004778:	e853 3f00 	ldrex	r3, [r3]
 800477c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800477e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004780:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004784:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004786:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	330c      	adds	r3, #12
 800478c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800478e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004790:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004792:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004794:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004796:	e841 2300 	strex	r3, r2, [r1]
 800479a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800479c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1e5      	bne.n	800476e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	3314      	adds	r3, #20
 80047a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ac:	e853 3f00 	ldrex	r3, [r3]
 80047b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80047b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047b4:	f023 0301 	bic.w	r3, r3, #1
 80047b8:	667b      	str	r3, [r7, #100]	@ 0x64
 80047ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	3314      	adds	r3, #20
 80047c0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80047c2:	647a      	str	r2, [r7, #68]	@ 0x44
 80047c4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80047c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047ca:	e841 2300 	strex	r3, r2, [r1]
 80047ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80047d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1e5      	bne.n	80047a2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	3314      	adds	r3, #20
 80047dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e0:	e853 3f00 	ldrex	r3, [r3]
 80047e4:	623b      	str	r3, [r7, #32]
   return(result);
 80047e6:	6a3b      	ldr	r3, [r7, #32]
 80047e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80047ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	3314      	adds	r3, #20
 80047f4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80047f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80047f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047fe:	e841 2300 	strex	r3, r2, [r1]
 8004802:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1e5      	bne.n	80047d6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800480a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800480c:	2220      	movs	r2, #32
 800480e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004812:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004816:	2b01      	cmp	r3, #1
 8004818:	d119      	bne.n	800484e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800481a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	330c      	adds	r3, #12
 8004820:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	e853 3f00 	ldrex	r3, [r3]
 8004828:	60fb      	str	r3, [r7, #12]
   return(result);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f023 0310 	bic.w	r3, r3, #16
 8004830:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004832:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	330c      	adds	r3, #12
 8004838:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800483a:	61fa      	str	r2, [r7, #28]
 800483c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483e:	69b9      	ldr	r1, [r7, #24]
 8004840:	69fa      	ldr	r2, [r7, #28]
 8004842:	e841 2300 	strex	r3, r2, [r1]
 8004846:	617b      	str	r3, [r7, #20]
   return(result);
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1e5      	bne.n	800481a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800484e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004850:	2200      	movs	r2, #0
 8004852:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004854:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004858:	2b01      	cmp	r3, #1
 800485a:	d106      	bne.n	800486a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800485c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800485e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004860:	4619      	mov	r1, r3
 8004862:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004864:	f7ff ff66 	bl	8004734 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004868:	e002      	b.n	8004870 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800486a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800486c:	f7ff ff44 	bl	80046f8 <HAL_UART_RxCpltCallback>
}
 8004870:	bf00      	nop
 8004872:	3770      	adds	r7, #112	@ 0x70
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004884:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2201      	movs	r2, #1
 800488a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004890:	2b01      	cmp	r3, #1
 8004892:	d108      	bne.n	80048a6 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004898:	085b      	lsrs	r3, r3, #1
 800489a:	b29b      	uxth	r3, r3
 800489c:	4619      	mov	r1, r3
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f7ff ff48 	bl	8004734 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80048a4:	e002      	b.n	80048ac <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	f7ff ff30 	bl	800470c <HAL_UART_RxHalfCpltCallback>
}
 80048ac:	bf00      	nop
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80048bc:	2300      	movs	r3, #0
 80048be:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048d0:	2b80      	cmp	r3, #128	@ 0x80
 80048d2:	bf0c      	ite	eq
 80048d4:	2301      	moveq	r3, #1
 80048d6:	2300      	movne	r3, #0
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b21      	cmp	r3, #33	@ 0x21
 80048e6:	d108      	bne.n	80048fa <UART_DMAError+0x46>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d005      	beq.n	80048fa <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	2200      	movs	r2, #0
 80048f2:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80048f4:	68b8      	ldr	r0, [r7, #8]
 80048f6:	f000 f91b 	bl	8004b30 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004904:	2b40      	cmp	r3, #64	@ 0x40
 8004906:	bf0c      	ite	eq
 8004908:	2301      	moveq	r3, #1
 800490a:	2300      	movne	r3, #0
 800490c:	b2db      	uxtb	r3, r3
 800490e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b22      	cmp	r3, #34	@ 0x22
 800491a:	d108      	bne.n	800492e <UART_DMAError+0x7a>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d005      	beq.n	800492e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	2200      	movs	r2, #0
 8004926:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004928:	68b8      	ldr	r0, [r7, #8]
 800492a:	f000 f929 	bl	8004b80 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004932:	f043 0210 	orr.w	r2, r3, #16
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800493a:	68b8      	ldr	r0, [r7, #8]
 800493c:	f7ff fef0 	bl	8004720 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004940:	bf00      	nop
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b086      	sub	sp, #24
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	603b      	str	r3, [r7, #0]
 8004954:	4613      	mov	r3, r2
 8004956:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004958:	e03b      	b.n	80049d2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800495a:	6a3b      	ldr	r3, [r7, #32]
 800495c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004960:	d037      	beq.n	80049d2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004962:	f7fd fd0d 	bl	8002380 <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	6a3a      	ldr	r2, [r7, #32]
 800496e:	429a      	cmp	r2, r3
 8004970:	d302      	bcc.n	8004978 <UART_WaitOnFlagUntilTimeout+0x30>
 8004972:	6a3b      	ldr	r3, [r7, #32]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d101      	bne.n	800497c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e03a      	b.n	80049f2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	f003 0304 	and.w	r3, r3, #4
 8004986:	2b00      	cmp	r3, #0
 8004988:	d023      	beq.n	80049d2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	2b80      	cmp	r3, #128	@ 0x80
 800498e:	d020      	beq.n	80049d2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	2b40      	cmp	r3, #64	@ 0x40
 8004994:	d01d      	beq.n	80049d2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0308 	and.w	r3, r3, #8
 80049a0:	2b08      	cmp	r3, #8
 80049a2:	d116      	bne.n	80049d2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80049a4:	2300      	movs	r3, #0
 80049a6:	617b      	str	r3, [r7, #20]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	617b      	str	r3, [r7, #20]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	617b      	str	r3, [r7, #20]
 80049b8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049ba:	68f8      	ldr	r0, [r7, #12]
 80049bc:	f000 f8e0 	bl	8004b80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2208      	movs	r2, #8
 80049c4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e00f      	b.n	80049f2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	4013      	ands	r3, r2
 80049dc:	68ba      	ldr	r2, [r7, #8]
 80049de:	429a      	cmp	r2, r3
 80049e0:	bf0c      	ite	eq
 80049e2:	2301      	moveq	r3, #1
 80049e4:	2300      	movne	r3, #0
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	461a      	mov	r2, r3
 80049ea:	79fb      	ldrb	r3, [r7, #7]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d0b4      	beq.n	800495a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3718      	adds	r7, #24
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
	...

080049fc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b098      	sub	sp, #96	@ 0x60
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	4613      	mov	r3, r2
 8004a08:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	88fa      	ldrh	r2, [r7, #6]
 8004a14:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2222      	movs	r2, #34	@ 0x22
 8004a20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a28:	4a3e      	ldr	r2, [pc, #248]	@ (8004b24 <UART_Start_Receive_DMA+0x128>)
 8004a2a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a30:	4a3d      	ldr	r2, [pc, #244]	@ (8004b28 <UART_Start_Receive_DMA+0x12c>)
 8004a32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a38:	4a3c      	ldr	r2, [pc, #240]	@ (8004b2c <UART_Start_Receive_DMA+0x130>)
 8004a3a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a40:	2200      	movs	r2, #0
 8004a42:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004a44:	f107 0308 	add.w	r3, r7, #8
 8004a48:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	3304      	adds	r3, #4
 8004a54:	4619      	mov	r1, r3
 8004a56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	88fb      	ldrh	r3, [r7, #6]
 8004a5c:	f7fe fa28 	bl	8002eb0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004a60:	2300      	movs	r3, #0
 8004a62:	613b      	str	r3, [r7, #16]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	613b      	str	r3, [r7, #16]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	613b      	str	r3, [r7, #16]
 8004a74:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d019      	beq.n	8004ab2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	330c      	adds	r3, #12
 8004a84:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a88:	e853 3f00 	ldrex	r3, [r3]
 8004a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a94:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	330c      	adds	r3, #12
 8004a9c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a9e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004aa0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004aa4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004aa6:	e841 2300 	strex	r3, r2, [r1]
 8004aaa:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004aac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1e5      	bne.n	8004a7e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	3314      	adds	r3, #20
 8004ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004abc:	e853 3f00 	ldrex	r3, [r3]
 8004ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ac4:	f043 0301 	orr.w	r3, r3, #1
 8004ac8:	657b      	str	r3, [r7, #84]	@ 0x54
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	3314      	adds	r3, #20
 8004ad0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004ad2:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004ad4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004ad8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004ada:	e841 2300 	strex	r3, r2, [r1]
 8004ade:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1e5      	bne.n	8004ab2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	3314      	adds	r3, #20
 8004aec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	e853 3f00 	ldrex	r3, [r3]
 8004af4:	617b      	str	r3, [r7, #20]
   return(result);
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004afc:	653b      	str	r3, [r7, #80]	@ 0x50
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	3314      	adds	r3, #20
 8004b04:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004b06:	627a      	str	r2, [r7, #36]	@ 0x24
 8004b08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0a:	6a39      	ldr	r1, [r7, #32]
 8004b0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b0e:	e841 2300 	strex	r3, r2, [r1]
 8004b12:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1e5      	bne.n	8004ae6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3760      	adds	r7, #96	@ 0x60
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	0800474d 	.word	0x0800474d
 8004b28:	08004879 	.word	0x08004879
 8004b2c:	080048b5 	.word	0x080048b5

08004b30 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b089      	sub	sp, #36	@ 0x24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	330c      	adds	r3, #12
 8004b3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	e853 3f00 	ldrex	r3, [r3]
 8004b46:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004b4e:	61fb      	str	r3, [r7, #28]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	330c      	adds	r3, #12
 8004b56:	69fa      	ldr	r2, [r7, #28]
 8004b58:	61ba      	str	r2, [r7, #24]
 8004b5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5c:	6979      	ldr	r1, [r7, #20]
 8004b5e:	69ba      	ldr	r2, [r7, #24]
 8004b60:	e841 2300 	strex	r3, r2, [r1]
 8004b64:	613b      	str	r3, [r7, #16]
   return(result);
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1e5      	bne.n	8004b38 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2220      	movs	r2, #32
 8004b70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004b74:	bf00      	nop
 8004b76:	3724      	adds	r7, #36	@ 0x24
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b095      	sub	sp, #84	@ 0x54
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	330c      	adds	r3, #12
 8004b8e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b92:	e853 3f00 	ldrex	r3, [r3]
 8004b96:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	330c      	adds	r3, #12
 8004ba6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ba8:	643a      	str	r2, [r7, #64]	@ 0x40
 8004baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004bae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004bb0:	e841 2300 	strex	r3, r2, [r1]
 8004bb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d1e5      	bne.n	8004b88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	3314      	adds	r3, #20
 8004bc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc4:	6a3b      	ldr	r3, [r7, #32]
 8004bc6:	e853 3f00 	ldrex	r3, [r3]
 8004bca:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	f023 0301 	bic.w	r3, r3, #1
 8004bd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	3314      	adds	r3, #20
 8004bda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004bdc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004bde:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004be2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004be4:	e841 2300 	strex	r3, r2, [r1]
 8004be8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1e5      	bne.n	8004bbc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d119      	bne.n	8004c2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	330c      	adds	r3, #12
 8004bfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	e853 3f00 	ldrex	r3, [r3]
 8004c06:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	f023 0310 	bic.w	r3, r3, #16
 8004c0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	330c      	adds	r3, #12
 8004c16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c18:	61ba      	str	r2, [r7, #24]
 8004c1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1c:	6979      	ldr	r1, [r7, #20]
 8004c1e:	69ba      	ldr	r2, [r7, #24]
 8004c20:	e841 2300 	strex	r3, r2, [r1]
 8004c24:	613b      	str	r3, [r7, #16]
   return(result);
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1e5      	bne.n	8004bf8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2220      	movs	r2, #32
 8004c30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004c3a:	bf00      	nop
 8004c3c:	3754      	adds	r7, #84	@ 0x54
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
	...

08004c48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c4c:	b0c0      	sub	sp, #256	@ 0x100
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c64:	68d9      	ldr	r1, [r3, #12]
 8004c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	ea40 0301 	orr.w	r3, r0, r1
 8004c70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c76:	689a      	ldr	r2, [r3, #8]
 8004c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	431a      	orrs	r2, r3
 8004c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c8c:	69db      	ldr	r3, [r3, #28]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004ca0:	f021 010c 	bic.w	r1, r1, #12
 8004ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004cae:	430b      	orrs	r3, r1
 8004cb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cc2:	6999      	ldr	r1, [r3, #24]
 8004cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	ea40 0301 	orr.w	r3, r0, r1
 8004cce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	4b8f      	ldr	r3, [pc, #572]	@ (8004f14 <UART_SetConfig+0x2cc>)
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d005      	beq.n	8004ce8 <UART_SetConfig+0xa0>
 8004cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	4b8d      	ldr	r3, [pc, #564]	@ (8004f18 <UART_SetConfig+0x2d0>)
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d104      	bne.n	8004cf2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ce8:	f7ff fbf2 	bl	80044d0 <HAL_RCC_GetPCLK2Freq>
 8004cec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004cf0:	e003      	b.n	8004cfa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004cf2:	f7ff fbd9 	bl	80044a8 <HAL_RCC_GetPCLK1Freq>
 8004cf6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cfe:	69db      	ldr	r3, [r3, #28]
 8004d00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d04:	f040 810c 	bne.w	8004f20 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004d12:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004d16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004d1a:	4622      	mov	r2, r4
 8004d1c:	462b      	mov	r3, r5
 8004d1e:	1891      	adds	r1, r2, r2
 8004d20:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004d22:	415b      	adcs	r3, r3
 8004d24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004d2a:	4621      	mov	r1, r4
 8004d2c:	eb12 0801 	adds.w	r8, r2, r1
 8004d30:	4629      	mov	r1, r5
 8004d32:	eb43 0901 	adc.w	r9, r3, r1
 8004d36:	f04f 0200 	mov.w	r2, #0
 8004d3a:	f04f 0300 	mov.w	r3, #0
 8004d3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d4a:	4690      	mov	r8, r2
 8004d4c:	4699      	mov	r9, r3
 8004d4e:	4623      	mov	r3, r4
 8004d50:	eb18 0303 	adds.w	r3, r8, r3
 8004d54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004d58:	462b      	mov	r3, r5
 8004d5a:	eb49 0303 	adc.w	r3, r9, r3
 8004d5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004d6e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004d72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004d76:	460b      	mov	r3, r1
 8004d78:	18db      	adds	r3, r3, r3
 8004d7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	eb42 0303 	adc.w	r3, r2, r3
 8004d82:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004d88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004d8c:	f7fb ff7c 	bl	8000c88 <__aeabi_uldivmod>
 8004d90:	4602      	mov	r2, r0
 8004d92:	460b      	mov	r3, r1
 8004d94:	4b61      	ldr	r3, [pc, #388]	@ (8004f1c <UART_SetConfig+0x2d4>)
 8004d96:	fba3 2302 	umull	r2, r3, r3, r2
 8004d9a:	095b      	lsrs	r3, r3, #5
 8004d9c:	011c      	lsls	r4, r3, #4
 8004d9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004da2:	2200      	movs	r2, #0
 8004da4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004da8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004dac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004db0:	4642      	mov	r2, r8
 8004db2:	464b      	mov	r3, r9
 8004db4:	1891      	adds	r1, r2, r2
 8004db6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004db8:	415b      	adcs	r3, r3
 8004dba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004dbc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004dc0:	4641      	mov	r1, r8
 8004dc2:	eb12 0a01 	adds.w	sl, r2, r1
 8004dc6:	4649      	mov	r1, r9
 8004dc8:	eb43 0b01 	adc.w	fp, r3, r1
 8004dcc:	f04f 0200 	mov.w	r2, #0
 8004dd0:	f04f 0300 	mov.w	r3, #0
 8004dd4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004dd8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ddc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004de0:	4692      	mov	sl, r2
 8004de2:	469b      	mov	fp, r3
 8004de4:	4643      	mov	r3, r8
 8004de6:	eb1a 0303 	adds.w	r3, sl, r3
 8004dea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004dee:	464b      	mov	r3, r9
 8004df0:	eb4b 0303 	adc.w	r3, fp, r3
 8004df4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e04:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004e08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	18db      	adds	r3, r3, r3
 8004e10:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e12:	4613      	mov	r3, r2
 8004e14:	eb42 0303 	adc.w	r3, r2, r3
 8004e18:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004e1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004e22:	f7fb ff31 	bl	8000c88 <__aeabi_uldivmod>
 8004e26:	4602      	mov	r2, r0
 8004e28:	460b      	mov	r3, r1
 8004e2a:	4611      	mov	r1, r2
 8004e2c:	4b3b      	ldr	r3, [pc, #236]	@ (8004f1c <UART_SetConfig+0x2d4>)
 8004e2e:	fba3 2301 	umull	r2, r3, r3, r1
 8004e32:	095b      	lsrs	r3, r3, #5
 8004e34:	2264      	movs	r2, #100	@ 0x64
 8004e36:	fb02 f303 	mul.w	r3, r2, r3
 8004e3a:	1acb      	subs	r3, r1, r3
 8004e3c:	00db      	lsls	r3, r3, #3
 8004e3e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004e42:	4b36      	ldr	r3, [pc, #216]	@ (8004f1c <UART_SetConfig+0x2d4>)
 8004e44:	fba3 2302 	umull	r2, r3, r3, r2
 8004e48:	095b      	lsrs	r3, r3, #5
 8004e4a:	005b      	lsls	r3, r3, #1
 8004e4c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004e50:	441c      	add	r4, r3
 8004e52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e56:	2200      	movs	r2, #0
 8004e58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004e5c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004e60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004e64:	4642      	mov	r2, r8
 8004e66:	464b      	mov	r3, r9
 8004e68:	1891      	adds	r1, r2, r2
 8004e6a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004e6c:	415b      	adcs	r3, r3
 8004e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004e74:	4641      	mov	r1, r8
 8004e76:	1851      	adds	r1, r2, r1
 8004e78:	6339      	str	r1, [r7, #48]	@ 0x30
 8004e7a:	4649      	mov	r1, r9
 8004e7c:	414b      	adcs	r3, r1
 8004e7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e80:	f04f 0200 	mov.w	r2, #0
 8004e84:	f04f 0300 	mov.w	r3, #0
 8004e88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004e8c:	4659      	mov	r1, fp
 8004e8e:	00cb      	lsls	r3, r1, #3
 8004e90:	4651      	mov	r1, sl
 8004e92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e96:	4651      	mov	r1, sl
 8004e98:	00ca      	lsls	r2, r1, #3
 8004e9a:	4610      	mov	r0, r2
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	4642      	mov	r2, r8
 8004ea2:	189b      	adds	r3, r3, r2
 8004ea4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ea8:	464b      	mov	r3, r9
 8004eaa:	460a      	mov	r2, r1
 8004eac:	eb42 0303 	adc.w	r3, r2, r3
 8004eb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004ec0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004ec4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004ec8:	460b      	mov	r3, r1
 8004eca:	18db      	adds	r3, r3, r3
 8004ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ece:	4613      	mov	r3, r2
 8004ed0:	eb42 0303 	adc.w	r3, r2, r3
 8004ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ed6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004eda:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004ede:	f7fb fed3 	bl	8000c88 <__aeabi_uldivmod>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8004f1c <UART_SetConfig+0x2d4>)
 8004ee8:	fba3 1302 	umull	r1, r3, r3, r2
 8004eec:	095b      	lsrs	r3, r3, #5
 8004eee:	2164      	movs	r1, #100	@ 0x64
 8004ef0:	fb01 f303 	mul.w	r3, r1, r3
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	3332      	adds	r3, #50	@ 0x32
 8004efa:	4a08      	ldr	r2, [pc, #32]	@ (8004f1c <UART_SetConfig+0x2d4>)
 8004efc:	fba2 2303 	umull	r2, r3, r2, r3
 8004f00:	095b      	lsrs	r3, r3, #5
 8004f02:	f003 0207 	and.w	r2, r3, #7
 8004f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4422      	add	r2, r4
 8004f0e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f10:	e106      	b.n	8005120 <UART_SetConfig+0x4d8>
 8004f12:	bf00      	nop
 8004f14:	40011000 	.word	0x40011000
 8004f18:	40011400 	.word	0x40011400
 8004f1c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f24:	2200      	movs	r2, #0
 8004f26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004f2a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004f2e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004f32:	4642      	mov	r2, r8
 8004f34:	464b      	mov	r3, r9
 8004f36:	1891      	adds	r1, r2, r2
 8004f38:	6239      	str	r1, [r7, #32]
 8004f3a:	415b      	adcs	r3, r3
 8004f3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f42:	4641      	mov	r1, r8
 8004f44:	1854      	adds	r4, r2, r1
 8004f46:	4649      	mov	r1, r9
 8004f48:	eb43 0501 	adc.w	r5, r3, r1
 8004f4c:	f04f 0200 	mov.w	r2, #0
 8004f50:	f04f 0300 	mov.w	r3, #0
 8004f54:	00eb      	lsls	r3, r5, #3
 8004f56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f5a:	00e2      	lsls	r2, r4, #3
 8004f5c:	4614      	mov	r4, r2
 8004f5e:	461d      	mov	r5, r3
 8004f60:	4643      	mov	r3, r8
 8004f62:	18e3      	adds	r3, r4, r3
 8004f64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004f68:	464b      	mov	r3, r9
 8004f6a:	eb45 0303 	adc.w	r3, r5, r3
 8004f6e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004f7e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004f82:	f04f 0200 	mov.w	r2, #0
 8004f86:	f04f 0300 	mov.w	r3, #0
 8004f8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004f8e:	4629      	mov	r1, r5
 8004f90:	008b      	lsls	r3, r1, #2
 8004f92:	4621      	mov	r1, r4
 8004f94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f98:	4621      	mov	r1, r4
 8004f9a:	008a      	lsls	r2, r1, #2
 8004f9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004fa0:	f7fb fe72 	bl	8000c88 <__aeabi_uldivmod>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	4b60      	ldr	r3, [pc, #384]	@ (800512c <UART_SetConfig+0x4e4>)
 8004faa:	fba3 2302 	umull	r2, r3, r3, r2
 8004fae:	095b      	lsrs	r3, r3, #5
 8004fb0:	011c      	lsls	r4, r3, #4
 8004fb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004fbc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004fc0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004fc4:	4642      	mov	r2, r8
 8004fc6:	464b      	mov	r3, r9
 8004fc8:	1891      	adds	r1, r2, r2
 8004fca:	61b9      	str	r1, [r7, #24]
 8004fcc:	415b      	adcs	r3, r3
 8004fce:	61fb      	str	r3, [r7, #28]
 8004fd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fd4:	4641      	mov	r1, r8
 8004fd6:	1851      	adds	r1, r2, r1
 8004fd8:	6139      	str	r1, [r7, #16]
 8004fda:	4649      	mov	r1, r9
 8004fdc:	414b      	adcs	r3, r1
 8004fde:	617b      	str	r3, [r7, #20]
 8004fe0:	f04f 0200 	mov.w	r2, #0
 8004fe4:	f04f 0300 	mov.w	r3, #0
 8004fe8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004fec:	4659      	mov	r1, fp
 8004fee:	00cb      	lsls	r3, r1, #3
 8004ff0:	4651      	mov	r1, sl
 8004ff2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ff6:	4651      	mov	r1, sl
 8004ff8:	00ca      	lsls	r2, r1, #3
 8004ffa:	4610      	mov	r0, r2
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	4603      	mov	r3, r0
 8005000:	4642      	mov	r2, r8
 8005002:	189b      	adds	r3, r3, r2
 8005004:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005008:	464b      	mov	r3, r9
 800500a:	460a      	mov	r2, r1
 800500c:	eb42 0303 	adc.w	r3, r2, r3
 8005010:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800501e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005020:	f04f 0200 	mov.w	r2, #0
 8005024:	f04f 0300 	mov.w	r3, #0
 8005028:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800502c:	4649      	mov	r1, r9
 800502e:	008b      	lsls	r3, r1, #2
 8005030:	4641      	mov	r1, r8
 8005032:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005036:	4641      	mov	r1, r8
 8005038:	008a      	lsls	r2, r1, #2
 800503a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800503e:	f7fb fe23 	bl	8000c88 <__aeabi_uldivmod>
 8005042:	4602      	mov	r2, r0
 8005044:	460b      	mov	r3, r1
 8005046:	4611      	mov	r1, r2
 8005048:	4b38      	ldr	r3, [pc, #224]	@ (800512c <UART_SetConfig+0x4e4>)
 800504a:	fba3 2301 	umull	r2, r3, r3, r1
 800504e:	095b      	lsrs	r3, r3, #5
 8005050:	2264      	movs	r2, #100	@ 0x64
 8005052:	fb02 f303 	mul.w	r3, r2, r3
 8005056:	1acb      	subs	r3, r1, r3
 8005058:	011b      	lsls	r3, r3, #4
 800505a:	3332      	adds	r3, #50	@ 0x32
 800505c:	4a33      	ldr	r2, [pc, #204]	@ (800512c <UART_SetConfig+0x4e4>)
 800505e:	fba2 2303 	umull	r2, r3, r2, r3
 8005062:	095b      	lsrs	r3, r3, #5
 8005064:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005068:	441c      	add	r4, r3
 800506a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800506e:	2200      	movs	r2, #0
 8005070:	673b      	str	r3, [r7, #112]	@ 0x70
 8005072:	677a      	str	r2, [r7, #116]	@ 0x74
 8005074:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005078:	4642      	mov	r2, r8
 800507a:	464b      	mov	r3, r9
 800507c:	1891      	adds	r1, r2, r2
 800507e:	60b9      	str	r1, [r7, #8]
 8005080:	415b      	adcs	r3, r3
 8005082:	60fb      	str	r3, [r7, #12]
 8005084:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005088:	4641      	mov	r1, r8
 800508a:	1851      	adds	r1, r2, r1
 800508c:	6039      	str	r1, [r7, #0]
 800508e:	4649      	mov	r1, r9
 8005090:	414b      	adcs	r3, r1
 8005092:	607b      	str	r3, [r7, #4]
 8005094:	f04f 0200 	mov.w	r2, #0
 8005098:	f04f 0300 	mov.w	r3, #0
 800509c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80050a0:	4659      	mov	r1, fp
 80050a2:	00cb      	lsls	r3, r1, #3
 80050a4:	4651      	mov	r1, sl
 80050a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050aa:	4651      	mov	r1, sl
 80050ac:	00ca      	lsls	r2, r1, #3
 80050ae:	4610      	mov	r0, r2
 80050b0:	4619      	mov	r1, r3
 80050b2:	4603      	mov	r3, r0
 80050b4:	4642      	mov	r2, r8
 80050b6:	189b      	adds	r3, r3, r2
 80050b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050ba:	464b      	mov	r3, r9
 80050bc:	460a      	mov	r2, r1
 80050be:	eb42 0303 	adc.w	r3, r2, r3
 80050c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80050c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80050ce:	667a      	str	r2, [r7, #100]	@ 0x64
 80050d0:	f04f 0200 	mov.w	r2, #0
 80050d4:	f04f 0300 	mov.w	r3, #0
 80050d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80050dc:	4649      	mov	r1, r9
 80050de:	008b      	lsls	r3, r1, #2
 80050e0:	4641      	mov	r1, r8
 80050e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050e6:	4641      	mov	r1, r8
 80050e8:	008a      	lsls	r2, r1, #2
 80050ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80050ee:	f7fb fdcb 	bl	8000c88 <__aeabi_uldivmod>
 80050f2:	4602      	mov	r2, r0
 80050f4:	460b      	mov	r3, r1
 80050f6:	4b0d      	ldr	r3, [pc, #52]	@ (800512c <UART_SetConfig+0x4e4>)
 80050f8:	fba3 1302 	umull	r1, r3, r3, r2
 80050fc:	095b      	lsrs	r3, r3, #5
 80050fe:	2164      	movs	r1, #100	@ 0x64
 8005100:	fb01 f303 	mul.w	r3, r1, r3
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	011b      	lsls	r3, r3, #4
 8005108:	3332      	adds	r3, #50	@ 0x32
 800510a:	4a08      	ldr	r2, [pc, #32]	@ (800512c <UART_SetConfig+0x4e4>)
 800510c:	fba2 2303 	umull	r2, r3, r2, r3
 8005110:	095b      	lsrs	r3, r3, #5
 8005112:	f003 020f 	and.w	r2, r3, #15
 8005116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4422      	add	r2, r4
 800511e:	609a      	str	r2, [r3, #8]
}
 8005120:	bf00      	nop
 8005122:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005126:	46bd      	mov	sp, r7
 8005128:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800512c:	51eb851f 	.word	0x51eb851f

08005130 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	4603      	mov	r3, r0
 8005138:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800513a:	2300      	movs	r3, #0
 800513c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800513e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005142:	2b84      	cmp	r3, #132	@ 0x84
 8005144:	d005      	beq.n	8005152 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005146:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	4413      	add	r3, r2
 800514e:	3303      	adds	r3, #3
 8005150:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005152:	68fb      	ldr	r3, [r7, #12]
}
 8005154:	4618      	mov	r0, r3
 8005156:	3714      	adds	r7, #20
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005164:	f000 fae4 	bl	8005730 <vTaskStartScheduler>
  
  return osOK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	bd80      	pop	{r7, pc}

0800516e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800516e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005170:	b089      	sub	sp, #36	@ 0x24
 8005172:	af04      	add	r7, sp, #16
 8005174:	6078      	str	r0, [r7, #4]
 8005176:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	695b      	ldr	r3, [r3, #20]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d020      	beq.n	80051c2 <osThreadCreate+0x54>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d01c      	beq.n	80051c2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685c      	ldr	r4, [r3, #4]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	691e      	ldr	r6, [r3, #16]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800519a:	4618      	mov	r0, r3
 800519c:	f7ff ffc8 	bl	8005130 <makeFreeRtosPriority>
 80051a0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051aa:	9202      	str	r2, [sp, #8]
 80051ac:	9301      	str	r3, [sp, #4]
 80051ae:	9100      	str	r1, [sp, #0]
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	4632      	mov	r2, r6
 80051b4:	4629      	mov	r1, r5
 80051b6:	4620      	mov	r0, r4
 80051b8:	f000 f8ed 	bl	8005396 <xTaskCreateStatic>
 80051bc:	4603      	mov	r3, r0
 80051be:	60fb      	str	r3, [r7, #12]
 80051c0:	e01c      	b.n	80051fc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685c      	ldr	r4, [r3, #4]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051ce:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7ff ffaa 	bl	8005130 <makeFreeRtosPriority>
 80051dc:	4602      	mov	r2, r0
 80051de:	f107 030c 	add.w	r3, r7, #12
 80051e2:	9301      	str	r3, [sp, #4]
 80051e4:	9200      	str	r2, [sp, #0]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	4632      	mov	r2, r6
 80051ea:	4629      	mov	r1, r5
 80051ec:	4620      	mov	r0, r4
 80051ee:	f000 f932 	bl	8005456 <xTaskCreate>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d001      	beq.n	80051fc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80051f8:	2300      	movs	r3, #0
 80051fa:	e000      	b.n	80051fe <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80051fc:	68fb      	ldr	r3, [r7, #12]
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3714      	adds	r7, #20
 8005202:	46bd      	mov	sp, r7
 8005204:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005206 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b084      	sub	sp, #16
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d001      	beq.n	800521c <osDelay+0x16>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	e000      	b.n	800521e <osDelay+0x18>
 800521c:	2301      	movs	r3, #1
 800521e:	4618      	mov	r0, r3
 8005220:	f000 fa50 	bl	80056c4 <vTaskDelay>
  
  return osOK;
 8005224:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800522e:	b480      	push	{r7}
 8005230:	b083      	sub	sp, #12
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f103 0208 	add.w	r2, r3, #8
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f04f 32ff 	mov.w	r2, #4294967295
 8005246:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f103 0208 	add.w	r2, r3, #8
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f103 0208 	add.w	r2, r3, #8
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005262:	bf00      	nop
 8005264:	370c      	adds	r7, #12
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr

0800526e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800526e:	b480      	push	{r7}
 8005270:	b083      	sub	sp, #12
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	689a      	ldr	r2, [r3, #8]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	683a      	ldr	r2, [r7, #0]
 80052ac:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	683a      	ldr	r2, [r7, #0]
 80052b2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	1c5a      	adds	r2, r3, #1
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	601a      	str	r2, [r3, #0]
}
 80052c4:	bf00      	nop
 80052c6:	3714      	adds	r7, #20
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e6:	d103      	bne.n	80052f0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	60fb      	str	r3, [r7, #12]
 80052ee:	e00c      	b.n	800530a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	3308      	adds	r3, #8
 80052f4:	60fb      	str	r3, [r7, #12]
 80052f6:	e002      	b.n	80052fe <vListInsert+0x2e>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	60fb      	str	r3, [r7, #12]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	429a      	cmp	r2, r3
 8005308:	d2f6      	bcs.n	80052f8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	685a      	ldr	r2, [r3, #4]
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	683a      	ldr	r2, [r7, #0]
 8005318:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	683a      	ldr	r2, [r7, #0]
 8005324:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	1c5a      	adds	r2, r3, #1
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	601a      	str	r2, [r3, #0]
}
 8005336:	bf00      	nop
 8005338:	3714      	adds	r7, #20
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005342:	b480      	push	{r7}
 8005344:	b085      	sub	sp, #20
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	6892      	ldr	r2, [r2, #8]
 8005358:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	6852      	ldr	r2, [r2, #4]
 8005362:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	429a      	cmp	r2, r3
 800536c:	d103      	bne.n	8005376 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	689a      	ldr	r2, [r3, #8]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	1e5a      	subs	r2, r3, #1
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
}
 800538a:	4618      	mov	r0, r3
 800538c:	3714      	adds	r7, #20
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005396:	b580      	push	{r7, lr}
 8005398:	b08e      	sub	sp, #56	@ 0x38
 800539a:	af04      	add	r7, sp, #16
 800539c:	60f8      	str	r0, [r7, #12]
 800539e:	60b9      	str	r1, [r7, #8]
 80053a0:	607a      	str	r2, [r7, #4]
 80053a2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80053a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10b      	bne.n	80053c2 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80053aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ae:	f383 8811 	msr	BASEPRI, r3
 80053b2:	f3bf 8f6f 	isb	sy
 80053b6:	f3bf 8f4f 	dsb	sy
 80053ba:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80053bc:	bf00      	nop
 80053be:	bf00      	nop
 80053c0:	e7fd      	b.n	80053be <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80053c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10b      	bne.n	80053e0 <xTaskCreateStatic+0x4a>
	__asm volatile
 80053c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053cc:	f383 8811 	msr	BASEPRI, r3
 80053d0:	f3bf 8f6f 	isb	sy
 80053d4:	f3bf 8f4f 	dsb	sy
 80053d8:	61fb      	str	r3, [r7, #28]
}
 80053da:	bf00      	nop
 80053dc:	bf00      	nop
 80053de:	e7fd      	b.n	80053dc <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80053e0:	2354      	movs	r3, #84	@ 0x54
 80053e2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	2b54      	cmp	r3, #84	@ 0x54
 80053e8:	d00b      	beq.n	8005402 <xTaskCreateStatic+0x6c>
	__asm volatile
 80053ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ee:	f383 8811 	msr	BASEPRI, r3
 80053f2:	f3bf 8f6f 	isb	sy
 80053f6:	f3bf 8f4f 	dsb	sy
 80053fa:	61bb      	str	r3, [r7, #24]
}
 80053fc:	bf00      	nop
 80053fe:	bf00      	nop
 8005400:	e7fd      	b.n	80053fe <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005402:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005406:	2b00      	cmp	r3, #0
 8005408:	d01e      	beq.n	8005448 <xTaskCreateStatic+0xb2>
 800540a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800540c:	2b00      	cmp	r3, #0
 800540e:	d01b      	beq.n	8005448 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005412:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005416:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005418:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800541a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541c:	2202      	movs	r2, #2
 800541e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005422:	2300      	movs	r3, #0
 8005424:	9303      	str	r3, [sp, #12]
 8005426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005428:	9302      	str	r3, [sp, #8]
 800542a:	f107 0314 	add.w	r3, r7, #20
 800542e:	9301      	str	r3, [sp, #4]
 8005430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005432:	9300      	str	r3, [sp, #0]
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	68b9      	ldr	r1, [r7, #8]
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f000 f850 	bl	80054e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005440:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005442:	f000 f8d5 	bl	80055f0 <prvAddNewTaskToReadyList>
 8005446:	e001      	b.n	800544c <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005448:	2300      	movs	r3, #0
 800544a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800544c:	697b      	ldr	r3, [r7, #20]
	}
 800544e:	4618      	mov	r0, r3
 8005450:	3728      	adds	r7, #40	@ 0x28
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005456:	b580      	push	{r7, lr}
 8005458:	b08c      	sub	sp, #48	@ 0x30
 800545a:	af04      	add	r7, sp, #16
 800545c:	60f8      	str	r0, [r7, #12]
 800545e:	60b9      	str	r1, [r7, #8]
 8005460:	603b      	str	r3, [r7, #0]
 8005462:	4613      	mov	r3, r2
 8005464:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005466:	88fb      	ldrh	r3, [r7, #6]
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	4618      	mov	r0, r3
 800546c:	f000 feec 	bl	8006248 <pvPortMalloc>
 8005470:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00e      	beq.n	8005496 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005478:	2054      	movs	r0, #84	@ 0x54
 800547a:	f000 fee5 	bl	8006248 <pvPortMalloc>
 800547e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d003      	beq.n	800548e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	631a      	str	r2, [r3, #48]	@ 0x30
 800548c:	e005      	b.n	800549a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800548e:	6978      	ldr	r0, [r7, #20]
 8005490:	f000 ffa8 	bl	80063e4 <vPortFree>
 8005494:	e001      	b.n	800549a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005496:	2300      	movs	r3, #0
 8005498:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d017      	beq.n	80054d0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80054a8:	88fa      	ldrh	r2, [r7, #6]
 80054aa:	2300      	movs	r3, #0
 80054ac:	9303      	str	r3, [sp, #12]
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	9302      	str	r3, [sp, #8]
 80054b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054b4:	9301      	str	r3, [sp, #4]
 80054b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	68b9      	ldr	r1, [r7, #8]
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f000 f80e 	bl	80054e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054c4:	69f8      	ldr	r0, [r7, #28]
 80054c6:	f000 f893 	bl	80055f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80054ca:	2301      	movs	r3, #1
 80054cc:	61bb      	str	r3, [r7, #24]
 80054ce:	e002      	b.n	80054d6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80054d0:	f04f 33ff 	mov.w	r3, #4294967295
 80054d4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80054d6:	69bb      	ldr	r3, [r7, #24]
	}
 80054d8:	4618      	mov	r0, r3
 80054da:	3720      	adds	r7, #32
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b088      	sub	sp, #32
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
 80054ec:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80054ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80054f8:	3b01      	subs	r3, #1
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	4413      	add	r3, r2
 80054fe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	f023 0307 	bic.w	r3, r3, #7
 8005506:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	f003 0307 	and.w	r3, r3, #7
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00b      	beq.n	800552a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005516:	f383 8811 	msr	BASEPRI, r3
 800551a:	f3bf 8f6f 	isb	sy
 800551e:	f3bf 8f4f 	dsb	sy
 8005522:	617b      	str	r3, [r7, #20]
}
 8005524:	bf00      	nop
 8005526:	bf00      	nop
 8005528:	e7fd      	b.n	8005526 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d01f      	beq.n	8005570 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005530:	2300      	movs	r3, #0
 8005532:	61fb      	str	r3, [r7, #28]
 8005534:	e012      	b.n	800555c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005536:	68ba      	ldr	r2, [r7, #8]
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	4413      	add	r3, r2
 800553c:	7819      	ldrb	r1, [r3, #0]
 800553e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	4413      	add	r3, r2
 8005544:	3334      	adds	r3, #52	@ 0x34
 8005546:	460a      	mov	r2, r1
 8005548:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	4413      	add	r3, r2
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d006      	beq.n	8005564 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	3301      	adds	r3, #1
 800555a:	61fb      	str	r3, [r7, #28]
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	2b0f      	cmp	r3, #15
 8005560:	d9e9      	bls.n	8005536 <prvInitialiseNewTask+0x56>
 8005562:	e000      	b.n	8005566 <prvInitialiseNewTask+0x86>
			{
				break;
 8005564:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005568:	2200      	movs	r2, #0
 800556a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800556e:	e003      	b.n	8005578 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005572:	2200      	movs	r2, #0
 8005574:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800557a:	2b06      	cmp	r3, #6
 800557c:	d901      	bls.n	8005582 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800557e:	2306      	movs	r3, #6
 8005580:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005584:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005586:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800558a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800558c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800558e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005590:	2200      	movs	r2, #0
 8005592:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005596:	3304      	adds	r3, #4
 8005598:	4618      	mov	r0, r3
 800559a:	f7ff fe68 	bl	800526e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800559e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a0:	3318      	adds	r3, #24
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7ff fe63 	bl	800526e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80055a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055ac:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b0:	f1c3 0207 	rsb	r2, r3, #7
 80055b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80055b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055bc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80055be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c0:	2200      	movs	r2, #0
 80055c2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80055c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80055cc:	683a      	ldr	r2, [r7, #0]
 80055ce:	68f9      	ldr	r1, [r7, #12]
 80055d0:	69b8      	ldr	r0, [r7, #24]
 80055d2:	f000 fc2b 	bl	8005e2c <pxPortInitialiseStack>
 80055d6:	4602      	mov	r2, r0
 80055d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055da:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80055dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d002      	beq.n	80055e8 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80055e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055e6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055e8:	bf00      	nop
 80055ea:	3720      	adds	r7, #32
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80055f8:	f000 fd46 	bl	8006088 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80055fc:	4b2a      	ldr	r3, [pc, #168]	@ (80056a8 <prvAddNewTaskToReadyList+0xb8>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	3301      	adds	r3, #1
 8005602:	4a29      	ldr	r2, [pc, #164]	@ (80056a8 <prvAddNewTaskToReadyList+0xb8>)
 8005604:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005606:	4b29      	ldr	r3, [pc, #164]	@ (80056ac <prvAddNewTaskToReadyList+0xbc>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d109      	bne.n	8005622 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800560e:	4a27      	ldr	r2, [pc, #156]	@ (80056ac <prvAddNewTaskToReadyList+0xbc>)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005614:	4b24      	ldr	r3, [pc, #144]	@ (80056a8 <prvAddNewTaskToReadyList+0xb8>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2b01      	cmp	r3, #1
 800561a:	d110      	bne.n	800563e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800561c:	f000 fac4 	bl	8005ba8 <prvInitialiseTaskLists>
 8005620:	e00d      	b.n	800563e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005622:	4b23      	ldr	r3, [pc, #140]	@ (80056b0 <prvAddNewTaskToReadyList+0xc0>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d109      	bne.n	800563e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800562a:	4b20      	ldr	r3, [pc, #128]	@ (80056ac <prvAddNewTaskToReadyList+0xbc>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005634:	429a      	cmp	r2, r3
 8005636:	d802      	bhi.n	800563e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005638:	4a1c      	ldr	r2, [pc, #112]	@ (80056ac <prvAddNewTaskToReadyList+0xbc>)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800563e:	4b1d      	ldr	r3, [pc, #116]	@ (80056b4 <prvAddNewTaskToReadyList+0xc4>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	3301      	adds	r3, #1
 8005644:	4a1b      	ldr	r2, [pc, #108]	@ (80056b4 <prvAddNewTaskToReadyList+0xc4>)
 8005646:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800564c:	2201      	movs	r2, #1
 800564e:	409a      	lsls	r2, r3
 8005650:	4b19      	ldr	r3, [pc, #100]	@ (80056b8 <prvAddNewTaskToReadyList+0xc8>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4313      	orrs	r3, r2
 8005656:	4a18      	ldr	r2, [pc, #96]	@ (80056b8 <prvAddNewTaskToReadyList+0xc8>)
 8005658:	6013      	str	r3, [r2, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800565e:	4613      	mov	r3, r2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	4413      	add	r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	4a15      	ldr	r2, [pc, #84]	@ (80056bc <prvAddNewTaskToReadyList+0xcc>)
 8005668:	441a      	add	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	3304      	adds	r3, #4
 800566e:	4619      	mov	r1, r3
 8005670:	4610      	mov	r0, r2
 8005672:	f7ff fe09 	bl	8005288 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005676:	f000 fd39 	bl	80060ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800567a:	4b0d      	ldr	r3, [pc, #52]	@ (80056b0 <prvAddNewTaskToReadyList+0xc0>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00e      	beq.n	80056a0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005682:	4b0a      	ldr	r3, [pc, #40]	@ (80056ac <prvAddNewTaskToReadyList+0xbc>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800568c:	429a      	cmp	r2, r3
 800568e:	d207      	bcs.n	80056a0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005690:	4b0b      	ldr	r3, [pc, #44]	@ (80056c0 <prvAddNewTaskToReadyList+0xd0>)
 8005692:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005696:	601a      	str	r2, [r3, #0]
 8005698:	f3bf 8f4f 	dsb	sy
 800569c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056a0:	bf00      	nop
 80056a2:	3708      	adds	r7, #8
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	20000854 	.word	0x20000854
 80056ac:	20000754 	.word	0x20000754
 80056b0:	20000860 	.word	0x20000860
 80056b4:	20000870 	.word	0x20000870
 80056b8:	2000085c 	.word	0x2000085c
 80056bc:	20000758 	.word	0x20000758
 80056c0:	e000ed04 	.word	0xe000ed04

080056c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80056cc:	2300      	movs	r3, #0
 80056ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d018      	beq.n	8005708 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80056d6:	4b14      	ldr	r3, [pc, #80]	@ (8005728 <vTaskDelay+0x64>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00b      	beq.n	80056f6 <vTaskDelay+0x32>
	__asm volatile
 80056de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056e2:	f383 8811 	msr	BASEPRI, r3
 80056e6:	f3bf 8f6f 	isb	sy
 80056ea:	f3bf 8f4f 	dsb	sy
 80056ee:	60bb      	str	r3, [r7, #8]
}
 80056f0:	bf00      	nop
 80056f2:	bf00      	nop
 80056f4:	e7fd      	b.n	80056f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80056f6:	f000 f87d 	bl	80057f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80056fa:	2100      	movs	r1, #0
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 fb2f 	bl	8005d60 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005702:	f000 f885 	bl	8005810 <xTaskResumeAll>
 8005706:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d107      	bne.n	800571e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800570e:	4b07      	ldr	r3, [pc, #28]	@ (800572c <vTaskDelay+0x68>)
 8005710:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005714:	601a      	str	r2, [r3, #0]
 8005716:	f3bf 8f4f 	dsb	sy
 800571a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800571e:	bf00      	nop
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	2000087c 	.word	0x2000087c
 800572c:	e000ed04 	.word	0xe000ed04

08005730 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b08a      	sub	sp, #40	@ 0x28
 8005734:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005736:	2300      	movs	r3, #0
 8005738:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800573a:	2300      	movs	r3, #0
 800573c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800573e:	463a      	mov	r2, r7
 8005740:	1d39      	adds	r1, r7, #4
 8005742:	f107 0308 	add.w	r3, r7, #8
 8005746:	4618      	mov	r0, r3
 8005748:	f7fb fc4c 	bl	8000fe4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800574c:	6839      	ldr	r1, [r7, #0]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68ba      	ldr	r2, [r7, #8]
 8005752:	9202      	str	r2, [sp, #8]
 8005754:	9301      	str	r3, [sp, #4]
 8005756:	2300      	movs	r3, #0
 8005758:	9300      	str	r3, [sp, #0]
 800575a:	2300      	movs	r3, #0
 800575c:	460a      	mov	r2, r1
 800575e:	491f      	ldr	r1, [pc, #124]	@ (80057dc <vTaskStartScheduler+0xac>)
 8005760:	481f      	ldr	r0, [pc, #124]	@ (80057e0 <vTaskStartScheduler+0xb0>)
 8005762:	f7ff fe18 	bl	8005396 <xTaskCreateStatic>
 8005766:	4603      	mov	r3, r0
 8005768:	4a1e      	ldr	r2, [pc, #120]	@ (80057e4 <vTaskStartScheduler+0xb4>)
 800576a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800576c:	4b1d      	ldr	r3, [pc, #116]	@ (80057e4 <vTaskStartScheduler+0xb4>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d002      	beq.n	800577a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005774:	2301      	movs	r3, #1
 8005776:	617b      	str	r3, [r7, #20]
 8005778:	e001      	b.n	800577e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800577a:	2300      	movs	r3, #0
 800577c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	2b01      	cmp	r3, #1
 8005782:	d116      	bne.n	80057b2 <vTaskStartScheduler+0x82>
	__asm volatile
 8005784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005788:	f383 8811 	msr	BASEPRI, r3
 800578c:	f3bf 8f6f 	isb	sy
 8005790:	f3bf 8f4f 	dsb	sy
 8005794:	613b      	str	r3, [r7, #16]
}
 8005796:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005798:	4b13      	ldr	r3, [pc, #76]	@ (80057e8 <vTaskStartScheduler+0xb8>)
 800579a:	f04f 32ff 	mov.w	r2, #4294967295
 800579e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80057a0:	4b12      	ldr	r3, [pc, #72]	@ (80057ec <vTaskStartScheduler+0xbc>)
 80057a2:	2201      	movs	r2, #1
 80057a4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80057a6:	4b12      	ldr	r3, [pc, #72]	@ (80057f0 <vTaskStartScheduler+0xc0>)
 80057a8:	2200      	movs	r2, #0
 80057aa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80057ac:	f000 fbc8 	bl	8005f40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80057b0:	e00f      	b.n	80057d2 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b8:	d10b      	bne.n	80057d2 <vTaskStartScheduler+0xa2>
	__asm volatile
 80057ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057be:	f383 8811 	msr	BASEPRI, r3
 80057c2:	f3bf 8f6f 	isb	sy
 80057c6:	f3bf 8f4f 	dsb	sy
 80057ca:	60fb      	str	r3, [r7, #12]
}
 80057cc:	bf00      	nop
 80057ce:	bf00      	nop
 80057d0:	e7fd      	b.n	80057ce <vTaskStartScheduler+0x9e>
}
 80057d2:	bf00      	nop
 80057d4:	3718      	adds	r7, #24
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	0800b058 	.word	0x0800b058
 80057e0:	08005b79 	.word	0x08005b79
 80057e4:	20000878 	.word	0x20000878
 80057e8:	20000874 	.word	0x20000874
 80057ec:	20000860 	.word	0x20000860
 80057f0:	20000858 	.word	0x20000858

080057f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80057f4:	b480      	push	{r7}
 80057f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80057f8:	4b04      	ldr	r3, [pc, #16]	@ (800580c <vTaskSuspendAll+0x18>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	3301      	adds	r3, #1
 80057fe:	4a03      	ldr	r2, [pc, #12]	@ (800580c <vTaskSuspendAll+0x18>)
 8005800:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005802:	bf00      	nop
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr
 800580c:	2000087c 	.word	0x2000087c

08005810 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005816:	2300      	movs	r3, #0
 8005818:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800581a:	2300      	movs	r3, #0
 800581c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800581e:	4b42      	ldr	r3, [pc, #264]	@ (8005928 <xTaskResumeAll+0x118>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10b      	bne.n	800583e <xTaskResumeAll+0x2e>
	__asm volatile
 8005826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800582a:	f383 8811 	msr	BASEPRI, r3
 800582e:	f3bf 8f6f 	isb	sy
 8005832:	f3bf 8f4f 	dsb	sy
 8005836:	603b      	str	r3, [r7, #0]
}
 8005838:	bf00      	nop
 800583a:	bf00      	nop
 800583c:	e7fd      	b.n	800583a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800583e:	f000 fc23 	bl	8006088 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005842:	4b39      	ldr	r3, [pc, #228]	@ (8005928 <xTaskResumeAll+0x118>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	3b01      	subs	r3, #1
 8005848:	4a37      	ldr	r2, [pc, #220]	@ (8005928 <xTaskResumeAll+0x118>)
 800584a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800584c:	4b36      	ldr	r3, [pc, #216]	@ (8005928 <xTaskResumeAll+0x118>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d161      	bne.n	8005918 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005854:	4b35      	ldr	r3, [pc, #212]	@ (800592c <xTaskResumeAll+0x11c>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d05d      	beq.n	8005918 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800585c:	e02e      	b.n	80058bc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800585e:	4b34      	ldr	r3, [pc, #208]	@ (8005930 <xTaskResumeAll+0x120>)
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	3318      	adds	r3, #24
 800586a:	4618      	mov	r0, r3
 800586c:	f7ff fd69 	bl	8005342 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	3304      	adds	r3, #4
 8005874:	4618      	mov	r0, r3
 8005876:	f7ff fd64 	bl	8005342 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800587e:	2201      	movs	r2, #1
 8005880:	409a      	lsls	r2, r3
 8005882:	4b2c      	ldr	r3, [pc, #176]	@ (8005934 <xTaskResumeAll+0x124>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4313      	orrs	r3, r2
 8005888:	4a2a      	ldr	r2, [pc, #168]	@ (8005934 <xTaskResumeAll+0x124>)
 800588a:	6013      	str	r3, [r2, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005890:	4613      	mov	r3, r2
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	4413      	add	r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4a27      	ldr	r2, [pc, #156]	@ (8005938 <xTaskResumeAll+0x128>)
 800589a:	441a      	add	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	3304      	adds	r3, #4
 80058a0:	4619      	mov	r1, r3
 80058a2:	4610      	mov	r0, r2
 80058a4:	f7ff fcf0 	bl	8005288 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058ac:	4b23      	ldr	r3, [pc, #140]	@ (800593c <xTaskResumeAll+0x12c>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d302      	bcc.n	80058bc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80058b6:	4b22      	ldr	r3, [pc, #136]	@ (8005940 <xTaskResumeAll+0x130>)
 80058b8:	2201      	movs	r2, #1
 80058ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058bc:	4b1c      	ldr	r3, [pc, #112]	@ (8005930 <xTaskResumeAll+0x120>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1cc      	bne.n	800585e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d001      	beq.n	80058ce <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80058ca:	f000 fa0b 	bl	8005ce4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80058ce:	4b1d      	ldr	r3, [pc, #116]	@ (8005944 <xTaskResumeAll+0x134>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d010      	beq.n	80058fc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80058da:	f000 f837 	bl	800594c <xTaskIncrementTick>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d002      	beq.n	80058ea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80058e4:	4b16      	ldr	r3, [pc, #88]	@ (8005940 <xTaskResumeAll+0x130>)
 80058e6:	2201      	movs	r2, #1
 80058e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	3b01      	subs	r3, #1
 80058ee:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1f1      	bne.n	80058da <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80058f6:	4b13      	ldr	r3, [pc, #76]	@ (8005944 <xTaskResumeAll+0x134>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80058fc:	4b10      	ldr	r3, [pc, #64]	@ (8005940 <xTaskResumeAll+0x130>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d009      	beq.n	8005918 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005904:	2301      	movs	r3, #1
 8005906:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005908:	4b0f      	ldr	r3, [pc, #60]	@ (8005948 <xTaskResumeAll+0x138>)
 800590a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800590e:	601a      	str	r2, [r3, #0]
 8005910:	f3bf 8f4f 	dsb	sy
 8005914:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005918:	f000 fbe8 	bl	80060ec <vPortExitCritical>

	return xAlreadyYielded;
 800591c:	68bb      	ldr	r3, [r7, #8]
}
 800591e:	4618      	mov	r0, r3
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	2000087c 	.word	0x2000087c
 800592c:	20000854 	.word	0x20000854
 8005930:	20000814 	.word	0x20000814
 8005934:	2000085c 	.word	0x2000085c
 8005938:	20000758 	.word	0x20000758
 800593c:	20000754 	.word	0x20000754
 8005940:	20000868 	.word	0x20000868
 8005944:	20000864 	.word	0x20000864
 8005948:	e000ed04 	.word	0xe000ed04

0800594c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005952:	2300      	movs	r3, #0
 8005954:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005956:	4b4f      	ldr	r3, [pc, #316]	@ (8005a94 <xTaskIncrementTick+0x148>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2b00      	cmp	r3, #0
 800595c:	f040 808f 	bne.w	8005a7e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005960:	4b4d      	ldr	r3, [pc, #308]	@ (8005a98 <xTaskIncrementTick+0x14c>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	3301      	adds	r3, #1
 8005966:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005968:	4a4b      	ldr	r2, [pc, #300]	@ (8005a98 <xTaskIncrementTick+0x14c>)
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d121      	bne.n	80059b8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005974:	4b49      	ldr	r3, [pc, #292]	@ (8005a9c <xTaskIncrementTick+0x150>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00b      	beq.n	8005996 <xTaskIncrementTick+0x4a>
	__asm volatile
 800597e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005982:	f383 8811 	msr	BASEPRI, r3
 8005986:	f3bf 8f6f 	isb	sy
 800598a:	f3bf 8f4f 	dsb	sy
 800598e:	603b      	str	r3, [r7, #0]
}
 8005990:	bf00      	nop
 8005992:	bf00      	nop
 8005994:	e7fd      	b.n	8005992 <xTaskIncrementTick+0x46>
 8005996:	4b41      	ldr	r3, [pc, #260]	@ (8005a9c <xTaskIncrementTick+0x150>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	60fb      	str	r3, [r7, #12]
 800599c:	4b40      	ldr	r3, [pc, #256]	@ (8005aa0 <xTaskIncrementTick+0x154>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a3e      	ldr	r2, [pc, #248]	@ (8005a9c <xTaskIncrementTick+0x150>)
 80059a2:	6013      	str	r3, [r2, #0]
 80059a4:	4a3e      	ldr	r2, [pc, #248]	@ (8005aa0 <xTaskIncrementTick+0x154>)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6013      	str	r3, [r2, #0]
 80059aa:	4b3e      	ldr	r3, [pc, #248]	@ (8005aa4 <xTaskIncrementTick+0x158>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	3301      	adds	r3, #1
 80059b0:	4a3c      	ldr	r2, [pc, #240]	@ (8005aa4 <xTaskIncrementTick+0x158>)
 80059b2:	6013      	str	r3, [r2, #0]
 80059b4:	f000 f996 	bl	8005ce4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80059b8:	4b3b      	ldr	r3, [pc, #236]	@ (8005aa8 <xTaskIncrementTick+0x15c>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	693a      	ldr	r2, [r7, #16]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d348      	bcc.n	8005a54 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059c2:	4b36      	ldr	r3, [pc, #216]	@ (8005a9c <xTaskIncrementTick+0x150>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d104      	bne.n	80059d6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059cc:	4b36      	ldr	r3, [pc, #216]	@ (8005aa8 <xTaskIncrementTick+0x15c>)
 80059ce:	f04f 32ff 	mov.w	r2, #4294967295
 80059d2:	601a      	str	r2, [r3, #0]
					break;
 80059d4:	e03e      	b.n	8005a54 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059d6:	4b31      	ldr	r3, [pc, #196]	@ (8005a9c <xTaskIncrementTick+0x150>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d203      	bcs.n	80059f6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80059ee:	4a2e      	ldr	r2, [pc, #184]	@ (8005aa8 <xTaskIncrementTick+0x15c>)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80059f4:	e02e      	b.n	8005a54 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	3304      	adds	r3, #4
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7ff fca1 	bl	8005342 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d004      	beq.n	8005a12 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	3318      	adds	r3, #24
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f7ff fc98 	bl	8005342 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a16:	2201      	movs	r2, #1
 8005a18:	409a      	lsls	r2, r3
 8005a1a:	4b24      	ldr	r3, [pc, #144]	@ (8005aac <xTaskIncrementTick+0x160>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	4a22      	ldr	r2, [pc, #136]	@ (8005aac <xTaskIncrementTick+0x160>)
 8005a22:	6013      	str	r3, [r2, #0]
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a28:	4613      	mov	r3, r2
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	4413      	add	r3, r2
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	4a1f      	ldr	r2, [pc, #124]	@ (8005ab0 <xTaskIncrementTick+0x164>)
 8005a32:	441a      	add	r2, r3
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	3304      	adds	r3, #4
 8005a38:	4619      	mov	r1, r3
 8005a3a:	4610      	mov	r0, r2
 8005a3c:	f7ff fc24 	bl	8005288 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a44:	4b1b      	ldr	r3, [pc, #108]	@ (8005ab4 <xTaskIncrementTick+0x168>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d3b9      	bcc.n	80059c2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a52:	e7b6      	b.n	80059c2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a54:	4b17      	ldr	r3, [pc, #92]	@ (8005ab4 <xTaskIncrementTick+0x168>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a5a:	4915      	ldr	r1, [pc, #84]	@ (8005ab0 <xTaskIncrementTick+0x164>)
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	440b      	add	r3, r1
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d901      	bls.n	8005a70 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005a70:	4b11      	ldr	r3, [pc, #68]	@ (8005ab8 <xTaskIncrementTick+0x16c>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d007      	beq.n	8005a88 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	617b      	str	r3, [r7, #20]
 8005a7c:	e004      	b.n	8005a88 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8005abc <xTaskIncrementTick+0x170>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	3301      	adds	r3, #1
 8005a84:	4a0d      	ldr	r2, [pc, #52]	@ (8005abc <xTaskIncrementTick+0x170>)
 8005a86:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005a88:	697b      	ldr	r3, [r7, #20]
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3718      	adds	r7, #24
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	2000087c 	.word	0x2000087c
 8005a98:	20000858 	.word	0x20000858
 8005a9c:	2000080c 	.word	0x2000080c
 8005aa0:	20000810 	.word	0x20000810
 8005aa4:	2000086c 	.word	0x2000086c
 8005aa8:	20000874 	.word	0x20000874
 8005aac:	2000085c 	.word	0x2000085c
 8005ab0:	20000758 	.word	0x20000758
 8005ab4:	20000754 	.word	0x20000754
 8005ab8:	20000868 	.word	0x20000868
 8005abc:	20000864 	.word	0x20000864

08005ac0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b087      	sub	sp, #28
 8005ac4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005ac6:	4b27      	ldr	r3, [pc, #156]	@ (8005b64 <vTaskSwitchContext+0xa4>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005ace:	4b26      	ldr	r3, [pc, #152]	@ (8005b68 <vTaskSwitchContext+0xa8>)
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005ad4:	e040      	b.n	8005b58 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005ad6:	4b24      	ldr	r3, [pc, #144]	@ (8005b68 <vTaskSwitchContext+0xa8>)
 8005ad8:	2200      	movs	r2, #0
 8005ada:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005adc:	4b23      	ldr	r3, [pc, #140]	@ (8005b6c <vTaskSwitchContext+0xac>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	fab3 f383 	clz	r3, r3
 8005ae8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005aea:	7afb      	ldrb	r3, [r7, #11]
 8005aec:	f1c3 031f 	rsb	r3, r3, #31
 8005af0:	617b      	str	r3, [r7, #20]
 8005af2:	491f      	ldr	r1, [pc, #124]	@ (8005b70 <vTaskSwitchContext+0xb0>)
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	4613      	mov	r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4413      	add	r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	440b      	add	r3, r1
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d10b      	bne.n	8005b1e <vTaskSwitchContext+0x5e>
	__asm volatile
 8005b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b0a:	f383 8811 	msr	BASEPRI, r3
 8005b0e:	f3bf 8f6f 	isb	sy
 8005b12:	f3bf 8f4f 	dsb	sy
 8005b16:	607b      	str	r3, [r7, #4]
}
 8005b18:	bf00      	nop
 8005b1a:	bf00      	nop
 8005b1c:	e7fd      	b.n	8005b1a <vTaskSwitchContext+0x5a>
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	4613      	mov	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	4413      	add	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	4a11      	ldr	r2, [pc, #68]	@ (8005b70 <vTaskSwitchContext+0xb0>)
 8005b2a:	4413      	add	r3, r2
 8005b2c:	613b      	str	r3, [r7, #16]
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	685a      	ldr	r2, [r3, #4]
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	605a      	str	r2, [r3, #4]
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	3308      	adds	r3, #8
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d104      	bne.n	8005b4e <vTaskSwitchContext+0x8e>
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	685a      	ldr	r2, [r3, #4]
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	605a      	str	r2, [r3, #4]
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	4a07      	ldr	r2, [pc, #28]	@ (8005b74 <vTaskSwitchContext+0xb4>)
 8005b56:	6013      	str	r3, [r2, #0]
}
 8005b58:	bf00      	nop
 8005b5a:	371c      	adds	r7, #28
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr
 8005b64:	2000087c 	.word	0x2000087c
 8005b68:	20000868 	.word	0x20000868
 8005b6c:	2000085c 	.word	0x2000085c
 8005b70:	20000758 	.word	0x20000758
 8005b74:	20000754 	.word	0x20000754

08005b78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b80:	f000 f852 	bl	8005c28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b84:	4b06      	ldr	r3, [pc, #24]	@ (8005ba0 <prvIdleTask+0x28>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d9f9      	bls.n	8005b80 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b8c:	4b05      	ldr	r3, [pc, #20]	@ (8005ba4 <prvIdleTask+0x2c>)
 8005b8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b92:	601a      	str	r2, [r3, #0]
 8005b94:	f3bf 8f4f 	dsb	sy
 8005b98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b9c:	e7f0      	b.n	8005b80 <prvIdleTask+0x8>
 8005b9e:	bf00      	nop
 8005ba0:	20000758 	.word	0x20000758
 8005ba4:	e000ed04 	.word	0xe000ed04

08005ba8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bae:	2300      	movs	r3, #0
 8005bb0:	607b      	str	r3, [r7, #4]
 8005bb2:	e00c      	b.n	8005bce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	4413      	add	r3, r2
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	4a12      	ldr	r2, [pc, #72]	@ (8005c08 <prvInitialiseTaskLists+0x60>)
 8005bc0:	4413      	add	r3, r2
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f7ff fb33 	bl	800522e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	607b      	str	r3, [r7, #4]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2b06      	cmp	r3, #6
 8005bd2:	d9ef      	bls.n	8005bb4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005bd4:	480d      	ldr	r0, [pc, #52]	@ (8005c0c <prvInitialiseTaskLists+0x64>)
 8005bd6:	f7ff fb2a 	bl	800522e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005bda:	480d      	ldr	r0, [pc, #52]	@ (8005c10 <prvInitialiseTaskLists+0x68>)
 8005bdc:	f7ff fb27 	bl	800522e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005be0:	480c      	ldr	r0, [pc, #48]	@ (8005c14 <prvInitialiseTaskLists+0x6c>)
 8005be2:	f7ff fb24 	bl	800522e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005be6:	480c      	ldr	r0, [pc, #48]	@ (8005c18 <prvInitialiseTaskLists+0x70>)
 8005be8:	f7ff fb21 	bl	800522e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005bec:	480b      	ldr	r0, [pc, #44]	@ (8005c1c <prvInitialiseTaskLists+0x74>)
 8005bee:	f7ff fb1e 	bl	800522e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8005c20 <prvInitialiseTaskLists+0x78>)
 8005bf4:	4a05      	ldr	r2, [pc, #20]	@ (8005c0c <prvInitialiseTaskLists+0x64>)
 8005bf6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8005c24 <prvInitialiseTaskLists+0x7c>)
 8005bfa:	4a05      	ldr	r2, [pc, #20]	@ (8005c10 <prvInitialiseTaskLists+0x68>)
 8005bfc:	601a      	str	r2, [r3, #0]
}
 8005bfe:	bf00      	nop
 8005c00:	3708      	adds	r7, #8
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	20000758 	.word	0x20000758
 8005c0c:	200007e4 	.word	0x200007e4
 8005c10:	200007f8 	.word	0x200007f8
 8005c14:	20000814 	.word	0x20000814
 8005c18:	20000828 	.word	0x20000828
 8005c1c:	20000840 	.word	0x20000840
 8005c20:	2000080c 	.word	0x2000080c
 8005c24:	20000810 	.word	0x20000810

08005c28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c2e:	e019      	b.n	8005c64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c30:	f000 fa2a 	bl	8006088 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c34:	4b10      	ldr	r3, [pc, #64]	@ (8005c78 <prvCheckTasksWaitingTermination+0x50>)
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	3304      	adds	r3, #4
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7ff fb7e 	bl	8005342 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c46:	4b0d      	ldr	r3, [pc, #52]	@ (8005c7c <prvCheckTasksWaitingTermination+0x54>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	4a0b      	ldr	r2, [pc, #44]	@ (8005c7c <prvCheckTasksWaitingTermination+0x54>)
 8005c4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c50:	4b0b      	ldr	r3, [pc, #44]	@ (8005c80 <prvCheckTasksWaitingTermination+0x58>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	3b01      	subs	r3, #1
 8005c56:	4a0a      	ldr	r2, [pc, #40]	@ (8005c80 <prvCheckTasksWaitingTermination+0x58>)
 8005c58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005c5a:	f000 fa47 	bl	80060ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f810 	bl	8005c84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c64:	4b06      	ldr	r3, [pc, #24]	@ (8005c80 <prvCheckTasksWaitingTermination+0x58>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d1e1      	bne.n	8005c30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c6c:	bf00      	nop
 8005c6e:	bf00      	nop
 8005c70:	3708      	adds	r7, #8
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	20000828 	.word	0x20000828
 8005c7c:	20000854 	.word	0x20000854
 8005c80:	2000083c 	.word	0x2000083c

08005c84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d108      	bne.n	8005ca8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f000 fba2 	bl	80063e4 <vPortFree>
				vPortFree( pxTCB );
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 fb9f 	bl	80063e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ca6:	e019      	b.n	8005cdc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d103      	bne.n	8005cba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 fb96 	bl	80063e4 <vPortFree>
	}
 8005cb8:	e010      	b.n	8005cdc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d00b      	beq.n	8005cdc <prvDeleteTCB+0x58>
	__asm volatile
 8005cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc8:	f383 8811 	msr	BASEPRI, r3
 8005ccc:	f3bf 8f6f 	isb	sy
 8005cd0:	f3bf 8f4f 	dsb	sy
 8005cd4:	60fb      	str	r3, [r7, #12]
}
 8005cd6:	bf00      	nop
 8005cd8:	bf00      	nop
 8005cda:	e7fd      	b.n	8005cd8 <prvDeleteTCB+0x54>
	}
 8005cdc:	bf00      	nop
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cea:	4b0c      	ldr	r3, [pc, #48]	@ (8005d1c <prvResetNextTaskUnblockTime+0x38>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d104      	bne.n	8005cfe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8005d20 <prvResetNextTaskUnblockTime+0x3c>)
 8005cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8005cfa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005cfc:	e008      	b.n	8005d10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cfe:	4b07      	ldr	r3, [pc, #28]	@ (8005d1c <prvResetNextTaskUnblockTime+0x38>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	4a04      	ldr	r2, [pc, #16]	@ (8005d20 <prvResetNextTaskUnblockTime+0x3c>)
 8005d0e:	6013      	str	r3, [r2, #0]
}
 8005d10:	bf00      	nop
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr
 8005d1c:	2000080c 	.word	0x2000080c
 8005d20:	20000874 	.word	0x20000874

08005d24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8005d58 <xTaskGetSchedulerState+0x34>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d102      	bne.n	8005d38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005d32:	2301      	movs	r3, #1
 8005d34:	607b      	str	r3, [r7, #4]
 8005d36:	e008      	b.n	8005d4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d38:	4b08      	ldr	r3, [pc, #32]	@ (8005d5c <xTaskGetSchedulerState+0x38>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d102      	bne.n	8005d46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005d40:	2302      	movs	r3, #2
 8005d42:	607b      	str	r3, [r7, #4]
 8005d44:	e001      	b.n	8005d4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005d46:	2300      	movs	r3, #0
 8005d48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005d4a:	687b      	ldr	r3, [r7, #4]
	}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr
 8005d58:	20000860 	.word	0x20000860
 8005d5c:	2000087c 	.word	0x2000087c

08005d60 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005d6a:	4b29      	ldr	r3, [pc, #164]	@ (8005e10 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d70:	4b28      	ldr	r3, [pc, #160]	@ (8005e14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	3304      	adds	r3, #4
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7ff fae3 	bl	8005342 <uxListRemove>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d10b      	bne.n	8005d9a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005d82:	4b24      	ldr	r3, [pc, #144]	@ (8005e14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d88:	2201      	movs	r2, #1
 8005d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8e:	43da      	mvns	r2, r3
 8005d90:	4b21      	ldr	r3, [pc, #132]	@ (8005e18 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4013      	ands	r3, r2
 8005d96:	4a20      	ldr	r2, [pc, #128]	@ (8005e18 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005d98:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da0:	d10a      	bne.n	8005db8 <prvAddCurrentTaskToDelayedList+0x58>
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d007      	beq.n	8005db8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005da8:	4b1a      	ldr	r3, [pc, #104]	@ (8005e14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	3304      	adds	r3, #4
 8005dae:	4619      	mov	r1, r3
 8005db0:	481a      	ldr	r0, [pc, #104]	@ (8005e1c <prvAddCurrentTaskToDelayedList+0xbc>)
 8005db2:	f7ff fa69 	bl	8005288 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005db6:	e026      	b.n	8005e06 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005dc0:	4b14      	ldr	r3, [pc, #80]	@ (8005e14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68ba      	ldr	r2, [r7, #8]
 8005dc6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005dc8:	68ba      	ldr	r2, [r7, #8]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d209      	bcs.n	8005de4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dd0:	4b13      	ldr	r3, [pc, #76]	@ (8005e20 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	4b0f      	ldr	r3, [pc, #60]	@ (8005e14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	3304      	adds	r3, #4
 8005dda:	4619      	mov	r1, r3
 8005ddc:	4610      	mov	r0, r2
 8005dde:	f7ff fa77 	bl	80052d0 <vListInsert>
}
 8005de2:	e010      	b.n	8005e06 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005de4:	4b0f      	ldr	r3, [pc, #60]	@ (8005e24 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	4b0a      	ldr	r3, [pc, #40]	@ (8005e14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	3304      	adds	r3, #4
 8005dee:	4619      	mov	r1, r3
 8005df0:	4610      	mov	r0, r2
 8005df2:	f7ff fa6d 	bl	80052d0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005df6:	4b0c      	ldr	r3, [pc, #48]	@ (8005e28 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68ba      	ldr	r2, [r7, #8]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d202      	bcs.n	8005e06 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005e00:	4a09      	ldr	r2, [pc, #36]	@ (8005e28 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	6013      	str	r3, [r2, #0]
}
 8005e06:	bf00      	nop
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	20000858 	.word	0x20000858
 8005e14:	20000754 	.word	0x20000754
 8005e18:	2000085c 	.word	0x2000085c
 8005e1c:	20000840 	.word	0x20000840
 8005e20:	20000810 	.word	0x20000810
 8005e24:	2000080c 	.word	0x2000080c
 8005e28:	20000874 	.word	0x20000874

08005e2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	3b04      	subs	r3, #4
 8005e3c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005e44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	3b04      	subs	r3, #4
 8005e4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	f023 0201 	bic.w	r2, r3, #1
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	3b04      	subs	r3, #4
 8005e5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005e5c:	4a0c      	ldr	r2, [pc, #48]	@ (8005e90 <pxPortInitialiseStack+0x64>)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	3b14      	subs	r3, #20
 8005e66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	3b04      	subs	r3, #4
 8005e72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f06f 0202 	mvn.w	r2, #2
 8005e7a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	3b20      	subs	r3, #32
 8005e80:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005e82:	68fb      	ldr	r3, [r7, #12]
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3714      	adds	r7, #20
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr
 8005e90:	08005e95 	.word	0x08005e95

08005e94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005e9e:	4b13      	ldr	r3, [pc, #76]	@ (8005eec <prvTaskExitError+0x58>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea6:	d00b      	beq.n	8005ec0 <prvTaskExitError+0x2c>
	__asm volatile
 8005ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eac:	f383 8811 	msr	BASEPRI, r3
 8005eb0:	f3bf 8f6f 	isb	sy
 8005eb4:	f3bf 8f4f 	dsb	sy
 8005eb8:	60fb      	str	r3, [r7, #12]
}
 8005eba:	bf00      	nop
 8005ebc:	bf00      	nop
 8005ebe:	e7fd      	b.n	8005ebc <prvTaskExitError+0x28>
	__asm volatile
 8005ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec4:	f383 8811 	msr	BASEPRI, r3
 8005ec8:	f3bf 8f6f 	isb	sy
 8005ecc:	f3bf 8f4f 	dsb	sy
 8005ed0:	60bb      	str	r3, [r7, #8]
}
 8005ed2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005ed4:	bf00      	nop
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d0fc      	beq.n	8005ed6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005edc:	bf00      	nop
 8005ede:	bf00      	nop
 8005ee0:	3714      	adds	r7, #20
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop
 8005eec:	2000000c 	.word	0x2000000c

08005ef0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ef0:	4b07      	ldr	r3, [pc, #28]	@ (8005f10 <pxCurrentTCBConst2>)
 8005ef2:	6819      	ldr	r1, [r3, #0]
 8005ef4:	6808      	ldr	r0, [r1, #0]
 8005ef6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005efa:	f380 8809 	msr	PSP, r0
 8005efe:	f3bf 8f6f 	isb	sy
 8005f02:	f04f 0000 	mov.w	r0, #0
 8005f06:	f380 8811 	msr	BASEPRI, r0
 8005f0a:	4770      	bx	lr
 8005f0c:	f3af 8000 	nop.w

08005f10 <pxCurrentTCBConst2>:
 8005f10:	20000754 	.word	0x20000754
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005f14:	bf00      	nop
 8005f16:	bf00      	nop

08005f18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005f18:	4808      	ldr	r0, [pc, #32]	@ (8005f3c <prvPortStartFirstTask+0x24>)
 8005f1a:	6800      	ldr	r0, [r0, #0]
 8005f1c:	6800      	ldr	r0, [r0, #0]
 8005f1e:	f380 8808 	msr	MSP, r0
 8005f22:	f04f 0000 	mov.w	r0, #0
 8005f26:	f380 8814 	msr	CONTROL, r0
 8005f2a:	b662      	cpsie	i
 8005f2c:	b661      	cpsie	f
 8005f2e:	f3bf 8f4f 	dsb	sy
 8005f32:	f3bf 8f6f 	isb	sy
 8005f36:	df00      	svc	0
 8005f38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005f3a:	bf00      	nop
 8005f3c:	e000ed08 	.word	0xe000ed08

08005f40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b086      	sub	sp, #24
 8005f44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005f46:	4b47      	ldr	r3, [pc, #284]	@ (8006064 <xPortStartScheduler+0x124>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a47      	ldr	r2, [pc, #284]	@ (8006068 <xPortStartScheduler+0x128>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d10b      	bne.n	8005f68 <xPortStartScheduler+0x28>
	__asm volatile
 8005f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f54:	f383 8811 	msr	BASEPRI, r3
 8005f58:	f3bf 8f6f 	isb	sy
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	613b      	str	r3, [r7, #16]
}
 8005f62:	bf00      	nop
 8005f64:	bf00      	nop
 8005f66:	e7fd      	b.n	8005f64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005f68:	4b3e      	ldr	r3, [pc, #248]	@ (8006064 <xPortStartScheduler+0x124>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a3f      	ldr	r2, [pc, #252]	@ (800606c <xPortStartScheduler+0x12c>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d10b      	bne.n	8005f8a <xPortStartScheduler+0x4a>
	__asm volatile
 8005f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f76:	f383 8811 	msr	BASEPRI, r3
 8005f7a:	f3bf 8f6f 	isb	sy
 8005f7e:	f3bf 8f4f 	dsb	sy
 8005f82:	60fb      	str	r3, [r7, #12]
}
 8005f84:	bf00      	nop
 8005f86:	bf00      	nop
 8005f88:	e7fd      	b.n	8005f86 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005f8a:	4b39      	ldr	r3, [pc, #228]	@ (8006070 <xPortStartScheduler+0x130>)
 8005f8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	22ff      	movs	r2, #255	@ 0xff
 8005f9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005fa4:	78fb      	ldrb	r3, [r7, #3]
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005fac:	b2da      	uxtb	r2, r3
 8005fae:	4b31      	ldr	r3, [pc, #196]	@ (8006074 <xPortStartScheduler+0x134>)
 8005fb0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005fb2:	4b31      	ldr	r3, [pc, #196]	@ (8006078 <xPortStartScheduler+0x138>)
 8005fb4:	2207      	movs	r2, #7
 8005fb6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005fb8:	e009      	b.n	8005fce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005fba:	4b2f      	ldr	r3, [pc, #188]	@ (8006078 <xPortStartScheduler+0x138>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	4a2d      	ldr	r2, [pc, #180]	@ (8006078 <xPortStartScheduler+0x138>)
 8005fc2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005fc4:	78fb      	ldrb	r3, [r7, #3]
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	005b      	lsls	r3, r3, #1
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005fce:	78fb      	ldrb	r3, [r7, #3]
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fd6:	2b80      	cmp	r3, #128	@ 0x80
 8005fd8:	d0ef      	beq.n	8005fba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005fda:	4b27      	ldr	r3, [pc, #156]	@ (8006078 <xPortStartScheduler+0x138>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f1c3 0307 	rsb	r3, r3, #7
 8005fe2:	2b04      	cmp	r3, #4
 8005fe4:	d00b      	beq.n	8005ffe <xPortStartScheduler+0xbe>
	__asm volatile
 8005fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fea:	f383 8811 	msr	BASEPRI, r3
 8005fee:	f3bf 8f6f 	isb	sy
 8005ff2:	f3bf 8f4f 	dsb	sy
 8005ff6:	60bb      	str	r3, [r7, #8]
}
 8005ff8:	bf00      	nop
 8005ffa:	bf00      	nop
 8005ffc:	e7fd      	b.n	8005ffa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005ffe:	4b1e      	ldr	r3, [pc, #120]	@ (8006078 <xPortStartScheduler+0x138>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	021b      	lsls	r3, r3, #8
 8006004:	4a1c      	ldr	r2, [pc, #112]	@ (8006078 <xPortStartScheduler+0x138>)
 8006006:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006008:	4b1b      	ldr	r3, [pc, #108]	@ (8006078 <xPortStartScheduler+0x138>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006010:	4a19      	ldr	r2, [pc, #100]	@ (8006078 <xPortStartScheduler+0x138>)
 8006012:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	b2da      	uxtb	r2, r3
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800601c:	4b17      	ldr	r3, [pc, #92]	@ (800607c <xPortStartScheduler+0x13c>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a16      	ldr	r2, [pc, #88]	@ (800607c <xPortStartScheduler+0x13c>)
 8006022:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006026:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006028:	4b14      	ldr	r3, [pc, #80]	@ (800607c <xPortStartScheduler+0x13c>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a13      	ldr	r2, [pc, #76]	@ (800607c <xPortStartScheduler+0x13c>)
 800602e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006032:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006034:	f000 f8da 	bl	80061ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006038:	4b11      	ldr	r3, [pc, #68]	@ (8006080 <xPortStartScheduler+0x140>)
 800603a:	2200      	movs	r2, #0
 800603c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800603e:	f000 f8f9 	bl	8006234 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006042:	4b10      	ldr	r3, [pc, #64]	@ (8006084 <xPortStartScheduler+0x144>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a0f      	ldr	r2, [pc, #60]	@ (8006084 <xPortStartScheduler+0x144>)
 8006048:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800604c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800604e:	f7ff ff63 	bl	8005f18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006052:	f7ff fd35 	bl	8005ac0 <vTaskSwitchContext>
	prvTaskExitError();
 8006056:	f7ff ff1d 	bl	8005e94 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3718      	adds	r7, #24
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}
 8006064:	e000ed00 	.word	0xe000ed00
 8006068:	410fc271 	.word	0x410fc271
 800606c:	410fc270 	.word	0x410fc270
 8006070:	e000e400 	.word	0xe000e400
 8006074:	20000880 	.word	0x20000880
 8006078:	20000884 	.word	0x20000884
 800607c:	e000ed20 	.word	0xe000ed20
 8006080:	2000000c 	.word	0x2000000c
 8006084:	e000ef34 	.word	0xe000ef34

08006088 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
	__asm volatile
 800608e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006092:	f383 8811 	msr	BASEPRI, r3
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	607b      	str	r3, [r7, #4]
}
 80060a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80060a2:	4b10      	ldr	r3, [pc, #64]	@ (80060e4 <vPortEnterCritical+0x5c>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	3301      	adds	r3, #1
 80060a8:	4a0e      	ldr	r2, [pc, #56]	@ (80060e4 <vPortEnterCritical+0x5c>)
 80060aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80060ac:	4b0d      	ldr	r3, [pc, #52]	@ (80060e4 <vPortEnterCritical+0x5c>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d110      	bne.n	80060d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80060b4:	4b0c      	ldr	r3, [pc, #48]	@ (80060e8 <vPortEnterCritical+0x60>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00b      	beq.n	80060d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80060be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c2:	f383 8811 	msr	BASEPRI, r3
 80060c6:	f3bf 8f6f 	isb	sy
 80060ca:	f3bf 8f4f 	dsb	sy
 80060ce:	603b      	str	r3, [r7, #0]
}
 80060d0:	bf00      	nop
 80060d2:	bf00      	nop
 80060d4:	e7fd      	b.n	80060d2 <vPortEnterCritical+0x4a>
	}
}
 80060d6:	bf00      	nop
 80060d8:	370c      	adds	r7, #12
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	2000000c 	.word	0x2000000c
 80060e8:	e000ed04 	.word	0xe000ed04

080060ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80060f2:	4b12      	ldr	r3, [pc, #72]	@ (800613c <vPortExitCritical+0x50>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d10b      	bne.n	8006112 <vPortExitCritical+0x26>
	__asm volatile
 80060fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060fe:	f383 8811 	msr	BASEPRI, r3
 8006102:	f3bf 8f6f 	isb	sy
 8006106:	f3bf 8f4f 	dsb	sy
 800610a:	607b      	str	r3, [r7, #4]
}
 800610c:	bf00      	nop
 800610e:	bf00      	nop
 8006110:	e7fd      	b.n	800610e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006112:	4b0a      	ldr	r3, [pc, #40]	@ (800613c <vPortExitCritical+0x50>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	3b01      	subs	r3, #1
 8006118:	4a08      	ldr	r2, [pc, #32]	@ (800613c <vPortExitCritical+0x50>)
 800611a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800611c:	4b07      	ldr	r3, [pc, #28]	@ (800613c <vPortExitCritical+0x50>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d105      	bne.n	8006130 <vPortExitCritical+0x44>
 8006124:	2300      	movs	r3, #0
 8006126:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800612e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006130:	bf00      	nop
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr
 800613c:	2000000c 	.word	0x2000000c

08006140 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006140:	f3ef 8009 	mrs	r0, PSP
 8006144:	f3bf 8f6f 	isb	sy
 8006148:	4b15      	ldr	r3, [pc, #84]	@ (80061a0 <pxCurrentTCBConst>)
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	f01e 0f10 	tst.w	lr, #16
 8006150:	bf08      	it	eq
 8006152:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006156:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800615a:	6010      	str	r0, [r2, #0]
 800615c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006160:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006164:	f380 8811 	msr	BASEPRI, r0
 8006168:	f3bf 8f4f 	dsb	sy
 800616c:	f3bf 8f6f 	isb	sy
 8006170:	f7ff fca6 	bl	8005ac0 <vTaskSwitchContext>
 8006174:	f04f 0000 	mov.w	r0, #0
 8006178:	f380 8811 	msr	BASEPRI, r0
 800617c:	bc09      	pop	{r0, r3}
 800617e:	6819      	ldr	r1, [r3, #0]
 8006180:	6808      	ldr	r0, [r1, #0]
 8006182:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006186:	f01e 0f10 	tst.w	lr, #16
 800618a:	bf08      	it	eq
 800618c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006190:	f380 8809 	msr	PSP, r0
 8006194:	f3bf 8f6f 	isb	sy
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	f3af 8000 	nop.w

080061a0 <pxCurrentTCBConst>:
 80061a0:	20000754 	.word	0x20000754
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80061a4:	bf00      	nop
 80061a6:	bf00      	nop

080061a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	af00      	add	r7, sp, #0
	__asm volatile
 80061ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b2:	f383 8811 	msr	BASEPRI, r3
 80061b6:	f3bf 8f6f 	isb	sy
 80061ba:	f3bf 8f4f 	dsb	sy
 80061be:	607b      	str	r3, [r7, #4]
}
 80061c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80061c2:	f7ff fbc3 	bl	800594c <xTaskIncrementTick>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d003      	beq.n	80061d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80061cc:	4b06      	ldr	r3, [pc, #24]	@ (80061e8 <xPortSysTickHandler+0x40>)
 80061ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061d2:	601a      	str	r2, [r3, #0]
 80061d4:	2300      	movs	r3, #0
 80061d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	f383 8811 	msr	BASEPRI, r3
}
 80061de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80061e0:	bf00      	nop
 80061e2:	3708      	adds	r7, #8
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	e000ed04 	.word	0xe000ed04

080061ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80061ec:	b480      	push	{r7}
 80061ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80061f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006220 <vPortSetupTimerInterrupt+0x34>)
 80061f2:	2200      	movs	r2, #0
 80061f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80061f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006224 <vPortSetupTimerInterrupt+0x38>)
 80061f8:	2200      	movs	r2, #0
 80061fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80061fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006228 <vPortSetupTimerInterrupt+0x3c>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a0a      	ldr	r2, [pc, #40]	@ (800622c <vPortSetupTimerInterrupt+0x40>)
 8006202:	fba2 2303 	umull	r2, r3, r2, r3
 8006206:	099b      	lsrs	r3, r3, #6
 8006208:	4a09      	ldr	r2, [pc, #36]	@ (8006230 <vPortSetupTimerInterrupt+0x44>)
 800620a:	3b01      	subs	r3, #1
 800620c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800620e:	4b04      	ldr	r3, [pc, #16]	@ (8006220 <vPortSetupTimerInterrupt+0x34>)
 8006210:	2207      	movs	r2, #7
 8006212:	601a      	str	r2, [r3, #0]
}
 8006214:	bf00      	nop
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	e000e010 	.word	0xe000e010
 8006224:	e000e018 	.word	0xe000e018
 8006228:	20000000 	.word	0x20000000
 800622c:	10624dd3 	.word	0x10624dd3
 8006230:	e000e014 	.word	0xe000e014

08006234 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006234:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006244 <vPortEnableVFP+0x10>
 8006238:	6801      	ldr	r1, [r0, #0]
 800623a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800623e:	6001      	str	r1, [r0, #0]
 8006240:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006242:	bf00      	nop
 8006244:	e000ed88 	.word	0xe000ed88

08006248 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b08a      	sub	sp, #40	@ 0x28
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006250:	2300      	movs	r3, #0
 8006252:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006254:	f7ff face 	bl	80057f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006258:	4b5c      	ldr	r3, [pc, #368]	@ (80063cc <pvPortMalloc+0x184>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d101      	bne.n	8006264 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006260:	f000 f924 	bl	80064ac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006264:	4b5a      	ldr	r3, [pc, #360]	@ (80063d0 <pvPortMalloc+0x188>)
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4013      	ands	r3, r2
 800626c:	2b00      	cmp	r3, #0
 800626e:	f040 8095 	bne.w	800639c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d01e      	beq.n	80062b6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006278:	2208      	movs	r2, #8
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4413      	add	r3, r2
 800627e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f003 0307 	and.w	r3, r3, #7
 8006286:	2b00      	cmp	r3, #0
 8006288:	d015      	beq.n	80062b6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f023 0307 	bic.w	r3, r3, #7
 8006290:	3308      	adds	r3, #8
 8006292:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f003 0307 	and.w	r3, r3, #7
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00b      	beq.n	80062b6 <pvPortMalloc+0x6e>
	__asm volatile
 800629e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062a2:	f383 8811 	msr	BASEPRI, r3
 80062a6:	f3bf 8f6f 	isb	sy
 80062aa:	f3bf 8f4f 	dsb	sy
 80062ae:	617b      	str	r3, [r7, #20]
}
 80062b0:	bf00      	nop
 80062b2:	bf00      	nop
 80062b4:	e7fd      	b.n	80062b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d06f      	beq.n	800639c <pvPortMalloc+0x154>
 80062bc:	4b45      	ldr	r3, [pc, #276]	@ (80063d4 <pvPortMalloc+0x18c>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d86a      	bhi.n	800639c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80062c6:	4b44      	ldr	r3, [pc, #272]	@ (80063d8 <pvPortMalloc+0x190>)
 80062c8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80062ca:	4b43      	ldr	r3, [pc, #268]	@ (80063d8 <pvPortMalloc+0x190>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80062d0:	e004      	b.n	80062dc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80062d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80062d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80062dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d903      	bls.n	80062ee <pvPortMalloc+0xa6>
 80062e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d1f1      	bne.n	80062d2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80062ee:	4b37      	ldr	r3, [pc, #220]	@ (80063cc <pvPortMalloc+0x184>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d051      	beq.n	800639c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80062f8:	6a3b      	ldr	r3, [r7, #32]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2208      	movs	r2, #8
 80062fe:	4413      	add	r3, r2
 8006300:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	6a3b      	ldr	r3, [r7, #32]
 8006308:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800630a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800630c:	685a      	ldr	r2, [r3, #4]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	1ad2      	subs	r2, r2, r3
 8006312:	2308      	movs	r3, #8
 8006314:	005b      	lsls	r3, r3, #1
 8006316:	429a      	cmp	r2, r3
 8006318:	d920      	bls.n	800635c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800631a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4413      	add	r3, r2
 8006320:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	f003 0307 	and.w	r3, r3, #7
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00b      	beq.n	8006344 <pvPortMalloc+0xfc>
	__asm volatile
 800632c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006330:	f383 8811 	msr	BASEPRI, r3
 8006334:	f3bf 8f6f 	isb	sy
 8006338:	f3bf 8f4f 	dsb	sy
 800633c:	613b      	str	r3, [r7, #16]
}
 800633e:	bf00      	nop
 8006340:	bf00      	nop
 8006342:	e7fd      	b.n	8006340 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006346:	685a      	ldr	r2, [r3, #4]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	1ad2      	subs	r2, r2, r3
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006356:	69b8      	ldr	r0, [r7, #24]
 8006358:	f000 f90a 	bl	8006570 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800635c:	4b1d      	ldr	r3, [pc, #116]	@ (80063d4 <pvPortMalloc+0x18c>)
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	4a1b      	ldr	r2, [pc, #108]	@ (80063d4 <pvPortMalloc+0x18c>)
 8006368:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800636a:	4b1a      	ldr	r3, [pc, #104]	@ (80063d4 <pvPortMalloc+0x18c>)
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	4b1b      	ldr	r3, [pc, #108]	@ (80063dc <pvPortMalloc+0x194>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	429a      	cmp	r2, r3
 8006374:	d203      	bcs.n	800637e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006376:	4b17      	ldr	r3, [pc, #92]	@ (80063d4 <pvPortMalloc+0x18c>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a18      	ldr	r2, [pc, #96]	@ (80063dc <pvPortMalloc+0x194>)
 800637c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800637e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006380:	685a      	ldr	r2, [r3, #4]
 8006382:	4b13      	ldr	r3, [pc, #76]	@ (80063d0 <pvPortMalloc+0x188>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	431a      	orrs	r2, r3
 8006388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800638c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638e:	2200      	movs	r2, #0
 8006390:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006392:	4b13      	ldr	r3, [pc, #76]	@ (80063e0 <pvPortMalloc+0x198>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	3301      	adds	r3, #1
 8006398:	4a11      	ldr	r2, [pc, #68]	@ (80063e0 <pvPortMalloc+0x198>)
 800639a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800639c:	f7ff fa38 	bl	8005810 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	f003 0307 	and.w	r3, r3, #7
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00b      	beq.n	80063c2 <pvPortMalloc+0x17a>
	__asm volatile
 80063aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ae:	f383 8811 	msr	BASEPRI, r3
 80063b2:	f3bf 8f6f 	isb	sy
 80063b6:	f3bf 8f4f 	dsb	sy
 80063ba:	60fb      	str	r3, [r7, #12]
}
 80063bc:	bf00      	nop
 80063be:	bf00      	nop
 80063c0:	e7fd      	b.n	80063be <pvPortMalloc+0x176>
	return pvReturn;
 80063c2:	69fb      	ldr	r3, [r7, #28]
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3728      	adds	r7, #40	@ 0x28
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	20004490 	.word	0x20004490
 80063d0:	200044a4 	.word	0x200044a4
 80063d4:	20004494 	.word	0x20004494
 80063d8:	20004488 	.word	0x20004488
 80063dc:	20004498 	.word	0x20004498
 80063e0:	2000449c 	.word	0x2000449c

080063e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b086      	sub	sp, #24
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d04f      	beq.n	8006496 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80063f6:	2308      	movs	r3, #8
 80063f8:	425b      	negs	r3, r3
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	4413      	add	r3, r2
 80063fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	685a      	ldr	r2, [r3, #4]
 8006408:	4b25      	ldr	r3, [pc, #148]	@ (80064a0 <vPortFree+0xbc>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4013      	ands	r3, r2
 800640e:	2b00      	cmp	r3, #0
 8006410:	d10b      	bne.n	800642a <vPortFree+0x46>
	__asm volatile
 8006412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006416:	f383 8811 	msr	BASEPRI, r3
 800641a:	f3bf 8f6f 	isb	sy
 800641e:	f3bf 8f4f 	dsb	sy
 8006422:	60fb      	str	r3, [r7, #12]
}
 8006424:	bf00      	nop
 8006426:	bf00      	nop
 8006428:	e7fd      	b.n	8006426 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00b      	beq.n	800644a <vPortFree+0x66>
	__asm volatile
 8006432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006436:	f383 8811 	msr	BASEPRI, r3
 800643a:	f3bf 8f6f 	isb	sy
 800643e:	f3bf 8f4f 	dsb	sy
 8006442:	60bb      	str	r3, [r7, #8]
}
 8006444:	bf00      	nop
 8006446:	bf00      	nop
 8006448:	e7fd      	b.n	8006446 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	685a      	ldr	r2, [r3, #4]
 800644e:	4b14      	ldr	r3, [pc, #80]	@ (80064a0 <vPortFree+0xbc>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4013      	ands	r3, r2
 8006454:	2b00      	cmp	r3, #0
 8006456:	d01e      	beq.n	8006496 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d11a      	bne.n	8006496 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	685a      	ldr	r2, [r3, #4]
 8006464:	4b0e      	ldr	r3, [pc, #56]	@ (80064a0 <vPortFree+0xbc>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	43db      	mvns	r3, r3
 800646a:	401a      	ands	r2, r3
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006470:	f7ff f9c0 	bl	80057f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	685a      	ldr	r2, [r3, #4]
 8006478:	4b0a      	ldr	r3, [pc, #40]	@ (80064a4 <vPortFree+0xc0>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4413      	add	r3, r2
 800647e:	4a09      	ldr	r2, [pc, #36]	@ (80064a4 <vPortFree+0xc0>)
 8006480:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006482:	6938      	ldr	r0, [r7, #16]
 8006484:	f000 f874 	bl	8006570 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006488:	4b07      	ldr	r3, [pc, #28]	@ (80064a8 <vPortFree+0xc4>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	3301      	adds	r3, #1
 800648e:	4a06      	ldr	r2, [pc, #24]	@ (80064a8 <vPortFree+0xc4>)
 8006490:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006492:	f7ff f9bd 	bl	8005810 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006496:	bf00      	nop
 8006498:	3718      	adds	r7, #24
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	200044a4 	.word	0x200044a4
 80064a4:	20004494 	.word	0x20004494
 80064a8:	200044a0 	.word	0x200044a0

080064ac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80064ac:	b480      	push	{r7}
 80064ae:	b085      	sub	sp, #20
 80064b0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80064b2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80064b6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80064b8:	4b27      	ldr	r3, [pc, #156]	@ (8006558 <prvHeapInit+0xac>)
 80064ba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f003 0307 	and.w	r3, r3, #7
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00c      	beq.n	80064e0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	3307      	adds	r3, #7
 80064ca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f023 0307 	bic.w	r3, r3, #7
 80064d2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80064d4:	68ba      	ldr	r2, [r7, #8]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	4a1f      	ldr	r2, [pc, #124]	@ (8006558 <prvHeapInit+0xac>)
 80064dc:	4413      	add	r3, r2
 80064de:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80064e4:	4a1d      	ldr	r2, [pc, #116]	@ (800655c <prvHeapInit+0xb0>)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80064ea:	4b1c      	ldr	r3, [pc, #112]	@ (800655c <prvHeapInit+0xb0>)
 80064ec:	2200      	movs	r2, #0
 80064ee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	68ba      	ldr	r2, [r7, #8]
 80064f4:	4413      	add	r3, r2
 80064f6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80064f8:	2208      	movs	r2, #8
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	1a9b      	subs	r3, r3, r2
 80064fe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f023 0307 	bic.w	r3, r3, #7
 8006506:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	4a15      	ldr	r2, [pc, #84]	@ (8006560 <prvHeapInit+0xb4>)
 800650c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800650e:	4b14      	ldr	r3, [pc, #80]	@ (8006560 <prvHeapInit+0xb4>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2200      	movs	r2, #0
 8006514:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006516:	4b12      	ldr	r3, [pc, #72]	@ (8006560 <prvHeapInit+0xb4>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2200      	movs	r2, #0
 800651c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	1ad2      	subs	r2, r2, r3
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800652c:	4b0c      	ldr	r3, [pc, #48]	@ (8006560 <prvHeapInit+0xb4>)
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	4a0a      	ldr	r2, [pc, #40]	@ (8006564 <prvHeapInit+0xb8>)
 800653a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	4a09      	ldr	r2, [pc, #36]	@ (8006568 <prvHeapInit+0xbc>)
 8006542:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006544:	4b09      	ldr	r3, [pc, #36]	@ (800656c <prvHeapInit+0xc0>)
 8006546:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800654a:	601a      	str	r2, [r3, #0]
}
 800654c:	bf00      	nop
 800654e:	3714      	adds	r7, #20
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr
 8006558:	20000888 	.word	0x20000888
 800655c:	20004488 	.word	0x20004488
 8006560:	20004490 	.word	0x20004490
 8006564:	20004498 	.word	0x20004498
 8006568:	20004494 	.word	0x20004494
 800656c:	200044a4 	.word	0x200044a4

08006570 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006570:	b480      	push	{r7}
 8006572:	b085      	sub	sp, #20
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006578:	4b28      	ldr	r3, [pc, #160]	@ (800661c <prvInsertBlockIntoFreeList+0xac>)
 800657a:	60fb      	str	r3, [r7, #12]
 800657c:	e002      	b.n	8006584 <prvInsertBlockIntoFreeList+0x14>
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	60fb      	str	r3, [r7, #12]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	429a      	cmp	r2, r3
 800658c:	d8f7      	bhi.n	800657e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	68ba      	ldr	r2, [r7, #8]
 8006598:	4413      	add	r3, r2
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	429a      	cmp	r2, r3
 800659e:	d108      	bne.n	80065b2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	685a      	ldr	r2, [r3, #4]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	441a      	add	r2, r3
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	68ba      	ldr	r2, [r7, #8]
 80065bc:	441a      	add	r2, r3
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d118      	bne.n	80065f8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	4b15      	ldr	r3, [pc, #84]	@ (8006620 <prvInsertBlockIntoFreeList+0xb0>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d00d      	beq.n	80065ee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	685a      	ldr	r2, [r3, #4]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	441a      	add	r2, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	601a      	str	r2, [r3, #0]
 80065ec:	e008      	b.n	8006600 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80065ee:	4b0c      	ldr	r3, [pc, #48]	@ (8006620 <prvInsertBlockIntoFreeList+0xb0>)
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	601a      	str	r2, [r3, #0]
 80065f6:	e003      	b.n	8006600 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	429a      	cmp	r2, r3
 8006606:	d002      	beq.n	800660e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800660e:	bf00      	nop
 8006610:	3714      	adds	r7, #20
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	20004488 	.word	0x20004488
 8006620:	20004490 	.word	0x20004490

08006624 <__cvt>:
 8006624:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006628:	ec57 6b10 	vmov	r6, r7, d0
 800662c:	2f00      	cmp	r7, #0
 800662e:	460c      	mov	r4, r1
 8006630:	4619      	mov	r1, r3
 8006632:	463b      	mov	r3, r7
 8006634:	bfbb      	ittet	lt
 8006636:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800663a:	461f      	movlt	r7, r3
 800663c:	2300      	movge	r3, #0
 800663e:	232d      	movlt	r3, #45	@ 0x2d
 8006640:	700b      	strb	r3, [r1, #0]
 8006642:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006644:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006648:	4691      	mov	r9, r2
 800664a:	f023 0820 	bic.w	r8, r3, #32
 800664e:	bfbc      	itt	lt
 8006650:	4632      	movlt	r2, r6
 8006652:	4616      	movlt	r6, r2
 8006654:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006658:	d005      	beq.n	8006666 <__cvt+0x42>
 800665a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800665e:	d100      	bne.n	8006662 <__cvt+0x3e>
 8006660:	3401      	adds	r4, #1
 8006662:	2102      	movs	r1, #2
 8006664:	e000      	b.n	8006668 <__cvt+0x44>
 8006666:	2103      	movs	r1, #3
 8006668:	ab03      	add	r3, sp, #12
 800666a:	9301      	str	r3, [sp, #4]
 800666c:	ab02      	add	r3, sp, #8
 800666e:	9300      	str	r3, [sp, #0]
 8006670:	ec47 6b10 	vmov	d0, r6, r7
 8006674:	4653      	mov	r3, sl
 8006676:	4622      	mov	r2, r4
 8006678:	f001 f8b6 	bl	80077e8 <_dtoa_r>
 800667c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006680:	4605      	mov	r5, r0
 8006682:	d119      	bne.n	80066b8 <__cvt+0x94>
 8006684:	f019 0f01 	tst.w	r9, #1
 8006688:	d00e      	beq.n	80066a8 <__cvt+0x84>
 800668a:	eb00 0904 	add.w	r9, r0, r4
 800668e:	2200      	movs	r2, #0
 8006690:	2300      	movs	r3, #0
 8006692:	4630      	mov	r0, r6
 8006694:	4639      	mov	r1, r7
 8006696:	f7fa fa17 	bl	8000ac8 <__aeabi_dcmpeq>
 800669a:	b108      	cbz	r0, 80066a0 <__cvt+0x7c>
 800669c:	f8cd 900c 	str.w	r9, [sp, #12]
 80066a0:	2230      	movs	r2, #48	@ 0x30
 80066a2:	9b03      	ldr	r3, [sp, #12]
 80066a4:	454b      	cmp	r3, r9
 80066a6:	d31e      	bcc.n	80066e6 <__cvt+0xc2>
 80066a8:	9b03      	ldr	r3, [sp, #12]
 80066aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80066ac:	1b5b      	subs	r3, r3, r5
 80066ae:	4628      	mov	r0, r5
 80066b0:	6013      	str	r3, [r2, #0]
 80066b2:	b004      	add	sp, #16
 80066b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80066bc:	eb00 0904 	add.w	r9, r0, r4
 80066c0:	d1e5      	bne.n	800668e <__cvt+0x6a>
 80066c2:	7803      	ldrb	r3, [r0, #0]
 80066c4:	2b30      	cmp	r3, #48	@ 0x30
 80066c6:	d10a      	bne.n	80066de <__cvt+0xba>
 80066c8:	2200      	movs	r2, #0
 80066ca:	2300      	movs	r3, #0
 80066cc:	4630      	mov	r0, r6
 80066ce:	4639      	mov	r1, r7
 80066d0:	f7fa f9fa 	bl	8000ac8 <__aeabi_dcmpeq>
 80066d4:	b918      	cbnz	r0, 80066de <__cvt+0xba>
 80066d6:	f1c4 0401 	rsb	r4, r4, #1
 80066da:	f8ca 4000 	str.w	r4, [sl]
 80066de:	f8da 3000 	ldr.w	r3, [sl]
 80066e2:	4499      	add	r9, r3
 80066e4:	e7d3      	b.n	800668e <__cvt+0x6a>
 80066e6:	1c59      	adds	r1, r3, #1
 80066e8:	9103      	str	r1, [sp, #12]
 80066ea:	701a      	strb	r2, [r3, #0]
 80066ec:	e7d9      	b.n	80066a2 <__cvt+0x7e>

080066ee <__exponent>:
 80066ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066f0:	2900      	cmp	r1, #0
 80066f2:	bfba      	itte	lt
 80066f4:	4249      	neglt	r1, r1
 80066f6:	232d      	movlt	r3, #45	@ 0x2d
 80066f8:	232b      	movge	r3, #43	@ 0x2b
 80066fa:	2909      	cmp	r1, #9
 80066fc:	7002      	strb	r2, [r0, #0]
 80066fe:	7043      	strb	r3, [r0, #1]
 8006700:	dd29      	ble.n	8006756 <__exponent+0x68>
 8006702:	f10d 0307 	add.w	r3, sp, #7
 8006706:	461d      	mov	r5, r3
 8006708:	270a      	movs	r7, #10
 800670a:	461a      	mov	r2, r3
 800670c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006710:	fb07 1416 	mls	r4, r7, r6, r1
 8006714:	3430      	adds	r4, #48	@ 0x30
 8006716:	f802 4c01 	strb.w	r4, [r2, #-1]
 800671a:	460c      	mov	r4, r1
 800671c:	2c63      	cmp	r4, #99	@ 0x63
 800671e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006722:	4631      	mov	r1, r6
 8006724:	dcf1      	bgt.n	800670a <__exponent+0x1c>
 8006726:	3130      	adds	r1, #48	@ 0x30
 8006728:	1e94      	subs	r4, r2, #2
 800672a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800672e:	1c41      	adds	r1, r0, #1
 8006730:	4623      	mov	r3, r4
 8006732:	42ab      	cmp	r3, r5
 8006734:	d30a      	bcc.n	800674c <__exponent+0x5e>
 8006736:	f10d 0309 	add.w	r3, sp, #9
 800673a:	1a9b      	subs	r3, r3, r2
 800673c:	42ac      	cmp	r4, r5
 800673e:	bf88      	it	hi
 8006740:	2300      	movhi	r3, #0
 8006742:	3302      	adds	r3, #2
 8006744:	4403      	add	r3, r0
 8006746:	1a18      	subs	r0, r3, r0
 8006748:	b003      	add	sp, #12
 800674a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800674c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006750:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006754:	e7ed      	b.n	8006732 <__exponent+0x44>
 8006756:	2330      	movs	r3, #48	@ 0x30
 8006758:	3130      	adds	r1, #48	@ 0x30
 800675a:	7083      	strb	r3, [r0, #2]
 800675c:	70c1      	strb	r1, [r0, #3]
 800675e:	1d03      	adds	r3, r0, #4
 8006760:	e7f1      	b.n	8006746 <__exponent+0x58>
	...

08006764 <_printf_float>:
 8006764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006768:	b08d      	sub	sp, #52	@ 0x34
 800676a:	460c      	mov	r4, r1
 800676c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006770:	4616      	mov	r6, r2
 8006772:	461f      	mov	r7, r3
 8006774:	4605      	mov	r5, r0
 8006776:	f000 ff23 	bl	80075c0 <_localeconv_r>
 800677a:	6803      	ldr	r3, [r0, #0]
 800677c:	9304      	str	r3, [sp, #16]
 800677e:	4618      	mov	r0, r3
 8006780:	f7f9 fd76 	bl	8000270 <strlen>
 8006784:	2300      	movs	r3, #0
 8006786:	930a      	str	r3, [sp, #40]	@ 0x28
 8006788:	f8d8 3000 	ldr.w	r3, [r8]
 800678c:	9005      	str	r0, [sp, #20]
 800678e:	3307      	adds	r3, #7
 8006790:	f023 0307 	bic.w	r3, r3, #7
 8006794:	f103 0208 	add.w	r2, r3, #8
 8006798:	f894 a018 	ldrb.w	sl, [r4, #24]
 800679c:	f8d4 b000 	ldr.w	fp, [r4]
 80067a0:	f8c8 2000 	str.w	r2, [r8]
 80067a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80067a8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80067ac:	9307      	str	r3, [sp, #28]
 80067ae:	f8cd 8018 	str.w	r8, [sp, #24]
 80067b2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80067b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067ba:	4b9c      	ldr	r3, [pc, #624]	@ (8006a2c <_printf_float+0x2c8>)
 80067bc:	f04f 32ff 	mov.w	r2, #4294967295
 80067c0:	f7fa f9b4 	bl	8000b2c <__aeabi_dcmpun>
 80067c4:	bb70      	cbnz	r0, 8006824 <_printf_float+0xc0>
 80067c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067ca:	4b98      	ldr	r3, [pc, #608]	@ (8006a2c <_printf_float+0x2c8>)
 80067cc:	f04f 32ff 	mov.w	r2, #4294967295
 80067d0:	f7fa f98e 	bl	8000af0 <__aeabi_dcmple>
 80067d4:	bb30      	cbnz	r0, 8006824 <_printf_float+0xc0>
 80067d6:	2200      	movs	r2, #0
 80067d8:	2300      	movs	r3, #0
 80067da:	4640      	mov	r0, r8
 80067dc:	4649      	mov	r1, r9
 80067de:	f7fa f97d 	bl	8000adc <__aeabi_dcmplt>
 80067e2:	b110      	cbz	r0, 80067ea <_printf_float+0x86>
 80067e4:	232d      	movs	r3, #45	@ 0x2d
 80067e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067ea:	4a91      	ldr	r2, [pc, #580]	@ (8006a30 <_printf_float+0x2cc>)
 80067ec:	4b91      	ldr	r3, [pc, #580]	@ (8006a34 <_printf_float+0x2d0>)
 80067ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80067f2:	bf94      	ite	ls
 80067f4:	4690      	movls	r8, r2
 80067f6:	4698      	movhi	r8, r3
 80067f8:	2303      	movs	r3, #3
 80067fa:	6123      	str	r3, [r4, #16]
 80067fc:	f02b 0304 	bic.w	r3, fp, #4
 8006800:	6023      	str	r3, [r4, #0]
 8006802:	f04f 0900 	mov.w	r9, #0
 8006806:	9700      	str	r7, [sp, #0]
 8006808:	4633      	mov	r3, r6
 800680a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800680c:	4621      	mov	r1, r4
 800680e:	4628      	mov	r0, r5
 8006810:	f000 f9d2 	bl	8006bb8 <_printf_common>
 8006814:	3001      	adds	r0, #1
 8006816:	f040 808d 	bne.w	8006934 <_printf_float+0x1d0>
 800681a:	f04f 30ff 	mov.w	r0, #4294967295
 800681e:	b00d      	add	sp, #52	@ 0x34
 8006820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006824:	4642      	mov	r2, r8
 8006826:	464b      	mov	r3, r9
 8006828:	4640      	mov	r0, r8
 800682a:	4649      	mov	r1, r9
 800682c:	f7fa f97e 	bl	8000b2c <__aeabi_dcmpun>
 8006830:	b140      	cbz	r0, 8006844 <_printf_float+0xe0>
 8006832:	464b      	mov	r3, r9
 8006834:	2b00      	cmp	r3, #0
 8006836:	bfbc      	itt	lt
 8006838:	232d      	movlt	r3, #45	@ 0x2d
 800683a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800683e:	4a7e      	ldr	r2, [pc, #504]	@ (8006a38 <_printf_float+0x2d4>)
 8006840:	4b7e      	ldr	r3, [pc, #504]	@ (8006a3c <_printf_float+0x2d8>)
 8006842:	e7d4      	b.n	80067ee <_printf_float+0x8a>
 8006844:	6863      	ldr	r3, [r4, #4]
 8006846:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800684a:	9206      	str	r2, [sp, #24]
 800684c:	1c5a      	adds	r2, r3, #1
 800684e:	d13b      	bne.n	80068c8 <_printf_float+0x164>
 8006850:	2306      	movs	r3, #6
 8006852:	6063      	str	r3, [r4, #4]
 8006854:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006858:	2300      	movs	r3, #0
 800685a:	6022      	str	r2, [r4, #0]
 800685c:	9303      	str	r3, [sp, #12]
 800685e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006860:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006864:	ab09      	add	r3, sp, #36	@ 0x24
 8006866:	9300      	str	r3, [sp, #0]
 8006868:	6861      	ldr	r1, [r4, #4]
 800686a:	ec49 8b10 	vmov	d0, r8, r9
 800686e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006872:	4628      	mov	r0, r5
 8006874:	f7ff fed6 	bl	8006624 <__cvt>
 8006878:	9b06      	ldr	r3, [sp, #24]
 800687a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800687c:	2b47      	cmp	r3, #71	@ 0x47
 800687e:	4680      	mov	r8, r0
 8006880:	d129      	bne.n	80068d6 <_printf_float+0x172>
 8006882:	1cc8      	adds	r0, r1, #3
 8006884:	db02      	blt.n	800688c <_printf_float+0x128>
 8006886:	6863      	ldr	r3, [r4, #4]
 8006888:	4299      	cmp	r1, r3
 800688a:	dd41      	ble.n	8006910 <_printf_float+0x1ac>
 800688c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006890:	fa5f fa8a 	uxtb.w	sl, sl
 8006894:	3901      	subs	r1, #1
 8006896:	4652      	mov	r2, sl
 8006898:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800689c:	9109      	str	r1, [sp, #36]	@ 0x24
 800689e:	f7ff ff26 	bl	80066ee <__exponent>
 80068a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80068a4:	1813      	adds	r3, r2, r0
 80068a6:	2a01      	cmp	r2, #1
 80068a8:	4681      	mov	r9, r0
 80068aa:	6123      	str	r3, [r4, #16]
 80068ac:	dc02      	bgt.n	80068b4 <_printf_float+0x150>
 80068ae:	6822      	ldr	r2, [r4, #0]
 80068b0:	07d2      	lsls	r2, r2, #31
 80068b2:	d501      	bpl.n	80068b8 <_printf_float+0x154>
 80068b4:	3301      	adds	r3, #1
 80068b6:	6123      	str	r3, [r4, #16]
 80068b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d0a2      	beq.n	8006806 <_printf_float+0xa2>
 80068c0:	232d      	movs	r3, #45	@ 0x2d
 80068c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068c6:	e79e      	b.n	8006806 <_printf_float+0xa2>
 80068c8:	9a06      	ldr	r2, [sp, #24]
 80068ca:	2a47      	cmp	r2, #71	@ 0x47
 80068cc:	d1c2      	bne.n	8006854 <_printf_float+0xf0>
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1c0      	bne.n	8006854 <_printf_float+0xf0>
 80068d2:	2301      	movs	r3, #1
 80068d4:	e7bd      	b.n	8006852 <_printf_float+0xee>
 80068d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80068da:	d9db      	bls.n	8006894 <_printf_float+0x130>
 80068dc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80068e0:	d118      	bne.n	8006914 <_printf_float+0x1b0>
 80068e2:	2900      	cmp	r1, #0
 80068e4:	6863      	ldr	r3, [r4, #4]
 80068e6:	dd0b      	ble.n	8006900 <_printf_float+0x19c>
 80068e8:	6121      	str	r1, [r4, #16]
 80068ea:	b913      	cbnz	r3, 80068f2 <_printf_float+0x18e>
 80068ec:	6822      	ldr	r2, [r4, #0]
 80068ee:	07d0      	lsls	r0, r2, #31
 80068f0:	d502      	bpl.n	80068f8 <_printf_float+0x194>
 80068f2:	3301      	adds	r3, #1
 80068f4:	440b      	add	r3, r1
 80068f6:	6123      	str	r3, [r4, #16]
 80068f8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80068fa:	f04f 0900 	mov.w	r9, #0
 80068fe:	e7db      	b.n	80068b8 <_printf_float+0x154>
 8006900:	b913      	cbnz	r3, 8006908 <_printf_float+0x1a4>
 8006902:	6822      	ldr	r2, [r4, #0]
 8006904:	07d2      	lsls	r2, r2, #31
 8006906:	d501      	bpl.n	800690c <_printf_float+0x1a8>
 8006908:	3302      	adds	r3, #2
 800690a:	e7f4      	b.n	80068f6 <_printf_float+0x192>
 800690c:	2301      	movs	r3, #1
 800690e:	e7f2      	b.n	80068f6 <_printf_float+0x192>
 8006910:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006914:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006916:	4299      	cmp	r1, r3
 8006918:	db05      	blt.n	8006926 <_printf_float+0x1c2>
 800691a:	6823      	ldr	r3, [r4, #0]
 800691c:	6121      	str	r1, [r4, #16]
 800691e:	07d8      	lsls	r0, r3, #31
 8006920:	d5ea      	bpl.n	80068f8 <_printf_float+0x194>
 8006922:	1c4b      	adds	r3, r1, #1
 8006924:	e7e7      	b.n	80068f6 <_printf_float+0x192>
 8006926:	2900      	cmp	r1, #0
 8006928:	bfd4      	ite	le
 800692a:	f1c1 0202 	rsble	r2, r1, #2
 800692e:	2201      	movgt	r2, #1
 8006930:	4413      	add	r3, r2
 8006932:	e7e0      	b.n	80068f6 <_printf_float+0x192>
 8006934:	6823      	ldr	r3, [r4, #0]
 8006936:	055a      	lsls	r2, r3, #21
 8006938:	d407      	bmi.n	800694a <_printf_float+0x1e6>
 800693a:	6923      	ldr	r3, [r4, #16]
 800693c:	4642      	mov	r2, r8
 800693e:	4631      	mov	r1, r6
 8006940:	4628      	mov	r0, r5
 8006942:	47b8      	blx	r7
 8006944:	3001      	adds	r0, #1
 8006946:	d12b      	bne.n	80069a0 <_printf_float+0x23c>
 8006948:	e767      	b.n	800681a <_printf_float+0xb6>
 800694a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800694e:	f240 80dd 	bls.w	8006b0c <_printf_float+0x3a8>
 8006952:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006956:	2200      	movs	r2, #0
 8006958:	2300      	movs	r3, #0
 800695a:	f7fa f8b5 	bl	8000ac8 <__aeabi_dcmpeq>
 800695e:	2800      	cmp	r0, #0
 8006960:	d033      	beq.n	80069ca <_printf_float+0x266>
 8006962:	4a37      	ldr	r2, [pc, #220]	@ (8006a40 <_printf_float+0x2dc>)
 8006964:	2301      	movs	r3, #1
 8006966:	4631      	mov	r1, r6
 8006968:	4628      	mov	r0, r5
 800696a:	47b8      	blx	r7
 800696c:	3001      	adds	r0, #1
 800696e:	f43f af54 	beq.w	800681a <_printf_float+0xb6>
 8006972:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006976:	4543      	cmp	r3, r8
 8006978:	db02      	blt.n	8006980 <_printf_float+0x21c>
 800697a:	6823      	ldr	r3, [r4, #0]
 800697c:	07d8      	lsls	r0, r3, #31
 800697e:	d50f      	bpl.n	80069a0 <_printf_float+0x23c>
 8006980:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006984:	4631      	mov	r1, r6
 8006986:	4628      	mov	r0, r5
 8006988:	47b8      	blx	r7
 800698a:	3001      	adds	r0, #1
 800698c:	f43f af45 	beq.w	800681a <_printf_float+0xb6>
 8006990:	f04f 0900 	mov.w	r9, #0
 8006994:	f108 38ff 	add.w	r8, r8, #4294967295
 8006998:	f104 0a1a 	add.w	sl, r4, #26
 800699c:	45c8      	cmp	r8, r9
 800699e:	dc09      	bgt.n	80069b4 <_printf_float+0x250>
 80069a0:	6823      	ldr	r3, [r4, #0]
 80069a2:	079b      	lsls	r3, r3, #30
 80069a4:	f100 8103 	bmi.w	8006bae <_printf_float+0x44a>
 80069a8:	68e0      	ldr	r0, [r4, #12]
 80069aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80069ac:	4298      	cmp	r0, r3
 80069ae:	bfb8      	it	lt
 80069b0:	4618      	movlt	r0, r3
 80069b2:	e734      	b.n	800681e <_printf_float+0xba>
 80069b4:	2301      	movs	r3, #1
 80069b6:	4652      	mov	r2, sl
 80069b8:	4631      	mov	r1, r6
 80069ba:	4628      	mov	r0, r5
 80069bc:	47b8      	blx	r7
 80069be:	3001      	adds	r0, #1
 80069c0:	f43f af2b 	beq.w	800681a <_printf_float+0xb6>
 80069c4:	f109 0901 	add.w	r9, r9, #1
 80069c8:	e7e8      	b.n	800699c <_printf_float+0x238>
 80069ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	dc39      	bgt.n	8006a44 <_printf_float+0x2e0>
 80069d0:	4a1b      	ldr	r2, [pc, #108]	@ (8006a40 <_printf_float+0x2dc>)
 80069d2:	2301      	movs	r3, #1
 80069d4:	4631      	mov	r1, r6
 80069d6:	4628      	mov	r0, r5
 80069d8:	47b8      	blx	r7
 80069da:	3001      	adds	r0, #1
 80069dc:	f43f af1d 	beq.w	800681a <_printf_float+0xb6>
 80069e0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80069e4:	ea59 0303 	orrs.w	r3, r9, r3
 80069e8:	d102      	bne.n	80069f0 <_printf_float+0x28c>
 80069ea:	6823      	ldr	r3, [r4, #0]
 80069ec:	07d9      	lsls	r1, r3, #31
 80069ee:	d5d7      	bpl.n	80069a0 <_printf_float+0x23c>
 80069f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069f4:	4631      	mov	r1, r6
 80069f6:	4628      	mov	r0, r5
 80069f8:	47b8      	blx	r7
 80069fa:	3001      	adds	r0, #1
 80069fc:	f43f af0d 	beq.w	800681a <_printf_float+0xb6>
 8006a00:	f04f 0a00 	mov.w	sl, #0
 8006a04:	f104 0b1a 	add.w	fp, r4, #26
 8006a08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a0a:	425b      	negs	r3, r3
 8006a0c:	4553      	cmp	r3, sl
 8006a0e:	dc01      	bgt.n	8006a14 <_printf_float+0x2b0>
 8006a10:	464b      	mov	r3, r9
 8006a12:	e793      	b.n	800693c <_printf_float+0x1d8>
 8006a14:	2301      	movs	r3, #1
 8006a16:	465a      	mov	r2, fp
 8006a18:	4631      	mov	r1, r6
 8006a1a:	4628      	mov	r0, r5
 8006a1c:	47b8      	blx	r7
 8006a1e:	3001      	adds	r0, #1
 8006a20:	f43f aefb 	beq.w	800681a <_printf_float+0xb6>
 8006a24:	f10a 0a01 	add.w	sl, sl, #1
 8006a28:	e7ee      	b.n	8006a08 <_printf_float+0x2a4>
 8006a2a:	bf00      	nop
 8006a2c:	7fefffff 	.word	0x7fefffff
 8006a30:	0800b080 	.word	0x0800b080
 8006a34:	0800b084 	.word	0x0800b084
 8006a38:	0800b088 	.word	0x0800b088
 8006a3c:	0800b08c 	.word	0x0800b08c
 8006a40:	0800b090 	.word	0x0800b090
 8006a44:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006a46:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006a4a:	4553      	cmp	r3, sl
 8006a4c:	bfa8      	it	ge
 8006a4e:	4653      	movge	r3, sl
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	4699      	mov	r9, r3
 8006a54:	dc36      	bgt.n	8006ac4 <_printf_float+0x360>
 8006a56:	f04f 0b00 	mov.w	fp, #0
 8006a5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a5e:	f104 021a 	add.w	r2, r4, #26
 8006a62:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006a64:	9306      	str	r3, [sp, #24]
 8006a66:	eba3 0309 	sub.w	r3, r3, r9
 8006a6a:	455b      	cmp	r3, fp
 8006a6c:	dc31      	bgt.n	8006ad2 <_printf_float+0x36e>
 8006a6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a70:	459a      	cmp	sl, r3
 8006a72:	dc3a      	bgt.n	8006aea <_printf_float+0x386>
 8006a74:	6823      	ldr	r3, [r4, #0]
 8006a76:	07da      	lsls	r2, r3, #31
 8006a78:	d437      	bmi.n	8006aea <_printf_float+0x386>
 8006a7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a7c:	ebaa 0903 	sub.w	r9, sl, r3
 8006a80:	9b06      	ldr	r3, [sp, #24]
 8006a82:	ebaa 0303 	sub.w	r3, sl, r3
 8006a86:	4599      	cmp	r9, r3
 8006a88:	bfa8      	it	ge
 8006a8a:	4699      	movge	r9, r3
 8006a8c:	f1b9 0f00 	cmp.w	r9, #0
 8006a90:	dc33      	bgt.n	8006afa <_printf_float+0x396>
 8006a92:	f04f 0800 	mov.w	r8, #0
 8006a96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a9a:	f104 0b1a 	add.w	fp, r4, #26
 8006a9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006aa0:	ebaa 0303 	sub.w	r3, sl, r3
 8006aa4:	eba3 0309 	sub.w	r3, r3, r9
 8006aa8:	4543      	cmp	r3, r8
 8006aaa:	f77f af79 	ble.w	80069a0 <_printf_float+0x23c>
 8006aae:	2301      	movs	r3, #1
 8006ab0:	465a      	mov	r2, fp
 8006ab2:	4631      	mov	r1, r6
 8006ab4:	4628      	mov	r0, r5
 8006ab6:	47b8      	blx	r7
 8006ab8:	3001      	adds	r0, #1
 8006aba:	f43f aeae 	beq.w	800681a <_printf_float+0xb6>
 8006abe:	f108 0801 	add.w	r8, r8, #1
 8006ac2:	e7ec      	b.n	8006a9e <_printf_float+0x33a>
 8006ac4:	4642      	mov	r2, r8
 8006ac6:	4631      	mov	r1, r6
 8006ac8:	4628      	mov	r0, r5
 8006aca:	47b8      	blx	r7
 8006acc:	3001      	adds	r0, #1
 8006ace:	d1c2      	bne.n	8006a56 <_printf_float+0x2f2>
 8006ad0:	e6a3      	b.n	800681a <_printf_float+0xb6>
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	4631      	mov	r1, r6
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	9206      	str	r2, [sp, #24]
 8006ada:	47b8      	blx	r7
 8006adc:	3001      	adds	r0, #1
 8006ade:	f43f ae9c 	beq.w	800681a <_printf_float+0xb6>
 8006ae2:	9a06      	ldr	r2, [sp, #24]
 8006ae4:	f10b 0b01 	add.w	fp, fp, #1
 8006ae8:	e7bb      	b.n	8006a62 <_printf_float+0x2fe>
 8006aea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006aee:	4631      	mov	r1, r6
 8006af0:	4628      	mov	r0, r5
 8006af2:	47b8      	blx	r7
 8006af4:	3001      	adds	r0, #1
 8006af6:	d1c0      	bne.n	8006a7a <_printf_float+0x316>
 8006af8:	e68f      	b.n	800681a <_printf_float+0xb6>
 8006afa:	9a06      	ldr	r2, [sp, #24]
 8006afc:	464b      	mov	r3, r9
 8006afe:	4442      	add	r2, r8
 8006b00:	4631      	mov	r1, r6
 8006b02:	4628      	mov	r0, r5
 8006b04:	47b8      	blx	r7
 8006b06:	3001      	adds	r0, #1
 8006b08:	d1c3      	bne.n	8006a92 <_printf_float+0x32e>
 8006b0a:	e686      	b.n	800681a <_printf_float+0xb6>
 8006b0c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006b10:	f1ba 0f01 	cmp.w	sl, #1
 8006b14:	dc01      	bgt.n	8006b1a <_printf_float+0x3b6>
 8006b16:	07db      	lsls	r3, r3, #31
 8006b18:	d536      	bpl.n	8006b88 <_printf_float+0x424>
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	4642      	mov	r2, r8
 8006b1e:	4631      	mov	r1, r6
 8006b20:	4628      	mov	r0, r5
 8006b22:	47b8      	blx	r7
 8006b24:	3001      	adds	r0, #1
 8006b26:	f43f ae78 	beq.w	800681a <_printf_float+0xb6>
 8006b2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b2e:	4631      	mov	r1, r6
 8006b30:	4628      	mov	r0, r5
 8006b32:	47b8      	blx	r7
 8006b34:	3001      	adds	r0, #1
 8006b36:	f43f ae70 	beq.w	800681a <_printf_float+0xb6>
 8006b3a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006b3e:	2200      	movs	r2, #0
 8006b40:	2300      	movs	r3, #0
 8006b42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b46:	f7f9 ffbf 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b4a:	b9c0      	cbnz	r0, 8006b7e <_printf_float+0x41a>
 8006b4c:	4653      	mov	r3, sl
 8006b4e:	f108 0201 	add.w	r2, r8, #1
 8006b52:	4631      	mov	r1, r6
 8006b54:	4628      	mov	r0, r5
 8006b56:	47b8      	blx	r7
 8006b58:	3001      	adds	r0, #1
 8006b5a:	d10c      	bne.n	8006b76 <_printf_float+0x412>
 8006b5c:	e65d      	b.n	800681a <_printf_float+0xb6>
 8006b5e:	2301      	movs	r3, #1
 8006b60:	465a      	mov	r2, fp
 8006b62:	4631      	mov	r1, r6
 8006b64:	4628      	mov	r0, r5
 8006b66:	47b8      	blx	r7
 8006b68:	3001      	adds	r0, #1
 8006b6a:	f43f ae56 	beq.w	800681a <_printf_float+0xb6>
 8006b6e:	f108 0801 	add.w	r8, r8, #1
 8006b72:	45d0      	cmp	r8, sl
 8006b74:	dbf3      	blt.n	8006b5e <_printf_float+0x3fa>
 8006b76:	464b      	mov	r3, r9
 8006b78:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006b7c:	e6df      	b.n	800693e <_printf_float+0x1da>
 8006b7e:	f04f 0800 	mov.w	r8, #0
 8006b82:	f104 0b1a 	add.w	fp, r4, #26
 8006b86:	e7f4      	b.n	8006b72 <_printf_float+0x40e>
 8006b88:	2301      	movs	r3, #1
 8006b8a:	4642      	mov	r2, r8
 8006b8c:	e7e1      	b.n	8006b52 <_printf_float+0x3ee>
 8006b8e:	2301      	movs	r3, #1
 8006b90:	464a      	mov	r2, r9
 8006b92:	4631      	mov	r1, r6
 8006b94:	4628      	mov	r0, r5
 8006b96:	47b8      	blx	r7
 8006b98:	3001      	adds	r0, #1
 8006b9a:	f43f ae3e 	beq.w	800681a <_printf_float+0xb6>
 8006b9e:	f108 0801 	add.w	r8, r8, #1
 8006ba2:	68e3      	ldr	r3, [r4, #12]
 8006ba4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006ba6:	1a5b      	subs	r3, r3, r1
 8006ba8:	4543      	cmp	r3, r8
 8006baa:	dcf0      	bgt.n	8006b8e <_printf_float+0x42a>
 8006bac:	e6fc      	b.n	80069a8 <_printf_float+0x244>
 8006bae:	f04f 0800 	mov.w	r8, #0
 8006bb2:	f104 0919 	add.w	r9, r4, #25
 8006bb6:	e7f4      	b.n	8006ba2 <_printf_float+0x43e>

08006bb8 <_printf_common>:
 8006bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bbc:	4616      	mov	r6, r2
 8006bbe:	4698      	mov	r8, r3
 8006bc0:	688a      	ldr	r2, [r1, #8]
 8006bc2:	690b      	ldr	r3, [r1, #16]
 8006bc4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	bfb8      	it	lt
 8006bcc:	4613      	movlt	r3, r2
 8006bce:	6033      	str	r3, [r6, #0]
 8006bd0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006bd4:	4607      	mov	r7, r0
 8006bd6:	460c      	mov	r4, r1
 8006bd8:	b10a      	cbz	r2, 8006bde <_printf_common+0x26>
 8006bda:	3301      	adds	r3, #1
 8006bdc:	6033      	str	r3, [r6, #0]
 8006bde:	6823      	ldr	r3, [r4, #0]
 8006be0:	0699      	lsls	r1, r3, #26
 8006be2:	bf42      	ittt	mi
 8006be4:	6833      	ldrmi	r3, [r6, #0]
 8006be6:	3302      	addmi	r3, #2
 8006be8:	6033      	strmi	r3, [r6, #0]
 8006bea:	6825      	ldr	r5, [r4, #0]
 8006bec:	f015 0506 	ands.w	r5, r5, #6
 8006bf0:	d106      	bne.n	8006c00 <_printf_common+0x48>
 8006bf2:	f104 0a19 	add.w	sl, r4, #25
 8006bf6:	68e3      	ldr	r3, [r4, #12]
 8006bf8:	6832      	ldr	r2, [r6, #0]
 8006bfa:	1a9b      	subs	r3, r3, r2
 8006bfc:	42ab      	cmp	r3, r5
 8006bfe:	dc26      	bgt.n	8006c4e <_printf_common+0x96>
 8006c00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006c04:	6822      	ldr	r2, [r4, #0]
 8006c06:	3b00      	subs	r3, #0
 8006c08:	bf18      	it	ne
 8006c0a:	2301      	movne	r3, #1
 8006c0c:	0692      	lsls	r2, r2, #26
 8006c0e:	d42b      	bmi.n	8006c68 <_printf_common+0xb0>
 8006c10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006c14:	4641      	mov	r1, r8
 8006c16:	4638      	mov	r0, r7
 8006c18:	47c8      	blx	r9
 8006c1a:	3001      	adds	r0, #1
 8006c1c:	d01e      	beq.n	8006c5c <_printf_common+0xa4>
 8006c1e:	6823      	ldr	r3, [r4, #0]
 8006c20:	6922      	ldr	r2, [r4, #16]
 8006c22:	f003 0306 	and.w	r3, r3, #6
 8006c26:	2b04      	cmp	r3, #4
 8006c28:	bf02      	ittt	eq
 8006c2a:	68e5      	ldreq	r5, [r4, #12]
 8006c2c:	6833      	ldreq	r3, [r6, #0]
 8006c2e:	1aed      	subeq	r5, r5, r3
 8006c30:	68a3      	ldr	r3, [r4, #8]
 8006c32:	bf0c      	ite	eq
 8006c34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c38:	2500      	movne	r5, #0
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	bfc4      	itt	gt
 8006c3e:	1a9b      	subgt	r3, r3, r2
 8006c40:	18ed      	addgt	r5, r5, r3
 8006c42:	2600      	movs	r6, #0
 8006c44:	341a      	adds	r4, #26
 8006c46:	42b5      	cmp	r5, r6
 8006c48:	d11a      	bne.n	8006c80 <_printf_common+0xc8>
 8006c4a:	2000      	movs	r0, #0
 8006c4c:	e008      	b.n	8006c60 <_printf_common+0xa8>
 8006c4e:	2301      	movs	r3, #1
 8006c50:	4652      	mov	r2, sl
 8006c52:	4641      	mov	r1, r8
 8006c54:	4638      	mov	r0, r7
 8006c56:	47c8      	blx	r9
 8006c58:	3001      	adds	r0, #1
 8006c5a:	d103      	bne.n	8006c64 <_printf_common+0xac>
 8006c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c64:	3501      	adds	r5, #1
 8006c66:	e7c6      	b.n	8006bf6 <_printf_common+0x3e>
 8006c68:	18e1      	adds	r1, r4, r3
 8006c6a:	1c5a      	adds	r2, r3, #1
 8006c6c:	2030      	movs	r0, #48	@ 0x30
 8006c6e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006c72:	4422      	add	r2, r4
 8006c74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006c78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006c7c:	3302      	adds	r3, #2
 8006c7e:	e7c7      	b.n	8006c10 <_printf_common+0x58>
 8006c80:	2301      	movs	r3, #1
 8006c82:	4622      	mov	r2, r4
 8006c84:	4641      	mov	r1, r8
 8006c86:	4638      	mov	r0, r7
 8006c88:	47c8      	blx	r9
 8006c8a:	3001      	adds	r0, #1
 8006c8c:	d0e6      	beq.n	8006c5c <_printf_common+0xa4>
 8006c8e:	3601      	adds	r6, #1
 8006c90:	e7d9      	b.n	8006c46 <_printf_common+0x8e>
	...

08006c94 <_printf_i>:
 8006c94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c98:	7e0f      	ldrb	r7, [r1, #24]
 8006c9a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006c9c:	2f78      	cmp	r7, #120	@ 0x78
 8006c9e:	4691      	mov	r9, r2
 8006ca0:	4680      	mov	r8, r0
 8006ca2:	460c      	mov	r4, r1
 8006ca4:	469a      	mov	sl, r3
 8006ca6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006caa:	d807      	bhi.n	8006cbc <_printf_i+0x28>
 8006cac:	2f62      	cmp	r7, #98	@ 0x62
 8006cae:	d80a      	bhi.n	8006cc6 <_printf_i+0x32>
 8006cb0:	2f00      	cmp	r7, #0
 8006cb2:	f000 80d2 	beq.w	8006e5a <_printf_i+0x1c6>
 8006cb6:	2f58      	cmp	r7, #88	@ 0x58
 8006cb8:	f000 80b9 	beq.w	8006e2e <_printf_i+0x19a>
 8006cbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006cc0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006cc4:	e03a      	b.n	8006d3c <_printf_i+0xa8>
 8006cc6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006cca:	2b15      	cmp	r3, #21
 8006ccc:	d8f6      	bhi.n	8006cbc <_printf_i+0x28>
 8006cce:	a101      	add	r1, pc, #4	@ (adr r1, 8006cd4 <_printf_i+0x40>)
 8006cd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006cd4:	08006d2d 	.word	0x08006d2d
 8006cd8:	08006d41 	.word	0x08006d41
 8006cdc:	08006cbd 	.word	0x08006cbd
 8006ce0:	08006cbd 	.word	0x08006cbd
 8006ce4:	08006cbd 	.word	0x08006cbd
 8006ce8:	08006cbd 	.word	0x08006cbd
 8006cec:	08006d41 	.word	0x08006d41
 8006cf0:	08006cbd 	.word	0x08006cbd
 8006cf4:	08006cbd 	.word	0x08006cbd
 8006cf8:	08006cbd 	.word	0x08006cbd
 8006cfc:	08006cbd 	.word	0x08006cbd
 8006d00:	08006e41 	.word	0x08006e41
 8006d04:	08006d6b 	.word	0x08006d6b
 8006d08:	08006dfb 	.word	0x08006dfb
 8006d0c:	08006cbd 	.word	0x08006cbd
 8006d10:	08006cbd 	.word	0x08006cbd
 8006d14:	08006e63 	.word	0x08006e63
 8006d18:	08006cbd 	.word	0x08006cbd
 8006d1c:	08006d6b 	.word	0x08006d6b
 8006d20:	08006cbd 	.word	0x08006cbd
 8006d24:	08006cbd 	.word	0x08006cbd
 8006d28:	08006e03 	.word	0x08006e03
 8006d2c:	6833      	ldr	r3, [r6, #0]
 8006d2e:	1d1a      	adds	r2, r3, #4
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	6032      	str	r2, [r6, #0]
 8006d34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e09d      	b.n	8006e7c <_printf_i+0x1e8>
 8006d40:	6833      	ldr	r3, [r6, #0]
 8006d42:	6820      	ldr	r0, [r4, #0]
 8006d44:	1d19      	adds	r1, r3, #4
 8006d46:	6031      	str	r1, [r6, #0]
 8006d48:	0606      	lsls	r6, r0, #24
 8006d4a:	d501      	bpl.n	8006d50 <_printf_i+0xbc>
 8006d4c:	681d      	ldr	r5, [r3, #0]
 8006d4e:	e003      	b.n	8006d58 <_printf_i+0xc4>
 8006d50:	0645      	lsls	r5, r0, #25
 8006d52:	d5fb      	bpl.n	8006d4c <_printf_i+0xb8>
 8006d54:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006d58:	2d00      	cmp	r5, #0
 8006d5a:	da03      	bge.n	8006d64 <_printf_i+0xd0>
 8006d5c:	232d      	movs	r3, #45	@ 0x2d
 8006d5e:	426d      	negs	r5, r5
 8006d60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d64:	4859      	ldr	r0, [pc, #356]	@ (8006ecc <_printf_i+0x238>)
 8006d66:	230a      	movs	r3, #10
 8006d68:	e011      	b.n	8006d8e <_printf_i+0xfa>
 8006d6a:	6821      	ldr	r1, [r4, #0]
 8006d6c:	6833      	ldr	r3, [r6, #0]
 8006d6e:	0608      	lsls	r0, r1, #24
 8006d70:	f853 5b04 	ldr.w	r5, [r3], #4
 8006d74:	d402      	bmi.n	8006d7c <_printf_i+0xe8>
 8006d76:	0649      	lsls	r1, r1, #25
 8006d78:	bf48      	it	mi
 8006d7a:	b2ad      	uxthmi	r5, r5
 8006d7c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006d7e:	4853      	ldr	r0, [pc, #332]	@ (8006ecc <_printf_i+0x238>)
 8006d80:	6033      	str	r3, [r6, #0]
 8006d82:	bf14      	ite	ne
 8006d84:	230a      	movne	r3, #10
 8006d86:	2308      	moveq	r3, #8
 8006d88:	2100      	movs	r1, #0
 8006d8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006d8e:	6866      	ldr	r6, [r4, #4]
 8006d90:	60a6      	str	r6, [r4, #8]
 8006d92:	2e00      	cmp	r6, #0
 8006d94:	bfa2      	ittt	ge
 8006d96:	6821      	ldrge	r1, [r4, #0]
 8006d98:	f021 0104 	bicge.w	r1, r1, #4
 8006d9c:	6021      	strge	r1, [r4, #0]
 8006d9e:	b90d      	cbnz	r5, 8006da4 <_printf_i+0x110>
 8006da0:	2e00      	cmp	r6, #0
 8006da2:	d04b      	beq.n	8006e3c <_printf_i+0x1a8>
 8006da4:	4616      	mov	r6, r2
 8006da6:	fbb5 f1f3 	udiv	r1, r5, r3
 8006daa:	fb03 5711 	mls	r7, r3, r1, r5
 8006dae:	5dc7      	ldrb	r7, [r0, r7]
 8006db0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006db4:	462f      	mov	r7, r5
 8006db6:	42bb      	cmp	r3, r7
 8006db8:	460d      	mov	r5, r1
 8006dba:	d9f4      	bls.n	8006da6 <_printf_i+0x112>
 8006dbc:	2b08      	cmp	r3, #8
 8006dbe:	d10b      	bne.n	8006dd8 <_printf_i+0x144>
 8006dc0:	6823      	ldr	r3, [r4, #0]
 8006dc2:	07df      	lsls	r7, r3, #31
 8006dc4:	d508      	bpl.n	8006dd8 <_printf_i+0x144>
 8006dc6:	6923      	ldr	r3, [r4, #16]
 8006dc8:	6861      	ldr	r1, [r4, #4]
 8006dca:	4299      	cmp	r1, r3
 8006dcc:	bfde      	ittt	le
 8006dce:	2330      	movle	r3, #48	@ 0x30
 8006dd0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006dd4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006dd8:	1b92      	subs	r2, r2, r6
 8006dda:	6122      	str	r2, [r4, #16]
 8006ddc:	f8cd a000 	str.w	sl, [sp]
 8006de0:	464b      	mov	r3, r9
 8006de2:	aa03      	add	r2, sp, #12
 8006de4:	4621      	mov	r1, r4
 8006de6:	4640      	mov	r0, r8
 8006de8:	f7ff fee6 	bl	8006bb8 <_printf_common>
 8006dec:	3001      	adds	r0, #1
 8006dee:	d14a      	bne.n	8006e86 <_printf_i+0x1f2>
 8006df0:	f04f 30ff 	mov.w	r0, #4294967295
 8006df4:	b004      	add	sp, #16
 8006df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dfa:	6823      	ldr	r3, [r4, #0]
 8006dfc:	f043 0320 	orr.w	r3, r3, #32
 8006e00:	6023      	str	r3, [r4, #0]
 8006e02:	4833      	ldr	r0, [pc, #204]	@ (8006ed0 <_printf_i+0x23c>)
 8006e04:	2778      	movs	r7, #120	@ 0x78
 8006e06:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006e0a:	6823      	ldr	r3, [r4, #0]
 8006e0c:	6831      	ldr	r1, [r6, #0]
 8006e0e:	061f      	lsls	r7, r3, #24
 8006e10:	f851 5b04 	ldr.w	r5, [r1], #4
 8006e14:	d402      	bmi.n	8006e1c <_printf_i+0x188>
 8006e16:	065f      	lsls	r7, r3, #25
 8006e18:	bf48      	it	mi
 8006e1a:	b2ad      	uxthmi	r5, r5
 8006e1c:	6031      	str	r1, [r6, #0]
 8006e1e:	07d9      	lsls	r1, r3, #31
 8006e20:	bf44      	itt	mi
 8006e22:	f043 0320 	orrmi.w	r3, r3, #32
 8006e26:	6023      	strmi	r3, [r4, #0]
 8006e28:	b11d      	cbz	r5, 8006e32 <_printf_i+0x19e>
 8006e2a:	2310      	movs	r3, #16
 8006e2c:	e7ac      	b.n	8006d88 <_printf_i+0xf4>
 8006e2e:	4827      	ldr	r0, [pc, #156]	@ (8006ecc <_printf_i+0x238>)
 8006e30:	e7e9      	b.n	8006e06 <_printf_i+0x172>
 8006e32:	6823      	ldr	r3, [r4, #0]
 8006e34:	f023 0320 	bic.w	r3, r3, #32
 8006e38:	6023      	str	r3, [r4, #0]
 8006e3a:	e7f6      	b.n	8006e2a <_printf_i+0x196>
 8006e3c:	4616      	mov	r6, r2
 8006e3e:	e7bd      	b.n	8006dbc <_printf_i+0x128>
 8006e40:	6833      	ldr	r3, [r6, #0]
 8006e42:	6825      	ldr	r5, [r4, #0]
 8006e44:	6961      	ldr	r1, [r4, #20]
 8006e46:	1d18      	adds	r0, r3, #4
 8006e48:	6030      	str	r0, [r6, #0]
 8006e4a:	062e      	lsls	r6, r5, #24
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	d501      	bpl.n	8006e54 <_printf_i+0x1c0>
 8006e50:	6019      	str	r1, [r3, #0]
 8006e52:	e002      	b.n	8006e5a <_printf_i+0x1c6>
 8006e54:	0668      	lsls	r0, r5, #25
 8006e56:	d5fb      	bpl.n	8006e50 <_printf_i+0x1bc>
 8006e58:	8019      	strh	r1, [r3, #0]
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	6123      	str	r3, [r4, #16]
 8006e5e:	4616      	mov	r6, r2
 8006e60:	e7bc      	b.n	8006ddc <_printf_i+0x148>
 8006e62:	6833      	ldr	r3, [r6, #0]
 8006e64:	1d1a      	adds	r2, r3, #4
 8006e66:	6032      	str	r2, [r6, #0]
 8006e68:	681e      	ldr	r6, [r3, #0]
 8006e6a:	6862      	ldr	r2, [r4, #4]
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	4630      	mov	r0, r6
 8006e70:	f7f9 f9ae 	bl	80001d0 <memchr>
 8006e74:	b108      	cbz	r0, 8006e7a <_printf_i+0x1e6>
 8006e76:	1b80      	subs	r0, r0, r6
 8006e78:	6060      	str	r0, [r4, #4]
 8006e7a:	6863      	ldr	r3, [r4, #4]
 8006e7c:	6123      	str	r3, [r4, #16]
 8006e7e:	2300      	movs	r3, #0
 8006e80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e84:	e7aa      	b.n	8006ddc <_printf_i+0x148>
 8006e86:	6923      	ldr	r3, [r4, #16]
 8006e88:	4632      	mov	r2, r6
 8006e8a:	4649      	mov	r1, r9
 8006e8c:	4640      	mov	r0, r8
 8006e8e:	47d0      	blx	sl
 8006e90:	3001      	adds	r0, #1
 8006e92:	d0ad      	beq.n	8006df0 <_printf_i+0x15c>
 8006e94:	6823      	ldr	r3, [r4, #0]
 8006e96:	079b      	lsls	r3, r3, #30
 8006e98:	d413      	bmi.n	8006ec2 <_printf_i+0x22e>
 8006e9a:	68e0      	ldr	r0, [r4, #12]
 8006e9c:	9b03      	ldr	r3, [sp, #12]
 8006e9e:	4298      	cmp	r0, r3
 8006ea0:	bfb8      	it	lt
 8006ea2:	4618      	movlt	r0, r3
 8006ea4:	e7a6      	b.n	8006df4 <_printf_i+0x160>
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	4632      	mov	r2, r6
 8006eaa:	4649      	mov	r1, r9
 8006eac:	4640      	mov	r0, r8
 8006eae:	47d0      	blx	sl
 8006eb0:	3001      	adds	r0, #1
 8006eb2:	d09d      	beq.n	8006df0 <_printf_i+0x15c>
 8006eb4:	3501      	adds	r5, #1
 8006eb6:	68e3      	ldr	r3, [r4, #12]
 8006eb8:	9903      	ldr	r1, [sp, #12]
 8006eba:	1a5b      	subs	r3, r3, r1
 8006ebc:	42ab      	cmp	r3, r5
 8006ebe:	dcf2      	bgt.n	8006ea6 <_printf_i+0x212>
 8006ec0:	e7eb      	b.n	8006e9a <_printf_i+0x206>
 8006ec2:	2500      	movs	r5, #0
 8006ec4:	f104 0619 	add.w	r6, r4, #25
 8006ec8:	e7f5      	b.n	8006eb6 <_printf_i+0x222>
 8006eca:	bf00      	nop
 8006ecc:	0800b092 	.word	0x0800b092
 8006ed0:	0800b0a3 	.word	0x0800b0a3

08006ed4 <_scanf_float>:
 8006ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ed8:	b087      	sub	sp, #28
 8006eda:	4617      	mov	r7, r2
 8006edc:	9303      	str	r3, [sp, #12]
 8006ede:	688b      	ldr	r3, [r1, #8]
 8006ee0:	1e5a      	subs	r2, r3, #1
 8006ee2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006ee6:	bf81      	itttt	hi
 8006ee8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006eec:	eb03 0b05 	addhi.w	fp, r3, r5
 8006ef0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006ef4:	608b      	strhi	r3, [r1, #8]
 8006ef6:	680b      	ldr	r3, [r1, #0]
 8006ef8:	460a      	mov	r2, r1
 8006efa:	f04f 0500 	mov.w	r5, #0
 8006efe:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006f02:	f842 3b1c 	str.w	r3, [r2], #28
 8006f06:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006f0a:	4680      	mov	r8, r0
 8006f0c:	460c      	mov	r4, r1
 8006f0e:	bf98      	it	ls
 8006f10:	f04f 0b00 	movls.w	fp, #0
 8006f14:	9201      	str	r2, [sp, #4]
 8006f16:	4616      	mov	r6, r2
 8006f18:	46aa      	mov	sl, r5
 8006f1a:	46a9      	mov	r9, r5
 8006f1c:	9502      	str	r5, [sp, #8]
 8006f1e:	68a2      	ldr	r2, [r4, #8]
 8006f20:	b152      	cbz	r2, 8006f38 <_scanf_float+0x64>
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	2b4e      	cmp	r3, #78	@ 0x4e
 8006f28:	d864      	bhi.n	8006ff4 <_scanf_float+0x120>
 8006f2a:	2b40      	cmp	r3, #64	@ 0x40
 8006f2c:	d83c      	bhi.n	8006fa8 <_scanf_float+0xd4>
 8006f2e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006f32:	b2c8      	uxtb	r0, r1
 8006f34:	280e      	cmp	r0, #14
 8006f36:	d93a      	bls.n	8006fae <_scanf_float+0xda>
 8006f38:	f1b9 0f00 	cmp.w	r9, #0
 8006f3c:	d003      	beq.n	8006f46 <_scanf_float+0x72>
 8006f3e:	6823      	ldr	r3, [r4, #0]
 8006f40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f44:	6023      	str	r3, [r4, #0]
 8006f46:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f4a:	f1ba 0f01 	cmp.w	sl, #1
 8006f4e:	f200 8117 	bhi.w	8007180 <_scanf_float+0x2ac>
 8006f52:	9b01      	ldr	r3, [sp, #4]
 8006f54:	429e      	cmp	r6, r3
 8006f56:	f200 8108 	bhi.w	800716a <_scanf_float+0x296>
 8006f5a:	2001      	movs	r0, #1
 8006f5c:	b007      	add	sp, #28
 8006f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f62:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006f66:	2a0d      	cmp	r2, #13
 8006f68:	d8e6      	bhi.n	8006f38 <_scanf_float+0x64>
 8006f6a:	a101      	add	r1, pc, #4	@ (adr r1, 8006f70 <_scanf_float+0x9c>)
 8006f6c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006f70:	080070b7 	.word	0x080070b7
 8006f74:	08006f39 	.word	0x08006f39
 8006f78:	08006f39 	.word	0x08006f39
 8006f7c:	08006f39 	.word	0x08006f39
 8006f80:	08007117 	.word	0x08007117
 8006f84:	080070ef 	.word	0x080070ef
 8006f88:	08006f39 	.word	0x08006f39
 8006f8c:	08006f39 	.word	0x08006f39
 8006f90:	080070c5 	.word	0x080070c5
 8006f94:	08006f39 	.word	0x08006f39
 8006f98:	08006f39 	.word	0x08006f39
 8006f9c:	08006f39 	.word	0x08006f39
 8006fa0:	08006f39 	.word	0x08006f39
 8006fa4:	0800707d 	.word	0x0800707d
 8006fa8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006fac:	e7db      	b.n	8006f66 <_scanf_float+0x92>
 8006fae:	290e      	cmp	r1, #14
 8006fb0:	d8c2      	bhi.n	8006f38 <_scanf_float+0x64>
 8006fb2:	a001      	add	r0, pc, #4	@ (adr r0, 8006fb8 <_scanf_float+0xe4>)
 8006fb4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006fb8:	0800706d 	.word	0x0800706d
 8006fbc:	08006f39 	.word	0x08006f39
 8006fc0:	0800706d 	.word	0x0800706d
 8006fc4:	08007103 	.word	0x08007103
 8006fc8:	08006f39 	.word	0x08006f39
 8006fcc:	08007015 	.word	0x08007015
 8006fd0:	08007053 	.word	0x08007053
 8006fd4:	08007053 	.word	0x08007053
 8006fd8:	08007053 	.word	0x08007053
 8006fdc:	08007053 	.word	0x08007053
 8006fe0:	08007053 	.word	0x08007053
 8006fe4:	08007053 	.word	0x08007053
 8006fe8:	08007053 	.word	0x08007053
 8006fec:	08007053 	.word	0x08007053
 8006ff0:	08007053 	.word	0x08007053
 8006ff4:	2b6e      	cmp	r3, #110	@ 0x6e
 8006ff6:	d809      	bhi.n	800700c <_scanf_float+0x138>
 8006ff8:	2b60      	cmp	r3, #96	@ 0x60
 8006ffa:	d8b2      	bhi.n	8006f62 <_scanf_float+0x8e>
 8006ffc:	2b54      	cmp	r3, #84	@ 0x54
 8006ffe:	d07b      	beq.n	80070f8 <_scanf_float+0x224>
 8007000:	2b59      	cmp	r3, #89	@ 0x59
 8007002:	d199      	bne.n	8006f38 <_scanf_float+0x64>
 8007004:	2d07      	cmp	r5, #7
 8007006:	d197      	bne.n	8006f38 <_scanf_float+0x64>
 8007008:	2508      	movs	r5, #8
 800700a:	e02c      	b.n	8007066 <_scanf_float+0x192>
 800700c:	2b74      	cmp	r3, #116	@ 0x74
 800700e:	d073      	beq.n	80070f8 <_scanf_float+0x224>
 8007010:	2b79      	cmp	r3, #121	@ 0x79
 8007012:	e7f6      	b.n	8007002 <_scanf_float+0x12e>
 8007014:	6821      	ldr	r1, [r4, #0]
 8007016:	05c8      	lsls	r0, r1, #23
 8007018:	d51b      	bpl.n	8007052 <_scanf_float+0x17e>
 800701a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800701e:	6021      	str	r1, [r4, #0]
 8007020:	f109 0901 	add.w	r9, r9, #1
 8007024:	f1bb 0f00 	cmp.w	fp, #0
 8007028:	d003      	beq.n	8007032 <_scanf_float+0x15e>
 800702a:	3201      	adds	r2, #1
 800702c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007030:	60a2      	str	r2, [r4, #8]
 8007032:	68a3      	ldr	r3, [r4, #8]
 8007034:	3b01      	subs	r3, #1
 8007036:	60a3      	str	r3, [r4, #8]
 8007038:	6923      	ldr	r3, [r4, #16]
 800703a:	3301      	adds	r3, #1
 800703c:	6123      	str	r3, [r4, #16]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	3b01      	subs	r3, #1
 8007042:	2b00      	cmp	r3, #0
 8007044:	607b      	str	r3, [r7, #4]
 8007046:	f340 8087 	ble.w	8007158 <_scanf_float+0x284>
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	3301      	adds	r3, #1
 800704e:	603b      	str	r3, [r7, #0]
 8007050:	e765      	b.n	8006f1e <_scanf_float+0x4a>
 8007052:	eb1a 0105 	adds.w	r1, sl, r5
 8007056:	f47f af6f 	bne.w	8006f38 <_scanf_float+0x64>
 800705a:	6822      	ldr	r2, [r4, #0]
 800705c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007060:	6022      	str	r2, [r4, #0]
 8007062:	460d      	mov	r5, r1
 8007064:	468a      	mov	sl, r1
 8007066:	f806 3b01 	strb.w	r3, [r6], #1
 800706a:	e7e2      	b.n	8007032 <_scanf_float+0x15e>
 800706c:	6822      	ldr	r2, [r4, #0]
 800706e:	0610      	lsls	r0, r2, #24
 8007070:	f57f af62 	bpl.w	8006f38 <_scanf_float+0x64>
 8007074:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007078:	6022      	str	r2, [r4, #0]
 800707a:	e7f4      	b.n	8007066 <_scanf_float+0x192>
 800707c:	f1ba 0f00 	cmp.w	sl, #0
 8007080:	d10e      	bne.n	80070a0 <_scanf_float+0x1cc>
 8007082:	f1b9 0f00 	cmp.w	r9, #0
 8007086:	d10e      	bne.n	80070a6 <_scanf_float+0x1d2>
 8007088:	6822      	ldr	r2, [r4, #0]
 800708a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800708e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007092:	d108      	bne.n	80070a6 <_scanf_float+0x1d2>
 8007094:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007098:	6022      	str	r2, [r4, #0]
 800709a:	f04f 0a01 	mov.w	sl, #1
 800709e:	e7e2      	b.n	8007066 <_scanf_float+0x192>
 80070a0:	f1ba 0f02 	cmp.w	sl, #2
 80070a4:	d055      	beq.n	8007152 <_scanf_float+0x27e>
 80070a6:	2d01      	cmp	r5, #1
 80070a8:	d002      	beq.n	80070b0 <_scanf_float+0x1dc>
 80070aa:	2d04      	cmp	r5, #4
 80070ac:	f47f af44 	bne.w	8006f38 <_scanf_float+0x64>
 80070b0:	3501      	adds	r5, #1
 80070b2:	b2ed      	uxtb	r5, r5
 80070b4:	e7d7      	b.n	8007066 <_scanf_float+0x192>
 80070b6:	f1ba 0f01 	cmp.w	sl, #1
 80070ba:	f47f af3d 	bne.w	8006f38 <_scanf_float+0x64>
 80070be:	f04f 0a02 	mov.w	sl, #2
 80070c2:	e7d0      	b.n	8007066 <_scanf_float+0x192>
 80070c4:	b97d      	cbnz	r5, 80070e6 <_scanf_float+0x212>
 80070c6:	f1b9 0f00 	cmp.w	r9, #0
 80070ca:	f47f af38 	bne.w	8006f3e <_scanf_float+0x6a>
 80070ce:	6822      	ldr	r2, [r4, #0]
 80070d0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80070d4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80070d8:	f040 8108 	bne.w	80072ec <_scanf_float+0x418>
 80070dc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80070e0:	6022      	str	r2, [r4, #0]
 80070e2:	2501      	movs	r5, #1
 80070e4:	e7bf      	b.n	8007066 <_scanf_float+0x192>
 80070e6:	2d03      	cmp	r5, #3
 80070e8:	d0e2      	beq.n	80070b0 <_scanf_float+0x1dc>
 80070ea:	2d05      	cmp	r5, #5
 80070ec:	e7de      	b.n	80070ac <_scanf_float+0x1d8>
 80070ee:	2d02      	cmp	r5, #2
 80070f0:	f47f af22 	bne.w	8006f38 <_scanf_float+0x64>
 80070f4:	2503      	movs	r5, #3
 80070f6:	e7b6      	b.n	8007066 <_scanf_float+0x192>
 80070f8:	2d06      	cmp	r5, #6
 80070fa:	f47f af1d 	bne.w	8006f38 <_scanf_float+0x64>
 80070fe:	2507      	movs	r5, #7
 8007100:	e7b1      	b.n	8007066 <_scanf_float+0x192>
 8007102:	6822      	ldr	r2, [r4, #0]
 8007104:	0591      	lsls	r1, r2, #22
 8007106:	f57f af17 	bpl.w	8006f38 <_scanf_float+0x64>
 800710a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800710e:	6022      	str	r2, [r4, #0]
 8007110:	f8cd 9008 	str.w	r9, [sp, #8]
 8007114:	e7a7      	b.n	8007066 <_scanf_float+0x192>
 8007116:	6822      	ldr	r2, [r4, #0]
 8007118:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800711c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007120:	d006      	beq.n	8007130 <_scanf_float+0x25c>
 8007122:	0550      	lsls	r0, r2, #21
 8007124:	f57f af08 	bpl.w	8006f38 <_scanf_float+0x64>
 8007128:	f1b9 0f00 	cmp.w	r9, #0
 800712c:	f000 80de 	beq.w	80072ec <_scanf_float+0x418>
 8007130:	0591      	lsls	r1, r2, #22
 8007132:	bf58      	it	pl
 8007134:	9902      	ldrpl	r1, [sp, #8]
 8007136:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800713a:	bf58      	it	pl
 800713c:	eba9 0101 	subpl.w	r1, r9, r1
 8007140:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007144:	bf58      	it	pl
 8007146:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800714a:	6022      	str	r2, [r4, #0]
 800714c:	f04f 0900 	mov.w	r9, #0
 8007150:	e789      	b.n	8007066 <_scanf_float+0x192>
 8007152:	f04f 0a03 	mov.w	sl, #3
 8007156:	e786      	b.n	8007066 <_scanf_float+0x192>
 8007158:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800715c:	4639      	mov	r1, r7
 800715e:	4640      	mov	r0, r8
 8007160:	4798      	blx	r3
 8007162:	2800      	cmp	r0, #0
 8007164:	f43f aedb 	beq.w	8006f1e <_scanf_float+0x4a>
 8007168:	e6e6      	b.n	8006f38 <_scanf_float+0x64>
 800716a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800716e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007172:	463a      	mov	r2, r7
 8007174:	4640      	mov	r0, r8
 8007176:	4798      	blx	r3
 8007178:	6923      	ldr	r3, [r4, #16]
 800717a:	3b01      	subs	r3, #1
 800717c:	6123      	str	r3, [r4, #16]
 800717e:	e6e8      	b.n	8006f52 <_scanf_float+0x7e>
 8007180:	1e6b      	subs	r3, r5, #1
 8007182:	2b06      	cmp	r3, #6
 8007184:	d824      	bhi.n	80071d0 <_scanf_float+0x2fc>
 8007186:	2d02      	cmp	r5, #2
 8007188:	d836      	bhi.n	80071f8 <_scanf_float+0x324>
 800718a:	9b01      	ldr	r3, [sp, #4]
 800718c:	429e      	cmp	r6, r3
 800718e:	f67f aee4 	bls.w	8006f5a <_scanf_float+0x86>
 8007192:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007196:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800719a:	463a      	mov	r2, r7
 800719c:	4640      	mov	r0, r8
 800719e:	4798      	blx	r3
 80071a0:	6923      	ldr	r3, [r4, #16]
 80071a2:	3b01      	subs	r3, #1
 80071a4:	6123      	str	r3, [r4, #16]
 80071a6:	e7f0      	b.n	800718a <_scanf_float+0x2b6>
 80071a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80071ac:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80071b0:	463a      	mov	r2, r7
 80071b2:	4640      	mov	r0, r8
 80071b4:	4798      	blx	r3
 80071b6:	6923      	ldr	r3, [r4, #16]
 80071b8:	3b01      	subs	r3, #1
 80071ba:	6123      	str	r3, [r4, #16]
 80071bc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80071c0:	fa5f fa8a 	uxtb.w	sl, sl
 80071c4:	f1ba 0f02 	cmp.w	sl, #2
 80071c8:	d1ee      	bne.n	80071a8 <_scanf_float+0x2d4>
 80071ca:	3d03      	subs	r5, #3
 80071cc:	b2ed      	uxtb	r5, r5
 80071ce:	1b76      	subs	r6, r6, r5
 80071d0:	6823      	ldr	r3, [r4, #0]
 80071d2:	05da      	lsls	r2, r3, #23
 80071d4:	d530      	bpl.n	8007238 <_scanf_float+0x364>
 80071d6:	055b      	lsls	r3, r3, #21
 80071d8:	d511      	bpl.n	80071fe <_scanf_float+0x32a>
 80071da:	9b01      	ldr	r3, [sp, #4]
 80071dc:	429e      	cmp	r6, r3
 80071de:	f67f aebc 	bls.w	8006f5a <_scanf_float+0x86>
 80071e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80071e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80071ea:	463a      	mov	r2, r7
 80071ec:	4640      	mov	r0, r8
 80071ee:	4798      	blx	r3
 80071f0:	6923      	ldr	r3, [r4, #16]
 80071f2:	3b01      	subs	r3, #1
 80071f4:	6123      	str	r3, [r4, #16]
 80071f6:	e7f0      	b.n	80071da <_scanf_float+0x306>
 80071f8:	46aa      	mov	sl, r5
 80071fa:	46b3      	mov	fp, r6
 80071fc:	e7de      	b.n	80071bc <_scanf_float+0x2e8>
 80071fe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007202:	6923      	ldr	r3, [r4, #16]
 8007204:	2965      	cmp	r1, #101	@ 0x65
 8007206:	f103 33ff 	add.w	r3, r3, #4294967295
 800720a:	f106 35ff 	add.w	r5, r6, #4294967295
 800720e:	6123      	str	r3, [r4, #16]
 8007210:	d00c      	beq.n	800722c <_scanf_float+0x358>
 8007212:	2945      	cmp	r1, #69	@ 0x45
 8007214:	d00a      	beq.n	800722c <_scanf_float+0x358>
 8007216:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800721a:	463a      	mov	r2, r7
 800721c:	4640      	mov	r0, r8
 800721e:	4798      	blx	r3
 8007220:	6923      	ldr	r3, [r4, #16]
 8007222:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007226:	3b01      	subs	r3, #1
 8007228:	1eb5      	subs	r5, r6, #2
 800722a:	6123      	str	r3, [r4, #16]
 800722c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007230:	463a      	mov	r2, r7
 8007232:	4640      	mov	r0, r8
 8007234:	4798      	blx	r3
 8007236:	462e      	mov	r6, r5
 8007238:	6822      	ldr	r2, [r4, #0]
 800723a:	f012 0210 	ands.w	r2, r2, #16
 800723e:	d001      	beq.n	8007244 <_scanf_float+0x370>
 8007240:	2000      	movs	r0, #0
 8007242:	e68b      	b.n	8006f5c <_scanf_float+0x88>
 8007244:	7032      	strb	r2, [r6, #0]
 8007246:	6823      	ldr	r3, [r4, #0]
 8007248:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800724c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007250:	d11c      	bne.n	800728c <_scanf_float+0x3b8>
 8007252:	9b02      	ldr	r3, [sp, #8]
 8007254:	454b      	cmp	r3, r9
 8007256:	eba3 0209 	sub.w	r2, r3, r9
 800725a:	d123      	bne.n	80072a4 <_scanf_float+0x3d0>
 800725c:	9901      	ldr	r1, [sp, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	4640      	mov	r0, r8
 8007262:	f002 fc39 	bl	8009ad8 <_strtod_r>
 8007266:	9b03      	ldr	r3, [sp, #12]
 8007268:	6821      	ldr	r1, [r4, #0]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f011 0f02 	tst.w	r1, #2
 8007270:	ec57 6b10 	vmov	r6, r7, d0
 8007274:	f103 0204 	add.w	r2, r3, #4
 8007278:	d01f      	beq.n	80072ba <_scanf_float+0x3e6>
 800727a:	9903      	ldr	r1, [sp, #12]
 800727c:	600a      	str	r2, [r1, #0]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	e9c3 6700 	strd	r6, r7, [r3]
 8007284:	68e3      	ldr	r3, [r4, #12]
 8007286:	3301      	adds	r3, #1
 8007288:	60e3      	str	r3, [r4, #12]
 800728a:	e7d9      	b.n	8007240 <_scanf_float+0x36c>
 800728c:	9b04      	ldr	r3, [sp, #16]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d0e4      	beq.n	800725c <_scanf_float+0x388>
 8007292:	9905      	ldr	r1, [sp, #20]
 8007294:	230a      	movs	r3, #10
 8007296:	3101      	adds	r1, #1
 8007298:	4640      	mov	r0, r8
 800729a:	f002 fc9d 	bl	8009bd8 <_strtol_r>
 800729e:	9b04      	ldr	r3, [sp, #16]
 80072a0:	9e05      	ldr	r6, [sp, #20]
 80072a2:	1ac2      	subs	r2, r0, r3
 80072a4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80072a8:	429e      	cmp	r6, r3
 80072aa:	bf28      	it	cs
 80072ac:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80072b0:	4910      	ldr	r1, [pc, #64]	@ (80072f4 <_scanf_float+0x420>)
 80072b2:	4630      	mov	r0, r6
 80072b4:	f000 f918 	bl	80074e8 <siprintf>
 80072b8:	e7d0      	b.n	800725c <_scanf_float+0x388>
 80072ba:	f011 0f04 	tst.w	r1, #4
 80072be:	9903      	ldr	r1, [sp, #12]
 80072c0:	600a      	str	r2, [r1, #0]
 80072c2:	d1dc      	bne.n	800727e <_scanf_float+0x3aa>
 80072c4:	681d      	ldr	r5, [r3, #0]
 80072c6:	4632      	mov	r2, r6
 80072c8:	463b      	mov	r3, r7
 80072ca:	4630      	mov	r0, r6
 80072cc:	4639      	mov	r1, r7
 80072ce:	f7f9 fc2d 	bl	8000b2c <__aeabi_dcmpun>
 80072d2:	b128      	cbz	r0, 80072e0 <_scanf_float+0x40c>
 80072d4:	4808      	ldr	r0, [pc, #32]	@ (80072f8 <_scanf_float+0x424>)
 80072d6:	f000 f9f9 	bl	80076cc <nanf>
 80072da:	ed85 0a00 	vstr	s0, [r5]
 80072de:	e7d1      	b.n	8007284 <_scanf_float+0x3b0>
 80072e0:	4630      	mov	r0, r6
 80072e2:	4639      	mov	r1, r7
 80072e4:	f7f9 fc80 	bl	8000be8 <__aeabi_d2f>
 80072e8:	6028      	str	r0, [r5, #0]
 80072ea:	e7cb      	b.n	8007284 <_scanf_float+0x3b0>
 80072ec:	f04f 0900 	mov.w	r9, #0
 80072f0:	e629      	b.n	8006f46 <_scanf_float+0x72>
 80072f2:	bf00      	nop
 80072f4:	0800b0b4 	.word	0x0800b0b4
 80072f8:	0800b44d 	.word	0x0800b44d

080072fc <std>:
 80072fc:	2300      	movs	r3, #0
 80072fe:	b510      	push	{r4, lr}
 8007300:	4604      	mov	r4, r0
 8007302:	e9c0 3300 	strd	r3, r3, [r0]
 8007306:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800730a:	6083      	str	r3, [r0, #8]
 800730c:	8181      	strh	r1, [r0, #12]
 800730e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007310:	81c2      	strh	r2, [r0, #14]
 8007312:	6183      	str	r3, [r0, #24]
 8007314:	4619      	mov	r1, r3
 8007316:	2208      	movs	r2, #8
 8007318:	305c      	adds	r0, #92	@ 0x5c
 800731a:	f000 f948 	bl	80075ae <memset>
 800731e:	4b0d      	ldr	r3, [pc, #52]	@ (8007354 <std+0x58>)
 8007320:	6263      	str	r3, [r4, #36]	@ 0x24
 8007322:	4b0d      	ldr	r3, [pc, #52]	@ (8007358 <std+0x5c>)
 8007324:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007326:	4b0d      	ldr	r3, [pc, #52]	@ (800735c <std+0x60>)
 8007328:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800732a:	4b0d      	ldr	r3, [pc, #52]	@ (8007360 <std+0x64>)
 800732c:	6323      	str	r3, [r4, #48]	@ 0x30
 800732e:	4b0d      	ldr	r3, [pc, #52]	@ (8007364 <std+0x68>)
 8007330:	6224      	str	r4, [r4, #32]
 8007332:	429c      	cmp	r4, r3
 8007334:	d006      	beq.n	8007344 <std+0x48>
 8007336:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800733a:	4294      	cmp	r4, r2
 800733c:	d002      	beq.n	8007344 <std+0x48>
 800733e:	33d0      	adds	r3, #208	@ 0xd0
 8007340:	429c      	cmp	r4, r3
 8007342:	d105      	bne.n	8007350 <std+0x54>
 8007344:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800734c:	f000 b9ac 	b.w	80076a8 <__retarget_lock_init_recursive>
 8007350:	bd10      	pop	{r4, pc}
 8007352:	bf00      	nop
 8007354:	08007529 	.word	0x08007529
 8007358:	0800754b 	.word	0x0800754b
 800735c:	08007583 	.word	0x08007583
 8007360:	080075a7 	.word	0x080075a7
 8007364:	200044a8 	.word	0x200044a8

08007368 <stdio_exit_handler>:
 8007368:	4a02      	ldr	r2, [pc, #8]	@ (8007374 <stdio_exit_handler+0xc>)
 800736a:	4903      	ldr	r1, [pc, #12]	@ (8007378 <stdio_exit_handler+0x10>)
 800736c:	4803      	ldr	r0, [pc, #12]	@ (800737c <stdio_exit_handler+0x14>)
 800736e:	f000 b869 	b.w	8007444 <_fwalk_sglue>
 8007372:	bf00      	nop
 8007374:	20000010 	.word	0x20000010
 8007378:	08009f95 	.word	0x08009f95
 800737c:	20000020 	.word	0x20000020

08007380 <cleanup_stdio>:
 8007380:	6841      	ldr	r1, [r0, #4]
 8007382:	4b0c      	ldr	r3, [pc, #48]	@ (80073b4 <cleanup_stdio+0x34>)
 8007384:	4299      	cmp	r1, r3
 8007386:	b510      	push	{r4, lr}
 8007388:	4604      	mov	r4, r0
 800738a:	d001      	beq.n	8007390 <cleanup_stdio+0x10>
 800738c:	f002 fe02 	bl	8009f94 <_fflush_r>
 8007390:	68a1      	ldr	r1, [r4, #8]
 8007392:	4b09      	ldr	r3, [pc, #36]	@ (80073b8 <cleanup_stdio+0x38>)
 8007394:	4299      	cmp	r1, r3
 8007396:	d002      	beq.n	800739e <cleanup_stdio+0x1e>
 8007398:	4620      	mov	r0, r4
 800739a:	f002 fdfb 	bl	8009f94 <_fflush_r>
 800739e:	68e1      	ldr	r1, [r4, #12]
 80073a0:	4b06      	ldr	r3, [pc, #24]	@ (80073bc <cleanup_stdio+0x3c>)
 80073a2:	4299      	cmp	r1, r3
 80073a4:	d004      	beq.n	80073b0 <cleanup_stdio+0x30>
 80073a6:	4620      	mov	r0, r4
 80073a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073ac:	f002 bdf2 	b.w	8009f94 <_fflush_r>
 80073b0:	bd10      	pop	{r4, pc}
 80073b2:	bf00      	nop
 80073b4:	200044a8 	.word	0x200044a8
 80073b8:	20004510 	.word	0x20004510
 80073bc:	20004578 	.word	0x20004578

080073c0 <global_stdio_init.part.0>:
 80073c0:	b510      	push	{r4, lr}
 80073c2:	4b0b      	ldr	r3, [pc, #44]	@ (80073f0 <global_stdio_init.part.0+0x30>)
 80073c4:	4c0b      	ldr	r4, [pc, #44]	@ (80073f4 <global_stdio_init.part.0+0x34>)
 80073c6:	4a0c      	ldr	r2, [pc, #48]	@ (80073f8 <global_stdio_init.part.0+0x38>)
 80073c8:	601a      	str	r2, [r3, #0]
 80073ca:	4620      	mov	r0, r4
 80073cc:	2200      	movs	r2, #0
 80073ce:	2104      	movs	r1, #4
 80073d0:	f7ff ff94 	bl	80072fc <std>
 80073d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80073d8:	2201      	movs	r2, #1
 80073da:	2109      	movs	r1, #9
 80073dc:	f7ff ff8e 	bl	80072fc <std>
 80073e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80073e4:	2202      	movs	r2, #2
 80073e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073ea:	2112      	movs	r1, #18
 80073ec:	f7ff bf86 	b.w	80072fc <std>
 80073f0:	200045e0 	.word	0x200045e0
 80073f4:	200044a8 	.word	0x200044a8
 80073f8:	08007369 	.word	0x08007369

080073fc <__sfp_lock_acquire>:
 80073fc:	4801      	ldr	r0, [pc, #4]	@ (8007404 <__sfp_lock_acquire+0x8>)
 80073fe:	f000 b954 	b.w	80076aa <__retarget_lock_acquire_recursive>
 8007402:	bf00      	nop
 8007404:	200045e9 	.word	0x200045e9

08007408 <__sfp_lock_release>:
 8007408:	4801      	ldr	r0, [pc, #4]	@ (8007410 <__sfp_lock_release+0x8>)
 800740a:	f000 b94f 	b.w	80076ac <__retarget_lock_release_recursive>
 800740e:	bf00      	nop
 8007410:	200045e9 	.word	0x200045e9

08007414 <__sinit>:
 8007414:	b510      	push	{r4, lr}
 8007416:	4604      	mov	r4, r0
 8007418:	f7ff fff0 	bl	80073fc <__sfp_lock_acquire>
 800741c:	6a23      	ldr	r3, [r4, #32]
 800741e:	b11b      	cbz	r3, 8007428 <__sinit+0x14>
 8007420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007424:	f7ff bff0 	b.w	8007408 <__sfp_lock_release>
 8007428:	4b04      	ldr	r3, [pc, #16]	@ (800743c <__sinit+0x28>)
 800742a:	6223      	str	r3, [r4, #32]
 800742c:	4b04      	ldr	r3, [pc, #16]	@ (8007440 <__sinit+0x2c>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d1f5      	bne.n	8007420 <__sinit+0xc>
 8007434:	f7ff ffc4 	bl	80073c0 <global_stdio_init.part.0>
 8007438:	e7f2      	b.n	8007420 <__sinit+0xc>
 800743a:	bf00      	nop
 800743c:	08007381 	.word	0x08007381
 8007440:	200045e0 	.word	0x200045e0

08007444 <_fwalk_sglue>:
 8007444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007448:	4607      	mov	r7, r0
 800744a:	4688      	mov	r8, r1
 800744c:	4614      	mov	r4, r2
 800744e:	2600      	movs	r6, #0
 8007450:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007454:	f1b9 0901 	subs.w	r9, r9, #1
 8007458:	d505      	bpl.n	8007466 <_fwalk_sglue+0x22>
 800745a:	6824      	ldr	r4, [r4, #0]
 800745c:	2c00      	cmp	r4, #0
 800745e:	d1f7      	bne.n	8007450 <_fwalk_sglue+0xc>
 8007460:	4630      	mov	r0, r6
 8007462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007466:	89ab      	ldrh	r3, [r5, #12]
 8007468:	2b01      	cmp	r3, #1
 800746a:	d907      	bls.n	800747c <_fwalk_sglue+0x38>
 800746c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007470:	3301      	adds	r3, #1
 8007472:	d003      	beq.n	800747c <_fwalk_sglue+0x38>
 8007474:	4629      	mov	r1, r5
 8007476:	4638      	mov	r0, r7
 8007478:	47c0      	blx	r8
 800747a:	4306      	orrs	r6, r0
 800747c:	3568      	adds	r5, #104	@ 0x68
 800747e:	e7e9      	b.n	8007454 <_fwalk_sglue+0x10>

08007480 <sniprintf>:
 8007480:	b40c      	push	{r2, r3}
 8007482:	b530      	push	{r4, r5, lr}
 8007484:	4b17      	ldr	r3, [pc, #92]	@ (80074e4 <sniprintf+0x64>)
 8007486:	1e0c      	subs	r4, r1, #0
 8007488:	681d      	ldr	r5, [r3, #0]
 800748a:	b09d      	sub	sp, #116	@ 0x74
 800748c:	da08      	bge.n	80074a0 <sniprintf+0x20>
 800748e:	238b      	movs	r3, #139	@ 0x8b
 8007490:	602b      	str	r3, [r5, #0]
 8007492:	f04f 30ff 	mov.w	r0, #4294967295
 8007496:	b01d      	add	sp, #116	@ 0x74
 8007498:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800749c:	b002      	add	sp, #8
 800749e:	4770      	bx	lr
 80074a0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80074a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80074a8:	bf14      	ite	ne
 80074aa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80074ae:	4623      	moveq	r3, r4
 80074b0:	9304      	str	r3, [sp, #16]
 80074b2:	9307      	str	r3, [sp, #28]
 80074b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80074b8:	9002      	str	r0, [sp, #8]
 80074ba:	9006      	str	r0, [sp, #24]
 80074bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80074c0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80074c2:	ab21      	add	r3, sp, #132	@ 0x84
 80074c4:	a902      	add	r1, sp, #8
 80074c6:	4628      	mov	r0, r5
 80074c8:	9301      	str	r3, [sp, #4]
 80074ca:	f002 fbe3 	bl	8009c94 <_svfiprintf_r>
 80074ce:	1c43      	adds	r3, r0, #1
 80074d0:	bfbc      	itt	lt
 80074d2:	238b      	movlt	r3, #139	@ 0x8b
 80074d4:	602b      	strlt	r3, [r5, #0]
 80074d6:	2c00      	cmp	r4, #0
 80074d8:	d0dd      	beq.n	8007496 <sniprintf+0x16>
 80074da:	9b02      	ldr	r3, [sp, #8]
 80074dc:	2200      	movs	r2, #0
 80074de:	701a      	strb	r2, [r3, #0]
 80074e0:	e7d9      	b.n	8007496 <sniprintf+0x16>
 80074e2:	bf00      	nop
 80074e4:	2000001c 	.word	0x2000001c

080074e8 <siprintf>:
 80074e8:	b40e      	push	{r1, r2, r3}
 80074ea:	b500      	push	{lr}
 80074ec:	b09c      	sub	sp, #112	@ 0x70
 80074ee:	ab1d      	add	r3, sp, #116	@ 0x74
 80074f0:	9002      	str	r0, [sp, #8]
 80074f2:	9006      	str	r0, [sp, #24]
 80074f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80074f8:	4809      	ldr	r0, [pc, #36]	@ (8007520 <siprintf+0x38>)
 80074fa:	9107      	str	r1, [sp, #28]
 80074fc:	9104      	str	r1, [sp, #16]
 80074fe:	4909      	ldr	r1, [pc, #36]	@ (8007524 <siprintf+0x3c>)
 8007500:	f853 2b04 	ldr.w	r2, [r3], #4
 8007504:	9105      	str	r1, [sp, #20]
 8007506:	6800      	ldr	r0, [r0, #0]
 8007508:	9301      	str	r3, [sp, #4]
 800750a:	a902      	add	r1, sp, #8
 800750c:	f002 fbc2 	bl	8009c94 <_svfiprintf_r>
 8007510:	9b02      	ldr	r3, [sp, #8]
 8007512:	2200      	movs	r2, #0
 8007514:	701a      	strb	r2, [r3, #0]
 8007516:	b01c      	add	sp, #112	@ 0x70
 8007518:	f85d eb04 	ldr.w	lr, [sp], #4
 800751c:	b003      	add	sp, #12
 800751e:	4770      	bx	lr
 8007520:	2000001c 	.word	0x2000001c
 8007524:	ffff0208 	.word	0xffff0208

08007528 <__sread>:
 8007528:	b510      	push	{r4, lr}
 800752a:	460c      	mov	r4, r1
 800752c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007530:	f000 f86c 	bl	800760c <_read_r>
 8007534:	2800      	cmp	r0, #0
 8007536:	bfab      	itete	ge
 8007538:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800753a:	89a3      	ldrhlt	r3, [r4, #12]
 800753c:	181b      	addge	r3, r3, r0
 800753e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007542:	bfac      	ite	ge
 8007544:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007546:	81a3      	strhlt	r3, [r4, #12]
 8007548:	bd10      	pop	{r4, pc}

0800754a <__swrite>:
 800754a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800754e:	461f      	mov	r7, r3
 8007550:	898b      	ldrh	r3, [r1, #12]
 8007552:	05db      	lsls	r3, r3, #23
 8007554:	4605      	mov	r5, r0
 8007556:	460c      	mov	r4, r1
 8007558:	4616      	mov	r6, r2
 800755a:	d505      	bpl.n	8007568 <__swrite+0x1e>
 800755c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007560:	2302      	movs	r3, #2
 8007562:	2200      	movs	r2, #0
 8007564:	f000 f840 	bl	80075e8 <_lseek_r>
 8007568:	89a3      	ldrh	r3, [r4, #12]
 800756a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800756e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007572:	81a3      	strh	r3, [r4, #12]
 8007574:	4632      	mov	r2, r6
 8007576:	463b      	mov	r3, r7
 8007578:	4628      	mov	r0, r5
 800757a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800757e:	f000 b857 	b.w	8007630 <_write_r>

08007582 <__sseek>:
 8007582:	b510      	push	{r4, lr}
 8007584:	460c      	mov	r4, r1
 8007586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800758a:	f000 f82d 	bl	80075e8 <_lseek_r>
 800758e:	1c43      	adds	r3, r0, #1
 8007590:	89a3      	ldrh	r3, [r4, #12]
 8007592:	bf15      	itete	ne
 8007594:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007596:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800759a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800759e:	81a3      	strheq	r3, [r4, #12]
 80075a0:	bf18      	it	ne
 80075a2:	81a3      	strhne	r3, [r4, #12]
 80075a4:	bd10      	pop	{r4, pc}

080075a6 <__sclose>:
 80075a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075aa:	f000 b80d 	b.w	80075c8 <_close_r>

080075ae <memset>:
 80075ae:	4402      	add	r2, r0
 80075b0:	4603      	mov	r3, r0
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d100      	bne.n	80075b8 <memset+0xa>
 80075b6:	4770      	bx	lr
 80075b8:	f803 1b01 	strb.w	r1, [r3], #1
 80075bc:	e7f9      	b.n	80075b2 <memset+0x4>
	...

080075c0 <_localeconv_r>:
 80075c0:	4800      	ldr	r0, [pc, #0]	@ (80075c4 <_localeconv_r+0x4>)
 80075c2:	4770      	bx	lr
 80075c4:	2000015c 	.word	0x2000015c

080075c8 <_close_r>:
 80075c8:	b538      	push	{r3, r4, r5, lr}
 80075ca:	4d06      	ldr	r5, [pc, #24]	@ (80075e4 <_close_r+0x1c>)
 80075cc:	2300      	movs	r3, #0
 80075ce:	4604      	mov	r4, r0
 80075d0:	4608      	mov	r0, r1
 80075d2:	602b      	str	r3, [r5, #0]
 80075d4:	f7fa fdc8 	bl	8002168 <_close>
 80075d8:	1c43      	adds	r3, r0, #1
 80075da:	d102      	bne.n	80075e2 <_close_r+0x1a>
 80075dc:	682b      	ldr	r3, [r5, #0]
 80075de:	b103      	cbz	r3, 80075e2 <_close_r+0x1a>
 80075e0:	6023      	str	r3, [r4, #0]
 80075e2:	bd38      	pop	{r3, r4, r5, pc}
 80075e4:	200045e4 	.word	0x200045e4

080075e8 <_lseek_r>:
 80075e8:	b538      	push	{r3, r4, r5, lr}
 80075ea:	4d07      	ldr	r5, [pc, #28]	@ (8007608 <_lseek_r+0x20>)
 80075ec:	4604      	mov	r4, r0
 80075ee:	4608      	mov	r0, r1
 80075f0:	4611      	mov	r1, r2
 80075f2:	2200      	movs	r2, #0
 80075f4:	602a      	str	r2, [r5, #0]
 80075f6:	461a      	mov	r2, r3
 80075f8:	f7fa fddd 	bl	80021b6 <_lseek>
 80075fc:	1c43      	adds	r3, r0, #1
 80075fe:	d102      	bne.n	8007606 <_lseek_r+0x1e>
 8007600:	682b      	ldr	r3, [r5, #0]
 8007602:	b103      	cbz	r3, 8007606 <_lseek_r+0x1e>
 8007604:	6023      	str	r3, [r4, #0]
 8007606:	bd38      	pop	{r3, r4, r5, pc}
 8007608:	200045e4 	.word	0x200045e4

0800760c <_read_r>:
 800760c:	b538      	push	{r3, r4, r5, lr}
 800760e:	4d07      	ldr	r5, [pc, #28]	@ (800762c <_read_r+0x20>)
 8007610:	4604      	mov	r4, r0
 8007612:	4608      	mov	r0, r1
 8007614:	4611      	mov	r1, r2
 8007616:	2200      	movs	r2, #0
 8007618:	602a      	str	r2, [r5, #0]
 800761a:	461a      	mov	r2, r3
 800761c:	f7fa fd6b 	bl	80020f6 <_read>
 8007620:	1c43      	adds	r3, r0, #1
 8007622:	d102      	bne.n	800762a <_read_r+0x1e>
 8007624:	682b      	ldr	r3, [r5, #0]
 8007626:	b103      	cbz	r3, 800762a <_read_r+0x1e>
 8007628:	6023      	str	r3, [r4, #0]
 800762a:	bd38      	pop	{r3, r4, r5, pc}
 800762c:	200045e4 	.word	0x200045e4

08007630 <_write_r>:
 8007630:	b538      	push	{r3, r4, r5, lr}
 8007632:	4d07      	ldr	r5, [pc, #28]	@ (8007650 <_write_r+0x20>)
 8007634:	4604      	mov	r4, r0
 8007636:	4608      	mov	r0, r1
 8007638:	4611      	mov	r1, r2
 800763a:	2200      	movs	r2, #0
 800763c:	602a      	str	r2, [r5, #0]
 800763e:	461a      	mov	r2, r3
 8007640:	f7fa fd76 	bl	8002130 <_write>
 8007644:	1c43      	adds	r3, r0, #1
 8007646:	d102      	bne.n	800764e <_write_r+0x1e>
 8007648:	682b      	ldr	r3, [r5, #0]
 800764a:	b103      	cbz	r3, 800764e <_write_r+0x1e>
 800764c:	6023      	str	r3, [r4, #0]
 800764e:	bd38      	pop	{r3, r4, r5, pc}
 8007650:	200045e4 	.word	0x200045e4

08007654 <__errno>:
 8007654:	4b01      	ldr	r3, [pc, #4]	@ (800765c <__errno+0x8>)
 8007656:	6818      	ldr	r0, [r3, #0]
 8007658:	4770      	bx	lr
 800765a:	bf00      	nop
 800765c:	2000001c 	.word	0x2000001c

08007660 <__libc_init_array>:
 8007660:	b570      	push	{r4, r5, r6, lr}
 8007662:	4d0d      	ldr	r5, [pc, #52]	@ (8007698 <__libc_init_array+0x38>)
 8007664:	4c0d      	ldr	r4, [pc, #52]	@ (800769c <__libc_init_array+0x3c>)
 8007666:	1b64      	subs	r4, r4, r5
 8007668:	10a4      	asrs	r4, r4, #2
 800766a:	2600      	movs	r6, #0
 800766c:	42a6      	cmp	r6, r4
 800766e:	d109      	bne.n	8007684 <__libc_init_array+0x24>
 8007670:	4d0b      	ldr	r5, [pc, #44]	@ (80076a0 <__libc_init_array+0x40>)
 8007672:	4c0c      	ldr	r4, [pc, #48]	@ (80076a4 <__libc_init_array+0x44>)
 8007674:	f003 fb72 	bl	800ad5c <_init>
 8007678:	1b64      	subs	r4, r4, r5
 800767a:	10a4      	asrs	r4, r4, #2
 800767c:	2600      	movs	r6, #0
 800767e:	42a6      	cmp	r6, r4
 8007680:	d105      	bne.n	800768e <__libc_init_array+0x2e>
 8007682:	bd70      	pop	{r4, r5, r6, pc}
 8007684:	f855 3b04 	ldr.w	r3, [r5], #4
 8007688:	4798      	blx	r3
 800768a:	3601      	adds	r6, #1
 800768c:	e7ee      	b.n	800766c <__libc_init_array+0xc>
 800768e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007692:	4798      	blx	r3
 8007694:	3601      	adds	r6, #1
 8007696:	e7f2      	b.n	800767e <__libc_init_array+0x1e>
 8007698:	0800b4b8 	.word	0x0800b4b8
 800769c:	0800b4b8 	.word	0x0800b4b8
 80076a0:	0800b4b8 	.word	0x0800b4b8
 80076a4:	0800b4bc 	.word	0x0800b4bc

080076a8 <__retarget_lock_init_recursive>:
 80076a8:	4770      	bx	lr

080076aa <__retarget_lock_acquire_recursive>:
 80076aa:	4770      	bx	lr

080076ac <__retarget_lock_release_recursive>:
 80076ac:	4770      	bx	lr

080076ae <memcpy>:
 80076ae:	440a      	add	r2, r1
 80076b0:	4291      	cmp	r1, r2
 80076b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80076b6:	d100      	bne.n	80076ba <memcpy+0xc>
 80076b8:	4770      	bx	lr
 80076ba:	b510      	push	{r4, lr}
 80076bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076c4:	4291      	cmp	r1, r2
 80076c6:	d1f9      	bne.n	80076bc <memcpy+0xe>
 80076c8:	bd10      	pop	{r4, pc}
	...

080076cc <nanf>:
 80076cc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80076d4 <nanf+0x8>
 80076d0:	4770      	bx	lr
 80076d2:	bf00      	nop
 80076d4:	7fc00000 	.word	0x7fc00000

080076d8 <quorem>:
 80076d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076dc:	6903      	ldr	r3, [r0, #16]
 80076de:	690c      	ldr	r4, [r1, #16]
 80076e0:	42a3      	cmp	r3, r4
 80076e2:	4607      	mov	r7, r0
 80076e4:	db7e      	blt.n	80077e4 <quorem+0x10c>
 80076e6:	3c01      	subs	r4, #1
 80076e8:	f101 0814 	add.w	r8, r1, #20
 80076ec:	00a3      	lsls	r3, r4, #2
 80076ee:	f100 0514 	add.w	r5, r0, #20
 80076f2:	9300      	str	r3, [sp, #0]
 80076f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076f8:	9301      	str	r3, [sp, #4]
 80076fa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80076fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007702:	3301      	adds	r3, #1
 8007704:	429a      	cmp	r2, r3
 8007706:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800770a:	fbb2 f6f3 	udiv	r6, r2, r3
 800770e:	d32e      	bcc.n	800776e <quorem+0x96>
 8007710:	f04f 0a00 	mov.w	sl, #0
 8007714:	46c4      	mov	ip, r8
 8007716:	46ae      	mov	lr, r5
 8007718:	46d3      	mov	fp, sl
 800771a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800771e:	b298      	uxth	r0, r3
 8007720:	fb06 a000 	mla	r0, r6, r0, sl
 8007724:	0c02      	lsrs	r2, r0, #16
 8007726:	0c1b      	lsrs	r3, r3, #16
 8007728:	fb06 2303 	mla	r3, r6, r3, r2
 800772c:	f8de 2000 	ldr.w	r2, [lr]
 8007730:	b280      	uxth	r0, r0
 8007732:	b292      	uxth	r2, r2
 8007734:	1a12      	subs	r2, r2, r0
 8007736:	445a      	add	r2, fp
 8007738:	f8de 0000 	ldr.w	r0, [lr]
 800773c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007740:	b29b      	uxth	r3, r3
 8007742:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007746:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800774a:	b292      	uxth	r2, r2
 800774c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007750:	45e1      	cmp	r9, ip
 8007752:	f84e 2b04 	str.w	r2, [lr], #4
 8007756:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800775a:	d2de      	bcs.n	800771a <quorem+0x42>
 800775c:	9b00      	ldr	r3, [sp, #0]
 800775e:	58eb      	ldr	r3, [r5, r3]
 8007760:	b92b      	cbnz	r3, 800776e <quorem+0x96>
 8007762:	9b01      	ldr	r3, [sp, #4]
 8007764:	3b04      	subs	r3, #4
 8007766:	429d      	cmp	r5, r3
 8007768:	461a      	mov	r2, r3
 800776a:	d32f      	bcc.n	80077cc <quorem+0xf4>
 800776c:	613c      	str	r4, [r7, #16]
 800776e:	4638      	mov	r0, r7
 8007770:	f001 f9c2 	bl	8008af8 <__mcmp>
 8007774:	2800      	cmp	r0, #0
 8007776:	db25      	blt.n	80077c4 <quorem+0xec>
 8007778:	4629      	mov	r1, r5
 800777a:	2000      	movs	r0, #0
 800777c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007780:	f8d1 c000 	ldr.w	ip, [r1]
 8007784:	fa1f fe82 	uxth.w	lr, r2
 8007788:	fa1f f38c 	uxth.w	r3, ip
 800778c:	eba3 030e 	sub.w	r3, r3, lr
 8007790:	4403      	add	r3, r0
 8007792:	0c12      	lsrs	r2, r2, #16
 8007794:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007798:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800779c:	b29b      	uxth	r3, r3
 800779e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077a2:	45c1      	cmp	r9, r8
 80077a4:	f841 3b04 	str.w	r3, [r1], #4
 80077a8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80077ac:	d2e6      	bcs.n	800777c <quorem+0xa4>
 80077ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80077b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80077b6:	b922      	cbnz	r2, 80077c2 <quorem+0xea>
 80077b8:	3b04      	subs	r3, #4
 80077ba:	429d      	cmp	r5, r3
 80077bc:	461a      	mov	r2, r3
 80077be:	d30b      	bcc.n	80077d8 <quorem+0x100>
 80077c0:	613c      	str	r4, [r7, #16]
 80077c2:	3601      	adds	r6, #1
 80077c4:	4630      	mov	r0, r6
 80077c6:	b003      	add	sp, #12
 80077c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077cc:	6812      	ldr	r2, [r2, #0]
 80077ce:	3b04      	subs	r3, #4
 80077d0:	2a00      	cmp	r2, #0
 80077d2:	d1cb      	bne.n	800776c <quorem+0x94>
 80077d4:	3c01      	subs	r4, #1
 80077d6:	e7c6      	b.n	8007766 <quorem+0x8e>
 80077d8:	6812      	ldr	r2, [r2, #0]
 80077da:	3b04      	subs	r3, #4
 80077dc:	2a00      	cmp	r2, #0
 80077de:	d1ef      	bne.n	80077c0 <quorem+0xe8>
 80077e0:	3c01      	subs	r4, #1
 80077e2:	e7ea      	b.n	80077ba <quorem+0xe2>
 80077e4:	2000      	movs	r0, #0
 80077e6:	e7ee      	b.n	80077c6 <quorem+0xee>

080077e8 <_dtoa_r>:
 80077e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ec:	69c7      	ldr	r7, [r0, #28]
 80077ee:	b099      	sub	sp, #100	@ 0x64
 80077f0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80077f4:	ec55 4b10 	vmov	r4, r5, d0
 80077f8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80077fa:	9109      	str	r1, [sp, #36]	@ 0x24
 80077fc:	4683      	mov	fp, r0
 80077fe:	920e      	str	r2, [sp, #56]	@ 0x38
 8007800:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007802:	b97f      	cbnz	r7, 8007824 <_dtoa_r+0x3c>
 8007804:	2010      	movs	r0, #16
 8007806:	f000 fdfd 	bl	8008404 <malloc>
 800780a:	4602      	mov	r2, r0
 800780c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007810:	b920      	cbnz	r0, 800781c <_dtoa_r+0x34>
 8007812:	4ba7      	ldr	r3, [pc, #668]	@ (8007ab0 <_dtoa_r+0x2c8>)
 8007814:	21ef      	movs	r1, #239	@ 0xef
 8007816:	48a7      	ldr	r0, [pc, #668]	@ (8007ab4 <_dtoa_r+0x2cc>)
 8007818:	f002 fc2a 	bl	800a070 <__assert_func>
 800781c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007820:	6007      	str	r7, [r0, #0]
 8007822:	60c7      	str	r7, [r0, #12]
 8007824:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007828:	6819      	ldr	r1, [r3, #0]
 800782a:	b159      	cbz	r1, 8007844 <_dtoa_r+0x5c>
 800782c:	685a      	ldr	r2, [r3, #4]
 800782e:	604a      	str	r2, [r1, #4]
 8007830:	2301      	movs	r3, #1
 8007832:	4093      	lsls	r3, r2
 8007834:	608b      	str	r3, [r1, #8]
 8007836:	4658      	mov	r0, fp
 8007838:	f000 feda 	bl	80085f0 <_Bfree>
 800783c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007840:	2200      	movs	r2, #0
 8007842:	601a      	str	r2, [r3, #0]
 8007844:	1e2b      	subs	r3, r5, #0
 8007846:	bfb9      	ittee	lt
 8007848:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800784c:	9303      	strlt	r3, [sp, #12]
 800784e:	2300      	movge	r3, #0
 8007850:	6033      	strge	r3, [r6, #0]
 8007852:	9f03      	ldr	r7, [sp, #12]
 8007854:	4b98      	ldr	r3, [pc, #608]	@ (8007ab8 <_dtoa_r+0x2d0>)
 8007856:	bfbc      	itt	lt
 8007858:	2201      	movlt	r2, #1
 800785a:	6032      	strlt	r2, [r6, #0]
 800785c:	43bb      	bics	r3, r7
 800785e:	d112      	bne.n	8007886 <_dtoa_r+0x9e>
 8007860:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007862:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007866:	6013      	str	r3, [r2, #0]
 8007868:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800786c:	4323      	orrs	r3, r4
 800786e:	f000 854d 	beq.w	800830c <_dtoa_r+0xb24>
 8007872:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007874:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007acc <_dtoa_r+0x2e4>
 8007878:	2b00      	cmp	r3, #0
 800787a:	f000 854f 	beq.w	800831c <_dtoa_r+0xb34>
 800787e:	f10a 0303 	add.w	r3, sl, #3
 8007882:	f000 bd49 	b.w	8008318 <_dtoa_r+0xb30>
 8007886:	ed9d 7b02 	vldr	d7, [sp, #8]
 800788a:	2200      	movs	r2, #0
 800788c:	ec51 0b17 	vmov	r0, r1, d7
 8007890:	2300      	movs	r3, #0
 8007892:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007896:	f7f9 f917 	bl	8000ac8 <__aeabi_dcmpeq>
 800789a:	4680      	mov	r8, r0
 800789c:	b158      	cbz	r0, 80078b6 <_dtoa_r+0xce>
 800789e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80078a0:	2301      	movs	r3, #1
 80078a2:	6013      	str	r3, [r2, #0]
 80078a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80078a6:	b113      	cbz	r3, 80078ae <_dtoa_r+0xc6>
 80078a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80078aa:	4b84      	ldr	r3, [pc, #528]	@ (8007abc <_dtoa_r+0x2d4>)
 80078ac:	6013      	str	r3, [r2, #0]
 80078ae:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007ad0 <_dtoa_r+0x2e8>
 80078b2:	f000 bd33 	b.w	800831c <_dtoa_r+0xb34>
 80078b6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80078ba:	aa16      	add	r2, sp, #88	@ 0x58
 80078bc:	a917      	add	r1, sp, #92	@ 0x5c
 80078be:	4658      	mov	r0, fp
 80078c0:	f001 fa3a 	bl	8008d38 <__d2b>
 80078c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80078c8:	4681      	mov	r9, r0
 80078ca:	2e00      	cmp	r6, #0
 80078cc:	d077      	beq.n	80079be <_dtoa_r+0x1d6>
 80078ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80078d0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80078d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80078dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80078e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80078e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80078e8:	4619      	mov	r1, r3
 80078ea:	2200      	movs	r2, #0
 80078ec:	4b74      	ldr	r3, [pc, #464]	@ (8007ac0 <_dtoa_r+0x2d8>)
 80078ee:	f7f8 fccb 	bl	8000288 <__aeabi_dsub>
 80078f2:	a369      	add	r3, pc, #420	@ (adr r3, 8007a98 <_dtoa_r+0x2b0>)
 80078f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f8:	f7f8 fe7e 	bl	80005f8 <__aeabi_dmul>
 80078fc:	a368      	add	r3, pc, #416	@ (adr r3, 8007aa0 <_dtoa_r+0x2b8>)
 80078fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007902:	f7f8 fcc3 	bl	800028c <__adddf3>
 8007906:	4604      	mov	r4, r0
 8007908:	4630      	mov	r0, r6
 800790a:	460d      	mov	r5, r1
 800790c:	f7f8 fe0a 	bl	8000524 <__aeabi_i2d>
 8007910:	a365      	add	r3, pc, #404	@ (adr r3, 8007aa8 <_dtoa_r+0x2c0>)
 8007912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007916:	f7f8 fe6f 	bl	80005f8 <__aeabi_dmul>
 800791a:	4602      	mov	r2, r0
 800791c:	460b      	mov	r3, r1
 800791e:	4620      	mov	r0, r4
 8007920:	4629      	mov	r1, r5
 8007922:	f7f8 fcb3 	bl	800028c <__adddf3>
 8007926:	4604      	mov	r4, r0
 8007928:	460d      	mov	r5, r1
 800792a:	f7f9 f915 	bl	8000b58 <__aeabi_d2iz>
 800792e:	2200      	movs	r2, #0
 8007930:	4607      	mov	r7, r0
 8007932:	2300      	movs	r3, #0
 8007934:	4620      	mov	r0, r4
 8007936:	4629      	mov	r1, r5
 8007938:	f7f9 f8d0 	bl	8000adc <__aeabi_dcmplt>
 800793c:	b140      	cbz	r0, 8007950 <_dtoa_r+0x168>
 800793e:	4638      	mov	r0, r7
 8007940:	f7f8 fdf0 	bl	8000524 <__aeabi_i2d>
 8007944:	4622      	mov	r2, r4
 8007946:	462b      	mov	r3, r5
 8007948:	f7f9 f8be 	bl	8000ac8 <__aeabi_dcmpeq>
 800794c:	b900      	cbnz	r0, 8007950 <_dtoa_r+0x168>
 800794e:	3f01      	subs	r7, #1
 8007950:	2f16      	cmp	r7, #22
 8007952:	d851      	bhi.n	80079f8 <_dtoa_r+0x210>
 8007954:	4b5b      	ldr	r3, [pc, #364]	@ (8007ac4 <_dtoa_r+0x2dc>)
 8007956:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800795a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007962:	f7f9 f8bb 	bl	8000adc <__aeabi_dcmplt>
 8007966:	2800      	cmp	r0, #0
 8007968:	d048      	beq.n	80079fc <_dtoa_r+0x214>
 800796a:	3f01      	subs	r7, #1
 800796c:	2300      	movs	r3, #0
 800796e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007970:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007972:	1b9b      	subs	r3, r3, r6
 8007974:	1e5a      	subs	r2, r3, #1
 8007976:	bf44      	itt	mi
 8007978:	f1c3 0801 	rsbmi	r8, r3, #1
 800797c:	2300      	movmi	r3, #0
 800797e:	9208      	str	r2, [sp, #32]
 8007980:	bf54      	ite	pl
 8007982:	f04f 0800 	movpl.w	r8, #0
 8007986:	9308      	strmi	r3, [sp, #32]
 8007988:	2f00      	cmp	r7, #0
 800798a:	db39      	blt.n	8007a00 <_dtoa_r+0x218>
 800798c:	9b08      	ldr	r3, [sp, #32]
 800798e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007990:	443b      	add	r3, r7
 8007992:	9308      	str	r3, [sp, #32]
 8007994:	2300      	movs	r3, #0
 8007996:	930a      	str	r3, [sp, #40]	@ 0x28
 8007998:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800799a:	2b09      	cmp	r3, #9
 800799c:	d864      	bhi.n	8007a68 <_dtoa_r+0x280>
 800799e:	2b05      	cmp	r3, #5
 80079a0:	bfc4      	itt	gt
 80079a2:	3b04      	subgt	r3, #4
 80079a4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80079a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079a8:	f1a3 0302 	sub.w	r3, r3, #2
 80079ac:	bfcc      	ite	gt
 80079ae:	2400      	movgt	r4, #0
 80079b0:	2401      	movle	r4, #1
 80079b2:	2b03      	cmp	r3, #3
 80079b4:	d863      	bhi.n	8007a7e <_dtoa_r+0x296>
 80079b6:	e8df f003 	tbb	[pc, r3]
 80079ba:	372a      	.short	0x372a
 80079bc:	5535      	.short	0x5535
 80079be:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80079c2:	441e      	add	r6, r3
 80079c4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80079c8:	2b20      	cmp	r3, #32
 80079ca:	bfc1      	itttt	gt
 80079cc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80079d0:	409f      	lslgt	r7, r3
 80079d2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80079d6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80079da:	bfd6      	itet	le
 80079dc:	f1c3 0320 	rsble	r3, r3, #32
 80079e0:	ea47 0003 	orrgt.w	r0, r7, r3
 80079e4:	fa04 f003 	lslle.w	r0, r4, r3
 80079e8:	f7f8 fd8c 	bl	8000504 <__aeabi_ui2d>
 80079ec:	2201      	movs	r2, #1
 80079ee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80079f2:	3e01      	subs	r6, #1
 80079f4:	9214      	str	r2, [sp, #80]	@ 0x50
 80079f6:	e777      	b.n	80078e8 <_dtoa_r+0x100>
 80079f8:	2301      	movs	r3, #1
 80079fa:	e7b8      	b.n	800796e <_dtoa_r+0x186>
 80079fc:	9012      	str	r0, [sp, #72]	@ 0x48
 80079fe:	e7b7      	b.n	8007970 <_dtoa_r+0x188>
 8007a00:	427b      	negs	r3, r7
 8007a02:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a04:	2300      	movs	r3, #0
 8007a06:	eba8 0807 	sub.w	r8, r8, r7
 8007a0a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007a0c:	e7c4      	b.n	8007998 <_dtoa_r+0x1b0>
 8007a0e:	2300      	movs	r3, #0
 8007a10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	dc35      	bgt.n	8007a84 <_dtoa_r+0x29c>
 8007a18:	2301      	movs	r3, #1
 8007a1a:	9300      	str	r3, [sp, #0]
 8007a1c:	9307      	str	r3, [sp, #28]
 8007a1e:	461a      	mov	r2, r3
 8007a20:	920e      	str	r2, [sp, #56]	@ 0x38
 8007a22:	e00b      	b.n	8007a3c <_dtoa_r+0x254>
 8007a24:	2301      	movs	r3, #1
 8007a26:	e7f3      	b.n	8007a10 <_dtoa_r+0x228>
 8007a28:	2300      	movs	r3, #0
 8007a2a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a2e:	18fb      	adds	r3, r7, r3
 8007a30:	9300      	str	r3, [sp, #0]
 8007a32:	3301      	adds	r3, #1
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	9307      	str	r3, [sp, #28]
 8007a38:	bfb8      	it	lt
 8007a3a:	2301      	movlt	r3, #1
 8007a3c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007a40:	2100      	movs	r1, #0
 8007a42:	2204      	movs	r2, #4
 8007a44:	f102 0514 	add.w	r5, r2, #20
 8007a48:	429d      	cmp	r5, r3
 8007a4a:	d91f      	bls.n	8007a8c <_dtoa_r+0x2a4>
 8007a4c:	6041      	str	r1, [r0, #4]
 8007a4e:	4658      	mov	r0, fp
 8007a50:	f000 fd8e 	bl	8008570 <_Balloc>
 8007a54:	4682      	mov	sl, r0
 8007a56:	2800      	cmp	r0, #0
 8007a58:	d13c      	bne.n	8007ad4 <_dtoa_r+0x2ec>
 8007a5a:	4b1b      	ldr	r3, [pc, #108]	@ (8007ac8 <_dtoa_r+0x2e0>)
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007a62:	e6d8      	b.n	8007816 <_dtoa_r+0x2e>
 8007a64:	2301      	movs	r3, #1
 8007a66:	e7e0      	b.n	8007a2a <_dtoa_r+0x242>
 8007a68:	2401      	movs	r4, #1
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a6e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007a70:	f04f 33ff 	mov.w	r3, #4294967295
 8007a74:	9300      	str	r3, [sp, #0]
 8007a76:	9307      	str	r3, [sp, #28]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	2312      	movs	r3, #18
 8007a7c:	e7d0      	b.n	8007a20 <_dtoa_r+0x238>
 8007a7e:	2301      	movs	r3, #1
 8007a80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a82:	e7f5      	b.n	8007a70 <_dtoa_r+0x288>
 8007a84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a86:	9300      	str	r3, [sp, #0]
 8007a88:	9307      	str	r3, [sp, #28]
 8007a8a:	e7d7      	b.n	8007a3c <_dtoa_r+0x254>
 8007a8c:	3101      	adds	r1, #1
 8007a8e:	0052      	lsls	r2, r2, #1
 8007a90:	e7d8      	b.n	8007a44 <_dtoa_r+0x25c>
 8007a92:	bf00      	nop
 8007a94:	f3af 8000 	nop.w
 8007a98:	636f4361 	.word	0x636f4361
 8007a9c:	3fd287a7 	.word	0x3fd287a7
 8007aa0:	8b60c8b3 	.word	0x8b60c8b3
 8007aa4:	3fc68a28 	.word	0x3fc68a28
 8007aa8:	509f79fb 	.word	0x509f79fb
 8007aac:	3fd34413 	.word	0x3fd34413
 8007ab0:	0800b0c6 	.word	0x0800b0c6
 8007ab4:	0800b0dd 	.word	0x0800b0dd
 8007ab8:	7ff00000 	.word	0x7ff00000
 8007abc:	0800b091 	.word	0x0800b091
 8007ac0:	3ff80000 	.word	0x3ff80000
 8007ac4:	0800b1d8 	.word	0x0800b1d8
 8007ac8:	0800b135 	.word	0x0800b135
 8007acc:	0800b0c2 	.word	0x0800b0c2
 8007ad0:	0800b090 	.word	0x0800b090
 8007ad4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007ad8:	6018      	str	r0, [r3, #0]
 8007ada:	9b07      	ldr	r3, [sp, #28]
 8007adc:	2b0e      	cmp	r3, #14
 8007ade:	f200 80a4 	bhi.w	8007c2a <_dtoa_r+0x442>
 8007ae2:	2c00      	cmp	r4, #0
 8007ae4:	f000 80a1 	beq.w	8007c2a <_dtoa_r+0x442>
 8007ae8:	2f00      	cmp	r7, #0
 8007aea:	dd33      	ble.n	8007b54 <_dtoa_r+0x36c>
 8007aec:	4bad      	ldr	r3, [pc, #692]	@ (8007da4 <_dtoa_r+0x5bc>)
 8007aee:	f007 020f 	and.w	r2, r7, #15
 8007af2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007af6:	ed93 7b00 	vldr	d7, [r3]
 8007afa:	05f8      	lsls	r0, r7, #23
 8007afc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007b00:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007b04:	d516      	bpl.n	8007b34 <_dtoa_r+0x34c>
 8007b06:	4ba8      	ldr	r3, [pc, #672]	@ (8007da8 <_dtoa_r+0x5c0>)
 8007b08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007b10:	f7f8 fe9c 	bl	800084c <__aeabi_ddiv>
 8007b14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b18:	f004 040f 	and.w	r4, r4, #15
 8007b1c:	2603      	movs	r6, #3
 8007b1e:	4da2      	ldr	r5, [pc, #648]	@ (8007da8 <_dtoa_r+0x5c0>)
 8007b20:	b954      	cbnz	r4, 8007b38 <_dtoa_r+0x350>
 8007b22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b2a:	f7f8 fe8f 	bl	800084c <__aeabi_ddiv>
 8007b2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b32:	e028      	b.n	8007b86 <_dtoa_r+0x39e>
 8007b34:	2602      	movs	r6, #2
 8007b36:	e7f2      	b.n	8007b1e <_dtoa_r+0x336>
 8007b38:	07e1      	lsls	r1, r4, #31
 8007b3a:	d508      	bpl.n	8007b4e <_dtoa_r+0x366>
 8007b3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007b44:	f7f8 fd58 	bl	80005f8 <__aeabi_dmul>
 8007b48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b4c:	3601      	adds	r6, #1
 8007b4e:	1064      	asrs	r4, r4, #1
 8007b50:	3508      	adds	r5, #8
 8007b52:	e7e5      	b.n	8007b20 <_dtoa_r+0x338>
 8007b54:	f000 80d2 	beq.w	8007cfc <_dtoa_r+0x514>
 8007b58:	427c      	negs	r4, r7
 8007b5a:	4b92      	ldr	r3, [pc, #584]	@ (8007da4 <_dtoa_r+0x5bc>)
 8007b5c:	4d92      	ldr	r5, [pc, #584]	@ (8007da8 <_dtoa_r+0x5c0>)
 8007b5e:	f004 020f 	and.w	r2, r4, #15
 8007b62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b6e:	f7f8 fd43 	bl	80005f8 <__aeabi_dmul>
 8007b72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b76:	1124      	asrs	r4, r4, #4
 8007b78:	2300      	movs	r3, #0
 8007b7a:	2602      	movs	r6, #2
 8007b7c:	2c00      	cmp	r4, #0
 8007b7e:	f040 80b2 	bne.w	8007ce6 <_dtoa_r+0x4fe>
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d1d3      	bne.n	8007b2e <_dtoa_r+0x346>
 8007b86:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007b88:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f000 80b7 	beq.w	8007d00 <_dtoa_r+0x518>
 8007b92:	4b86      	ldr	r3, [pc, #536]	@ (8007dac <_dtoa_r+0x5c4>)
 8007b94:	2200      	movs	r2, #0
 8007b96:	4620      	mov	r0, r4
 8007b98:	4629      	mov	r1, r5
 8007b9a:	f7f8 ff9f 	bl	8000adc <__aeabi_dcmplt>
 8007b9e:	2800      	cmp	r0, #0
 8007ba0:	f000 80ae 	beq.w	8007d00 <_dtoa_r+0x518>
 8007ba4:	9b07      	ldr	r3, [sp, #28]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	f000 80aa 	beq.w	8007d00 <_dtoa_r+0x518>
 8007bac:	9b00      	ldr	r3, [sp, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	dd37      	ble.n	8007c22 <_dtoa_r+0x43a>
 8007bb2:	1e7b      	subs	r3, r7, #1
 8007bb4:	9304      	str	r3, [sp, #16]
 8007bb6:	4620      	mov	r0, r4
 8007bb8:	4b7d      	ldr	r3, [pc, #500]	@ (8007db0 <_dtoa_r+0x5c8>)
 8007bba:	2200      	movs	r2, #0
 8007bbc:	4629      	mov	r1, r5
 8007bbe:	f7f8 fd1b 	bl	80005f8 <__aeabi_dmul>
 8007bc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bc6:	9c00      	ldr	r4, [sp, #0]
 8007bc8:	3601      	adds	r6, #1
 8007bca:	4630      	mov	r0, r6
 8007bcc:	f7f8 fcaa 	bl	8000524 <__aeabi_i2d>
 8007bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007bd4:	f7f8 fd10 	bl	80005f8 <__aeabi_dmul>
 8007bd8:	4b76      	ldr	r3, [pc, #472]	@ (8007db4 <_dtoa_r+0x5cc>)
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f7f8 fb56 	bl	800028c <__adddf3>
 8007be0:	4605      	mov	r5, r0
 8007be2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007be6:	2c00      	cmp	r4, #0
 8007be8:	f040 808d 	bne.w	8007d06 <_dtoa_r+0x51e>
 8007bec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bf0:	4b71      	ldr	r3, [pc, #452]	@ (8007db8 <_dtoa_r+0x5d0>)
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f7f8 fb48 	bl	8000288 <__aeabi_dsub>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	460b      	mov	r3, r1
 8007bfc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007c00:	462a      	mov	r2, r5
 8007c02:	4633      	mov	r3, r6
 8007c04:	f7f8 ff88 	bl	8000b18 <__aeabi_dcmpgt>
 8007c08:	2800      	cmp	r0, #0
 8007c0a:	f040 828b 	bne.w	8008124 <_dtoa_r+0x93c>
 8007c0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c12:	462a      	mov	r2, r5
 8007c14:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007c18:	f7f8 ff60 	bl	8000adc <__aeabi_dcmplt>
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	f040 8128 	bne.w	8007e72 <_dtoa_r+0x68a>
 8007c22:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007c26:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007c2a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	f2c0 815a 	blt.w	8007ee6 <_dtoa_r+0x6fe>
 8007c32:	2f0e      	cmp	r7, #14
 8007c34:	f300 8157 	bgt.w	8007ee6 <_dtoa_r+0x6fe>
 8007c38:	4b5a      	ldr	r3, [pc, #360]	@ (8007da4 <_dtoa_r+0x5bc>)
 8007c3a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007c3e:	ed93 7b00 	vldr	d7, [r3]
 8007c42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	ed8d 7b00 	vstr	d7, [sp]
 8007c4a:	da03      	bge.n	8007c54 <_dtoa_r+0x46c>
 8007c4c:	9b07      	ldr	r3, [sp, #28]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	f340 8101 	ble.w	8007e56 <_dtoa_r+0x66e>
 8007c54:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007c58:	4656      	mov	r6, sl
 8007c5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c5e:	4620      	mov	r0, r4
 8007c60:	4629      	mov	r1, r5
 8007c62:	f7f8 fdf3 	bl	800084c <__aeabi_ddiv>
 8007c66:	f7f8 ff77 	bl	8000b58 <__aeabi_d2iz>
 8007c6a:	4680      	mov	r8, r0
 8007c6c:	f7f8 fc5a 	bl	8000524 <__aeabi_i2d>
 8007c70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c74:	f7f8 fcc0 	bl	80005f8 <__aeabi_dmul>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	4620      	mov	r0, r4
 8007c7e:	4629      	mov	r1, r5
 8007c80:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007c84:	f7f8 fb00 	bl	8000288 <__aeabi_dsub>
 8007c88:	f806 4b01 	strb.w	r4, [r6], #1
 8007c8c:	9d07      	ldr	r5, [sp, #28]
 8007c8e:	eba6 040a 	sub.w	r4, r6, sl
 8007c92:	42a5      	cmp	r5, r4
 8007c94:	4602      	mov	r2, r0
 8007c96:	460b      	mov	r3, r1
 8007c98:	f040 8117 	bne.w	8007eca <_dtoa_r+0x6e2>
 8007c9c:	f7f8 faf6 	bl	800028c <__adddf3>
 8007ca0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ca4:	4604      	mov	r4, r0
 8007ca6:	460d      	mov	r5, r1
 8007ca8:	f7f8 ff36 	bl	8000b18 <__aeabi_dcmpgt>
 8007cac:	2800      	cmp	r0, #0
 8007cae:	f040 80f9 	bne.w	8007ea4 <_dtoa_r+0x6bc>
 8007cb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	4629      	mov	r1, r5
 8007cba:	f7f8 ff05 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cbe:	b118      	cbz	r0, 8007cc8 <_dtoa_r+0x4e0>
 8007cc0:	f018 0f01 	tst.w	r8, #1
 8007cc4:	f040 80ee 	bne.w	8007ea4 <_dtoa_r+0x6bc>
 8007cc8:	4649      	mov	r1, r9
 8007cca:	4658      	mov	r0, fp
 8007ccc:	f000 fc90 	bl	80085f0 <_Bfree>
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	7033      	strb	r3, [r6, #0]
 8007cd4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007cd6:	3701      	adds	r7, #1
 8007cd8:	601f      	str	r7, [r3, #0]
 8007cda:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	f000 831d 	beq.w	800831c <_dtoa_r+0xb34>
 8007ce2:	601e      	str	r6, [r3, #0]
 8007ce4:	e31a      	b.n	800831c <_dtoa_r+0xb34>
 8007ce6:	07e2      	lsls	r2, r4, #31
 8007ce8:	d505      	bpl.n	8007cf6 <_dtoa_r+0x50e>
 8007cea:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007cee:	f7f8 fc83 	bl	80005f8 <__aeabi_dmul>
 8007cf2:	3601      	adds	r6, #1
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	1064      	asrs	r4, r4, #1
 8007cf8:	3508      	adds	r5, #8
 8007cfa:	e73f      	b.n	8007b7c <_dtoa_r+0x394>
 8007cfc:	2602      	movs	r6, #2
 8007cfe:	e742      	b.n	8007b86 <_dtoa_r+0x39e>
 8007d00:	9c07      	ldr	r4, [sp, #28]
 8007d02:	9704      	str	r7, [sp, #16]
 8007d04:	e761      	b.n	8007bca <_dtoa_r+0x3e2>
 8007d06:	4b27      	ldr	r3, [pc, #156]	@ (8007da4 <_dtoa_r+0x5bc>)
 8007d08:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007d0a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007d0e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007d12:	4454      	add	r4, sl
 8007d14:	2900      	cmp	r1, #0
 8007d16:	d053      	beq.n	8007dc0 <_dtoa_r+0x5d8>
 8007d18:	4928      	ldr	r1, [pc, #160]	@ (8007dbc <_dtoa_r+0x5d4>)
 8007d1a:	2000      	movs	r0, #0
 8007d1c:	f7f8 fd96 	bl	800084c <__aeabi_ddiv>
 8007d20:	4633      	mov	r3, r6
 8007d22:	462a      	mov	r2, r5
 8007d24:	f7f8 fab0 	bl	8000288 <__aeabi_dsub>
 8007d28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007d2c:	4656      	mov	r6, sl
 8007d2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d32:	f7f8 ff11 	bl	8000b58 <__aeabi_d2iz>
 8007d36:	4605      	mov	r5, r0
 8007d38:	f7f8 fbf4 	bl	8000524 <__aeabi_i2d>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	460b      	mov	r3, r1
 8007d40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d44:	f7f8 faa0 	bl	8000288 <__aeabi_dsub>
 8007d48:	3530      	adds	r5, #48	@ 0x30
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007d52:	f806 5b01 	strb.w	r5, [r6], #1
 8007d56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007d5a:	f7f8 febf 	bl	8000adc <__aeabi_dcmplt>
 8007d5e:	2800      	cmp	r0, #0
 8007d60:	d171      	bne.n	8007e46 <_dtoa_r+0x65e>
 8007d62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d66:	4911      	ldr	r1, [pc, #68]	@ (8007dac <_dtoa_r+0x5c4>)
 8007d68:	2000      	movs	r0, #0
 8007d6a:	f7f8 fa8d 	bl	8000288 <__aeabi_dsub>
 8007d6e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007d72:	f7f8 feb3 	bl	8000adc <__aeabi_dcmplt>
 8007d76:	2800      	cmp	r0, #0
 8007d78:	f040 8095 	bne.w	8007ea6 <_dtoa_r+0x6be>
 8007d7c:	42a6      	cmp	r6, r4
 8007d7e:	f43f af50 	beq.w	8007c22 <_dtoa_r+0x43a>
 8007d82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007d86:	4b0a      	ldr	r3, [pc, #40]	@ (8007db0 <_dtoa_r+0x5c8>)
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f7f8 fc35 	bl	80005f8 <__aeabi_dmul>
 8007d8e:	4b08      	ldr	r3, [pc, #32]	@ (8007db0 <_dtoa_r+0x5c8>)
 8007d90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007d94:	2200      	movs	r2, #0
 8007d96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d9a:	f7f8 fc2d 	bl	80005f8 <__aeabi_dmul>
 8007d9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007da2:	e7c4      	b.n	8007d2e <_dtoa_r+0x546>
 8007da4:	0800b1d8 	.word	0x0800b1d8
 8007da8:	0800b1b0 	.word	0x0800b1b0
 8007dac:	3ff00000 	.word	0x3ff00000
 8007db0:	40240000 	.word	0x40240000
 8007db4:	401c0000 	.word	0x401c0000
 8007db8:	40140000 	.word	0x40140000
 8007dbc:	3fe00000 	.word	0x3fe00000
 8007dc0:	4631      	mov	r1, r6
 8007dc2:	4628      	mov	r0, r5
 8007dc4:	f7f8 fc18 	bl	80005f8 <__aeabi_dmul>
 8007dc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007dcc:	9415      	str	r4, [sp, #84]	@ 0x54
 8007dce:	4656      	mov	r6, sl
 8007dd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dd4:	f7f8 fec0 	bl	8000b58 <__aeabi_d2iz>
 8007dd8:	4605      	mov	r5, r0
 8007dda:	f7f8 fba3 	bl	8000524 <__aeabi_i2d>
 8007dde:	4602      	mov	r2, r0
 8007de0:	460b      	mov	r3, r1
 8007de2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007de6:	f7f8 fa4f 	bl	8000288 <__aeabi_dsub>
 8007dea:	3530      	adds	r5, #48	@ 0x30
 8007dec:	f806 5b01 	strb.w	r5, [r6], #1
 8007df0:	4602      	mov	r2, r0
 8007df2:	460b      	mov	r3, r1
 8007df4:	42a6      	cmp	r6, r4
 8007df6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007dfa:	f04f 0200 	mov.w	r2, #0
 8007dfe:	d124      	bne.n	8007e4a <_dtoa_r+0x662>
 8007e00:	4bac      	ldr	r3, [pc, #688]	@ (80080b4 <_dtoa_r+0x8cc>)
 8007e02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007e06:	f7f8 fa41 	bl	800028c <__adddf3>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e12:	f7f8 fe81 	bl	8000b18 <__aeabi_dcmpgt>
 8007e16:	2800      	cmp	r0, #0
 8007e18:	d145      	bne.n	8007ea6 <_dtoa_r+0x6be>
 8007e1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007e1e:	49a5      	ldr	r1, [pc, #660]	@ (80080b4 <_dtoa_r+0x8cc>)
 8007e20:	2000      	movs	r0, #0
 8007e22:	f7f8 fa31 	bl	8000288 <__aeabi_dsub>
 8007e26:	4602      	mov	r2, r0
 8007e28:	460b      	mov	r3, r1
 8007e2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e2e:	f7f8 fe55 	bl	8000adc <__aeabi_dcmplt>
 8007e32:	2800      	cmp	r0, #0
 8007e34:	f43f aef5 	beq.w	8007c22 <_dtoa_r+0x43a>
 8007e38:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007e3a:	1e73      	subs	r3, r6, #1
 8007e3c:	9315      	str	r3, [sp, #84]	@ 0x54
 8007e3e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007e42:	2b30      	cmp	r3, #48	@ 0x30
 8007e44:	d0f8      	beq.n	8007e38 <_dtoa_r+0x650>
 8007e46:	9f04      	ldr	r7, [sp, #16]
 8007e48:	e73e      	b.n	8007cc8 <_dtoa_r+0x4e0>
 8007e4a:	4b9b      	ldr	r3, [pc, #620]	@ (80080b8 <_dtoa_r+0x8d0>)
 8007e4c:	f7f8 fbd4 	bl	80005f8 <__aeabi_dmul>
 8007e50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e54:	e7bc      	b.n	8007dd0 <_dtoa_r+0x5e8>
 8007e56:	d10c      	bne.n	8007e72 <_dtoa_r+0x68a>
 8007e58:	4b98      	ldr	r3, [pc, #608]	@ (80080bc <_dtoa_r+0x8d4>)
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e60:	f7f8 fbca 	bl	80005f8 <__aeabi_dmul>
 8007e64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e68:	f7f8 fe4c 	bl	8000b04 <__aeabi_dcmpge>
 8007e6c:	2800      	cmp	r0, #0
 8007e6e:	f000 8157 	beq.w	8008120 <_dtoa_r+0x938>
 8007e72:	2400      	movs	r4, #0
 8007e74:	4625      	mov	r5, r4
 8007e76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e78:	43db      	mvns	r3, r3
 8007e7a:	9304      	str	r3, [sp, #16]
 8007e7c:	4656      	mov	r6, sl
 8007e7e:	2700      	movs	r7, #0
 8007e80:	4621      	mov	r1, r4
 8007e82:	4658      	mov	r0, fp
 8007e84:	f000 fbb4 	bl	80085f0 <_Bfree>
 8007e88:	2d00      	cmp	r5, #0
 8007e8a:	d0dc      	beq.n	8007e46 <_dtoa_r+0x65e>
 8007e8c:	b12f      	cbz	r7, 8007e9a <_dtoa_r+0x6b2>
 8007e8e:	42af      	cmp	r7, r5
 8007e90:	d003      	beq.n	8007e9a <_dtoa_r+0x6b2>
 8007e92:	4639      	mov	r1, r7
 8007e94:	4658      	mov	r0, fp
 8007e96:	f000 fbab 	bl	80085f0 <_Bfree>
 8007e9a:	4629      	mov	r1, r5
 8007e9c:	4658      	mov	r0, fp
 8007e9e:	f000 fba7 	bl	80085f0 <_Bfree>
 8007ea2:	e7d0      	b.n	8007e46 <_dtoa_r+0x65e>
 8007ea4:	9704      	str	r7, [sp, #16]
 8007ea6:	4633      	mov	r3, r6
 8007ea8:	461e      	mov	r6, r3
 8007eaa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007eae:	2a39      	cmp	r2, #57	@ 0x39
 8007eb0:	d107      	bne.n	8007ec2 <_dtoa_r+0x6da>
 8007eb2:	459a      	cmp	sl, r3
 8007eb4:	d1f8      	bne.n	8007ea8 <_dtoa_r+0x6c0>
 8007eb6:	9a04      	ldr	r2, [sp, #16]
 8007eb8:	3201      	adds	r2, #1
 8007eba:	9204      	str	r2, [sp, #16]
 8007ebc:	2230      	movs	r2, #48	@ 0x30
 8007ebe:	f88a 2000 	strb.w	r2, [sl]
 8007ec2:	781a      	ldrb	r2, [r3, #0]
 8007ec4:	3201      	adds	r2, #1
 8007ec6:	701a      	strb	r2, [r3, #0]
 8007ec8:	e7bd      	b.n	8007e46 <_dtoa_r+0x65e>
 8007eca:	4b7b      	ldr	r3, [pc, #492]	@ (80080b8 <_dtoa_r+0x8d0>)
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f7f8 fb93 	bl	80005f8 <__aeabi_dmul>
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	4604      	mov	r4, r0
 8007ed8:	460d      	mov	r5, r1
 8007eda:	f7f8 fdf5 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ede:	2800      	cmp	r0, #0
 8007ee0:	f43f aebb 	beq.w	8007c5a <_dtoa_r+0x472>
 8007ee4:	e6f0      	b.n	8007cc8 <_dtoa_r+0x4e0>
 8007ee6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007ee8:	2a00      	cmp	r2, #0
 8007eea:	f000 80db 	beq.w	80080a4 <_dtoa_r+0x8bc>
 8007eee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ef0:	2a01      	cmp	r2, #1
 8007ef2:	f300 80bf 	bgt.w	8008074 <_dtoa_r+0x88c>
 8007ef6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007ef8:	2a00      	cmp	r2, #0
 8007efa:	f000 80b7 	beq.w	800806c <_dtoa_r+0x884>
 8007efe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007f02:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007f04:	4646      	mov	r6, r8
 8007f06:	9a08      	ldr	r2, [sp, #32]
 8007f08:	2101      	movs	r1, #1
 8007f0a:	441a      	add	r2, r3
 8007f0c:	4658      	mov	r0, fp
 8007f0e:	4498      	add	r8, r3
 8007f10:	9208      	str	r2, [sp, #32]
 8007f12:	f000 fc6b 	bl	80087ec <__i2b>
 8007f16:	4605      	mov	r5, r0
 8007f18:	b15e      	cbz	r6, 8007f32 <_dtoa_r+0x74a>
 8007f1a:	9b08      	ldr	r3, [sp, #32]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	dd08      	ble.n	8007f32 <_dtoa_r+0x74a>
 8007f20:	42b3      	cmp	r3, r6
 8007f22:	9a08      	ldr	r2, [sp, #32]
 8007f24:	bfa8      	it	ge
 8007f26:	4633      	movge	r3, r6
 8007f28:	eba8 0803 	sub.w	r8, r8, r3
 8007f2c:	1af6      	subs	r6, r6, r3
 8007f2e:	1ad3      	subs	r3, r2, r3
 8007f30:	9308      	str	r3, [sp, #32]
 8007f32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f34:	b1f3      	cbz	r3, 8007f74 <_dtoa_r+0x78c>
 8007f36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f000 80b7 	beq.w	80080ac <_dtoa_r+0x8c4>
 8007f3e:	b18c      	cbz	r4, 8007f64 <_dtoa_r+0x77c>
 8007f40:	4629      	mov	r1, r5
 8007f42:	4622      	mov	r2, r4
 8007f44:	4658      	mov	r0, fp
 8007f46:	f000 fd11 	bl	800896c <__pow5mult>
 8007f4a:	464a      	mov	r2, r9
 8007f4c:	4601      	mov	r1, r0
 8007f4e:	4605      	mov	r5, r0
 8007f50:	4658      	mov	r0, fp
 8007f52:	f000 fc61 	bl	8008818 <__multiply>
 8007f56:	4649      	mov	r1, r9
 8007f58:	9004      	str	r0, [sp, #16]
 8007f5a:	4658      	mov	r0, fp
 8007f5c:	f000 fb48 	bl	80085f0 <_Bfree>
 8007f60:	9b04      	ldr	r3, [sp, #16]
 8007f62:	4699      	mov	r9, r3
 8007f64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f66:	1b1a      	subs	r2, r3, r4
 8007f68:	d004      	beq.n	8007f74 <_dtoa_r+0x78c>
 8007f6a:	4649      	mov	r1, r9
 8007f6c:	4658      	mov	r0, fp
 8007f6e:	f000 fcfd 	bl	800896c <__pow5mult>
 8007f72:	4681      	mov	r9, r0
 8007f74:	2101      	movs	r1, #1
 8007f76:	4658      	mov	r0, fp
 8007f78:	f000 fc38 	bl	80087ec <__i2b>
 8007f7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f7e:	4604      	mov	r4, r0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	f000 81cf 	beq.w	8008324 <_dtoa_r+0xb3c>
 8007f86:	461a      	mov	r2, r3
 8007f88:	4601      	mov	r1, r0
 8007f8a:	4658      	mov	r0, fp
 8007f8c:	f000 fcee 	bl	800896c <__pow5mult>
 8007f90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	4604      	mov	r4, r0
 8007f96:	f300 8095 	bgt.w	80080c4 <_dtoa_r+0x8dc>
 8007f9a:	9b02      	ldr	r3, [sp, #8]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	f040 8087 	bne.w	80080b0 <_dtoa_r+0x8c8>
 8007fa2:	9b03      	ldr	r3, [sp, #12]
 8007fa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	f040 8089 	bne.w	80080c0 <_dtoa_r+0x8d8>
 8007fae:	9b03      	ldr	r3, [sp, #12]
 8007fb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007fb4:	0d1b      	lsrs	r3, r3, #20
 8007fb6:	051b      	lsls	r3, r3, #20
 8007fb8:	b12b      	cbz	r3, 8007fc6 <_dtoa_r+0x7de>
 8007fba:	9b08      	ldr	r3, [sp, #32]
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	9308      	str	r3, [sp, #32]
 8007fc0:	f108 0801 	add.w	r8, r8, #1
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007fc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	f000 81b0 	beq.w	8008330 <_dtoa_r+0xb48>
 8007fd0:	6923      	ldr	r3, [r4, #16]
 8007fd2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007fd6:	6918      	ldr	r0, [r3, #16]
 8007fd8:	f000 fbbc 	bl	8008754 <__hi0bits>
 8007fdc:	f1c0 0020 	rsb	r0, r0, #32
 8007fe0:	9b08      	ldr	r3, [sp, #32]
 8007fe2:	4418      	add	r0, r3
 8007fe4:	f010 001f 	ands.w	r0, r0, #31
 8007fe8:	d077      	beq.n	80080da <_dtoa_r+0x8f2>
 8007fea:	f1c0 0320 	rsb	r3, r0, #32
 8007fee:	2b04      	cmp	r3, #4
 8007ff0:	dd6b      	ble.n	80080ca <_dtoa_r+0x8e2>
 8007ff2:	9b08      	ldr	r3, [sp, #32]
 8007ff4:	f1c0 001c 	rsb	r0, r0, #28
 8007ff8:	4403      	add	r3, r0
 8007ffa:	4480      	add	r8, r0
 8007ffc:	4406      	add	r6, r0
 8007ffe:	9308      	str	r3, [sp, #32]
 8008000:	f1b8 0f00 	cmp.w	r8, #0
 8008004:	dd05      	ble.n	8008012 <_dtoa_r+0x82a>
 8008006:	4649      	mov	r1, r9
 8008008:	4642      	mov	r2, r8
 800800a:	4658      	mov	r0, fp
 800800c:	f000 fd08 	bl	8008a20 <__lshift>
 8008010:	4681      	mov	r9, r0
 8008012:	9b08      	ldr	r3, [sp, #32]
 8008014:	2b00      	cmp	r3, #0
 8008016:	dd05      	ble.n	8008024 <_dtoa_r+0x83c>
 8008018:	4621      	mov	r1, r4
 800801a:	461a      	mov	r2, r3
 800801c:	4658      	mov	r0, fp
 800801e:	f000 fcff 	bl	8008a20 <__lshift>
 8008022:	4604      	mov	r4, r0
 8008024:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008026:	2b00      	cmp	r3, #0
 8008028:	d059      	beq.n	80080de <_dtoa_r+0x8f6>
 800802a:	4621      	mov	r1, r4
 800802c:	4648      	mov	r0, r9
 800802e:	f000 fd63 	bl	8008af8 <__mcmp>
 8008032:	2800      	cmp	r0, #0
 8008034:	da53      	bge.n	80080de <_dtoa_r+0x8f6>
 8008036:	1e7b      	subs	r3, r7, #1
 8008038:	9304      	str	r3, [sp, #16]
 800803a:	4649      	mov	r1, r9
 800803c:	2300      	movs	r3, #0
 800803e:	220a      	movs	r2, #10
 8008040:	4658      	mov	r0, fp
 8008042:	f000 faf7 	bl	8008634 <__multadd>
 8008046:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008048:	4681      	mov	r9, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	f000 8172 	beq.w	8008334 <_dtoa_r+0xb4c>
 8008050:	2300      	movs	r3, #0
 8008052:	4629      	mov	r1, r5
 8008054:	220a      	movs	r2, #10
 8008056:	4658      	mov	r0, fp
 8008058:	f000 faec 	bl	8008634 <__multadd>
 800805c:	9b00      	ldr	r3, [sp, #0]
 800805e:	2b00      	cmp	r3, #0
 8008060:	4605      	mov	r5, r0
 8008062:	dc67      	bgt.n	8008134 <_dtoa_r+0x94c>
 8008064:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008066:	2b02      	cmp	r3, #2
 8008068:	dc41      	bgt.n	80080ee <_dtoa_r+0x906>
 800806a:	e063      	b.n	8008134 <_dtoa_r+0x94c>
 800806c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800806e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008072:	e746      	b.n	8007f02 <_dtoa_r+0x71a>
 8008074:	9b07      	ldr	r3, [sp, #28]
 8008076:	1e5c      	subs	r4, r3, #1
 8008078:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800807a:	42a3      	cmp	r3, r4
 800807c:	bfbf      	itttt	lt
 800807e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008080:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008082:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008084:	1ae3      	sublt	r3, r4, r3
 8008086:	bfb4      	ite	lt
 8008088:	18d2      	addlt	r2, r2, r3
 800808a:	1b1c      	subge	r4, r3, r4
 800808c:	9b07      	ldr	r3, [sp, #28]
 800808e:	bfbc      	itt	lt
 8008090:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008092:	2400      	movlt	r4, #0
 8008094:	2b00      	cmp	r3, #0
 8008096:	bfb5      	itete	lt
 8008098:	eba8 0603 	sublt.w	r6, r8, r3
 800809c:	9b07      	ldrge	r3, [sp, #28]
 800809e:	2300      	movlt	r3, #0
 80080a0:	4646      	movge	r6, r8
 80080a2:	e730      	b.n	8007f06 <_dtoa_r+0x71e>
 80080a4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80080a6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80080a8:	4646      	mov	r6, r8
 80080aa:	e735      	b.n	8007f18 <_dtoa_r+0x730>
 80080ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80080ae:	e75c      	b.n	8007f6a <_dtoa_r+0x782>
 80080b0:	2300      	movs	r3, #0
 80080b2:	e788      	b.n	8007fc6 <_dtoa_r+0x7de>
 80080b4:	3fe00000 	.word	0x3fe00000
 80080b8:	40240000 	.word	0x40240000
 80080bc:	40140000 	.word	0x40140000
 80080c0:	9b02      	ldr	r3, [sp, #8]
 80080c2:	e780      	b.n	8007fc6 <_dtoa_r+0x7de>
 80080c4:	2300      	movs	r3, #0
 80080c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80080c8:	e782      	b.n	8007fd0 <_dtoa_r+0x7e8>
 80080ca:	d099      	beq.n	8008000 <_dtoa_r+0x818>
 80080cc:	9a08      	ldr	r2, [sp, #32]
 80080ce:	331c      	adds	r3, #28
 80080d0:	441a      	add	r2, r3
 80080d2:	4498      	add	r8, r3
 80080d4:	441e      	add	r6, r3
 80080d6:	9208      	str	r2, [sp, #32]
 80080d8:	e792      	b.n	8008000 <_dtoa_r+0x818>
 80080da:	4603      	mov	r3, r0
 80080dc:	e7f6      	b.n	80080cc <_dtoa_r+0x8e4>
 80080de:	9b07      	ldr	r3, [sp, #28]
 80080e0:	9704      	str	r7, [sp, #16]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	dc20      	bgt.n	8008128 <_dtoa_r+0x940>
 80080e6:	9300      	str	r3, [sp, #0]
 80080e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080ea:	2b02      	cmp	r3, #2
 80080ec:	dd1e      	ble.n	800812c <_dtoa_r+0x944>
 80080ee:	9b00      	ldr	r3, [sp, #0]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	f47f aec0 	bne.w	8007e76 <_dtoa_r+0x68e>
 80080f6:	4621      	mov	r1, r4
 80080f8:	2205      	movs	r2, #5
 80080fa:	4658      	mov	r0, fp
 80080fc:	f000 fa9a 	bl	8008634 <__multadd>
 8008100:	4601      	mov	r1, r0
 8008102:	4604      	mov	r4, r0
 8008104:	4648      	mov	r0, r9
 8008106:	f000 fcf7 	bl	8008af8 <__mcmp>
 800810a:	2800      	cmp	r0, #0
 800810c:	f77f aeb3 	ble.w	8007e76 <_dtoa_r+0x68e>
 8008110:	4656      	mov	r6, sl
 8008112:	2331      	movs	r3, #49	@ 0x31
 8008114:	f806 3b01 	strb.w	r3, [r6], #1
 8008118:	9b04      	ldr	r3, [sp, #16]
 800811a:	3301      	adds	r3, #1
 800811c:	9304      	str	r3, [sp, #16]
 800811e:	e6ae      	b.n	8007e7e <_dtoa_r+0x696>
 8008120:	9c07      	ldr	r4, [sp, #28]
 8008122:	9704      	str	r7, [sp, #16]
 8008124:	4625      	mov	r5, r4
 8008126:	e7f3      	b.n	8008110 <_dtoa_r+0x928>
 8008128:	9b07      	ldr	r3, [sp, #28]
 800812a:	9300      	str	r3, [sp, #0]
 800812c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800812e:	2b00      	cmp	r3, #0
 8008130:	f000 8104 	beq.w	800833c <_dtoa_r+0xb54>
 8008134:	2e00      	cmp	r6, #0
 8008136:	dd05      	ble.n	8008144 <_dtoa_r+0x95c>
 8008138:	4629      	mov	r1, r5
 800813a:	4632      	mov	r2, r6
 800813c:	4658      	mov	r0, fp
 800813e:	f000 fc6f 	bl	8008a20 <__lshift>
 8008142:	4605      	mov	r5, r0
 8008144:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008146:	2b00      	cmp	r3, #0
 8008148:	d05a      	beq.n	8008200 <_dtoa_r+0xa18>
 800814a:	6869      	ldr	r1, [r5, #4]
 800814c:	4658      	mov	r0, fp
 800814e:	f000 fa0f 	bl	8008570 <_Balloc>
 8008152:	4606      	mov	r6, r0
 8008154:	b928      	cbnz	r0, 8008162 <_dtoa_r+0x97a>
 8008156:	4b84      	ldr	r3, [pc, #528]	@ (8008368 <_dtoa_r+0xb80>)
 8008158:	4602      	mov	r2, r0
 800815a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800815e:	f7ff bb5a 	b.w	8007816 <_dtoa_r+0x2e>
 8008162:	692a      	ldr	r2, [r5, #16]
 8008164:	3202      	adds	r2, #2
 8008166:	0092      	lsls	r2, r2, #2
 8008168:	f105 010c 	add.w	r1, r5, #12
 800816c:	300c      	adds	r0, #12
 800816e:	f7ff fa9e 	bl	80076ae <memcpy>
 8008172:	2201      	movs	r2, #1
 8008174:	4631      	mov	r1, r6
 8008176:	4658      	mov	r0, fp
 8008178:	f000 fc52 	bl	8008a20 <__lshift>
 800817c:	f10a 0301 	add.w	r3, sl, #1
 8008180:	9307      	str	r3, [sp, #28]
 8008182:	9b00      	ldr	r3, [sp, #0]
 8008184:	4453      	add	r3, sl
 8008186:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008188:	9b02      	ldr	r3, [sp, #8]
 800818a:	f003 0301 	and.w	r3, r3, #1
 800818e:	462f      	mov	r7, r5
 8008190:	930a      	str	r3, [sp, #40]	@ 0x28
 8008192:	4605      	mov	r5, r0
 8008194:	9b07      	ldr	r3, [sp, #28]
 8008196:	4621      	mov	r1, r4
 8008198:	3b01      	subs	r3, #1
 800819a:	4648      	mov	r0, r9
 800819c:	9300      	str	r3, [sp, #0]
 800819e:	f7ff fa9b 	bl	80076d8 <quorem>
 80081a2:	4639      	mov	r1, r7
 80081a4:	9002      	str	r0, [sp, #8]
 80081a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80081aa:	4648      	mov	r0, r9
 80081ac:	f000 fca4 	bl	8008af8 <__mcmp>
 80081b0:	462a      	mov	r2, r5
 80081b2:	9008      	str	r0, [sp, #32]
 80081b4:	4621      	mov	r1, r4
 80081b6:	4658      	mov	r0, fp
 80081b8:	f000 fcba 	bl	8008b30 <__mdiff>
 80081bc:	68c2      	ldr	r2, [r0, #12]
 80081be:	4606      	mov	r6, r0
 80081c0:	bb02      	cbnz	r2, 8008204 <_dtoa_r+0xa1c>
 80081c2:	4601      	mov	r1, r0
 80081c4:	4648      	mov	r0, r9
 80081c6:	f000 fc97 	bl	8008af8 <__mcmp>
 80081ca:	4602      	mov	r2, r0
 80081cc:	4631      	mov	r1, r6
 80081ce:	4658      	mov	r0, fp
 80081d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80081d2:	f000 fa0d 	bl	80085f0 <_Bfree>
 80081d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80081da:	9e07      	ldr	r6, [sp, #28]
 80081dc:	ea43 0102 	orr.w	r1, r3, r2
 80081e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081e2:	4319      	orrs	r1, r3
 80081e4:	d110      	bne.n	8008208 <_dtoa_r+0xa20>
 80081e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80081ea:	d029      	beq.n	8008240 <_dtoa_r+0xa58>
 80081ec:	9b08      	ldr	r3, [sp, #32]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	dd02      	ble.n	80081f8 <_dtoa_r+0xa10>
 80081f2:	9b02      	ldr	r3, [sp, #8]
 80081f4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80081f8:	9b00      	ldr	r3, [sp, #0]
 80081fa:	f883 8000 	strb.w	r8, [r3]
 80081fe:	e63f      	b.n	8007e80 <_dtoa_r+0x698>
 8008200:	4628      	mov	r0, r5
 8008202:	e7bb      	b.n	800817c <_dtoa_r+0x994>
 8008204:	2201      	movs	r2, #1
 8008206:	e7e1      	b.n	80081cc <_dtoa_r+0x9e4>
 8008208:	9b08      	ldr	r3, [sp, #32]
 800820a:	2b00      	cmp	r3, #0
 800820c:	db04      	blt.n	8008218 <_dtoa_r+0xa30>
 800820e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008210:	430b      	orrs	r3, r1
 8008212:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008214:	430b      	orrs	r3, r1
 8008216:	d120      	bne.n	800825a <_dtoa_r+0xa72>
 8008218:	2a00      	cmp	r2, #0
 800821a:	dded      	ble.n	80081f8 <_dtoa_r+0xa10>
 800821c:	4649      	mov	r1, r9
 800821e:	2201      	movs	r2, #1
 8008220:	4658      	mov	r0, fp
 8008222:	f000 fbfd 	bl	8008a20 <__lshift>
 8008226:	4621      	mov	r1, r4
 8008228:	4681      	mov	r9, r0
 800822a:	f000 fc65 	bl	8008af8 <__mcmp>
 800822e:	2800      	cmp	r0, #0
 8008230:	dc03      	bgt.n	800823a <_dtoa_r+0xa52>
 8008232:	d1e1      	bne.n	80081f8 <_dtoa_r+0xa10>
 8008234:	f018 0f01 	tst.w	r8, #1
 8008238:	d0de      	beq.n	80081f8 <_dtoa_r+0xa10>
 800823a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800823e:	d1d8      	bne.n	80081f2 <_dtoa_r+0xa0a>
 8008240:	9a00      	ldr	r2, [sp, #0]
 8008242:	2339      	movs	r3, #57	@ 0x39
 8008244:	7013      	strb	r3, [r2, #0]
 8008246:	4633      	mov	r3, r6
 8008248:	461e      	mov	r6, r3
 800824a:	3b01      	subs	r3, #1
 800824c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008250:	2a39      	cmp	r2, #57	@ 0x39
 8008252:	d052      	beq.n	80082fa <_dtoa_r+0xb12>
 8008254:	3201      	adds	r2, #1
 8008256:	701a      	strb	r2, [r3, #0]
 8008258:	e612      	b.n	8007e80 <_dtoa_r+0x698>
 800825a:	2a00      	cmp	r2, #0
 800825c:	dd07      	ble.n	800826e <_dtoa_r+0xa86>
 800825e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008262:	d0ed      	beq.n	8008240 <_dtoa_r+0xa58>
 8008264:	9a00      	ldr	r2, [sp, #0]
 8008266:	f108 0301 	add.w	r3, r8, #1
 800826a:	7013      	strb	r3, [r2, #0]
 800826c:	e608      	b.n	8007e80 <_dtoa_r+0x698>
 800826e:	9b07      	ldr	r3, [sp, #28]
 8008270:	9a07      	ldr	r2, [sp, #28]
 8008272:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008276:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008278:	4293      	cmp	r3, r2
 800827a:	d028      	beq.n	80082ce <_dtoa_r+0xae6>
 800827c:	4649      	mov	r1, r9
 800827e:	2300      	movs	r3, #0
 8008280:	220a      	movs	r2, #10
 8008282:	4658      	mov	r0, fp
 8008284:	f000 f9d6 	bl	8008634 <__multadd>
 8008288:	42af      	cmp	r7, r5
 800828a:	4681      	mov	r9, r0
 800828c:	f04f 0300 	mov.w	r3, #0
 8008290:	f04f 020a 	mov.w	r2, #10
 8008294:	4639      	mov	r1, r7
 8008296:	4658      	mov	r0, fp
 8008298:	d107      	bne.n	80082aa <_dtoa_r+0xac2>
 800829a:	f000 f9cb 	bl	8008634 <__multadd>
 800829e:	4607      	mov	r7, r0
 80082a0:	4605      	mov	r5, r0
 80082a2:	9b07      	ldr	r3, [sp, #28]
 80082a4:	3301      	adds	r3, #1
 80082a6:	9307      	str	r3, [sp, #28]
 80082a8:	e774      	b.n	8008194 <_dtoa_r+0x9ac>
 80082aa:	f000 f9c3 	bl	8008634 <__multadd>
 80082ae:	4629      	mov	r1, r5
 80082b0:	4607      	mov	r7, r0
 80082b2:	2300      	movs	r3, #0
 80082b4:	220a      	movs	r2, #10
 80082b6:	4658      	mov	r0, fp
 80082b8:	f000 f9bc 	bl	8008634 <__multadd>
 80082bc:	4605      	mov	r5, r0
 80082be:	e7f0      	b.n	80082a2 <_dtoa_r+0xaba>
 80082c0:	9b00      	ldr	r3, [sp, #0]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	bfcc      	ite	gt
 80082c6:	461e      	movgt	r6, r3
 80082c8:	2601      	movle	r6, #1
 80082ca:	4456      	add	r6, sl
 80082cc:	2700      	movs	r7, #0
 80082ce:	4649      	mov	r1, r9
 80082d0:	2201      	movs	r2, #1
 80082d2:	4658      	mov	r0, fp
 80082d4:	f000 fba4 	bl	8008a20 <__lshift>
 80082d8:	4621      	mov	r1, r4
 80082da:	4681      	mov	r9, r0
 80082dc:	f000 fc0c 	bl	8008af8 <__mcmp>
 80082e0:	2800      	cmp	r0, #0
 80082e2:	dcb0      	bgt.n	8008246 <_dtoa_r+0xa5e>
 80082e4:	d102      	bne.n	80082ec <_dtoa_r+0xb04>
 80082e6:	f018 0f01 	tst.w	r8, #1
 80082ea:	d1ac      	bne.n	8008246 <_dtoa_r+0xa5e>
 80082ec:	4633      	mov	r3, r6
 80082ee:	461e      	mov	r6, r3
 80082f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082f4:	2a30      	cmp	r2, #48	@ 0x30
 80082f6:	d0fa      	beq.n	80082ee <_dtoa_r+0xb06>
 80082f8:	e5c2      	b.n	8007e80 <_dtoa_r+0x698>
 80082fa:	459a      	cmp	sl, r3
 80082fc:	d1a4      	bne.n	8008248 <_dtoa_r+0xa60>
 80082fe:	9b04      	ldr	r3, [sp, #16]
 8008300:	3301      	adds	r3, #1
 8008302:	9304      	str	r3, [sp, #16]
 8008304:	2331      	movs	r3, #49	@ 0x31
 8008306:	f88a 3000 	strb.w	r3, [sl]
 800830a:	e5b9      	b.n	8007e80 <_dtoa_r+0x698>
 800830c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800830e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800836c <_dtoa_r+0xb84>
 8008312:	b11b      	cbz	r3, 800831c <_dtoa_r+0xb34>
 8008314:	f10a 0308 	add.w	r3, sl, #8
 8008318:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800831a:	6013      	str	r3, [r2, #0]
 800831c:	4650      	mov	r0, sl
 800831e:	b019      	add	sp, #100	@ 0x64
 8008320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008324:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008326:	2b01      	cmp	r3, #1
 8008328:	f77f ae37 	ble.w	8007f9a <_dtoa_r+0x7b2>
 800832c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800832e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008330:	2001      	movs	r0, #1
 8008332:	e655      	b.n	8007fe0 <_dtoa_r+0x7f8>
 8008334:	9b00      	ldr	r3, [sp, #0]
 8008336:	2b00      	cmp	r3, #0
 8008338:	f77f aed6 	ble.w	80080e8 <_dtoa_r+0x900>
 800833c:	4656      	mov	r6, sl
 800833e:	4621      	mov	r1, r4
 8008340:	4648      	mov	r0, r9
 8008342:	f7ff f9c9 	bl	80076d8 <quorem>
 8008346:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800834a:	f806 8b01 	strb.w	r8, [r6], #1
 800834e:	9b00      	ldr	r3, [sp, #0]
 8008350:	eba6 020a 	sub.w	r2, r6, sl
 8008354:	4293      	cmp	r3, r2
 8008356:	ddb3      	ble.n	80082c0 <_dtoa_r+0xad8>
 8008358:	4649      	mov	r1, r9
 800835a:	2300      	movs	r3, #0
 800835c:	220a      	movs	r2, #10
 800835e:	4658      	mov	r0, fp
 8008360:	f000 f968 	bl	8008634 <__multadd>
 8008364:	4681      	mov	r9, r0
 8008366:	e7ea      	b.n	800833e <_dtoa_r+0xb56>
 8008368:	0800b135 	.word	0x0800b135
 800836c:	0800b0b9 	.word	0x0800b0b9

08008370 <_free_r>:
 8008370:	b538      	push	{r3, r4, r5, lr}
 8008372:	4605      	mov	r5, r0
 8008374:	2900      	cmp	r1, #0
 8008376:	d041      	beq.n	80083fc <_free_r+0x8c>
 8008378:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800837c:	1f0c      	subs	r4, r1, #4
 800837e:	2b00      	cmp	r3, #0
 8008380:	bfb8      	it	lt
 8008382:	18e4      	addlt	r4, r4, r3
 8008384:	f000 f8e8 	bl	8008558 <__malloc_lock>
 8008388:	4a1d      	ldr	r2, [pc, #116]	@ (8008400 <_free_r+0x90>)
 800838a:	6813      	ldr	r3, [r2, #0]
 800838c:	b933      	cbnz	r3, 800839c <_free_r+0x2c>
 800838e:	6063      	str	r3, [r4, #4]
 8008390:	6014      	str	r4, [r2, #0]
 8008392:	4628      	mov	r0, r5
 8008394:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008398:	f000 b8e4 	b.w	8008564 <__malloc_unlock>
 800839c:	42a3      	cmp	r3, r4
 800839e:	d908      	bls.n	80083b2 <_free_r+0x42>
 80083a0:	6820      	ldr	r0, [r4, #0]
 80083a2:	1821      	adds	r1, r4, r0
 80083a4:	428b      	cmp	r3, r1
 80083a6:	bf01      	itttt	eq
 80083a8:	6819      	ldreq	r1, [r3, #0]
 80083aa:	685b      	ldreq	r3, [r3, #4]
 80083ac:	1809      	addeq	r1, r1, r0
 80083ae:	6021      	streq	r1, [r4, #0]
 80083b0:	e7ed      	b.n	800838e <_free_r+0x1e>
 80083b2:	461a      	mov	r2, r3
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	b10b      	cbz	r3, 80083bc <_free_r+0x4c>
 80083b8:	42a3      	cmp	r3, r4
 80083ba:	d9fa      	bls.n	80083b2 <_free_r+0x42>
 80083bc:	6811      	ldr	r1, [r2, #0]
 80083be:	1850      	adds	r0, r2, r1
 80083c0:	42a0      	cmp	r0, r4
 80083c2:	d10b      	bne.n	80083dc <_free_r+0x6c>
 80083c4:	6820      	ldr	r0, [r4, #0]
 80083c6:	4401      	add	r1, r0
 80083c8:	1850      	adds	r0, r2, r1
 80083ca:	4283      	cmp	r3, r0
 80083cc:	6011      	str	r1, [r2, #0]
 80083ce:	d1e0      	bne.n	8008392 <_free_r+0x22>
 80083d0:	6818      	ldr	r0, [r3, #0]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	6053      	str	r3, [r2, #4]
 80083d6:	4408      	add	r0, r1
 80083d8:	6010      	str	r0, [r2, #0]
 80083da:	e7da      	b.n	8008392 <_free_r+0x22>
 80083dc:	d902      	bls.n	80083e4 <_free_r+0x74>
 80083de:	230c      	movs	r3, #12
 80083e0:	602b      	str	r3, [r5, #0]
 80083e2:	e7d6      	b.n	8008392 <_free_r+0x22>
 80083e4:	6820      	ldr	r0, [r4, #0]
 80083e6:	1821      	adds	r1, r4, r0
 80083e8:	428b      	cmp	r3, r1
 80083ea:	bf04      	itt	eq
 80083ec:	6819      	ldreq	r1, [r3, #0]
 80083ee:	685b      	ldreq	r3, [r3, #4]
 80083f0:	6063      	str	r3, [r4, #4]
 80083f2:	bf04      	itt	eq
 80083f4:	1809      	addeq	r1, r1, r0
 80083f6:	6021      	streq	r1, [r4, #0]
 80083f8:	6054      	str	r4, [r2, #4]
 80083fa:	e7ca      	b.n	8008392 <_free_r+0x22>
 80083fc:	bd38      	pop	{r3, r4, r5, pc}
 80083fe:	bf00      	nop
 8008400:	200045f0 	.word	0x200045f0

08008404 <malloc>:
 8008404:	4b02      	ldr	r3, [pc, #8]	@ (8008410 <malloc+0xc>)
 8008406:	4601      	mov	r1, r0
 8008408:	6818      	ldr	r0, [r3, #0]
 800840a:	f000 b825 	b.w	8008458 <_malloc_r>
 800840e:	bf00      	nop
 8008410:	2000001c 	.word	0x2000001c

08008414 <sbrk_aligned>:
 8008414:	b570      	push	{r4, r5, r6, lr}
 8008416:	4e0f      	ldr	r6, [pc, #60]	@ (8008454 <sbrk_aligned+0x40>)
 8008418:	460c      	mov	r4, r1
 800841a:	6831      	ldr	r1, [r6, #0]
 800841c:	4605      	mov	r5, r0
 800841e:	b911      	cbnz	r1, 8008426 <sbrk_aligned+0x12>
 8008420:	f001 fe0c 	bl	800a03c <_sbrk_r>
 8008424:	6030      	str	r0, [r6, #0]
 8008426:	4621      	mov	r1, r4
 8008428:	4628      	mov	r0, r5
 800842a:	f001 fe07 	bl	800a03c <_sbrk_r>
 800842e:	1c43      	adds	r3, r0, #1
 8008430:	d103      	bne.n	800843a <sbrk_aligned+0x26>
 8008432:	f04f 34ff 	mov.w	r4, #4294967295
 8008436:	4620      	mov	r0, r4
 8008438:	bd70      	pop	{r4, r5, r6, pc}
 800843a:	1cc4      	adds	r4, r0, #3
 800843c:	f024 0403 	bic.w	r4, r4, #3
 8008440:	42a0      	cmp	r0, r4
 8008442:	d0f8      	beq.n	8008436 <sbrk_aligned+0x22>
 8008444:	1a21      	subs	r1, r4, r0
 8008446:	4628      	mov	r0, r5
 8008448:	f001 fdf8 	bl	800a03c <_sbrk_r>
 800844c:	3001      	adds	r0, #1
 800844e:	d1f2      	bne.n	8008436 <sbrk_aligned+0x22>
 8008450:	e7ef      	b.n	8008432 <sbrk_aligned+0x1e>
 8008452:	bf00      	nop
 8008454:	200045ec 	.word	0x200045ec

08008458 <_malloc_r>:
 8008458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800845c:	1ccd      	adds	r5, r1, #3
 800845e:	f025 0503 	bic.w	r5, r5, #3
 8008462:	3508      	adds	r5, #8
 8008464:	2d0c      	cmp	r5, #12
 8008466:	bf38      	it	cc
 8008468:	250c      	movcc	r5, #12
 800846a:	2d00      	cmp	r5, #0
 800846c:	4606      	mov	r6, r0
 800846e:	db01      	blt.n	8008474 <_malloc_r+0x1c>
 8008470:	42a9      	cmp	r1, r5
 8008472:	d904      	bls.n	800847e <_malloc_r+0x26>
 8008474:	230c      	movs	r3, #12
 8008476:	6033      	str	r3, [r6, #0]
 8008478:	2000      	movs	r0, #0
 800847a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800847e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008554 <_malloc_r+0xfc>
 8008482:	f000 f869 	bl	8008558 <__malloc_lock>
 8008486:	f8d8 3000 	ldr.w	r3, [r8]
 800848a:	461c      	mov	r4, r3
 800848c:	bb44      	cbnz	r4, 80084e0 <_malloc_r+0x88>
 800848e:	4629      	mov	r1, r5
 8008490:	4630      	mov	r0, r6
 8008492:	f7ff ffbf 	bl	8008414 <sbrk_aligned>
 8008496:	1c43      	adds	r3, r0, #1
 8008498:	4604      	mov	r4, r0
 800849a:	d158      	bne.n	800854e <_malloc_r+0xf6>
 800849c:	f8d8 4000 	ldr.w	r4, [r8]
 80084a0:	4627      	mov	r7, r4
 80084a2:	2f00      	cmp	r7, #0
 80084a4:	d143      	bne.n	800852e <_malloc_r+0xd6>
 80084a6:	2c00      	cmp	r4, #0
 80084a8:	d04b      	beq.n	8008542 <_malloc_r+0xea>
 80084aa:	6823      	ldr	r3, [r4, #0]
 80084ac:	4639      	mov	r1, r7
 80084ae:	4630      	mov	r0, r6
 80084b0:	eb04 0903 	add.w	r9, r4, r3
 80084b4:	f001 fdc2 	bl	800a03c <_sbrk_r>
 80084b8:	4581      	cmp	r9, r0
 80084ba:	d142      	bne.n	8008542 <_malloc_r+0xea>
 80084bc:	6821      	ldr	r1, [r4, #0]
 80084be:	1a6d      	subs	r5, r5, r1
 80084c0:	4629      	mov	r1, r5
 80084c2:	4630      	mov	r0, r6
 80084c4:	f7ff ffa6 	bl	8008414 <sbrk_aligned>
 80084c8:	3001      	adds	r0, #1
 80084ca:	d03a      	beq.n	8008542 <_malloc_r+0xea>
 80084cc:	6823      	ldr	r3, [r4, #0]
 80084ce:	442b      	add	r3, r5
 80084d0:	6023      	str	r3, [r4, #0]
 80084d2:	f8d8 3000 	ldr.w	r3, [r8]
 80084d6:	685a      	ldr	r2, [r3, #4]
 80084d8:	bb62      	cbnz	r2, 8008534 <_malloc_r+0xdc>
 80084da:	f8c8 7000 	str.w	r7, [r8]
 80084de:	e00f      	b.n	8008500 <_malloc_r+0xa8>
 80084e0:	6822      	ldr	r2, [r4, #0]
 80084e2:	1b52      	subs	r2, r2, r5
 80084e4:	d420      	bmi.n	8008528 <_malloc_r+0xd0>
 80084e6:	2a0b      	cmp	r2, #11
 80084e8:	d917      	bls.n	800851a <_malloc_r+0xc2>
 80084ea:	1961      	adds	r1, r4, r5
 80084ec:	42a3      	cmp	r3, r4
 80084ee:	6025      	str	r5, [r4, #0]
 80084f0:	bf18      	it	ne
 80084f2:	6059      	strne	r1, [r3, #4]
 80084f4:	6863      	ldr	r3, [r4, #4]
 80084f6:	bf08      	it	eq
 80084f8:	f8c8 1000 	streq.w	r1, [r8]
 80084fc:	5162      	str	r2, [r4, r5]
 80084fe:	604b      	str	r3, [r1, #4]
 8008500:	4630      	mov	r0, r6
 8008502:	f000 f82f 	bl	8008564 <__malloc_unlock>
 8008506:	f104 000b 	add.w	r0, r4, #11
 800850a:	1d23      	adds	r3, r4, #4
 800850c:	f020 0007 	bic.w	r0, r0, #7
 8008510:	1ac2      	subs	r2, r0, r3
 8008512:	bf1c      	itt	ne
 8008514:	1a1b      	subne	r3, r3, r0
 8008516:	50a3      	strne	r3, [r4, r2]
 8008518:	e7af      	b.n	800847a <_malloc_r+0x22>
 800851a:	6862      	ldr	r2, [r4, #4]
 800851c:	42a3      	cmp	r3, r4
 800851e:	bf0c      	ite	eq
 8008520:	f8c8 2000 	streq.w	r2, [r8]
 8008524:	605a      	strne	r2, [r3, #4]
 8008526:	e7eb      	b.n	8008500 <_malloc_r+0xa8>
 8008528:	4623      	mov	r3, r4
 800852a:	6864      	ldr	r4, [r4, #4]
 800852c:	e7ae      	b.n	800848c <_malloc_r+0x34>
 800852e:	463c      	mov	r4, r7
 8008530:	687f      	ldr	r7, [r7, #4]
 8008532:	e7b6      	b.n	80084a2 <_malloc_r+0x4a>
 8008534:	461a      	mov	r2, r3
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	42a3      	cmp	r3, r4
 800853a:	d1fb      	bne.n	8008534 <_malloc_r+0xdc>
 800853c:	2300      	movs	r3, #0
 800853e:	6053      	str	r3, [r2, #4]
 8008540:	e7de      	b.n	8008500 <_malloc_r+0xa8>
 8008542:	230c      	movs	r3, #12
 8008544:	6033      	str	r3, [r6, #0]
 8008546:	4630      	mov	r0, r6
 8008548:	f000 f80c 	bl	8008564 <__malloc_unlock>
 800854c:	e794      	b.n	8008478 <_malloc_r+0x20>
 800854e:	6005      	str	r5, [r0, #0]
 8008550:	e7d6      	b.n	8008500 <_malloc_r+0xa8>
 8008552:	bf00      	nop
 8008554:	200045f0 	.word	0x200045f0

08008558 <__malloc_lock>:
 8008558:	4801      	ldr	r0, [pc, #4]	@ (8008560 <__malloc_lock+0x8>)
 800855a:	f7ff b8a6 	b.w	80076aa <__retarget_lock_acquire_recursive>
 800855e:	bf00      	nop
 8008560:	200045e8 	.word	0x200045e8

08008564 <__malloc_unlock>:
 8008564:	4801      	ldr	r0, [pc, #4]	@ (800856c <__malloc_unlock+0x8>)
 8008566:	f7ff b8a1 	b.w	80076ac <__retarget_lock_release_recursive>
 800856a:	bf00      	nop
 800856c:	200045e8 	.word	0x200045e8

08008570 <_Balloc>:
 8008570:	b570      	push	{r4, r5, r6, lr}
 8008572:	69c6      	ldr	r6, [r0, #28]
 8008574:	4604      	mov	r4, r0
 8008576:	460d      	mov	r5, r1
 8008578:	b976      	cbnz	r6, 8008598 <_Balloc+0x28>
 800857a:	2010      	movs	r0, #16
 800857c:	f7ff ff42 	bl	8008404 <malloc>
 8008580:	4602      	mov	r2, r0
 8008582:	61e0      	str	r0, [r4, #28]
 8008584:	b920      	cbnz	r0, 8008590 <_Balloc+0x20>
 8008586:	4b18      	ldr	r3, [pc, #96]	@ (80085e8 <_Balloc+0x78>)
 8008588:	4818      	ldr	r0, [pc, #96]	@ (80085ec <_Balloc+0x7c>)
 800858a:	216b      	movs	r1, #107	@ 0x6b
 800858c:	f001 fd70 	bl	800a070 <__assert_func>
 8008590:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008594:	6006      	str	r6, [r0, #0]
 8008596:	60c6      	str	r6, [r0, #12]
 8008598:	69e6      	ldr	r6, [r4, #28]
 800859a:	68f3      	ldr	r3, [r6, #12]
 800859c:	b183      	cbz	r3, 80085c0 <_Balloc+0x50>
 800859e:	69e3      	ldr	r3, [r4, #28]
 80085a0:	68db      	ldr	r3, [r3, #12]
 80085a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80085a6:	b9b8      	cbnz	r0, 80085d8 <_Balloc+0x68>
 80085a8:	2101      	movs	r1, #1
 80085aa:	fa01 f605 	lsl.w	r6, r1, r5
 80085ae:	1d72      	adds	r2, r6, #5
 80085b0:	0092      	lsls	r2, r2, #2
 80085b2:	4620      	mov	r0, r4
 80085b4:	f001 fd7a 	bl	800a0ac <_calloc_r>
 80085b8:	b160      	cbz	r0, 80085d4 <_Balloc+0x64>
 80085ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80085be:	e00e      	b.n	80085de <_Balloc+0x6e>
 80085c0:	2221      	movs	r2, #33	@ 0x21
 80085c2:	2104      	movs	r1, #4
 80085c4:	4620      	mov	r0, r4
 80085c6:	f001 fd71 	bl	800a0ac <_calloc_r>
 80085ca:	69e3      	ldr	r3, [r4, #28]
 80085cc:	60f0      	str	r0, [r6, #12]
 80085ce:	68db      	ldr	r3, [r3, #12]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d1e4      	bne.n	800859e <_Balloc+0x2e>
 80085d4:	2000      	movs	r0, #0
 80085d6:	bd70      	pop	{r4, r5, r6, pc}
 80085d8:	6802      	ldr	r2, [r0, #0]
 80085da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80085de:	2300      	movs	r3, #0
 80085e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80085e4:	e7f7      	b.n	80085d6 <_Balloc+0x66>
 80085e6:	bf00      	nop
 80085e8:	0800b0c6 	.word	0x0800b0c6
 80085ec:	0800b146 	.word	0x0800b146

080085f0 <_Bfree>:
 80085f0:	b570      	push	{r4, r5, r6, lr}
 80085f2:	69c6      	ldr	r6, [r0, #28]
 80085f4:	4605      	mov	r5, r0
 80085f6:	460c      	mov	r4, r1
 80085f8:	b976      	cbnz	r6, 8008618 <_Bfree+0x28>
 80085fa:	2010      	movs	r0, #16
 80085fc:	f7ff ff02 	bl	8008404 <malloc>
 8008600:	4602      	mov	r2, r0
 8008602:	61e8      	str	r0, [r5, #28]
 8008604:	b920      	cbnz	r0, 8008610 <_Bfree+0x20>
 8008606:	4b09      	ldr	r3, [pc, #36]	@ (800862c <_Bfree+0x3c>)
 8008608:	4809      	ldr	r0, [pc, #36]	@ (8008630 <_Bfree+0x40>)
 800860a:	218f      	movs	r1, #143	@ 0x8f
 800860c:	f001 fd30 	bl	800a070 <__assert_func>
 8008610:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008614:	6006      	str	r6, [r0, #0]
 8008616:	60c6      	str	r6, [r0, #12]
 8008618:	b13c      	cbz	r4, 800862a <_Bfree+0x3a>
 800861a:	69eb      	ldr	r3, [r5, #28]
 800861c:	6862      	ldr	r2, [r4, #4]
 800861e:	68db      	ldr	r3, [r3, #12]
 8008620:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008624:	6021      	str	r1, [r4, #0]
 8008626:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800862a:	bd70      	pop	{r4, r5, r6, pc}
 800862c:	0800b0c6 	.word	0x0800b0c6
 8008630:	0800b146 	.word	0x0800b146

08008634 <__multadd>:
 8008634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008638:	690d      	ldr	r5, [r1, #16]
 800863a:	4607      	mov	r7, r0
 800863c:	460c      	mov	r4, r1
 800863e:	461e      	mov	r6, r3
 8008640:	f101 0c14 	add.w	ip, r1, #20
 8008644:	2000      	movs	r0, #0
 8008646:	f8dc 3000 	ldr.w	r3, [ip]
 800864a:	b299      	uxth	r1, r3
 800864c:	fb02 6101 	mla	r1, r2, r1, r6
 8008650:	0c1e      	lsrs	r6, r3, #16
 8008652:	0c0b      	lsrs	r3, r1, #16
 8008654:	fb02 3306 	mla	r3, r2, r6, r3
 8008658:	b289      	uxth	r1, r1
 800865a:	3001      	adds	r0, #1
 800865c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008660:	4285      	cmp	r5, r0
 8008662:	f84c 1b04 	str.w	r1, [ip], #4
 8008666:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800866a:	dcec      	bgt.n	8008646 <__multadd+0x12>
 800866c:	b30e      	cbz	r6, 80086b2 <__multadd+0x7e>
 800866e:	68a3      	ldr	r3, [r4, #8]
 8008670:	42ab      	cmp	r3, r5
 8008672:	dc19      	bgt.n	80086a8 <__multadd+0x74>
 8008674:	6861      	ldr	r1, [r4, #4]
 8008676:	4638      	mov	r0, r7
 8008678:	3101      	adds	r1, #1
 800867a:	f7ff ff79 	bl	8008570 <_Balloc>
 800867e:	4680      	mov	r8, r0
 8008680:	b928      	cbnz	r0, 800868e <__multadd+0x5a>
 8008682:	4602      	mov	r2, r0
 8008684:	4b0c      	ldr	r3, [pc, #48]	@ (80086b8 <__multadd+0x84>)
 8008686:	480d      	ldr	r0, [pc, #52]	@ (80086bc <__multadd+0x88>)
 8008688:	21ba      	movs	r1, #186	@ 0xba
 800868a:	f001 fcf1 	bl	800a070 <__assert_func>
 800868e:	6922      	ldr	r2, [r4, #16]
 8008690:	3202      	adds	r2, #2
 8008692:	f104 010c 	add.w	r1, r4, #12
 8008696:	0092      	lsls	r2, r2, #2
 8008698:	300c      	adds	r0, #12
 800869a:	f7ff f808 	bl	80076ae <memcpy>
 800869e:	4621      	mov	r1, r4
 80086a0:	4638      	mov	r0, r7
 80086a2:	f7ff ffa5 	bl	80085f0 <_Bfree>
 80086a6:	4644      	mov	r4, r8
 80086a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80086ac:	3501      	adds	r5, #1
 80086ae:	615e      	str	r6, [r3, #20]
 80086b0:	6125      	str	r5, [r4, #16]
 80086b2:	4620      	mov	r0, r4
 80086b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086b8:	0800b135 	.word	0x0800b135
 80086bc:	0800b146 	.word	0x0800b146

080086c0 <__s2b>:
 80086c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086c4:	460c      	mov	r4, r1
 80086c6:	4615      	mov	r5, r2
 80086c8:	461f      	mov	r7, r3
 80086ca:	2209      	movs	r2, #9
 80086cc:	3308      	adds	r3, #8
 80086ce:	4606      	mov	r6, r0
 80086d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80086d4:	2100      	movs	r1, #0
 80086d6:	2201      	movs	r2, #1
 80086d8:	429a      	cmp	r2, r3
 80086da:	db09      	blt.n	80086f0 <__s2b+0x30>
 80086dc:	4630      	mov	r0, r6
 80086de:	f7ff ff47 	bl	8008570 <_Balloc>
 80086e2:	b940      	cbnz	r0, 80086f6 <__s2b+0x36>
 80086e4:	4602      	mov	r2, r0
 80086e6:	4b19      	ldr	r3, [pc, #100]	@ (800874c <__s2b+0x8c>)
 80086e8:	4819      	ldr	r0, [pc, #100]	@ (8008750 <__s2b+0x90>)
 80086ea:	21d3      	movs	r1, #211	@ 0xd3
 80086ec:	f001 fcc0 	bl	800a070 <__assert_func>
 80086f0:	0052      	lsls	r2, r2, #1
 80086f2:	3101      	adds	r1, #1
 80086f4:	e7f0      	b.n	80086d8 <__s2b+0x18>
 80086f6:	9b08      	ldr	r3, [sp, #32]
 80086f8:	6143      	str	r3, [r0, #20]
 80086fa:	2d09      	cmp	r5, #9
 80086fc:	f04f 0301 	mov.w	r3, #1
 8008700:	6103      	str	r3, [r0, #16]
 8008702:	dd16      	ble.n	8008732 <__s2b+0x72>
 8008704:	f104 0909 	add.w	r9, r4, #9
 8008708:	46c8      	mov	r8, r9
 800870a:	442c      	add	r4, r5
 800870c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008710:	4601      	mov	r1, r0
 8008712:	3b30      	subs	r3, #48	@ 0x30
 8008714:	220a      	movs	r2, #10
 8008716:	4630      	mov	r0, r6
 8008718:	f7ff ff8c 	bl	8008634 <__multadd>
 800871c:	45a0      	cmp	r8, r4
 800871e:	d1f5      	bne.n	800870c <__s2b+0x4c>
 8008720:	f1a5 0408 	sub.w	r4, r5, #8
 8008724:	444c      	add	r4, r9
 8008726:	1b2d      	subs	r5, r5, r4
 8008728:	1963      	adds	r3, r4, r5
 800872a:	42bb      	cmp	r3, r7
 800872c:	db04      	blt.n	8008738 <__s2b+0x78>
 800872e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008732:	340a      	adds	r4, #10
 8008734:	2509      	movs	r5, #9
 8008736:	e7f6      	b.n	8008726 <__s2b+0x66>
 8008738:	f814 3b01 	ldrb.w	r3, [r4], #1
 800873c:	4601      	mov	r1, r0
 800873e:	3b30      	subs	r3, #48	@ 0x30
 8008740:	220a      	movs	r2, #10
 8008742:	4630      	mov	r0, r6
 8008744:	f7ff ff76 	bl	8008634 <__multadd>
 8008748:	e7ee      	b.n	8008728 <__s2b+0x68>
 800874a:	bf00      	nop
 800874c:	0800b135 	.word	0x0800b135
 8008750:	0800b146 	.word	0x0800b146

08008754 <__hi0bits>:
 8008754:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008758:	4603      	mov	r3, r0
 800875a:	bf36      	itet	cc
 800875c:	0403      	lslcc	r3, r0, #16
 800875e:	2000      	movcs	r0, #0
 8008760:	2010      	movcc	r0, #16
 8008762:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008766:	bf3c      	itt	cc
 8008768:	021b      	lslcc	r3, r3, #8
 800876a:	3008      	addcc	r0, #8
 800876c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008770:	bf3c      	itt	cc
 8008772:	011b      	lslcc	r3, r3, #4
 8008774:	3004      	addcc	r0, #4
 8008776:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800877a:	bf3c      	itt	cc
 800877c:	009b      	lslcc	r3, r3, #2
 800877e:	3002      	addcc	r0, #2
 8008780:	2b00      	cmp	r3, #0
 8008782:	db05      	blt.n	8008790 <__hi0bits+0x3c>
 8008784:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008788:	f100 0001 	add.w	r0, r0, #1
 800878c:	bf08      	it	eq
 800878e:	2020      	moveq	r0, #32
 8008790:	4770      	bx	lr

08008792 <__lo0bits>:
 8008792:	6803      	ldr	r3, [r0, #0]
 8008794:	4602      	mov	r2, r0
 8008796:	f013 0007 	ands.w	r0, r3, #7
 800879a:	d00b      	beq.n	80087b4 <__lo0bits+0x22>
 800879c:	07d9      	lsls	r1, r3, #31
 800879e:	d421      	bmi.n	80087e4 <__lo0bits+0x52>
 80087a0:	0798      	lsls	r0, r3, #30
 80087a2:	bf49      	itett	mi
 80087a4:	085b      	lsrmi	r3, r3, #1
 80087a6:	089b      	lsrpl	r3, r3, #2
 80087a8:	2001      	movmi	r0, #1
 80087aa:	6013      	strmi	r3, [r2, #0]
 80087ac:	bf5c      	itt	pl
 80087ae:	6013      	strpl	r3, [r2, #0]
 80087b0:	2002      	movpl	r0, #2
 80087b2:	4770      	bx	lr
 80087b4:	b299      	uxth	r1, r3
 80087b6:	b909      	cbnz	r1, 80087bc <__lo0bits+0x2a>
 80087b8:	0c1b      	lsrs	r3, r3, #16
 80087ba:	2010      	movs	r0, #16
 80087bc:	b2d9      	uxtb	r1, r3
 80087be:	b909      	cbnz	r1, 80087c4 <__lo0bits+0x32>
 80087c0:	3008      	adds	r0, #8
 80087c2:	0a1b      	lsrs	r3, r3, #8
 80087c4:	0719      	lsls	r1, r3, #28
 80087c6:	bf04      	itt	eq
 80087c8:	091b      	lsreq	r3, r3, #4
 80087ca:	3004      	addeq	r0, #4
 80087cc:	0799      	lsls	r1, r3, #30
 80087ce:	bf04      	itt	eq
 80087d0:	089b      	lsreq	r3, r3, #2
 80087d2:	3002      	addeq	r0, #2
 80087d4:	07d9      	lsls	r1, r3, #31
 80087d6:	d403      	bmi.n	80087e0 <__lo0bits+0x4e>
 80087d8:	085b      	lsrs	r3, r3, #1
 80087da:	f100 0001 	add.w	r0, r0, #1
 80087de:	d003      	beq.n	80087e8 <__lo0bits+0x56>
 80087e0:	6013      	str	r3, [r2, #0]
 80087e2:	4770      	bx	lr
 80087e4:	2000      	movs	r0, #0
 80087e6:	4770      	bx	lr
 80087e8:	2020      	movs	r0, #32
 80087ea:	4770      	bx	lr

080087ec <__i2b>:
 80087ec:	b510      	push	{r4, lr}
 80087ee:	460c      	mov	r4, r1
 80087f0:	2101      	movs	r1, #1
 80087f2:	f7ff febd 	bl	8008570 <_Balloc>
 80087f6:	4602      	mov	r2, r0
 80087f8:	b928      	cbnz	r0, 8008806 <__i2b+0x1a>
 80087fa:	4b05      	ldr	r3, [pc, #20]	@ (8008810 <__i2b+0x24>)
 80087fc:	4805      	ldr	r0, [pc, #20]	@ (8008814 <__i2b+0x28>)
 80087fe:	f240 1145 	movw	r1, #325	@ 0x145
 8008802:	f001 fc35 	bl	800a070 <__assert_func>
 8008806:	2301      	movs	r3, #1
 8008808:	6144      	str	r4, [r0, #20]
 800880a:	6103      	str	r3, [r0, #16]
 800880c:	bd10      	pop	{r4, pc}
 800880e:	bf00      	nop
 8008810:	0800b135 	.word	0x0800b135
 8008814:	0800b146 	.word	0x0800b146

08008818 <__multiply>:
 8008818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800881c:	4614      	mov	r4, r2
 800881e:	690a      	ldr	r2, [r1, #16]
 8008820:	6923      	ldr	r3, [r4, #16]
 8008822:	429a      	cmp	r2, r3
 8008824:	bfa8      	it	ge
 8008826:	4623      	movge	r3, r4
 8008828:	460f      	mov	r7, r1
 800882a:	bfa4      	itt	ge
 800882c:	460c      	movge	r4, r1
 800882e:	461f      	movge	r7, r3
 8008830:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008834:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008838:	68a3      	ldr	r3, [r4, #8]
 800883a:	6861      	ldr	r1, [r4, #4]
 800883c:	eb0a 0609 	add.w	r6, sl, r9
 8008840:	42b3      	cmp	r3, r6
 8008842:	b085      	sub	sp, #20
 8008844:	bfb8      	it	lt
 8008846:	3101      	addlt	r1, #1
 8008848:	f7ff fe92 	bl	8008570 <_Balloc>
 800884c:	b930      	cbnz	r0, 800885c <__multiply+0x44>
 800884e:	4602      	mov	r2, r0
 8008850:	4b44      	ldr	r3, [pc, #272]	@ (8008964 <__multiply+0x14c>)
 8008852:	4845      	ldr	r0, [pc, #276]	@ (8008968 <__multiply+0x150>)
 8008854:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008858:	f001 fc0a 	bl	800a070 <__assert_func>
 800885c:	f100 0514 	add.w	r5, r0, #20
 8008860:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008864:	462b      	mov	r3, r5
 8008866:	2200      	movs	r2, #0
 8008868:	4543      	cmp	r3, r8
 800886a:	d321      	bcc.n	80088b0 <__multiply+0x98>
 800886c:	f107 0114 	add.w	r1, r7, #20
 8008870:	f104 0214 	add.w	r2, r4, #20
 8008874:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008878:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800887c:	9302      	str	r3, [sp, #8]
 800887e:	1b13      	subs	r3, r2, r4
 8008880:	3b15      	subs	r3, #21
 8008882:	f023 0303 	bic.w	r3, r3, #3
 8008886:	3304      	adds	r3, #4
 8008888:	f104 0715 	add.w	r7, r4, #21
 800888c:	42ba      	cmp	r2, r7
 800888e:	bf38      	it	cc
 8008890:	2304      	movcc	r3, #4
 8008892:	9301      	str	r3, [sp, #4]
 8008894:	9b02      	ldr	r3, [sp, #8]
 8008896:	9103      	str	r1, [sp, #12]
 8008898:	428b      	cmp	r3, r1
 800889a:	d80c      	bhi.n	80088b6 <__multiply+0x9e>
 800889c:	2e00      	cmp	r6, #0
 800889e:	dd03      	ble.n	80088a8 <__multiply+0x90>
 80088a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d05b      	beq.n	8008960 <__multiply+0x148>
 80088a8:	6106      	str	r6, [r0, #16]
 80088aa:	b005      	add	sp, #20
 80088ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088b0:	f843 2b04 	str.w	r2, [r3], #4
 80088b4:	e7d8      	b.n	8008868 <__multiply+0x50>
 80088b6:	f8b1 a000 	ldrh.w	sl, [r1]
 80088ba:	f1ba 0f00 	cmp.w	sl, #0
 80088be:	d024      	beq.n	800890a <__multiply+0xf2>
 80088c0:	f104 0e14 	add.w	lr, r4, #20
 80088c4:	46a9      	mov	r9, r5
 80088c6:	f04f 0c00 	mov.w	ip, #0
 80088ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 80088ce:	f8d9 3000 	ldr.w	r3, [r9]
 80088d2:	fa1f fb87 	uxth.w	fp, r7
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	fb0a 330b 	mla	r3, sl, fp, r3
 80088dc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80088e0:	f8d9 7000 	ldr.w	r7, [r9]
 80088e4:	4463      	add	r3, ip
 80088e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80088ea:	fb0a c70b 	mla	r7, sl, fp, ip
 80088ee:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80088f8:	4572      	cmp	r2, lr
 80088fa:	f849 3b04 	str.w	r3, [r9], #4
 80088fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008902:	d8e2      	bhi.n	80088ca <__multiply+0xb2>
 8008904:	9b01      	ldr	r3, [sp, #4]
 8008906:	f845 c003 	str.w	ip, [r5, r3]
 800890a:	9b03      	ldr	r3, [sp, #12]
 800890c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008910:	3104      	adds	r1, #4
 8008912:	f1b9 0f00 	cmp.w	r9, #0
 8008916:	d021      	beq.n	800895c <__multiply+0x144>
 8008918:	682b      	ldr	r3, [r5, #0]
 800891a:	f104 0c14 	add.w	ip, r4, #20
 800891e:	46ae      	mov	lr, r5
 8008920:	f04f 0a00 	mov.w	sl, #0
 8008924:	f8bc b000 	ldrh.w	fp, [ip]
 8008928:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800892c:	fb09 770b 	mla	r7, r9, fp, r7
 8008930:	4457      	add	r7, sl
 8008932:	b29b      	uxth	r3, r3
 8008934:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008938:	f84e 3b04 	str.w	r3, [lr], #4
 800893c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008940:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008944:	f8be 3000 	ldrh.w	r3, [lr]
 8008948:	fb09 330a 	mla	r3, r9, sl, r3
 800894c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008950:	4562      	cmp	r2, ip
 8008952:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008956:	d8e5      	bhi.n	8008924 <__multiply+0x10c>
 8008958:	9f01      	ldr	r7, [sp, #4]
 800895a:	51eb      	str	r3, [r5, r7]
 800895c:	3504      	adds	r5, #4
 800895e:	e799      	b.n	8008894 <__multiply+0x7c>
 8008960:	3e01      	subs	r6, #1
 8008962:	e79b      	b.n	800889c <__multiply+0x84>
 8008964:	0800b135 	.word	0x0800b135
 8008968:	0800b146 	.word	0x0800b146

0800896c <__pow5mult>:
 800896c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008970:	4615      	mov	r5, r2
 8008972:	f012 0203 	ands.w	r2, r2, #3
 8008976:	4607      	mov	r7, r0
 8008978:	460e      	mov	r6, r1
 800897a:	d007      	beq.n	800898c <__pow5mult+0x20>
 800897c:	4c25      	ldr	r4, [pc, #148]	@ (8008a14 <__pow5mult+0xa8>)
 800897e:	3a01      	subs	r2, #1
 8008980:	2300      	movs	r3, #0
 8008982:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008986:	f7ff fe55 	bl	8008634 <__multadd>
 800898a:	4606      	mov	r6, r0
 800898c:	10ad      	asrs	r5, r5, #2
 800898e:	d03d      	beq.n	8008a0c <__pow5mult+0xa0>
 8008990:	69fc      	ldr	r4, [r7, #28]
 8008992:	b97c      	cbnz	r4, 80089b4 <__pow5mult+0x48>
 8008994:	2010      	movs	r0, #16
 8008996:	f7ff fd35 	bl	8008404 <malloc>
 800899a:	4602      	mov	r2, r0
 800899c:	61f8      	str	r0, [r7, #28]
 800899e:	b928      	cbnz	r0, 80089ac <__pow5mult+0x40>
 80089a0:	4b1d      	ldr	r3, [pc, #116]	@ (8008a18 <__pow5mult+0xac>)
 80089a2:	481e      	ldr	r0, [pc, #120]	@ (8008a1c <__pow5mult+0xb0>)
 80089a4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80089a8:	f001 fb62 	bl	800a070 <__assert_func>
 80089ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80089b0:	6004      	str	r4, [r0, #0]
 80089b2:	60c4      	str	r4, [r0, #12]
 80089b4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80089b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80089bc:	b94c      	cbnz	r4, 80089d2 <__pow5mult+0x66>
 80089be:	f240 2171 	movw	r1, #625	@ 0x271
 80089c2:	4638      	mov	r0, r7
 80089c4:	f7ff ff12 	bl	80087ec <__i2b>
 80089c8:	2300      	movs	r3, #0
 80089ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80089ce:	4604      	mov	r4, r0
 80089d0:	6003      	str	r3, [r0, #0]
 80089d2:	f04f 0900 	mov.w	r9, #0
 80089d6:	07eb      	lsls	r3, r5, #31
 80089d8:	d50a      	bpl.n	80089f0 <__pow5mult+0x84>
 80089da:	4631      	mov	r1, r6
 80089dc:	4622      	mov	r2, r4
 80089de:	4638      	mov	r0, r7
 80089e0:	f7ff ff1a 	bl	8008818 <__multiply>
 80089e4:	4631      	mov	r1, r6
 80089e6:	4680      	mov	r8, r0
 80089e8:	4638      	mov	r0, r7
 80089ea:	f7ff fe01 	bl	80085f0 <_Bfree>
 80089ee:	4646      	mov	r6, r8
 80089f0:	106d      	asrs	r5, r5, #1
 80089f2:	d00b      	beq.n	8008a0c <__pow5mult+0xa0>
 80089f4:	6820      	ldr	r0, [r4, #0]
 80089f6:	b938      	cbnz	r0, 8008a08 <__pow5mult+0x9c>
 80089f8:	4622      	mov	r2, r4
 80089fa:	4621      	mov	r1, r4
 80089fc:	4638      	mov	r0, r7
 80089fe:	f7ff ff0b 	bl	8008818 <__multiply>
 8008a02:	6020      	str	r0, [r4, #0]
 8008a04:	f8c0 9000 	str.w	r9, [r0]
 8008a08:	4604      	mov	r4, r0
 8008a0a:	e7e4      	b.n	80089d6 <__pow5mult+0x6a>
 8008a0c:	4630      	mov	r0, r6
 8008a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a12:	bf00      	nop
 8008a14:	0800b1a0 	.word	0x0800b1a0
 8008a18:	0800b0c6 	.word	0x0800b0c6
 8008a1c:	0800b146 	.word	0x0800b146

08008a20 <__lshift>:
 8008a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a24:	460c      	mov	r4, r1
 8008a26:	6849      	ldr	r1, [r1, #4]
 8008a28:	6923      	ldr	r3, [r4, #16]
 8008a2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008a2e:	68a3      	ldr	r3, [r4, #8]
 8008a30:	4607      	mov	r7, r0
 8008a32:	4691      	mov	r9, r2
 8008a34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008a38:	f108 0601 	add.w	r6, r8, #1
 8008a3c:	42b3      	cmp	r3, r6
 8008a3e:	db0b      	blt.n	8008a58 <__lshift+0x38>
 8008a40:	4638      	mov	r0, r7
 8008a42:	f7ff fd95 	bl	8008570 <_Balloc>
 8008a46:	4605      	mov	r5, r0
 8008a48:	b948      	cbnz	r0, 8008a5e <__lshift+0x3e>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	4b28      	ldr	r3, [pc, #160]	@ (8008af0 <__lshift+0xd0>)
 8008a4e:	4829      	ldr	r0, [pc, #164]	@ (8008af4 <__lshift+0xd4>)
 8008a50:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008a54:	f001 fb0c 	bl	800a070 <__assert_func>
 8008a58:	3101      	adds	r1, #1
 8008a5a:	005b      	lsls	r3, r3, #1
 8008a5c:	e7ee      	b.n	8008a3c <__lshift+0x1c>
 8008a5e:	2300      	movs	r3, #0
 8008a60:	f100 0114 	add.w	r1, r0, #20
 8008a64:	f100 0210 	add.w	r2, r0, #16
 8008a68:	4618      	mov	r0, r3
 8008a6a:	4553      	cmp	r3, sl
 8008a6c:	db33      	blt.n	8008ad6 <__lshift+0xb6>
 8008a6e:	6920      	ldr	r0, [r4, #16]
 8008a70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a74:	f104 0314 	add.w	r3, r4, #20
 8008a78:	f019 091f 	ands.w	r9, r9, #31
 8008a7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a80:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008a84:	d02b      	beq.n	8008ade <__lshift+0xbe>
 8008a86:	f1c9 0e20 	rsb	lr, r9, #32
 8008a8a:	468a      	mov	sl, r1
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	6818      	ldr	r0, [r3, #0]
 8008a90:	fa00 f009 	lsl.w	r0, r0, r9
 8008a94:	4310      	orrs	r0, r2
 8008a96:	f84a 0b04 	str.w	r0, [sl], #4
 8008a9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a9e:	459c      	cmp	ip, r3
 8008aa0:	fa22 f20e 	lsr.w	r2, r2, lr
 8008aa4:	d8f3      	bhi.n	8008a8e <__lshift+0x6e>
 8008aa6:	ebac 0304 	sub.w	r3, ip, r4
 8008aaa:	3b15      	subs	r3, #21
 8008aac:	f023 0303 	bic.w	r3, r3, #3
 8008ab0:	3304      	adds	r3, #4
 8008ab2:	f104 0015 	add.w	r0, r4, #21
 8008ab6:	4584      	cmp	ip, r0
 8008ab8:	bf38      	it	cc
 8008aba:	2304      	movcc	r3, #4
 8008abc:	50ca      	str	r2, [r1, r3]
 8008abe:	b10a      	cbz	r2, 8008ac4 <__lshift+0xa4>
 8008ac0:	f108 0602 	add.w	r6, r8, #2
 8008ac4:	3e01      	subs	r6, #1
 8008ac6:	4638      	mov	r0, r7
 8008ac8:	612e      	str	r6, [r5, #16]
 8008aca:	4621      	mov	r1, r4
 8008acc:	f7ff fd90 	bl	80085f0 <_Bfree>
 8008ad0:	4628      	mov	r0, r5
 8008ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ad6:	f842 0f04 	str.w	r0, [r2, #4]!
 8008ada:	3301      	adds	r3, #1
 8008adc:	e7c5      	b.n	8008a6a <__lshift+0x4a>
 8008ade:	3904      	subs	r1, #4
 8008ae0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ae4:	f841 2f04 	str.w	r2, [r1, #4]!
 8008ae8:	459c      	cmp	ip, r3
 8008aea:	d8f9      	bhi.n	8008ae0 <__lshift+0xc0>
 8008aec:	e7ea      	b.n	8008ac4 <__lshift+0xa4>
 8008aee:	bf00      	nop
 8008af0:	0800b135 	.word	0x0800b135
 8008af4:	0800b146 	.word	0x0800b146

08008af8 <__mcmp>:
 8008af8:	690a      	ldr	r2, [r1, #16]
 8008afa:	4603      	mov	r3, r0
 8008afc:	6900      	ldr	r0, [r0, #16]
 8008afe:	1a80      	subs	r0, r0, r2
 8008b00:	b530      	push	{r4, r5, lr}
 8008b02:	d10e      	bne.n	8008b22 <__mcmp+0x2a>
 8008b04:	3314      	adds	r3, #20
 8008b06:	3114      	adds	r1, #20
 8008b08:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008b0c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008b10:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008b14:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008b18:	4295      	cmp	r5, r2
 8008b1a:	d003      	beq.n	8008b24 <__mcmp+0x2c>
 8008b1c:	d205      	bcs.n	8008b2a <__mcmp+0x32>
 8008b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b22:	bd30      	pop	{r4, r5, pc}
 8008b24:	42a3      	cmp	r3, r4
 8008b26:	d3f3      	bcc.n	8008b10 <__mcmp+0x18>
 8008b28:	e7fb      	b.n	8008b22 <__mcmp+0x2a>
 8008b2a:	2001      	movs	r0, #1
 8008b2c:	e7f9      	b.n	8008b22 <__mcmp+0x2a>
	...

08008b30 <__mdiff>:
 8008b30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b34:	4689      	mov	r9, r1
 8008b36:	4606      	mov	r6, r0
 8008b38:	4611      	mov	r1, r2
 8008b3a:	4648      	mov	r0, r9
 8008b3c:	4614      	mov	r4, r2
 8008b3e:	f7ff ffdb 	bl	8008af8 <__mcmp>
 8008b42:	1e05      	subs	r5, r0, #0
 8008b44:	d112      	bne.n	8008b6c <__mdiff+0x3c>
 8008b46:	4629      	mov	r1, r5
 8008b48:	4630      	mov	r0, r6
 8008b4a:	f7ff fd11 	bl	8008570 <_Balloc>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	b928      	cbnz	r0, 8008b5e <__mdiff+0x2e>
 8008b52:	4b3f      	ldr	r3, [pc, #252]	@ (8008c50 <__mdiff+0x120>)
 8008b54:	f240 2137 	movw	r1, #567	@ 0x237
 8008b58:	483e      	ldr	r0, [pc, #248]	@ (8008c54 <__mdiff+0x124>)
 8008b5a:	f001 fa89 	bl	800a070 <__assert_func>
 8008b5e:	2301      	movs	r3, #1
 8008b60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008b64:	4610      	mov	r0, r2
 8008b66:	b003      	add	sp, #12
 8008b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b6c:	bfbc      	itt	lt
 8008b6e:	464b      	movlt	r3, r9
 8008b70:	46a1      	movlt	r9, r4
 8008b72:	4630      	mov	r0, r6
 8008b74:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008b78:	bfba      	itte	lt
 8008b7a:	461c      	movlt	r4, r3
 8008b7c:	2501      	movlt	r5, #1
 8008b7e:	2500      	movge	r5, #0
 8008b80:	f7ff fcf6 	bl	8008570 <_Balloc>
 8008b84:	4602      	mov	r2, r0
 8008b86:	b918      	cbnz	r0, 8008b90 <__mdiff+0x60>
 8008b88:	4b31      	ldr	r3, [pc, #196]	@ (8008c50 <__mdiff+0x120>)
 8008b8a:	f240 2145 	movw	r1, #581	@ 0x245
 8008b8e:	e7e3      	b.n	8008b58 <__mdiff+0x28>
 8008b90:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008b94:	6926      	ldr	r6, [r4, #16]
 8008b96:	60c5      	str	r5, [r0, #12]
 8008b98:	f109 0310 	add.w	r3, r9, #16
 8008b9c:	f109 0514 	add.w	r5, r9, #20
 8008ba0:	f104 0e14 	add.w	lr, r4, #20
 8008ba4:	f100 0b14 	add.w	fp, r0, #20
 8008ba8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008bac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008bb0:	9301      	str	r3, [sp, #4]
 8008bb2:	46d9      	mov	r9, fp
 8008bb4:	f04f 0c00 	mov.w	ip, #0
 8008bb8:	9b01      	ldr	r3, [sp, #4]
 8008bba:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008bbe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008bc2:	9301      	str	r3, [sp, #4]
 8008bc4:	fa1f f38a 	uxth.w	r3, sl
 8008bc8:	4619      	mov	r1, r3
 8008bca:	b283      	uxth	r3, r0
 8008bcc:	1acb      	subs	r3, r1, r3
 8008bce:	0c00      	lsrs	r0, r0, #16
 8008bd0:	4463      	add	r3, ip
 8008bd2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008bd6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008be0:	4576      	cmp	r6, lr
 8008be2:	f849 3b04 	str.w	r3, [r9], #4
 8008be6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008bea:	d8e5      	bhi.n	8008bb8 <__mdiff+0x88>
 8008bec:	1b33      	subs	r3, r6, r4
 8008bee:	3b15      	subs	r3, #21
 8008bf0:	f023 0303 	bic.w	r3, r3, #3
 8008bf4:	3415      	adds	r4, #21
 8008bf6:	3304      	adds	r3, #4
 8008bf8:	42a6      	cmp	r6, r4
 8008bfa:	bf38      	it	cc
 8008bfc:	2304      	movcc	r3, #4
 8008bfe:	441d      	add	r5, r3
 8008c00:	445b      	add	r3, fp
 8008c02:	461e      	mov	r6, r3
 8008c04:	462c      	mov	r4, r5
 8008c06:	4544      	cmp	r4, r8
 8008c08:	d30e      	bcc.n	8008c28 <__mdiff+0xf8>
 8008c0a:	f108 0103 	add.w	r1, r8, #3
 8008c0e:	1b49      	subs	r1, r1, r5
 8008c10:	f021 0103 	bic.w	r1, r1, #3
 8008c14:	3d03      	subs	r5, #3
 8008c16:	45a8      	cmp	r8, r5
 8008c18:	bf38      	it	cc
 8008c1a:	2100      	movcc	r1, #0
 8008c1c:	440b      	add	r3, r1
 8008c1e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008c22:	b191      	cbz	r1, 8008c4a <__mdiff+0x11a>
 8008c24:	6117      	str	r7, [r2, #16]
 8008c26:	e79d      	b.n	8008b64 <__mdiff+0x34>
 8008c28:	f854 1b04 	ldr.w	r1, [r4], #4
 8008c2c:	46e6      	mov	lr, ip
 8008c2e:	0c08      	lsrs	r0, r1, #16
 8008c30:	fa1c fc81 	uxtah	ip, ip, r1
 8008c34:	4471      	add	r1, lr
 8008c36:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008c3a:	b289      	uxth	r1, r1
 8008c3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008c40:	f846 1b04 	str.w	r1, [r6], #4
 8008c44:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008c48:	e7dd      	b.n	8008c06 <__mdiff+0xd6>
 8008c4a:	3f01      	subs	r7, #1
 8008c4c:	e7e7      	b.n	8008c1e <__mdiff+0xee>
 8008c4e:	bf00      	nop
 8008c50:	0800b135 	.word	0x0800b135
 8008c54:	0800b146 	.word	0x0800b146

08008c58 <__ulp>:
 8008c58:	b082      	sub	sp, #8
 8008c5a:	ed8d 0b00 	vstr	d0, [sp]
 8008c5e:	9a01      	ldr	r2, [sp, #4]
 8008c60:	4b0f      	ldr	r3, [pc, #60]	@ (8008ca0 <__ulp+0x48>)
 8008c62:	4013      	ands	r3, r2
 8008c64:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	dc08      	bgt.n	8008c7e <__ulp+0x26>
 8008c6c:	425b      	negs	r3, r3
 8008c6e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008c72:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008c76:	da04      	bge.n	8008c82 <__ulp+0x2a>
 8008c78:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008c7c:	4113      	asrs	r3, r2
 8008c7e:	2200      	movs	r2, #0
 8008c80:	e008      	b.n	8008c94 <__ulp+0x3c>
 8008c82:	f1a2 0314 	sub.w	r3, r2, #20
 8008c86:	2b1e      	cmp	r3, #30
 8008c88:	bfda      	itte	le
 8008c8a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008c8e:	40da      	lsrle	r2, r3
 8008c90:	2201      	movgt	r2, #1
 8008c92:	2300      	movs	r3, #0
 8008c94:	4619      	mov	r1, r3
 8008c96:	4610      	mov	r0, r2
 8008c98:	ec41 0b10 	vmov	d0, r0, r1
 8008c9c:	b002      	add	sp, #8
 8008c9e:	4770      	bx	lr
 8008ca0:	7ff00000 	.word	0x7ff00000

08008ca4 <__b2d>:
 8008ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ca8:	6906      	ldr	r6, [r0, #16]
 8008caa:	f100 0814 	add.w	r8, r0, #20
 8008cae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008cb2:	1f37      	subs	r7, r6, #4
 8008cb4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008cb8:	4610      	mov	r0, r2
 8008cba:	f7ff fd4b 	bl	8008754 <__hi0bits>
 8008cbe:	f1c0 0320 	rsb	r3, r0, #32
 8008cc2:	280a      	cmp	r0, #10
 8008cc4:	600b      	str	r3, [r1, #0]
 8008cc6:	491b      	ldr	r1, [pc, #108]	@ (8008d34 <__b2d+0x90>)
 8008cc8:	dc15      	bgt.n	8008cf6 <__b2d+0x52>
 8008cca:	f1c0 0c0b 	rsb	ip, r0, #11
 8008cce:	fa22 f30c 	lsr.w	r3, r2, ip
 8008cd2:	45b8      	cmp	r8, r7
 8008cd4:	ea43 0501 	orr.w	r5, r3, r1
 8008cd8:	bf34      	ite	cc
 8008cda:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008cde:	2300      	movcs	r3, #0
 8008ce0:	3015      	adds	r0, #21
 8008ce2:	fa02 f000 	lsl.w	r0, r2, r0
 8008ce6:	fa23 f30c 	lsr.w	r3, r3, ip
 8008cea:	4303      	orrs	r3, r0
 8008cec:	461c      	mov	r4, r3
 8008cee:	ec45 4b10 	vmov	d0, r4, r5
 8008cf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cf6:	45b8      	cmp	r8, r7
 8008cf8:	bf3a      	itte	cc
 8008cfa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008cfe:	f1a6 0708 	subcc.w	r7, r6, #8
 8008d02:	2300      	movcs	r3, #0
 8008d04:	380b      	subs	r0, #11
 8008d06:	d012      	beq.n	8008d2e <__b2d+0x8a>
 8008d08:	f1c0 0120 	rsb	r1, r0, #32
 8008d0c:	fa23 f401 	lsr.w	r4, r3, r1
 8008d10:	4082      	lsls	r2, r0
 8008d12:	4322      	orrs	r2, r4
 8008d14:	4547      	cmp	r7, r8
 8008d16:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008d1a:	bf8c      	ite	hi
 8008d1c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008d20:	2200      	movls	r2, #0
 8008d22:	4083      	lsls	r3, r0
 8008d24:	40ca      	lsrs	r2, r1
 8008d26:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	e7de      	b.n	8008cec <__b2d+0x48>
 8008d2e:	ea42 0501 	orr.w	r5, r2, r1
 8008d32:	e7db      	b.n	8008cec <__b2d+0x48>
 8008d34:	3ff00000 	.word	0x3ff00000

08008d38 <__d2b>:
 8008d38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008d3c:	460f      	mov	r7, r1
 8008d3e:	2101      	movs	r1, #1
 8008d40:	ec59 8b10 	vmov	r8, r9, d0
 8008d44:	4616      	mov	r6, r2
 8008d46:	f7ff fc13 	bl	8008570 <_Balloc>
 8008d4a:	4604      	mov	r4, r0
 8008d4c:	b930      	cbnz	r0, 8008d5c <__d2b+0x24>
 8008d4e:	4602      	mov	r2, r0
 8008d50:	4b23      	ldr	r3, [pc, #140]	@ (8008de0 <__d2b+0xa8>)
 8008d52:	4824      	ldr	r0, [pc, #144]	@ (8008de4 <__d2b+0xac>)
 8008d54:	f240 310f 	movw	r1, #783	@ 0x30f
 8008d58:	f001 f98a 	bl	800a070 <__assert_func>
 8008d5c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008d60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d64:	b10d      	cbz	r5, 8008d6a <__d2b+0x32>
 8008d66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008d6a:	9301      	str	r3, [sp, #4]
 8008d6c:	f1b8 0300 	subs.w	r3, r8, #0
 8008d70:	d023      	beq.n	8008dba <__d2b+0x82>
 8008d72:	4668      	mov	r0, sp
 8008d74:	9300      	str	r3, [sp, #0]
 8008d76:	f7ff fd0c 	bl	8008792 <__lo0bits>
 8008d7a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008d7e:	b1d0      	cbz	r0, 8008db6 <__d2b+0x7e>
 8008d80:	f1c0 0320 	rsb	r3, r0, #32
 8008d84:	fa02 f303 	lsl.w	r3, r2, r3
 8008d88:	430b      	orrs	r3, r1
 8008d8a:	40c2      	lsrs	r2, r0
 8008d8c:	6163      	str	r3, [r4, #20]
 8008d8e:	9201      	str	r2, [sp, #4]
 8008d90:	9b01      	ldr	r3, [sp, #4]
 8008d92:	61a3      	str	r3, [r4, #24]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	bf0c      	ite	eq
 8008d98:	2201      	moveq	r2, #1
 8008d9a:	2202      	movne	r2, #2
 8008d9c:	6122      	str	r2, [r4, #16]
 8008d9e:	b1a5      	cbz	r5, 8008dca <__d2b+0x92>
 8008da0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008da4:	4405      	add	r5, r0
 8008da6:	603d      	str	r5, [r7, #0]
 8008da8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008dac:	6030      	str	r0, [r6, #0]
 8008dae:	4620      	mov	r0, r4
 8008db0:	b003      	add	sp, #12
 8008db2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008db6:	6161      	str	r1, [r4, #20]
 8008db8:	e7ea      	b.n	8008d90 <__d2b+0x58>
 8008dba:	a801      	add	r0, sp, #4
 8008dbc:	f7ff fce9 	bl	8008792 <__lo0bits>
 8008dc0:	9b01      	ldr	r3, [sp, #4]
 8008dc2:	6163      	str	r3, [r4, #20]
 8008dc4:	3020      	adds	r0, #32
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	e7e8      	b.n	8008d9c <__d2b+0x64>
 8008dca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008dce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008dd2:	6038      	str	r0, [r7, #0]
 8008dd4:	6918      	ldr	r0, [r3, #16]
 8008dd6:	f7ff fcbd 	bl	8008754 <__hi0bits>
 8008dda:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008dde:	e7e5      	b.n	8008dac <__d2b+0x74>
 8008de0:	0800b135 	.word	0x0800b135
 8008de4:	0800b146 	.word	0x0800b146

08008de8 <__ratio>:
 8008de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dec:	b085      	sub	sp, #20
 8008dee:	e9cd 1000 	strd	r1, r0, [sp]
 8008df2:	a902      	add	r1, sp, #8
 8008df4:	f7ff ff56 	bl	8008ca4 <__b2d>
 8008df8:	9800      	ldr	r0, [sp, #0]
 8008dfa:	a903      	add	r1, sp, #12
 8008dfc:	ec55 4b10 	vmov	r4, r5, d0
 8008e00:	f7ff ff50 	bl	8008ca4 <__b2d>
 8008e04:	9b01      	ldr	r3, [sp, #4]
 8008e06:	6919      	ldr	r1, [r3, #16]
 8008e08:	9b00      	ldr	r3, [sp, #0]
 8008e0a:	691b      	ldr	r3, [r3, #16]
 8008e0c:	1ac9      	subs	r1, r1, r3
 8008e0e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008e12:	1a9b      	subs	r3, r3, r2
 8008e14:	ec5b ab10 	vmov	sl, fp, d0
 8008e18:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	bfce      	itee	gt
 8008e20:	462a      	movgt	r2, r5
 8008e22:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008e26:	465a      	movle	r2, fp
 8008e28:	462f      	mov	r7, r5
 8008e2a:	46d9      	mov	r9, fp
 8008e2c:	bfcc      	ite	gt
 8008e2e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008e32:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008e36:	464b      	mov	r3, r9
 8008e38:	4652      	mov	r2, sl
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	4639      	mov	r1, r7
 8008e3e:	f7f7 fd05 	bl	800084c <__aeabi_ddiv>
 8008e42:	ec41 0b10 	vmov	d0, r0, r1
 8008e46:	b005      	add	sp, #20
 8008e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008e4c <__copybits>:
 8008e4c:	3901      	subs	r1, #1
 8008e4e:	b570      	push	{r4, r5, r6, lr}
 8008e50:	1149      	asrs	r1, r1, #5
 8008e52:	6914      	ldr	r4, [r2, #16]
 8008e54:	3101      	adds	r1, #1
 8008e56:	f102 0314 	add.w	r3, r2, #20
 8008e5a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008e5e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008e62:	1f05      	subs	r5, r0, #4
 8008e64:	42a3      	cmp	r3, r4
 8008e66:	d30c      	bcc.n	8008e82 <__copybits+0x36>
 8008e68:	1aa3      	subs	r3, r4, r2
 8008e6a:	3b11      	subs	r3, #17
 8008e6c:	f023 0303 	bic.w	r3, r3, #3
 8008e70:	3211      	adds	r2, #17
 8008e72:	42a2      	cmp	r2, r4
 8008e74:	bf88      	it	hi
 8008e76:	2300      	movhi	r3, #0
 8008e78:	4418      	add	r0, r3
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	4288      	cmp	r0, r1
 8008e7e:	d305      	bcc.n	8008e8c <__copybits+0x40>
 8008e80:	bd70      	pop	{r4, r5, r6, pc}
 8008e82:	f853 6b04 	ldr.w	r6, [r3], #4
 8008e86:	f845 6f04 	str.w	r6, [r5, #4]!
 8008e8a:	e7eb      	b.n	8008e64 <__copybits+0x18>
 8008e8c:	f840 3b04 	str.w	r3, [r0], #4
 8008e90:	e7f4      	b.n	8008e7c <__copybits+0x30>

08008e92 <__any_on>:
 8008e92:	f100 0214 	add.w	r2, r0, #20
 8008e96:	6900      	ldr	r0, [r0, #16]
 8008e98:	114b      	asrs	r3, r1, #5
 8008e9a:	4298      	cmp	r0, r3
 8008e9c:	b510      	push	{r4, lr}
 8008e9e:	db11      	blt.n	8008ec4 <__any_on+0x32>
 8008ea0:	dd0a      	ble.n	8008eb8 <__any_on+0x26>
 8008ea2:	f011 011f 	ands.w	r1, r1, #31
 8008ea6:	d007      	beq.n	8008eb8 <__any_on+0x26>
 8008ea8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008eac:	fa24 f001 	lsr.w	r0, r4, r1
 8008eb0:	fa00 f101 	lsl.w	r1, r0, r1
 8008eb4:	428c      	cmp	r4, r1
 8008eb6:	d10b      	bne.n	8008ed0 <__any_on+0x3e>
 8008eb8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d803      	bhi.n	8008ec8 <__any_on+0x36>
 8008ec0:	2000      	movs	r0, #0
 8008ec2:	bd10      	pop	{r4, pc}
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	e7f7      	b.n	8008eb8 <__any_on+0x26>
 8008ec8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008ecc:	2900      	cmp	r1, #0
 8008ece:	d0f5      	beq.n	8008ebc <__any_on+0x2a>
 8008ed0:	2001      	movs	r0, #1
 8008ed2:	e7f6      	b.n	8008ec2 <__any_on+0x30>

08008ed4 <sulp>:
 8008ed4:	b570      	push	{r4, r5, r6, lr}
 8008ed6:	4604      	mov	r4, r0
 8008ed8:	460d      	mov	r5, r1
 8008eda:	ec45 4b10 	vmov	d0, r4, r5
 8008ede:	4616      	mov	r6, r2
 8008ee0:	f7ff feba 	bl	8008c58 <__ulp>
 8008ee4:	ec51 0b10 	vmov	r0, r1, d0
 8008ee8:	b17e      	cbz	r6, 8008f0a <sulp+0x36>
 8008eea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008eee:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	dd09      	ble.n	8008f0a <sulp+0x36>
 8008ef6:	051b      	lsls	r3, r3, #20
 8008ef8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008efc:	2400      	movs	r4, #0
 8008efe:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008f02:	4622      	mov	r2, r4
 8008f04:	462b      	mov	r3, r5
 8008f06:	f7f7 fb77 	bl	80005f8 <__aeabi_dmul>
 8008f0a:	ec41 0b10 	vmov	d0, r0, r1
 8008f0e:	bd70      	pop	{r4, r5, r6, pc}

08008f10 <_strtod_l>:
 8008f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f14:	b09f      	sub	sp, #124	@ 0x7c
 8008f16:	460c      	mov	r4, r1
 8008f18:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	921a      	str	r2, [sp, #104]	@ 0x68
 8008f1e:	9005      	str	r0, [sp, #20]
 8008f20:	f04f 0a00 	mov.w	sl, #0
 8008f24:	f04f 0b00 	mov.w	fp, #0
 8008f28:	460a      	mov	r2, r1
 8008f2a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008f2c:	7811      	ldrb	r1, [r2, #0]
 8008f2e:	292b      	cmp	r1, #43	@ 0x2b
 8008f30:	d04a      	beq.n	8008fc8 <_strtod_l+0xb8>
 8008f32:	d838      	bhi.n	8008fa6 <_strtod_l+0x96>
 8008f34:	290d      	cmp	r1, #13
 8008f36:	d832      	bhi.n	8008f9e <_strtod_l+0x8e>
 8008f38:	2908      	cmp	r1, #8
 8008f3a:	d832      	bhi.n	8008fa2 <_strtod_l+0x92>
 8008f3c:	2900      	cmp	r1, #0
 8008f3e:	d03b      	beq.n	8008fb8 <_strtod_l+0xa8>
 8008f40:	2200      	movs	r2, #0
 8008f42:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008f44:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008f46:	782a      	ldrb	r2, [r5, #0]
 8008f48:	2a30      	cmp	r2, #48	@ 0x30
 8008f4a:	f040 80b3 	bne.w	80090b4 <_strtod_l+0x1a4>
 8008f4e:	786a      	ldrb	r2, [r5, #1]
 8008f50:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008f54:	2a58      	cmp	r2, #88	@ 0x58
 8008f56:	d16e      	bne.n	8009036 <_strtod_l+0x126>
 8008f58:	9302      	str	r3, [sp, #8]
 8008f5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f5c:	9301      	str	r3, [sp, #4]
 8008f5e:	ab1a      	add	r3, sp, #104	@ 0x68
 8008f60:	9300      	str	r3, [sp, #0]
 8008f62:	4a8e      	ldr	r2, [pc, #568]	@ (800919c <_strtod_l+0x28c>)
 8008f64:	9805      	ldr	r0, [sp, #20]
 8008f66:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008f68:	a919      	add	r1, sp, #100	@ 0x64
 8008f6a:	f001 f91b 	bl	800a1a4 <__gethex>
 8008f6e:	f010 060f 	ands.w	r6, r0, #15
 8008f72:	4604      	mov	r4, r0
 8008f74:	d005      	beq.n	8008f82 <_strtod_l+0x72>
 8008f76:	2e06      	cmp	r6, #6
 8008f78:	d128      	bne.n	8008fcc <_strtod_l+0xbc>
 8008f7a:	3501      	adds	r5, #1
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008f80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f82:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	f040 858e 	bne.w	8009aa6 <_strtod_l+0xb96>
 8008f8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f8c:	b1cb      	cbz	r3, 8008fc2 <_strtod_l+0xb2>
 8008f8e:	4652      	mov	r2, sl
 8008f90:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008f94:	ec43 2b10 	vmov	d0, r2, r3
 8008f98:	b01f      	add	sp, #124	@ 0x7c
 8008f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f9e:	2920      	cmp	r1, #32
 8008fa0:	d1ce      	bne.n	8008f40 <_strtod_l+0x30>
 8008fa2:	3201      	adds	r2, #1
 8008fa4:	e7c1      	b.n	8008f2a <_strtod_l+0x1a>
 8008fa6:	292d      	cmp	r1, #45	@ 0x2d
 8008fa8:	d1ca      	bne.n	8008f40 <_strtod_l+0x30>
 8008faa:	2101      	movs	r1, #1
 8008fac:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008fae:	1c51      	adds	r1, r2, #1
 8008fb0:	9119      	str	r1, [sp, #100]	@ 0x64
 8008fb2:	7852      	ldrb	r2, [r2, #1]
 8008fb4:	2a00      	cmp	r2, #0
 8008fb6:	d1c5      	bne.n	8008f44 <_strtod_l+0x34>
 8008fb8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008fba:	9419      	str	r4, [sp, #100]	@ 0x64
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	f040 8570 	bne.w	8009aa2 <_strtod_l+0xb92>
 8008fc2:	4652      	mov	r2, sl
 8008fc4:	465b      	mov	r3, fp
 8008fc6:	e7e5      	b.n	8008f94 <_strtod_l+0x84>
 8008fc8:	2100      	movs	r1, #0
 8008fca:	e7ef      	b.n	8008fac <_strtod_l+0x9c>
 8008fcc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008fce:	b13a      	cbz	r2, 8008fe0 <_strtod_l+0xd0>
 8008fd0:	2135      	movs	r1, #53	@ 0x35
 8008fd2:	a81c      	add	r0, sp, #112	@ 0x70
 8008fd4:	f7ff ff3a 	bl	8008e4c <__copybits>
 8008fd8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008fda:	9805      	ldr	r0, [sp, #20]
 8008fdc:	f7ff fb08 	bl	80085f0 <_Bfree>
 8008fe0:	3e01      	subs	r6, #1
 8008fe2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008fe4:	2e04      	cmp	r6, #4
 8008fe6:	d806      	bhi.n	8008ff6 <_strtod_l+0xe6>
 8008fe8:	e8df f006 	tbb	[pc, r6]
 8008fec:	201d0314 	.word	0x201d0314
 8008ff0:	14          	.byte	0x14
 8008ff1:	00          	.byte	0x00
 8008ff2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008ff6:	05e1      	lsls	r1, r4, #23
 8008ff8:	bf48      	it	mi
 8008ffa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008ffe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009002:	0d1b      	lsrs	r3, r3, #20
 8009004:	051b      	lsls	r3, r3, #20
 8009006:	2b00      	cmp	r3, #0
 8009008:	d1bb      	bne.n	8008f82 <_strtod_l+0x72>
 800900a:	f7fe fb23 	bl	8007654 <__errno>
 800900e:	2322      	movs	r3, #34	@ 0x22
 8009010:	6003      	str	r3, [r0, #0]
 8009012:	e7b6      	b.n	8008f82 <_strtod_l+0x72>
 8009014:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009018:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800901c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009020:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009024:	e7e7      	b.n	8008ff6 <_strtod_l+0xe6>
 8009026:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80091a4 <_strtod_l+0x294>
 800902a:	e7e4      	b.n	8008ff6 <_strtod_l+0xe6>
 800902c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009030:	f04f 3aff 	mov.w	sl, #4294967295
 8009034:	e7df      	b.n	8008ff6 <_strtod_l+0xe6>
 8009036:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009038:	1c5a      	adds	r2, r3, #1
 800903a:	9219      	str	r2, [sp, #100]	@ 0x64
 800903c:	785b      	ldrb	r3, [r3, #1]
 800903e:	2b30      	cmp	r3, #48	@ 0x30
 8009040:	d0f9      	beq.n	8009036 <_strtod_l+0x126>
 8009042:	2b00      	cmp	r3, #0
 8009044:	d09d      	beq.n	8008f82 <_strtod_l+0x72>
 8009046:	2301      	movs	r3, #1
 8009048:	9309      	str	r3, [sp, #36]	@ 0x24
 800904a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800904c:	930c      	str	r3, [sp, #48]	@ 0x30
 800904e:	2300      	movs	r3, #0
 8009050:	9308      	str	r3, [sp, #32]
 8009052:	930a      	str	r3, [sp, #40]	@ 0x28
 8009054:	461f      	mov	r7, r3
 8009056:	220a      	movs	r2, #10
 8009058:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800905a:	7805      	ldrb	r5, [r0, #0]
 800905c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009060:	b2d9      	uxtb	r1, r3
 8009062:	2909      	cmp	r1, #9
 8009064:	d928      	bls.n	80090b8 <_strtod_l+0x1a8>
 8009066:	494e      	ldr	r1, [pc, #312]	@ (80091a0 <_strtod_l+0x290>)
 8009068:	2201      	movs	r2, #1
 800906a:	f000 ffd5 	bl	800a018 <strncmp>
 800906e:	2800      	cmp	r0, #0
 8009070:	d032      	beq.n	80090d8 <_strtod_l+0x1c8>
 8009072:	2000      	movs	r0, #0
 8009074:	462a      	mov	r2, r5
 8009076:	4681      	mov	r9, r0
 8009078:	463d      	mov	r5, r7
 800907a:	4603      	mov	r3, r0
 800907c:	2a65      	cmp	r2, #101	@ 0x65
 800907e:	d001      	beq.n	8009084 <_strtod_l+0x174>
 8009080:	2a45      	cmp	r2, #69	@ 0x45
 8009082:	d114      	bne.n	80090ae <_strtod_l+0x19e>
 8009084:	b91d      	cbnz	r5, 800908e <_strtod_l+0x17e>
 8009086:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009088:	4302      	orrs	r2, r0
 800908a:	d095      	beq.n	8008fb8 <_strtod_l+0xa8>
 800908c:	2500      	movs	r5, #0
 800908e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009090:	1c62      	adds	r2, r4, #1
 8009092:	9219      	str	r2, [sp, #100]	@ 0x64
 8009094:	7862      	ldrb	r2, [r4, #1]
 8009096:	2a2b      	cmp	r2, #43	@ 0x2b
 8009098:	d077      	beq.n	800918a <_strtod_l+0x27a>
 800909a:	2a2d      	cmp	r2, #45	@ 0x2d
 800909c:	d07b      	beq.n	8009196 <_strtod_l+0x286>
 800909e:	f04f 0c00 	mov.w	ip, #0
 80090a2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80090a6:	2909      	cmp	r1, #9
 80090a8:	f240 8082 	bls.w	80091b0 <_strtod_l+0x2a0>
 80090ac:	9419      	str	r4, [sp, #100]	@ 0x64
 80090ae:	f04f 0800 	mov.w	r8, #0
 80090b2:	e0a2      	b.n	80091fa <_strtod_l+0x2ea>
 80090b4:	2300      	movs	r3, #0
 80090b6:	e7c7      	b.n	8009048 <_strtod_l+0x138>
 80090b8:	2f08      	cmp	r7, #8
 80090ba:	bfd5      	itete	le
 80090bc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80090be:	9908      	ldrgt	r1, [sp, #32]
 80090c0:	fb02 3301 	mlale	r3, r2, r1, r3
 80090c4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80090c8:	f100 0001 	add.w	r0, r0, #1
 80090cc:	bfd4      	ite	le
 80090ce:	930a      	strle	r3, [sp, #40]	@ 0x28
 80090d0:	9308      	strgt	r3, [sp, #32]
 80090d2:	3701      	adds	r7, #1
 80090d4:	9019      	str	r0, [sp, #100]	@ 0x64
 80090d6:	e7bf      	b.n	8009058 <_strtod_l+0x148>
 80090d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80090da:	1c5a      	adds	r2, r3, #1
 80090dc:	9219      	str	r2, [sp, #100]	@ 0x64
 80090de:	785a      	ldrb	r2, [r3, #1]
 80090e0:	b37f      	cbz	r7, 8009142 <_strtod_l+0x232>
 80090e2:	4681      	mov	r9, r0
 80090e4:	463d      	mov	r5, r7
 80090e6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80090ea:	2b09      	cmp	r3, #9
 80090ec:	d912      	bls.n	8009114 <_strtod_l+0x204>
 80090ee:	2301      	movs	r3, #1
 80090f0:	e7c4      	b.n	800907c <_strtod_l+0x16c>
 80090f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80090f4:	1c5a      	adds	r2, r3, #1
 80090f6:	9219      	str	r2, [sp, #100]	@ 0x64
 80090f8:	785a      	ldrb	r2, [r3, #1]
 80090fa:	3001      	adds	r0, #1
 80090fc:	2a30      	cmp	r2, #48	@ 0x30
 80090fe:	d0f8      	beq.n	80090f2 <_strtod_l+0x1e2>
 8009100:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009104:	2b08      	cmp	r3, #8
 8009106:	f200 84d3 	bhi.w	8009ab0 <_strtod_l+0xba0>
 800910a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800910c:	930c      	str	r3, [sp, #48]	@ 0x30
 800910e:	4681      	mov	r9, r0
 8009110:	2000      	movs	r0, #0
 8009112:	4605      	mov	r5, r0
 8009114:	3a30      	subs	r2, #48	@ 0x30
 8009116:	f100 0301 	add.w	r3, r0, #1
 800911a:	d02a      	beq.n	8009172 <_strtod_l+0x262>
 800911c:	4499      	add	r9, r3
 800911e:	eb00 0c05 	add.w	ip, r0, r5
 8009122:	462b      	mov	r3, r5
 8009124:	210a      	movs	r1, #10
 8009126:	4563      	cmp	r3, ip
 8009128:	d10d      	bne.n	8009146 <_strtod_l+0x236>
 800912a:	1c69      	adds	r1, r5, #1
 800912c:	4401      	add	r1, r0
 800912e:	4428      	add	r0, r5
 8009130:	2808      	cmp	r0, #8
 8009132:	dc16      	bgt.n	8009162 <_strtod_l+0x252>
 8009134:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009136:	230a      	movs	r3, #10
 8009138:	fb03 2300 	mla	r3, r3, r0, r2
 800913c:	930a      	str	r3, [sp, #40]	@ 0x28
 800913e:	2300      	movs	r3, #0
 8009140:	e018      	b.n	8009174 <_strtod_l+0x264>
 8009142:	4638      	mov	r0, r7
 8009144:	e7da      	b.n	80090fc <_strtod_l+0x1ec>
 8009146:	2b08      	cmp	r3, #8
 8009148:	f103 0301 	add.w	r3, r3, #1
 800914c:	dc03      	bgt.n	8009156 <_strtod_l+0x246>
 800914e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009150:	434e      	muls	r6, r1
 8009152:	960a      	str	r6, [sp, #40]	@ 0x28
 8009154:	e7e7      	b.n	8009126 <_strtod_l+0x216>
 8009156:	2b10      	cmp	r3, #16
 8009158:	bfde      	ittt	le
 800915a:	9e08      	ldrle	r6, [sp, #32]
 800915c:	434e      	mulle	r6, r1
 800915e:	9608      	strle	r6, [sp, #32]
 8009160:	e7e1      	b.n	8009126 <_strtod_l+0x216>
 8009162:	280f      	cmp	r0, #15
 8009164:	dceb      	bgt.n	800913e <_strtod_l+0x22e>
 8009166:	9808      	ldr	r0, [sp, #32]
 8009168:	230a      	movs	r3, #10
 800916a:	fb03 2300 	mla	r3, r3, r0, r2
 800916e:	9308      	str	r3, [sp, #32]
 8009170:	e7e5      	b.n	800913e <_strtod_l+0x22e>
 8009172:	4629      	mov	r1, r5
 8009174:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009176:	1c50      	adds	r0, r2, #1
 8009178:	9019      	str	r0, [sp, #100]	@ 0x64
 800917a:	7852      	ldrb	r2, [r2, #1]
 800917c:	4618      	mov	r0, r3
 800917e:	460d      	mov	r5, r1
 8009180:	e7b1      	b.n	80090e6 <_strtod_l+0x1d6>
 8009182:	f04f 0900 	mov.w	r9, #0
 8009186:	2301      	movs	r3, #1
 8009188:	e77d      	b.n	8009086 <_strtod_l+0x176>
 800918a:	f04f 0c00 	mov.w	ip, #0
 800918e:	1ca2      	adds	r2, r4, #2
 8009190:	9219      	str	r2, [sp, #100]	@ 0x64
 8009192:	78a2      	ldrb	r2, [r4, #2]
 8009194:	e785      	b.n	80090a2 <_strtod_l+0x192>
 8009196:	f04f 0c01 	mov.w	ip, #1
 800919a:	e7f8      	b.n	800918e <_strtod_l+0x27e>
 800919c:	0800b2b8 	.word	0x0800b2b8
 80091a0:	0800b2a0 	.word	0x0800b2a0
 80091a4:	7ff00000 	.word	0x7ff00000
 80091a8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80091aa:	1c51      	adds	r1, r2, #1
 80091ac:	9119      	str	r1, [sp, #100]	@ 0x64
 80091ae:	7852      	ldrb	r2, [r2, #1]
 80091b0:	2a30      	cmp	r2, #48	@ 0x30
 80091b2:	d0f9      	beq.n	80091a8 <_strtod_l+0x298>
 80091b4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80091b8:	2908      	cmp	r1, #8
 80091ba:	f63f af78 	bhi.w	80090ae <_strtod_l+0x19e>
 80091be:	3a30      	subs	r2, #48	@ 0x30
 80091c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80091c2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80091c4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80091c6:	f04f 080a 	mov.w	r8, #10
 80091ca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80091cc:	1c56      	adds	r6, r2, #1
 80091ce:	9619      	str	r6, [sp, #100]	@ 0x64
 80091d0:	7852      	ldrb	r2, [r2, #1]
 80091d2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80091d6:	f1be 0f09 	cmp.w	lr, #9
 80091da:	d939      	bls.n	8009250 <_strtod_l+0x340>
 80091dc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80091de:	1a76      	subs	r6, r6, r1
 80091e0:	2e08      	cmp	r6, #8
 80091e2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80091e6:	dc03      	bgt.n	80091f0 <_strtod_l+0x2e0>
 80091e8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80091ea:	4588      	cmp	r8, r1
 80091ec:	bfa8      	it	ge
 80091ee:	4688      	movge	r8, r1
 80091f0:	f1bc 0f00 	cmp.w	ip, #0
 80091f4:	d001      	beq.n	80091fa <_strtod_l+0x2ea>
 80091f6:	f1c8 0800 	rsb	r8, r8, #0
 80091fa:	2d00      	cmp	r5, #0
 80091fc:	d14e      	bne.n	800929c <_strtod_l+0x38c>
 80091fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009200:	4308      	orrs	r0, r1
 8009202:	f47f aebe 	bne.w	8008f82 <_strtod_l+0x72>
 8009206:	2b00      	cmp	r3, #0
 8009208:	f47f aed6 	bne.w	8008fb8 <_strtod_l+0xa8>
 800920c:	2a69      	cmp	r2, #105	@ 0x69
 800920e:	d028      	beq.n	8009262 <_strtod_l+0x352>
 8009210:	dc25      	bgt.n	800925e <_strtod_l+0x34e>
 8009212:	2a49      	cmp	r2, #73	@ 0x49
 8009214:	d025      	beq.n	8009262 <_strtod_l+0x352>
 8009216:	2a4e      	cmp	r2, #78	@ 0x4e
 8009218:	f47f aece 	bne.w	8008fb8 <_strtod_l+0xa8>
 800921c:	499b      	ldr	r1, [pc, #620]	@ (800948c <_strtod_l+0x57c>)
 800921e:	a819      	add	r0, sp, #100	@ 0x64
 8009220:	f001 f9e2 	bl	800a5e8 <__match>
 8009224:	2800      	cmp	r0, #0
 8009226:	f43f aec7 	beq.w	8008fb8 <_strtod_l+0xa8>
 800922a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	2b28      	cmp	r3, #40	@ 0x28
 8009230:	d12e      	bne.n	8009290 <_strtod_l+0x380>
 8009232:	4997      	ldr	r1, [pc, #604]	@ (8009490 <_strtod_l+0x580>)
 8009234:	aa1c      	add	r2, sp, #112	@ 0x70
 8009236:	a819      	add	r0, sp, #100	@ 0x64
 8009238:	f001 f9ea 	bl	800a610 <__hexnan>
 800923c:	2805      	cmp	r0, #5
 800923e:	d127      	bne.n	8009290 <_strtod_l+0x380>
 8009240:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009242:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009246:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800924a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800924e:	e698      	b.n	8008f82 <_strtod_l+0x72>
 8009250:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009252:	fb08 2101 	mla	r1, r8, r1, r2
 8009256:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800925a:	920e      	str	r2, [sp, #56]	@ 0x38
 800925c:	e7b5      	b.n	80091ca <_strtod_l+0x2ba>
 800925e:	2a6e      	cmp	r2, #110	@ 0x6e
 8009260:	e7da      	b.n	8009218 <_strtod_l+0x308>
 8009262:	498c      	ldr	r1, [pc, #560]	@ (8009494 <_strtod_l+0x584>)
 8009264:	a819      	add	r0, sp, #100	@ 0x64
 8009266:	f001 f9bf 	bl	800a5e8 <__match>
 800926a:	2800      	cmp	r0, #0
 800926c:	f43f aea4 	beq.w	8008fb8 <_strtod_l+0xa8>
 8009270:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009272:	4989      	ldr	r1, [pc, #548]	@ (8009498 <_strtod_l+0x588>)
 8009274:	3b01      	subs	r3, #1
 8009276:	a819      	add	r0, sp, #100	@ 0x64
 8009278:	9319      	str	r3, [sp, #100]	@ 0x64
 800927a:	f001 f9b5 	bl	800a5e8 <__match>
 800927e:	b910      	cbnz	r0, 8009286 <_strtod_l+0x376>
 8009280:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009282:	3301      	adds	r3, #1
 8009284:	9319      	str	r3, [sp, #100]	@ 0x64
 8009286:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80094a8 <_strtod_l+0x598>
 800928a:	f04f 0a00 	mov.w	sl, #0
 800928e:	e678      	b.n	8008f82 <_strtod_l+0x72>
 8009290:	4882      	ldr	r0, [pc, #520]	@ (800949c <_strtod_l+0x58c>)
 8009292:	f000 fee5 	bl	800a060 <nan>
 8009296:	ec5b ab10 	vmov	sl, fp, d0
 800929a:	e672      	b.n	8008f82 <_strtod_l+0x72>
 800929c:	eba8 0309 	sub.w	r3, r8, r9
 80092a0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80092a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80092a4:	2f00      	cmp	r7, #0
 80092a6:	bf08      	it	eq
 80092a8:	462f      	moveq	r7, r5
 80092aa:	2d10      	cmp	r5, #16
 80092ac:	462c      	mov	r4, r5
 80092ae:	bfa8      	it	ge
 80092b0:	2410      	movge	r4, #16
 80092b2:	f7f7 f927 	bl	8000504 <__aeabi_ui2d>
 80092b6:	2d09      	cmp	r5, #9
 80092b8:	4682      	mov	sl, r0
 80092ba:	468b      	mov	fp, r1
 80092bc:	dc13      	bgt.n	80092e6 <_strtod_l+0x3d6>
 80092be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	f43f ae5e 	beq.w	8008f82 <_strtod_l+0x72>
 80092c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092c8:	dd78      	ble.n	80093bc <_strtod_l+0x4ac>
 80092ca:	2b16      	cmp	r3, #22
 80092cc:	dc5f      	bgt.n	800938e <_strtod_l+0x47e>
 80092ce:	4974      	ldr	r1, [pc, #464]	@ (80094a0 <_strtod_l+0x590>)
 80092d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80092d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092d8:	4652      	mov	r2, sl
 80092da:	465b      	mov	r3, fp
 80092dc:	f7f7 f98c 	bl	80005f8 <__aeabi_dmul>
 80092e0:	4682      	mov	sl, r0
 80092e2:	468b      	mov	fp, r1
 80092e4:	e64d      	b.n	8008f82 <_strtod_l+0x72>
 80092e6:	4b6e      	ldr	r3, [pc, #440]	@ (80094a0 <_strtod_l+0x590>)
 80092e8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80092ec:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80092f0:	f7f7 f982 	bl	80005f8 <__aeabi_dmul>
 80092f4:	4682      	mov	sl, r0
 80092f6:	9808      	ldr	r0, [sp, #32]
 80092f8:	468b      	mov	fp, r1
 80092fa:	f7f7 f903 	bl	8000504 <__aeabi_ui2d>
 80092fe:	4602      	mov	r2, r0
 8009300:	460b      	mov	r3, r1
 8009302:	4650      	mov	r0, sl
 8009304:	4659      	mov	r1, fp
 8009306:	f7f6 ffc1 	bl	800028c <__adddf3>
 800930a:	2d0f      	cmp	r5, #15
 800930c:	4682      	mov	sl, r0
 800930e:	468b      	mov	fp, r1
 8009310:	ddd5      	ble.n	80092be <_strtod_l+0x3ae>
 8009312:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009314:	1b2c      	subs	r4, r5, r4
 8009316:	441c      	add	r4, r3
 8009318:	2c00      	cmp	r4, #0
 800931a:	f340 8096 	ble.w	800944a <_strtod_l+0x53a>
 800931e:	f014 030f 	ands.w	r3, r4, #15
 8009322:	d00a      	beq.n	800933a <_strtod_l+0x42a>
 8009324:	495e      	ldr	r1, [pc, #376]	@ (80094a0 <_strtod_l+0x590>)
 8009326:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800932a:	4652      	mov	r2, sl
 800932c:	465b      	mov	r3, fp
 800932e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009332:	f7f7 f961 	bl	80005f8 <__aeabi_dmul>
 8009336:	4682      	mov	sl, r0
 8009338:	468b      	mov	fp, r1
 800933a:	f034 040f 	bics.w	r4, r4, #15
 800933e:	d073      	beq.n	8009428 <_strtod_l+0x518>
 8009340:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009344:	dd48      	ble.n	80093d8 <_strtod_l+0x4c8>
 8009346:	2400      	movs	r4, #0
 8009348:	46a0      	mov	r8, r4
 800934a:	940a      	str	r4, [sp, #40]	@ 0x28
 800934c:	46a1      	mov	r9, r4
 800934e:	9a05      	ldr	r2, [sp, #20]
 8009350:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80094a8 <_strtod_l+0x598>
 8009354:	2322      	movs	r3, #34	@ 0x22
 8009356:	6013      	str	r3, [r2, #0]
 8009358:	f04f 0a00 	mov.w	sl, #0
 800935c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800935e:	2b00      	cmp	r3, #0
 8009360:	f43f ae0f 	beq.w	8008f82 <_strtod_l+0x72>
 8009364:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009366:	9805      	ldr	r0, [sp, #20]
 8009368:	f7ff f942 	bl	80085f0 <_Bfree>
 800936c:	9805      	ldr	r0, [sp, #20]
 800936e:	4649      	mov	r1, r9
 8009370:	f7ff f93e 	bl	80085f0 <_Bfree>
 8009374:	9805      	ldr	r0, [sp, #20]
 8009376:	4641      	mov	r1, r8
 8009378:	f7ff f93a 	bl	80085f0 <_Bfree>
 800937c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800937e:	9805      	ldr	r0, [sp, #20]
 8009380:	f7ff f936 	bl	80085f0 <_Bfree>
 8009384:	9805      	ldr	r0, [sp, #20]
 8009386:	4621      	mov	r1, r4
 8009388:	f7ff f932 	bl	80085f0 <_Bfree>
 800938c:	e5f9      	b.n	8008f82 <_strtod_l+0x72>
 800938e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009390:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009394:	4293      	cmp	r3, r2
 8009396:	dbbc      	blt.n	8009312 <_strtod_l+0x402>
 8009398:	4c41      	ldr	r4, [pc, #260]	@ (80094a0 <_strtod_l+0x590>)
 800939a:	f1c5 050f 	rsb	r5, r5, #15
 800939e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80093a2:	4652      	mov	r2, sl
 80093a4:	465b      	mov	r3, fp
 80093a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093aa:	f7f7 f925 	bl	80005f8 <__aeabi_dmul>
 80093ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093b0:	1b5d      	subs	r5, r3, r5
 80093b2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80093b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80093ba:	e78f      	b.n	80092dc <_strtod_l+0x3cc>
 80093bc:	3316      	adds	r3, #22
 80093be:	dba8      	blt.n	8009312 <_strtod_l+0x402>
 80093c0:	4b37      	ldr	r3, [pc, #220]	@ (80094a0 <_strtod_l+0x590>)
 80093c2:	eba9 0808 	sub.w	r8, r9, r8
 80093c6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80093ca:	e9d8 2300 	ldrd	r2, r3, [r8]
 80093ce:	4650      	mov	r0, sl
 80093d0:	4659      	mov	r1, fp
 80093d2:	f7f7 fa3b 	bl	800084c <__aeabi_ddiv>
 80093d6:	e783      	b.n	80092e0 <_strtod_l+0x3d0>
 80093d8:	4b32      	ldr	r3, [pc, #200]	@ (80094a4 <_strtod_l+0x594>)
 80093da:	9308      	str	r3, [sp, #32]
 80093dc:	2300      	movs	r3, #0
 80093de:	1124      	asrs	r4, r4, #4
 80093e0:	4650      	mov	r0, sl
 80093e2:	4659      	mov	r1, fp
 80093e4:	461e      	mov	r6, r3
 80093e6:	2c01      	cmp	r4, #1
 80093e8:	dc21      	bgt.n	800942e <_strtod_l+0x51e>
 80093ea:	b10b      	cbz	r3, 80093f0 <_strtod_l+0x4e0>
 80093ec:	4682      	mov	sl, r0
 80093ee:	468b      	mov	fp, r1
 80093f0:	492c      	ldr	r1, [pc, #176]	@ (80094a4 <_strtod_l+0x594>)
 80093f2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80093f6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80093fa:	4652      	mov	r2, sl
 80093fc:	465b      	mov	r3, fp
 80093fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009402:	f7f7 f8f9 	bl	80005f8 <__aeabi_dmul>
 8009406:	4b28      	ldr	r3, [pc, #160]	@ (80094a8 <_strtod_l+0x598>)
 8009408:	460a      	mov	r2, r1
 800940a:	400b      	ands	r3, r1
 800940c:	4927      	ldr	r1, [pc, #156]	@ (80094ac <_strtod_l+0x59c>)
 800940e:	428b      	cmp	r3, r1
 8009410:	4682      	mov	sl, r0
 8009412:	d898      	bhi.n	8009346 <_strtod_l+0x436>
 8009414:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009418:	428b      	cmp	r3, r1
 800941a:	bf86      	itte	hi
 800941c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80094b0 <_strtod_l+0x5a0>
 8009420:	f04f 3aff 	movhi.w	sl, #4294967295
 8009424:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009428:	2300      	movs	r3, #0
 800942a:	9308      	str	r3, [sp, #32]
 800942c:	e07a      	b.n	8009524 <_strtod_l+0x614>
 800942e:	07e2      	lsls	r2, r4, #31
 8009430:	d505      	bpl.n	800943e <_strtod_l+0x52e>
 8009432:	9b08      	ldr	r3, [sp, #32]
 8009434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009438:	f7f7 f8de 	bl	80005f8 <__aeabi_dmul>
 800943c:	2301      	movs	r3, #1
 800943e:	9a08      	ldr	r2, [sp, #32]
 8009440:	3208      	adds	r2, #8
 8009442:	3601      	adds	r6, #1
 8009444:	1064      	asrs	r4, r4, #1
 8009446:	9208      	str	r2, [sp, #32]
 8009448:	e7cd      	b.n	80093e6 <_strtod_l+0x4d6>
 800944a:	d0ed      	beq.n	8009428 <_strtod_l+0x518>
 800944c:	4264      	negs	r4, r4
 800944e:	f014 020f 	ands.w	r2, r4, #15
 8009452:	d00a      	beq.n	800946a <_strtod_l+0x55a>
 8009454:	4b12      	ldr	r3, [pc, #72]	@ (80094a0 <_strtod_l+0x590>)
 8009456:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800945a:	4650      	mov	r0, sl
 800945c:	4659      	mov	r1, fp
 800945e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009462:	f7f7 f9f3 	bl	800084c <__aeabi_ddiv>
 8009466:	4682      	mov	sl, r0
 8009468:	468b      	mov	fp, r1
 800946a:	1124      	asrs	r4, r4, #4
 800946c:	d0dc      	beq.n	8009428 <_strtod_l+0x518>
 800946e:	2c1f      	cmp	r4, #31
 8009470:	dd20      	ble.n	80094b4 <_strtod_l+0x5a4>
 8009472:	2400      	movs	r4, #0
 8009474:	46a0      	mov	r8, r4
 8009476:	940a      	str	r4, [sp, #40]	@ 0x28
 8009478:	46a1      	mov	r9, r4
 800947a:	9a05      	ldr	r2, [sp, #20]
 800947c:	2322      	movs	r3, #34	@ 0x22
 800947e:	f04f 0a00 	mov.w	sl, #0
 8009482:	f04f 0b00 	mov.w	fp, #0
 8009486:	6013      	str	r3, [r2, #0]
 8009488:	e768      	b.n	800935c <_strtod_l+0x44c>
 800948a:	bf00      	nop
 800948c:	0800b08d 	.word	0x0800b08d
 8009490:	0800b2a4 	.word	0x0800b2a4
 8009494:	0800b085 	.word	0x0800b085
 8009498:	0800b0bc 	.word	0x0800b0bc
 800949c:	0800b44d 	.word	0x0800b44d
 80094a0:	0800b1d8 	.word	0x0800b1d8
 80094a4:	0800b1b0 	.word	0x0800b1b0
 80094a8:	7ff00000 	.word	0x7ff00000
 80094ac:	7ca00000 	.word	0x7ca00000
 80094b0:	7fefffff 	.word	0x7fefffff
 80094b4:	f014 0310 	ands.w	r3, r4, #16
 80094b8:	bf18      	it	ne
 80094ba:	236a      	movne	r3, #106	@ 0x6a
 80094bc:	4ea9      	ldr	r6, [pc, #676]	@ (8009764 <_strtod_l+0x854>)
 80094be:	9308      	str	r3, [sp, #32]
 80094c0:	4650      	mov	r0, sl
 80094c2:	4659      	mov	r1, fp
 80094c4:	2300      	movs	r3, #0
 80094c6:	07e2      	lsls	r2, r4, #31
 80094c8:	d504      	bpl.n	80094d4 <_strtod_l+0x5c4>
 80094ca:	e9d6 2300 	ldrd	r2, r3, [r6]
 80094ce:	f7f7 f893 	bl	80005f8 <__aeabi_dmul>
 80094d2:	2301      	movs	r3, #1
 80094d4:	1064      	asrs	r4, r4, #1
 80094d6:	f106 0608 	add.w	r6, r6, #8
 80094da:	d1f4      	bne.n	80094c6 <_strtod_l+0x5b6>
 80094dc:	b10b      	cbz	r3, 80094e2 <_strtod_l+0x5d2>
 80094de:	4682      	mov	sl, r0
 80094e0:	468b      	mov	fp, r1
 80094e2:	9b08      	ldr	r3, [sp, #32]
 80094e4:	b1b3      	cbz	r3, 8009514 <_strtod_l+0x604>
 80094e6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80094ea:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	4659      	mov	r1, fp
 80094f2:	dd0f      	ble.n	8009514 <_strtod_l+0x604>
 80094f4:	2b1f      	cmp	r3, #31
 80094f6:	dd55      	ble.n	80095a4 <_strtod_l+0x694>
 80094f8:	2b34      	cmp	r3, #52	@ 0x34
 80094fa:	bfde      	ittt	le
 80094fc:	f04f 33ff 	movle.w	r3, #4294967295
 8009500:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009504:	4093      	lslle	r3, r2
 8009506:	f04f 0a00 	mov.w	sl, #0
 800950a:	bfcc      	ite	gt
 800950c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009510:	ea03 0b01 	andle.w	fp, r3, r1
 8009514:	2200      	movs	r2, #0
 8009516:	2300      	movs	r3, #0
 8009518:	4650      	mov	r0, sl
 800951a:	4659      	mov	r1, fp
 800951c:	f7f7 fad4 	bl	8000ac8 <__aeabi_dcmpeq>
 8009520:	2800      	cmp	r0, #0
 8009522:	d1a6      	bne.n	8009472 <_strtod_l+0x562>
 8009524:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009526:	9300      	str	r3, [sp, #0]
 8009528:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800952a:	9805      	ldr	r0, [sp, #20]
 800952c:	462b      	mov	r3, r5
 800952e:	463a      	mov	r2, r7
 8009530:	f7ff f8c6 	bl	80086c0 <__s2b>
 8009534:	900a      	str	r0, [sp, #40]	@ 0x28
 8009536:	2800      	cmp	r0, #0
 8009538:	f43f af05 	beq.w	8009346 <_strtod_l+0x436>
 800953c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800953e:	2a00      	cmp	r2, #0
 8009540:	eba9 0308 	sub.w	r3, r9, r8
 8009544:	bfa8      	it	ge
 8009546:	2300      	movge	r3, #0
 8009548:	9312      	str	r3, [sp, #72]	@ 0x48
 800954a:	2400      	movs	r4, #0
 800954c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009550:	9316      	str	r3, [sp, #88]	@ 0x58
 8009552:	46a0      	mov	r8, r4
 8009554:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009556:	9805      	ldr	r0, [sp, #20]
 8009558:	6859      	ldr	r1, [r3, #4]
 800955a:	f7ff f809 	bl	8008570 <_Balloc>
 800955e:	4681      	mov	r9, r0
 8009560:	2800      	cmp	r0, #0
 8009562:	f43f aef4 	beq.w	800934e <_strtod_l+0x43e>
 8009566:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009568:	691a      	ldr	r2, [r3, #16]
 800956a:	3202      	adds	r2, #2
 800956c:	f103 010c 	add.w	r1, r3, #12
 8009570:	0092      	lsls	r2, r2, #2
 8009572:	300c      	adds	r0, #12
 8009574:	f7fe f89b 	bl	80076ae <memcpy>
 8009578:	ec4b ab10 	vmov	d0, sl, fp
 800957c:	9805      	ldr	r0, [sp, #20]
 800957e:	aa1c      	add	r2, sp, #112	@ 0x70
 8009580:	a91b      	add	r1, sp, #108	@ 0x6c
 8009582:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009586:	f7ff fbd7 	bl	8008d38 <__d2b>
 800958a:	901a      	str	r0, [sp, #104]	@ 0x68
 800958c:	2800      	cmp	r0, #0
 800958e:	f43f aede 	beq.w	800934e <_strtod_l+0x43e>
 8009592:	9805      	ldr	r0, [sp, #20]
 8009594:	2101      	movs	r1, #1
 8009596:	f7ff f929 	bl	80087ec <__i2b>
 800959a:	4680      	mov	r8, r0
 800959c:	b948      	cbnz	r0, 80095b2 <_strtod_l+0x6a2>
 800959e:	f04f 0800 	mov.w	r8, #0
 80095a2:	e6d4      	b.n	800934e <_strtod_l+0x43e>
 80095a4:	f04f 32ff 	mov.w	r2, #4294967295
 80095a8:	fa02 f303 	lsl.w	r3, r2, r3
 80095ac:	ea03 0a0a 	and.w	sl, r3, sl
 80095b0:	e7b0      	b.n	8009514 <_strtod_l+0x604>
 80095b2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80095b4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80095b6:	2d00      	cmp	r5, #0
 80095b8:	bfab      	itete	ge
 80095ba:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80095bc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80095be:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80095c0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80095c2:	bfac      	ite	ge
 80095c4:	18ef      	addge	r7, r5, r3
 80095c6:	1b5e      	sublt	r6, r3, r5
 80095c8:	9b08      	ldr	r3, [sp, #32]
 80095ca:	1aed      	subs	r5, r5, r3
 80095cc:	4415      	add	r5, r2
 80095ce:	4b66      	ldr	r3, [pc, #408]	@ (8009768 <_strtod_l+0x858>)
 80095d0:	3d01      	subs	r5, #1
 80095d2:	429d      	cmp	r5, r3
 80095d4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80095d8:	da50      	bge.n	800967c <_strtod_l+0x76c>
 80095da:	1b5b      	subs	r3, r3, r5
 80095dc:	2b1f      	cmp	r3, #31
 80095de:	eba2 0203 	sub.w	r2, r2, r3
 80095e2:	f04f 0101 	mov.w	r1, #1
 80095e6:	dc3d      	bgt.n	8009664 <_strtod_l+0x754>
 80095e8:	fa01 f303 	lsl.w	r3, r1, r3
 80095ec:	9313      	str	r3, [sp, #76]	@ 0x4c
 80095ee:	2300      	movs	r3, #0
 80095f0:	9310      	str	r3, [sp, #64]	@ 0x40
 80095f2:	18bd      	adds	r5, r7, r2
 80095f4:	9b08      	ldr	r3, [sp, #32]
 80095f6:	42af      	cmp	r7, r5
 80095f8:	4416      	add	r6, r2
 80095fa:	441e      	add	r6, r3
 80095fc:	463b      	mov	r3, r7
 80095fe:	bfa8      	it	ge
 8009600:	462b      	movge	r3, r5
 8009602:	42b3      	cmp	r3, r6
 8009604:	bfa8      	it	ge
 8009606:	4633      	movge	r3, r6
 8009608:	2b00      	cmp	r3, #0
 800960a:	bfc2      	ittt	gt
 800960c:	1aed      	subgt	r5, r5, r3
 800960e:	1af6      	subgt	r6, r6, r3
 8009610:	1aff      	subgt	r7, r7, r3
 8009612:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009614:	2b00      	cmp	r3, #0
 8009616:	dd16      	ble.n	8009646 <_strtod_l+0x736>
 8009618:	4641      	mov	r1, r8
 800961a:	9805      	ldr	r0, [sp, #20]
 800961c:	461a      	mov	r2, r3
 800961e:	f7ff f9a5 	bl	800896c <__pow5mult>
 8009622:	4680      	mov	r8, r0
 8009624:	2800      	cmp	r0, #0
 8009626:	d0ba      	beq.n	800959e <_strtod_l+0x68e>
 8009628:	4601      	mov	r1, r0
 800962a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800962c:	9805      	ldr	r0, [sp, #20]
 800962e:	f7ff f8f3 	bl	8008818 <__multiply>
 8009632:	900e      	str	r0, [sp, #56]	@ 0x38
 8009634:	2800      	cmp	r0, #0
 8009636:	f43f ae8a 	beq.w	800934e <_strtod_l+0x43e>
 800963a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800963c:	9805      	ldr	r0, [sp, #20]
 800963e:	f7fe ffd7 	bl	80085f0 <_Bfree>
 8009642:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009644:	931a      	str	r3, [sp, #104]	@ 0x68
 8009646:	2d00      	cmp	r5, #0
 8009648:	dc1d      	bgt.n	8009686 <_strtod_l+0x776>
 800964a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800964c:	2b00      	cmp	r3, #0
 800964e:	dd23      	ble.n	8009698 <_strtod_l+0x788>
 8009650:	4649      	mov	r1, r9
 8009652:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009654:	9805      	ldr	r0, [sp, #20]
 8009656:	f7ff f989 	bl	800896c <__pow5mult>
 800965a:	4681      	mov	r9, r0
 800965c:	b9e0      	cbnz	r0, 8009698 <_strtod_l+0x788>
 800965e:	f04f 0900 	mov.w	r9, #0
 8009662:	e674      	b.n	800934e <_strtod_l+0x43e>
 8009664:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009668:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800966c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009670:	35e2      	adds	r5, #226	@ 0xe2
 8009672:	fa01 f305 	lsl.w	r3, r1, r5
 8009676:	9310      	str	r3, [sp, #64]	@ 0x40
 8009678:	9113      	str	r1, [sp, #76]	@ 0x4c
 800967a:	e7ba      	b.n	80095f2 <_strtod_l+0x6e2>
 800967c:	2300      	movs	r3, #0
 800967e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009680:	2301      	movs	r3, #1
 8009682:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009684:	e7b5      	b.n	80095f2 <_strtod_l+0x6e2>
 8009686:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009688:	9805      	ldr	r0, [sp, #20]
 800968a:	462a      	mov	r2, r5
 800968c:	f7ff f9c8 	bl	8008a20 <__lshift>
 8009690:	901a      	str	r0, [sp, #104]	@ 0x68
 8009692:	2800      	cmp	r0, #0
 8009694:	d1d9      	bne.n	800964a <_strtod_l+0x73a>
 8009696:	e65a      	b.n	800934e <_strtod_l+0x43e>
 8009698:	2e00      	cmp	r6, #0
 800969a:	dd07      	ble.n	80096ac <_strtod_l+0x79c>
 800969c:	4649      	mov	r1, r9
 800969e:	9805      	ldr	r0, [sp, #20]
 80096a0:	4632      	mov	r2, r6
 80096a2:	f7ff f9bd 	bl	8008a20 <__lshift>
 80096a6:	4681      	mov	r9, r0
 80096a8:	2800      	cmp	r0, #0
 80096aa:	d0d8      	beq.n	800965e <_strtod_l+0x74e>
 80096ac:	2f00      	cmp	r7, #0
 80096ae:	dd08      	ble.n	80096c2 <_strtod_l+0x7b2>
 80096b0:	4641      	mov	r1, r8
 80096b2:	9805      	ldr	r0, [sp, #20]
 80096b4:	463a      	mov	r2, r7
 80096b6:	f7ff f9b3 	bl	8008a20 <__lshift>
 80096ba:	4680      	mov	r8, r0
 80096bc:	2800      	cmp	r0, #0
 80096be:	f43f ae46 	beq.w	800934e <_strtod_l+0x43e>
 80096c2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80096c4:	9805      	ldr	r0, [sp, #20]
 80096c6:	464a      	mov	r2, r9
 80096c8:	f7ff fa32 	bl	8008b30 <__mdiff>
 80096cc:	4604      	mov	r4, r0
 80096ce:	2800      	cmp	r0, #0
 80096d0:	f43f ae3d 	beq.w	800934e <_strtod_l+0x43e>
 80096d4:	68c3      	ldr	r3, [r0, #12]
 80096d6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80096d8:	2300      	movs	r3, #0
 80096da:	60c3      	str	r3, [r0, #12]
 80096dc:	4641      	mov	r1, r8
 80096de:	f7ff fa0b 	bl	8008af8 <__mcmp>
 80096e2:	2800      	cmp	r0, #0
 80096e4:	da46      	bge.n	8009774 <_strtod_l+0x864>
 80096e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096e8:	ea53 030a 	orrs.w	r3, r3, sl
 80096ec:	d16c      	bne.n	80097c8 <_strtod_l+0x8b8>
 80096ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d168      	bne.n	80097c8 <_strtod_l+0x8b8>
 80096f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80096fa:	0d1b      	lsrs	r3, r3, #20
 80096fc:	051b      	lsls	r3, r3, #20
 80096fe:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009702:	d961      	bls.n	80097c8 <_strtod_l+0x8b8>
 8009704:	6963      	ldr	r3, [r4, #20]
 8009706:	b913      	cbnz	r3, 800970e <_strtod_l+0x7fe>
 8009708:	6923      	ldr	r3, [r4, #16]
 800970a:	2b01      	cmp	r3, #1
 800970c:	dd5c      	ble.n	80097c8 <_strtod_l+0x8b8>
 800970e:	4621      	mov	r1, r4
 8009710:	2201      	movs	r2, #1
 8009712:	9805      	ldr	r0, [sp, #20]
 8009714:	f7ff f984 	bl	8008a20 <__lshift>
 8009718:	4641      	mov	r1, r8
 800971a:	4604      	mov	r4, r0
 800971c:	f7ff f9ec 	bl	8008af8 <__mcmp>
 8009720:	2800      	cmp	r0, #0
 8009722:	dd51      	ble.n	80097c8 <_strtod_l+0x8b8>
 8009724:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009728:	9a08      	ldr	r2, [sp, #32]
 800972a:	0d1b      	lsrs	r3, r3, #20
 800972c:	051b      	lsls	r3, r3, #20
 800972e:	2a00      	cmp	r2, #0
 8009730:	d06b      	beq.n	800980a <_strtod_l+0x8fa>
 8009732:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009736:	d868      	bhi.n	800980a <_strtod_l+0x8fa>
 8009738:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800973c:	f67f ae9d 	bls.w	800947a <_strtod_l+0x56a>
 8009740:	4b0a      	ldr	r3, [pc, #40]	@ (800976c <_strtod_l+0x85c>)
 8009742:	4650      	mov	r0, sl
 8009744:	4659      	mov	r1, fp
 8009746:	2200      	movs	r2, #0
 8009748:	f7f6 ff56 	bl	80005f8 <__aeabi_dmul>
 800974c:	4b08      	ldr	r3, [pc, #32]	@ (8009770 <_strtod_l+0x860>)
 800974e:	400b      	ands	r3, r1
 8009750:	4682      	mov	sl, r0
 8009752:	468b      	mov	fp, r1
 8009754:	2b00      	cmp	r3, #0
 8009756:	f47f ae05 	bne.w	8009364 <_strtod_l+0x454>
 800975a:	9a05      	ldr	r2, [sp, #20]
 800975c:	2322      	movs	r3, #34	@ 0x22
 800975e:	6013      	str	r3, [r2, #0]
 8009760:	e600      	b.n	8009364 <_strtod_l+0x454>
 8009762:	bf00      	nop
 8009764:	0800b2d0 	.word	0x0800b2d0
 8009768:	fffffc02 	.word	0xfffffc02
 800976c:	39500000 	.word	0x39500000
 8009770:	7ff00000 	.word	0x7ff00000
 8009774:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009778:	d165      	bne.n	8009846 <_strtod_l+0x936>
 800977a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800977c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009780:	b35a      	cbz	r2, 80097da <_strtod_l+0x8ca>
 8009782:	4a9f      	ldr	r2, [pc, #636]	@ (8009a00 <_strtod_l+0xaf0>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d12b      	bne.n	80097e0 <_strtod_l+0x8d0>
 8009788:	9b08      	ldr	r3, [sp, #32]
 800978a:	4651      	mov	r1, sl
 800978c:	b303      	cbz	r3, 80097d0 <_strtod_l+0x8c0>
 800978e:	4b9d      	ldr	r3, [pc, #628]	@ (8009a04 <_strtod_l+0xaf4>)
 8009790:	465a      	mov	r2, fp
 8009792:	4013      	ands	r3, r2
 8009794:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009798:	f04f 32ff 	mov.w	r2, #4294967295
 800979c:	d81b      	bhi.n	80097d6 <_strtod_l+0x8c6>
 800979e:	0d1b      	lsrs	r3, r3, #20
 80097a0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80097a4:	fa02 f303 	lsl.w	r3, r2, r3
 80097a8:	4299      	cmp	r1, r3
 80097aa:	d119      	bne.n	80097e0 <_strtod_l+0x8d0>
 80097ac:	4b96      	ldr	r3, [pc, #600]	@ (8009a08 <_strtod_l+0xaf8>)
 80097ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d102      	bne.n	80097ba <_strtod_l+0x8aa>
 80097b4:	3101      	adds	r1, #1
 80097b6:	f43f adca 	beq.w	800934e <_strtod_l+0x43e>
 80097ba:	4b92      	ldr	r3, [pc, #584]	@ (8009a04 <_strtod_l+0xaf4>)
 80097bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80097be:	401a      	ands	r2, r3
 80097c0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80097c4:	f04f 0a00 	mov.w	sl, #0
 80097c8:	9b08      	ldr	r3, [sp, #32]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d1b8      	bne.n	8009740 <_strtod_l+0x830>
 80097ce:	e5c9      	b.n	8009364 <_strtod_l+0x454>
 80097d0:	f04f 33ff 	mov.w	r3, #4294967295
 80097d4:	e7e8      	b.n	80097a8 <_strtod_l+0x898>
 80097d6:	4613      	mov	r3, r2
 80097d8:	e7e6      	b.n	80097a8 <_strtod_l+0x898>
 80097da:	ea53 030a 	orrs.w	r3, r3, sl
 80097de:	d0a1      	beq.n	8009724 <_strtod_l+0x814>
 80097e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80097e2:	b1db      	cbz	r3, 800981c <_strtod_l+0x90c>
 80097e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80097e6:	4213      	tst	r3, r2
 80097e8:	d0ee      	beq.n	80097c8 <_strtod_l+0x8b8>
 80097ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097ec:	9a08      	ldr	r2, [sp, #32]
 80097ee:	4650      	mov	r0, sl
 80097f0:	4659      	mov	r1, fp
 80097f2:	b1bb      	cbz	r3, 8009824 <_strtod_l+0x914>
 80097f4:	f7ff fb6e 	bl	8008ed4 <sulp>
 80097f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80097fc:	ec53 2b10 	vmov	r2, r3, d0
 8009800:	f7f6 fd44 	bl	800028c <__adddf3>
 8009804:	4682      	mov	sl, r0
 8009806:	468b      	mov	fp, r1
 8009808:	e7de      	b.n	80097c8 <_strtod_l+0x8b8>
 800980a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800980e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009812:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009816:	f04f 3aff 	mov.w	sl, #4294967295
 800981a:	e7d5      	b.n	80097c8 <_strtod_l+0x8b8>
 800981c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800981e:	ea13 0f0a 	tst.w	r3, sl
 8009822:	e7e1      	b.n	80097e8 <_strtod_l+0x8d8>
 8009824:	f7ff fb56 	bl	8008ed4 <sulp>
 8009828:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800982c:	ec53 2b10 	vmov	r2, r3, d0
 8009830:	f7f6 fd2a 	bl	8000288 <__aeabi_dsub>
 8009834:	2200      	movs	r2, #0
 8009836:	2300      	movs	r3, #0
 8009838:	4682      	mov	sl, r0
 800983a:	468b      	mov	fp, r1
 800983c:	f7f7 f944 	bl	8000ac8 <__aeabi_dcmpeq>
 8009840:	2800      	cmp	r0, #0
 8009842:	d0c1      	beq.n	80097c8 <_strtod_l+0x8b8>
 8009844:	e619      	b.n	800947a <_strtod_l+0x56a>
 8009846:	4641      	mov	r1, r8
 8009848:	4620      	mov	r0, r4
 800984a:	f7ff facd 	bl	8008de8 <__ratio>
 800984e:	ec57 6b10 	vmov	r6, r7, d0
 8009852:	2200      	movs	r2, #0
 8009854:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009858:	4630      	mov	r0, r6
 800985a:	4639      	mov	r1, r7
 800985c:	f7f7 f948 	bl	8000af0 <__aeabi_dcmple>
 8009860:	2800      	cmp	r0, #0
 8009862:	d06f      	beq.n	8009944 <_strtod_l+0xa34>
 8009864:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009866:	2b00      	cmp	r3, #0
 8009868:	d17a      	bne.n	8009960 <_strtod_l+0xa50>
 800986a:	f1ba 0f00 	cmp.w	sl, #0
 800986e:	d158      	bne.n	8009922 <_strtod_l+0xa12>
 8009870:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009872:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009876:	2b00      	cmp	r3, #0
 8009878:	d15a      	bne.n	8009930 <_strtod_l+0xa20>
 800987a:	4b64      	ldr	r3, [pc, #400]	@ (8009a0c <_strtod_l+0xafc>)
 800987c:	2200      	movs	r2, #0
 800987e:	4630      	mov	r0, r6
 8009880:	4639      	mov	r1, r7
 8009882:	f7f7 f92b 	bl	8000adc <__aeabi_dcmplt>
 8009886:	2800      	cmp	r0, #0
 8009888:	d159      	bne.n	800993e <_strtod_l+0xa2e>
 800988a:	4630      	mov	r0, r6
 800988c:	4639      	mov	r1, r7
 800988e:	4b60      	ldr	r3, [pc, #384]	@ (8009a10 <_strtod_l+0xb00>)
 8009890:	2200      	movs	r2, #0
 8009892:	f7f6 feb1 	bl	80005f8 <__aeabi_dmul>
 8009896:	4606      	mov	r6, r0
 8009898:	460f      	mov	r7, r1
 800989a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800989e:	9606      	str	r6, [sp, #24]
 80098a0:	9307      	str	r3, [sp, #28]
 80098a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80098a6:	4d57      	ldr	r5, [pc, #348]	@ (8009a04 <_strtod_l+0xaf4>)
 80098a8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80098ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098ae:	401d      	ands	r5, r3
 80098b0:	4b58      	ldr	r3, [pc, #352]	@ (8009a14 <_strtod_l+0xb04>)
 80098b2:	429d      	cmp	r5, r3
 80098b4:	f040 80b2 	bne.w	8009a1c <_strtod_l+0xb0c>
 80098b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098ba:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80098be:	ec4b ab10 	vmov	d0, sl, fp
 80098c2:	f7ff f9c9 	bl	8008c58 <__ulp>
 80098c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80098ca:	ec51 0b10 	vmov	r0, r1, d0
 80098ce:	f7f6 fe93 	bl	80005f8 <__aeabi_dmul>
 80098d2:	4652      	mov	r2, sl
 80098d4:	465b      	mov	r3, fp
 80098d6:	f7f6 fcd9 	bl	800028c <__adddf3>
 80098da:	460b      	mov	r3, r1
 80098dc:	4949      	ldr	r1, [pc, #292]	@ (8009a04 <_strtod_l+0xaf4>)
 80098de:	4a4e      	ldr	r2, [pc, #312]	@ (8009a18 <_strtod_l+0xb08>)
 80098e0:	4019      	ands	r1, r3
 80098e2:	4291      	cmp	r1, r2
 80098e4:	4682      	mov	sl, r0
 80098e6:	d942      	bls.n	800996e <_strtod_l+0xa5e>
 80098e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80098ea:	4b47      	ldr	r3, [pc, #284]	@ (8009a08 <_strtod_l+0xaf8>)
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d103      	bne.n	80098f8 <_strtod_l+0x9e8>
 80098f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80098f2:	3301      	adds	r3, #1
 80098f4:	f43f ad2b 	beq.w	800934e <_strtod_l+0x43e>
 80098f8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009a08 <_strtod_l+0xaf8>
 80098fc:	f04f 3aff 	mov.w	sl, #4294967295
 8009900:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009902:	9805      	ldr	r0, [sp, #20]
 8009904:	f7fe fe74 	bl	80085f0 <_Bfree>
 8009908:	9805      	ldr	r0, [sp, #20]
 800990a:	4649      	mov	r1, r9
 800990c:	f7fe fe70 	bl	80085f0 <_Bfree>
 8009910:	9805      	ldr	r0, [sp, #20]
 8009912:	4641      	mov	r1, r8
 8009914:	f7fe fe6c 	bl	80085f0 <_Bfree>
 8009918:	9805      	ldr	r0, [sp, #20]
 800991a:	4621      	mov	r1, r4
 800991c:	f7fe fe68 	bl	80085f0 <_Bfree>
 8009920:	e618      	b.n	8009554 <_strtod_l+0x644>
 8009922:	f1ba 0f01 	cmp.w	sl, #1
 8009926:	d103      	bne.n	8009930 <_strtod_l+0xa20>
 8009928:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800992a:	2b00      	cmp	r3, #0
 800992c:	f43f ada5 	beq.w	800947a <_strtod_l+0x56a>
 8009930:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80099e0 <_strtod_l+0xad0>
 8009934:	4f35      	ldr	r7, [pc, #212]	@ (8009a0c <_strtod_l+0xafc>)
 8009936:	ed8d 7b06 	vstr	d7, [sp, #24]
 800993a:	2600      	movs	r6, #0
 800993c:	e7b1      	b.n	80098a2 <_strtod_l+0x992>
 800993e:	4f34      	ldr	r7, [pc, #208]	@ (8009a10 <_strtod_l+0xb00>)
 8009940:	2600      	movs	r6, #0
 8009942:	e7aa      	b.n	800989a <_strtod_l+0x98a>
 8009944:	4b32      	ldr	r3, [pc, #200]	@ (8009a10 <_strtod_l+0xb00>)
 8009946:	4630      	mov	r0, r6
 8009948:	4639      	mov	r1, r7
 800994a:	2200      	movs	r2, #0
 800994c:	f7f6 fe54 	bl	80005f8 <__aeabi_dmul>
 8009950:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009952:	4606      	mov	r6, r0
 8009954:	460f      	mov	r7, r1
 8009956:	2b00      	cmp	r3, #0
 8009958:	d09f      	beq.n	800989a <_strtod_l+0x98a>
 800995a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800995e:	e7a0      	b.n	80098a2 <_strtod_l+0x992>
 8009960:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80099e8 <_strtod_l+0xad8>
 8009964:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009968:	ec57 6b17 	vmov	r6, r7, d7
 800996c:	e799      	b.n	80098a2 <_strtod_l+0x992>
 800996e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009972:	9b08      	ldr	r3, [sp, #32]
 8009974:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009978:	2b00      	cmp	r3, #0
 800997a:	d1c1      	bne.n	8009900 <_strtod_l+0x9f0>
 800997c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009980:	0d1b      	lsrs	r3, r3, #20
 8009982:	051b      	lsls	r3, r3, #20
 8009984:	429d      	cmp	r5, r3
 8009986:	d1bb      	bne.n	8009900 <_strtod_l+0x9f0>
 8009988:	4630      	mov	r0, r6
 800998a:	4639      	mov	r1, r7
 800998c:	f7f7 f994 	bl	8000cb8 <__aeabi_d2lz>
 8009990:	f7f6 fe04 	bl	800059c <__aeabi_l2d>
 8009994:	4602      	mov	r2, r0
 8009996:	460b      	mov	r3, r1
 8009998:	4630      	mov	r0, r6
 800999a:	4639      	mov	r1, r7
 800999c:	f7f6 fc74 	bl	8000288 <__aeabi_dsub>
 80099a0:	460b      	mov	r3, r1
 80099a2:	4602      	mov	r2, r0
 80099a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80099a8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80099ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099ae:	ea46 060a 	orr.w	r6, r6, sl
 80099b2:	431e      	orrs	r6, r3
 80099b4:	d06f      	beq.n	8009a96 <_strtod_l+0xb86>
 80099b6:	a30e      	add	r3, pc, #56	@ (adr r3, 80099f0 <_strtod_l+0xae0>)
 80099b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099bc:	f7f7 f88e 	bl	8000adc <__aeabi_dcmplt>
 80099c0:	2800      	cmp	r0, #0
 80099c2:	f47f accf 	bne.w	8009364 <_strtod_l+0x454>
 80099c6:	a30c      	add	r3, pc, #48	@ (adr r3, 80099f8 <_strtod_l+0xae8>)
 80099c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80099d0:	f7f7 f8a2 	bl	8000b18 <__aeabi_dcmpgt>
 80099d4:	2800      	cmp	r0, #0
 80099d6:	d093      	beq.n	8009900 <_strtod_l+0x9f0>
 80099d8:	e4c4      	b.n	8009364 <_strtod_l+0x454>
 80099da:	bf00      	nop
 80099dc:	f3af 8000 	nop.w
 80099e0:	00000000 	.word	0x00000000
 80099e4:	bff00000 	.word	0xbff00000
 80099e8:	00000000 	.word	0x00000000
 80099ec:	3ff00000 	.word	0x3ff00000
 80099f0:	94a03595 	.word	0x94a03595
 80099f4:	3fdfffff 	.word	0x3fdfffff
 80099f8:	35afe535 	.word	0x35afe535
 80099fc:	3fe00000 	.word	0x3fe00000
 8009a00:	000fffff 	.word	0x000fffff
 8009a04:	7ff00000 	.word	0x7ff00000
 8009a08:	7fefffff 	.word	0x7fefffff
 8009a0c:	3ff00000 	.word	0x3ff00000
 8009a10:	3fe00000 	.word	0x3fe00000
 8009a14:	7fe00000 	.word	0x7fe00000
 8009a18:	7c9fffff 	.word	0x7c9fffff
 8009a1c:	9b08      	ldr	r3, [sp, #32]
 8009a1e:	b323      	cbz	r3, 8009a6a <_strtod_l+0xb5a>
 8009a20:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009a24:	d821      	bhi.n	8009a6a <_strtod_l+0xb5a>
 8009a26:	a328      	add	r3, pc, #160	@ (adr r3, 8009ac8 <_strtod_l+0xbb8>)
 8009a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2c:	4630      	mov	r0, r6
 8009a2e:	4639      	mov	r1, r7
 8009a30:	f7f7 f85e 	bl	8000af0 <__aeabi_dcmple>
 8009a34:	b1a0      	cbz	r0, 8009a60 <_strtod_l+0xb50>
 8009a36:	4639      	mov	r1, r7
 8009a38:	4630      	mov	r0, r6
 8009a3a:	f7f7 f8b5 	bl	8000ba8 <__aeabi_d2uiz>
 8009a3e:	2801      	cmp	r0, #1
 8009a40:	bf38      	it	cc
 8009a42:	2001      	movcc	r0, #1
 8009a44:	f7f6 fd5e 	bl	8000504 <__aeabi_ui2d>
 8009a48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a4a:	4606      	mov	r6, r0
 8009a4c:	460f      	mov	r7, r1
 8009a4e:	b9fb      	cbnz	r3, 8009a90 <_strtod_l+0xb80>
 8009a50:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009a54:	9014      	str	r0, [sp, #80]	@ 0x50
 8009a56:	9315      	str	r3, [sp, #84]	@ 0x54
 8009a58:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009a5c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009a60:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009a62:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009a66:	1b5b      	subs	r3, r3, r5
 8009a68:	9311      	str	r3, [sp, #68]	@ 0x44
 8009a6a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009a6e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009a72:	f7ff f8f1 	bl	8008c58 <__ulp>
 8009a76:	4650      	mov	r0, sl
 8009a78:	ec53 2b10 	vmov	r2, r3, d0
 8009a7c:	4659      	mov	r1, fp
 8009a7e:	f7f6 fdbb 	bl	80005f8 <__aeabi_dmul>
 8009a82:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009a86:	f7f6 fc01 	bl	800028c <__adddf3>
 8009a8a:	4682      	mov	sl, r0
 8009a8c:	468b      	mov	fp, r1
 8009a8e:	e770      	b.n	8009972 <_strtod_l+0xa62>
 8009a90:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009a94:	e7e0      	b.n	8009a58 <_strtod_l+0xb48>
 8009a96:	a30e      	add	r3, pc, #56	@ (adr r3, 8009ad0 <_strtod_l+0xbc0>)
 8009a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a9c:	f7f7 f81e 	bl	8000adc <__aeabi_dcmplt>
 8009aa0:	e798      	b.n	80099d4 <_strtod_l+0xac4>
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009aa6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009aa8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009aaa:	6013      	str	r3, [r2, #0]
 8009aac:	f7ff ba6d 	b.w	8008f8a <_strtod_l+0x7a>
 8009ab0:	2a65      	cmp	r2, #101	@ 0x65
 8009ab2:	f43f ab66 	beq.w	8009182 <_strtod_l+0x272>
 8009ab6:	2a45      	cmp	r2, #69	@ 0x45
 8009ab8:	f43f ab63 	beq.w	8009182 <_strtod_l+0x272>
 8009abc:	2301      	movs	r3, #1
 8009abe:	f7ff bb9e 	b.w	80091fe <_strtod_l+0x2ee>
 8009ac2:	bf00      	nop
 8009ac4:	f3af 8000 	nop.w
 8009ac8:	ffc00000 	.word	0xffc00000
 8009acc:	41dfffff 	.word	0x41dfffff
 8009ad0:	94a03595 	.word	0x94a03595
 8009ad4:	3fcfffff 	.word	0x3fcfffff

08009ad8 <_strtod_r>:
 8009ad8:	4b01      	ldr	r3, [pc, #4]	@ (8009ae0 <_strtod_r+0x8>)
 8009ada:	f7ff ba19 	b.w	8008f10 <_strtod_l>
 8009ade:	bf00      	nop
 8009ae0:	2000006c 	.word	0x2000006c

08009ae4 <_strtol_l.constprop.0>:
 8009ae4:	2b24      	cmp	r3, #36	@ 0x24
 8009ae6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009aea:	4686      	mov	lr, r0
 8009aec:	4690      	mov	r8, r2
 8009aee:	d801      	bhi.n	8009af4 <_strtol_l.constprop.0+0x10>
 8009af0:	2b01      	cmp	r3, #1
 8009af2:	d106      	bne.n	8009b02 <_strtol_l.constprop.0+0x1e>
 8009af4:	f7fd fdae 	bl	8007654 <__errno>
 8009af8:	2316      	movs	r3, #22
 8009afa:	6003      	str	r3, [r0, #0]
 8009afc:	2000      	movs	r0, #0
 8009afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b02:	4834      	ldr	r0, [pc, #208]	@ (8009bd4 <_strtol_l.constprop.0+0xf0>)
 8009b04:	460d      	mov	r5, r1
 8009b06:	462a      	mov	r2, r5
 8009b08:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b0c:	5d06      	ldrb	r6, [r0, r4]
 8009b0e:	f016 0608 	ands.w	r6, r6, #8
 8009b12:	d1f8      	bne.n	8009b06 <_strtol_l.constprop.0+0x22>
 8009b14:	2c2d      	cmp	r4, #45	@ 0x2d
 8009b16:	d12d      	bne.n	8009b74 <_strtol_l.constprop.0+0x90>
 8009b18:	782c      	ldrb	r4, [r5, #0]
 8009b1a:	2601      	movs	r6, #1
 8009b1c:	1c95      	adds	r5, r2, #2
 8009b1e:	f033 0210 	bics.w	r2, r3, #16
 8009b22:	d109      	bne.n	8009b38 <_strtol_l.constprop.0+0x54>
 8009b24:	2c30      	cmp	r4, #48	@ 0x30
 8009b26:	d12a      	bne.n	8009b7e <_strtol_l.constprop.0+0x9a>
 8009b28:	782a      	ldrb	r2, [r5, #0]
 8009b2a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009b2e:	2a58      	cmp	r2, #88	@ 0x58
 8009b30:	d125      	bne.n	8009b7e <_strtol_l.constprop.0+0x9a>
 8009b32:	786c      	ldrb	r4, [r5, #1]
 8009b34:	2310      	movs	r3, #16
 8009b36:	3502      	adds	r5, #2
 8009b38:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009b3c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009b40:	2200      	movs	r2, #0
 8009b42:	fbbc f9f3 	udiv	r9, ip, r3
 8009b46:	4610      	mov	r0, r2
 8009b48:	fb03 ca19 	mls	sl, r3, r9, ip
 8009b4c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009b50:	2f09      	cmp	r7, #9
 8009b52:	d81b      	bhi.n	8009b8c <_strtol_l.constprop.0+0xa8>
 8009b54:	463c      	mov	r4, r7
 8009b56:	42a3      	cmp	r3, r4
 8009b58:	dd27      	ble.n	8009baa <_strtol_l.constprop.0+0xc6>
 8009b5a:	1c57      	adds	r7, r2, #1
 8009b5c:	d007      	beq.n	8009b6e <_strtol_l.constprop.0+0x8a>
 8009b5e:	4581      	cmp	r9, r0
 8009b60:	d320      	bcc.n	8009ba4 <_strtol_l.constprop.0+0xc0>
 8009b62:	d101      	bne.n	8009b68 <_strtol_l.constprop.0+0x84>
 8009b64:	45a2      	cmp	sl, r4
 8009b66:	db1d      	blt.n	8009ba4 <_strtol_l.constprop.0+0xc0>
 8009b68:	fb00 4003 	mla	r0, r0, r3, r4
 8009b6c:	2201      	movs	r2, #1
 8009b6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b72:	e7eb      	b.n	8009b4c <_strtol_l.constprop.0+0x68>
 8009b74:	2c2b      	cmp	r4, #43	@ 0x2b
 8009b76:	bf04      	itt	eq
 8009b78:	782c      	ldrbeq	r4, [r5, #0]
 8009b7a:	1c95      	addeq	r5, r2, #2
 8009b7c:	e7cf      	b.n	8009b1e <_strtol_l.constprop.0+0x3a>
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d1da      	bne.n	8009b38 <_strtol_l.constprop.0+0x54>
 8009b82:	2c30      	cmp	r4, #48	@ 0x30
 8009b84:	bf0c      	ite	eq
 8009b86:	2308      	moveq	r3, #8
 8009b88:	230a      	movne	r3, #10
 8009b8a:	e7d5      	b.n	8009b38 <_strtol_l.constprop.0+0x54>
 8009b8c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009b90:	2f19      	cmp	r7, #25
 8009b92:	d801      	bhi.n	8009b98 <_strtol_l.constprop.0+0xb4>
 8009b94:	3c37      	subs	r4, #55	@ 0x37
 8009b96:	e7de      	b.n	8009b56 <_strtol_l.constprop.0+0x72>
 8009b98:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009b9c:	2f19      	cmp	r7, #25
 8009b9e:	d804      	bhi.n	8009baa <_strtol_l.constprop.0+0xc6>
 8009ba0:	3c57      	subs	r4, #87	@ 0x57
 8009ba2:	e7d8      	b.n	8009b56 <_strtol_l.constprop.0+0x72>
 8009ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ba8:	e7e1      	b.n	8009b6e <_strtol_l.constprop.0+0x8a>
 8009baa:	1c53      	adds	r3, r2, #1
 8009bac:	d108      	bne.n	8009bc0 <_strtol_l.constprop.0+0xdc>
 8009bae:	2322      	movs	r3, #34	@ 0x22
 8009bb0:	f8ce 3000 	str.w	r3, [lr]
 8009bb4:	4660      	mov	r0, ip
 8009bb6:	f1b8 0f00 	cmp.w	r8, #0
 8009bba:	d0a0      	beq.n	8009afe <_strtol_l.constprop.0+0x1a>
 8009bbc:	1e69      	subs	r1, r5, #1
 8009bbe:	e006      	b.n	8009bce <_strtol_l.constprop.0+0xea>
 8009bc0:	b106      	cbz	r6, 8009bc4 <_strtol_l.constprop.0+0xe0>
 8009bc2:	4240      	negs	r0, r0
 8009bc4:	f1b8 0f00 	cmp.w	r8, #0
 8009bc8:	d099      	beq.n	8009afe <_strtol_l.constprop.0+0x1a>
 8009bca:	2a00      	cmp	r2, #0
 8009bcc:	d1f6      	bne.n	8009bbc <_strtol_l.constprop.0+0xd8>
 8009bce:	f8c8 1000 	str.w	r1, [r8]
 8009bd2:	e794      	b.n	8009afe <_strtol_l.constprop.0+0x1a>
 8009bd4:	0800b2f9 	.word	0x0800b2f9

08009bd8 <_strtol_r>:
 8009bd8:	f7ff bf84 	b.w	8009ae4 <_strtol_l.constprop.0>

08009bdc <__ssputs_r>:
 8009bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009be0:	688e      	ldr	r6, [r1, #8]
 8009be2:	461f      	mov	r7, r3
 8009be4:	42be      	cmp	r6, r7
 8009be6:	680b      	ldr	r3, [r1, #0]
 8009be8:	4682      	mov	sl, r0
 8009bea:	460c      	mov	r4, r1
 8009bec:	4690      	mov	r8, r2
 8009bee:	d82d      	bhi.n	8009c4c <__ssputs_r+0x70>
 8009bf0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009bf4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009bf8:	d026      	beq.n	8009c48 <__ssputs_r+0x6c>
 8009bfa:	6965      	ldr	r5, [r4, #20]
 8009bfc:	6909      	ldr	r1, [r1, #16]
 8009bfe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c02:	eba3 0901 	sub.w	r9, r3, r1
 8009c06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c0a:	1c7b      	adds	r3, r7, #1
 8009c0c:	444b      	add	r3, r9
 8009c0e:	106d      	asrs	r5, r5, #1
 8009c10:	429d      	cmp	r5, r3
 8009c12:	bf38      	it	cc
 8009c14:	461d      	movcc	r5, r3
 8009c16:	0553      	lsls	r3, r2, #21
 8009c18:	d527      	bpl.n	8009c6a <__ssputs_r+0x8e>
 8009c1a:	4629      	mov	r1, r5
 8009c1c:	f7fe fc1c 	bl	8008458 <_malloc_r>
 8009c20:	4606      	mov	r6, r0
 8009c22:	b360      	cbz	r0, 8009c7e <__ssputs_r+0xa2>
 8009c24:	6921      	ldr	r1, [r4, #16]
 8009c26:	464a      	mov	r2, r9
 8009c28:	f7fd fd41 	bl	80076ae <memcpy>
 8009c2c:	89a3      	ldrh	r3, [r4, #12]
 8009c2e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009c32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c36:	81a3      	strh	r3, [r4, #12]
 8009c38:	6126      	str	r6, [r4, #16]
 8009c3a:	6165      	str	r5, [r4, #20]
 8009c3c:	444e      	add	r6, r9
 8009c3e:	eba5 0509 	sub.w	r5, r5, r9
 8009c42:	6026      	str	r6, [r4, #0]
 8009c44:	60a5      	str	r5, [r4, #8]
 8009c46:	463e      	mov	r6, r7
 8009c48:	42be      	cmp	r6, r7
 8009c4a:	d900      	bls.n	8009c4e <__ssputs_r+0x72>
 8009c4c:	463e      	mov	r6, r7
 8009c4e:	6820      	ldr	r0, [r4, #0]
 8009c50:	4632      	mov	r2, r6
 8009c52:	4641      	mov	r1, r8
 8009c54:	f000 f9c6 	bl	8009fe4 <memmove>
 8009c58:	68a3      	ldr	r3, [r4, #8]
 8009c5a:	1b9b      	subs	r3, r3, r6
 8009c5c:	60a3      	str	r3, [r4, #8]
 8009c5e:	6823      	ldr	r3, [r4, #0]
 8009c60:	4433      	add	r3, r6
 8009c62:	6023      	str	r3, [r4, #0]
 8009c64:	2000      	movs	r0, #0
 8009c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c6a:	462a      	mov	r2, r5
 8009c6c:	f000 fd7d 	bl	800a76a <_realloc_r>
 8009c70:	4606      	mov	r6, r0
 8009c72:	2800      	cmp	r0, #0
 8009c74:	d1e0      	bne.n	8009c38 <__ssputs_r+0x5c>
 8009c76:	6921      	ldr	r1, [r4, #16]
 8009c78:	4650      	mov	r0, sl
 8009c7a:	f7fe fb79 	bl	8008370 <_free_r>
 8009c7e:	230c      	movs	r3, #12
 8009c80:	f8ca 3000 	str.w	r3, [sl]
 8009c84:	89a3      	ldrh	r3, [r4, #12]
 8009c86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c8a:	81a3      	strh	r3, [r4, #12]
 8009c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c90:	e7e9      	b.n	8009c66 <__ssputs_r+0x8a>
	...

08009c94 <_svfiprintf_r>:
 8009c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c98:	4698      	mov	r8, r3
 8009c9a:	898b      	ldrh	r3, [r1, #12]
 8009c9c:	061b      	lsls	r3, r3, #24
 8009c9e:	b09d      	sub	sp, #116	@ 0x74
 8009ca0:	4607      	mov	r7, r0
 8009ca2:	460d      	mov	r5, r1
 8009ca4:	4614      	mov	r4, r2
 8009ca6:	d510      	bpl.n	8009cca <_svfiprintf_r+0x36>
 8009ca8:	690b      	ldr	r3, [r1, #16]
 8009caa:	b973      	cbnz	r3, 8009cca <_svfiprintf_r+0x36>
 8009cac:	2140      	movs	r1, #64	@ 0x40
 8009cae:	f7fe fbd3 	bl	8008458 <_malloc_r>
 8009cb2:	6028      	str	r0, [r5, #0]
 8009cb4:	6128      	str	r0, [r5, #16]
 8009cb6:	b930      	cbnz	r0, 8009cc6 <_svfiprintf_r+0x32>
 8009cb8:	230c      	movs	r3, #12
 8009cba:	603b      	str	r3, [r7, #0]
 8009cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8009cc0:	b01d      	add	sp, #116	@ 0x74
 8009cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cc6:	2340      	movs	r3, #64	@ 0x40
 8009cc8:	616b      	str	r3, [r5, #20]
 8009cca:	2300      	movs	r3, #0
 8009ccc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cce:	2320      	movs	r3, #32
 8009cd0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009cd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cd8:	2330      	movs	r3, #48	@ 0x30
 8009cda:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009e78 <_svfiprintf_r+0x1e4>
 8009cde:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009ce2:	f04f 0901 	mov.w	r9, #1
 8009ce6:	4623      	mov	r3, r4
 8009ce8:	469a      	mov	sl, r3
 8009cea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cee:	b10a      	cbz	r2, 8009cf4 <_svfiprintf_r+0x60>
 8009cf0:	2a25      	cmp	r2, #37	@ 0x25
 8009cf2:	d1f9      	bne.n	8009ce8 <_svfiprintf_r+0x54>
 8009cf4:	ebba 0b04 	subs.w	fp, sl, r4
 8009cf8:	d00b      	beq.n	8009d12 <_svfiprintf_r+0x7e>
 8009cfa:	465b      	mov	r3, fp
 8009cfc:	4622      	mov	r2, r4
 8009cfe:	4629      	mov	r1, r5
 8009d00:	4638      	mov	r0, r7
 8009d02:	f7ff ff6b 	bl	8009bdc <__ssputs_r>
 8009d06:	3001      	adds	r0, #1
 8009d08:	f000 80a7 	beq.w	8009e5a <_svfiprintf_r+0x1c6>
 8009d0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d0e:	445a      	add	r2, fp
 8009d10:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d12:	f89a 3000 	ldrb.w	r3, [sl]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	f000 809f 	beq.w	8009e5a <_svfiprintf_r+0x1c6>
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8009d22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d26:	f10a 0a01 	add.w	sl, sl, #1
 8009d2a:	9304      	str	r3, [sp, #16]
 8009d2c:	9307      	str	r3, [sp, #28]
 8009d2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009d32:	931a      	str	r3, [sp, #104]	@ 0x68
 8009d34:	4654      	mov	r4, sl
 8009d36:	2205      	movs	r2, #5
 8009d38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d3c:	484e      	ldr	r0, [pc, #312]	@ (8009e78 <_svfiprintf_r+0x1e4>)
 8009d3e:	f7f6 fa47 	bl	80001d0 <memchr>
 8009d42:	9a04      	ldr	r2, [sp, #16]
 8009d44:	b9d8      	cbnz	r0, 8009d7e <_svfiprintf_r+0xea>
 8009d46:	06d0      	lsls	r0, r2, #27
 8009d48:	bf44      	itt	mi
 8009d4a:	2320      	movmi	r3, #32
 8009d4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d50:	0711      	lsls	r1, r2, #28
 8009d52:	bf44      	itt	mi
 8009d54:	232b      	movmi	r3, #43	@ 0x2b
 8009d56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d5a:	f89a 3000 	ldrb.w	r3, [sl]
 8009d5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d60:	d015      	beq.n	8009d8e <_svfiprintf_r+0xfa>
 8009d62:	9a07      	ldr	r2, [sp, #28]
 8009d64:	4654      	mov	r4, sl
 8009d66:	2000      	movs	r0, #0
 8009d68:	f04f 0c0a 	mov.w	ip, #10
 8009d6c:	4621      	mov	r1, r4
 8009d6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d72:	3b30      	subs	r3, #48	@ 0x30
 8009d74:	2b09      	cmp	r3, #9
 8009d76:	d94b      	bls.n	8009e10 <_svfiprintf_r+0x17c>
 8009d78:	b1b0      	cbz	r0, 8009da8 <_svfiprintf_r+0x114>
 8009d7a:	9207      	str	r2, [sp, #28]
 8009d7c:	e014      	b.n	8009da8 <_svfiprintf_r+0x114>
 8009d7e:	eba0 0308 	sub.w	r3, r0, r8
 8009d82:	fa09 f303 	lsl.w	r3, r9, r3
 8009d86:	4313      	orrs	r3, r2
 8009d88:	9304      	str	r3, [sp, #16]
 8009d8a:	46a2      	mov	sl, r4
 8009d8c:	e7d2      	b.n	8009d34 <_svfiprintf_r+0xa0>
 8009d8e:	9b03      	ldr	r3, [sp, #12]
 8009d90:	1d19      	adds	r1, r3, #4
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	9103      	str	r1, [sp, #12]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	bfbb      	ittet	lt
 8009d9a:	425b      	neglt	r3, r3
 8009d9c:	f042 0202 	orrlt.w	r2, r2, #2
 8009da0:	9307      	strge	r3, [sp, #28]
 8009da2:	9307      	strlt	r3, [sp, #28]
 8009da4:	bfb8      	it	lt
 8009da6:	9204      	strlt	r2, [sp, #16]
 8009da8:	7823      	ldrb	r3, [r4, #0]
 8009daa:	2b2e      	cmp	r3, #46	@ 0x2e
 8009dac:	d10a      	bne.n	8009dc4 <_svfiprintf_r+0x130>
 8009dae:	7863      	ldrb	r3, [r4, #1]
 8009db0:	2b2a      	cmp	r3, #42	@ 0x2a
 8009db2:	d132      	bne.n	8009e1a <_svfiprintf_r+0x186>
 8009db4:	9b03      	ldr	r3, [sp, #12]
 8009db6:	1d1a      	adds	r2, r3, #4
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	9203      	str	r2, [sp, #12]
 8009dbc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009dc0:	3402      	adds	r4, #2
 8009dc2:	9305      	str	r3, [sp, #20]
 8009dc4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009e88 <_svfiprintf_r+0x1f4>
 8009dc8:	7821      	ldrb	r1, [r4, #0]
 8009dca:	2203      	movs	r2, #3
 8009dcc:	4650      	mov	r0, sl
 8009dce:	f7f6 f9ff 	bl	80001d0 <memchr>
 8009dd2:	b138      	cbz	r0, 8009de4 <_svfiprintf_r+0x150>
 8009dd4:	9b04      	ldr	r3, [sp, #16]
 8009dd6:	eba0 000a 	sub.w	r0, r0, sl
 8009dda:	2240      	movs	r2, #64	@ 0x40
 8009ddc:	4082      	lsls	r2, r0
 8009dde:	4313      	orrs	r3, r2
 8009de0:	3401      	adds	r4, #1
 8009de2:	9304      	str	r3, [sp, #16]
 8009de4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009de8:	4824      	ldr	r0, [pc, #144]	@ (8009e7c <_svfiprintf_r+0x1e8>)
 8009dea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009dee:	2206      	movs	r2, #6
 8009df0:	f7f6 f9ee 	bl	80001d0 <memchr>
 8009df4:	2800      	cmp	r0, #0
 8009df6:	d036      	beq.n	8009e66 <_svfiprintf_r+0x1d2>
 8009df8:	4b21      	ldr	r3, [pc, #132]	@ (8009e80 <_svfiprintf_r+0x1ec>)
 8009dfa:	bb1b      	cbnz	r3, 8009e44 <_svfiprintf_r+0x1b0>
 8009dfc:	9b03      	ldr	r3, [sp, #12]
 8009dfe:	3307      	adds	r3, #7
 8009e00:	f023 0307 	bic.w	r3, r3, #7
 8009e04:	3308      	adds	r3, #8
 8009e06:	9303      	str	r3, [sp, #12]
 8009e08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e0a:	4433      	add	r3, r6
 8009e0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e0e:	e76a      	b.n	8009ce6 <_svfiprintf_r+0x52>
 8009e10:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e14:	460c      	mov	r4, r1
 8009e16:	2001      	movs	r0, #1
 8009e18:	e7a8      	b.n	8009d6c <_svfiprintf_r+0xd8>
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	3401      	adds	r4, #1
 8009e1e:	9305      	str	r3, [sp, #20]
 8009e20:	4619      	mov	r1, r3
 8009e22:	f04f 0c0a 	mov.w	ip, #10
 8009e26:	4620      	mov	r0, r4
 8009e28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e2c:	3a30      	subs	r2, #48	@ 0x30
 8009e2e:	2a09      	cmp	r2, #9
 8009e30:	d903      	bls.n	8009e3a <_svfiprintf_r+0x1a6>
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d0c6      	beq.n	8009dc4 <_svfiprintf_r+0x130>
 8009e36:	9105      	str	r1, [sp, #20]
 8009e38:	e7c4      	b.n	8009dc4 <_svfiprintf_r+0x130>
 8009e3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e3e:	4604      	mov	r4, r0
 8009e40:	2301      	movs	r3, #1
 8009e42:	e7f0      	b.n	8009e26 <_svfiprintf_r+0x192>
 8009e44:	ab03      	add	r3, sp, #12
 8009e46:	9300      	str	r3, [sp, #0]
 8009e48:	462a      	mov	r2, r5
 8009e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8009e84 <_svfiprintf_r+0x1f0>)
 8009e4c:	a904      	add	r1, sp, #16
 8009e4e:	4638      	mov	r0, r7
 8009e50:	f7fc fc88 	bl	8006764 <_printf_float>
 8009e54:	1c42      	adds	r2, r0, #1
 8009e56:	4606      	mov	r6, r0
 8009e58:	d1d6      	bne.n	8009e08 <_svfiprintf_r+0x174>
 8009e5a:	89ab      	ldrh	r3, [r5, #12]
 8009e5c:	065b      	lsls	r3, r3, #25
 8009e5e:	f53f af2d 	bmi.w	8009cbc <_svfiprintf_r+0x28>
 8009e62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e64:	e72c      	b.n	8009cc0 <_svfiprintf_r+0x2c>
 8009e66:	ab03      	add	r3, sp, #12
 8009e68:	9300      	str	r3, [sp, #0]
 8009e6a:	462a      	mov	r2, r5
 8009e6c:	4b05      	ldr	r3, [pc, #20]	@ (8009e84 <_svfiprintf_r+0x1f0>)
 8009e6e:	a904      	add	r1, sp, #16
 8009e70:	4638      	mov	r0, r7
 8009e72:	f7fc ff0f 	bl	8006c94 <_printf_i>
 8009e76:	e7ed      	b.n	8009e54 <_svfiprintf_r+0x1c0>
 8009e78:	0800b3f9 	.word	0x0800b3f9
 8009e7c:	0800b403 	.word	0x0800b403
 8009e80:	08006765 	.word	0x08006765
 8009e84:	08009bdd 	.word	0x08009bdd
 8009e88:	0800b3ff 	.word	0x0800b3ff

08009e8c <__sflush_r>:
 8009e8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e94:	0716      	lsls	r6, r2, #28
 8009e96:	4605      	mov	r5, r0
 8009e98:	460c      	mov	r4, r1
 8009e9a:	d454      	bmi.n	8009f46 <__sflush_r+0xba>
 8009e9c:	684b      	ldr	r3, [r1, #4]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	dc02      	bgt.n	8009ea8 <__sflush_r+0x1c>
 8009ea2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	dd48      	ble.n	8009f3a <__sflush_r+0xae>
 8009ea8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009eaa:	2e00      	cmp	r6, #0
 8009eac:	d045      	beq.n	8009f3a <__sflush_r+0xae>
 8009eae:	2300      	movs	r3, #0
 8009eb0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009eb4:	682f      	ldr	r7, [r5, #0]
 8009eb6:	6a21      	ldr	r1, [r4, #32]
 8009eb8:	602b      	str	r3, [r5, #0]
 8009eba:	d030      	beq.n	8009f1e <__sflush_r+0x92>
 8009ebc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009ebe:	89a3      	ldrh	r3, [r4, #12]
 8009ec0:	0759      	lsls	r1, r3, #29
 8009ec2:	d505      	bpl.n	8009ed0 <__sflush_r+0x44>
 8009ec4:	6863      	ldr	r3, [r4, #4]
 8009ec6:	1ad2      	subs	r2, r2, r3
 8009ec8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009eca:	b10b      	cbz	r3, 8009ed0 <__sflush_r+0x44>
 8009ecc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009ece:	1ad2      	subs	r2, r2, r3
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009ed4:	6a21      	ldr	r1, [r4, #32]
 8009ed6:	4628      	mov	r0, r5
 8009ed8:	47b0      	blx	r6
 8009eda:	1c43      	adds	r3, r0, #1
 8009edc:	89a3      	ldrh	r3, [r4, #12]
 8009ede:	d106      	bne.n	8009eee <__sflush_r+0x62>
 8009ee0:	6829      	ldr	r1, [r5, #0]
 8009ee2:	291d      	cmp	r1, #29
 8009ee4:	d82b      	bhi.n	8009f3e <__sflush_r+0xb2>
 8009ee6:	4a2a      	ldr	r2, [pc, #168]	@ (8009f90 <__sflush_r+0x104>)
 8009ee8:	410a      	asrs	r2, r1
 8009eea:	07d6      	lsls	r6, r2, #31
 8009eec:	d427      	bmi.n	8009f3e <__sflush_r+0xb2>
 8009eee:	2200      	movs	r2, #0
 8009ef0:	6062      	str	r2, [r4, #4]
 8009ef2:	04d9      	lsls	r1, r3, #19
 8009ef4:	6922      	ldr	r2, [r4, #16]
 8009ef6:	6022      	str	r2, [r4, #0]
 8009ef8:	d504      	bpl.n	8009f04 <__sflush_r+0x78>
 8009efa:	1c42      	adds	r2, r0, #1
 8009efc:	d101      	bne.n	8009f02 <__sflush_r+0x76>
 8009efe:	682b      	ldr	r3, [r5, #0]
 8009f00:	b903      	cbnz	r3, 8009f04 <__sflush_r+0x78>
 8009f02:	6560      	str	r0, [r4, #84]	@ 0x54
 8009f04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009f06:	602f      	str	r7, [r5, #0]
 8009f08:	b1b9      	cbz	r1, 8009f3a <__sflush_r+0xae>
 8009f0a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009f0e:	4299      	cmp	r1, r3
 8009f10:	d002      	beq.n	8009f18 <__sflush_r+0x8c>
 8009f12:	4628      	mov	r0, r5
 8009f14:	f7fe fa2c 	bl	8008370 <_free_r>
 8009f18:	2300      	movs	r3, #0
 8009f1a:	6363      	str	r3, [r4, #52]	@ 0x34
 8009f1c:	e00d      	b.n	8009f3a <__sflush_r+0xae>
 8009f1e:	2301      	movs	r3, #1
 8009f20:	4628      	mov	r0, r5
 8009f22:	47b0      	blx	r6
 8009f24:	4602      	mov	r2, r0
 8009f26:	1c50      	adds	r0, r2, #1
 8009f28:	d1c9      	bne.n	8009ebe <__sflush_r+0x32>
 8009f2a:	682b      	ldr	r3, [r5, #0]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d0c6      	beq.n	8009ebe <__sflush_r+0x32>
 8009f30:	2b1d      	cmp	r3, #29
 8009f32:	d001      	beq.n	8009f38 <__sflush_r+0xac>
 8009f34:	2b16      	cmp	r3, #22
 8009f36:	d11e      	bne.n	8009f76 <__sflush_r+0xea>
 8009f38:	602f      	str	r7, [r5, #0]
 8009f3a:	2000      	movs	r0, #0
 8009f3c:	e022      	b.n	8009f84 <__sflush_r+0xf8>
 8009f3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f42:	b21b      	sxth	r3, r3
 8009f44:	e01b      	b.n	8009f7e <__sflush_r+0xf2>
 8009f46:	690f      	ldr	r7, [r1, #16]
 8009f48:	2f00      	cmp	r7, #0
 8009f4a:	d0f6      	beq.n	8009f3a <__sflush_r+0xae>
 8009f4c:	0793      	lsls	r3, r2, #30
 8009f4e:	680e      	ldr	r6, [r1, #0]
 8009f50:	bf08      	it	eq
 8009f52:	694b      	ldreq	r3, [r1, #20]
 8009f54:	600f      	str	r7, [r1, #0]
 8009f56:	bf18      	it	ne
 8009f58:	2300      	movne	r3, #0
 8009f5a:	eba6 0807 	sub.w	r8, r6, r7
 8009f5e:	608b      	str	r3, [r1, #8]
 8009f60:	f1b8 0f00 	cmp.w	r8, #0
 8009f64:	dde9      	ble.n	8009f3a <__sflush_r+0xae>
 8009f66:	6a21      	ldr	r1, [r4, #32]
 8009f68:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009f6a:	4643      	mov	r3, r8
 8009f6c:	463a      	mov	r2, r7
 8009f6e:	4628      	mov	r0, r5
 8009f70:	47b0      	blx	r6
 8009f72:	2800      	cmp	r0, #0
 8009f74:	dc08      	bgt.n	8009f88 <__sflush_r+0xfc>
 8009f76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f7e:	81a3      	strh	r3, [r4, #12]
 8009f80:	f04f 30ff 	mov.w	r0, #4294967295
 8009f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f88:	4407      	add	r7, r0
 8009f8a:	eba8 0800 	sub.w	r8, r8, r0
 8009f8e:	e7e7      	b.n	8009f60 <__sflush_r+0xd4>
 8009f90:	dfbffffe 	.word	0xdfbffffe

08009f94 <_fflush_r>:
 8009f94:	b538      	push	{r3, r4, r5, lr}
 8009f96:	690b      	ldr	r3, [r1, #16]
 8009f98:	4605      	mov	r5, r0
 8009f9a:	460c      	mov	r4, r1
 8009f9c:	b913      	cbnz	r3, 8009fa4 <_fflush_r+0x10>
 8009f9e:	2500      	movs	r5, #0
 8009fa0:	4628      	mov	r0, r5
 8009fa2:	bd38      	pop	{r3, r4, r5, pc}
 8009fa4:	b118      	cbz	r0, 8009fae <_fflush_r+0x1a>
 8009fa6:	6a03      	ldr	r3, [r0, #32]
 8009fa8:	b90b      	cbnz	r3, 8009fae <_fflush_r+0x1a>
 8009faa:	f7fd fa33 	bl	8007414 <__sinit>
 8009fae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d0f3      	beq.n	8009f9e <_fflush_r+0xa>
 8009fb6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009fb8:	07d0      	lsls	r0, r2, #31
 8009fba:	d404      	bmi.n	8009fc6 <_fflush_r+0x32>
 8009fbc:	0599      	lsls	r1, r3, #22
 8009fbe:	d402      	bmi.n	8009fc6 <_fflush_r+0x32>
 8009fc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009fc2:	f7fd fb72 	bl	80076aa <__retarget_lock_acquire_recursive>
 8009fc6:	4628      	mov	r0, r5
 8009fc8:	4621      	mov	r1, r4
 8009fca:	f7ff ff5f 	bl	8009e8c <__sflush_r>
 8009fce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009fd0:	07da      	lsls	r2, r3, #31
 8009fd2:	4605      	mov	r5, r0
 8009fd4:	d4e4      	bmi.n	8009fa0 <_fflush_r+0xc>
 8009fd6:	89a3      	ldrh	r3, [r4, #12]
 8009fd8:	059b      	lsls	r3, r3, #22
 8009fda:	d4e1      	bmi.n	8009fa0 <_fflush_r+0xc>
 8009fdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009fde:	f7fd fb65 	bl	80076ac <__retarget_lock_release_recursive>
 8009fe2:	e7dd      	b.n	8009fa0 <_fflush_r+0xc>

08009fe4 <memmove>:
 8009fe4:	4288      	cmp	r0, r1
 8009fe6:	b510      	push	{r4, lr}
 8009fe8:	eb01 0402 	add.w	r4, r1, r2
 8009fec:	d902      	bls.n	8009ff4 <memmove+0x10>
 8009fee:	4284      	cmp	r4, r0
 8009ff0:	4623      	mov	r3, r4
 8009ff2:	d807      	bhi.n	800a004 <memmove+0x20>
 8009ff4:	1e43      	subs	r3, r0, #1
 8009ff6:	42a1      	cmp	r1, r4
 8009ff8:	d008      	beq.n	800a00c <memmove+0x28>
 8009ffa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ffe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a002:	e7f8      	b.n	8009ff6 <memmove+0x12>
 800a004:	4402      	add	r2, r0
 800a006:	4601      	mov	r1, r0
 800a008:	428a      	cmp	r2, r1
 800a00a:	d100      	bne.n	800a00e <memmove+0x2a>
 800a00c:	bd10      	pop	{r4, pc}
 800a00e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a012:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a016:	e7f7      	b.n	800a008 <memmove+0x24>

0800a018 <strncmp>:
 800a018:	b510      	push	{r4, lr}
 800a01a:	b16a      	cbz	r2, 800a038 <strncmp+0x20>
 800a01c:	3901      	subs	r1, #1
 800a01e:	1884      	adds	r4, r0, r2
 800a020:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a024:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a028:	429a      	cmp	r2, r3
 800a02a:	d103      	bne.n	800a034 <strncmp+0x1c>
 800a02c:	42a0      	cmp	r0, r4
 800a02e:	d001      	beq.n	800a034 <strncmp+0x1c>
 800a030:	2a00      	cmp	r2, #0
 800a032:	d1f5      	bne.n	800a020 <strncmp+0x8>
 800a034:	1ad0      	subs	r0, r2, r3
 800a036:	bd10      	pop	{r4, pc}
 800a038:	4610      	mov	r0, r2
 800a03a:	e7fc      	b.n	800a036 <strncmp+0x1e>

0800a03c <_sbrk_r>:
 800a03c:	b538      	push	{r3, r4, r5, lr}
 800a03e:	4d06      	ldr	r5, [pc, #24]	@ (800a058 <_sbrk_r+0x1c>)
 800a040:	2300      	movs	r3, #0
 800a042:	4604      	mov	r4, r0
 800a044:	4608      	mov	r0, r1
 800a046:	602b      	str	r3, [r5, #0]
 800a048:	f7f8 f8c2 	bl	80021d0 <_sbrk>
 800a04c:	1c43      	adds	r3, r0, #1
 800a04e:	d102      	bne.n	800a056 <_sbrk_r+0x1a>
 800a050:	682b      	ldr	r3, [r5, #0]
 800a052:	b103      	cbz	r3, 800a056 <_sbrk_r+0x1a>
 800a054:	6023      	str	r3, [r4, #0]
 800a056:	bd38      	pop	{r3, r4, r5, pc}
 800a058:	200045e4 	.word	0x200045e4
 800a05c:	00000000 	.word	0x00000000

0800a060 <nan>:
 800a060:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a068 <nan+0x8>
 800a064:	4770      	bx	lr
 800a066:	bf00      	nop
 800a068:	00000000 	.word	0x00000000
 800a06c:	7ff80000 	.word	0x7ff80000

0800a070 <__assert_func>:
 800a070:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a072:	4614      	mov	r4, r2
 800a074:	461a      	mov	r2, r3
 800a076:	4b09      	ldr	r3, [pc, #36]	@ (800a09c <__assert_func+0x2c>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4605      	mov	r5, r0
 800a07c:	68d8      	ldr	r0, [r3, #12]
 800a07e:	b954      	cbnz	r4, 800a096 <__assert_func+0x26>
 800a080:	4b07      	ldr	r3, [pc, #28]	@ (800a0a0 <__assert_func+0x30>)
 800a082:	461c      	mov	r4, r3
 800a084:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a088:	9100      	str	r1, [sp, #0]
 800a08a:	462b      	mov	r3, r5
 800a08c:	4905      	ldr	r1, [pc, #20]	@ (800a0a4 <__assert_func+0x34>)
 800a08e:	f000 fba7 	bl	800a7e0 <fiprintf>
 800a092:	f000 fbb7 	bl	800a804 <abort>
 800a096:	4b04      	ldr	r3, [pc, #16]	@ (800a0a8 <__assert_func+0x38>)
 800a098:	e7f4      	b.n	800a084 <__assert_func+0x14>
 800a09a:	bf00      	nop
 800a09c:	2000001c 	.word	0x2000001c
 800a0a0:	0800b44d 	.word	0x0800b44d
 800a0a4:	0800b41f 	.word	0x0800b41f
 800a0a8:	0800b412 	.word	0x0800b412

0800a0ac <_calloc_r>:
 800a0ac:	b570      	push	{r4, r5, r6, lr}
 800a0ae:	fba1 5402 	umull	r5, r4, r1, r2
 800a0b2:	b93c      	cbnz	r4, 800a0c4 <_calloc_r+0x18>
 800a0b4:	4629      	mov	r1, r5
 800a0b6:	f7fe f9cf 	bl	8008458 <_malloc_r>
 800a0ba:	4606      	mov	r6, r0
 800a0bc:	b928      	cbnz	r0, 800a0ca <_calloc_r+0x1e>
 800a0be:	2600      	movs	r6, #0
 800a0c0:	4630      	mov	r0, r6
 800a0c2:	bd70      	pop	{r4, r5, r6, pc}
 800a0c4:	220c      	movs	r2, #12
 800a0c6:	6002      	str	r2, [r0, #0]
 800a0c8:	e7f9      	b.n	800a0be <_calloc_r+0x12>
 800a0ca:	462a      	mov	r2, r5
 800a0cc:	4621      	mov	r1, r4
 800a0ce:	f7fd fa6e 	bl	80075ae <memset>
 800a0d2:	e7f5      	b.n	800a0c0 <_calloc_r+0x14>

0800a0d4 <rshift>:
 800a0d4:	6903      	ldr	r3, [r0, #16]
 800a0d6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a0da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a0de:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a0e2:	f100 0414 	add.w	r4, r0, #20
 800a0e6:	dd45      	ble.n	800a174 <rshift+0xa0>
 800a0e8:	f011 011f 	ands.w	r1, r1, #31
 800a0ec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a0f0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a0f4:	d10c      	bne.n	800a110 <rshift+0x3c>
 800a0f6:	f100 0710 	add.w	r7, r0, #16
 800a0fa:	4629      	mov	r1, r5
 800a0fc:	42b1      	cmp	r1, r6
 800a0fe:	d334      	bcc.n	800a16a <rshift+0x96>
 800a100:	1a9b      	subs	r3, r3, r2
 800a102:	009b      	lsls	r3, r3, #2
 800a104:	1eea      	subs	r2, r5, #3
 800a106:	4296      	cmp	r6, r2
 800a108:	bf38      	it	cc
 800a10a:	2300      	movcc	r3, #0
 800a10c:	4423      	add	r3, r4
 800a10e:	e015      	b.n	800a13c <rshift+0x68>
 800a110:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a114:	f1c1 0820 	rsb	r8, r1, #32
 800a118:	40cf      	lsrs	r7, r1
 800a11a:	f105 0e04 	add.w	lr, r5, #4
 800a11e:	46a1      	mov	r9, r4
 800a120:	4576      	cmp	r6, lr
 800a122:	46f4      	mov	ip, lr
 800a124:	d815      	bhi.n	800a152 <rshift+0x7e>
 800a126:	1a9a      	subs	r2, r3, r2
 800a128:	0092      	lsls	r2, r2, #2
 800a12a:	3a04      	subs	r2, #4
 800a12c:	3501      	adds	r5, #1
 800a12e:	42ae      	cmp	r6, r5
 800a130:	bf38      	it	cc
 800a132:	2200      	movcc	r2, #0
 800a134:	18a3      	adds	r3, r4, r2
 800a136:	50a7      	str	r7, [r4, r2]
 800a138:	b107      	cbz	r7, 800a13c <rshift+0x68>
 800a13a:	3304      	adds	r3, #4
 800a13c:	1b1a      	subs	r2, r3, r4
 800a13e:	42a3      	cmp	r3, r4
 800a140:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a144:	bf08      	it	eq
 800a146:	2300      	moveq	r3, #0
 800a148:	6102      	str	r2, [r0, #16]
 800a14a:	bf08      	it	eq
 800a14c:	6143      	streq	r3, [r0, #20]
 800a14e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a152:	f8dc c000 	ldr.w	ip, [ip]
 800a156:	fa0c fc08 	lsl.w	ip, ip, r8
 800a15a:	ea4c 0707 	orr.w	r7, ip, r7
 800a15e:	f849 7b04 	str.w	r7, [r9], #4
 800a162:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a166:	40cf      	lsrs	r7, r1
 800a168:	e7da      	b.n	800a120 <rshift+0x4c>
 800a16a:	f851 cb04 	ldr.w	ip, [r1], #4
 800a16e:	f847 cf04 	str.w	ip, [r7, #4]!
 800a172:	e7c3      	b.n	800a0fc <rshift+0x28>
 800a174:	4623      	mov	r3, r4
 800a176:	e7e1      	b.n	800a13c <rshift+0x68>

0800a178 <__hexdig_fun>:
 800a178:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a17c:	2b09      	cmp	r3, #9
 800a17e:	d802      	bhi.n	800a186 <__hexdig_fun+0xe>
 800a180:	3820      	subs	r0, #32
 800a182:	b2c0      	uxtb	r0, r0
 800a184:	4770      	bx	lr
 800a186:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a18a:	2b05      	cmp	r3, #5
 800a18c:	d801      	bhi.n	800a192 <__hexdig_fun+0x1a>
 800a18e:	3847      	subs	r0, #71	@ 0x47
 800a190:	e7f7      	b.n	800a182 <__hexdig_fun+0xa>
 800a192:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a196:	2b05      	cmp	r3, #5
 800a198:	d801      	bhi.n	800a19e <__hexdig_fun+0x26>
 800a19a:	3827      	subs	r0, #39	@ 0x27
 800a19c:	e7f1      	b.n	800a182 <__hexdig_fun+0xa>
 800a19e:	2000      	movs	r0, #0
 800a1a0:	4770      	bx	lr
	...

0800a1a4 <__gethex>:
 800a1a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1a8:	b085      	sub	sp, #20
 800a1aa:	468a      	mov	sl, r1
 800a1ac:	9302      	str	r3, [sp, #8]
 800a1ae:	680b      	ldr	r3, [r1, #0]
 800a1b0:	9001      	str	r0, [sp, #4]
 800a1b2:	4690      	mov	r8, r2
 800a1b4:	1c9c      	adds	r4, r3, #2
 800a1b6:	46a1      	mov	r9, r4
 800a1b8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a1bc:	2830      	cmp	r0, #48	@ 0x30
 800a1be:	d0fa      	beq.n	800a1b6 <__gethex+0x12>
 800a1c0:	eba9 0303 	sub.w	r3, r9, r3
 800a1c4:	f1a3 0b02 	sub.w	fp, r3, #2
 800a1c8:	f7ff ffd6 	bl	800a178 <__hexdig_fun>
 800a1cc:	4605      	mov	r5, r0
 800a1ce:	2800      	cmp	r0, #0
 800a1d0:	d168      	bne.n	800a2a4 <__gethex+0x100>
 800a1d2:	49a0      	ldr	r1, [pc, #640]	@ (800a454 <__gethex+0x2b0>)
 800a1d4:	2201      	movs	r2, #1
 800a1d6:	4648      	mov	r0, r9
 800a1d8:	f7ff ff1e 	bl	800a018 <strncmp>
 800a1dc:	4607      	mov	r7, r0
 800a1de:	2800      	cmp	r0, #0
 800a1e0:	d167      	bne.n	800a2b2 <__gethex+0x10e>
 800a1e2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a1e6:	4626      	mov	r6, r4
 800a1e8:	f7ff ffc6 	bl	800a178 <__hexdig_fun>
 800a1ec:	2800      	cmp	r0, #0
 800a1ee:	d062      	beq.n	800a2b6 <__gethex+0x112>
 800a1f0:	4623      	mov	r3, r4
 800a1f2:	7818      	ldrb	r0, [r3, #0]
 800a1f4:	2830      	cmp	r0, #48	@ 0x30
 800a1f6:	4699      	mov	r9, r3
 800a1f8:	f103 0301 	add.w	r3, r3, #1
 800a1fc:	d0f9      	beq.n	800a1f2 <__gethex+0x4e>
 800a1fe:	f7ff ffbb 	bl	800a178 <__hexdig_fun>
 800a202:	fab0 f580 	clz	r5, r0
 800a206:	096d      	lsrs	r5, r5, #5
 800a208:	f04f 0b01 	mov.w	fp, #1
 800a20c:	464a      	mov	r2, r9
 800a20e:	4616      	mov	r6, r2
 800a210:	3201      	adds	r2, #1
 800a212:	7830      	ldrb	r0, [r6, #0]
 800a214:	f7ff ffb0 	bl	800a178 <__hexdig_fun>
 800a218:	2800      	cmp	r0, #0
 800a21a:	d1f8      	bne.n	800a20e <__gethex+0x6a>
 800a21c:	498d      	ldr	r1, [pc, #564]	@ (800a454 <__gethex+0x2b0>)
 800a21e:	2201      	movs	r2, #1
 800a220:	4630      	mov	r0, r6
 800a222:	f7ff fef9 	bl	800a018 <strncmp>
 800a226:	2800      	cmp	r0, #0
 800a228:	d13f      	bne.n	800a2aa <__gethex+0x106>
 800a22a:	b944      	cbnz	r4, 800a23e <__gethex+0x9a>
 800a22c:	1c74      	adds	r4, r6, #1
 800a22e:	4622      	mov	r2, r4
 800a230:	4616      	mov	r6, r2
 800a232:	3201      	adds	r2, #1
 800a234:	7830      	ldrb	r0, [r6, #0]
 800a236:	f7ff ff9f 	bl	800a178 <__hexdig_fun>
 800a23a:	2800      	cmp	r0, #0
 800a23c:	d1f8      	bne.n	800a230 <__gethex+0x8c>
 800a23e:	1ba4      	subs	r4, r4, r6
 800a240:	00a7      	lsls	r7, r4, #2
 800a242:	7833      	ldrb	r3, [r6, #0]
 800a244:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a248:	2b50      	cmp	r3, #80	@ 0x50
 800a24a:	d13e      	bne.n	800a2ca <__gethex+0x126>
 800a24c:	7873      	ldrb	r3, [r6, #1]
 800a24e:	2b2b      	cmp	r3, #43	@ 0x2b
 800a250:	d033      	beq.n	800a2ba <__gethex+0x116>
 800a252:	2b2d      	cmp	r3, #45	@ 0x2d
 800a254:	d034      	beq.n	800a2c0 <__gethex+0x11c>
 800a256:	1c71      	adds	r1, r6, #1
 800a258:	2400      	movs	r4, #0
 800a25a:	7808      	ldrb	r0, [r1, #0]
 800a25c:	f7ff ff8c 	bl	800a178 <__hexdig_fun>
 800a260:	1e43      	subs	r3, r0, #1
 800a262:	b2db      	uxtb	r3, r3
 800a264:	2b18      	cmp	r3, #24
 800a266:	d830      	bhi.n	800a2ca <__gethex+0x126>
 800a268:	f1a0 0210 	sub.w	r2, r0, #16
 800a26c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a270:	f7ff ff82 	bl	800a178 <__hexdig_fun>
 800a274:	f100 3cff 	add.w	ip, r0, #4294967295
 800a278:	fa5f fc8c 	uxtb.w	ip, ip
 800a27c:	f1bc 0f18 	cmp.w	ip, #24
 800a280:	f04f 030a 	mov.w	r3, #10
 800a284:	d91e      	bls.n	800a2c4 <__gethex+0x120>
 800a286:	b104      	cbz	r4, 800a28a <__gethex+0xe6>
 800a288:	4252      	negs	r2, r2
 800a28a:	4417      	add	r7, r2
 800a28c:	f8ca 1000 	str.w	r1, [sl]
 800a290:	b1ed      	cbz	r5, 800a2ce <__gethex+0x12a>
 800a292:	f1bb 0f00 	cmp.w	fp, #0
 800a296:	bf0c      	ite	eq
 800a298:	2506      	moveq	r5, #6
 800a29a:	2500      	movne	r5, #0
 800a29c:	4628      	mov	r0, r5
 800a29e:	b005      	add	sp, #20
 800a2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2a4:	2500      	movs	r5, #0
 800a2a6:	462c      	mov	r4, r5
 800a2a8:	e7b0      	b.n	800a20c <__gethex+0x68>
 800a2aa:	2c00      	cmp	r4, #0
 800a2ac:	d1c7      	bne.n	800a23e <__gethex+0x9a>
 800a2ae:	4627      	mov	r7, r4
 800a2b0:	e7c7      	b.n	800a242 <__gethex+0x9e>
 800a2b2:	464e      	mov	r6, r9
 800a2b4:	462f      	mov	r7, r5
 800a2b6:	2501      	movs	r5, #1
 800a2b8:	e7c3      	b.n	800a242 <__gethex+0x9e>
 800a2ba:	2400      	movs	r4, #0
 800a2bc:	1cb1      	adds	r1, r6, #2
 800a2be:	e7cc      	b.n	800a25a <__gethex+0xb6>
 800a2c0:	2401      	movs	r4, #1
 800a2c2:	e7fb      	b.n	800a2bc <__gethex+0x118>
 800a2c4:	fb03 0002 	mla	r0, r3, r2, r0
 800a2c8:	e7ce      	b.n	800a268 <__gethex+0xc4>
 800a2ca:	4631      	mov	r1, r6
 800a2cc:	e7de      	b.n	800a28c <__gethex+0xe8>
 800a2ce:	eba6 0309 	sub.w	r3, r6, r9
 800a2d2:	3b01      	subs	r3, #1
 800a2d4:	4629      	mov	r1, r5
 800a2d6:	2b07      	cmp	r3, #7
 800a2d8:	dc0a      	bgt.n	800a2f0 <__gethex+0x14c>
 800a2da:	9801      	ldr	r0, [sp, #4]
 800a2dc:	f7fe f948 	bl	8008570 <_Balloc>
 800a2e0:	4604      	mov	r4, r0
 800a2e2:	b940      	cbnz	r0, 800a2f6 <__gethex+0x152>
 800a2e4:	4b5c      	ldr	r3, [pc, #368]	@ (800a458 <__gethex+0x2b4>)
 800a2e6:	4602      	mov	r2, r0
 800a2e8:	21e4      	movs	r1, #228	@ 0xe4
 800a2ea:	485c      	ldr	r0, [pc, #368]	@ (800a45c <__gethex+0x2b8>)
 800a2ec:	f7ff fec0 	bl	800a070 <__assert_func>
 800a2f0:	3101      	adds	r1, #1
 800a2f2:	105b      	asrs	r3, r3, #1
 800a2f4:	e7ef      	b.n	800a2d6 <__gethex+0x132>
 800a2f6:	f100 0a14 	add.w	sl, r0, #20
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	4655      	mov	r5, sl
 800a2fe:	469b      	mov	fp, r3
 800a300:	45b1      	cmp	r9, r6
 800a302:	d337      	bcc.n	800a374 <__gethex+0x1d0>
 800a304:	f845 bb04 	str.w	fp, [r5], #4
 800a308:	eba5 050a 	sub.w	r5, r5, sl
 800a30c:	10ad      	asrs	r5, r5, #2
 800a30e:	6125      	str	r5, [r4, #16]
 800a310:	4658      	mov	r0, fp
 800a312:	f7fe fa1f 	bl	8008754 <__hi0bits>
 800a316:	016d      	lsls	r5, r5, #5
 800a318:	f8d8 6000 	ldr.w	r6, [r8]
 800a31c:	1a2d      	subs	r5, r5, r0
 800a31e:	42b5      	cmp	r5, r6
 800a320:	dd54      	ble.n	800a3cc <__gethex+0x228>
 800a322:	1bad      	subs	r5, r5, r6
 800a324:	4629      	mov	r1, r5
 800a326:	4620      	mov	r0, r4
 800a328:	f7fe fdb3 	bl	8008e92 <__any_on>
 800a32c:	4681      	mov	r9, r0
 800a32e:	b178      	cbz	r0, 800a350 <__gethex+0x1ac>
 800a330:	1e6b      	subs	r3, r5, #1
 800a332:	1159      	asrs	r1, r3, #5
 800a334:	f003 021f 	and.w	r2, r3, #31
 800a338:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a33c:	f04f 0901 	mov.w	r9, #1
 800a340:	fa09 f202 	lsl.w	r2, r9, r2
 800a344:	420a      	tst	r2, r1
 800a346:	d003      	beq.n	800a350 <__gethex+0x1ac>
 800a348:	454b      	cmp	r3, r9
 800a34a:	dc36      	bgt.n	800a3ba <__gethex+0x216>
 800a34c:	f04f 0902 	mov.w	r9, #2
 800a350:	4629      	mov	r1, r5
 800a352:	4620      	mov	r0, r4
 800a354:	f7ff febe 	bl	800a0d4 <rshift>
 800a358:	442f      	add	r7, r5
 800a35a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a35e:	42bb      	cmp	r3, r7
 800a360:	da42      	bge.n	800a3e8 <__gethex+0x244>
 800a362:	9801      	ldr	r0, [sp, #4]
 800a364:	4621      	mov	r1, r4
 800a366:	f7fe f943 	bl	80085f0 <_Bfree>
 800a36a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a36c:	2300      	movs	r3, #0
 800a36e:	6013      	str	r3, [r2, #0]
 800a370:	25a3      	movs	r5, #163	@ 0xa3
 800a372:	e793      	b.n	800a29c <__gethex+0xf8>
 800a374:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a378:	2a2e      	cmp	r2, #46	@ 0x2e
 800a37a:	d012      	beq.n	800a3a2 <__gethex+0x1fe>
 800a37c:	2b20      	cmp	r3, #32
 800a37e:	d104      	bne.n	800a38a <__gethex+0x1e6>
 800a380:	f845 bb04 	str.w	fp, [r5], #4
 800a384:	f04f 0b00 	mov.w	fp, #0
 800a388:	465b      	mov	r3, fp
 800a38a:	7830      	ldrb	r0, [r6, #0]
 800a38c:	9303      	str	r3, [sp, #12]
 800a38e:	f7ff fef3 	bl	800a178 <__hexdig_fun>
 800a392:	9b03      	ldr	r3, [sp, #12]
 800a394:	f000 000f 	and.w	r0, r0, #15
 800a398:	4098      	lsls	r0, r3
 800a39a:	ea4b 0b00 	orr.w	fp, fp, r0
 800a39e:	3304      	adds	r3, #4
 800a3a0:	e7ae      	b.n	800a300 <__gethex+0x15c>
 800a3a2:	45b1      	cmp	r9, r6
 800a3a4:	d8ea      	bhi.n	800a37c <__gethex+0x1d8>
 800a3a6:	492b      	ldr	r1, [pc, #172]	@ (800a454 <__gethex+0x2b0>)
 800a3a8:	9303      	str	r3, [sp, #12]
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	4630      	mov	r0, r6
 800a3ae:	f7ff fe33 	bl	800a018 <strncmp>
 800a3b2:	9b03      	ldr	r3, [sp, #12]
 800a3b4:	2800      	cmp	r0, #0
 800a3b6:	d1e1      	bne.n	800a37c <__gethex+0x1d8>
 800a3b8:	e7a2      	b.n	800a300 <__gethex+0x15c>
 800a3ba:	1ea9      	subs	r1, r5, #2
 800a3bc:	4620      	mov	r0, r4
 800a3be:	f7fe fd68 	bl	8008e92 <__any_on>
 800a3c2:	2800      	cmp	r0, #0
 800a3c4:	d0c2      	beq.n	800a34c <__gethex+0x1a8>
 800a3c6:	f04f 0903 	mov.w	r9, #3
 800a3ca:	e7c1      	b.n	800a350 <__gethex+0x1ac>
 800a3cc:	da09      	bge.n	800a3e2 <__gethex+0x23e>
 800a3ce:	1b75      	subs	r5, r6, r5
 800a3d0:	4621      	mov	r1, r4
 800a3d2:	9801      	ldr	r0, [sp, #4]
 800a3d4:	462a      	mov	r2, r5
 800a3d6:	f7fe fb23 	bl	8008a20 <__lshift>
 800a3da:	1b7f      	subs	r7, r7, r5
 800a3dc:	4604      	mov	r4, r0
 800a3de:	f100 0a14 	add.w	sl, r0, #20
 800a3e2:	f04f 0900 	mov.w	r9, #0
 800a3e6:	e7b8      	b.n	800a35a <__gethex+0x1b6>
 800a3e8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a3ec:	42bd      	cmp	r5, r7
 800a3ee:	dd6f      	ble.n	800a4d0 <__gethex+0x32c>
 800a3f0:	1bed      	subs	r5, r5, r7
 800a3f2:	42ae      	cmp	r6, r5
 800a3f4:	dc34      	bgt.n	800a460 <__gethex+0x2bc>
 800a3f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a3fa:	2b02      	cmp	r3, #2
 800a3fc:	d022      	beq.n	800a444 <__gethex+0x2a0>
 800a3fe:	2b03      	cmp	r3, #3
 800a400:	d024      	beq.n	800a44c <__gethex+0x2a8>
 800a402:	2b01      	cmp	r3, #1
 800a404:	d115      	bne.n	800a432 <__gethex+0x28e>
 800a406:	42ae      	cmp	r6, r5
 800a408:	d113      	bne.n	800a432 <__gethex+0x28e>
 800a40a:	2e01      	cmp	r6, #1
 800a40c:	d10b      	bne.n	800a426 <__gethex+0x282>
 800a40e:	9a02      	ldr	r2, [sp, #8]
 800a410:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a414:	6013      	str	r3, [r2, #0]
 800a416:	2301      	movs	r3, #1
 800a418:	6123      	str	r3, [r4, #16]
 800a41a:	f8ca 3000 	str.w	r3, [sl]
 800a41e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a420:	2562      	movs	r5, #98	@ 0x62
 800a422:	601c      	str	r4, [r3, #0]
 800a424:	e73a      	b.n	800a29c <__gethex+0xf8>
 800a426:	1e71      	subs	r1, r6, #1
 800a428:	4620      	mov	r0, r4
 800a42a:	f7fe fd32 	bl	8008e92 <__any_on>
 800a42e:	2800      	cmp	r0, #0
 800a430:	d1ed      	bne.n	800a40e <__gethex+0x26a>
 800a432:	9801      	ldr	r0, [sp, #4]
 800a434:	4621      	mov	r1, r4
 800a436:	f7fe f8db 	bl	80085f0 <_Bfree>
 800a43a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a43c:	2300      	movs	r3, #0
 800a43e:	6013      	str	r3, [r2, #0]
 800a440:	2550      	movs	r5, #80	@ 0x50
 800a442:	e72b      	b.n	800a29c <__gethex+0xf8>
 800a444:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a446:	2b00      	cmp	r3, #0
 800a448:	d1f3      	bne.n	800a432 <__gethex+0x28e>
 800a44a:	e7e0      	b.n	800a40e <__gethex+0x26a>
 800a44c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d1dd      	bne.n	800a40e <__gethex+0x26a>
 800a452:	e7ee      	b.n	800a432 <__gethex+0x28e>
 800a454:	0800b2a0 	.word	0x0800b2a0
 800a458:	0800b135 	.word	0x0800b135
 800a45c:	0800b44e 	.word	0x0800b44e
 800a460:	1e6f      	subs	r7, r5, #1
 800a462:	f1b9 0f00 	cmp.w	r9, #0
 800a466:	d130      	bne.n	800a4ca <__gethex+0x326>
 800a468:	b127      	cbz	r7, 800a474 <__gethex+0x2d0>
 800a46a:	4639      	mov	r1, r7
 800a46c:	4620      	mov	r0, r4
 800a46e:	f7fe fd10 	bl	8008e92 <__any_on>
 800a472:	4681      	mov	r9, r0
 800a474:	117a      	asrs	r2, r7, #5
 800a476:	2301      	movs	r3, #1
 800a478:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a47c:	f007 071f 	and.w	r7, r7, #31
 800a480:	40bb      	lsls	r3, r7
 800a482:	4213      	tst	r3, r2
 800a484:	4629      	mov	r1, r5
 800a486:	4620      	mov	r0, r4
 800a488:	bf18      	it	ne
 800a48a:	f049 0902 	orrne.w	r9, r9, #2
 800a48e:	f7ff fe21 	bl	800a0d4 <rshift>
 800a492:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a496:	1b76      	subs	r6, r6, r5
 800a498:	2502      	movs	r5, #2
 800a49a:	f1b9 0f00 	cmp.w	r9, #0
 800a49e:	d047      	beq.n	800a530 <__gethex+0x38c>
 800a4a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a4a4:	2b02      	cmp	r3, #2
 800a4a6:	d015      	beq.n	800a4d4 <__gethex+0x330>
 800a4a8:	2b03      	cmp	r3, #3
 800a4aa:	d017      	beq.n	800a4dc <__gethex+0x338>
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d109      	bne.n	800a4c4 <__gethex+0x320>
 800a4b0:	f019 0f02 	tst.w	r9, #2
 800a4b4:	d006      	beq.n	800a4c4 <__gethex+0x320>
 800a4b6:	f8da 3000 	ldr.w	r3, [sl]
 800a4ba:	ea49 0903 	orr.w	r9, r9, r3
 800a4be:	f019 0f01 	tst.w	r9, #1
 800a4c2:	d10e      	bne.n	800a4e2 <__gethex+0x33e>
 800a4c4:	f045 0510 	orr.w	r5, r5, #16
 800a4c8:	e032      	b.n	800a530 <__gethex+0x38c>
 800a4ca:	f04f 0901 	mov.w	r9, #1
 800a4ce:	e7d1      	b.n	800a474 <__gethex+0x2d0>
 800a4d0:	2501      	movs	r5, #1
 800a4d2:	e7e2      	b.n	800a49a <__gethex+0x2f6>
 800a4d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4d6:	f1c3 0301 	rsb	r3, r3, #1
 800a4da:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a4dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d0f0      	beq.n	800a4c4 <__gethex+0x320>
 800a4e2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a4e6:	f104 0314 	add.w	r3, r4, #20
 800a4ea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a4ee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a4f2:	f04f 0c00 	mov.w	ip, #0
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4fc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a500:	d01b      	beq.n	800a53a <__gethex+0x396>
 800a502:	3201      	adds	r2, #1
 800a504:	6002      	str	r2, [r0, #0]
 800a506:	2d02      	cmp	r5, #2
 800a508:	f104 0314 	add.w	r3, r4, #20
 800a50c:	d13c      	bne.n	800a588 <__gethex+0x3e4>
 800a50e:	f8d8 2000 	ldr.w	r2, [r8]
 800a512:	3a01      	subs	r2, #1
 800a514:	42b2      	cmp	r2, r6
 800a516:	d109      	bne.n	800a52c <__gethex+0x388>
 800a518:	1171      	asrs	r1, r6, #5
 800a51a:	2201      	movs	r2, #1
 800a51c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a520:	f006 061f 	and.w	r6, r6, #31
 800a524:	fa02 f606 	lsl.w	r6, r2, r6
 800a528:	421e      	tst	r6, r3
 800a52a:	d13a      	bne.n	800a5a2 <__gethex+0x3fe>
 800a52c:	f045 0520 	orr.w	r5, r5, #32
 800a530:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a532:	601c      	str	r4, [r3, #0]
 800a534:	9b02      	ldr	r3, [sp, #8]
 800a536:	601f      	str	r7, [r3, #0]
 800a538:	e6b0      	b.n	800a29c <__gethex+0xf8>
 800a53a:	4299      	cmp	r1, r3
 800a53c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a540:	d8d9      	bhi.n	800a4f6 <__gethex+0x352>
 800a542:	68a3      	ldr	r3, [r4, #8]
 800a544:	459b      	cmp	fp, r3
 800a546:	db17      	blt.n	800a578 <__gethex+0x3d4>
 800a548:	6861      	ldr	r1, [r4, #4]
 800a54a:	9801      	ldr	r0, [sp, #4]
 800a54c:	3101      	adds	r1, #1
 800a54e:	f7fe f80f 	bl	8008570 <_Balloc>
 800a552:	4681      	mov	r9, r0
 800a554:	b918      	cbnz	r0, 800a55e <__gethex+0x3ba>
 800a556:	4b1a      	ldr	r3, [pc, #104]	@ (800a5c0 <__gethex+0x41c>)
 800a558:	4602      	mov	r2, r0
 800a55a:	2184      	movs	r1, #132	@ 0x84
 800a55c:	e6c5      	b.n	800a2ea <__gethex+0x146>
 800a55e:	6922      	ldr	r2, [r4, #16]
 800a560:	3202      	adds	r2, #2
 800a562:	f104 010c 	add.w	r1, r4, #12
 800a566:	0092      	lsls	r2, r2, #2
 800a568:	300c      	adds	r0, #12
 800a56a:	f7fd f8a0 	bl	80076ae <memcpy>
 800a56e:	4621      	mov	r1, r4
 800a570:	9801      	ldr	r0, [sp, #4]
 800a572:	f7fe f83d 	bl	80085f0 <_Bfree>
 800a576:	464c      	mov	r4, r9
 800a578:	6923      	ldr	r3, [r4, #16]
 800a57a:	1c5a      	adds	r2, r3, #1
 800a57c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a580:	6122      	str	r2, [r4, #16]
 800a582:	2201      	movs	r2, #1
 800a584:	615a      	str	r2, [r3, #20]
 800a586:	e7be      	b.n	800a506 <__gethex+0x362>
 800a588:	6922      	ldr	r2, [r4, #16]
 800a58a:	455a      	cmp	r2, fp
 800a58c:	dd0b      	ble.n	800a5a6 <__gethex+0x402>
 800a58e:	2101      	movs	r1, #1
 800a590:	4620      	mov	r0, r4
 800a592:	f7ff fd9f 	bl	800a0d4 <rshift>
 800a596:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a59a:	3701      	adds	r7, #1
 800a59c:	42bb      	cmp	r3, r7
 800a59e:	f6ff aee0 	blt.w	800a362 <__gethex+0x1be>
 800a5a2:	2501      	movs	r5, #1
 800a5a4:	e7c2      	b.n	800a52c <__gethex+0x388>
 800a5a6:	f016 061f 	ands.w	r6, r6, #31
 800a5aa:	d0fa      	beq.n	800a5a2 <__gethex+0x3fe>
 800a5ac:	4453      	add	r3, sl
 800a5ae:	f1c6 0620 	rsb	r6, r6, #32
 800a5b2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a5b6:	f7fe f8cd 	bl	8008754 <__hi0bits>
 800a5ba:	42b0      	cmp	r0, r6
 800a5bc:	dbe7      	blt.n	800a58e <__gethex+0x3ea>
 800a5be:	e7f0      	b.n	800a5a2 <__gethex+0x3fe>
 800a5c0:	0800b135 	.word	0x0800b135

0800a5c4 <L_shift>:
 800a5c4:	f1c2 0208 	rsb	r2, r2, #8
 800a5c8:	0092      	lsls	r2, r2, #2
 800a5ca:	b570      	push	{r4, r5, r6, lr}
 800a5cc:	f1c2 0620 	rsb	r6, r2, #32
 800a5d0:	6843      	ldr	r3, [r0, #4]
 800a5d2:	6804      	ldr	r4, [r0, #0]
 800a5d4:	fa03 f506 	lsl.w	r5, r3, r6
 800a5d8:	432c      	orrs	r4, r5
 800a5da:	40d3      	lsrs	r3, r2
 800a5dc:	6004      	str	r4, [r0, #0]
 800a5de:	f840 3f04 	str.w	r3, [r0, #4]!
 800a5e2:	4288      	cmp	r0, r1
 800a5e4:	d3f4      	bcc.n	800a5d0 <L_shift+0xc>
 800a5e6:	bd70      	pop	{r4, r5, r6, pc}

0800a5e8 <__match>:
 800a5e8:	b530      	push	{r4, r5, lr}
 800a5ea:	6803      	ldr	r3, [r0, #0]
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5f2:	b914      	cbnz	r4, 800a5fa <__match+0x12>
 800a5f4:	6003      	str	r3, [r0, #0]
 800a5f6:	2001      	movs	r0, #1
 800a5f8:	bd30      	pop	{r4, r5, pc}
 800a5fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5fe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a602:	2d19      	cmp	r5, #25
 800a604:	bf98      	it	ls
 800a606:	3220      	addls	r2, #32
 800a608:	42a2      	cmp	r2, r4
 800a60a:	d0f0      	beq.n	800a5ee <__match+0x6>
 800a60c:	2000      	movs	r0, #0
 800a60e:	e7f3      	b.n	800a5f8 <__match+0x10>

0800a610 <__hexnan>:
 800a610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a614:	680b      	ldr	r3, [r1, #0]
 800a616:	6801      	ldr	r1, [r0, #0]
 800a618:	115e      	asrs	r6, r3, #5
 800a61a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a61e:	f013 031f 	ands.w	r3, r3, #31
 800a622:	b087      	sub	sp, #28
 800a624:	bf18      	it	ne
 800a626:	3604      	addne	r6, #4
 800a628:	2500      	movs	r5, #0
 800a62a:	1f37      	subs	r7, r6, #4
 800a62c:	4682      	mov	sl, r0
 800a62e:	4690      	mov	r8, r2
 800a630:	9301      	str	r3, [sp, #4]
 800a632:	f846 5c04 	str.w	r5, [r6, #-4]
 800a636:	46b9      	mov	r9, r7
 800a638:	463c      	mov	r4, r7
 800a63a:	9502      	str	r5, [sp, #8]
 800a63c:	46ab      	mov	fp, r5
 800a63e:	784a      	ldrb	r2, [r1, #1]
 800a640:	1c4b      	adds	r3, r1, #1
 800a642:	9303      	str	r3, [sp, #12]
 800a644:	b342      	cbz	r2, 800a698 <__hexnan+0x88>
 800a646:	4610      	mov	r0, r2
 800a648:	9105      	str	r1, [sp, #20]
 800a64a:	9204      	str	r2, [sp, #16]
 800a64c:	f7ff fd94 	bl	800a178 <__hexdig_fun>
 800a650:	2800      	cmp	r0, #0
 800a652:	d151      	bne.n	800a6f8 <__hexnan+0xe8>
 800a654:	9a04      	ldr	r2, [sp, #16]
 800a656:	9905      	ldr	r1, [sp, #20]
 800a658:	2a20      	cmp	r2, #32
 800a65a:	d818      	bhi.n	800a68e <__hexnan+0x7e>
 800a65c:	9b02      	ldr	r3, [sp, #8]
 800a65e:	459b      	cmp	fp, r3
 800a660:	dd13      	ble.n	800a68a <__hexnan+0x7a>
 800a662:	454c      	cmp	r4, r9
 800a664:	d206      	bcs.n	800a674 <__hexnan+0x64>
 800a666:	2d07      	cmp	r5, #7
 800a668:	dc04      	bgt.n	800a674 <__hexnan+0x64>
 800a66a:	462a      	mov	r2, r5
 800a66c:	4649      	mov	r1, r9
 800a66e:	4620      	mov	r0, r4
 800a670:	f7ff ffa8 	bl	800a5c4 <L_shift>
 800a674:	4544      	cmp	r4, r8
 800a676:	d952      	bls.n	800a71e <__hexnan+0x10e>
 800a678:	2300      	movs	r3, #0
 800a67a:	f1a4 0904 	sub.w	r9, r4, #4
 800a67e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a682:	f8cd b008 	str.w	fp, [sp, #8]
 800a686:	464c      	mov	r4, r9
 800a688:	461d      	mov	r5, r3
 800a68a:	9903      	ldr	r1, [sp, #12]
 800a68c:	e7d7      	b.n	800a63e <__hexnan+0x2e>
 800a68e:	2a29      	cmp	r2, #41	@ 0x29
 800a690:	d157      	bne.n	800a742 <__hexnan+0x132>
 800a692:	3102      	adds	r1, #2
 800a694:	f8ca 1000 	str.w	r1, [sl]
 800a698:	f1bb 0f00 	cmp.w	fp, #0
 800a69c:	d051      	beq.n	800a742 <__hexnan+0x132>
 800a69e:	454c      	cmp	r4, r9
 800a6a0:	d206      	bcs.n	800a6b0 <__hexnan+0xa0>
 800a6a2:	2d07      	cmp	r5, #7
 800a6a4:	dc04      	bgt.n	800a6b0 <__hexnan+0xa0>
 800a6a6:	462a      	mov	r2, r5
 800a6a8:	4649      	mov	r1, r9
 800a6aa:	4620      	mov	r0, r4
 800a6ac:	f7ff ff8a 	bl	800a5c4 <L_shift>
 800a6b0:	4544      	cmp	r4, r8
 800a6b2:	d936      	bls.n	800a722 <__hexnan+0x112>
 800a6b4:	f1a8 0204 	sub.w	r2, r8, #4
 800a6b8:	4623      	mov	r3, r4
 800a6ba:	f853 1b04 	ldr.w	r1, [r3], #4
 800a6be:	f842 1f04 	str.w	r1, [r2, #4]!
 800a6c2:	429f      	cmp	r7, r3
 800a6c4:	d2f9      	bcs.n	800a6ba <__hexnan+0xaa>
 800a6c6:	1b3b      	subs	r3, r7, r4
 800a6c8:	f023 0303 	bic.w	r3, r3, #3
 800a6cc:	3304      	adds	r3, #4
 800a6ce:	3401      	adds	r4, #1
 800a6d0:	3e03      	subs	r6, #3
 800a6d2:	42b4      	cmp	r4, r6
 800a6d4:	bf88      	it	hi
 800a6d6:	2304      	movhi	r3, #4
 800a6d8:	4443      	add	r3, r8
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f843 2b04 	str.w	r2, [r3], #4
 800a6e0:	429f      	cmp	r7, r3
 800a6e2:	d2fb      	bcs.n	800a6dc <__hexnan+0xcc>
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	b91b      	cbnz	r3, 800a6f0 <__hexnan+0xe0>
 800a6e8:	4547      	cmp	r7, r8
 800a6ea:	d128      	bne.n	800a73e <__hexnan+0x12e>
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	603b      	str	r3, [r7, #0]
 800a6f0:	2005      	movs	r0, #5
 800a6f2:	b007      	add	sp, #28
 800a6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6f8:	3501      	adds	r5, #1
 800a6fa:	2d08      	cmp	r5, #8
 800a6fc:	f10b 0b01 	add.w	fp, fp, #1
 800a700:	dd06      	ble.n	800a710 <__hexnan+0x100>
 800a702:	4544      	cmp	r4, r8
 800a704:	d9c1      	bls.n	800a68a <__hexnan+0x7a>
 800a706:	2300      	movs	r3, #0
 800a708:	f844 3c04 	str.w	r3, [r4, #-4]
 800a70c:	2501      	movs	r5, #1
 800a70e:	3c04      	subs	r4, #4
 800a710:	6822      	ldr	r2, [r4, #0]
 800a712:	f000 000f 	and.w	r0, r0, #15
 800a716:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a71a:	6020      	str	r0, [r4, #0]
 800a71c:	e7b5      	b.n	800a68a <__hexnan+0x7a>
 800a71e:	2508      	movs	r5, #8
 800a720:	e7b3      	b.n	800a68a <__hexnan+0x7a>
 800a722:	9b01      	ldr	r3, [sp, #4]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d0dd      	beq.n	800a6e4 <__hexnan+0xd4>
 800a728:	f1c3 0320 	rsb	r3, r3, #32
 800a72c:	f04f 32ff 	mov.w	r2, #4294967295
 800a730:	40da      	lsrs	r2, r3
 800a732:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a736:	4013      	ands	r3, r2
 800a738:	f846 3c04 	str.w	r3, [r6, #-4]
 800a73c:	e7d2      	b.n	800a6e4 <__hexnan+0xd4>
 800a73e:	3f04      	subs	r7, #4
 800a740:	e7d0      	b.n	800a6e4 <__hexnan+0xd4>
 800a742:	2004      	movs	r0, #4
 800a744:	e7d5      	b.n	800a6f2 <__hexnan+0xe2>

0800a746 <__ascii_mbtowc>:
 800a746:	b082      	sub	sp, #8
 800a748:	b901      	cbnz	r1, 800a74c <__ascii_mbtowc+0x6>
 800a74a:	a901      	add	r1, sp, #4
 800a74c:	b142      	cbz	r2, 800a760 <__ascii_mbtowc+0x1a>
 800a74e:	b14b      	cbz	r3, 800a764 <__ascii_mbtowc+0x1e>
 800a750:	7813      	ldrb	r3, [r2, #0]
 800a752:	600b      	str	r3, [r1, #0]
 800a754:	7812      	ldrb	r2, [r2, #0]
 800a756:	1e10      	subs	r0, r2, #0
 800a758:	bf18      	it	ne
 800a75a:	2001      	movne	r0, #1
 800a75c:	b002      	add	sp, #8
 800a75e:	4770      	bx	lr
 800a760:	4610      	mov	r0, r2
 800a762:	e7fb      	b.n	800a75c <__ascii_mbtowc+0x16>
 800a764:	f06f 0001 	mvn.w	r0, #1
 800a768:	e7f8      	b.n	800a75c <__ascii_mbtowc+0x16>

0800a76a <_realloc_r>:
 800a76a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a76e:	4680      	mov	r8, r0
 800a770:	4615      	mov	r5, r2
 800a772:	460c      	mov	r4, r1
 800a774:	b921      	cbnz	r1, 800a780 <_realloc_r+0x16>
 800a776:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a77a:	4611      	mov	r1, r2
 800a77c:	f7fd be6c 	b.w	8008458 <_malloc_r>
 800a780:	b92a      	cbnz	r2, 800a78e <_realloc_r+0x24>
 800a782:	f7fd fdf5 	bl	8008370 <_free_r>
 800a786:	2400      	movs	r4, #0
 800a788:	4620      	mov	r0, r4
 800a78a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a78e:	f000 f840 	bl	800a812 <_malloc_usable_size_r>
 800a792:	4285      	cmp	r5, r0
 800a794:	4606      	mov	r6, r0
 800a796:	d802      	bhi.n	800a79e <_realloc_r+0x34>
 800a798:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a79c:	d8f4      	bhi.n	800a788 <_realloc_r+0x1e>
 800a79e:	4629      	mov	r1, r5
 800a7a0:	4640      	mov	r0, r8
 800a7a2:	f7fd fe59 	bl	8008458 <_malloc_r>
 800a7a6:	4607      	mov	r7, r0
 800a7a8:	2800      	cmp	r0, #0
 800a7aa:	d0ec      	beq.n	800a786 <_realloc_r+0x1c>
 800a7ac:	42b5      	cmp	r5, r6
 800a7ae:	462a      	mov	r2, r5
 800a7b0:	4621      	mov	r1, r4
 800a7b2:	bf28      	it	cs
 800a7b4:	4632      	movcs	r2, r6
 800a7b6:	f7fc ff7a 	bl	80076ae <memcpy>
 800a7ba:	4621      	mov	r1, r4
 800a7bc:	4640      	mov	r0, r8
 800a7be:	f7fd fdd7 	bl	8008370 <_free_r>
 800a7c2:	463c      	mov	r4, r7
 800a7c4:	e7e0      	b.n	800a788 <_realloc_r+0x1e>

0800a7c6 <__ascii_wctomb>:
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	4608      	mov	r0, r1
 800a7ca:	b141      	cbz	r1, 800a7de <__ascii_wctomb+0x18>
 800a7cc:	2aff      	cmp	r2, #255	@ 0xff
 800a7ce:	d904      	bls.n	800a7da <__ascii_wctomb+0x14>
 800a7d0:	228a      	movs	r2, #138	@ 0x8a
 800a7d2:	601a      	str	r2, [r3, #0]
 800a7d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a7d8:	4770      	bx	lr
 800a7da:	700a      	strb	r2, [r1, #0]
 800a7dc:	2001      	movs	r0, #1
 800a7de:	4770      	bx	lr

0800a7e0 <fiprintf>:
 800a7e0:	b40e      	push	{r1, r2, r3}
 800a7e2:	b503      	push	{r0, r1, lr}
 800a7e4:	4601      	mov	r1, r0
 800a7e6:	ab03      	add	r3, sp, #12
 800a7e8:	4805      	ldr	r0, [pc, #20]	@ (800a800 <fiprintf+0x20>)
 800a7ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7ee:	6800      	ldr	r0, [r0, #0]
 800a7f0:	9301      	str	r3, [sp, #4]
 800a7f2:	f000 f83f 	bl	800a874 <_vfiprintf_r>
 800a7f6:	b002      	add	sp, #8
 800a7f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7fc:	b003      	add	sp, #12
 800a7fe:	4770      	bx	lr
 800a800:	2000001c 	.word	0x2000001c

0800a804 <abort>:
 800a804:	b508      	push	{r3, lr}
 800a806:	2006      	movs	r0, #6
 800a808:	f000 fa08 	bl	800ac1c <raise>
 800a80c:	2001      	movs	r0, #1
 800a80e:	f7f7 fc67 	bl	80020e0 <_exit>

0800a812 <_malloc_usable_size_r>:
 800a812:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a816:	1f18      	subs	r0, r3, #4
 800a818:	2b00      	cmp	r3, #0
 800a81a:	bfbc      	itt	lt
 800a81c:	580b      	ldrlt	r3, [r1, r0]
 800a81e:	18c0      	addlt	r0, r0, r3
 800a820:	4770      	bx	lr

0800a822 <__sfputc_r>:
 800a822:	6893      	ldr	r3, [r2, #8]
 800a824:	3b01      	subs	r3, #1
 800a826:	2b00      	cmp	r3, #0
 800a828:	b410      	push	{r4}
 800a82a:	6093      	str	r3, [r2, #8]
 800a82c:	da08      	bge.n	800a840 <__sfputc_r+0x1e>
 800a82e:	6994      	ldr	r4, [r2, #24]
 800a830:	42a3      	cmp	r3, r4
 800a832:	db01      	blt.n	800a838 <__sfputc_r+0x16>
 800a834:	290a      	cmp	r1, #10
 800a836:	d103      	bne.n	800a840 <__sfputc_r+0x1e>
 800a838:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a83c:	f000 b932 	b.w	800aaa4 <__swbuf_r>
 800a840:	6813      	ldr	r3, [r2, #0]
 800a842:	1c58      	adds	r0, r3, #1
 800a844:	6010      	str	r0, [r2, #0]
 800a846:	7019      	strb	r1, [r3, #0]
 800a848:	4608      	mov	r0, r1
 800a84a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a84e:	4770      	bx	lr

0800a850 <__sfputs_r>:
 800a850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a852:	4606      	mov	r6, r0
 800a854:	460f      	mov	r7, r1
 800a856:	4614      	mov	r4, r2
 800a858:	18d5      	adds	r5, r2, r3
 800a85a:	42ac      	cmp	r4, r5
 800a85c:	d101      	bne.n	800a862 <__sfputs_r+0x12>
 800a85e:	2000      	movs	r0, #0
 800a860:	e007      	b.n	800a872 <__sfputs_r+0x22>
 800a862:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a866:	463a      	mov	r2, r7
 800a868:	4630      	mov	r0, r6
 800a86a:	f7ff ffda 	bl	800a822 <__sfputc_r>
 800a86e:	1c43      	adds	r3, r0, #1
 800a870:	d1f3      	bne.n	800a85a <__sfputs_r+0xa>
 800a872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a874 <_vfiprintf_r>:
 800a874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a878:	460d      	mov	r5, r1
 800a87a:	b09d      	sub	sp, #116	@ 0x74
 800a87c:	4614      	mov	r4, r2
 800a87e:	4698      	mov	r8, r3
 800a880:	4606      	mov	r6, r0
 800a882:	b118      	cbz	r0, 800a88c <_vfiprintf_r+0x18>
 800a884:	6a03      	ldr	r3, [r0, #32]
 800a886:	b90b      	cbnz	r3, 800a88c <_vfiprintf_r+0x18>
 800a888:	f7fc fdc4 	bl	8007414 <__sinit>
 800a88c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a88e:	07d9      	lsls	r1, r3, #31
 800a890:	d405      	bmi.n	800a89e <_vfiprintf_r+0x2a>
 800a892:	89ab      	ldrh	r3, [r5, #12]
 800a894:	059a      	lsls	r2, r3, #22
 800a896:	d402      	bmi.n	800a89e <_vfiprintf_r+0x2a>
 800a898:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a89a:	f7fc ff06 	bl	80076aa <__retarget_lock_acquire_recursive>
 800a89e:	89ab      	ldrh	r3, [r5, #12]
 800a8a0:	071b      	lsls	r3, r3, #28
 800a8a2:	d501      	bpl.n	800a8a8 <_vfiprintf_r+0x34>
 800a8a4:	692b      	ldr	r3, [r5, #16]
 800a8a6:	b99b      	cbnz	r3, 800a8d0 <_vfiprintf_r+0x5c>
 800a8a8:	4629      	mov	r1, r5
 800a8aa:	4630      	mov	r0, r6
 800a8ac:	f000 f938 	bl	800ab20 <__swsetup_r>
 800a8b0:	b170      	cbz	r0, 800a8d0 <_vfiprintf_r+0x5c>
 800a8b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a8b4:	07dc      	lsls	r4, r3, #31
 800a8b6:	d504      	bpl.n	800a8c2 <_vfiprintf_r+0x4e>
 800a8b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8bc:	b01d      	add	sp, #116	@ 0x74
 800a8be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8c2:	89ab      	ldrh	r3, [r5, #12]
 800a8c4:	0598      	lsls	r0, r3, #22
 800a8c6:	d4f7      	bmi.n	800a8b8 <_vfiprintf_r+0x44>
 800a8c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a8ca:	f7fc feef 	bl	80076ac <__retarget_lock_release_recursive>
 800a8ce:	e7f3      	b.n	800a8b8 <_vfiprintf_r+0x44>
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8d4:	2320      	movs	r3, #32
 800a8d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a8da:	f8cd 800c 	str.w	r8, [sp, #12]
 800a8de:	2330      	movs	r3, #48	@ 0x30
 800a8e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800aa90 <_vfiprintf_r+0x21c>
 800a8e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a8e8:	f04f 0901 	mov.w	r9, #1
 800a8ec:	4623      	mov	r3, r4
 800a8ee:	469a      	mov	sl, r3
 800a8f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8f4:	b10a      	cbz	r2, 800a8fa <_vfiprintf_r+0x86>
 800a8f6:	2a25      	cmp	r2, #37	@ 0x25
 800a8f8:	d1f9      	bne.n	800a8ee <_vfiprintf_r+0x7a>
 800a8fa:	ebba 0b04 	subs.w	fp, sl, r4
 800a8fe:	d00b      	beq.n	800a918 <_vfiprintf_r+0xa4>
 800a900:	465b      	mov	r3, fp
 800a902:	4622      	mov	r2, r4
 800a904:	4629      	mov	r1, r5
 800a906:	4630      	mov	r0, r6
 800a908:	f7ff ffa2 	bl	800a850 <__sfputs_r>
 800a90c:	3001      	adds	r0, #1
 800a90e:	f000 80a7 	beq.w	800aa60 <_vfiprintf_r+0x1ec>
 800a912:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a914:	445a      	add	r2, fp
 800a916:	9209      	str	r2, [sp, #36]	@ 0x24
 800a918:	f89a 3000 	ldrb.w	r3, [sl]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	f000 809f 	beq.w	800aa60 <_vfiprintf_r+0x1ec>
 800a922:	2300      	movs	r3, #0
 800a924:	f04f 32ff 	mov.w	r2, #4294967295
 800a928:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a92c:	f10a 0a01 	add.w	sl, sl, #1
 800a930:	9304      	str	r3, [sp, #16]
 800a932:	9307      	str	r3, [sp, #28]
 800a934:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a938:	931a      	str	r3, [sp, #104]	@ 0x68
 800a93a:	4654      	mov	r4, sl
 800a93c:	2205      	movs	r2, #5
 800a93e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a942:	4853      	ldr	r0, [pc, #332]	@ (800aa90 <_vfiprintf_r+0x21c>)
 800a944:	f7f5 fc44 	bl	80001d0 <memchr>
 800a948:	9a04      	ldr	r2, [sp, #16]
 800a94a:	b9d8      	cbnz	r0, 800a984 <_vfiprintf_r+0x110>
 800a94c:	06d1      	lsls	r1, r2, #27
 800a94e:	bf44      	itt	mi
 800a950:	2320      	movmi	r3, #32
 800a952:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a956:	0713      	lsls	r3, r2, #28
 800a958:	bf44      	itt	mi
 800a95a:	232b      	movmi	r3, #43	@ 0x2b
 800a95c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a960:	f89a 3000 	ldrb.w	r3, [sl]
 800a964:	2b2a      	cmp	r3, #42	@ 0x2a
 800a966:	d015      	beq.n	800a994 <_vfiprintf_r+0x120>
 800a968:	9a07      	ldr	r2, [sp, #28]
 800a96a:	4654      	mov	r4, sl
 800a96c:	2000      	movs	r0, #0
 800a96e:	f04f 0c0a 	mov.w	ip, #10
 800a972:	4621      	mov	r1, r4
 800a974:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a978:	3b30      	subs	r3, #48	@ 0x30
 800a97a:	2b09      	cmp	r3, #9
 800a97c:	d94b      	bls.n	800aa16 <_vfiprintf_r+0x1a2>
 800a97e:	b1b0      	cbz	r0, 800a9ae <_vfiprintf_r+0x13a>
 800a980:	9207      	str	r2, [sp, #28]
 800a982:	e014      	b.n	800a9ae <_vfiprintf_r+0x13a>
 800a984:	eba0 0308 	sub.w	r3, r0, r8
 800a988:	fa09 f303 	lsl.w	r3, r9, r3
 800a98c:	4313      	orrs	r3, r2
 800a98e:	9304      	str	r3, [sp, #16]
 800a990:	46a2      	mov	sl, r4
 800a992:	e7d2      	b.n	800a93a <_vfiprintf_r+0xc6>
 800a994:	9b03      	ldr	r3, [sp, #12]
 800a996:	1d19      	adds	r1, r3, #4
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	9103      	str	r1, [sp, #12]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	bfbb      	ittet	lt
 800a9a0:	425b      	neglt	r3, r3
 800a9a2:	f042 0202 	orrlt.w	r2, r2, #2
 800a9a6:	9307      	strge	r3, [sp, #28]
 800a9a8:	9307      	strlt	r3, [sp, #28]
 800a9aa:	bfb8      	it	lt
 800a9ac:	9204      	strlt	r2, [sp, #16]
 800a9ae:	7823      	ldrb	r3, [r4, #0]
 800a9b0:	2b2e      	cmp	r3, #46	@ 0x2e
 800a9b2:	d10a      	bne.n	800a9ca <_vfiprintf_r+0x156>
 800a9b4:	7863      	ldrb	r3, [r4, #1]
 800a9b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a9b8:	d132      	bne.n	800aa20 <_vfiprintf_r+0x1ac>
 800a9ba:	9b03      	ldr	r3, [sp, #12]
 800a9bc:	1d1a      	adds	r2, r3, #4
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	9203      	str	r2, [sp, #12]
 800a9c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a9c6:	3402      	adds	r4, #2
 800a9c8:	9305      	str	r3, [sp, #20]
 800a9ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800aaa0 <_vfiprintf_r+0x22c>
 800a9ce:	7821      	ldrb	r1, [r4, #0]
 800a9d0:	2203      	movs	r2, #3
 800a9d2:	4650      	mov	r0, sl
 800a9d4:	f7f5 fbfc 	bl	80001d0 <memchr>
 800a9d8:	b138      	cbz	r0, 800a9ea <_vfiprintf_r+0x176>
 800a9da:	9b04      	ldr	r3, [sp, #16]
 800a9dc:	eba0 000a 	sub.w	r0, r0, sl
 800a9e0:	2240      	movs	r2, #64	@ 0x40
 800a9e2:	4082      	lsls	r2, r0
 800a9e4:	4313      	orrs	r3, r2
 800a9e6:	3401      	adds	r4, #1
 800a9e8:	9304      	str	r3, [sp, #16]
 800a9ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9ee:	4829      	ldr	r0, [pc, #164]	@ (800aa94 <_vfiprintf_r+0x220>)
 800a9f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a9f4:	2206      	movs	r2, #6
 800a9f6:	f7f5 fbeb 	bl	80001d0 <memchr>
 800a9fa:	2800      	cmp	r0, #0
 800a9fc:	d03f      	beq.n	800aa7e <_vfiprintf_r+0x20a>
 800a9fe:	4b26      	ldr	r3, [pc, #152]	@ (800aa98 <_vfiprintf_r+0x224>)
 800aa00:	bb1b      	cbnz	r3, 800aa4a <_vfiprintf_r+0x1d6>
 800aa02:	9b03      	ldr	r3, [sp, #12]
 800aa04:	3307      	adds	r3, #7
 800aa06:	f023 0307 	bic.w	r3, r3, #7
 800aa0a:	3308      	adds	r3, #8
 800aa0c:	9303      	str	r3, [sp, #12]
 800aa0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa10:	443b      	add	r3, r7
 800aa12:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa14:	e76a      	b.n	800a8ec <_vfiprintf_r+0x78>
 800aa16:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa1a:	460c      	mov	r4, r1
 800aa1c:	2001      	movs	r0, #1
 800aa1e:	e7a8      	b.n	800a972 <_vfiprintf_r+0xfe>
 800aa20:	2300      	movs	r3, #0
 800aa22:	3401      	adds	r4, #1
 800aa24:	9305      	str	r3, [sp, #20]
 800aa26:	4619      	mov	r1, r3
 800aa28:	f04f 0c0a 	mov.w	ip, #10
 800aa2c:	4620      	mov	r0, r4
 800aa2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa32:	3a30      	subs	r2, #48	@ 0x30
 800aa34:	2a09      	cmp	r2, #9
 800aa36:	d903      	bls.n	800aa40 <_vfiprintf_r+0x1cc>
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d0c6      	beq.n	800a9ca <_vfiprintf_r+0x156>
 800aa3c:	9105      	str	r1, [sp, #20]
 800aa3e:	e7c4      	b.n	800a9ca <_vfiprintf_r+0x156>
 800aa40:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa44:	4604      	mov	r4, r0
 800aa46:	2301      	movs	r3, #1
 800aa48:	e7f0      	b.n	800aa2c <_vfiprintf_r+0x1b8>
 800aa4a:	ab03      	add	r3, sp, #12
 800aa4c:	9300      	str	r3, [sp, #0]
 800aa4e:	462a      	mov	r2, r5
 800aa50:	4b12      	ldr	r3, [pc, #72]	@ (800aa9c <_vfiprintf_r+0x228>)
 800aa52:	a904      	add	r1, sp, #16
 800aa54:	4630      	mov	r0, r6
 800aa56:	f7fb fe85 	bl	8006764 <_printf_float>
 800aa5a:	4607      	mov	r7, r0
 800aa5c:	1c78      	adds	r0, r7, #1
 800aa5e:	d1d6      	bne.n	800aa0e <_vfiprintf_r+0x19a>
 800aa60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa62:	07d9      	lsls	r1, r3, #31
 800aa64:	d405      	bmi.n	800aa72 <_vfiprintf_r+0x1fe>
 800aa66:	89ab      	ldrh	r3, [r5, #12]
 800aa68:	059a      	lsls	r2, r3, #22
 800aa6a:	d402      	bmi.n	800aa72 <_vfiprintf_r+0x1fe>
 800aa6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa6e:	f7fc fe1d 	bl	80076ac <__retarget_lock_release_recursive>
 800aa72:	89ab      	ldrh	r3, [r5, #12]
 800aa74:	065b      	lsls	r3, r3, #25
 800aa76:	f53f af1f 	bmi.w	800a8b8 <_vfiprintf_r+0x44>
 800aa7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aa7c:	e71e      	b.n	800a8bc <_vfiprintf_r+0x48>
 800aa7e:	ab03      	add	r3, sp, #12
 800aa80:	9300      	str	r3, [sp, #0]
 800aa82:	462a      	mov	r2, r5
 800aa84:	4b05      	ldr	r3, [pc, #20]	@ (800aa9c <_vfiprintf_r+0x228>)
 800aa86:	a904      	add	r1, sp, #16
 800aa88:	4630      	mov	r0, r6
 800aa8a:	f7fc f903 	bl	8006c94 <_printf_i>
 800aa8e:	e7e4      	b.n	800aa5a <_vfiprintf_r+0x1e6>
 800aa90:	0800b3f9 	.word	0x0800b3f9
 800aa94:	0800b403 	.word	0x0800b403
 800aa98:	08006765 	.word	0x08006765
 800aa9c:	0800a851 	.word	0x0800a851
 800aaa0:	0800b3ff 	.word	0x0800b3ff

0800aaa4 <__swbuf_r>:
 800aaa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaa6:	460e      	mov	r6, r1
 800aaa8:	4614      	mov	r4, r2
 800aaaa:	4605      	mov	r5, r0
 800aaac:	b118      	cbz	r0, 800aab6 <__swbuf_r+0x12>
 800aaae:	6a03      	ldr	r3, [r0, #32]
 800aab0:	b90b      	cbnz	r3, 800aab6 <__swbuf_r+0x12>
 800aab2:	f7fc fcaf 	bl	8007414 <__sinit>
 800aab6:	69a3      	ldr	r3, [r4, #24]
 800aab8:	60a3      	str	r3, [r4, #8]
 800aaba:	89a3      	ldrh	r3, [r4, #12]
 800aabc:	071a      	lsls	r2, r3, #28
 800aabe:	d501      	bpl.n	800aac4 <__swbuf_r+0x20>
 800aac0:	6923      	ldr	r3, [r4, #16]
 800aac2:	b943      	cbnz	r3, 800aad6 <__swbuf_r+0x32>
 800aac4:	4621      	mov	r1, r4
 800aac6:	4628      	mov	r0, r5
 800aac8:	f000 f82a 	bl	800ab20 <__swsetup_r>
 800aacc:	b118      	cbz	r0, 800aad6 <__swbuf_r+0x32>
 800aace:	f04f 37ff 	mov.w	r7, #4294967295
 800aad2:	4638      	mov	r0, r7
 800aad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aad6:	6823      	ldr	r3, [r4, #0]
 800aad8:	6922      	ldr	r2, [r4, #16]
 800aada:	1a98      	subs	r0, r3, r2
 800aadc:	6963      	ldr	r3, [r4, #20]
 800aade:	b2f6      	uxtb	r6, r6
 800aae0:	4283      	cmp	r3, r0
 800aae2:	4637      	mov	r7, r6
 800aae4:	dc05      	bgt.n	800aaf2 <__swbuf_r+0x4e>
 800aae6:	4621      	mov	r1, r4
 800aae8:	4628      	mov	r0, r5
 800aaea:	f7ff fa53 	bl	8009f94 <_fflush_r>
 800aaee:	2800      	cmp	r0, #0
 800aaf0:	d1ed      	bne.n	800aace <__swbuf_r+0x2a>
 800aaf2:	68a3      	ldr	r3, [r4, #8]
 800aaf4:	3b01      	subs	r3, #1
 800aaf6:	60a3      	str	r3, [r4, #8]
 800aaf8:	6823      	ldr	r3, [r4, #0]
 800aafa:	1c5a      	adds	r2, r3, #1
 800aafc:	6022      	str	r2, [r4, #0]
 800aafe:	701e      	strb	r6, [r3, #0]
 800ab00:	6962      	ldr	r2, [r4, #20]
 800ab02:	1c43      	adds	r3, r0, #1
 800ab04:	429a      	cmp	r2, r3
 800ab06:	d004      	beq.n	800ab12 <__swbuf_r+0x6e>
 800ab08:	89a3      	ldrh	r3, [r4, #12]
 800ab0a:	07db      	lsls	r3, r3, #31
 800ab0c:	d5e1      	bpl.n	800aad2 <__swbuf_r+0x2e>
 800ab0e:	2e0a      	cmp	r6, #10
 800ab10:	d1df      	bne.n	800aad2 <__swbuf_r+0x2e>
 800ab12:	4621      	mov	r1, r4
 800ab14:	4628      	mov	r0, r5
 800ab16:	f7ff fa3d 	bl	8009f94 <_fflush_r>
 800ab1a:	2800      	cmp	r0, #0
 800ab1c:	d0d9      	beq.n	800aad2 <__swbuf_r+0x2e>
 800ab1e:	e7d6      	b.n	800aace <__swbuf_r+0x2a>

0800ab20 <__swsetup_r>:
 800ab20:	b538      	push	{r3, r4, r5, lr}
 800ab22:	4b29      	ldr	r3, [pc, #164]	@ (800abc8 <__swsetup_r+0xa8>)
 800ab24:	4605      	mov	r5, r0
 800ab26:	6818      	ldr	r0, [r3, #0]
 800ab28:	460c      	mov	r4, r1
 800ab2a:	b118      	cbz	r0, 800ab34 <__swsetup_r+0x14>
 800ab2c:	6a03      	ldr	r3, [r0, #32]
 800ab2e:	b90b      	cbnz	r3, 800ab34 <__swsetup_r+0x14>
 800ab30:	f7fc fc70 	bl	8007414 <__sinit>
 800ab34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab38:	0719      	lsls	r1, r3, #28
 800ab3a:	d422      	bmi.n	800ab82 <__swsetup_r+0x62>
 800ab3c:	06da      	lsls	r2, r3, #27
 800ab3e:	d407      	bmi.n	800ab50 <__swsetup_r+0x30>
 800ab40:	2209      	movs	r2, #9
 800ab42:	602a      	str	r2, [r5, #0]
 800ab44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab48:	81a3      	strh	r3, [r4, #12]
 800ab4a:	f04f 30ff 	mov.w	r0, #4294967295
 800ab4e:	e033      	b.n	800abb8 <__swsetup_r+0x98>
 800ab50:	0758      	lsls	r0, r3, #29
 800ab52:	d512      	bpl.n	800ab7a <__swsetup_r+0x5a>
 800ab54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ab56:	b141      	cbz	r1, 800ab6a <__swsetup_r+0x4a>
 800ab58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ab5c:	4299      	cmp	r1, r3
 800ab5e:	d002      	beq.n	800ab66 <__swsetup_r+0x46>
 800ab60:	4628      	mov	r0, r5
 800ab62:	f7fd fc05 	bl	8008370 <_free_r>
 800ab66:	2300      	movs	r3, #0
 800ab68:	6363      	str	r3, [r4, #52]	@ 0x34
 800ab6a:	89a3      	ldrh	r3, [r4, #12]
 800ab6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ab70:	81a3      	strh	r3, [r4, #12]
 800ab72:	2300      	movs	r3, #0
 800ab74:	6063      	str	r3, [r4, #4]
 800ab76:	6923      	ldr	r3, [r4, #16]
 800ab78:	6023      	str	r3, [r4, #0]
 800ab7a:	89a3      	ldrh	r3, [r4, #12]
 800ab7c:	f043 0308 	orr.w	r3, r3, #8
 800ab80:	81a3      	strh	r3, [r4, #12]
 800ab82:	6923      	ldr	r3, [r4, #16]
 800ab84:	b94b      	cbnz	r3, 800ab9a <__swsetup_r+0x7a>
 800ab86:	89a3      	ldrh	r3, [r4, #12]
 800ab88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ab8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab90:	d003      	beq.n	800ab9a <__swsetup_r+0x7a>
 800ab92:	4621      	mov	r1, r4
 800ab94:	4628      	mov	r0, r5
 800ab96:	f000 f883 	bl	800aca0 <__smakebuf_r>
 800ab9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab9e:	f013 0201 	ands.w	r2, r3, #1
 800aba2:	d00a      	beq.n	800abba <__swsetup_r+0x9a>
 800aba4:	2200      	movs	r2, #0
 800aba6:	60a2      	str	r2, [r4, #8]
 800aba8:	6962      	ldr	r2, [r4, #20]
 800abaa:	4252      	negs	r2, r2
 800abac:	61a2      	str	r2, [r4, #24]
 800abae:	6922      	ldr	r2, [r4, #16]
 800abb0:	b942      	cbnz	r2, 800abc4 <__swsetup_r+0xa4>
 800abb2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800abb6:	d1c5      	bne.n	800ab44 <__swsetup_r+0x24>
 800abb8:	bd38      	pop	{r3, r4, r5, pc}
 800abba:	0799      	lsls	r1, r3, #30
 800abbc:	bf58      	it	pl
 800abbe:	6962      	ldrpl	r2, [r4, #20]
 800abc0:	60a2      	str	r2, [r4, #8]
 800abc2:	e7f4      	b.n	800abae <__swsetup_r+0x8e>
 800abc4:	2000      	movs	r0, #0
 800abc6:	e7f7      	b.n	800abb8 <__swsetup_r+0x98>
 800abc8:	2000001c 	.word	0x2000001c

0800abcc <_raise_r>:
 800abcc:	291f      	cmp	r1, #31
 800abce:	b538      	push	{r3, r4, r5, lr}
 800abd0:	4605      	mov	r5, r0
 800abd2:	460c      	mov	r4, r1
 800abd4:	d904      	bls.n	800abe0 <_raise_r+0x14>
 800abd6:	2316      	movs	r3, #22
 800abd8:	6003      	str	r3, [r0, #0]
 800abda:	f04f 30ff 	mov.w	r0, #4294967295
 800abde:	bd38      	pop	{r3, r4, r5, pc}
 800abe0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800abe2:	b112      	cbz	r2, 800abea <_raise_r+0x1e>
 800abe4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800abe8:	b94b      	cbnz	r3, 800abfe <_raise_r+0x32>
 800abea:	4628      	mov	r0, r5
 800abec:	f000 f830 	bl	800ac50 <_getpid_r>
 800abf0:	4622      	mov	r2, r4
 800abf2:	4601      	mov	r1, r0
 800abf4:	4628      	mov	r0, r5
 800abf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abfa:	f000 b817 	b.w	800ac2c <_kill_r>
 800abfe:	2b01      	cmp	r3, #1
 800ac00:	d00a      	beq.n	800ac18 <_raise_r+0x4c>
 800ac02:	1c59      	adds	r1, r3, #1
 800ac04:	d103      	bne.n	800ac0e <_raise_r+0x42>
 800ac06:	2316      	movs	r3, #22
 800ac08:	6003      	str	r3, [r0, #0]
 800ac0a:	2001      	movs	r0, #1
 800ac0c:	e7e7      	b.n	800abde <_raise_r+0x12>
 800ac0e:	2100      	movs	r1, #0
 800ac10:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ac14:	4620      	mov	r0, r4
 800ac16:	4798      	blx	r3
 800ac18:	2000      	movs	r0, #0
 800ac1a:	e7e0      	b.n	800abde <_raise_r+0x12>

0800ac1c <raise>:
 800ac1c:	4b02      	ldr	r3, [pc, #8]	@ (800ac28 <raise+0xc>)
 800ac1e:	4601      	mov	r1, r0
 800ac20:	6818      	ldr	r0, [r3, #0]
 800ac22:	f7ff bfd3 	b.w	800abcc <_raise_r>
 800ac26:	bf00      	nop
 800ac28:	2000001c 	.word	0x2000001c

0800ac2c <_kill_r>:
 800ac2c:	b538      	push	{r3, r4, r5, lr}
 800ac2e:	4d07      	ldr	r5, [pc, #28]	@ (800ac4c <_kill_r+0x20>)
 800ac30:	2300      	movs	r3, #0
 800ac32:	4604      	mov	r4, r0
 800ac34:	4608      	mov	r0, r1
 800ac36:	4611      	mov	r1, r2
 800ac38:	602b      	str	r3, [r5, #0]
 800ac3a:	f7f7 fa41 	bl	80020c0 <_kill>
 800ac3e:	1c43      	adds	r3, r0, #1
 800ac40:	d102      	bne.n	800ac48 <_kill_r+0x1c>
 800ac42:	682b      	ldr	r3, [r5, #0]
 800ac44:	b103      	cbz	r3, 800ac48 <_kill_r+0x1c>
 800ac46:	6023      	str	r3, [r4, #0]
 800ac48:	bd38      	pop	{r3, r4, r5, pc}
 800ac4a:	bf00      	nop
 800ac4c:	200045e4 	.word	0x200045e4

0800ac50 <_getpid_r>:
 800ac50:	f7f7 ba2e 	b.w	80020b0 <_getpid>

0800ac54 <__swhatbuf_r>:
 800ac54:	b570      	push	{r4, r5, r6, lr}
 800ac56:	460c      	mov	r4, r1
 800ac58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac5c:	2900      	cmp	r1, #0
 800ac5e:	b096      	sub	sp, #88	@ 0x58
 800ac60:	4615      	mov	r5, r2
 800ac62:	461e      	mov	r6, r3
 800ac64:	da0d      	bge.n	800ac82 <__swhatbuf_r+0x2e>
 800ac66:	89a3      	ldrh	r3, [r4, #12]
 800ac68:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ac6c:	f04f 0100 	mov.w	r1, #0
 800ac70:	bf14      	ite	ne
 800ac72:	2340      	movne	r3, #64	@ 0x40
 800ac74:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ac78:	2000      	movs	r0, #0
 800ac7a:	6031      	str	r1, [r6, #0]
 800ac7c:	602b      	str	r3, [r5, #0]
 800ac7e:	b016      	add	sp, #88	@ 0x58
 800ac80:	bd70      	pop	{r4, r5, r6, pc}
 800ac82:	466a      	mov	r2, sp
 800ac84:	f000 f848 	bl	800ad18 <_fstat_r>
 800ac88:	2800      	cmp	r0, #0
 800ac8a:	dbec      	blt.n	800ac66 <__swhatbuf_r+0x12>
 800ac8c:	9901      	ldr	r1, [sp, #4]
 800ac8e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ac92:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ac96:	4259      	negs	r1, r3
 800ac98:	4159      	adcs	r1, r3
 800ac9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ac9e:	e7eb      	b.n	800ac78 <__swhatbuf_r+0x24>

0800aca0 <__smakebuf_r>:
 800aca0:	898b      	ldrh	r3, [r1, #12]
 800aca2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aca4:	079d      	lsls	r5, r3, #30
 800aca6:	4606      	mov	r6, r0
 800aca8:	460c      	mov	r4, r1
 800acaa:	d507      	bpl.n	800acbc <__smakebuf_r+0x1c>
 800acac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800acb0:	6023      	str	r3, [r4, #0]
 800acb2:	6123      	str	r3, [r4, #16]
 800acb4:	2301      	movs	r3, #1
 800acb6:	6163      	str	r3, [r4, #20]
 800acb8:	b003      	add	sp, #12
 800acba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acbc:	ab01      	add	r3, sp, #4
 800acbe:	466a      	mov	r2, sp
 800acc0:	f7ff ffc8 	bl	800ac54 <__swhatbuf_r>
 800acc4:	9f00      	ldr	r7, [sp, #0]
 800acc6:	4605      	mov	r5, r0
 800acc8:	4639      	mov	r1, r7
 800acca:	4630      	mov	r0, r6
 800accc:	f7fd fbc4 	bl	8008458 <_malloc_r>
 800acd0:	b948      	cbnz	r0, 800ace6 <__smakebuf_r+0x46>
 800acd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acd6:	059a      	lsls	r2, r3, #22
 800acd8:	d4ee      	bmi.n	800acb8 <__smakebuf_r+0x18>
 800acda:	f023 0303 	bic.w	r3, r3, #3
 800acde:	f043 0302 	orr.w	r3, r3, #2
 800ace2:	81a3      	strh	r3, [r4, #12]
 800ace4:	e7e2      	b.n	800acac <__smakebuf_r+0xc>
 800ace6:	89a3      	ldrh	r3, [r4, #12]
 800ace8:	6020      	str	r0, [r4, #0]
 800acea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acee:	81a3      	strh	r3, [r4, #12]
 800acf0:	9b01      	ldr	r3, [sp, #4]
 800acf2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800acf6:	b15b      	cbz	r3, 800ad10 <__smakebuf_r+0x70>
 800acf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800acfc:	4630      	mov	r0, r6
 800acfe:	f000 f81d 	bl	800ad3c <_isatty_r>
 800ad02:	b128      	cbz	r0, 800ad10 <__smakebuf_r+0x70>
 800ad04:	89a3      	ldrh	r3, [r4, #12]
 800ad06:	f023 0303 	bic.w	r3, r3, #3
 800ad0a:	f043 0301 	orr.w	r3, r3, #1
 800ad0e:	81a3      	strh	r3, [r4, #12]
 800ad10:	89a3      	ldrh	r3, [r4, #12]
 800ad12:	431d      	orrs	r5, r3
 800ad14:	81a5      	strh	r5, [r4, #12]
 800ad16:	e7cf      	b.n	800acb8 <__smakebuf_r+0x18>

0800ad18 <_fstat_r>:
 800ad18:	b538      	push	{r3, r4, r5, lr}
 800ad1a:	4d07      	ldr	r5, [pc, #28]	@ (800ad38 <_fstat_r+0x20>)
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	4604      	mov	r4, r0
 800ad20:	4608      	mov	r0, r1
 800ad22:	4611      	mov	r1, r2
 800ad24:	602b      	str	r3, [r5, #0]
 800ad26:	f7f7 fa2b 	bl	8002180 <_fstat>
 800ad2a:	1c43      	adds	r3, r0, #1
 800ad2c:	d102      	bne.n	800ad34 <_fstat_r+0x1c>
 800ad2e:	682b      	ldr	r3, [r5, #0]
 800ad30:	b103      	cbz	r3, 800ad34 <_fstat_r+0x1c>
 800ad32:	6023      	str	r3, [r4, #0]
 800ad34:	bd38      	pop	{r3, r4, r5, pc}
 800ad36:	bf00      	nop
 800ad38:	200045e4 	.word	0x200045e4

0800ad3c <_isatty_r>:
 800ad3c:	b538      	push	{r3, r4, r5, lr}
 800ad3e:	4d06      	ldr	r5, [pc, #24]	@ (800ad58 <_isatty_r+0x1c>)
 800ad40:	2300      	movs	r3, #0
 800ad42:	4604      	mov	r4, r0
 800ad44:	4608      	mov	r0, r1
 800ad46:	602b      	str	r3, [r5, #0]
 800ad48:	f7f7 fa2a 	bl	80021a0 <_isatty>
 800ad4c:	1c43      	adds	r3, r0, #1
 800ad4e:	d102      	bne.n	800ad56 <_isatty_r+0x1a>
 800ad50:	682b      	ldr	r3, [r5, #0]
 800ad52:	b103      	cbz	r3, 800ad56 <_isatty_r+0x1a>
 800ad54:	6023      	str	r3, [r4, #0]
 800ad56:	bd38      	pop	{r3, r4, r5, pc}
 800ad58:	200045e4 	.word	0x200045e4

0800ad5c <_init>:
 800ad5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad5e:	bf00      	nop
 800ad60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad62:	bc08      	pop	{r3}
 800ad64:	469e      	mov	lr, r3
 800ad66:	4770      	bx	lr

0800ad68 <_fini>:
 800ad68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad6a:	bf00      	nop
 800ad6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad6e:	bc08      	pop	{r3}
 800ad70:	469e      	mov	lr, r3
 800ad72:	4770      	bx	lr
